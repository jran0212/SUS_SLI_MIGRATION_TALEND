// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sus_sli_etl.buyer_statistics_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Buyer_Statistics_Inbound Purpose: Migrating data from IMBSBKFF to
 * BUYER_STATISTICS<br>
 * Description: Migrating data from IMBSBKFF to BUYER_STATISTICS <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Buyer_Statistics_Inbound implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (SUS_Login != null) {

				this.setProperty("SUS_Login", SUS_Login.toString());

			}

			if (SUS_Password != null) {

				this.setProperty("SUS_Password", SUS_Password.toString());

			}

			if (SUS_Database != null) {

				this.setProperty("SUS_Database", SUS_Database.toString());

			}

			if (SUS_Server != null) {

				this.setProperty("SUS_Server", SUS_Server.toString());

			}

			if (SUS_Additional_Params != null) {

				this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());

			}

			if (GIM_Schema_Migrating_Test != null) {

				this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());

			}

			if (GIM_AdditionalParams != null) {

				this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());

			}

			if (GIM_Password != null) {

				this.setProperty("GIM_Password", GIM_Password.toString());

			}

			if (GIM_Server != null) {

				this.setProperty("GIM_Server", GIM_Server.toString());

			}

			if (GIM_Database != null) {

				this.setProperty("GIM_Database", GIM_Database.toString());

			}

			if (GIM_Port != null) {

				this.setProperty("GIM_Port", GIM_Port.toString());

			}

			if (GIM_Login != null) {

				this.setProperty("GIM_Login", GIM_Login.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String SUS_Login;

		public String getSUS_Login() {
			return this.SUS_Login;
		}

		public java.lang.String SUS_Password;

		public java.lang.String getSUS_Password() {
			return this.SUS_Password;
		}

		public String SUS_Database;

		public String getSUS_Database() {
			return this.SUS_Database;
		}

		public String SUS_Server;

		public String getSUS_Server() {
			return this.SUS_Server;
		}

		public String SUS_Additional_Params;

		public String getSUS_Additional_Params() {
			return this.SUS_Additional_Params;
		}

		public String GIM_Schema_Migrating_Test;

		public String getGIM_Schema_Migrating_Test() {
			return this.GIM_Schema_Migrating_Test;
		}

		public String GIM_AdditionalParams;

		public String getGIM_AdditionalParams() {
			return this.GIM_AdditionalParams;
		}

		public java.lang.String GIM_Password;

		public java.lang.String getGIM_Password() {
			return this.GIM_Password;
		}

		public String GIM_Server;

		public String getGIM_Server() {
			return this.GIM_Server;
		}

		public String GIM_Database;

		public String getGIM_Database() {
			return this.GIM_Database;
		}

		public String GIM_Port;

		public String getGIM_Port() {
			return this.GIM_Port;
		}

		public String GIM_Login;

		public String getGIM_Login() {
			return this.GIM_Login;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Buyer_Statistics_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Buyer_Statistics_Inbound.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Buyer_Statistics_Inbound.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public java.util.Date PROCESSING_DATE;

		public java.util.Date getPROCESSING_DATE() {
			return this.PROCESSING_DATE;
		}

		public String BUYER_NO;

		public String getBUYER_NO() {
			return this.BUYER_NO;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public BigDecimal STITSTOCKED_ITEMS;

		public BigDecimal getSTITSTOCKED_ITEMS() {
			return this.STITSTOCKED_ITEMS;
		}

		public BigDecimal SPMDSE_ITEMS;

		public BigDecimal getSPMDSE_ITEMS() {
			return this.SPMDSE_ITEMS;
		}

		public BigDecimal VENDOR_COUNT;

		public BigDecimal getVENDOR_COUNT() {
			return this.VENDOR_COUNT;
		}

		public BigDecimal INVENTORY_VALUE;

		public BigDecimal getINVENTORY_VALUE() {
			return this.INVENTORY_VALUE;
		}

		public BigDecimal DAYS_SALES_OUTSTANDING;

		public BigDecimal getDAYS_SALES_OUTSTANDING() {
			return this.DAYS_SALES_OUTSTANDING;
		}

		public BigDecimal DAILY_SALES;

		public BigDecimal getDAILY_SALES() {
			return this.DAILY_SALES;
		}

		public BigDecimal MERCHANDISING_PIECES_ORDERED;

		public BigDecimal getMERCHANDISING_PIECES_ORDERED() {
			return this.MERCHANDISING_PIECES_ORDERED;
		}

		public BigDecimal MERCHANDISING_PIECES_SHIPPED;

		public BigDecimal getMERCHANDISING_PIECES_SHIPPED() {
			return this.MERCHANDISING_PIECES_SHIPPED;
		}

		public BigDecimal MERCHANDISING_PIECES_SUBBED;

		public BigDecimal getMERCHANDISING_PIECES_SUBBED() {
			return this.MERCHANDISING_PIECES_SUBBED;
		}

		public BigDecimal MERCHANDISING_DOLLARS_ORDERED;

		public BigDecimal getMERCHANDISING_DOLLARS_ORDERED() {
			return this.MERCHANDISING_DOLLARS_ORDERED;
		}

		public BigDecimal MERCHANDISING_DOLLARS_SHIPPED;

		public BigDecimal getMERCHANDISING_DOLLARS_SHIPPED() {
			return this.MERCHANDISING_DOLLARS_SHIPPED;
		}

		public BigDecimal MERCHANDISING_DOLLARS_SUBBED;

		public BigDecimal getMERCHANDISING_DOLLARS_SUBBED() {
			return this.MERCHANDISING_DOLLARS_SUBBED;
		}

		public BigDecimal MERCHANDISING_CASES_SERVICE_LEVEL;

		public BigDecimal getMERCHANDISING_CASES_SERVICE_LEVEL() {
			return this.MERCHANDISING_CASES_SERVICE_LEVEL;
		}

		public BigDecimal MERCHANDISING_CASES_FILL_RATE;

		public BigDecimal getMERCHANDISING_CASES_FILL_RATE() {
			return this.MERCHANDISING_CASES_FILL_RATE;
		}

		public BigDecimal MERCHANDISING_DOLLARS_SERVICE_LEVEL;

		public BigDecimal getMERCHANDISING_DOLLARS_SERVICE_LEVEL() {
			return this.MERCHANDISING_DOLLARS_SERVICE_LEVEL;
		}

		public BigDecimal MERCHANDISING_DOLLARS_FILL_RATE;

		public BigDecimal getMERCHANDISING_DOLLARS_FILL_RATE() {
			return this.MERCHANDISING_DOLLARS_FILL_RATE;
		}

		public BigDecimal SYGMA_PO;

		public BigDecimal getSYGMA_PO() {
			return this.SYGMA_PO;
		}

		public BigDecimal SYGMA_PO_LINES;

		public BigDecimal getSYGMA_PO_LINES() {
			return this.SYGMA_PO_LINES;
		}

		public BigDecimal SYGMA_PO_LINES_CHANGED_UP;

		public BigDecimal getSYGMA_PO_LINES_CHANGED_UP() {
			return this.SYGMA_PO_LINES_CHANGED_UP;
		}

		public BigDecimal SYGMA_PO_LINES_CHANGED_DOWN;

		public BigDecimal getSYGMA_PO_LINES_CHANGED_DOWN() {
			return this.SYGMA_PO_LINES_CHANGED_DOWN;
		}

		public BigDecimal SYGMA_PO_LINES_FORCED;

		public BigDecimal getSYGMA_PO_LINES_FORCED() {
			return this.SYGMA_PO_LINES_FORCED;
		}

		public BigDecimal SYGMA_PO_LINES_DELETED;

		public BigDecimal getSYGMA_PO_LINES_DELETED() {
			return this.SYGMA_PO_LINES_DELETED;
		}

		public BigDecimal SYGMA_PO_LINES_FINAL;

		public BigDecimal getSYGMA_PO_LINES_FINAL() {
			return this.SYGMA_PO_LINES_FINAL;
		}

		public BigDecimal SYGMA_PO_CASES;

		public BigDecimal getSYGMA_PO_CASES() {
			return this.SYGMA_PO_CASES;
		}

		public BigDecimal SYGMA_PO_CASES_CHANGED_UP;

		public BigDecimal getSYGMA_PO_CASES_CHANGED_UP() {
			return this.SYGMA_PO_CASES_CHANGED_UP;
		}

		public BigDecimal SYGMA_PO_CASES_CHANGED_DOWN;

		public BigDecimal getSYGMA_PO_CASES_CHANGED_DOWN() {
			return this.SYGMA_PO_CASES_CHANGED_DOWN;
		}

		public BigDecimal SYGMA_PO_CASES_FORCED;

		public BigDecimal getSYGMA_PO_CASES_FORCED() {
			return this.SYGMA_PO_CASES_FORCED;
		}

		public BigDecimal SYGMA_PO_CASES_DELETED;

		public BigDecimal getSYGMA_PO_CASES_DELETED() {
			return this.SYGMA_PO_CASES_DELETED;
		}

		public BigDecimal SYGMA_PO_CASES_FINAL;

		public BigDecimal getSYGMA_PO_CASES_FINAL() {
			return this.SYGMA_PO_CASES_FINAL;
		}

		public BigDecimal SYGMA_PO_RECEIVED;

		public BigDecimal getSYGMA_PO_RECEIVED() {
			return this.SYGMA_PO_RECEIVED;
		}

		public BigDecimal FORCED_PO;

		public BigDecimal getFORCED_PO() {
			return this.FORCED_PO;
		}

		public BigDecimal FORCED_PO_LINES;

		public BigDecimal getFORCED_PO_LINES() {
			return this.FORCED_PO_LINES;
		}

		public BigDecimal FORCED_PO_CASES;

		public BigDecimal getFORCED_PO_CASES() {
			return this.FORCED_PO_CASES;
		}

		public BigDecimal SYGMA_PO_UNCHANGED;

		public BigDecimal getSYGMA_PO_UNCHANGED() {
			return this.SYGMA_PO_UNCHANGED;
		}

		public BigDecimal SYGMA_PO_LINES_UNCHANGED;

		public BigDecimal getSYGMA_PO_LINES_UNCHANGED() {
			return this.SYGMA_PO_LINES_UNCHANGED;
		}

		public BigDecimal SYGMA_PO_CASES_UNCHANGED;

		public BigDecimal getSYGMA_PO_CASES_UNCHANGED() {
			return this.SYGMA_PO_CASES_UNCHANGED;
		}

		public BigDecimal FORECAST_ITEMS;

		public BigDecimal getFORECAST_ITEMS() {
			return this.FORECAST_ITEMS;
		}

		public BigDecimal FORECAST_LINES_CHANGED_UP;

		public BigDecimal getFORECAST_LINES_CHANGED_UP() {
			return this.FORECAST_LINES_CHANGED_UP;
		}

		public BigDecimal FORECAST_LINES_CHANGED_DOWN;

		public BigDecimal getFORECAST_LINES_CHANGED_DOWN() {
			return this.FORECAST_LINES_CHANGED_DOWN;
		}

		public BigDecimal FORECAST_CASES_CHANGED_UP;

		public BigDecimal getFORECAST_CASES_CHANGED_UP() {
			return this.FORECAST_CASES_CHANGED_UP;
		}

		public BigDecimal FORECAST_CASES_CHANGED_DOWN;

		public BigDecimal getFORECAST_CASES_CHANGED_DOWN() {
			return this.FORECAST_CASES_CHANGED_DOWN;
		}

		public BigDecimal RECEIVED_PO;

		public BigDecimal getRECEIVED_PO() {
			return this.RECEIVED_PO;
		}

		public BigDecimal RECEIVED_LINES;

		public BigDecimal getRECEIVED_LINES() {
			return this.RECEIVED_LINES;
		}

		public BigDecimal MERCHANDISE_PROFORMA_RECEIVED;

		public BigDecimal getMERCHANDISE_PROFORMA_RECEIVED() {
			return this.MERCHANDISE_PROFORMA_RECEIVED;
		}

		public BigDecimal MERCHANDISE_PROFORMA_LINES_RECEIVED;

		public BigDecimal getMERCHANDISE_PROFORMA_LINES_RECEIVED() {
			return this.MERCHANDISE_PROFORMA_LINES_RECEIVED;
		}

		public BigDecimal FREIGHT_PROFORMA_RECEIVED;

		public BigDecimal getFREIGHT_PROFORMA_RECEIVED() {
			return this.FREIGHT_PROFORMA_RECEIVED;
		}

		public BigDecimal FREIGHT_PROFORMA_LINES_RECEIVED;

		public BigDecimal getFREIGHT_PROFORMA_LINES_RECEIVED() {
			return this.FREIGHT_PROFORMA_LINES_RECEIVED;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_MIN_PO;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_MIN_PO() {
			return this.SYGMA_PO_RERECOMMEND_TO_MIN_PO;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_MIN_LINES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_MIN_LINES() {
			return this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_MIN_CASES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_MIN_CASES() {
			return this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO() {
			return this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES() {
			return this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES() {
			return this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_WITH_KEEP_PO;

		public BigDecimal getSYGMA_PO_RERECOMMEND_WITH_KEEP_PO() {
			return this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_WITH_KEEP_LINES() {
			return this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_WITH_KEEP_CASES() {
			return this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_MIN_PO;

		public BigDecimal getFORCED_RERECOMMEND_TO_MIN_PO() {
			return this.FORCED_RERECOMMEND_TO_MIN_PO;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_MIN_LINES;

		public BigDecimal getFORCED_RERECOMMEND_TO_MIN_LINES() {
			return this.FORCED_RERECOMMEND_TO_MIN_LINES;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_MIN_CASES;

		public BigDecimal getFORCED_RERECOMMEND_TO_MIN_CASES() {
			return this.FORCED_RERECOMMEND_TO_MIN_CASES;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO;

		public BigDecimal getFORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO() {
			return this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES;

		public BigDecimal getFORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES() {
			return this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES;

		public BigDecimal getFORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES() {
			return this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
		}

		public BigDecimal FORCED_RERECOMMEND_WITH_KEEP_PO;

		public BigDecimal getFORCED_RERECOMMEND_WITH_KEEP_PO() {
			return this.FORCED_RERECOMMEND_WITH_KEEP_PO;
		}

		public BigDecimal FORCED_RERECOMMEND_WITH_KEEP_LINES;

		public BigDecimal getFORCED_RERECOMMEND_WITH_KEEP_LINES() {
			return this.FORCED_RERECOMMEND_WITH_KEEP_LINES;
		}

		public BigDecimal FORCED_RERECOMMEND_WITH_KEEP_CASES;

		public BigDecimal getFORCED_RERECOMMEND_WITH_KEEP_CASES() {
			return this.FORCED_RERECOMMEND_WITH_KEEP_CASES;
		}

		public java.util.Date CREATED_TIMESTAMP;

		public java.util.Date getCREATED_TIMESTAMP() {
			return this.CREATED_TIMESTAMP;
		}

		public String CREATED_USER_ID;

		public String getCREATED_USER_ID() {
			return this.CREATED_USER_ID;
		}

		public String CREATED_PROGRAM_ID;

		public String getCREATED_PROGRAM_ID() {
			return this.CREATED_PROGRAM_ID;
		}

		public java.util.Date UPDATED_TIMESTAMP;

		public java.util.Date getUPDATED_TIMESTAMP() {
			return this.UPDATED_TIMESTAMP;
		}

		public String UPDATED_USER_ID;

		public String getUPDATED_USER_ID() {
			return this.UPDATED_USER_ID;
		}

		public String UPDATED_PROGRAM_ID;

		public String getUPDATED_PROGRAM_ID() {
			return this.UPDATED_PROGRAM_ID;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());

				result = prime * result + ((this.PROCESSING_DATE == null) ? 0 : this.PROCESSING_DATE.hashCode());

				result = prime * result + ((this.BUYER_NO == null) ? 0 : this.BUYER_NO.hashCode());

				result = prime * result + ((this.CATEGORY == null) ? 0 : this.CATEGORY.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.SITE_ID == null) {
				if (other.SITE_ID != null)
					return false;

			} else if (!this.SITE_ID.equals(other.SITE_ID))

				return false;

			if (this.PROCESSING_DATE == null) {
				if (other.PROCESSING_DATE != null)
					return false;

			} else if (!this.PROCESSING_DATE.equals(other.PROCESSING_DATE))

				return false;

			if (this.BUYER_NO == null) {
				if (other.BUYER_NO != null)
					return false;

			} else if (!this.BUYER_NO.equals(other.BUYER_NO))

				return false;

			if (this.CATEGORY == null) {
				if (other.CATEGORY != null)
					return false;

			} else if (!this.CATEGORY.equals(other.CATEGORY))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.SITE_ID = this.SITE_ID;
			other.PROCESSING_DATE = this.PROCESSING_DATE;
			other.BUYER_NO = this.BUYER_NO;
			other.CATEGORY = this.CATEGORY;
			other.STITSTOCKED_ITEMS = this.STITSTOCKED_ITEMS;
			other.SPMDSE_ITEMS = this.SPMDSE_ITEMS;
			other.VENDOR_COUNT = this.VENDOR_COUNT;
			other.INVENTORY_VALUE = this.INVENTORY_VALUE;
			other.DAYS_SALES_OUTSTANDING = this.DAYS_SALES_OUTSTANDING;
			other.DAILY_SALES = this.DAILY_SALES;
			other.MERCHANDISING_PIECES_ORDERED = this.MERCHANDISING_PIECES_ORDERED;
			other.MERCHANDISING_PIECES_SHIPPED = this.MERCHANDISING_PIECES_SHIPPED;
			other.MERCHANDISING_PIECES_SUBBED = this.MERCHANDISING_PIECES_SUBBED;
			other.MERCHANDISING_DOLLARS_ORDERED = this.MERCHANDISING_DOLLARS_ORDERED;
			other.MERCHANDISING_DOLLARS_SHIPPED = this.MERCHANDISING_DOLLARS_SHIPPED;
			other.MERCHANDISING_DOLLARS_SUBBED = this.MERCHANDISING_DOLLARS_SUBBED;
			other.MERCHANDISING_CASES_SERVICE_LEVEL = this.MERCHANDISING_CASES_SERVICE_LEVEL;
			other.MERCHANDISING_CASES_FILL_RATE = this.MERCHANDISING_CASES_FILL_RATE;
			other.MERCHANDISING_DOLLARS_SERVICE_LEVEL = this.MERCHANDISING_DOLLARS_SERVICE_LEVEL;
			other.MERCHANDISING_DOLLARS_FILL_RATE = this.MERCHANDISING_DOLLARS_FILL_RATE;
			other.SYGMA_PO = this.SYGMA_PO;
			other.SYGMA_PO_LINES = this.SYGMA_PO_LINES;
			other.SYGMA_PO_LINES_CHANGED_UP = this.SYGMA_PO_LINES_CHANGED_UP;
			other.SYGMA_PO_LINES_CHANGED_DOWN = this.SYGMA_PO_LINES_CHANGED_DOWN;
			other.SYGMA_PO_LINES_FORCED = this.SYGMA_PO_LINES_FORCED;
			other.SYGMA_PO_LINES_DELETED = this.SYGMA_PO_LINES_DELETED;
			other.SYGMA_PO_LINES_FINAL = this.SYGMA_PO_LINES_FINAL;
			other.SYGMA_PO_CASES = this.SYGMA_PO_CASES;
			other.SYGMA_PO_CASES_CHANGED_UP = this.SYGMA_PO_CASES_CHANGED_UP;
			other.SYGMA_PO_CASES_CHANGED_DOWN = this.SYGMA_PO_CASES_CHANGED_DOWN;
			other.SYGMA_PO_CASES_FORCED = this.SYGMA_PO_CASES_FORCED;
			other.SYGMA_PO_CASES_DELETED = this.SYGMA_PO_CASES_DELETED;
			other.SYGMA_PO_CASES_FINAL = this.SYGMA_PO_CASES_FINAL;
			other.SYGMA_PO_RECEIVED = this.SYGMA_PO_RECEIVED;
			other.FORCED_PO = this.FORCED_PO;
			other.FORCED_PO_LINES = this.FORCED_PO_LINES;
			other.FORCED_PO_CASES = this.FORCED_PO_CASES;
			other.SYGMA_PO_UNCHANGED = this.SYGMA_PO_UNCHANGED;
			other.SYGMA_PO_LINES_UNCHANGED = this.SYGMA_PO_LINES_UNCHANGED;
			other.SYGMA_PO_CASES_UNCHANGED = this.SYGMA_PO_CASES_UNCHANGED;
			other.FORECAST_ITEMS = this.FORECAST_ITEMS;
			other.FORECAST_LINES_CHANGED_UP = this.FORECAST_LINES_CHANGED_UP;
			other.FORECAST_LINES_CHANGED_DOWN = this.FORECAST_LINES_CHANGED_DOWN;
			other.FORECAST_CASES_CHANGED_UP = this.FORECAST_CASES_CHANGED_UP;
			other.FORECAST_CASES_CHANGED_DOWN = this.FORECAST_CASES_CHANGED_DOWN;
			other.RECEIVED_PO = this.RECEIVED_PO;
			other.RECEIVED_LINES = this.RECEIVED_LINES;
			other.MERCHANDISE_PROFORMA_RECEIVED = this.MERCHANDISE_PROFORMA_RECEIVED;
			other.MERCHANDISE_PROFORMA_LINES_RECEIVED = this.MERCHANDISE_PROFORMA_LINES_RECEIVED;
			other.FREIGHT_PROFORMA_RECEIVED = this.FREIGHT_PROFORMA_RECEIVED;
			other.FREIGHT_PROFORMA_LINES_RECEIVED = this.FREIGHT_PROFORMA_LINES_RECEIVED;
			other.SYGMA_PO_RERECOMMEND_TO_MIN_PO = this.SYGMA_PO_RERECOMMEND_TO_MIN_PO;
			other.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES;
			other.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES;
			other.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO;
			other.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
			other.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
			other.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO;
			other.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES;
			other.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES;
			other.FORCED_RERECOMMEND_TO_MIN_PO = this.FORCED_RERECOMMEND_TO_MIN_PO;
			other.FORCED_RERECOMMEND_TO_MIN_LINES = this.FORCED_RERECOMMEND_TO_MIN_LINES;
			other.FORCED_RERECOMMEND_TO_MIN_CASES = this.FORCED_RERECOMMEND_TO_MIN_CASES;
			other.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO;
			other.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
			other.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
			other.FORCED_RERECOMMEND_WITH_KEEP_PO = this.FORCED_RERECOMMEND_WITH_KEEP_PO;
			other.FORCED_RERECOMMEND_WITH_KEEP_LINES = this.FORCED_RERECOMMEND_WITH_KEEP_LINES;
			other.FORCED_RERECOMMEND_WITH_KEEP_CASES = this.FORCED_RERECOMMEND_WITH_KEEP_CASES;
			other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
			other.CREATED_USER_ID = this.CREATED_USER_ID;
			other.CREATED_PROGRAM_ID = this.CREATED_PROGRAM_ID;
			other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
			other.UPDATED_USER_ID = this.UPDATED_USER_ID;
			other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
			other.IS_DELETED = this.IS_DELETED;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.SITE_ID = this.SITE_ID;
			other.PROCESSING_DATE = this.PROCESSING_DATE;
			other.BUYER_NO = this.BUYER_NO;
			other.CATEGORY = this.CATEGORY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.PROCESSING_DATE = readDate(dis);

					this.BUYER_NO = readString(dis);

					this.CATEGORY = readString(dis);

					this.STITSTOCKED_ITEMS = (BigDecimal) dis.readObject();

					this.SPMDSE_ITEMS = (BigDecimal) dis.readObject();

					this.VENDOR_COUNT = (BigDecimal) dis.readObject();

					this.INVENTORY_VALUE = (BigDecimal) dis.readObject();

					this.DAYS_SALES_OUTSTANDING = (BigDecimal) dis.readObject();

					this.DAILY_SALES = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_ORDERED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_SHIPPED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_SUBBED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_ORDERED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SHIPPED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SUBBED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_CASES_SERVICE_LEVEL = (BigDecimal) dis.readObject();

					this.MERCHANDISING_CASES_FILL_RATE = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SERVICE_LEVEL = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_FILL_RATE = (BigDecimal) dis.readObject();

					this.SYGMA_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_FORCED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_DELETED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_FINAL = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_FORCED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_DELETED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_FINAL = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RECEIVED = (BigDecimal) dis.readObject();

					this.FORCED_PO = (BigDecimal) dis.readObject();

					this.FORCED_PO_LINES = (BigDecimal) dis.readObject();

					this.FORCED_PO_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_UNCHANGED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_UNCHANGED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_UNCHANGED = (BigDecimal) dis.readObject();

					this.FORECAST_ITEMS = (BigDecimal) dis.readObject();

					this.FORECAST_LINES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.FORECAST_LINES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.FORECAST_CASES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.FORECAST_CASES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.RECEIVED_PO = (BigDecimal) dis.readObject();

					this.RECEIVED_LINES = (BigDecimal) dis.readObject();

					this.MERCHANDISE_PROFORMA_RECEIVED = (BigDecimal) dis.readObject();

					this.MERCHANDISE_PROFORMA_LINES_RECEIVED = (BigDecimal) dis.readObject();

					this.FREIGHT_PROFORMA_RECEIVED = (BigDecimal) dis.readObject();

					this.FREIGHT_PROFORMA_LINES_RECEIVED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_CASES = (BigDecimal) dis.readObject();

					this.CREATED_TIMESTAMP = readDate(dis);

					this.CREATED_USER_ID = readString(dis);

					this.CREATED_PROGRAM_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readDate(dis);

					this.UPDATED_USER_ID = readString(dis);

					this.UPDATED_PROGRAM_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.PROCESSING_DATE = readDate(dis);

					this.BUYER_NO = readString(dis);

					this.CATEGORY = readString(dis);

					this.STITSTOCKED_ITEMS = (BigDecimal) dis.readObject();

					this.SPMDSE_ITEMS = (BigDecimal) dis.readObject();

					this.VENDOR_COUNT = (BigDecimal) dis.readObject();

					this.INVENTORY_VALUE = (BigDecimal) dis.readObject();

					this.DAYS_SALES_OUTSTANDING = (BigDecimal) dis.readObject();

					this.DAILY_SALES = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_ORDERED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_SHIPPED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_SUBBED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_ORDERED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SHIPPED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SUBBED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_CASES_SERVICE_LEVEL = (BigDecimal) dis.readObject();

					this.MERCHANDISING_CASES_FILL_RATE = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SERVICE_LEVEL = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_FILL_RATE = (BigDecimal) dis.readObject();

					this.SYGMA_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_FORCED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_DELETED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_FINAL = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_FORCED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_DELETED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_FINAL = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RECEIVED = (BigDecimal) dis.readObject();

					this.FORCED_PO = (BigDecimal) dis.readObject();

					this.FORCED_PO_LINES = (BigDecimal) dis.readObject();

					this.FORCED_PO_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_UNCHANGED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_UNCHANGED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_UNCHANGED = (BigDecimal) dis.readObject();

					this.FORECAST_ITEMS = (BigDecimal) dis.readObject();

					this.FORECAST_LINES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.FORECAST_LINES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.FORECAST_CASES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.FORECAST_CASES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.RECEIVED_PO = (BigDecimal) dis.readObject();

					this.RECEIVED_LINES = (BigDecimal) dis.readObject();

					this.MERCHANDISE_PROFORMA_RECEIVED = (BigDecimal) dis.readObject();

					this.MERCHANDISE_PROFORMA_LINES_RECEIVED = (BigDecimal) dis.readObject();

					this.FREIGHT_PROFORMA_RECEIVED = (BigDecimal) dis.readObject();

					this.FREIGHT_PROFORMA_LINES_RECEIVED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_CASES = (BigDecimal) dis.readObject();

					this.CREATED_TIMESTAMP = readDate(dis);

					this.CREATED_USER_ID = readString(dis);

					this.CREATED_PROGRAM_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readDate(dis);

					this.UPDATED_USER_ID = readString(dis);

					this.UPDATED_PROGRAM_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// java.util.Date

				writeDate(this.PROCESSING_DATE, dos);

				// String

				writeString(this.BUYER_NO, dos);

				// String

				writeString(this.CATEGORY, dos);

				// BigDecimal

				dos.writeObject(this.STITSTOCKED_ITEMS);

				// BigDecimal

				dos.writeObject(this.SPMDSE_ITEMS);

				// BigDecimal

				dos.writeObject(this.VENDOR_COUNT);

				// BigDecimal

				dos.writeObject(this.INVENTORY_VALUE);

				// BigDecimal

				dos.writeObject(this.DAYS_SALES_OUTSTANDING);

				// BigDecimal

				dos.writeObject(this.DAILY_SALES);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_ORDERED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_SHIPPED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_SUBBED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_ORDERED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SHIPPED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SUBBED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_CASES_SERVICE_LEVEL);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_CASES_FILL_RATE);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SERVICE_LEVEL);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_FILL_RATE);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_FORCED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_DELETED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_FINAL);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_FORCED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_DELETED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_FINAL);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FORCED_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_PO_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_PO_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.FORECAST_ITEMS);

				// BigDecimal

				dos.writeObject(this.FORECAST_LINES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.FORECAST_LINES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.FORECAST_CASES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.FORECAST_CASES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.RECEIVED_PO);

				// BigDecimal

				dos.writeObject(this.RECEIVED_LINES);

				// BigDecimal

				dos.writeObject(this.MERCHANDISE_PROFORMA_RECEIVED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISE_PROFORMA_LINES_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FREIGHT_PROFORMA_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FREIGHT_PROFORMA_LINES_RECEIVED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_CASES);

				// java.util.Date

				writeDate(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// String

				writeString(this.CREATED_PROGRAM_ID, dos);

				// java.util.Date

				writeDate(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// String

				writeString(this.UPDATED_PROGRAM_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// java.util.Date

				writeDate(this.PROCESSING_DATE, dos);

				// String

				writeString(this.BUYER_NO, dos);

				// String

				writeString(this.CATEGORY, dos);

				// BigDecimal

				dos.writeObject(this.STITSTOCKED_ITEMS);

				// BigDecimal

				dos.writeObject(this.SPMDSE_ITEMS);

				// BigDecimal

				dos.writeObject(this.VENDOR_COUNT);

				// BigDecimal

				dos.writeObject(this.INVENTORY_VALUE);

				// BigDecimal

				dos.writeObject(this.DAYS_SALES_OUTSTANDING);

				// BigDecimal

				dos.writeObject(this.DAILY_SALES);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_ORDERED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_SHIPPED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_SUBBED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_ORDERED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SHIPPED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SUBBED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_CASES_SERVICE_LEVEL);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_CASES_FILL_RATE);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SERVICE_LEVEL);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_FILL_RATE);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_FORCED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_DELETED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_FINAL);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_FORCED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_DELETED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_FINAL);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FORCED_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_PO_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_PO_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.FORECAST_ITEMS);

				// BigDecimal

				dos.writeObject(this.FORECAST_LINES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.FORECAST_LINES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.FORECAST_CASES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.FORECAST_CASES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.RECEIVED_PO);

				// BigDecimal

				dos.writeObject(this.RECEIVED_LINES);

				// BigDecimal

				dos.writeObject(this.MERCHANDISE_PROFORMA_RECEIVED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISE_PROFORMA_LINES_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FREIGHT_PROFORMA_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FREIGHT_PROFORMA_LINES_RECEIVED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_CASES);

				// java.util.Date

				writeDate(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// String

				writeString(this.CREATED_PROGRAM_ID, dos);

				// java.util.Date

				writeDate(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// String

				writeString(this.UPDATED_PROGRAM_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",PROCESSING_DATE=" + String.valueOf(PROCESSING_DATE));
			sb.append(",BUYER_NO=" + BUYER_NO);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",STITSTOCKED_ITEMS=" + String.valueOf(STITSTOCKED_ITEMS));
			sb.append(",SPMDSE_ITEMS=" + String.valueOf(SPMDSE_ITEMS));
			sb.append(",VENDOR_COUNT=" + String.valueOf(VENDOR_COUNT));
			sb.append(",INVENTORY_VALUE=" + String.valueOf(INVENTORY_VALUE));
			sb.append(",DAYS_SALES_OUTSTANDING=" + String.valueOf(DAYS_SALES_OUTSTANDING));
			sb.append(",DAILY_SALES=" + String.valueOf(DAILY_SALES));
			sb.append(",MERCHANDISING_PIECES_ORDERED=" + String.valueOf(MERCHANDISING_PIECES_ORDERED));
			sb.append(",MERCHANDISING_PIECES_SHIPPED=" + String.valueOf(MERCHANDISING_PIECES_SHIPPED));
			sb.append(",MERCHANDISING_PIECES_SUBBED=" + String.valueOf(MERCHANDISING_PIECES_SUBBED));
			sb.append(",MERCHANDISING_DOLLARS_ORDERED=" + String.valueOf(MERCHANDISING_DOLLARS_ORDERED));
			sb.append(",MERCHANDISING_DOLLARS_SHIPPED=" + String.valueOf(MERCHANDISING_DOLLARS_SHIPPED));
			sb.append(",MERCHANDISING_DOLLARS_SUBBED=" + String.valueOf(MERCHANDISING_DOLLARS_SUBBED));
			sb.append(",MERCHANDISING_CASES_SERVICE_LEVEL=" + String.valueOf(MERCHANDISING_CASES_SERVICE_LEVEL));
			sb.append(",MERCHANDISING_CASES_FILL_RATE=" + String.valueOf(MERCHANDISING_CASES_FILL_RATE));
			sb.append(",MERCHANDISING_DOLLARS_SERVICE_LEVEL=" + String.valueOf(MERCHANDISING_DOLLARS_SERVICE_LEVEL));
			sb.append(",MERCHANDISING_DOLLARS_FILL_RATE=" + String.valueOf(MERCHANDISING_DOLLARS_FILL_RATE));
			sb.append(",SYGMA_PO=" + String.valueOf(SYGMA_PO));
			sb.append(",SYGMA_PO_LINES=" + String.valueOf(SYGMA_PO_LINES));
			sb.append(",SYGMA_PO_LINES_CHANGED_UP=" + String.valueOf(SYGMA_PO_LINES_CHANGED_UP));
			sb.append(",SYGMA_PO_LINES_CHANGED_DOWN=" + String.valueOf(SYGMA_PO_LINES_CHANGED_DOWN));
			sb.append(",SYGMA_PO_LINES_FORCED=" + String.valueOf(SYGMA_PO_LINES_FORCED));
			sb.append(",SYGMA_PO_LINES_DELETED=" + String.valueOf(SYGMA_PO_LINES_DELETED));
			sb.append(",SYGMA_PO_LINES_FINAL=" + String.valueOf(SYGMA_PO_LINES_FINAL));
			sb.append(",SYGMA_PO_CASES=" + String.valueOf(SYGMA_PO_CASES));
			sb.append(",SYGMA_PO_CASES_CHANGED_UP=" + String.valueOf(SYGMA_PO_CASES_CHANGED_UP));
			sb.append(",SYGMA_PO_CASES_CHANGED_DOWN=" + String.valueOf(SYGMA_PO_CASES_CHANGED_DOWN));
			sb.append(",SYGMA_PO_CASES_FORCED=" + String.valueOf(SYGMA_PO_CASES_FORCED));
			sb.append(",SYGMA_PO_CASES_DELETED=" + String.valueOf(SYGMA_PO_CASES_DELETED));
			sb.append(",SYGMA_PO_CASES_FINAL=" + String.valueOf(SYGMA_PO_CASES_FINAL));
			sb.append(",SYGMA_PO_RECEIVED=" + String.valueOf(SYGMA_PO_RECEIVED));
			sb.append(",FORCED_PO=" + String.valueOf(FORCED_PO));
			sb.append(",FORCED_PO_LINES=" + String.valueOf(FORCED_PO_LINES));
			sb.append(",FORCED_PO_CASES=" + String.valueOf(FORCED_PO_CASES));
			sb.append(",SYGMA_PO_UNCHANGED=" + String.valueOf(SYGMA_PO_UNCHANGED));
			sb.append(",SYGMA_PO_LINES_UNCHANGED=" + String.valueOf(SYGMA_PO_LINES_UNCHANGED));
			sb.append(",SYGMA_PO_CASES_UNCHANGED=" + String.valueOf(SYGMA_PO_CASES_UNCHANGED));
			sb.append(",FORECAST_ITEMS=" + String.valueOf(FORECAST_ITEMS));
			sb.append(",FORECAST_LINES_CHANGED_UP=" + String.valueOf(FORECAST_LINES_CHANGED_UP));
			sb.append(",FORECAST_LINES_CHANGED_DOWN=" + String.valueOf(FORECAST_LINES_CHANGED_DOWN));
			sb.append(",FORECAST_CASES_CHANGED_UP=" + String.valueOf(FORECAST_CASES_CHANGED_UP));
			sb.append(",FORECAST_CASES_CHANGED_DOWN=" + String.valueOf(FORECAST_CASES_CHANGED_DOWN));
			sb.append(",RECEIVED_PO=" + String.valueOf(RECEIVED_PO));
			sb.append(",RECEIVED_LINES=" + String.valueOf(RECEIVED_LINES));
			sb.append(",MERCHANDISE_PROFORMA_RECEIVED=" + String.valueOf(MERCHANDISE_PROFORMA_RECEIVED));
			sb.append(",MERCHANDISE_PROFORMA_LINES_RECEIVED=" + String.valueOf(MERCHANDISE_PROFORMA_LINES_RECEIVED));
			sb.append(",FREIGHT_PROFORMA_RECEIVED=" + String.valueOf(FREIGHT_PROFORMA_RECEIVED));
			sb.append(",FREIGHT_PROFORMA_LINES_RECEIVED=" + String.valueOf(FREIGHT_PROFORMA_LINES_RECEIVED));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_MIN_PO=" + String.valueOf(SYGMA_PO_RERECOMMEND_TO_MIN_PO));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_MIN_LINES=" + String.valueOf(SYGMA_PO_RERECOMMEND_TO_MIN_LINES));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_MIN_CASES=" + String.valueOf(SYGMA_PO_RERECOMMEND_TO_MIN_CASES));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO="
					+ String.valueOf(SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES="
					+ String.valueOf(SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES="
					+ String.valueOf(SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES));
			sb.append(",SYGMA_PO_RERECOMMEND_WITH_KEEP_PO=" + String.valueOf(SYGMA_PO_RERECOMMEND_WITH_KEEP_PO));
			sb.append(",SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES=" + String.valueOf(SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES));
			sb.append(",SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES=" + String.valueOf(SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES));
			sb.append(",FORCED_RERECOMMEND_TO_MIN_PO=" + String.valueOf(FORCED_RERECOMMEND_TO_MIN_PO));
			sb.append(",FORCED_RERECOMMEND_TO_MIN_LINES=" + String.valueOf(FORCED_RERECOMMEND_TO_MIN_LINES));
			sb.append(",FORCED_RERECOMMEND_TO_MIN_CASES=" + String.valueOf(FORCED_RERECOMMEND_TO_MIN_CASES));
			sb.append(",FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO=" + String.valueOf(FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO));
			sb.append(",FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES="
					+ String.valueOf(FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES));
			sb.append(",FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES="
					+ String.valueOf(FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES));
			sb.append(",FORCED_RERECOMMEND_WITH_KEEP_PO=" + String.valueOf(FORCED_RERECOMMEND_WITH_KEEP_PO));
			sb.append(",FORCED_RERECOMMEND_WITH_KEEP_LINES=" + String.valueOf(FORCED_RERECOMMEND_WITH_KEEP_LINES));
			sb.append(",FORCED_RERECOMMEND_WITH_KEEP_CASES=" + String.valueOf(FORCED_RERECOMMEND_WITH_KEEP_CASES));
			sb.append(",CREATED_TIMESTAMP=" + String.valueOf(CREATED_TIMESTAMP));
			sb.append(",CREATED_USER_ID=" + CREATED_USER_ID);
			sb.append(",CREATED_PROGRAM_ID=" + CREATED_PROGRAM_ID);
			sb.append(",UPDATED_TIMESTAMP=" + String.valueOf(UPDATED_TIMESTAMP));
			sb.append(",UPDATED_USER_ID=" + UPDATED_USER_ID);
			sb.append(",UPDATED_PROGRAM_ID=" + UPDATED_PROGRAM_ID);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PROCESSING_DATE, other.PROCESSING_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.BUYER_NO, other.BUYER_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CATEGORY, other.CATEGORY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class BUYER_STATISTICSStruct implements routines.system.IPersistableRow<BUYER_STATISTICSStruct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public java.util.Date PROCESSING_DATE;

		public java.util.Date getPROCESSING_DATE() {
			return this.PROCESSING_DATE;
		}

		public String BUYER_NO;

		public String getBUYER_NO() {
			return this.BUYER_NO;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public BigDecimal STITSTOCKED_ITEMS;

		public BigDecimal getSTITSTOCKED_ITEMS() {
			return this.STITSTOCKED_ITEMS;
		}

		public BigDecimal SPMDSE_ITEMS;

		public BigDecimal getSPMDSE_ITEMS() {
			return this.SPMDSE_ITEMS;
		}

		public BigDecimal VENDOR_COUNT;

		public BigDecimal getVENDOR_COUNT() {
			return this.VENDOR_COUNT;
		}

		public BigDecimal INVENTORY_VALUE;

		public BigDecimal getINVENTORY_VALUE() {
			return this.INVENTORY_VALUE;
		}

		public BigDecimal DAYS_SALES_OUTSTANDING;

		public BigDecimal getDAYS_SALES_OUTSTANDING() {
			return this.DAYS_SALES_OUTSTANDING;
		}

		public BigDecimal DAILY_SALES;

		public BigDecimal getDAILY_SALES() {
			return this.DAILY_SALES;
		}

		public BigDecimal MERCHANDISING_PIECES_ORDERED;

		public BigDecimal getMERCHANDISING_PIECES_ORDERED() {
			return this.MERCHANDISING_PIECES_ORDERED;
		}

		public BigDecimal MERCHANDISING_PIECES_SHIPPED;

		public BigDecimal getMERCHANDISING_PIECES_SHIPPED() {
			return this.MERCHANDISING_PIECES_SHIPPED;
		}

		public BigDecimal MERCHANDISING_PIECES_SUBBED;

		public BigDecimal getMERCHANDISING_PIECES_SUBBED() {
			return this.MERCHANDISING_PIECES_SUBBED;
		}

		public BigDecimal MERCHANDISING_DOLLARS_ORDERED;

		public BigDecimal getMERCHANDISING_DOLLARS_ORDERED() {
			return this.MERCHANDISING_DOLLARS_ORDERED;
		}

		public BigDecimal MERCHANDISING_DOLLARS_SHIPPED;

		public BigDecimal getMERCHANDISING_DOLLARS_SHIPPED() {
			return this.MERCHANDISING_DOLLARS_SHIPPED;
		}

		public BigDecimal MERCHANDISING_DOLLARS_SUBBED;

		public BigDecimal getMERCHANDISING_DOLLARS_SUBBED() {
			return this.MERCHANDISING_DOLLARS_SUBBED;
		}

		public BigDecimal MERCHANDISING_CASES_SERVICE_LEVEL;

		public BigDecimal getMERCHANDISING_CASES_SERVICE_LEVEL() {
			return this.MERCHANDISING_CASES_SERVICE_LEVEL;
		}

		public BigDecimal MERCHANDISING_CASES_FILL_RATE;

		public BigDecimal getMERCHANDISING_CASES_FILL_RATE() {
			return this.MERCHANDISING_CASES_FILL_RATE;
		}

		public BigDecimal MERCHANDISING_DOLLARS_SERVICE_LEVEL;

		public BigDecimal getMERCHANDISING_DOLLARS_SERVICE_LEVEL() {
			return this.MERCHANDISING_DOLLARS_SERVICE_LEVEL;
		}

		public BigDecimal MERCHANDISING_DOLLARS_FILL_RATE;

		public BigDecimal getMERCHANDISING_DOLLARS_FILL_RATE() {
			return this.MERCHANDISING_DOLLARS_FILL_RATE;
		}

		public BigDecimal SYGMA_PO;

		public BigDecimal getSYGMA_PO() {
			return this.SYGMA_PO;
		}

		public BigDecimal SYGMA_PO_LINES;

		public BigDecimal getSYGMA_PO_LINES() {
			return this.SYGMA_PO_LINES;
		}

		public BigDecimal SYGMA_PO_LINES_CHANGED_UP;

		public BigDecimal getSYGMA_PO_LINES_CHANGED_UP() {
			return this.SYGMA_PO_LINES_CHANGED_UP;
		}

		public BigDecimal SYGMA_PO_LINES_CHANGED_DOWN;

		public BigDecimal getSYGMA_PO_LINES_CHANGED_DOWN() {
			return this.SYGMA_PO_LINES_CHANGED_DOWN;
		}

		public BigDecimal SYGMA_PO_LINES_FORCED;

		public BigDecimal getSYGMA_PO_LINES_FORCED() {
			return this.SYGMA_PO_LINES_FORCED;
		}

		public BigDecimal SYGMA_PO_LINES_DELETED;

		public BigDecimal getSYGMA_PO_LINES_DELETED() {
			return this.SYGMA_PO_LINES_DELETED;
		}

		public BigDecimal SYGMA_PO_LINES_FINAL;

		public BigDecimal getSYGMA_PO_LINES_FINAL() {
			return this.SYGMA_PO_LINES_FINAL;
		}

		public BigDecimal SYGMA_PO_CASES;

		public BigDecimal getSYGMA_PO_CASES() {
			return this.SYGMA_PO_CASES;
		}

		public BigDecimal SYGMA_PO_CASES_CHANGED_UP;

		public BigDecimal getSYGMA_PO_CASES_CHANGED_UP() {
			return this.SYGMA_PO_CASES_CHANGED_UP;
		}

		public BigDecimal SYGMA_PO_CASES_CHANGED_DOWN;

		public BigDecimal getSYGMA_PO_CASES_CHANGED_DOWN() {
			return this.SYGMA_PO_CASES_CHANGED_DOWN;
		}

		public BigDecimal SYGMA_PO_CASES_FORCED;

		public BigDecimal getSYGMA_PO_CASES_FORCED() {
			return this.SYGMA_PO_CASES_FORCED;
		}

		public BigDecimal SYGMA_PO_CASES_DELETED;

		public BigDecimal getSYGMA_PO_CASES_DELETED() {
			return this.SYGMA_PO_CASES_DELETED;
		}

		public BigDecimal SYGMA_PO_CASES_FINAL;

		public BigDecimal getSYGMA_PO_CASES_FINAL() {
			return this.SYGMA_PO_CASES_FINAL;
		}

		public BigDecimal SYGMA_PO_RECEIVED;

		public BigDecimal getSYGMA_PO_RECEIVED() {
			return this.SYGMA_PO_RECEIVED;
		}

		public BigDecimal FORCED_PO;

		public BigDecimal getFORCED_PO() {
			return this.FORCED_PO;
		}

		public BigDecimal FORCED_PO_LINES;

		public BigDecimal getFORCED_PO_LINES() {
			return this.FORCED_PO_LINES;
		}

		public BigDecimal FORCED_PO_CASES;

		public BigDecimal getFORCED_PO_CASES() {
			return this.FORCED_PO_CASES;
		}

		public BigDecimal SYGMA_PO_UNCHANGED;

		public BigDecimal getSYGMA_PO_UNCHANGED() {
			return this.SYGMA_PO_UNCHANGED;
		}

		public BigDecimal SYGMA_PO_LINES_UNCHANGED;

		public BigDecimal getSYGMA_PO_LINES_UNCHANGED() {
			return this.SYGMA_PO_LINES_UNCHANGED;
		}

		public BigDecimal SYGMA_PO_CASES_UNCHANGED;

		public BigDecimal getSYGMA_PO_CASES_UNCHANGED() {
			return this.SYGMA_PO_CASES_UNCHANGED;
		}

		public BigDecimal FORECAST_ITEMS;

		public BigDecimal getFORECAST_ITEMS() {
			return this.FORECAST_ITEMS;
		}

		public BigDecimal FORECAST_LINES_CHANGED_UP;

		public BigDecimal getFORECAST_LINES_CHANGED_UP() {
			return this.FORECAST_LINES_CHANGED_UP;
		}

		public BigDecimal FORECAST_LINES_CHANGED_DOWN;

		public BigDecimal getFORECAST_LINES_CHANGED_DOWN() {
			return this.FORECAST_LINES_CHANGED_DOWN;
		}

		public BigDecimal FORECAST_CASES_CHANGED_UP;

		public BigDecimal getFORECAST_CASES_CHANGED_UP() {
			return this.FORECAST_CASES_CHANGED_UP;
		}

		public BigDecimal FORECAST_CASES_CHANGED_DOWN;

		public BigDecimal getFORECAST_CASES_CHANGED_DOWN() {
			return this.FORECAST_CASES_CHANGED_DOWN;
		}

		public BigDecimal RECEIVED_PO;

		public BigDecimal getRECEIVED_PO() {
			return this.RECEIVED_PO;
		}

		public BigDecimal RECEIVED_LINES;

		public BigDecimal getRECEIVED_LINES() {
			return this.RECEIVED_LINES;
		}

		public BigDecimal MERCHANDISE_PROFORMA_RECEIVED;

		public BigDecimal getMERCHANDISE_PROFORMA_RECEIVED() {
			return this.MERCHANDISE_PROFORMA_RECEIVED;
		}

		public BigDecimal MERCHANDISE_PROFORMA_LINES_RECEIVED;

		public BigDecimal getMERCHANDISE_PROFORMA_LINES_RECEIVED() {
			return this.MERCHANDISE_PROFORMA_LINES_RECEIVED;
		}

		public BigDecimal FREIGHT_PROFORMA_RECEIVED;

		public BigDecimal getFREIGHT_PROFORMA_RECEIVED() {
			return this.FREIGHT_PROFORMA_RECEIVED;
		}

		public BigDecimal FREIGHT_PROFORMA_LINES_RECEIVED;

		public BigDecimal getFREIGHT_PROFORMA_LINES_RECEIVED() {
			return this.FREIGHT_PROFORMA_LINES_RECEIVED;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_MIN_PO;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_MIN_PO() {
			return this.SYGMA_PO_RERECOMMEND_TO_MIN_PO;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_MIN_LINES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_MIN_LINES() {
			return this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_MIN_CASES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_MIN_CASES() {
			return this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO() {
			return this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES() {
			return this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES() {
			return this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_WITH_KEEP_PO;

		public BigDecimal getSYGMA_PO_RERECOMMEND_WITH_KEEP_PO() {
			return this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_WITH_KEEP_LINES() {
			return this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES;
		}

		public BigDecimal SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES;

		public BigDecimal getSYGMA_PO_RERECOMMEND_WITH_KEEP_CASES() {
			return this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_MIN_PO;

		public BigDecimal getFORCED_RERECOMMEND_TO_MIN_PO() {
			return this.FORCED_RERECOMMEND_TO_MIN_PO;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_MIN_LINES;

		public BigDecimal getFORCED_RERECOMMEND_TO_MIN_LINES() {
			return this.FORCED_RERECOMMEND_TO_MIN_LINES;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_MIN_CASES;

		public BigDecimal getFORCED_RERECOMMEND_TO_MIN_CASES() {
			return this.FORCED_RERECOMMEND_TO_MIN_CASES;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO;

		public BigDecimal getFORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO() {
			return this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES;

		public BigDecimal getFORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES() {
			return this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
		}

		public BigDecimal FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES;

		public BigDecimal getFORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES() {
			return this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
		}

		public BigDecimal FORCED_RERECOMMEND_WITH_KEEP_PO;

		public BigDecimal getFORCED_RERECOMMEND_WITH_KEEP_PO() {
			return this.FORCED_RERECOMMEND_WITH_KEEP_PO;
		}

		public BigDecimal FORCED_RERECOMMEND_WITH_KEEP_LINES;

		public BigDecimal getFORCED_RERECOMMEND_WITH_KEEP_LINES() {
			return this.FORCED_RERECOMMEND_WITH_KEEP_LINES;
		}

		public BigDecimal FORCED_RERECOMMEND_WITH_KEEP_CASES;

		public BigDecimal getFORCED_RERECOMMEND_WITH_KEEP_CASES() {
			return this.FORCED_RERECOMMEND_WITH_KEEP_CASES;
		}

		public java.util.Date CREATED_TIMESTAMP;

		public java.util.Date getCREATED_TIMESTAMP() {
			return this.CREATED_TIMESTAMP;
		}

		public String CREATED_USER_ID;

		public String getCREATED_USER_ID() {
			return this.CREATED_USER_ID;
		}

		public String CREATED_PROGRAM_ID;

		public String getCREATED_PROGRAM_ID() {
			return this.CREATED_PROGRAM_ID;
		}

		public java.util.Date UPDATED_TIMESTAMP;

		public java.util.Date getUPDATED_TIMESTAMP() {
			return this.UPDATED_TIMESTAMP;
		}

		public String UPDATED_USER_ID;

		public String getUPDATED_USER_ID() {
			return this.UPDATED_USER_ID;
		}

		public String UPDATED_PROGRAM_ID;

		public String getUPDATED_PROGRAM_ID() {
			return this.UPDATED_PROGRAM_ID;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());

				result = prime * result + ((this.PROCESSING_DATE == null) ? 0 : this.PROCESSING_DATE.hashCode());

				result = prime * result + ((this.BUYER_NO == null) ? 0 : this.BUYER_NO.hashCode());

				result = prime * result + ((this.CATEGORY == null) ? 0 : this.CATEGORY.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final BUYER_STATISTICSStruct other = (BUYER_STATISTICSStruct) obj;

			if (this.SITE_ID == null) {
				if (other.SITE_ID != null)
					return false;

			} else if (!this.SITE_ID.equals(other.SITE_ID))

				return false;

			if (this.PROCESSING_DATE == null) {
				if (other.PROCESSING_DATE != null)
					return false;

			} else if (!this.PROCESSING_DATE.equals(other.PROCESSING_DATE))

				return false;

			if (this.BUYER_NO == null) {
				if (other.BUYER_NO != null)
					return false;

			} else if (!this.BUYER_NO.equals(other.BUYER_NO))

				return false;

			if (this.CATEGORY == null) {
				if (other.CATEGORY != null)
					return false;

			} else if (!this.CATEGORY.equals(other.CATEGORY))

				return false;

			return true;
		}

		public void copyDataTo(BUYER_STATISTICSStruct other) {

			other.SITE_ID = this.SITE_ID;
			other.PROCESSING_DATE = this.PROCESSING_DATE;
			other.BUYER_NO = this.BUYER_NO;
			other.CATEGORY = this.CATEGORY;
			other.STITSTOCKED_ITEMS = this.STITSTOCKED_ITEMS;
			other.SPMDSE_ITEMS = this.SPMDSE_ITEMS;
			other.VENDOR_COUNT = this.VENDOR_COUNT;
			other.INVENTORY_VALUE = this.INVENTORY_VALUE;
			other.DAYS_SALES_OUTSTANDING = this.DAYS_SALES_OUTSTANDING;
			other.DAILY_SALES = this.DAILY_SALES;
			other.MERCHANDISING_PIECES_ORDERED = this.MERCHANDISING_PIECES_ORDERED;
			other.MERCHANDISING_PIECES_SHIPPED = this.MERCHANDISING_PIECES_SHIPPED;
			other.MERCHANDISING_PIECES_SUBBED = this.MERCHANDISING_PIECES_SUBBED;
			other.MERCHANDISING_DOLLARS_ORDERED = this.MERCHANDISING_DOLLARS_ORDERED;
			other.MERCHANDISING_DOLLARS_SHIPPED = this.MERCHANDISING_DOLLARS_SHIPPED;
			other.MERCHANDISING_DOLLARS_SUBBED = this.MERCHANDISING_DOLLARS_SUBBED;
			other.MERCHANDISING_CASES_SERVICE_LEVEL = this.MERCHANDISING_CASES_SERVICE_LEVEL;
			other.MERCHANDISING_CASES_FILL_RATE = this.MERCHANDISING_CASES_FILL_RATE;
			other.MERCHANDISING_DOLLARS_SERVICE_LEVEL = this.MERCHANDISING_DOLLARS_SERVICE_LEVEL;
			other.MERCHANDISING_DOLLARS_FILL_RATE = this.MERCHANDISING_DOLLARS_FILL_RATE;
			other.SYGMA_PO = this.SYGMA_PO;
			other.SYGMA_PO_LINES = this.SYGMA_PO_LINES;
			other.SYGMA_PO_LINES_CHANGED_UP = this.SYGMA_PO_LINES_CHANGED_UP;
			other.SYGMA_PO_LINES_CHANGED_DOWN = this.SYGMA_PO_LINES_CHANGED_DOWN;
			other.SYGMA_PO_LINES_FORCED = this.SYGMA_PO_LINES_FORCED;
			other.SYGMA_PO_LINES_DELETED = this.SYGMA_PO_LINES_DELETED;
			other.SYGMA_PO_LINES_FINAL = this.SYGMA_PO_LINES_FINAL;
			other.SYGMA_PO_CASES = this.SYGMA_PO_CASES;
			other.SYGMA_PO_CASES_CHANGED_UP = this.SYGMA_PO_CASES_CHANGED_UP;
			other.SYGMA_PO_CASES_CHANGED_DOWN = this.SYGMA_PO_CASES_CHANGED_DOWN;
			other.SYGMA_PO_CASES_FORCED = this.SYGMA_PO_CASES_FORCED;
			other.SYGMA_PO_CASES_DELETED = this.SYGMA_PO_CASES_DELETED;
			other.SYGMA_PO_CASES_FINAL = this.SYGMA_PO_CASES_FINAL;
			other.SYGMA_PO_RECEIVED = this.SYGMA_PO_RECEIVED;
			other.FORCED_PO = this.FORCED_PO;
			other.FORCED_PO_LINES = this.FORCED_PO_LINES;
			other.FORCED_PO_CASES = this.FORCED_PO_CASES;
			other.SYGMA_PO_UNCHANGED = this.SYGMA_PO_UNCHANGED;
			other.SYGMA_PO_LINES_UNCHANGED = this.SYGMA_PO_LINES_UNCHANGED;
			other.SYGMA_PO_CASES_UNCHANGED = this.SYGMA_PO_CASES_UNCHANGED;
			other.FORECAST_ITEMS = this.FORECAST_ITEMS;
			other.FORECAST_LINES_CHANGED_UP = this.FORECAST_LINES_CHANGED_UP;
			other.FORECAST_LINES_CHANGED_DOWN = this.FORECAST_LINES_CHANGED_DOWN;
			other.FORECAST_CASES_CHANGED_UP = this.FORECAST_CASES_CHANGED_UP;
			other.FORECAST_CASES_CHANGED_DOWN = this.FORECAST_CASES_CHANGED_DOWN;
			other.RECEIVED_PO = this.RECEIVED_PO;
			other.RECEIVED_LINES = this.RECEIVED_LINES;
			other.MERCHANDISE_PROFORMA_RECEIVED = this.MERCHANDISE_PROFORMA_RECEIVED;
			other.MERCHANDISE_PROFORMA_LINES_RECEIVED = this.MERCHANDISE_PROFORMA_LINES_RECEIVED;
			other.FREIGHT_PROFORMA_RECEIVED = this.FREIGHT_PROFORMA_RECEIVED;
			other.FREIGHT_PROFORMA_LINES_RECEIVED = this.FREIGHT_PROFORMA_LINES_RECEIVED;
			other.SYGMA_PO_RERECOMMEND_TO_MIN_PO = this.SYGMA_PO_RERECOMMEND_TO_MIN_PO;
			other.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES;
			other.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES;
			other.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO;
			other.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
			other.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
			other.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO;
			other.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES;
			other.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES;
			other.FORCED_RERECOMMEND_TO_MIN_PO = this.FORCED_RERECOMMEND_TO_MIN_PO;
			other.FORCED_RERECOMMEND_TO_MIN_LINES = this.FORCED_RERECOMMEND_TO_MIN_LINES;
			other.FORCED_RERECOMMEND_TO_MIN_CASES = this.FORCED_RERECOMMEND_TO_MIN_CASES;
			other.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO;
			other.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
			other.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
			other.FORCED_RERECOMMEND_WITH_KEEP_PO = this.FORCED_RERECOMMEND_WITH_KEEP_PO;
			other.FORCED_RERECOMMEND_WITH_KEEP_LINES = this.FORCED_RERECOMMEND_WITH_KEEP_LINES;
			other.FORCED_RERECOMMEND_WITH_KEEP_CASES = this.FORCED_RERECOMMEND_WITH_KEEP_CASES;
			other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
			other.CREATED_USER_ID = this.CREATED_USER_ID;
			other.CREATED_PROGRAM_ID = this.CREATED_PROGRAM_ID;
			other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
			other.UPDATED_USER_ID = this.UPDATED_USER_ID;
			other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
			other.IS_DELETED = this.IS_DELETED;

		}

		public void copyKeysDataTo(BUYER_STATISTICSStruct other) {

			other.SITE_ID = this.SITE_ID;
			other.PROCESSING_DATE = this.PROCESSING_DATE;
			other.BUYER_NO = this.BUYER_NO;
			other.CATEGORY = this.CATEGORY;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.PROCESSING_DATE = readDate(dis);

					this.BUYER_NO = readString(dis);

					this.CATEGORY = readString(dis);

					this.STITSTOCKED_ITEMS = (BigDecimal) dis.readObject();

					this.SPMDSE_ITEMS = (BigDecimal) dis.readObject();

					this.VENDOR_COUNT = (BigDecimal) dis.readObject();

					this.INVENTORY_VALUE = (BigDecimal) dis.readObject();

					this.DAYS_SALES_OUTSTANDING = (BigDecimal) dis.readObject();

					this.DAILY_SALES = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_ORDERED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_SHIPPED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_SUBBED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_ORDERED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SHIPPED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SUBBED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_CASES_SERVICE_LEVEL = (BigDecimal) dis.readObject();

					this.MERCHANDISING_CASES_FILL_RATE = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SERVICE_LEVEL = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_FILL_RATE = (BigDecimal) dis.readObject();

					this.SYGMA_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_FORCED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_DELETED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_FINAL = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_FORCED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_DELETED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_FINAL = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RECEIVED = (BigDecimal) dis.readObject();

					this.FORCED_PO = (BigDecimal) dis.readObject();

					this.FORCED_PO_LINES = (BigDecimal) dis.readObject();

					this.FORCED_PO_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_UNCHANGED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_UNCHANGED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_UNCHANGED = (BigDecimal) dis.readObject();

					this.FORECAST_ITEMS = (BigDecimal) dis.readObject();

					this.FORECAST_LINES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.FORECAST_LINES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.FORECAST_CASES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.FORECAST_CASES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.RECEIVED_PO = (BigDecimal) dis.readObject();

					this.RECEIVED_LINES = (BigDecimal) dis.readObject();

					this.MERCHANDISE_PROFORMA_RECEIVED = (BigDecimal) dis.readObject();

					this.MERCHANDISE_PROFORMA_LINES_RECEIVED = (BigDecimal) dis.readObject();

					this.FREIGHT_PROFORMA_RECEIVED = (BigDecimal) dis.readObject();

					this.FREIGHT_PROFORMA_LINES_RECEIVED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_CASES = (BigDecimal) dis.readObject();

					this.CREATED_TIMESTAMP = readDate(dis);

					this.CREATED_USER_ID = readString(dis);

					this.CREATED_PROGRAM_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readDate(dis);

					this.UPDATED_USER_ID = readString(dis);

					this.UPDATED_PROGRAM_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.PROCESSING_DATE = readDate(dis);

					this.BUYER_NO = readString(dis);

					this.CATEGORY = readString(dis);

					this.STITSTOCKED_ITEMS = (BigDecimal) dis.readObject();

					this.SPMDSE_ITEMS = (BigDecimal) dis.readObject();

					this.VENDOR_COUNT = (BigDecimal) dis.readObject();

					this.INVENTORY_VALUE = (BigDecimal) dis.readObject();

					this.DAYS_SALES_OUTSTANDING = (BigDecimal) dis.readObject();

					this.DAILY_SALES = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_ORDERED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_SHIPPED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_PIECES_SUBBED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_ORDERED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SHIPPED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SUBBED = (BigDecimal) dis.readObject();

					this.MERCHANDISING_CASES_SERVICE_LEVEL = (BigDecimal) dis.readObject();

					this.MERCHANDISING_CASES_FILL_RATE = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_SERVICE_LEVEL = (BigDecimal) dis.readObject();

					this.MERCHANDISING_DOLLARS_FILL_RATE = (BigDecimal) dis.readObject();

					this.SYGMA_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_FORCED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_DELETED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_FINAL = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_FORCED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_DELETED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_FINAL = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RECEIVED = (BigDecimal) dis.readObject();

					this.FORCED_PO = (BigDecimal) dis.readObject();

					this.FORCED_PO_LINES = (BigDecimal) dis.readObject();

					this.FORCED_PO_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_UNCHANGED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_LINES_UNCHANGED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_CASES_UNCHANGED = (BigDecimal) dis.readObject();

					this.FORECAST_ITEMS = (BigDecimal) dis.readObject();

					this.FORECAST_LINES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.FORECAST_LINES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.FORECAST_CASES_CHANGED_UP = (BigDecimal) dis.readObject();

					this.FORECAST_CASES_CHANGED_DOWN = (BigDecimal) dis.readObject();

					this.RECEIVED_PO = (BigDecimal) dis.readObject();

					this.RECEIVED_LINES = (BigDecimal) dis.readObject();

					this.MERCHANDISE_PROFORMA_RECEIVED = (BigDecimal) dis.readObject();

					this.MERCHANDISE_PROFORMA_LINES_RECEIVED = (BigDecimal) dis.readObject();

					this.FREIGHT_PROFORMA_RECEIVED = (BigDecimal) dis.readObject();

					this.FREIGHT_PROFORMA_LINES_RECEIVED = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = (BigDecimal) dis.readObject();

					this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_MIN_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_PO = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_LINES = (BigDecimal) dis.readObject();

					this.FORCED_RERECOMMEND_WITH_KEEP_CASES = (BigDecimal) dis.readObject();

					this.CREATED_TIMESTAMP = readDate(dis);

					this.CREATED_USER_ID = readString(dis);

					this.CREATED_PROGRAM_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readDate(dis);

					this.UPDATED_USER_ID = readString(dis);

					this.UPDATED_PROGRAM_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// java.util.Date

				writeDate(this.PROCESSING_DATE, dos);

				// String

				writeString(this.BUYER_NO, dos);

				// String

				writeString(this.CATEGORY, dos);

				// BigDecimal

				dos.writeObject(this.STITSTOCKED_ITEMS);

				// BigDecimal

				dos.writeObject(this.SPMDSE_ITEMS);

				// BigDecimal

				dos.writeObject(this.VENDOR_COUNT);

				// BigDecimal

				dos.writeObject(this.INVENTORY_VALUE);

				// BigDecimal

				dos.writeObject(this.DAYS_SALES_OUTSTANDING);

				// BigDecimal

				dos.writeObject(this.DAILY_SALES);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_ORDERED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_SHIPPED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_SUBBED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_ORDERED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SHIPPED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SUBBED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_CASES_SERVICE_LEVEL);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_CASES_FILL_RATE);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SERVICE_LEVEL);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_FILL_RATE);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_FORCED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_DELETED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_FINAL);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_FORCED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_DELETED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_FINAL);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FORCED_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_PO_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_PO_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.FORECAST_ITEMS);

				// BigDecimal

				dos.writeObject(this.FORECAST_LINES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.FORECAST_LINES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.FORECAST_CASES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.FORECAST_CASES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.RECEIVED_PO);

				// BigDecimal

				dos.writeObject(this.RECEIVED_LINES);

				// BigDecimal

				dos.writeObject(this.MERCHANDISE_PROFORMA_RECEIVED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISE_PROFORMA_LINES_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FREIGHT_PROFORMA_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FREIGHT_PROFORMA_LINES_RECEIVED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_CASES);

				// java.util.Date

				writeDate(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// String

				writeString(this.CREATED_PROGRAM_ID, dos);

				// java.util.Date

				writeDate(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// String

				writeString(this.UPDATED_PROGRAM_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// java.util.Date

				writeDate(this.PROCESSING_DATE, dos);

				// String

				writeString(this.BUYER_NO, dos);

				// String

				writeString(this.CATEGORY, dos);

				// BigDecimal

				dos.writeObject(this.STITSTOCKED_ITEMS);

				// BigDecimal

				dos.writeObject(this.SPMDSE_ITEMS);

				// BigDecimal

				dos.writeObject(this.VENDOR_COUNT);

				// BigDecimal

				dos.writeObject(this.INVENTORY_VALUE);

				// BigDecimal

				dos.writeObject(this.DAYS_SALES_OUTSTANDING);

				// BigDecimal

				dos.writeObject(this.DAILY_SALES);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_ORDERED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_SHIPPED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_PIECES_SUBBED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_ORDERED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SHIPPED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SUBBED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_CASES_SERVICE_LEVEL);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_CASES_FILL_RATE);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_SERVICE_LEVEL);

				// BigDecimal

				dos.writeObject(this.MERCHANDISING_DOLLARS_FILL_RATE);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_FORCED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_DELETED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_FINAL);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_FORCED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_DELETED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_FINAL);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FORCED_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_PO_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_PO_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_LINES_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_CASES_UNCHANGED);

				// BigDecimal

				dos.writeObject(this.FORECAST_ITEMS);

				// BigDecimal

				dos.writeObject(this.FORECAST_LINES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.FORECAST_LINES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.FORECAST_CASES_CHANGED_UP);

				// BigDecimal

				dos.writeObject(this.FORECAST_CASES_CHANGED_DOWN);

				// BigDecimal

				dos.writeObject(this.RECEIVED_PO);

				// BigDecimal

				dos.writeObject(this.RECEIVED_LINES);

				// BigDecimal

				dos.writeObject(this.MERCHANDISE_PROFORMA_RECEIVED);

				// BigDecimal

				dos.writeObject(this.MERCHANDISE_PROFORMA_LINES_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FREIGHT_PROFORMA_RECEIVED);

				// BigDecimal

				dos.writeObject(this.FREIGHT_PROFORMA_LINES_RECEIVED);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_MIN_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES);

				// BigDecimal

				dos.writeObject(this.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_MIN_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_PO);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_LINES);

				// BigDecimal

				dos.writeObject(this.FORCED_RERECOMMEND_WITH_KEEP_CASES);

				// java.util.Date

				writeDate(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// String

				writeString(this.CREATED_PROGRAM_ID, dos);

				// java.util.Date

				writeDate(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// String

				writeString(this.UPDATED_PROGRAM_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",PROCESSING_DATE=" + String.valueOf(PROCESSING_DATE));
			sb.append(",BUYER_NO=" + BUYER_NO);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",STITSTOCKED_ITEMS=" + String.valueOf(STITSTOCKED_ITEMS));
			sb.append(",SPMDSE_ITEMS=" + String.valueOf(SPMDSE_ITEMS));
			sb.append(",VENDOR_COUNT=" + String.valueOf(VENDOR_COUNT));
			sb.append(",INVENTORY_VALUE=" + String.valueOf(INVENTORY_VALUE));
			sb.append(",DAYS_SALES_OUTSTANDING=" + String.valueOf(DAYS_SALES_OUTSTANDING));
			sb.append(",DAILY_SALES=" + String.valueOf(DAILY_SALES));
			sb.append(",MERCHANDISING_PIECES_ORDERED=" + String.valueOf(MERCHANDISING_PIECES_ORDERED));
			sb.append(",MERCHANDISING_PIECES_SHIPPED=" + String.valueOf(MERCHANDISING_PIECES_SHIPPED));
			sb.append(",MERCHANDISING_PIECES_SUBBED=" + String.valueOf(MERCHANDISING_PIECES_SUBBED));
			sb.append(",MERCHANDISING_DOLLARS_ORDERED=" + String.valueOf(MERCHANDISING_DOLLARS_ORDERED));
			sb.append(",MERCHANDISING_DOLLARS_SHIPPED=" + String.valueOf(MERCHANDISING_DOLLARS_SHIPPED));
			sb.append(",MERCHANDISING_DOLLARS_SUBBED=" + String.valueOf(MERCHANDISING_DOLLARS_SUBBED));
			sb.append(",MERCHANDISING_CASES_SERVICE_LEVEL=" + String.valueOf(MERCHANDISING_CASES_SERVICE_LEVEL));
			sb.append(",MERCHANDISING_CASES_FILL_RATE=" + String.valueOf(MERCHANDISING_CASES_FILL_RATE));
			sb.append(",MERCHANDISING_DOLLARS_SERVICE_LEVEL=" + String.valueOf(MERCHANDISING_DOLLARS_SERVICE_LEVEL));
			sb.append(",MERCHANDISING_DOLLARS_FILL_RATE=" + String.valueOf(MERCHANDISING_DOLLARS_FILL_RATE));
			sb.append(",SYGMA_PO=" + String.valueOf(SYGMA_PO));
			sb.append(",SYGMA_PO_LINES=" + String.valueOf(SYGMA_PO_LINES));
			sb.append(",SYGMA_PO_LINES_CHANGED_UP=" + String.valueOf(SYGMA_PO_LINES_CHANGED_UP));
			sb.append(",SYGMA_PO_LINES_CHANGED_DOWN=" + String.valueOf(SYGMA_PO_LINES_CHANGED_DOWN));
			sb.append(",SYGMA_PO_LINES_FORCED=" + String.valueOf(SYGMA_PO_LINES_FORCED));
			sb.append(",SYGMA_PO_LINES_DELETED=" + String.valueOf(SYGMA_PO_LINES_DELETED));
			sb.append(",SYGMA_PO_LINES_FINAL=" + String.valueOf(SYGMA_PO_LINES_FINAL));
			sb.append(",SYGMA_PO_CASES=" + String.valueOf(SYGMA_PO_CASES));
			sb.append(",SYGMA_PO_CASES_CHANGED_UP=" + String.valueOf(SYGMA_PO_CASES_CHANGED_UP));
			sb.append(",SYGMA_PO_CASES_CHANGED_DOWN=" + String.valueOf(SYGMA_PO_CASES_CHANGED_DOWN));
			sb.append(",SYGMA_PO_CASES_FORCED=" + String.valueOf(SYGMA_PO_CASES_FORCED));
			sb.append(",SYGMA_PO_CASES_DELETED=" + String.valueOf(SYGMA_PO_CASES_DELETED));
			sb.append(",SYGMA_PO_CASES_FINAL=" + String.valueOf(SYGMA_PO_CASES_FINAL));
			sb.append(",SYGMA_PO_RECEIVED=" + String.valueOf(SYGMA_PO_RECEIVED));
			sb.append(",FORCED_PO=" + String.valueOf(FORCED_PO));
			sb.append(",FORCED_PO_LINES=" + String.valueOf(FORCED_PO_LINES));
			sb.append(",FORCED_PO_CASES=" + String.valueOf(FORCED_PO_CASES));
			sb.append(",SYGMA_PO_UNCHANGED=" + String.valueOf(SYGMA_PO_UNCHANGED));
			sb.append(",SYGMA_PO_LINES_UNCHANGED=" + String.valueOf(SYGMA_PO_LINES_UNCHANGED));
			sb.append(",SYGMA_PO_CASES_UNCHANGED=" + String.valueOf(SYGMA_PO_CASES_UNCHANGED));
			sb.append(",FORECAST_ITEMS=" + String.valueOf(FORECAST_ITEMS));
			sb.append(",FORECAST_LINES_CHANGED_UP=" + String.valueOf(FORECAST_LINES_CHANGED_UP));
			sb.append(",FORECAST_LINES_CHANGED_DOWN=" + String.valueOf(FORECAST_LINES_CHANGED_DOWN));
			sb.append(",FORECAST_CASES_CHANGED_UP=" + String.valueOf(FORECAST_CASES_CHANGED_UP));
			sb.append(",FORECAST_CASES_CHANGED_DOWN=" + String.valueOf(FORECAST_CASES_CHANGED_DOWN));
			sb.append(",RECEIVED_PO=" + String.valueOf(RECEIVED_PO));
			sb.append(",RECEIVED_LINES=" + String.valueOf(RECEIVED_LINES));
			sb.append(",MERCHANDISE_PROFORMA_RECEIVED=" + String.valueOf(MERCHANDISE_PROFORMA_RECEIVED));
			sb.append(",MERCHANDISE_PROFORMA_LINES_RECEIVED=" + String.valueOf(MERCHANDISE_PROFORMA_LINES_RECEIVED));
			sb.append(",FREIGHT_PROFORMA_RECEIVED=" + String.valueOf(FREIGHT_PROFORMA_RECEIVED));
			sb.append(",FREIGHT_PROFORMA_LINES_RECEIVED=" + String.valueOf(FREIGHT_PROFORMA_LINES_RECEIVED));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_MIN_PO=" + String.valueOf(SYGMA_PO_RERECOMMEND_TO_MIN_PO));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_MIN_LINES=" + String.valueOf(SYGMA_PO_RERECOMMEND_TO_MIN_LINES));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_MIN_CASES=" + String.valueOf(SYGMA_PO_RERECOMMEND_TO_MIN_CASES));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO="
					+ String.valueOf(SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES="
					+ String.valueOf(SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES));
			sb.append(",SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES="
					+ String.valueOf(SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES));
			sb.append(",SYGMA_PO_RERECOMMEND_WITH_KEEP_PO=" + String.valueOf(SYGMA_PO_RERECOMMEND_WITH_KEEP_PO));
			sb.append(",SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES=" + String.valueOf(SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES));
			sb.append(",SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES=" + String.valueOf(SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES));
			sb.append(",FORCED_RERECOMMEND_TO_MIN_PO=" + String.valueOf(FORCED_RERECOMMEND_TO_MIN_PO));
			sb.append(",FORCED_RERECOMMEND_TO_MIN_LINES=" + String.valueOf(FORCED_RERECOMMEND_TO_MIN_LINES));
			sb.append(",FORCED_RERECOMMEND_TO_MIN_CASES=" + String.valueOf(FORCED_RERECOMMEND_TO_MIN_CASES));
			sb.append(",FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO=" + String.valueOf(FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO));
			sb.append(",FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES="
					+ String.valueOf(FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES));
			sb.append(",FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES="
					+ String.valueOf(FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES));
			sb.append(",FORCED_RERECOMMEND_WITH_KEEP_PO=" + String.valueOf(FORCED_RERECOMMEND_WITH_KEEP_PO));
			sb.append(",FORCED_RERECOMMEND_WITH_KEEP_LINES=" + String.valueOf(FORCED_RERECOMMEND_WITH_KEEP_LINES));
			sb.append(",FORCED_RERECOMMEND_WITH_KEEP_CASES=" + String.valueOf(FORCED_RERECOMMEND_WITH_KEEP_CASES));
			sb.append(",CREATED_TIMESTAMP=" + String.valueOf(CREATED_TIMESTAMP));
			sb.append(",CREATED_USER_ID=" + CREATED_USER_ID);
			sb.append(",CREATED_PROGRAM_ID=" + CREATED_PROGRAM_ID);
			sb.append(",UPDATED_TIMESTAMP=" + String.valueOf(UPDATED_TIMESTAMP));
			sb.append(",UPDATED_USER_ID=" + UPDATED_USER_ID);
			sb.append(",UPDATED_PROGRAM_ID=" + UPDATED_PROGRAM_ID);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(BUYER_STATISTICSStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PROCESSING_DATE, other.PROCESSING_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.BUYER_NO, other.BUYER_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CATEGORY, other.CATEGORY);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[0];

		public BigDecimal BKPRDT;

		public BigDecimal getBKPRDT() {
			return this.BKPRDT;
		}

		public String BKBUYR;

		public String getBKBUYR() {
			return this.BKBUYR;
		}

		public String BKCATE;

		public String getBKCATE() {
			return this.BKCATE;
		}

		public BigDecimal BKSTIT;

		public BigDecimal getBKSTIT() {
			return this.BKSTIT;
		}

		public BigDecimal BKSPMI;

		public BigDecimal getBKSPMI() {
			return this.BKSPMI;
		}

		public BigDecimal BKVNDS;

		public BigDecimal getBKVNDS() {
			return this.BKVNDS;
		}

		public BigDecimal BKINVL;

		public BigDecimal getBKINVL() {
			return this.BKINVL;
		}

		public BigDecimal BKDASO;

		public BigDecimal getBKDASO() {
			return this.BKDASO;
		}

		public BigDecimal BKDLSL;

		public BigDecimal getBKDLSL() {
			return this.BKDLSL;
		}

		public BigDecimal BKMPOR;

		public BigDecimal getBKMPOR() {
			return this.BKMPOR;
		}

		public BigDecimal BKMPSH;

		public BigDecimal getBKMPSH() {
			return this.BKMPSH;
		}

		public BigDecimal BKMPSU;

		public BigDecimal getBKMPSU() {
			return this.BKMPSU;
		}

		public BigDecimal BKMDOR;

		public BigDecimal getBKMDOR() {
			return this.BKMDOR;
		}

		public BigDecimal BKMDSH;

		public BigDecimal getBKMDSH() {
			return this.BKMDSH;
		}

		public BigDecimal BKMDSU;

		public BigDecimal getBKMDSU() {
			return this.BKMDSU;
		}

		public BigDecimal BKMCSL;

		public BigDecimal getBKMCSL() {
			return this.BKMCSL;
		}

		public BigDecimal BKMCFR;

		public BigDecimal getBKMCFR() {
			return this.BKMCFR;
		}

		public BigDecimal BKMDSL;

		public BigDecimal getBKMDSL() {
			return this.BKMDSL;
		}

		public BigDecimal BKMDFR;

		public BigDecimal getBKMDFR() {
			return this.BKMDFR;
		}

		public BigDecimal BKSPP;

		public BigDecimal getBKSPP() {
			return this.BKSPP;
		}

		public BigDecimal BKSPL;

		public BigDecimal getBKSPL() {
			return this.BKSPL;
		}

		public BigDecimal BKSPLU;

		public BigDecimal getBKSPLU() {
			return this.BKSPLU;
		}

		public BigDecimal BKSPLD;

		public BigDecimal getBKSPLD() {
			return this.BKSPLD;
		}

		public BigDecimal BKSPFR;

		public BigDecimal getBKSPFR() {
			return this.BKSPFR;
		}

		public BigDecimal BKSPLX;

		public BigDecimal getBKSPLX() {
			return this.BKSPLX;
		}

		public BigDecimal BKSPLE;

		public BigDecimal getBKSPLE() {
			return this.BKSPLE;
		}

		public BigDecimal BKSPC;

		public BigDecimal getBKSPC() {
			return this.BKSPC;
		}

		public BigDecimal BKSPCU;

		public BigDecimal getBKSPCU() {
			return this.BKSPCU;
		}

		public BigDecimal BKSPDO;

		public BigDecimal getBKSPDO() {
			return this.BKSPDO;
		}

		public BigDecimal BKSPCF;

		public BigDecimal getBKSPCF() {
			return this.BKSPCF;
		}

		public BigDecimal BKSPCC;

		public BigDecimal getBKSPCC() {
			return this.BKSPCC;
		}

		public BigDecimal BKSPCE;

		public BigDecimal getBKSPCE() {
			return this.BKSPCE;
		}

		public BigDecimal BKSPPV;

		public BigDecimal getBKSPPV() {
			return this.BKSPPV;
		}

		public BigDecimal BKFPP;

		public BigDecimal getBKFPP() {
			return this.BKFPP;
		}

		public BigDecimal BKFPL;

		public BigDecimal getBKFPL() {
			return this.BKFPL;
		}

		public BigDecimal BKFPC;

		public BigDecimal getBKFPC() {
			return this.BKFPC;
		}

		public BigDecimal BKSUP;

		public BigDecimal getBKSUP() {
			return this.BKSUP;
		}

		public BigDecimal BKSUL;

		public BigDecimal getBKSUL() {
			return this.BKSUL;
		}

		public BigDecimal BKSUC;

		public BigDecimal getBKSUC() {
			return this.BKSUC;
		}

		public BigDecimal BKFCI;

		public BigDecimal getBKFCI() {
			return this.BKFCI;
		}

		public BigDecimal BKFCIU;

		public BigDecimal getBKFCIU() {
			return this.BKFCIU;
		}

		public BigDecimal BKFCID;

		public BigDecimal getBKFCID() {
			return this.BKFCID;
		}

		public BigDecimal BKFCCU;

		public BigDecimal getBKFCCU() {
			return this.BKFCCU;
		}

		public BigDecimal BKFCCD;

		public BigDecimal getBKFCCD() {
			return this.BKFCCD;
		}

		public BigDecimal BKRCP;

		public BigDecimal getBKRCP() {
			return this.BKRCP;
		}

		public BigDecimal BKRCL;

		public BigDecimal getBKRCL() {
			return this.BKRCL;
		}

		public BigDecimal BKPMP;

		public BigDecimal getBKPMP() {
			return this.BKPMP;
		}

		public BigDecimal BKPML;

		public BigDecimal getBKPML() {
			return this.BKPML;
		}

		public BigDecimal BKPFP;

		public BigDecimal getBKPFP() {
			return this.BKPFP;
		}

		public BigDecimal BKPFL;

		public BigDecimal getBKPFL() {
			return this.BKPFL;
		}

		public BigDecimal BKSRMP;

		public BigDecimal getBKSRMP() {
			return this.BKSRMP;
		}

		public BigDecimal BKSRML;

		public BigDecimal getBKSRML() {
			return this.BKSRML;
		}

		public BigDecimal BKSRMC;

		public BigDecimal getBKSRMC() {
			return this.BKSRMC;
		}

		public BigDecimal BKSRDP;

		public BigDecimal getBKSRDP() {
			return this.BKSRDP;
		}

		public BigDecimal BKSRDL;

		public BigDecimal getBKSRDL() {
			return this.BKSRDL;
		}

		public BigDecimal BKSRDC;

		public BigDecimal getBKSRDC() {
			return this.BKSRDC;
		}

		public BigDecimal BKSRKP;

		public BigDecimal getBKSRKP() {
			return this.BKSRKP;
		}

		public BigDecimal BKSRKL;

		public BigDecimal getBKSRKL() {
			return this.BKSRKL;
		}

		public BigDecimal BKSRKC;

		public BigDecimal getBKSRKC() {
			return this.BKSRKC;
		}

		public BigDecimal BKFRMP;

		public BigDecimal getBKFRMP() {
			return this.BKFRMP;
		}

		public BigDecimal BKFRML;

		public BigDecimal getBKFRML() {
			return this.BKFRML;
		}

		public BigDecimal BKFRMC;

		public BigDecimal getBKFRMC() {
			return this.BKFRMC;
		}

		public BigDecimal BKFRDP;

		public BigDecimal getBKFRDP() {
			return this.BKFRDP;
		}

		public BigDecimal BKFRDL;

		public BigDecimal getBKFRDL() {
			return this.BKFRDL;
		}

		public BigDecimal BKFRDC;

		public BigDecimal getBKFRDC() {
			return this.BKFRDC;
		}

		public BigDecimal BKFRKP;

		public BigDecimal getBKFRKP() {
			return this.BKFRKP;
		}

		public BigDecimal BKFRKL;

		public BigDecimal getBKFRKL() {
			return this.BKFRKL;
		}

		public BigDecimal BKFRKC;

		public BigDecimal getBKFRKC() {
			return this.BKFRKC;
		}

		public BigDecimal BKEADT;

		public BigDecimal getBKEADT() {
			return this.BKEADT;
		}

		public BigDecimal BKEATM;

		public BigDecimal getBKEATM() {
			return this.BKEATM;
		}

		public String BKEAID;

		public String getBKEAID() {
			return this.BKEAID;
		}

		public String BKEAPG;

		public String getBKEAPG() {
			return this.BKEAPG;
		}

		public BigDecimal BKMODT;

		public BigDecimal getBKMODT() {
			return this.BKMODT;
		}

		public BigDecimal BKMOTM;

		public BigDecimal getBKMOTM() {
			return this.BKMOTM;
		}

		public String BKMOID;

		public String getBKMOID() {
			return this.BKMOID;
		}

		public String BKMOPG;

		public String getBKMOPG() {
			return this.BKMOPG;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Buyer_Statistics_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound) {

				try {

					int length = 0;

					this.BKPRDT = (BigDecimal) dis.readObject();

					this.BKBUYR = readString(dis);

					this.BKCATE = readString(dis);

					this.BKSTIT = (BigDecimal) dis.readObject();

					this.BKSPMI = (BigDecimal) dis.readObject();

					this.BKVNDS = (BigDecimal) dis.readObject();

					this.BKINVL = (BigDecimal) dis.readObject();

					this.BKDASO = (BigDecimal) dis.readObject();

					this.BKDLSL = (BigDecimal) dis.readObject();

					this.BKMPOR = (BigDecimal) dis.readObject();

					this.BKMPSH = (BigDecimal) dis.readObject();

					this.BKMPSU = (BigDecimal) dis.readObject();

					this.BKMDOR = (BigDecimal) dis.readObject();

					this.BKMDSH = (BigDecimal) dis.readObject();

					this.BKMDSU = (BigDecimal) dis.readObject();

					this.BKMCSL = (BigDecimal) dis.readObject();

					this.BKMCFR = (BigDecimal) dis.readObject();

					this.BKMDSL = (BigDecimal) dis.readObject();

					this.BKMDFR = (BigDecimal) dis.readObject();

					this.BKSPP = (BigDecimal) dis.readObject();

					this.BKSPL = (BigDecimal) dis.readObject();

					this.BKSPLU = (BigDecimal) dis.readObject();

					this.BKSPLD = (BigDecimal) dis.readObject();

					this.BKSPFR = (BigDecimal) dis.readObject();

					this.BKSPLX = (BigDecimal) dis.readObject();

					this.BKSPLE = (BigDecimal) dis.readObject();

					this.BKSPC = (BigDecimal) dis.readObject();

					this.BKSPCU = (BigDecimal) dis.readObject();

					this.BKSPDO = (BigDecimal) dis.readObject();

					this.BKSPCF = (BigDecimal) dis.readObject();

					this.BKSPCC = (BigDecimal) dis.readObject();

					this.BKSPCE = (BigDecimal) dis.readObject();

					this.BKSPPV = (BigDecimal) dis.readObject();

					this.BKFPP = (BigDecimal) dis.readObject();

					this.BKFPL = (BigDecimal) dis.readObject();

					this.BKFPC = (BigDecimal) dis.readObject();

					this.BKSUP = (BigDecimal) dis.readObject();

					this.BKSUL = (BigDecimal) dis.readObject();

					this.BKSUC = (BigDecimal) dis.readObject();

					this.BKFCI = (BigDecimal) dis.readObject();

					this.BKFCIU = (BigDecimal) dis.readObject();

					this.BKFCID = (BigDecimal) dis.readObject();

					this.BKFCCU = (BigDecimal) dis.readObject();

					this.BKFCCD = (BigDecimal) dis.readObject();

					this.BKRCP = (BigDecimal) dis.readObject();

					this.BKRCL = (BigDecimal) dis.readObject();

					this.BKPMP = (BigDecimal) dis.readObject();

					this.BKPML = (BigDecimal) dis.readObject();

					this.BKPFP = (BigDecimal) dis.readObject();

					this.BKPFL = (BigDecimal) dis.readObject();

					this.BKSRMP = (BigDecimal) dis.readObject();

					this.BKSRML = (BigDecimal) dis.readObject();

					this.BKSRMC = (BigDecimal) dis.readObject();

					this.BKSRDP = (BigDecimal) dis.readObject();

					this.BKSRDL = (BigDecimal) dis.readObject();

					this.BKSRDC = (BigDecimal) dis.readObject();

					this.BKSRKP = (BigDecimal) dis.readObject();

					this.BKSRKL = (BigDecimal) dis.readObject();

					this.BKSRKC = (BigDecimal) dis.readObject();

					this.BKFRMP = (BigDecimal) dis.readObject();

					this.BKFRML = (BigDecimal) dis.readObject();

					this.BKFRMC = (BigDecimal) dis.readObject();

					this.BKFRDP = (BigDecimal) dis.readObject();

					this.BKFRDL = (BigDecimal) dis.readObject();

					this.BKFRDC = (BigDecimal) dis.readObject();

					this.BKFRKP = (BigDecimal) dis.readObject();

					this.BKFRKL = (BigDecimal) dis.readObject();

					this.BKFRKC = (BigDecimal) dis.readObject();

					this.BKEADT = (BigDecimal) dis.readObject();

					this.BKEATM = (BigDecimal) dis.readObject();

					this.BKEAID = readString(dis);

					this.BKEAPG = readString(dis);

					this.BKMODT = (BigDecimal) dis.readObject();

					this.BKMOTM = (BigDecimal) dis.readObject();

					this.BKMOID = readString(dis);

					this.BKMOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Buyer_Statistics_Inbound) {

				try {

					int length = 0;

					this.BKPRDT = (BigDecimal) dis.readObject();

					this.BKBUYR = readString(dis);

					this.BKCATE = readString(dis);

					this.BKSTIT = (BigDecimal) dis.readObject();

					this.BKSPMI = (BigDecimal) dis.readObject();

					this.BKVNDS = (BigDecimal) dis.readObject();

					this.BKINVL = (BigDecimal) dis.readObject();

					this.BKDASO = (BigDecimal) dis.readObject();

					this.BKDLSL = (BigDecimal) dis.readObject();

					this.BKMPOR = (BigDecimal) dis.readObject();

					this.BKMPSH = (BigDecimal) dis.readObject();

					this.BKMPSU = (BigDecimal) dis.readObject();

					this.BKMDOR = (BigDecimal) dis.readObject();

					this.BKMDSH = (BigDecimal) dis.readObject();

					this.BKMDSU = (BigDecimal) dis.readObject();

					this.BKMCSL = (BigDecimal) dis.readObject();

					this.BKMCFR = (BigDecimal) dis.readObject();

					this.BKMDSL = (BigDecimal) dis.readObject();

					this.BKMDFR = (BigDecimal) dis.readObject();

					this.BKSPP = (BigDecimal) dis.readObject();

					this.BKSPL = (BigDecimal) dis.readObject();

					this.BKSPLU = (BigDecimal) dis.readObject();

					this.BKSPLD = (BigDecimal) dis.readObject();

					this.BKSPFR = (BigDecimal) dis.readObject();

					this.BKSPLX = (BigDecimal) dis.readObject();

					this.BKSPLE = (BigDecimal) dis.readObject();

					this.BKSPC = (BigDecimal) dis.readObject();

					this.BKSPCU = (BigDecimal) dis.readObject();

					this.BKSPDO = (BigDecimal) dis.readObject();

					this.BKSPCF = (BigDecimal) dis.readObject();

					this.BKSPCC = (BigDecimal) dis.readObject();

					this.BKSPCE = (BigDecimal) dis.readObject();

					this.BKSPPV = (BigDecimal) dis.readObject();

					this.BKFPP = (BigDecimal) dis.readObject();

					this.BKFPL = (BigDecimal) dis.readObject();

					this.BKFPC = (BigDecimal) dis.readObject();

					this.BKSUP = (BigDecimal) dis.readObject();

					this.BKSUL = (BigDecimal) dis.readObject();

					this.BKSUC = (BigDecimal) dis.readObject();

					this.BKFCI = (BigDecimal) dis.readObject();

					this.BKFCIU = (BigDecimal) dis.readObject();

					this.BKFCID = (BigDecimal) dis.readObject();

					this.BKFCCU = (BigDecimal) dis.readObject();

					this.BKFCCD = (BigDecimal) dis.readObject();

					this.BKRCP = (BigDecimal) dis.readObject();

					this.BKRCL = (BigDecimal) dis.readObject();

					this.BKPMP = (BigDecimal) dis.readObject();

					this.BKPML = (BigDecimal) dis.readObject();

					this.BKPFP = (BigDecimal) dis.readObject();

					this.BKPFL = (BigDecimal) dis.readObject();

					this.BKSRMP = (BigDecimal) dis.readObject();

					this.BKSRML = (BigDecimal) dis.readObject();

					this.BKSRMC = (BigDecimal) dis.readObject();

					this.BKSRDP = (BigDecimal) dis.readObject();

					this.BKSRDL = (BigDecimal) dis.readObject();

					this.BKSRDC = (BigDecimal) dis.readObject();

					this.BKSRKP = (BigDecimal) dis.readObject();

					this.BKSRKL = (BigDecimal) dis.readObject();

					this.BKSRKC = (BigDecimal) dis.readObject();

					this.BKFRMP = (BigDecimal) dis.readObject();

					this.BKFRML = (BigDecimal) dis.readObject();

					this.BKFRMC = (BigDecimal) dis.readObject();

					this.BKFRDP = (BigDecimal) dis.readObject();

					this.BKFRDL = (BigDecimal) dis.readObject();

					this.BKFRDC = (BigDecimal) dis.readObject();

					this.BKFRKP = (BigDecimal) dis.readObject();

					this.BKFRKL = (BigDecimal) dis.readObject();

					this.BKFRKC = (BigDecimal) dis.readObject();

					this.BKEADT = (BigDecimal) dis.readObject();

					this.BKEATM = (BigDecimal) dis.readObject();

					this.BKEAID = readString(dis);

					this.BKEAPG = readString(dis);

					this.BKMODT = (BigDecimal) dis.readObject();

					this.BKMOTM = (BigDecimal) dis.readObject();

					this.BKMOID = readString(dis);

					this.BKMOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.BKPRDT);

				// String

				writeString(this.BKBUYR, dos);

				// String

				writeString(this.BKCATE, dos);

				// BigDecimal

				dos.writeObject(this.BKSTIT);

				// BigDecimal

				dos.writeObject(this.BKSPMI);

				// BigDecimal

				dos.writeObject(this.BKVNDS);

				// BigDecimal

				dos.writeObject(this.BKINVL);

				// BigDecimal

				dos.writeObject(this.BKDASO);

				// BigDecimal

				dos.writeObject(this.BKDLSL);

				// BigDecimal

				dos.writeObject(this.BKMPOR);

				// BigDecimal

				dos.writeObject(this.BKMPSH);

				// BigDecimal

				dos.writeObject(this.BKMPSU);

				// BigDecimal

				dos.writeObject(this.BKMDOR);

				// BigDecimal

				dos.writeObject(this.BKMDSH);

				// BigDecimal

				dos.writeObject(this.BKMDSU);

				// BigDecimal

				dos.writeObject(this.BKMCSL);

				// BigDecimal

				dos.writeObject(this.BKMCFR);

				// BigDecimal

				dos.writeObject(this.BKMDSL);

				// BigDecimal

				dos.writeObject(this.BKMDFR);

				// BigDecimal

				dos.writeObject(this.BKSPP);

				// BigDecimal

				dos.writeObject(this.BKSPL);

				// BigDecimal

				dos.writeObject(this.BKSPLU);

				// BigDecimal

				dos.writeObject(this.BKSPLD);

				// BigDecimal

				dos.writeObject(this.BKSPFR);

				// BigDecimal

				dos.writeObject(this.BKSPLX);

				// BigDecimal

				dos.writeObject(this.BKSPLE);

				// BigDecimal

				dos.writeObject(this.BKSPC);

				// BigDecimal

				dos.writeObject(this.BKSPCU);

				// BigDecimal

				dos.writeObject(this.BKSPDO);

				// BigDecimal

				dos.writeObject(this.BKSPCF);

				// BigDecimal

				dos.writeObject(this.BKSPCC);

				// BigDecimal

				dos.writeObject(this.BKSPCE);

				// BigDecimal

				dos.writeObject(this.BKSPPV);

				// BigDecimal

				dos.writeObject(this.BKFPP);

				// BigDecimal

				dos.writeObject(this.BKFPL);

				// BigDecimal

				dos.writeObject(this.BKFPC);

				// BigDecimal

				dos.writeObject(this.BKSUP);

				// BigDecimal

				dos.writeObject(this.BKSUL);

				// BigDecimal

				dos.writeObject(this.BKSUC);

				// BigDecimal

				dos.writeObject(this.BKFCI);

				// BigDecimal

				dos.writeObject(this.BKFCIU);

				// BigDecimal

				dos.writeObject(this.BKFCID);

				// BigDecimal

				dos.writeObject(this.BKFCCU);

				// BigDecimal

				dos.writeObject(this.BKFCCD);

				// BigDecimal

				dos.writeObject(this.BKRCP);

				// BigDecimal

				dos.writeObject(this.BKRCL);

				// BigDecimal

				dos.writeObject(this.BKPMP);

				// BigDecimal

				dos.writeObject(this.BKPML);

				// BigDecimal

				dos.writeObject(this.BKPFP);

				// BigDecimal

				dos.writeObject(this.BKPFL);

				// BigDecimal

				dos.writeObject(this.BKSRMP);

				// BigDecimal

				dos.writeObject(this.BKSRML);

				// BigDecimal

				dos.writeObject(this.BKSRMC);

				// BigDecimal

				dos.writeObject(this.BKSRDP);

				// BigDecimal

				dos.writeObject(this.BKSRDL);

				// BigDecimal

				dos.writeObject(this.BKSRDC);

				// BigDecimal

				dos.writeObject(this.BKSRKP);

				// BigDecimal

				dos.writeObject(this.BKSRKL);

				// BigDecimal

				dos.writeObject(this.BKSRKC);

				// BigDecimal

				dos.writeObject(this.BKFRMP);

				// BigDecimal

				dos.writeObject(this.BKFRML);

				// BigDecimal

				dos.writeObject(this.BKFRMC);

				// BigDecimal

				dos.writeObject(this.BKFRDP);

				// BigDecimal

				dos.writeObject(this.BKFRDL);

				// BigDecimal

				dos.writeObject(this.BKFRDC);

				// BigDecimal

				dos.writeObject(this.BKFRKP);

				// BigDecimal

				dos.writeObject(this.BKFRKL);

				// BigDecimal

				dos.writeObject(this.BKFRKC);

				// BigDecimal

				dos.writeObject(this.BKEADT);

				// BigDecimal

				dos.writeObject(this.BKEATM);

				// String

				writeString(this.BKEAID, dos);

				// String

				writeString(this.BKEAPG, dos);

				// BigDecimal

				dos.writeObject(this.BKMODT);

				// BigDecimal

				dos.writeObject(this.BKMOTM);

				// String

				writeString(this.BKMOID, dos);

				// String

				writeString(this.BKMOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.BKPRDT);

				// String

				writeString(this.BKBUYR, dos);

				// String

				writeString(this.BKCATE, dos);

				// BigDecimal

				dos.writeObject(this.BKSTIT);

				// BigDecimal

				dos.writeObject(this.BKSPMI);

				// BigDecimal

				dos.writeObject(this.BKVNDS);

				// BigDecimal

				dos.writeObject(this.BKINVL);

				// BigDecimal

				dos.writeObject(this.BKDASO);

				// BigDecimal

				dos.writeObject(this.BKDLSL);

				// BigDecimal

				dos.writeObject(this.BKMPOR);

				// BigDecimal

				dos.writeObject(this.BKMPSH);

				// BigDecimal

				dos.writeObject(this.BKMPSU);

				// BigDecimal

				dos.writeObject(this.BKMDOR);

				// BigDecimal

				dos.writeObject(this.BKMDSH);

				// BigDecimal

				dos.writeObject(this.BKMDSU);

				// BigDecimal

				dos.writeObject(this.BKMCSL);

				// BigDecimal

				dos.writeObject(this.BKMCFR);

				// BigDecimal

				dos.writeObject(this.BKMDSL);

				// BigDecimal

				dos.writeObject(this.BKMDFR);

				// BigDecimal

				dos.writeObject(this.BKSPP);

				// BigDecimal

				dos.writeObject(this.BKSPL);

				// BigDecimal

				dos.writeObject(this.BKSPLU);

				// BigDecimal

				dos.writeObject(this.BKSPLD);

				// BigDecimal

				dos.writeObject(this.BKSPFR);

				// BigDecimal

				dos.writeObject(this.BKSPLX);

				// BigDecimal

				dos.writeObject(this.BKSPLE);

				// BigDecimal

				dos.writeObject(this.BKSPC);

				// BigDecimal

				dos.writeObject(this.BKSPCU);

				// BigDecimal

				dos.writeObject(this.BKSPDO);

				// BigDecimal

				dos.writeObject(this.BKSPCF);

				// BigDecimal

				dos.writeObject(this.BKSPCC);

				// BigDecimal

				dos.writeObject(this.BKSPCE);

				// BigDecimal

				dos.writeObject(this.BKSPPV);

				// BigDecimal

				dos.writeObject(this.BKFPP);

				// BigDecimal

				dos.writeObject(this.BKFPL);

				// BigDecimal

				dos.writeObject(this.BKFPC);

				// BigDecimal

				dos.writeObject(this.BKSUP);

				// BigDecimal

				dos.writeObject(this.BKSUL);

				// BigDecimal

				dos.writeObject(this.BKSUC);

				// BigDecimal

				dos.writeObject(this.BKFCI);

				// BigDecimal

				dos.writeObject(this.BKFCIU);

				// BigDecimal

				dos.writeObject(this.BKFCID);

				// BigDecimal

				dos.writeObject(this.BKFCCU);

				// BigDecimal

				dos.writeObject(this.BKFCCD);

				// BigDecimal

				dos.writeObject(this.BKRCP);

				// BigDecimal

				dos.writeObject(this.BKRCL);

				// BigDecimal

				dos.writeObject(this.BKPMP);

				// BigDecimal

				dos.writeObject(this.BKPML);

				// BigDecimal

				dos.writeObject(this.BKPFP);

				// BigDecimal

				dos.writeObject(this.BKPFL);

				// BigDecimal

				dos.writeObject(this.BKSRMP);

				// BigDecimal

				dos.writeObject(this.BKSRML);

				// BigDecimal

				dos.writeObject(this.BKSRMC);

				// BigDecimal

				dos.writeObject(this.BKSRDP);

				// BigDecimal

				dos.writeObject(this.BKSRDL);

				// BigDecimal

				dos.writeObject(this.BKSRDC);

				// BigDecimal

				dos.writeObject(this.BKSRKP);

				// BigDecimal

				dos.writeObject(this.BKSRKL);

				// BigDecimal

				dos.writeObject(this.BKSRKC);

				// BigDecimal

				dos.writeObject(this.BKFRMP);

				// BigDecimal

				dos.writeObject(this.BKFRML);

				// BigDecimal

				dos.writeObject(this.BKFRMC);

				// BigDecimal

				dos.writeObject(this.BKFRDP);

				// BigDecimal

				dos.writeObject(this.BKFRDL);

				// BigDecimal

				dos.writeObject(this.BKFRDC);

				// BigDecimal

				dos.writeObject(this.BKFRKP);

				// BigDecimal

				dos.writeObject(this.BKFRKL);

				// BigDecimal

				dos.writeObject(this.BKFRKC);

				// BigDecimal

				dos.writeObject(this.BKEADT);

				// BigDecimal

				dos.writeObject(this.BKEATM);

				// String

				writeString(this.BKEAID, dos);

				// String

				writeString(this.BKEAPG, dos);

				// BigDecimal

				dos.writeObject(this.BKMODT);

				// BigDecimal

				dos.writeObject(this.BKMOTM);

				// String

				writeString(this.BKMOID, dos);

				// String

				writeString(this.BKMOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BKPRDT=" + String.valueOf(BKPRDT));
			sb.append(",BKBUYR=" + BKBUYR);
			sb.append(",BKCATE=" + BKCATE);
			sb.append(",BKSTIT=" + String.valueOf(BKSTIT));
			sb.append(",BKSPMI=" + String.valueOf(BKSPMI));
			sb.append(",BKVNDS=" + String.valueOf(BKVNDS));
			sb.append(",BKINVL=" + String.valueOf(BKINVL));
			sb.append(",BKDASO=" + String.valueOf(BKDASO));
			sb.append(",BKDLSL=" + String.valueOf(BKDLSL));
			sb.append(",BKMPOR=" + String.valueOf(BKMPOR));
			sb.append(",BKMPSH=" + String.valueOf(BKMPSH));
			sb.append(",BKMPSU=" + String.valueOf(BKMPSU));
			sb.append(",BKMDOR=" + String.valueOf(BKMDOR));
			sb.append(",BKMDSH=" + String.valueOf(BKMDSH));
			sb.append(",BKMDSU=" + String.valueOf(BKMDSU));
			sb.append(",BKMCSL=" + String.valueOf(BKMCSL));
			sb.append(",BKMCFR=" + String.valueOf(BKMCFR));
			sb.append(",BKMDSL=" + String.valueOf(BKMDSL));
			sb.append(",BKMDFR=" + String.valueOf(BKMDFR));
			sb.append(",BKSPP=" + String.valueOf(BKSPP));
			sb.append(",BKSPL=" + String.valueOf(BKSPL));
			sb.append(",BKSPLU=" + String.valueOf(BKSPLU));
			sb.append(",BKSPLD=" + String.valueOf(BKSPLD));
			sb.append(",BKSPFR=" + String.valueOf(BKSPFR));
			sb.append(",BKSPLX=" + String.valueOf(BKSPLX));
			sb.append(",BKSPLE=" + String.valueOf(BKSPLE));
			sb.append(",BKSPC=" + String.valueOf(BKSPC));
			sb.append(",BKSPCU=" + String.valueOf(BKSPCU));
			sb.append(",BKSPDO=" + String.valueOf(BKSPDO));
			sb.append(",BKSPCF=" + String.valueOf(BKSPCF));
			sb.append(",BKSPCC=" + String.valueOf(BKSPCC));
			sb.append(",BKSPCE=" + String.valueOf(BKSPCE));
			sb.append(",BKSPPV=" + String.valueOf(BKSPPV));
			sb.append(",BKFPP=" + String.valueOf(BKFPP));
			sb.append(",BKFPL=" + String.valueOf(BKFPL));
			sb.append(",BKFPC=" + String.valueOf(BKFPC));
			sb.append(",BKSUP=" + String.valueOf(BKSUP));
			sb.append(",BKSUL=" + String.valueOf(BKSUL));
			sb.append(",BKSUC=" + String.valueOf(BKSUC));
			sb.append(",BKFCI=" + String.valueOf(BKFCI));
			sb.append(",BKFCIU=" + String.valueOf(BKFCIU));
			sb.append(",BKFCID=" + String.valueOf(BKFCID));
			sb.append(",BKFCCU=" + String.valueOf(BKFCCU));
			sb.append(",BKFCCD=" + String.valueOf(BKFCCD));
			sb.append(",BKRCP=" + String.valueOf(BKRCP));
			sb.append(",BKRCL=" + String.valueOf(BKRCL));
			sb.append(",BKPMP=" + String.valueOf(BKPMP));
			sb.append(",BKPML=" + String.valueOf(BKPML));
			sb.append(",BKPFP=" + String.valueOf(BKPFP));
			sb.append(",BKPFL=" + String.valueOf(BKPFL));
			sb.append(",BKSRMP=" + String.valueOf(BKSRMP));
			sb.append(",BKSRML=" + String.valueOf(BKSRML));
			sb.append(",BKSRMC=" + String.valueOf(BKSRMC));
			sb.append(",BKSRDP=" + String.valueOf(BKSRDP));
			sb.append(",BKSRDL=" + String.valueOf(BKSRDL));
			sb.append(",BKSRDC=" + String.valueOf(BKSRDC));
			sb.append(",BKSRKP=" + String.valueOf(BKSRKP));
			sb.append(",BKSRKL=" + String.valueOf(BKSRKL));
			sb.append(",BKSRKC=" + String.valueOf(BKSRKC));
			sb.append(",BKFRMP=" + String.valueOf(BKFRMP));
			sb.append(",BKFRML=" + String.valueOf(BKFRML));
			sb.append(",BKFRMC=" + String.valueOf(BKFRMC));
			sb.append(",BKFRDP=" + String.valueOf(BKFRDP));
			sb.append(",BKFRDL=" + String.valueOf(BKFRDL));
			sb.append(",BKFRDC=" + String.valueOf(BKFRDC));
			sb.append(",BKFRKP=" + String.valueOf(BKFRKP));
			sb.append(",BKFRKL=" + String.valueOf(BKFRKL));
			sb.append(",BKFRKC=" + String.valueOf(BKFRKC));
			sb.append(",BKEADT=" + String.valueOf(BKEADT));
			sb.append(",BKEATM=" + String.valueOf(BKEATM));
			sb.append(",BKEAID=" + BKEAID);
			sb.append(",BKEAPG=" + BKEAPG);
			sb.append(",BKMODT=" + String.valueOf(BKMODT));
			sb.append(",BKMOTM=" + String.valueOf(BKMOTM));
			sb.append(",BKMOID=" + BKMOID);
			sb.append(",BKMOPG=" + BKMOPG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				BUYER_STATISTICSStruct BUYER_STATISTICS = new BUYER_STATISTICSStruct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[78];

					public void addRow(String[] row) {

						for (int i = 0; i < 78; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 77 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 77 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|%28$-");
							sbformat.append(colLengths[27]);
							sbformat.append("s");

							sbformat.append("|%29$-");
							sbformat.append(colLengths[28]);
							sbformat.append("s");

							sbformat.append("|%30$-");
							sbformat.append(colLengths[29]);
							sbformat.append("s");

							sbformat.append("|%31$-");
							sbformat.append(colLengths[30]);
							sbformat.append("s");

							sbformat.append("|%32$-");
							sbformat.append(colLengths[31]);
							sbformat.append("s");

							sbformat.append("|%33$-");
							sbformat.append(colLengths[32]);
							sbformat.append("s");

							sbformat.append("|%34$-");
							sbformat.append(colLengths[33]);
							sbformat.append("s");

							sbformat.append("|%35$-");
							sbformat.append(colLengths[34]);
							sbformat.append("s");

							sbformat.append("|%36$-");
							sbformat.append(colLengths[35]);
							sbformat.append("s");

							sbformat.append("|%37$-");
							sbformat.append(colLengths[36]);
							sbformat.append("s");

							sbformat.append("|%38$-");
							sbformat.append(colLengths[37]);
							sbformat.append("s");

							sbformat.append("|%39$-");
							sbformat.append(colLengths[38]);
							sbformat.append("s");

							sbformat.append("|%40$-");
							sbformat.append(colLengths[39]);
							sbformat.append("s");

							sbformat.append("|%41$-");
							sbformat.append(colLengths[40]);
							sbformat.append("s");

							sbformat.append("|%42$-");
							sbformat.append(colLengths[41]);
							sbformat.append("s");

							sbformat.append("|%43$-");
							sbformat.append(colLengths[42]);
							sbformat.append("s");

							sbformat.append("|%44$-");
							sbformat.append(colLengths[43]);
							sbformat.append("s");

							sbformat.append("|%45$-");
							sbformat.append(colLengths[44]);
							sbformat.append("s");

							sbformat.append("|%46$-");
							sbformat.append(colLengths[45]);
							sbformat.append("s");

							sbformat.append("|%47$-");
							sbformat.append(colLengths[46]);
							sbformat.append("s");

							sbformat.append("|%48$-");
							sbformat.append(colLengths[47]);
							sbformat.append("s");

							sbformat.append("|%49$-");
							sbformat.append(colLengths[48]);
							sbformat.append("s");

							sbformat.append("|%50$-");
							sbformat.append(colLengths[49]);
							sbformat.append("s");

							sbformat.append("|%51$-");
							sbformat.append(colLengths[50]);
							sbformat.append("s");

							sbformat.append("|%52$-");
							sbformat.append(colLengths[51]);
							sbformat.append("s");

							sbformat.append("|%53$-");
							sbformat.append(colLengths[52]);
							sbformat.append("s");

							sbformat.append("|%54$-");
							sbformat.append(colLengths[53]);
							sbformat.append("s");

							sbformat.append("|%55$-");
							sbformat.append(colLengths[54]);
							sbformat.append("s");

							sbformat.append("|%56$-");
							sbformat.append(colLengths[55]);
							sbformat.append("s");

							sbformat.append("|%57$-");
							sbformat.append(colLengths[56]);
							sbformat.append("s");

							sbformat.append("|%58$-");
							sbformat.append(colLengths[57]);
							sbformat.append("s");

							sbformat.append("|%59$-");
							sbformat.append(colLengths[58]);
							sbformat.append("s");

							sbformat.append("|%60$-");
							sbformat.append(colLengths[59]);
							sbformat.append("s");

							sbformat.append("|%61$-");
							sbformat.append(colLengths[60]);
							sbformat.append("s");

							sbformat.append("|%62$-");
							sbformat.append(colLengths[61]);
							sbformat.append("s");

							sbformat.append("|%63$-");
							sbformat.append(colLengths[62]);
							sbformat.append("s");

							sbformat.append("|%64$-");
							sbformat.append(colLengths[63]);
							sbformat.append("s");

							sbformat.append("|%65$-");
							sbformat.append(colLengths[64]);
							sbformat.append("s");

							sbformat.append("|%66$-");
							sbformat.append(colLengths[65]);
							sbformat.append("s");

							sbformat.append("|%67$-");
							sbformat.append(colLengths[66]);
							sbformat.append("s");

							sbformat.append("|%68$-");
							sbformat.append(colLengths[67]);
							sbformat.append("s");

							sbformat.append("|%69$-");
							sbformat.append(colLengths[68]);
							sbformat.append("s");

							sbformat.append("|%70$-");
							sbformat.append(colLengths[69]);
							sbformat.append("s");

							sbformat.append("|%71$-");
							sbformat.append(colLengths[70]);
							sbformat.append("s");

							sbformat.append("|%72$-");
							sbformat.append(colLengths[71]);
							sbformat.append("s");

							sbformat.append("|%73$-");
							sbformat.append(colLengths[72]);
							sbformat.append("s");

							sbformat.append("|%74$-");
							sbformat.append(colLengths[73]);
							sbformat.append("s");

							sbformat.append("|%75$-");
							sbformat.append(colLengths[74]);
							sbformat.append("s");

							sbformat.append("|%76$-");
							sbformat.append(colLengths[75]);
							sbformat.append("s");

							sbformat.append("|%77$-");
							sbformat.append(colLengths[76]);
							sbformat.append("s");

							sbformat.append("|%78$-");
							sbformat.append(colLengths[77]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[71] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[72] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[73] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[74] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[75] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[76] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[77] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "SITE_ID", "PROCESSING_DATE", "BUYER_NO", "CATEGORY",
						"STITSTOCKED_ITEMS", "SPMDSE_ITEMS", "VENDOR_COUNT", "INVENTORY_VALUE",
						"DAYS_SALES_OUTSTANDING", "DAILY_SALES", "MERCHANDISING_PIECES_ORDERED",
						"MERCHANDISING_PIECES_SHIPPED", "MERCHANDISING_PIECES_SUBBED", "MERCHANDISING_DOLLARS_ORDERED",
						"MERCHANDISING_DOLLARS_SHIPPED", "MERCHANDISING_DOLLARS_SUBBED",
						"MERCHANDISING_CASES_SERVICE_LEVEL", "MERCHANDISING_CASES_FILL_RATE",
						"MERCHANDISING_DOLLARS_SERVICE_LEVEL", "MERCHANDISING_DOLLARS_FILL_RATE", "SYGMA_PO",
						"SYGMA_PO_LINES", "SYGMA_PO_LINES_CHANGED_UP", "SYGMA_PO_LINES_CHANGED_DOWN",
						"SYGMA_PO_LINES_FORCED", "SYGMA_PO_LINES_DELETED", "SYGMA_PO_LINES_FINAL", "SYGMA_PO_CASES",
						"SYGMA_PO_CASES_CHANGED_UP", "SYGMA_PO_CASES_CHANGED_DOWN", "SYGMA_PO_CASES_FORCED",
						"SYGMA_PO_CASES_DELETED", "SYGMA_PO_CASES_FINAL", "SYGMA_PO_RECEIVED", "FORCED_PO",
						"FORCED_PO_LINES", "FORCED_PO_CASES", "SYGMA_PO_UNCHANGED", "SYGMA_PO_LINES_UNCHANGED",
						"SYGMA_PO_CASES_UNCHANGED", "FORECAST_ITEMS", "FORECAST_LINES_CHANGED_UP",
						"FORECAST_LINES_CHANGED_DOWN", "FORECAST_CASES_CHANGED_UP", "FORECAST_CASES_CHANGED_DOWN",
						"RECEIVED_PO", "RECEIVED_LINES", "MERCHANDISE_PROFORMA_RECEIVED",
						"MERCHANDISE_PROFORMA_LINES_RECEIVED", "FREIGHT_PROFORMA_RECEIVED",
						"FREIGHT_PROFORMA_LINES_RECEIVED", "SYGMA_PO_RERECOMMEND_TO_MIN_PO",
						"SYGMA_PO_RERECOMMEND_TO_MIN_LINES", "SYGMA_PO_RERECOMMEND_TO_MIN_CASES",
						"SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO", "SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES",
						"SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES", "SYGMA_PO_RERECOMMEND_WITH_KEEP_PO",
						"SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES", "SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES",
						"FORCED_RERECOMMEND_TO_MIN_PO", "FORCED_RERECOMMEND_TO_MIN_LINES",
						"FORCED_RERECOMMEND_TO_MIN_CASES", "FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO",
						"FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES", "FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES",
						"FORCED_RERECOMMEND_WITH_KEEP_PO", "FORCED_RERECOMMEND_WITH_KEEP_LINES",
						"FORCED_RERECOMMEND_WITH_KEEP_CASES", "CREATED_TIMESTAMP", "CREATED_USER_ID",
						"CREATED_PROGRAM_ID", "UPDATED_TIMESTAMP", "UPDATED_USER_ID", "UPDATED_PROGRAM_ID",
						"IS_DELETED", "errorCode", "errorMessage", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "BUYER_STATISTICS");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = context.GIM_Schema_Migrating_Test;

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("BUYER_STATISTICS");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("BUYER_STATISTICS");
				}

				int updateKeyCount_tDBOutput_1 = 4;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 76 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + context.GIM_Server + ":" + context.GIM_Port + "/"
						+ context.GIM_Database + "?" + context.GIM_AdditionalParams;
				dbUser_tDBOutput_1 = context.GIM_Login;

				final String decryptedPassword_tDBOutput_1 = context.GIM_Password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 1;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1
								+ "\" WHERE \"SITE_ID\" = ? AND \"PROCESSING_DATE\" = ? AND \"BUYER_NO\" = ? AND \"CATEGORY\" = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"SITE_ID\",\"PROCESSING_DATE\",\"BUYER_NO\",\"CATEGORY\",\"STITSTOCKED_ITEMS\",\"SPMDSE_ITEMS\",\"VENDOR_COUNT\",\"INVENTORY_VALUE\",\"DAYS_SALES_OUTSTANDING\",\"DAILY_SALES\",\"MERCHANDISING_PIECES_ORDERED\",\"MERCHANDISING_PIECES_SHIPPED\",\"MERCHANDISING_PIECES_SUBBED\",\"MERCHANDISING_DOLLARS_ORDERED\",\"MERCHANDISING_DOLLARS_SHIPPED\",\"MERCHANDISING_DOLLARS_SUBBED\",\"MERCHANDISING_CASES_SERVICE_LEVEL\",\"MERCHANDISING_CASES_FILL_RATE\",\"MERCHANDISING_DOLLARS_SERVICE_LEVEL\",\"MERCHANDISING_DOLLARS_FILL_RATE\",\"SYGMA_PO\",\"SYGMA_PO_LINES\",\"SYGMA_PO_LINES_CHANGED_UP\",\"SYGMA_PO_LINES_CHANGED_DOWN\",\"SYGMA_PO_LINES_FORCED\",\"SYGMA_PO_LINES_DELETED\",\"SYGMA_PO_LINES_FINAL\",\"SYGMA_PO_CASES\",\"SYGMA_PO_CASES_CHANGED_UP\",\"SYGMA_PO_CASES_CHANGED_DOWN\",\"SYGMA_PO_CASES_FORCED\",\"SYGMA_PO_CASES_DELETED\",\"SYGMA_PO_CASES_FINAL\",\"SYGMA_PO_RECEIVED\",\"FORCED_PO\",\"FORCED_PO_LINES\",\"FORCED_PO_CASES\",\"SYGMA_PO_UNCHANGED\",\"SYGMA_PO_LINES_UNCHANGED\",\"SYGMA_PO_CASES_UNCHANGED\",\"FORECAST_ITEMS\",\"FORECAST_LINES_CHANGED_UP\",\"FORECAST_LINES_CHANGED_DOWN\",\"FORECAST_CASES_CHANGED_UP\",\"FORECAST_CASES_CHANGED_DOWN\",\"RECEIVED_PO\",\"RECEIVED_LINES\",\"MERCHANDISE_PROFORMA_RECEIVED\",\"MERCHANDISE_PROFORMA_LINES_RECEIVED\",\"FREIGHT_PROFORMA_RECEIVED\",\"FREIGHT_PROFORMA_LINES_RECEIVED\",\"SYGMA_PO_RERECOMMEND_TO_MIN_PO\",\"SYGMA_PO_RERECOMMEND_TO_MIN_LINES\",\"SYGMA_PO_RERECOMMEND_TO_MIN_CASES\",\"SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO\",\"SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES\",\"SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES\",\"SYGMA_PO_RERECOMMEND_WITH_KEEP_PO\",\"SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES\",\"SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES\",\"FORCED_RERECOMMEND_TO_MIN_PO\",\"FORCED_RERECOMMEND_TO_MIN_LINES\",\"FORCED_RERECOMMEND_TO_MIN_CASES\",\"FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO\",\"FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES\",\"FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES\",\"FORCED_RERECOMMEND_WITH_KEEP_PO\",\"FORCED_RERECOMMEND_WITH_KEEP_LINES\",\"FORCED_RERECOMMEND_WITH_KEEP_CASES\",\"CREATED_TIMESTAMP\",\"CREATED_USER_ID\",\"CREATED_PROGRAM_ID\",\"UPDATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"UPDATED_PROGRAM_ID\",\"IS_DELETED\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"STITSTOCKED_ITEMS\" = ?,\"SPMDSE_ITEMS\" = ?,\"VENDOR_COUNT\" = ?,\"INVENTORY_VALUE\" = ?,\"DAYS_SALES_OUTSTANDING\" = ?,\"DAILY_SALES\" = ?,\"MERCHANDISING_PIECES_ORDERED\" = ?,\"MERCHANDISING_PIECES_SHIPPED\" = ?,\"MERCHANDISING_PIECES_SUBBED\" = ?,\"MERCHANDISING_DOLLARS_ORDERED\" = ?,\"MERCHANDISING_DOLLARS_SHIPPED\" = ?,\"MERCHANDISING_DOLLARS_SUBBED\" = ?,\"MERCHANDISING_CASES_SERVICE_LEVEL\" = ?,\"MERCHANDISING_CASES_FILL_RATE\" = ?,\"MERCHANDISING_DOLLARS_SERVICE_LEVEL\" = ?,\"MERCHANDISING_DOLLARS_FILL_RATE\" = ?,\"SYGMA_PO\" = ?,\"SYGMA_PO_LINES\" = ?,\"SYGMA_PO_LINES_CHANGED_UP\" = ?,\"SYGMA_PO_LINES_CHANGED_DOWN\" = ?,\"SYGMA_PO_LINES_FORCED\" = ?,\"SYGMA_PO_LINES_DELETED\" = ?,\"SYGMA_PO_LINES_FINAL\" = ?,\"SYGMA_PO_CASES\" = ?,\"SYGMA_PO_CASES_CHANGED_UP\" = ?,\"SYGMA_PO_CASES_CHANGED_DOWN\" = ?,\"SYGMA_PO_CASES_FORCED\" = ?,\"SYGMA_PO_CASES_DELETED\" = ?,\"SYGMA_PO_CASES_FINAL\" = ?,\"SYGMA_PO_RECEIVED\" = ?,\"FORCED_PO\" = ?,\"FORCED_PO_LINES\" = ?,\"FORCED_PO_CASES\" = ?,\"SYGMA_PO_UNCHANGED\" = ?,\"SYGMA_PO_LINES_UNCHANGED\" = ?,\"SYGMA_PO_CASES_UNCHANGED\" = ?,\"FORECAST_ITEMS\" = ?,\"FORECAST_LINES_CHANGED_UP\" = ?,\"FORECAST_LINES_CHANGED_DOWN\" = ?,\"FORECAST_CASES_CHANGED_UP\" = ?,\"FORECAST_CASES_CHANGED_DOWN\" = ?,\"RECEIVED_PO\" = ?,\"RECEIVED_LINES\" = ?,\"MERCHANDISE_PROFORMA_RECEIVED\" = ?,\"MERCHANDISE_PROFORMA_LINES_RECEIVED\" = ?,\"FREIGHT_PROFORMA_RECEIVED\" = ?,\"FREIGHT_PROFORMA_LINES_RECEIVED\" = ?,\"SYGMA_PO_RERECOMMEND_TO_MIN_PO\" = ?,\"SYGMA_PO_RERECOMMEND_TO_MIN_LINES\" = ?,\"SYGMA_PO_RERECOMMEND_TO_MIN_CASES\" = ?,\"SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO\" = ?,\"SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES\" = ?,\"SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES\" = ?,\"SYGMA_PO_RERECOMMEND_WITH_KEEP_PO\" = ?,\"SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES\" = ?,\"SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES\" = ?,\"FORCED_RERECOMMEND_TO_MIN_PO\" = ?,\"FORCED_RERECOMMEND_TO_MIN_LINES\" = ?,\"FORCED_RERECOMMEND_TO_MIN_CASES\" = ?,\"FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO\" = ?,\"FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES\" = ?,\"FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES\" = ?,\"FORCED_RERECOMMEND_WITH_KEEP_PO\" = ?,\"FORCED_RERECOMMEND_WITH_KEEP_LINES\" = ?,\"FORCED_RERECOMMEND_WITH_KEEP_CASES\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"CREATED_PROGRAM_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"UPDATED_USER_ID\" = ?,\"UPDATED_PROGRAM_ID\" = ?,\"IS_DELETED\" = ? WHERE \"SITE_ID\" = ? AND \"PROCESSING_DATE\" = ? AND \"BUYER_NO\" = ? AND \"CATEGORY\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
					String PROCESSING_DATE;
					String CREATED_TIMESTAMP;
					String UPDATED_TIMESTAMP;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				BUYER_STATISTICSStruct BUYER_STATISTICS_tmp = new BUYER_STATISTICSStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;

				final String decryptedPassword_tDBInput_1 = context.SUS_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";"
						+ context.SUS_Additional_Params;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  IMBSBKFF.BKPRDT, \n  IMBSBKFF.BKBUYR, \n  IMBSBKFF.BKCATE, \n  IMBSBKFF.BKSTIT, \n  IMBSBKFF.BKSPMI, \n  IMBSBKFF."
						+ "BKVNDS, \n  IMBSBKFF.BKINVL, \n  IMBSBKFF.BKDASO, \n  IMBSBKFF.BKDLSL, \n  IMBSBKFF.BKMPOR, \n  IMBSBKFF.BKMPSH, \n  IMBSBKFF."
						+ "BKMPSU, \n  IMBSBKFF.BKMDOR, \n  IMBSBKFF.BKMDSH, \n  IMBSBKFF.BKMDSU, \n  IMBSBKFF.BKMCSL, \n  IMBSBKFF.BKMCFR, \n  IMBSBKFF."
						+ "BKMDSL, \n  IMBSBKFF.BKMDFR, \n  IMBSBKFF.BKSPP, \n  IMBSBKFF.BKSPL, \n  IMBSBKFF.BKSPLU, \n  IMBSBKFF.BKSPLD, \n  IMBSBKFF.BK"
						+ "SPFR, \n  IMBSBKFF.BKSPLX, \n  IMBSBKFF.BKSPLE, \n  IMBSBKFF.BKSPC, \n  IMBSBKFF.BKSPCU, \n  IMBSBKFF.BKSPDO, \n  IMBSBKFF.BKS"
						+ "PCF, \n  IMBSBKFF.BKSPCC, \n  IMBSBKFF.BKSPCE, \n  IMBSBKFF.BKSPPV, \n  IMBSBKFF.BKFPP, \n  IMBSBKFF.BKFPL, \n  IMBSBKFF.BKFPC"
						+ ", \n  IMBSBKFF.BKSUP, \n  IMBSBKFF.BKSUL, \n  IMBSBKFF.BKSUC, \n  IMBSBKFF.BKFCI, \n  IMBSBKFF.BKFCIU, \n  IMBSBKFF.BKFCID, \n "
						+ " IMBSBKFF.BKFCCU, \n  IMBSBKFF.BKFCCD, \n  IMBSBKFF.BKRCP, \n  IMBSBKFF.BKRCL, \n  IMBSBKFF.BKPMP, \n  IMBSBKFF.BKPML, \n  IMB"
						+ "SBKFF.BKPFP, \n  IMBSBKFF.BKPFL, \n  IMBSBKFF.BKSRMP, \n  IMBSBKFF.BKSRML, \n  IMBSBKFF.BKSRMC, \n  IMBSBKFF.BKSRDP, \n  IMBSB"
						+ "KFF.BKSRDL, \n  IMBSBKFF.BKSRDC, \n  IMBSBKFF.BKSRKP, \n  IMBSBKFF.BKSRKL, \n  IMBSBKFF.BKSRKC, \n  IMBSBKFF.BKFRMP, \n  IMBSB"
						+ "KFF.BKFRML, \n  IMBSBKFF.BKFRMC, \n  IMBSBKFF.BKFRDP, \n  IMBSBKFF.BKFRDL, \n  IMBSBKFF.BKFRDC, \n  IMBSBKFF.BKFRKP, \n  IMBSB"
						+ "KFF.BKFRKL, \n  IMBSBKFF.BKFRKC, \n  IMBSBKFF.BKEADT, \n  IMBSBKFF.BKEATM, \n  IMBSBKFF.BKEAID, \n  IMBSBKFF.BKEAPG, \n  IMBSB"
						+ "KFF.BKMODT, \n  IMBSBKFF.BKMOTM, \n  IMBSBKFF.BKMOID, \n  IMBSBKFF.BKMOPG\nFROM IMBSBKFF LIMIT 100";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.BKPRDT = null;
						} else {

							row1.BKPRDT = rs_tDBInput_1.getBigDecimal(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.BKBUYR = null;
						} else {

							row1.BKBUYR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.BKCATE = null;
						} else {

							row1.BKCATE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.BKSTIT = null;
						} else {

							row1.BKSTIT = rs_tDBInput_1.getBigDecimal(4);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.BKSPMI = null;
						} else {

							row1.BKSPMI = rs_tDBInput_1.getBigDecimal(5);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.BKVNDS = null;
						} else {

							row1.BKVNDS = rs_tDBInput_1.getBigDecimal(6);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.BKINVL = null;
						} else {

							row1.BKINVL = rs_tDBInput_1.getBigDecimal(7);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.BKDASO = null;
						} else {

							row1.BKDASO = rs_tDBInput_1.getBigDecimal(8);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.BKDLSL = null;
						} else {

							row1.BKDLSL = rs_tDBInput_1.getBigDecimal(9);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.BKMPOR = null;
						} else {

							row1.BKMPOR = rs_tDBInput_1.getBigDecimal(10);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.BKMPSH = null;
						} else {

							row1.BKMPSH = rs_tDBInput_1.getBigDecimal(11);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.BKMPSU = null;
						} else {

							row1.BKMPSU = rs_tDBInput_1.getBigDecimal(12);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.BKMDOR = null;
						} else {

							row1.BKMDOR = rs_tDBInput_1.getBigDecimal(13);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.BKMDSH = null;
						} else {

							row1.BKMDSH = rs_tDBInput_1.getBigDecimal(14);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.BKMDSU = null;
						} else {

							row1.BKMDSU = rs_tDBInput_1.getBigDecimal(15);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.BKMCSL = null;
						} else {

							row1.BKMCSL = rs_tDBInput_1.getBigDecimal(16);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.BKMCFR = null;
						} else {

							row1.BKMCFR = rs_tDBInput_1.getBigDecimal(17);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.BKMDSL = null;
						} else {

							row1.BKMDSL = rs_tDBInput_1.getBigDecimal(18);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.BKMDFR = null;
						} else {

							row1.BKMDFR = rs_tDBInput_1.getBigDecimal(19);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.BKSPP = null;
						} else {

							row1.BKSPP = rs_tDBInput_1.getBigDecimal(20);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.BKSPL = null;
						} else {

							row1.BKSPL = rs_tDBInput_1.getBigDecimal(21);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.BKSPLU = null;
						} else {

							row1.BKSPLU = rs_tDBInput_1.getBigDecimal(22);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.BKSPLD = null;
						} else {

							row1.BKSPLD = rs_tDBInput_1.getBigDecimal(23);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.BKSPFR = null;
						} else {

							row1.BKSPFR = rs_tDBInput_1.getBigDecimal(24);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.BKSPLX = null;
						} else {

							row1.BKSPLX = rs_tDBInput_1.getBigDecimal(25);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.BKSPLE = null;
						} else {

							row1.BKSPLE = rs_tDBInput_1.getBigDecimal(26);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.BKSPC = null;
						} else {

							row1.BKSPC = rs_tDBInput_1.getBigDecimal(27);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.BKSPCU = null;
						} else {

							row1.BKSPCU = rs_tDBInput_1.getBigDecimal(28);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.BKSPDO = null;
						} else {

							row1.BKSPDO = rs_tDBInput_1.getBigDecimal(29);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.BKSPCF = null;
						} else {

							row1.BKSPCF = rs_tDBInput_1.getBigDecimal(30);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.BKSPCC = null;
						} else {

							row1.BKSPCC = rs_tDBInput_1.getBigDecimal(31);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.BKSPCE = null;
						} else {

							row1.BKSPCE = rs_tDBInput_1.getBigDecimal(32);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.BKSPPV = null;
						} else {

							row1.BKSPPV = rs_tDBInput_1.getBigDecimal(33);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.BKFPP = null;
						} else {

							row1.BKFPP = rs_tDBInput_1.getBigDecimal(34);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.BKFPL = null;
						} else {

							row1.BKFPL = rs_tDBInput_1.getBigDecimal(35);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.BKFPC = null;
						} else {

							row1.BKFPC = rs_tDBInput_1.getBigDecimal(36);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.BKSUP = null;
						} else {

							row1.BKSUP = rs_tDBInput_1.getBigDecimal(37);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.BKSUL = null;
						} else {

							row1.BKSUL = rs_tDBInput_1.getBigDecimal(38);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.BKSUC = null;
						} else {

							row1.BKSUC = rs_tDBInput_1.getBigDecimal(39);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.BKFCI = null;
						} else {

							row1.BKFCI = rs_tDBInput_1.getBigDecimal(40);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.BKFCIU = null;
						} else {

							row1.BKFCIU = rs_tDBInput_1.getBigDecimal(41);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.BKFCID = null;
						} else {

							row1.BKFCID = rs_tDBInput_1.getBigDecimal(42);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.BKFCCU = null;
						} else {

							row1.BKFCCU = rs_tDBInput_1.getBigDecimal(43);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.BKFCCD = null;
						} else {

							row1.BKFCCD = rs_tDBInput_1.getBigDecimal(44);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.BKRCP = null;
						} else {

							row1.BKRCP = rs_tDBInput_1.getBigDecimal(45);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.BKRCL = null;
						} else {

							row1.BKRCL = rs_tDBInput_1.getBigDecimal(46);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.BKPMP = null;
						} else {

							row1.BKPMP = rs_tDBInput_1.getBigDecimal(47);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.BKPML = null;
						} else {

							row1.BKPML = rs_tDBInput_1.getBigDecimal(48);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.BKPFP = null;
						} else {

							row1.BKPFP = rs_tDBInput_1.getBigDecimal(49);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.BKPFL = null;
						} else {

							row1.BKPFL = rs_tDBInput_1.getBigDecimal(50);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.BKSRMP = null;
						} else {

							row1.BKSRMP = rs_tDBInput_1.getBigDecimal(51);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.BKSRML = null;
						} else {

							row1.BKSRML = rs_tDBInput_1.getBigDecimal(52);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.BKSRMC = null;
						} else {

							row1.BKSRMC = rs_tDBInput_1.getBigDecimal(53);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.BKSRDP = null;
						} else {

							row1.BKSRDP = rs_tDBInput_1.getBigDecimal(54);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.BKSRDL = null;
						} else {

							row1.BKSRDL = rs_tDBInput_1.getBigDecimal(55);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.BKSRDC = null;
						} else {

							row1.BKSRDC = rs_tDBInput_1.getBigDecimal(56);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.BKSRKP = null;
						} else {

							row1.BKSRKP = rs_tDBInput_1.getBigDecimal(57);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 58) {
							row1.BKSRKL = null;
						} else {

							row1.BKSRKL = rs_tDBInput_1.getBigDecimal(58);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 59) {
							row1.BKSRKC = null;
						} else {

							row1.BKSRKC = rs_tDBInput_1.getBigDecimal(59);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 60) {
							row1.BKFRMP = null;
						} else {

							row1.BKFRMP = rs_tDBInput_1.getBigDecimal(60);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 61) {
							row1.BKFRML = null;
						} else {

							row1.BKFRML = rs_tDBInput_1.getBigDecimal(61);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 62) {
							row1.BKFRMC = null;
						} else {

							row1.BKFRMC = rs_tDBInput_1.getBigDecimal(62);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 63) {
							row1.BKFRDP = null;
						} else {

							row1.BKFRDP = rs_tDBInput_1.getBigDecimal(63);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 64) {
							row1.BKFRDL = null;
						} else {

							row1.BKFRDL = rs_tDBInput_1.getBigDecimal(64);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 65) {
							row1.BKFRDC = null;
						} else {

							row1.BKFRDC = rs_tDBInput_1.getBigDecimal(65);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 66) {
							row1.BKFRKP = null;
						} else {

							row1.BKFRKP = rs_tDBInput_1.getBigDecimal(66);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 67) {
							row1.BKFRKL = null;
						} else {

							row1.BKFRKL = rs_tDBInput_1.getBigDecimal(67);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 68) {
							row1.BKFRKC = null;
						} else {

							row1.BKFRKC = rs_tDBInput_1.getBigDecimal(68);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 69) {
							row1.BKEADT = null;
						} else {

							row1.BKEADT = rs_tDBInput_1.getBigDecimal(69);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 70) {
							row1.BKEATM = null;
						} else {

							row1.BKEATM = rs_tDBInput_1.getBigDecimal(70);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 71) {
							row1.BKEAID = null;
						} else {

							row1.BKEAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 71, true);
						}
						if (colQtyInRs_tDBInput_1 < 72) {
							row1.BKEAPG = null;
						} else {

							row1.BKEAPG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, true);
						}
						if (colQtyInRs_tDBInput_1 < 73) {
							row1.BKMODT = null;
						} else {

							row1.BKMODT = rs_tDBInput_1.getBigDecimal(73);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 74) {
							row1.BKMOTM = null;
						} else {

							row1.BKMOTM = rs_tDBInput_1.getBigDecimal(74);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 75) {
							row1.BKMOID = null;
						} else {

							row1.BKMOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, true);
						}
						if (colQtyInRs_tDBInput_1 < 76) {
							row1.BKMOPG = null;
						} else {

							row1.BKMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, true);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;
							Var.PROCESSING_DATE = TimeStampConverting.convertToDate(row1.BKPRDT.toString());
							Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.BKEADT.toString(),
									row1.BKEATM.toString());
							Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.BKMODT.toString(),
									row1.BKMOTM.toString());// ###############################
							// ###############################
							// # Output tables

							BUYER_STATISTICS = null;

// # Output table : 'BUYER_STATISTICS'
							BUYER_STATISTICS_tmp.SITE_ID = "056";
							BUYER_STATISTICS_tmp.PROCESSING_DATE = Var.PROCESSING_DATE != ""
									? TalendDate.parseDate("dd-MM-yyyy", Var.PROCESSING_DATE)
									: null;
							BUYER_STATISTICS_tmp.BUYER_NO = row1.BKBUYR;
							BUYER_STATISTICS_tmp.CATEGORY = row1.BKCATE;
							BUYER_STATISTICS_tmp.STITSTOCKED_ITEMS = row1.BKSTIT;
							BUYER_STATISTICS_tmp.SPMDSE_ITEMS = row1.BKSPMI;
							BUYER_STATISTICS_tmp.VENDOR_COUNT = row1.BKVNDS;
							BUYER_STATISTICS_tmp.INVENTORY_VALUE = row1.BKINVL;
							BUYER_STATISTICS_tmp.DAYS_SALES_OUTSTANDING = row1.BKDASO;
							BUYER_STATISTICS_tmp.DAILY_SALES = row1.BKDLSL;
							BUYER_STATISTICS_tmp.MERCHANDISING_PIECES_ORDERED = row1.BKMPOR;
							BUYER_STATISTICS_tmp.MERCHANDISING_PIECES_SHIPPED = row1.BKMPSH;
							BUYER_STATISTICS_tmp.MERCHANDISING_PIECES_SUBBED = row1.BKMPSU;
							BUYER_STATISTICS_tmp.MERCHANDISING_DOLLARS_ORDERED = row1.BKMDOR;
							BUYER_STATISTICS_tmp.MERCHANDISING_DOLLARS_SHIPPED = row1.BKMDSH;
							BUYER_STATISTICS_tmp.MERCHANDISING_DOLLARS_SUBBED = row1.BKMDSU;
							BUYER_STATISTICS_tmp.MERCHANDISING_CASES_SERVICE_LEVEL = row1.BKMCSL;
							BUYER_STATISTICS_tmp.MERCHANDISING_CASES_FILL_RATE = row1.BKMCFR;
							BUYER_STATISTICS_tmp.MERCHANDISING_DOLLARS_SERVICE_LEVEL = row1.BKMDSL;
							BUYER_STATISTICS_tmp.MERCHANDISING_DOLLARS_FILL_RATE = row1.BKMDFR;
							BUYER_STATISTICS_tmp.SYGMA_PO = row1.BKSPP;
							BUYER_STATISTICS_tmp.SYGMA_PO_LINES = row1.BKSPL;
							BUYER_STATISTICS_tmp.SYGMA_PO_LINES_CHANGED_UP = row1.BKSPLU;
							BUYER_STATISTICS_tmp.SYGMA_PO_LINES_CHANGED_DOWN = row1.BKSPLD;
							BUYER_STATISTICS_tmp.SYGMA_PO_LINES_FORCED = row1.BKSPFR;
							BUYER_STATISTICS_tmp.SYGMA_PO_LINES_DELETED = row1.BKSPLX;
							BUYER_STATISTICS_tmp.SYGMA_PO_LINES_FINAL = row1.BKSPLE;
							BUYER_STATISTICS_tmp.SYGMA_PO_CASES = row1.BKSPC;
							BUYER_STATISTICS_tmp.SYGMA_PO_CASES_CHANGED_UP = row1.BKSPCU;
							BUYER_STATISTICS_tmp.SYGMA_PO_CASES_CHANGED_DOWN = row1.BKSPDO;
							BUYER_STATISTICS_tmp.SYGMA_PO_CASES_FORCED = row1.BKSPCF;
							BUYER_STATISTICS_tmp.SYGMA_PO_CASES_DELETED = row1.BKSPCC;
							BUYER_STATISTICS_tmp.SYGMA_PO_CASES_FINAL = row1.BKSPCE;
							BUYER_STATISTICS_tmp.SYGMA_PO_RECEIVED = row1.BKSPPV;
							BUYER_STATISTICS_tmp.FORCED_PO = row1.BKFPP;
							BUYER_STATISTICS_tmp.FORCED_PO_LINES = row1.BKFPL;
							BUYER_STATISTICS_tmp.FORCED_PO_CASES = row1.BKFPC;
							BUYER_STATISTICS_tmp.SYGMA_PO_UNCHANGED = row1.BKSUP;
							BUYER_STATISTICS_tmp.SYGMA_PO_LINES_UNCHANGED = row1.BKSUL;
							BUYER_STATISTICS_tmp.SYGMA_PO_CASES_UNCHANGED = row1.BKSUC;
							BUYER_STATISTICS_tmp.FORECAST_ITEMS = row1.BKFCI;
							BUYER_STATISTICS_tmp.FORECAST_LINES_CHANGED_UP = row1.BKFCIU;
							BUYER_STATISTICS_tmp.FORECAST_LINES_CHANGED_DOWN = row1.BKFCID;
							BUYER_STATISTICS_tmp.FORECAST_CASES_CHANGED_UP = row1.BKFCCU;
							BUYER_STATISTICS_tmp.FORECAST_CASES_CHANGED_DOWN = row1.BKFCCD;
							BUYER_STATISTICS_tmp.RECEIVED_PO = row1.BKRCP;
							BUYER_STATISTICS_tmp.RECEIVED_LINES = row1.BKRCL;
							BUYER_STATISTICS_tmp.MERCHANDISE_PROFORMA_RECEIVED = row1.BKPMP;
							BUYER_STATISTICS_tmp.MERCHANDISE_PROFORMA_LINES_RECEIVED = row1.BKPML;
							BUYER_STATISTICS_tmp.FREIGHT_PROFORMA_RECEIVED = row1.BKPFP;
							BUYER_STATISTICS_tmp.FREIGHT_PROFORMA_LINES_RECEIVED = row1.BKPFL;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_TO_MIN_PO = row1.BKSRMP;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = row1.BKSRML;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = row1.BKSRMC;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = row1.BKSRDP;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = row1.BKSRDL;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = row1.BKSRDC;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = row1.BKSRKP;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = row1.BKSRKL;
							BUYER_STATISTICS_tmp.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = row1.BKSRKC;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_TO_MIN_PO = row1.BKFRMP;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_TO_MIN_LINES = row1.BKFRML;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_TO_MIN_CASES = row1.BKFRMC;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = row1.BKFRDP;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = row1.BKFRDL;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = row1.BKFRDC;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_WITH_KEEP_PO = row1.BKFRKP;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_WITH_KEEP_LINES = row1.BKFRKL;
							BUYER_STATISTICS_tmp.FORCED_RERECOMMEND_WITH_KEEP_CASES = row1.BKFRKC;
							BUYER_STATISTICS_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP != ""
									? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", Var.CREATED_TIMESTAMP)
									: null;
							BUYER_STATISTICS_tmp.CREATED_USER_ID = row1.BKEAID;
							BUYER_STATISTICS_tmp.CREATED_PROGRAM_ID = row1.BKEAPG;
							BUYER_STATISTICS_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP != ""
									? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", Var.UPDATED_TIMESTAMP)
									: null;
							BUYER_STATISTICS_tmp.UPDATED_USER_ID = row1.BKMOID;
							BUYER_STATISTICS_tmp.UPDATED_PROGRAM_ID = row1.BKMOPG;
							BUYER_STATISTICS_tmp.IS_DELETED = false;
							BUYER_STATISTICS = BUYER_STATISTICS_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "BUYER_STATISTICS"
						if (BUYER_STATISTICS != null) {
							row2 = null;

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "BUYER_STATISTICS"

								);
							}

							row2 = null;
							whetherReject_tDBOutput_1 = false;
							if (BUYER_STATISTICS.SITE_ID == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, BUYER_STATISTICS.SITE_ID);
							}

							if (BUYER_STATISTICS.PROCESSING_DATE != null) {
								pstmt_tDBOutput_1.setTimestamp(2,
										new java.sql.Timestamp(BUYER_STATISTICS.PROCESSING_DATE.getTime()));
							} else {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
							}

							if (BUYER_STATISTICS.BUYER_NO == null) {
								pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(3, BUYER_STATISTICS.BUYER_NO);
							}

							if (BUYER_STATISTICS.CATEGORY == null) {
								pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(4, BUYER_STATISTICS.CATEGORY);
							}

							int checkCount_tDBOutput_1 = -1;
							try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
								}
							}
							if (checkCount_tDBOutput_1 > 0) {
								pstmtUpdate_tDBOutput_1.setBigDecimal(1, BUYER_STATISTICS.STITSTOCKED_ITEMS);

								pstmtUpdate_tDBOutput_1.setBigDecimal(2, BUYER_STATISTICS.SPMDSE_ITEMS);

								pstmtUpdate_tDBOutput_1.setBigDecimal(3, BUYER_STATISTICS.VENDOR_COUNT);

								pstmtUpdate_tDBOutput_1.setBigDecimal(4, BUYER_STATISTICS.INVENTORY_VALUE);

								pstmtUpdate_tDBOutput_1.setBigDecimal(5, BUYER_STATISTICS.DAYS_SALES_OUTSTANDING);

								pstmtUpdate_tDBOutput_1.setBigDecimal(6, BUYER_STATISTICS.DAILY_SALES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(7, BUYER_STATISTICS.MERCHANDISING_PIECES_ORDERED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(8, BUYER_STATISTICS.MERCHANDISING_PIECES_SHIPPED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(9, BUYER_STATISTICS.MERCHANDISING_PIECES_SUBBED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(10,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_ORDERED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(11,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_SHIPPED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(12,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_SUBBED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(13,
										BUYER_STATISTICS.MERCHANDISING_CASES_SERVICE_LEVEL);

								pstmtUpdate_tDBOutput_1.setBigDecimal(14,
										BUYER_STATISTICS.MERCHANDISING_CASES_FILL_RATE);

								pstmtUpdate_tDBOutput_1.setBigDecimal(15,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_SERVICE_LEVEL);

								pstmtUpdate_tDBOutput_1.setBigDecimal(16,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_FILL_RATE);

								pstmtUpdate_tDBOutput_1.setBigDecimal(17, BUYER_STATISTICS.SYGMA_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(18, BUYER_STATISTICS.SYGMA_PO_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(19, BUYER_STATISTICS.SYGMA_PO_LINES_CHANGED_UP);

								pstmtUpdate_tDBOutput_1.setBigDecimal(20, BUYER_STATISTICS.SYGMA_PO_LINES_CHANGED_DOWN);

								pstmtUpdate_tDBOutput_1.setBigDecimal(21, BUYER_STATISTICS.SYGMA_PO_LINES_FORCED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(22, BUYER_STATISTICS.SYGMA_PO_LINES_DELETED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(23, BUYER_STATISTICS.SYGMA_PO_LINES_FINAL);

								pstmtUpdate_tDBOutput_1.setBigDecimal(24, BUYER_STATISTICS.SYGMA_PO_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(25, BUYER_STATISTICS.SYGMA_PO_CASES_CHANGED_UP);

								pstmtUpdate_tDBOutput_1.setBigDecimal(26, BUYER_STATISTICS.SYGMA_PO_CASES_CHANGED_DOWN);

								pstmtUpdate_tDBOutput_1.setBigDecimal(27, BUYER_STATISTICS.SYGMA_PO_CASES_FORCED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(28, BUYER_STATISTICS.SYGMA_PO_CASES_DELETED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(29, BUYER_STATISTICS.SYGMA_PO_CASES_FINAL);

								pstmtUpdate_tDBOutput_1.setBigDecimal(30, BUYER_STATISTICS.SYGMA_PO_RECEIVED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(31, BUYER_STATISTICS.FORCED_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(32, BUYER_STATISTICS.FORCED_PO_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(33, BUYER_STATISTICS.FORCED_PO_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(34, BUYER_STATISTICS.SYGMA_PO_UNCHANGED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(35, BUYER_STATISTICS.SYGMA_PO_LINES_UNCHANGED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(36, BUYER_STATISTICS.SYGMA_PO_CASES_UNCHANGED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(37, BUYER_STATISTICS.FORECAST_ITEMS);

								pstmtUpdate_tDBOutput_1.setBigDecimal(38, BUYER_STATISTICS.FORECAST_LINES_CHANGED_UP);

								pstmtUpdate_tDBOutput_1.setBigDecimal(39, BUYER_STATISTICS.FORECAST_LINES_CHANGED_DOWN);

								pstmtUpdate_tDBOutput_1.setBigDecimal(40, BUYER_STATISTICS.FORECAST_CASES_CHANGED_UP);

								pstmtUpdate_tDBOutput_1.setBigDecimal(41, BUYER_STATISTICS.FORECAST_CASES_CHANGED_DOWN);

								pstmtUpdate_tDBOutput_1.setBigDecimal(42, BUYER_STATISTICS.RECEIVED_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(43, BUYER_STATISTICS.RECEIVED_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(44,
										BUYER_STATISTICS.MERCHANDISE_PROFORMA_RECEIVED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(45,
										BUYER_STATISTICS.MERCHANDISE_PROFORMA_LINES_RECEIVED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(46, BUYER_STATISTICS.FREIGHT_PROFORMA_RECEIVED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(47,
										BUYER_STATISTICS.FREIGHT_PROFORMA_LINES_RECEIVED);

								pstmtUpdate_tDBOutput_1.setBigDecimal(48,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(49,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(50,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(51,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(52,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(53,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(54,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(55,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(56,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(57,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(58,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(59,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(60,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(61,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(62,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(63,
										BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_PO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(64,
										BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(65,
										BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_CASES);

								if (BUYER_STATISTICS.CREATED_TIMESTAMP != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(66,
											new java.sql.Timestamp(BUYER_STATISTICS.CREATED_TIMESTAMP.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(66, java.sql.Types.TIMESTAMP);
								}

								if (BUYER_STATISTICS.CREATED_USER_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(67, BUYER_STATISTICS.CREATED_USER_ID);
								}

								if (BUYER_STATISTICS.CREATED_PROGRAM_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(68, BUYER_STATISTICS.CREATED_PROGRAM_ID);
								}

								if (BUYER_STATISTICS.UPDATED_TIMESTAMP != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(69,
											new java.sql.Timestamp(BUYER_STATISTICS.UPDATED_TIMESTAMP.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(69, java.sql.Types.TIMESTAMP);
								}

								if (BUYER_STATISTICS.UPDATED_USER_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(70, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(70, BUYER_STATISTICS.UPDATED_USER_ID);
								}

								if (BUYER_STATISTICS.UPDATED_PROGRAM_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(71, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(71, BUYER_STATISTICS.UPDATED_PROGRAM_ID);
								}

								if (BUYER_STATISTICS.IS_DELETED == null) {
									pstmtUpdate_tDBOutput_1.setNull(72, java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tDBOutput_1.setBoolean(72, BUYER_STATISTICS.IS_DELETED);
								}

								if (BUYER_STATISTICS.SITE_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(73 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(73 + count_tDBOutput_1, BUYER_STATISTICS.SITE_ID);
								}

								if (BUYER_STATISTICS.PROCESSING_DATE != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(74 + count_tDBOutput_1,
											new java.sql.Timestamp(BUYER_STATISTICS.PROCESSING_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(74 + count_tDBOutput_1, java.sql.Types.TIMESTAMP);
								}

								if (BUYER_STATISTICS.BUYER_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(75 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(75 + count_tDBOutput_1,
											BUYER_STATISTICS.BUYER_NO);
								}

								if (BUYER_STATISTICS.CATEGORY == null) {
									pstmtUpdate_tDBOutput_1.setNull(76 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(76 + count_tDBOutput_1,
											BUYER_STATISTICS.CATEGORY);
								}

								try {

									int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
									updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row2 = new row2Struct();
									row2.SITE_ID = BUYER_STATISTICS.SITE_ID;
									row2.PROCESSING_DATE = BUYER_STATISTICS.PROCESSING_DATE;
									row2.BUYER_NO = BUYER_STATISTICS.BUYER_NO;
									row2.CATEGORY = BUYER_STATISTICS.CATEGORY;
									row2.STITSTOCKED_ITEMS = BUYER_STATISTICS.STITSTOCKED_ITEMS;
									row2.SPMDSE_ITEMS = BUYER_STATISTICS.SPMDSE_ITEMS;
									row2.VENDOR_COUNT = BUYER_STATISTICS.VENDOR_COUNT;
									row2.INVENTORY_VALUE = BUYER_STATISTICS.INVENTORY_VALUE;
									row2.DAYS_SALES_OUTSTANDING = BUYER_STATISTICS.DAYS_SALES_OUTSTANDING;
									row2.DAILY_SALES = BUYER_STATISTICS.DAILY_SALES;
									row2.MERCHANDISING_PIECES_ORDERED = BUYER_STATISTICS.MERCHANDISING_PIECES_ORDERED;
									row2.MERCHANDISING_PIECES_SHIPPED = BUYER_STATISTICS.MERCHANDISING_PIECES_SHIPPED;
									row2.MERCHANDISING_PIECES_SUBBED = BUYER_STATISTICS.MERCHANDISING_PIECES_SUBBED;
									row2.MERCHANDISING_DOLLARS_ORDERED = BUYER_STATISTICS.MERCHANDISING_DOLLARS_ORDERED;
									row2.MERCHANDISING_DOLLARS_SHIPPED = BUYER_STATISTICS.MERCHANDISING_DOLLARS_SHIPPED;
									row2.MERCHANDISING_DOLLARS_SUBBED = BUYER_STATISTICS.MERCHANDISING_DOLLARS_SUBBED;
									row2.MERCHANDISING_CASES_SERVICE_LEVEL = BUYER_STATISTICS.MERCHANDISING_CASES_SERVICE_LEVEL;
									row2.MERCHANDISING_CASES_FILL_RATE = BUYER_STATISTICS.MERCHANDISING_CASES_FILL_RATE;
									row2.MERCHANDISING_DOLLARS_SERVICE_LEVEL = BUYER_STATISTICS.MERCHANDISING_DOLLARS_SERVICE_LEVEL;
									row2.MERCHANDISING_DOLLARS_FILL_RATE = BUYER_STATISTICS.MERCHANDISING_DOLLARS_FILL_RATE;
									row2.SYGMA_PO = BUYER_STATISTICS.SYGMA_PO;
									row2.SYGMA_PO_LINES = BUYER_STATISTICS.SYGMA_PO_LINES;
									row2.SYGMA_PO_LINES_CHANGED_UP = BUYER_STATISTICS.SYGMA_PO_LINES_CHANGED_UP;
									row2.SYGMA_PO_LINES_CHANGED_DOWN = BUYER_STATISTICS.SYGMA_PO_LINES_CHANGED_DOWN;
									row2.SYGMA_PO_LINES_FORCED = BUYER_STATISTICS.SYGMA_PO_LINES_FORCED;
									row2.SYGMA_PO_LINES_DELETED = BUYER_STATISTICS.SYGMA_PO_LINES_DELETED;
									row2.SYGMA_PO_LINES_FINAL = BUYER_STATISTICS.SYGMA_PO_LINES_FINAL;
									row2.SYGMA_PO_CASES = BUYER_STATISTICS.SYGMA_PO_CASES;
									row2.SYGMA_PO_CASES_CHANGED_UP = BUYER_STATISTICS.SYGMA_PO_CASES_CHANGED_UP;
									row2.SYGMA_PO_CASES_CHANGED_DOWN = BUYER_STATISTICS.SYGMA_PO_CASES_CHANGED_DOWN;
									row2.SYGMA_PO_CASES_FORCED = BUYER_STATISTICS.SYGMA_PO_CASES_FORCED;
									row2.SYGMA_PO_CASES_DELETED = BUYER_STATISTICS.SYGMA_PO_CASES_DELETED;
									row2.SYGMA_PO_CASES_FINAL = BUYER_STATISTICS.SYGMA_PO_CASES_FINAL;
									row2.SYGMA_PO_RECEIVED = BUYER_STATISTICS.SYGMA_PO_RECEIVED;
									row2.FORCED_PO = BUYER_STATISTICS.FORCED_PO;
									row2.FORCED_PO_LINES = BUYER_STATISTICS.FORCED_PO_LINES;
									row2.FORCED_PO_CASES = BUYER_STATISTICS.FORCED_PO_CASES;
									row2.SYGMA_PO_UNCHANGED = BUYER_STATISTICS.SYGMA_PO_UNCHANGED;
									row2.SYGMA_PO_LINES_UNCHANGED = BUYER_STATISTICS.SYGMA_PO_LINES_UNCHANGED;
									row2.SYGMA_PO_CASES_UNCHANGED = BUYER_STATISTICS.SYGMA_PO_CASES_UNCHANGED;
									row2.FORECAST_ITEMS = BUYER_STATISTICS.FORECAST_ITEMS;
									row2.FORECAST_LINES_CHANGED_UP = BUYER_STATISTICS.FORECAST_LINES_CHANGED_UP;
									row2.FORECAST_LINES_CHANGED_DOWN = BUYER_STATISTICS.FORECAST_LINES_CHANGED_DOWN;
									row2.FORECAST_CASES_CHANGED_UP = BUYER_STATISTICS.FORECAST_CASES_CHANGED_UP;
									row2.FORECAST_CASES_CHANGED_DOWN = BUYER_STATISTICS.FORECAST_CASES_CHANGED_DOWN;
									row2.RECEIVED_PO = BUYER_STATISTICS.RECEIVED_PO;
									row2.RECEIVED_LINES = BUYER_STATISTICS.RECEIVED_LINES;
									row2.MERCHANDISE_PROFORMA_RECEIVED = BUYER_STATISTICS.MERCHANDISE_PROFORMA_RECEIVED;
									row2.MERCHANDISE_PROFORMA_LINES_RECEIVED = BUYER_STATISTICS.MERCHANDISE_PROFORMA_LINES_RECEIVED;
									row2.FREIGHT_PROFORMA_RECEIVED = BUYER_STATISTICS.FREIGHT_PROFORMA_RECEIVED;
									row2.FREIGHT_PROFORMA_LINES_RECEIVED = BUYER_STATISTICS.FREIGHT_PROFORMA_LINES_RECEIVED;
									row2.SYGMA_PO_RERECOMMEND_TO_MIN_PO = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_PO;
									row2.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_LINES;
									row2.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_CASES;
									row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO;
									row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
									row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
									row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO;
									row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES;
									row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES;
									row2.FORCED_RERECOMMEND_TO_MIN_PO = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_PO;
									row2.FORCED_RERECOMMEND_TO_MIN_LINES = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_LINES;
									row2.FORCED_RERECOMMEND_TO_MIN_CASES = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_CASES;
									row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO;
									row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
									row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
									row2.FORCED_RERECOMMEND_WITH_KEEP_PO = BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_PO;
									row2.FORCED_RERECOMMEND_WITH_KEEP_LINES = BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_LINES;
									row2.FORCED_RERECOMMEND_WITH_KEEP_CASES = BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_CASES;
									row2.CREATED_TIMESTAMP = BUYER_STATISTICS.CREATED_TIMESTAMP;
									row2.CREATED_USER_ID = BUYER_STATISTICS.CREATED_USER_ID;
									row2.CREATED_PROGRAM_ID = BUYER_STATISTICS.CREATED_PROGRAM_ID;
									row2.UPDATED_TIMESTAMP = BUYER_STATISTICS.UPDATED_TIMESTAMP;
									row2.UPDATED_USER_ID = BUYER_STATISTICS.UPDATED_USER_ID;
									row2.UPDATED_PROGRAM_ID = BUYER_STATISTICS.UPDATED_PROGRAM_ID;
									row2.IS_DELETED = BUYER_STATISTICS.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row2.errorCode = ((java.sql.SQLException) e).getSQLState();
									row2.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							} else {
								if (BUYER_STATISTICS.SITE_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(1, BUYER_STATISTICS.SITE_ID);
								}

								if (BUYER_STATISTICS.PROCESSING_DATE != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(2,
											new java.sql.Timestamp(BUYER_STATISTICS.PROCESSING_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
								}

								if (BUYER_STATISTICS.BUYER_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(3, BUYER_STATISTICS.BUYER_NO);
								}

								if (BUYER_STATISTICS.CATEGORY == null) {
									pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(4, BUYER_STATISTICS.CATEGORY);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(5, BUYER_STATISTICS.STITSTOCKED_ITEMS);

								pstmtInsert_tDBOutput_1.setBigDecimal(6, BUYER_STATISTICS.SPMDSE_ITEMS);

								pstmtInsert_tDBOutput_1.setBigDecimal(7, BUYER_STATISTICS.VENDOR_COUNT);

								pstmtInsert_tDBOutput_1.setBigDecimal(8, BUYER_STATISTICS.INVENTORY_VALUE);

								pstmtInsert_tDBOutput_1.setBigDecimal(9, BUYER_STATISTICS.DAYS_SALES_OUTSTANDING);

								pstmtInsert_tDBOutput_1.setBigDecimal(10, BUYER_STATISTICS.DAILY_SALES);

								pstmtInsert_tDBOutput_1.setBigDecimal(11,
										BUYER_STATISTICS.MERCHANDISING_PIECES_ORDERED);

								pstmtInsert_tDBOutput_1.setBigDecimal(12,
										BUYER_STATISTICS.MERCHANDISING_PIECES_SHIPPED);

								pstmtInsert_tDBOutput_1.setBigDecimal(13, BUYER_STATISTICS.MERCHANDISING_PIECES_SUBBED);

								pstmtInsert_tDBOutput_1.setBigDecimal(14,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_ORDERED);

								pstmtInsert_tDBOutput_1.setBigDecimal(15,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_SHIPPED);

								pstmtInsert_tDBOutput_1.setBigDecimal(16,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_SUBBED);

								pstmtInsert_tDBOutput_1.setBigDecimal(17,
										BUYER_STATISTICS.MERCHANDISING_CASES_SERVICE_LEVEL);

								pstmtInsert_tDBOutput_1.setBigDecimal(18,
										BUYER_STATISTICS.MERCHANDISING_CASES_FILL_RATE);

								pstmtInsert_tDBOutput_1.setBigDecimal(19,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_SERVICE_LEVEL);

								pstmtInsert_tDBOutput_1.setBigDecimal(20,
										BUYER_STATISTICS.MERCHANDISING_DOLLARS_FILL_RATE);

								pstmtInsert_tDBOutput_1.setBigDecimal(21, BUYER_STATISTICS.SYGMA_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(22, BUYER_STATISTICS.SYGMA_PO_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(23, BUYER_STATISTICS.SYGMA_PO_LINES_CHANGED_UP);

								pstmtInsert_tDBOutput_1.setBigDecimal(24, BUYER_STATISTICS.SYGMA_PO_LINES_CHANGED_DOWN);

								pstmtInsert_tDBOutput_1.setBigDecimal(25, BUYER_STATISTICS.SYGMA_PO_LINES_FORCED);

								pstmtInsert_tDBOutput_1.setBigDecimal(26, BUYER_STATISTICS.SYGMA_PO_LINES_DELETED);

								pstmtInsert_tDBOutput_1.setBigDecimal(27, BUYER_STATISTICS.SYGMA_PO_LINES_FINAL);

								pstmtInsert_tDBOutput_1.setBigDecimal(28, BUYER_STATISTICS.SYGMA_PO_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(29, BUYER_STATISTICS.SYGMA_PO_CASES_CHANGED_UP);

								pstmtInsert_tDBOutput_1.setBigDecimal(30, BUYER_STATISTICS.SYGMA_PO_CASES_CHANGED_DOWN);

								pstmtInsert_tDBOutput_1.setBigDecimal(31, BUYER_STATISTICS.SYGMA_PO_CASES_FORCED);

								pstmtInsert_tDBOutput_1.setBigDecimal(32, BUYER_STATISTICS.SYGMA_PO_CASES_DELETED);

								pstmtInsert_tDBOutput_1.setBigDecimal(33, BUYER_STATISTICS.SYGMA_PO_CASES_FINAL);

								pstmtInsert_tDBOutput_1.setBigDecimal(34, BUYER_STATISTICS.SYGMA_PO_RECEIVED);

								pstmtInsert_tDBOutput_1.setBigDecimal(35, BUYER_STATISTICS.FORCED_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(36, BUYER_STATISTICS.FORCED_PO_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(37, BUYER_STATISTICS.FORCED_PO_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(38, BUYER_STATISTICS.SYGMA_PO_UNCHANGED);

								pstmtInsert_tDBOutput_1.setBigDecimal(39, BUYER_STATISTICS.SYGMA_PO_LINES_UNCHANGED);

								pstmtInsert_tDBOutput_1.setBigDecimal(40, BUYER_STATISTICS.SYGMA_PO_CASES_UNCHANGED);

								pstmtInsert_tDBOutput_1.setBigDecimal(41, BUYER_STATISTICS.FORECAST_ITEMS);

								pstmtInsert_tDBOutput_1.setBigDecimal(42, BUYER_STATISTICS.FORECAST_LINES_CHANGED_UP);

								pstmtInsert_tDBOutput_1.setBigDecimal(43, BUYER_STATISTICS.FORECAST_LINES_CHANGED_DOWN);

								pstmtInsert_tDBOutput_1.setBigDecimal(44, BUYER_STATISTICS.FORECAST_CASES_CHANGED_UP);

								pstmtInsert_tDBOutput_1.setBigDecimal(45, BUYER_STATISTICS.FORECAST_CASES_CHANGED_DOWN);

								pstmtInsert_tDBOutput_1.setBigDecimal(46, BUYER_STATISTICS.RECEIVED_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(47, BUYER_STATISTICS.RECEIVED_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(48,
										BUYER_STATISTICS.MERCHANDISE_PROFORMA_RECEIVED);

								pstmtInsert_tDBOutput_1.setBigDecimal(49,
										BUYER_STATISTICS.MERCHANDISE_PROFORMA_LINES_RECEIVED);

								pstmtInsert_tDBOutput_1.setBigDecimal(50, BUYER_STATISTICS.FREIGHT_PROFORMA_RECEIVED);

								pstmtInsert_tDBOutput_1.setBigDecimal(51,
										BUYER_STATISTICS.FREIGHT_PROFORMA_LINES_RECEIVED);

								pstmtInsert_tDBOutput_1.setBigDecimal(52,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(53,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(54,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(55,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(56,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(57,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(58,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(59,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(60,
										BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(61,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(62,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(63,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(64,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(65,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(66,
										BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(67,
										BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_PO);

								pstmtInsert_tDBOutput_1.setBigDecimal(68,
										BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(69,
										BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_CASES);

								if (BUYER_STATISTICS.CREATED_TIMESTAMP != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(70,
											new java.sql.Timestamp(BUYER_STATISTICS.CREATED_TIMESTAMP.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(70, java.sql.Types.TIMESTAMP);
								}

								if (BUYER_STATISTICS.CREATED_USER_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(71, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(71, BUYER_STATISTICS.CREATED_USER_ID);
								}

								if (BUYER_STATISTICS.CREATED_PROGRAM_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(72, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(72, BUYER_STATISTICS.CREATED_PROGRAM_ID);
								}

								if (BUYER_STATISTICS.UPDATED_TIMESTAMP != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(73,
											new java.sql.Timestamp(BUYER_STATISTICS.UPDATED_TIMESTAMP.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(73, java.sql.Types.TIMESTAMP);
								}

								if (BUYER_STATISTICS.UPDATED_USER_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(74, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(74, BUYER_STATISTICS.UPDATED_USER_ID);
								}

								if (BUYER_STATISTICS.UPDATED_PROGRAM_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(75, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(75, BUYER_STATISTICS.UPDATED_PROGRAM_ID);
								}

								if (BUYER_STATISTICS.IS_DELETED == null) {
									pstmtInsert_tDBOutput_1.setNull(76, java.sql.Types.BOOLEAN);
								} else {
									pstmtInsert_tDBOutput_1.setBoolean(76, BUYER_STATISTICS.IS_DELETED);
								}

								try {

									int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
									insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row2 = new row2Struct();
									row2.SITE_ID = BUYER_STATISTICS.SITE_ID;
									row2.PROCESSING_DATE = BUYER_STATISTICS.PROCESSING_DATE;
									row2.BUYER_NO = BUYER_STATISTICS.BUYER_NO;
									row2.CATEGORY = BUYER_STATISTICS.CATEGORY;
									row2.STITSTOCKED_ITEMS = BUYER_STATISTICS.STITSTOCKED_ITEMS;
									row2.SPMDSE_ITEMS = BUYER_STATISTICS.SPMDSE_ITEMS;
									row2.VENDOR_COUNT = BUYER_STATISTICS.VENDOR_COUNT;
									row2.INVENTORY_VALUE = BUYER_STATISTICS.INVENTORY_VALUE;
									row2.DAYS_SALES_OUTSTANDING = BUYER_STATISTICS.DAYS_SALES_OUTSTANDING;
									row2.DAILY_SALES = BUYER_STATISTICS.DAILY_SALES;
									row2.MERCHANDISING_PIECES_ORDERED = BUYER_STATISTICS.MERCHANDISING_PIECES_ORDERED;
									row2.MERCHANDISING_PIECES_SHIPPED = BUYER_STATISTICS.MERCHANDISING_PIECES_SHIPPED;
									row2.MERCHANDISING_PIECES_SUBBED = BUYER_STATISTICS.MERCHANDISING_PIECES_SUBBED;
									row2.MERCHANDISING_DOLLARS_ORDERED = BUYER_STATISTICS.MERCHANDISING_DOLLARS_ORDERED;
									row2.MERCHANDISING_DOLLARS_SHIPPED = BUYER_STATISTICS.MERCHANDISING_DOLLARS_SHIPPED;
									row2.MERCHANDISING_DOLLARS_SUBBED = BUYER_STATISTICS.MERCHANDISING_DOLLARS_SUBBED;
									row2.MERCHANDISING_CASES_SERVICE_LEVEL = BUYER_STATISTICS.MERCHANDISING_CASES_SERVICE_LEVEL;
									row2.MERCHANDISING_CASES_FILL_RATE = BUYER_STATISTICS.MERCHANDISING_CASES_FILL_RATE;
									row2.MERCHANDISING_DOLLARS_SERVICE_LEVEL = BUYER_STATISTICS.MERCHANDISING_DOLLARS_SERVICE_LEVEL;
									row2.MERCHANDISING_DOLLARS_FILL_RATE = BUYER_STATISTICS.MERCHANDISING_DOLLARS_FILL_RATE;
									row2.SYGMA_PO = BUYER_STATISTICS.SYGMA_PO;
									row2.SYGMA_PO_LINES = BUYER_STATISTICS.SYGMA_PO_LINES;
									row2.SYGMA_PO_LINES_CHANGED_UP = BUYER_STATISTICS.SYGMA_PO_LINES_CHANGED_UP;
									row2.SYGMA_PO_LINES_CHANGED_DOWN = BUYER_STATISTICS.SYGMA_PO_LINES_CHANGED_DOWN;
									row2.SYGMA_PO_LINES_FORCED = BUYER_STATISTICS.SYGMA_PO_LINES_FORCED;
									row2.SYGMA_PO_LINES_DELETED = BUYER_STATISTICS.SYGMA_PO_LINES_DELETED;
									row2.SYGMA_PO_LINES_FINAL = BUYER_STATISTICS.SYGMA_PO_LINES_FINAL;
									row2.SYGMA_PO_CASES = BUYER_STATISTICS.SYGMA_PO_CASES;
									row2.SYGMA_PO_CASES_CHANGED_UP = BUYER_STATISTICS.SYGMA_PO_CASES_CHANGED_UP;
									row2.SYGMA_PO_CASES_CHANGED_DOWN = BUYER_STATISTICS.SYGMA_PO_CASES_CHANGED_DOWN;
									row2.SYGMA_PO_CASES_FORCED = BUYER_STATISTICS.SYGMA_PO_CASES_FORCED;
									row2.SYGMA_PO_CASES_DELETED = BUYER_STATISTICS.SYGMA_PO_CASES_DELETED;
									row2.SYGMA_PO_CASES_FINAL = BUYER_STATISTICS.SYGMA_PO_CASES_FINAL;
									row2.SYGMA_PO_RECEIVED = BUYER_STATISTICS.SYGMA_PO_RECEIVED;
									row2.FORCED_PO = BUYER_STATISTICS.FORCED_PO;
									row2.FORCED_PO_LINES = BUYER_STATISTICS.FORCED_PO_LINES;
									row2.FORCED_PO_CASES = BUYER_STATISTICS.FORCED_PO_CASES;
									row2.SYGMA_PO_UNCHANGED = BUYER_STATISTICS.SYGMA_PO_UNCHANGED;
									row2.SYGMA_PO_LINES_UNCHANGED = BUYER_STATISTICS.SYGMA_PO_LINES_UNCHANGED;
									row2.SYGMA_PO_CASES_UNCHANGED = BUYER_STATISTICS.SYGMA_PO_CASES_UNCHANGED;
									row2.FORECAST_ITEMS = BUYER_STATISTICS.FORECAST_ITEMS;
									row2.FORECAST_LINES_CHANGED_UP = BUYER_STATISTICS.FORECAST_LINES_CHANGED_UP;
									row2.FORECAST_LINES_CHANGED_DOWN = BUYER_STATISTICS.FORECAST_LINES_CHANGED_DOWN;
									row2.FORECAST_CASES_CHANGED_UP = BUYER_STATISTICS.FORECAST_CASES_CHANGED_UP;
									row2.FORECAST_CASES_CHANGED_DOWN = BUYER_STATISTICS.FORECAST_CASES_CHANGED_DOWN;
									row2.RECEIVED_PO = BUYER_STATISTICS.RECEIVED_PO;
									row2.RECEIVED_LINES = BUYER_STATISTICS.RECEIVED_LINES;
									row2.MERCHANDISE_PROFORMA_RECEIVED = BUYER_STATISTICS.MERCHANDISE_PROFORMA_RECEIVED;
									row2.MERCHANDISE_PROFORMA_LINES_RECEIVED = BUYER_STATISTICS.MERCHANDISE_PROFORMA_LINES_RECEIVED;
									row2.FREIGHT_PROFORMA_RECEIVED = BUYER_STATISTICS.FREIGHT_PROFORMA_RECEIVED;
									row2.FREIGHT_PROFORMA_LINES_RECEIVED = BUYER_STATISTICS.FREIGHT_PROFORMA_LINES_RECEIVED;
									row2.SYGMA_PO_RERECOMMEND_TO_MIN_PO = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_PO;
									row2.SYGMA_PO_RERECOMMEND_TO_MIN_LINES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_LINES;
									row2.SYGMA_PO_RERECOMMEND_TO_MIN_CASES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_MIN_CASES;
									row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO;
									row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
									row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
									row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO;
									row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES;
									row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES = BUYER_STATISTICS.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES;
									row2.FORCED_RERECOMMEND_TO_MIN_PO = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_PO;
									row2.FORCED_RERECOMMEND_TO_MIN_LINES = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_LINES;
									row2.FORCED_RERECOMMEND_TO_MIN_CASES = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_MIN_CASES;
									row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO;
									row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES;
									row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES = BUYER_STATISTICS.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES;
									row2.FORCED_RERECOMMEND_WITH_KEEP_PO = BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_PO;
									row2.FORCED_RERECOMMEND_WITH_KEEP_LINES = BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_LINES;
									row2.FORCED_RERECOMMEND_WITH_KEEP_CASES = BUYER_STATISTICS.FORCED_RERECOMMEND_WITH_KEEP_CASES;
									row2.CREATED_TIMESTAMP = BUYER_STATISTICS.CREATED_TIMESTAMP;
									row2.CREATED_USER_ID = BUYER_STATISTICS.CREATED_USER_ID;
									row2.CREATED_PROGRAM_ID = BUYER_STATISTICS.CREATED_PROGRAM_ID;
									row2.UPDATED_TIMESTAMP = BUYER_STATISTICS.UPDATED_TIMESTAMP;
									row2.UPDATED_USER_ID = BUYER_STATISTICS.UPDATED_USER_ID;
									row2.UPDATED_PROGRAM_ID = BUYER_STATISTICS.UPDATED_PROGRAM_ID;
									row2.IS_DELETED = BUYER_STATISTICS.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row2.errorCode = ((java.sql.SQLException) e).getSQLState();
									row2.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							}
							if (!whetherReject_tDBOutput_1) {
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if (rowsToCommitCount_tDBOutput_1 != 0) {

								}
								conn_tDBOutput_1.commit();
								if (rowsToCommitCount_tDBOutput_1 != 0) {

									rowsToCommitCount_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row2"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[78];

								if (row2.SITE_ID != null) { //
									row_tLogRow_1[0] = String.valueOf(row2.SITE_ID);

								} //

								if (row2.PROCESSING_DATE != null) { //
									row_tLogRow_1[1] = FormatterUtils.format_Date(row2.PROCESSING_DATE, "dd-MM-yyyy");

								} //

								if (row2.BUYER_NO != null) { //
									row_tLogRow_1[2] = String.valueOf(row2.BUYER_NO);

								} //

								if (row2.CATEGORY != null) { //
									row_tLogRow_1[3] = String.valueOf(row2.CATEGORY);

								} //

								if (row2.STITSTOCKED_ITEMS != null) { //
									row_tLogRow_1[4] = row2.STITSTOCKED_ITEMS
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SPMDSE_ITEMS != null) { //
									row_tLogRow_1[5] = row2.SPMDSE_ITEMS.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.VENDOR_COUNT != null) { //
									row_tLogRow_1[6] = row2.VENDOR_COUNT.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.INVENTORY_VALUE != null) { //
									row_tLogRow_1[7] = row2.INVENTORY_VALUE.setScale(2, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.DAYS_SALES_OUTSTANDING != null) { //
									row_tLogRow_1[8] = row2.DAYS_SALES_OUTSTANDING
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.DAILY_SALES != null) { //
									row_tLogRow_1[9] = row2.DAILY_SALES.setScale(2, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.MERCHANDISING_PIECES_ORDERED != null) { //
									row_tLogRow_1[10] = row2.MERCHANDISING_PIECES_ORDERED
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_PIECES_SHIPPED != null) { //
									row_tLogRow_1[11] = row2.MERCHANDISING_PIECES_SHIPPED
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_PIECES_SUBBED != null) { //
									row_tLogRow_1[12] = row2.MERCHANDISING_PIECES_SUBBED
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_DOLLARS_ORDERED != null) { //
									row_tLogRow_1[13] = row2.MERCHANDISING_DOLLARS_ORDERED
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_DOLLARS_SHIPPED != null) { //
									row_tLogRow_1[14] = row2.MERCHANDISING_DOLLARS_SHIPPED
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_DOLLARS_SUBBED != null) { //
									row_tLogRow_1[15] = row2.MERCHANDISING_DOLLARS_SUBBED
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_CASES_SERVICE_LEVEL != null) { //
									row_tLogRow_1[16] = row2.MERCHANDISING_CASES_SERVICE_LEVEL
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_CASES_FILL_RATE != null) { //
									row_tLogRow_1[17] = row2.MERCHANDISING_CASES_FILL_RATE
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_DOLLARS_SERVICE_LEVEL != null) { //
									row_tLogRow_1[18] = row2.MERCHANDISING_DOLLARS_SERVICE_LEVEL
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISING_DOLLARS_FILL_RATE != null) { //
									row_tLogRow_1[19] = row2.MERCHANDISING_DOLLARS_FILL_RATE
											.setScale(4, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO != null) { //
									row_tLogRow_1[20] = row2.SYGMA_PO.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.SYGMA_PO_LINES != null) { //
									row_tLogRow_1[21] = row2.SYGMA_PO_LINES.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.SYGMA_PO_LINES_CHANGED_UP != null) { //
									row_tLogRow_1[22] = row2.SYGMA_PO_LINES_CHANGED_UP
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_LINES_CHANGED_DOWN != null) { //
									row_tLogRow_1[23] = row2.SYGMA_PO_LINES_CHANGED_DOWN
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_LINES_FORCED != null) { //
									row_tLogRow_1[24] = row2.SYGMA_PO_LINES_FORCED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_LINES_DELETED != null) { //
									row_tLogRow_1[25] = row2.SYGMA_PO_LINES_DELETED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_LINES_FINAL != null) { //
									row_tLogRow_1[26] = row2.SYGMA_PO_LINES_FINAL
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_CASES != null) { //
									row_tLogRow_1[27] = row2.SYGMA_PO_CASES.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.SYGMA_PO_CASES_CHANGED_UP != null) { //
									row_tLogRow_1[28] = row2.SYGMA_PO_CASES_CHANGED_UP
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_CASES_CHANGED_DOWN != null) { //
									row_tLogRow_1[29] = row2.SYGMA_PO_CASES_CHANGED_DOWN
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_CASES_FORCED != null) { //
									row_tLogRow_1[30] = row2.SYGMA_PO_CASES_FORCED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_CASES_DELETED != null) { //
									row_tLogRow_1[31] = row2.SYGMA_PO_CASES_DELETED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_CASES_FINAL != null) { //
									row_tLogRow_1[32] = row2.SYGMA_PO_CASES_FINAL
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RECEIVED != null) { //
									row_tLogRow_1[33] = row2.SYGMA_PO_RECEIVED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_PO != null) { //
									row_tLogRow_1[34] = row2.FORCED_PO.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.FORCED_PO_LINES != null) { //
									row_tLogRow_1[35] = row2.FORCED_PO_LINES.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.FORCED_PO_CASES != null) { //
									row_tLogRow_1[36] = row2.FORCED_PO_CASES.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.SYGMA_PO_UNCHANGED != null) { //
									row_tLogRow_1[37] = row2.SYGMA_PO_UNCHANGED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_LINES_UNCHANGED != null) { //
									row_tLogRow_1[38] = row2.SYGMA_PO_LINES_UNCHANGED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_CASES_UNCHANGED != null) { //
									row_tLogRow_1[39] = row2.SYGMA_PO_CASES_UNCHANGED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORECAST_ITEMS != null) { //
									row_tLogRow_1[40] = row2.FORECAST_ITEMS.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.FORECAST_LINES_CHANGED_UP != null) { //
									row_tLogRow_1[41] = row2.FORECAST_LINES_CHANGED_UP
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORECAST_LINES_CHANGED_DOWN != null) { //
									row_tLogRow_1[42] = row2.FORECAST_LINES_CHANGED_DOWN
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORECAST_CASES_CHANGED_UP != null) { //
									row_tLogRow_1[43] = row2.FORECAST_CASES_CHANGED_UP
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORECAST_CASES_CHANGED_DOWN != null) { //
									row_tLogRow_1[44] = row2.FORECAST_CASES_CHANGED_DOWN
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.RECEIVED_PO != null) { //
									row_tLogRow_1[45] = row2.RECEIVED_PO.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.RECEIVED_LINES != null) { //
									row_tLogRow_1[46] = row2.RECEIVED_LINES.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row2.MERCHANDISE_PROFORMA_RECEIVED != null) { //
									row_tLogRow_1[47] = row2.MERCHANDISE_PROFORMA_RECEIVED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.MERCHANDISE_PROFORMA_LINES_RECEIVED != null) { //
									row_tLogRow_1[48] = row2.MERCHANDISE_PROFORMA_LINES_RECEIVED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FREIGHT_PROFORMA_RECEIVED != null) { //
									row_tLogRow_1[49] = row2.FREIGHT_PROFORMA_RECEIVED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FREIGHT_PROFORMA_LINES_RECEIVED != null) { //
									row_tLogRow_1[50] = row2.FREIGHT_PROFORMA_LINES_RECEIVED
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_TO_MIN_PO != null) { //
									row_tLogRow_1[51] = row2.SYGMA_PO_RERECOMMEND_TO_MIN_PO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_TO_MIN_LINES != null) { //
									row_tLogRow_1[52] = row2.SYGMA_PO_RERECOMMEND_TO_MIN_LINES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_TO_MIN_CASES != null) { //
									row_tLogRow_1[53] = row2.SYGMA_PO_RERECOMMEND_TO_MIN_CASES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO != null) { //
									row_tLogRow_1[54] = row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_PO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES != null) { //
									row_tLogRow_1[55] = row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_LINES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES != null) { //
									row_tLogRow_1[56] = row2.SYGMA_PO_RERECOMMEND_TO_DAYS_SUPPLY_CASES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO != null) { //
									row_tLogRow_1[57] = row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_PO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES != null) { //
									row_tLogRow_1[58] = row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_LINES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES != null) { //
									row_tLogRow_1[59] = row2.SYGMA_PO_RERECOMMEND_WITH_KEEP_CASES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_TO_MIN_PO != null) { //
									row_tLogRow_1[60] = row2.FORCED_RERECOMMEND_TO_MIN_PO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_TO_MIN_LINES != null) { //
									row_tLogRow_1[61] = row2.FORCED_RERECOMMEND_TO_MIN_LINES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_TO_MIN_CASES != null) { //
									row_tLogRow_1[62] = row2.FORCED_RERECOMMEND_TO_MIN_CASES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO != null) { //
									row_tLogRow_1[63] = row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_PO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES != null) { //
									row_tLogRow_1[64] = row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_LINES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES != null) { //
									row_tLogRow_1[65] = row2.FORCED_RERECOMMEND_TO_DAYS_SUPPLY_CASES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_WITH_KEEP_PO != null) { //
									row_tLogRow_1[66] = row2.FORCED_RERECOMMEND_WITH_KEEP_PO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_WITH_KEEP_LINES != null) { //
									row_tLogRow_1[67] = row2.FORCED_RERECOMMEND_WITH_KEEP_LINES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.FORCED_RERECOMMEND_WITH_KEEP_CASES != null) { //
									row_tLogRow_1[68] = row2.FORCED_RERECOMMEND_WITH_KEEP_CASES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row2.CREATED_TIMESTAMP != null) { //
									row_tLogRow_1[69] = FormatterUtils.format_Date(row2.CREATED_TIMESTAMP,
											"dd-MM-yyyy");

								} //

								if (row2.CREATED_USER_ID != null) { //
									row_tLogRow_1[70] = String.valueOf(row2.CREATED_USER_ID);

								} //

								if (row2.CREATED_PROGRAM_ID != null) { //
									row_tLogRow_1[71] = String.valueOf(row2.CREATED_PROGRAM_ID);

								} //

								if (row2.UPDATED_TIMESTAMP != null) { //
									row_tLogRow_1[72] = FormatterUtils.format_Date(row2.UPDATED_TIMESTAMP,
											"dd-MM-yyyy");

								} //

								if (row2.UPDATED_USER_ID != null) { //
									row_tLogRow_1[73] = String.valueOf(row2.UPDATED_USER_ID);

								} //

								if (row2.UPDATED_PROGRAM_ID != null) { //
									row_tLogRow_1[74] = String.valueOf(row2.UPDATED_PROGRAM_ID);

								} //

								if (row2.IS_DELETED != null) { //
									row_tLogRow_1[75] = String.valueOf(row2.IS_DELETED);

								} //

								if (row2.errorCode != null) { //
									row_tLogRow_1[76] = String.valueOf(row2.errorCode);

								} //

								if (row2.errorMessage != null) { //
									row_tLogRow_1[77] = String.valueOf(row2.errorMessage);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "BUYER_STATISTICS"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "BUYER_STATISTICS");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Buyer_Statistics_Inbound Buyer_Statistics_InboundClass = new Buyer_Statistics_Inbound();

		int exitCode = Buyer_Statistics_InboundClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Buyer_Statistics_Inbound.class.getClassLoader().getResourceAsStream(
					"sus_sli_etl/buyer_statistics_inbound_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Buyer_Statistics_Inbound.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("SUS_Login", "id_String");
					if (context.getStringValue("SUS_Login") == null) {
						context.SUS_Login = null;
					} else {
						context.SUS_Login = (String) context.getProperty("SUS_Login");
					}
					context.setContextType("SUS_Password", "id_Password");
					if (context.getStringValue("SUS_Password") == null) {
						context.SUS_Password = null;
					} else {
						String pwd_SUS_Password_value = context.getProperty("SUS_Password");
						context.SUS_Password = null;
						if (pwd_SUS_Password_value != null) {
							if (context_param.containsKey("SUS_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.SUS_Password = pwd_SUS_Password_value;
							} else if (!pwd_SUS_Password_value.isEmpty()) {
								try {
									context.SUS_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_SUS_Password_value);
									context.put("SUS_Password", context.SUS_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("SUS_Database", "id_String");
					if (context.getStringValue("SUS_Database") == null) {
						context.SUS_Database = null;
					} else {
						context.SUS_Database = (String) context.getProperty("SUS_Database");
					}
					context.setContextType("SUS_Server", "id_String");
					if (context.getStringValue("SUS_Server") == null) {
						context.SUS_Server = null;
					} else {
						context.SUS_Server = (String) context.getProperty("SUS_Server");
					}
					context.setContextType("SUS_Additional_Params", "id_String");
					if (context.getStringValue("SUS_Additional_Params") == null) {
						context.SUS_Additional_Params = null;
					} else {
						context.SUS_Additional_Params = (String) context.getProperty("SUS_Additional_Params");
					}
					context.setContextType("GIM_Schema_Migrating_Test", "id_String");
					if (context.getStringValue("GIM_Schema_Migrating_Test") == null) {
						context.GIM_Schema_Migrating_Test = null;
					} else {
						context.GIM_Schema_Migrating_Test = (String) context.getProperty("GIM_Schema_Migrating_Test");
					}
					context.setContextType("GIM_AdditionalParams", "id_String");
					if (context.getStringValue("GIM_AdditionalParams") == null) {
						context.GIM_AdditionalParams = null;
					} else {
						context.GIM_AdditionalParams = (String) context.getProperty("GIM_AdditionalParams");
					}
					context.setContextType("GIM_Password", "id_Password");
					if (context.getStringValue("GIM_Password") == null) {
						context.GIM_Password = null;
					} else {
						String pwd_GIM_Password_value = context.getProperty("GIM_Password");
						context.GIM_Password = null;
						if (pwd_GIM_Password_value != null) {
							if (context_param.containsKey("GIM_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.GIM_Password = pwd_GIM_Password_value;
							} else if (!pwd_GIM_Password_value.isEmpty()) {
								try {
									context.GIM_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_GIM_Password_value);
									context.put("GIM_Password", context.GIM_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("GIM_Server", "id_String");
					if (context.getStringValue("GIM_Server") == null) {
						context.GIM_Server = null;
					} else {
						context.GIM_Server = (String) context.getProperty("GIM_Server");
					}
					context.setContextType("GIM_Database", "id_String");
					if (context.getStringValue("GIM_Database") == null) {
						context.GIM_Database = null;
					} else {
						context.GIM_Database = (String) context.getProperty("GIM_Database");
					}
					context.setContextType("GIM_Port", "id_String");
					if (context.getStringValue("GIM_Port") == null) {
						context.GIM_Port = null;
					} else {
						context.GIM_Port = (String) context.getProperty("GIM_Port");
					}
					context.setContextType("GIM_Login", "id_String");
					if (context.getStringValue("GIM_Login") == null) {
						context.GIM_Login = null;
					} else {
						context.GIM_Login = (String) context.getProperty("GIM_Login");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("SUS_Login")) {
				context.SUS_Login = (String) parentContextMap.get("SUS_Login");
			}
			if (parentContextMap.containsKey("SUS_Password")) {
				context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
			}
			if (parentContextMap.containsKey("SUS_Database")) {
				context.SUS_Database = (String) parentContextMap.get("SUS_Database");
			}
			if (parentContextMap.containsKey("SUS_Server")) {
				context.SUS_Server = (String) parentContextMap.get("SUS_Server");
			}
			if (parentContextMap.containsKey("SUS_Additional_Params")) {
				context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
			}
			if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
				context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
			}
			if (parentContextMap.containsKey("GIM_AdditionalParams")) {
				context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
			}
			if (parentContextMap.containsKey("GIM_Password")) {
				context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
			}
			if (parentContextMap.containsKey("GIM_Server")) {
				context.GIM_Server = (String) parentContextMap.get("GIM_Server");
			}
			if (parentContextMap.containsKey("GIM_Database")) {
				context.GIM_Database = (String) parentContextMap.get("GIM_Database");
			}
			if (parentContextMap.containsKey("GIM_Port")) {
				context.GIM_Port = (String) parentContextMap.get("GIM_Port");
			}
			if (parentContextMap.containsKey("GIM_Login")) {
				context.GIM_Login = (String) parentContextMap.get("GIM_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SUS_Password");
		parametersToEncrypt.add("GIM_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Buyer_Statistics_Inbound");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 346765 characters generated by Talend Open Studio for Data Integration on the
 * July 22, 2022 at 2:50:38 PM IST
 ************************************************************************************************/