// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sus_sli_etl.order_process_header_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.CharSetHandling;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Order_Process_Header_Inbound Purpose: Migrating Data from OPNJB6PF to Order Process Header<br>
 * Description: Migrating Data from OPNJB6PF to Order Process Header <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Order_Process_Header_Inbound implements TalendJob {
	static {System.setProperty("TalendJob.log", "Order_Process_Header_Inbound.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(Order_Process_Header_Inbound.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(opco != null){
				
					this.setProperty("opco", opco.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(sopco != null){
				
					this.setProperty("sopco", sopco.toString());
				
			}
			
			if(svop != null){
				
					this.setProperty("svop", svop.toString());
				
			}
			
			if(GIM_AdditionalParams != null){
				
					this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());
				
			}
			
			if(GIM_Database != null){
				
					this.setProperty("GIM_Database", GIM_Database.toString());
				
			}
			
			if(GIM_Login != null){
				
					this.setProperty("GIM_Login", GIM_Login.toString());
				
			}
			
			if(GIM_Password != null){
				
					this.setProperty("GIM_Password", GIM_Password.toString());
				
			}
			
			if(GIM_Port != null){
				
					this.setProperty("GIM_Port", GIM_Port.toString());
				
			}
			
			if(GIM_Schema_Demand != null){
				
					this.setProperty("GIM_Schema_Demand", GIM_Schema_Demand.toString());
				
			}
			
			if(GIM_Schema_Inventory != null){
				
					this.setProperty("GIM_Schema_Inventory", GIM_Schema_Inventory.toString());
				
			}
			
			if(GIM_Schema_Master != null){
				
					this.setProperty("GIM_Schema_Master", GIM_Schema_Master.toString());
				
			}
			
			if(GIM_Schema_Migrating_Test != null){
				
					this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());
				
			}
			
			if(GIM_Schema_Order_Processing != null){
				
					this.setProperty("GIM_Schema_Order_Processing", GIM_Schema_Order_Processing.toString());
				
			}
			
			if(GIM_Schema_PO != null){
				
					this.setProperty("GIM_Schema_PO", GIM_Schema_PO.toString());
				
			}
			
			if(GIM_Schema_System != null){
				
					this.setProperty("GIM_Schema_System", GIM_Schema_System.toString());
				
			}
			
			if(GIM_Server != null){
				
					this.setProperty("GIM_Server", GIM_Server.toString());
				
			}
			
			if(SUS_Additional_Params != null){
				
					this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());
				
			}
			
			if(SUS_Database != null){
				
					this.setProperty("SUS_Database", SUS_Database.toString());
				
			}
			
			if(SUS_Database_ARDBFA != null){
				
					this.setProperty("SUS_Database_ARDBFA", SUS_Database_ARDBFA.toString());
				
			}
			
			if(SUS_Login != null){
				
					this.setProperty("SUS_Login", SUS_Login.toString());
				
			}
			
			if(SUS_Password != null){
				
					this.setProperty("SUS_Password", SUS_Password.toString());
				
			}
			
			if(SUS_Port != null){
				
					this.setProperty("SUS_Port", SUS_Port.toString());
				
			}
			
			if(SUS_Schema != null){
				
					this.setProperty("SUS_Schema", SUS_Schema.toString());
				
			}
			
			if(SUS_Server != null){
				
					this.setProperty("SUS_Server", SUS_Server.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String opco;
public String getOpco(){
	return this.opco;
}
public String server;
public String getServer(){
	return this.server;
}
public String sopco;
public String getSopco(){
	return this.sopco;
}
public String svop;
public String getSvop(){
	return this.svop;
}
public String GIM_AdditionalParams;
public String getGIM_AdditionalParams(){
	return this.GIM_AdditionalParams;
}
public String GIM_Database;
public String getGIM_Database(){
	return this.GIM_Database;
}
public String GIM_Login;
public String getGIM_Login(){
	return this.GIM_Login;
}
public java.lang.String GIM_Password;
public java.lang.String getGIM_Password(){
	return this.GIM_Password;
}
public String GIM_Port;
public String getGIM_Port(){
	return this.GIM_Port;
}
public String GIM_Schema_Demand;
public String getGIM_Schema_Demand(){
	return this.GIM_Schema_Demand;
}
public String GIM_Schema_Inventory;
public String getGIM_Schema_Inventory(){
	return this.GIM_Schema_Inventory;
}
public String GIM_Schema_Master;
public String getGIM_Schema_Master(){
	return this.GIM_Schema_Master;
}
public String GIM_Schema_Migrating_Test;
public String getGIM_Schema_Migrating_Test(){
	return this.GIM_Schema_Migrating_Test;
}
public String GIM_Schema_Order_Processing;
public String getGIM_Schema_Order_Processing(){
	return this.GIM_Schema_Order_Processing;
}
public String GIM_Schema_PO;
public String getGIM_Schema_PO(){
	return this.GIM_Schema_PO;
}
public String GIM_Schema_System;
public String getGIM_Schema_System(){
	return this.GIM_Schema_System;
}
public String GIM_Server;
public String getGIM_Server(){
	return this.GIM_Server;
}
public String SUS_Additional_Params;
public String getSUS_Additional_Params(){
	return this.SUS_Additional_Params;
}
public String SUS_Database;
public String getSUS_Database(){
	return this.SUS_Database;
}
public String SUS_Database_ARDBFA;
public String getSUS_Database_ARDBFA(){
	return this.SUS_Database_ARDBFA;
}
public String SUS_Login;
public String getSUS_Login(){
	return this.SUS_Login;
}
public java.lang.String SUS_Password;
public java.lang.String getSUS_Password(){
	return this.SUS_Password;
}
public String SUS_Port;
public String getSUS_Port(){
	return this.SUS_Port;
}
public String SUS_Schema;
public String getSUS_Schema(){
	return this.SUS_Schema;
}
public String SUS_Server;
public String getSUS_Server(){
	return this.SUS_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Order_Process_Header_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_79Y9EAdLEe29ZIvfxZQumQ", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_79Y9EAdLEe29ZIvfxZQumQ", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Order_Process_Header_Inbound.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Order_Process_Header_Inbound.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class Main_StatStruct implements routines.system.IPersistableRow<Main_StatStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_StatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
Main_StatStruct Main_Stat = new Main_StatStruct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Stat");
					}
				
		int tos_count_tLogRow_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_2 = new StringBuilder();
                    log4jParamters_tLogRow_2.append("Parameters:");
                            log4jParamters_tLogRow_2.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + (log4jParamters_tLogRow_2) );
                    } 
                } 
            new BytesLimit65535_tLogRow_2().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[7];

        public void addRow(String[] row) {

            for (int i = 0; i < 7; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 6 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 6 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[6] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"moment","pid","job","origin","message_type","message","duration",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_2 = new StringBuilder();
                    log4jParamters_tMap_2.append("Parameters:");
                            log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + (log4jParamters_tMap_2) );
                    } 
                } 
            new BytesLimit65535_tMap_2().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row4_tMap_2 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Stat_tMap_2 = 0;
				
Main_StatStruct Main_Stat_tmp = new Main_StatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tStatCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tStatCatcher_1 = new StringBuilder();
                    log4jParamters_tStatCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + (log4jParamters_tStatCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tStatCatcher_1().limitLog4jByte();
            }

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row4.pid = pid;
		row4.root_pid = rootPid;
		row4.father_pid = fatherPid;	
    	row4.project = projectName;
    	row4.job = jobName;
    	row4.context = contextStr;
		row4.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row4.message = scm.getMessage();
		row4.duration = scm.getDuration();
		row4.moment = scm.getMoment();
		row4.message_type = scm.getMessageType();
		row4.job_version = scm.getJobVersion();
		row4.job_repository_id = scm.getJobId();
		row4.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row4 - " + (row4==null? "": row4.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Main_Stat = null;


// # Output table : 'Main_Stat'
count_Main_Stat_tMap_2++;

Main_Stat_tmp.moment = row4.moment;
Main_Stat_tmp.pid = row4.pid;
Main_Stat_tmp.job = row4.job;
Main_Stat_tmp.origin = row4.origin;
Main_Stat_tmp.message_type = row4.message_type;
Main_Stat_tmp.message = row4.message;
Main_Stat_tmp.duration = row4.duration ;
Main_Stat = Main_Stat_tmp;
log.debug("tMap_2 - Outputting the record " + count_Main_Stat_tMap_2 + " of the output table 'Main_Stat'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Main_Stat"
if(Main_Stat != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Stat"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Stat - " + (Main_Stat==null? "": Main_Stat.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[7];
   				
	    		if(Main_Stat.moment != null) { //              
                 row_tLogRow_2[0]=    						
								FormatterUtils.format_Date(Main_Stat.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.pid != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(Main_Stat.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.job != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(Main_Stat.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.origin != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(Main_Stat.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message_type != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(Main_Stat.message_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(Main_Stat.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.duration != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(Main_Stat.duration)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
                	log.info("tLogRow_2 - Content of row "+nb_line_tLogRow_2+": " + TalendString.unionString("|",row_tLogRow_2));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "Main_Stat"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Done.") );

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'Main_Stat': " + count_Main_Stat_tMap_2 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Done.") );

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);
                if(log.isInfoEnabled())
            log.info("tLogRow_2 - "  + ("Printed row count: ")  + (nb_line_tLogRow_2)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Stat");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Done.") );

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_LogStruct implements routines.system.IPersistableRow<Main_LogStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_LogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
Main_LogStruct Main_Log = new Main_LogStruct();





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Log");
					}
				
		int tos_count_tLogRow_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_3 = new StringBuilder();
                    log4jParamters_tLogRow_3.append("Parameters:");
                            log4jParamters_tLogRow_3.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + (log4jParamters_tLogRow_3) );
                    } 
                } 
            new BytesLimit65535_tLogRow_3().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_3 = new StringBuilder();
                    log4jParamters_tMap_3.append("Parameters:");
                            log4jParamters_tMap_3.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + (log4jParamters_tMap_3) );
                    } 
                } 
            new BytesLimit65535_tMap_3().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row5_tMap_3 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Log_tMap_3 = 0;
				
Main_LogStruct Main_Log_tmp = new Main_LogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogCatcher_1 = new StringBuilder();
                    log4jParamters_tLogCatcher_1.append("Parameters:");
                            log4jParamters_tLogCatcher_1.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + (log4jParamters_tLogCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tLogCatcher_1().limitLog4jByte();
            }

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row5.type = lcm.getType();
		row5.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row5.priority = lcm.getPriority();
		row5.message = lcm.getMessage();
		row5.code = lcm.getCode();
		
		row5.moment = java.util.Calendar.getInstance().getTime();
	
    	row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;
	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row5 - " + (row5==null? "": row5.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Main_Log = null;


// # Output table : 'Main_Log'
count_Main_Log_tMap_3++;

Main_Log_tmp.moment = row5.moment ;
Main_Log_tmp.pid = row5.pid ;
Main_Log_tmp.job = row5.job ;
Main_Log_tmp.type = row5.type ;
Main_Log_tmp.origin = row5.origin ;
Main_Log_tmp.message = row5.message ;
Main_Log = Main_Log_tmp;
log.debug("tMap_3 - Outputting the record " + count_Main_Log_tMap_3 + " of the output table 'Main_Log'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Main_Log"
if(Main_Log != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Log"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Log - " + (Main_Log==null? "": Main_Log.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(Main_Log.moment != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
								FormatterUtils.format_Date(Main_Log.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.job != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.type != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.origin != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.message != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    	log.info("tLogRow_3 - Content of row "+(nb_line_tLogRow_3+1)+": " + strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "Main_Log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Done.") );

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_3 - Written records count in the table 'Main_Log': " + count_Main_Log_tMap_3 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Done.") );

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);
                if(log.isInfoEnabled())
            log.info("tLogRow_3 - "  + ("Printed row count: ")  + (nb_line_tLogRow_3)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Log");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Done.") );

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_Flow_MeterStruct implements routines.system.IPersistableRow<Main_Flow_MeterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_Flow_MeterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();
Main_Flow_MeterStruct Main_Flow_Meter = new Main_Flow_MeterStruct();





	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Flow_Meter");
					}
				
		int tos_count_tLogRow_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_4 = new StringBuilder();
                    log4jParamters_tLogRow_4.append("Parameters:");
                            log4jParamters_tLogRow_4.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + (log4jParamters_tLogRow_4) );
                    } 
                } 
            new BytesLimit65535_tLogRow_4().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("tLogRow_4");
        util_tLogRow_4.addRow(new String[]{"moment","pid","job","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tMap_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_4 = new StringBuilder();
                    log4jParamters_tMap_4.append("Parameters:");
                            log4jParamters_tMap_4.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + (log4jParamters_tMap_4) );
                    } 
                } 
            new BytesLimit65535_tMap_4().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row3_0_tMap_4 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Flow_Meter_tMap_4 = 0;
				
Main_Flow_MeterStruct Main_Flow_Meter_tmp = new Main_Flow_MeterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowMeterCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowMeterCatcher_1 = new StringBuilder();
                    log4jParamters_tFlowMeterCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + (log4jParamters_tFlowMeterCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();
            }

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row3_0.pid = pid;
		row3_0.root_pid = rootPid;
		row3_0.father_pid = fatherPid;	
        row3_0.project = projectName;
        row3_0.job = jobName;
        row3_0.context = contextStr;
		row3_0.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row3_0.moment = mcm.getMoment();
		row3_0.job_version = mcm.getJobVersion();
		row3_0.job_repository_id = mcm.getJobId();
		row3_0.system_pid = mcm.getSystemPid();
		row3_0.label = mcm.getLabel();
		row3_0.count = mcm.getCount();
		row3_0.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row3_0.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3_0 - " + (row3_0==null? "": row3_0.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Main_Flow_Meter = null;


// # Output table : 'Main_Flow_Meter'
count_Main_Flow_Meter_tMap_4++;

Main_Flow_Meter_tmp.moment = row3_0.moment ;
Main_Flow_Meter_tmp.pid = row3_0.pid ;
Main_Flow_Meter_tmp.job = row3_0.job ;
Main_Flow_Meter_tmp.origin = row3_0.origin ;
Main_Flow_Meter_tmp.label = row3_0.label ;
Main_Flow_Meter_tmp.count = row3_0.count ;
Main_Flow_Meter_tmp.reference = row3_0.reference ;
Main_Flow_Meter_tmp.thresholds = row3_0.thresholds ;
Main_Flow_Meter = Main_Flow_Meter_tmp;
log.debug("tMap_4 - Outputting the record " + count_Main_Flow_Meter_tMap_4 + " of the output table 'Main_Flow_Meter'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Main_Flow_Meter"
if(Main_Flow_Meter != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Flow_Meter"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Flow_Meter - " + (Main_Flow_Meter==null? "": Main_Flow_Meter.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[8];
   				
	    		if(Main_Flow_Meter.moment != null) { //              
                 row_tLogRow_4[0]=    						
								FormatterUtils.format_Date(Main_Flow_Meter.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.pid != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(Main_Flow_Meter.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.job != null) { //              
                 row_tLogRow_4[2]=    						    
				                String.valueOf(Main_Flow_Meter.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.origin != null) { //              
                 row_tLogRow_4[3]=    						    
				                String.valueOf(Main_Flow_Meter.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.label != null) { //              
                 row_tLogRow_4[4]=    						    
				                String.valueOf(Main_Flow_Meter.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.count != null) { //              
                 row_tLogRow_4[5]=    						    
				                String.valueOf(Main_Flow_Meter.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.reference != null) { //              
                 row_tLogRow_4[6]=    						    
				                String.valueOf(Main_Flow_Meter.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.thresholds != null) { //              
                 row_tLogRow_4[7]=    						    
				                String.valueOf(Main_Flow_Meter.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
                	log.info("tLogRow_4 - Content of row "+nb_line_tLogRow_4+": " + TalendString.unionString("|",row_tLogRow_4));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "Main_Flow_Meter"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Done.") );

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_4 - Written records count in the table 'Main_Flow_Meter': " + count_Main_Flow_Meter_tMap_4 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Done.") );

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);
                if(log.isInfoEnabled())
            log.info("tLogRow_4 - "  + ("Printed row count: ")  + (nb_line_tLogRow_4)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Flow_Meter");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Done.") );

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Starting the Migrating Data from OPNJB6PF to ORDER_PROCESS_HEADER...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class ORDER_PROCESS_HEADERStruct implements routines.system.IPersistableRow<ORDER_PROCESS_HEADERStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public BigDecimal ORDER_NO;

				public BigDecimal getORDER_NO () {
					return this.ORDER_NO;
				}
				
			    public String ORDER_TYPE;

				public String getORDER_TYPE () {
					return this.ORDER_TYPE;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public String SHIPPING_ADDRESS_ID;

				public String getSHIPPING_ADDRESS_ID () {
					return this.SHIPPING_ADDRESS_ID;
				}
				
			    public String NATIONAL_ACCOUNT_NO;

				public String getNATIONAL_ACCOUNT_NO () {
					return this.NATIONAL_ACCOUNT_NO;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public String CUSTOMER_CATEGORY_CODE;

				public String getCUSTOMER_CATEGORY_CODE () {
					return this.CUSTOMER_CATEGORY_CODE;
				}
				
			    public BigDecimal ROUTING_GROUP_CODE;

				public BigDecimal getROUTING_GROUP_CODE () {
					return this.ROUTING_GROUP_CODE;
				}
				
			    public String ALLOCATION_TYPE;

				public String getALLOCATION_TYPE () {
					return this.ALLOCATION_TYPE;
				}
				
			    public String ROUTE_TO_NO;

				public String getROUTE_TO_NO () {
					return this.ROUTE_TO_NO;
				}
				
			    public String ROUTE_NO;

				public String getROUTE_NO () {
					return this.ROUTE_NO;
				}
				
			    public String WILL_CALL_NAME;

				public String getWILL_CALL_NAME () {
					return this.WILL_CALL_NAME;
				}
				
			    public BigDecimal WILL_CALL_START_TIME;

				public BigDecimal getWILL_CALL_START_TIME () {
					return this.WILL_CALL_START_TIME;
				}
				
			    public String SEPARATE_INVOICE;

				public String getSEPARATE_INVOICE () {
					return this.SEPARATE_INVOICE;
				}
				
			    public java.util.Date ORDER_DATE;

				public java.util.Date getORDER_DATE () {
					return this.ORDER_DATE;
				}
				
			    public java.util.Date SHIP_OR_PICKUP_DATE;

				public java.util.Date getSHIP_OR_PICKUP_DATE () {
					return this.SHIP_OR_PICKUP_DATE;
				}
				
			    public String NEXT_ORDER_INDICATOR;

				public String getNEXT_ORDER_INDICATOR () {
					return this.NEXT_ORDER_INDICATOR;
				}
				
			    public String CONFIRMATION_NO;

				public String getCONFIRMATION_NO () {
					return this.CONFIRMATION_NO;
				}
				
			    public String ORDER_CONFIRMATION_PRINTED_FLAG;

				public String getORDER_CONFIRMATION_PRINTED_FLAG () {
					return this.ORDER_CONFIRMATION_PRINTED_FLAG;
				}
				
			    public String ORDER_STATUS_CODE;

				public String getORDER_STATUS_CODE () {
					return this.ORDER_STATUS_CODE;
				}
				
			    public BigDecimal TOTAL_FREEZER_CASES;

				public BigDecimal getTOTAL_FREEZER_CASES () {
					return this.TOTAL_FREEZER_CASES;
				}
				
			    public BigDecimal TOTAL_FREEZER_SPLITS;

				public BigDecimal getTOTAL_FREEZER_SPLITS () {
					return this.TOTAL_FREEZER_SPLITS;
				}
				
			    public BigDecimal TOTAL_COOLER_CASES;

				public BigDecimal getTOTAL_COOLER_CASES () {
					return this.TOTAL_COOLER_CASES;
				}
				
			    public BigDecimal TOTAL_COOLER_SPLITS;

				public BigDecimal getTOTAL_COOLER_SPLITS () {
					return this.TOTAL_COOLER_SPLITS;
				}
				
			    public BigDecimal TOTAL_DRY_CASES;

				public BigDecimal getTOTAL_DRY_CASES () {
					return this.TOTAL_DRY_CASES;
				}
				
			    public BigDecimal TOTAL_DRY_SPLITS;

				public BigDecimal getTOTAL_DRY_SPLITS () {
					return this.TOTAL_DRY_SPLITS;
				}
				
			    public BigDecimal TOTAL_NO_CASES_ORDER;

				public BigDecimal getTOTAL_NO_CASES_ORDER () {
					return this.TOTAL_NO_CASES_ORDER;
				}
				
			    public BigDecimal TOTAL_NO_SPLITS_ORDER;

				public BigDecimal getTOTAL_NO_SPLITS_ORDER () {
					return this.TOTAL_NO_SPLITS_ORDER;
				}
				
			    public BigDecimal TOTAL_ORDER_WEIGHT;

				public BigDecimal getTOTAL_ORDER_WEIGHT () {
					return this.TOTAL_ORDER_WEIGHT;
				}
				
			    public BigDecimal TOTAL_CUBE;

				public BigDecimal getTOTAL_CUBE () {
					return this.TOTAL_CUBE;
				}
				
			    public BigDecimal TOTAL_LINES;

				public BigDecimal getTOTAL_LINES () {
					return this.TOTAL_LINES;
				}
				
			    public BigDecimal ORDER_TOTAL;

				public BigDecimal getORDER_TOTAL () {
					return this.ORDER_TOTAL;
				}
				
			    public BigDecimal ORDER_GRAND_TOTAL;

				public BigDecimal getORDER_GRAND_TOTAL () {
					return this.ORDER_GRAND_TOTAL;
				}
				
			    public BigDecimal ORDER_ENTRY_TIME;

				public BigDecimal getORDER_ENTRY_TIME () {
					return this.ORDER_ENTRY_TIME;
				}
				
			    public String RECORD_TYPE_INDICATOR;

				public String getRECORD_TYPE_INDICATOR () {
					return this.RECORD_TYPE_INDICATOR;
				}
				
			    public String DELIVERY_METHOD;

				public String getDELIVERY_METHOD () {
					return this.DELIVERY_METHOD;
				}
				
			    public BigDecimal MANIFEST_NO;

				public BigDecimal getMANIFEST_NO () {
					return this.MANIFEST_NO;
				}
				
			    public String IMMEDIATE_ORDER_FLAG;

				public String getIMMEDIATE_ORDER_FLAG () {
					return this.IMMEDIATE_ORDER_FLAG;
				}
				
			    public BigDecimal BOOKING_ID;

				public BigDecimal getBOOKING_ID () {
					return this.BOOKING_ID;
				}
				
			    public String INCOMPLETE_ORDER_FLAG;

				public String getINCOMPLETE_ORDER_FLAG () {
					return this.INCOMPLETE_ORDER_FLAG;
				}
				
			    public String FOODSHOW_PROMOTION_ID;

				public String getFOODSHOW_PROMOTION_ID () {
					return this.FOODSHOW_PROMOTION_ID;
				}
				
			    public java.util.Date LAPTOP_ORDER_DATE;

				public java.util.Date getLAPTOP_ORDER_DATE () {
					return this.LAPTOP_ORDER_DATE;
				}
				
			    public String ACCOUNT_NO;

				public String getACCOUNT_NO () {
					return this.ACCOUNT_NO;
				}
				
			    public String USER_FIELD_1;

				public String getUSER_FIELD_1 () {
					return this.USER_FIELD_1;
				}
				
			    public java.util.Date DELIVERY_DATE;

				public java.util.Date getDELIVERY_DATE () {
					return this.DELIVERY_DATE;
				}
				
			    public String EMPLOYEE_NO;

				public String getEMPLOYEE_NO () {
					return this.EMPLOYEE_NO;
				}
				
			    public String RESHIP_STATUS;

				public String getRESHIP_STATUS () {
					return this.RESHIP_STATUS;
				}
				
			    public String HOLD_ORDER_FLAG;

				public String getHOLD_ORDER_FLAG () {
					return this.HOLD_ORDER_FLAG;
				}
				
			    public String RELEASE_ORDER_FLAG;

				public String getRELEASE_ORDER_FLAG () {
					return this.RELEASE_ORDER_FLAG;
				}
				
			    public String HOLD_ORDER_REASON_CODE;

				public String getHOLD_ORDER_REASON_CODE () {
					return this.HOLD_ORDER_REASON_CODE;
				}
				
			    public String RELEASE_ORDER_REASON_CODE;

				public String getRELEASE_ORDER_REASON_CODE () {
					return this.RELEASE_ORDER_REASON_CODE;
				}
				
			    public BigDecimal TAX_AMOUNT;

				public BigDecimal getTAX_AMOUNT () {
					return this.TAX_AMOUNT;
				}
				
			    public String SEND_IMMEDIATE_ORDER_ROUTING;

				public String getSEND_IMMEDIATE_ORDER_ROUTING () {
					return this.SEND_IMMEDIATE_ORDER_ROUTING;
				}
				
			    public String REMOTE_ORDER_ENTRY_MODE;

				public String getREMOTE_ORDER_ENTRY_MODE () {
					return this.REMOTE_ORDER_ENTRY_MODE;
				}
				
			    public BigDecimal REMOTE_ORDER_CONFIRMATION_NO;

				public BigDecimal getREMOTE_ORDER_CONFIRMATION_NO () {
					return this.REMOTE_ORDER_CONFIRMATION_NO;
				}
				
			    public String FAX_NO;

				public String getFAX_NO () {
					return this.FAX_NO;
				}
				
			    public String PRIMARY_MA;

				public String getPRIMARY_MA () {
					return this.PRIMARY_MA;
				}
				
			    public BigDecimal GENERIC_LAST_USED_NO;

				public BigDecimal getGENERIC_LAST_USED_NO () {
					return this.GENERIC_LAST_USED_NO;
				}
				
			    public BigDecimal CALL_END_TIME;

				public BigDecimal getCALL_END_TIME () {
					return this.CALL_END_TIME;
				}
				
			    public String CALL_START_TIME_INDICATOR;

				public String getCALL_START_TIME_INDICATOR () {
					return this.CALL_START_TIME_INDICATOR;
				}
				
			    public String CALL_END_TIME_INDICATOR;

				public String getCALL_END_TIME_INDICATOR () {
					return this.CALL_END_TIME_INDICATOR;
				}
				
			    public String RECORD_LOGICALLY_LOCKED_FLAG;

				public String getRECORD_LOGICALLY_LOCKED_FLAG () {
					return this.RECORD_LOGICALLY_LOCKED_FLAG;
				}
				
			    public String ERROR_STATUS_FLAG;

				public String getERROR_STATUS_FLAG () {
					return this.ERROR_STATUS_FLAG;
				}
				
			    public String REQUEST_STATUS_FLAG;

				public String getREQUEST_STATUS_FLAG () {
					return this.REQUEST_STATUS_FLAG;
				}
				
			    public BigDecimal ORDER_DETAIL_LINE_NO;

				public BigDecimal getORDER_DETAIL_LINE_NO () {
					return this.ORDER_DETAIL_LINE_NO;
				}
				
			    public String ENTITY_ID;

				public String getENTITY_ID () {
					return this.ENTITY_ID;
				}
				
			    public String PARENT_ENTITY_1;

				public String getPARENT_ENTITY_1 () {
					return this.PARENT_ENTITY_1;
				}
				
			    public String PARENT_ENTITY_2;

				public String getPARENT_ENTITY_2 () {
					return this.PARENT_ENTITY_2;
				}
				
			    public String PARENT_ENTITY_3;

				public String getPARENT_ENTITY_3 () {
					return this.PARENT_ENTITY_3;
				}
				
			    public java.util.Date CANCEL_DATE;

				public java.util.Date getCANCEL_DATE () {
					return this.CANCEL_DATE;
				}
				
			    public BigDecimal SERVICE_ORDER_NO;

				public BigDecimal getSERVICE_ORDER_NO () {
					return this.SERVICE_ORDER_NO;
				}
				
			    public String CREATE_TARGET_INDICATOR;

				public String getCREATE_TARGET_INDICATOR () {
					return this.CREATE_TARGET_INDICATOR;
				}
				
			    public String VENDOR_APPROVAL_NO;

				public String getVENDOR_APPROVAL_NO () {
					return this.VENDOR_APPROVAL_NO;
				}
				
			    public String REQUESTED_BY;

				public String getREQUESTED_BY () {
					return this.REQUESTED_BY;
				}
				
			    public String TARGET_DESC;

				public String getTARGET_DESC () {
					return this.TARGET_DESC;
				}
				
			    public String BILL_BACK_VENDOR_FLAG;

				public String getBILL_BACK_VENDOR_FLAG () {
					return this.BILL_BACK_VENDOR_FLAG;
				}
				
			    public BigDecimal NO_OF_AP_ROLL_DAYS;

				public BigDecimal getNO_OF_AP_ROLL_DAYS () {
					return this.NO_OF_AP_ROLL_DAYS;
				}
				
			    public String RETURN_AUTH_NO;

				public String getRETURN_AUTH_NO () {
					return this.RETURN_AUTH_NO;
				}
				
			    public String DISPENSER_EQUIPMENT_ITEM;

				public String getDISPENSER_EQUIPMENT_ITEM () {
					return this.DISPENSER_EQUIPMENT_ITEM;
				}
				
			    public String LAPTOP_USER_FLAG;

				public String getLAPTOP_USER_FLAG () {
					return this.LAPTOP_USER_FLAG;
				}
				
			    public BigDecimal LAPTOP_ORDER_NO;

				public BigDecimal getLAPTOP_ORDER_NO () {
					return this.LAPTOP_ORDER_NO;
				}
				
			    public String LAPTOP_ZID_NO;

				public String getLAPTOP_ZID_NO () {
					return this.LAPTOP_ZID_NO;
				}
				
			    public BigDecimal STOP_NO;

				public BigDecimal getSTOP_NO () {
					return this.STOP_NO;
				}
				
			    public String ENTITY_UPDATED_FLAG;

				public String getENTITY_UPDATED_FLAG () {
					return this.ENTITY_UPDATED_FLAG;
				}
				
			    public String MAJOR_CLASS;

				public String getMAJOR_CLASS () {
					return this.MAJOR_CLASS;
				}
				
			    public String SWMS_RECOVERY_INVOICE_NO;

				public String getSWMS_RECOVERY_INVOICE_NO () {
					return this.SWMS_RECOVERY_INVOICE_NO;
				}
				
			    public String DEFAULT_ROUTE_NO;

				public String getDEFAULT_ROUTE_NO () {
					return this.DEFAULT_ROUTE_NO;
				}
				
			    public BigDecimal CONFIRM_NO;

				public BigDecimal getCONFIRM_NO () {
					return this.CONFIRM_NO;
				}
				
			    public String CONTAINER_GROUP_ID;

				public String getCONTAINER_GROUP_ID () {
					return this.CONTAINER_GROUP_ID;
				}
				
			    public String SEPARATE_CONTAINER_FLAG;

				public String getSEPARATE_CONTAINER_FLAG () {
					return this.SEPARATE_CONTAINER_FLAG;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public boolean IS_DELETED;

				public boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public String B6PF_SVOP;

				public String getB6PF_SVOP () {
					return this.B6PF_SVOP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.ORDER_NO == null) ? 0 : this.ORDER_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ORDER_PROCESS_HEADERStruct other = (ORDER_PROCESS_HEADERStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.ORDER_NO == null) {
							if (other.ORDER_NO != null)
								return false;
						
						} else if (!this.ORDER_NO.equals(other.ORDER_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ORDER_PROCESS_HEADERStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.ORDER_NO = this.ORDER_NO;
	            other.ORDER_TYPE = this.ORDER_TYPE;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.SHIPPING_ADDRESS_ID = this.SHIPPING_ADDRESS_ID;
	            other.NATIONAL_ACCOUNT_NO = this.NATIONAL_ACCOUNT_NO;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.CUSTOMER_CATEGORY_CODE = this.CUSTOMER_CATEGORY_CODE;
	            other.ROUTING_GROUP_CODE = this.ROUTING_GROUP_CODE;
	            other.ALLOCATION_TYPE = this.ALLOCATION_TYPE;
	            other.ROUTE_TO_NO = this.ROUTE_TO_NO;
	            other.ROUTE_NO = this.ROUTE_NO;
	            other.WILL_CALL_NAME = this.WILL_CALL_NAME;
	            other.WILL_CALL_START_TIME = this.WILL_CALL_START_TIME;
	            other.SEPARATE_INVOICE = this.SEPARATE_INVOICE;
	            other.ORDER_DATE = this.ORDER_DATE;
	            other.SHIP_OR_PICKUP_DATE = this.SHIP_OR_PICKUP_DATE;
	            other.NEXT_ORDER_INDICATOR = this.NEXT_ORDER_INDICATOR;
	            other.CONFIRMATION_NO = this.CONFIRMATION_NO;
	            other.ORDER_CONFIRMATION_PRINTED_FLAG = this.ORDER_CONFIRMATION_PRINTED_FLAG;
	            other.ORDER_STATUS_CODE = this.ORDER_STATUS_CODE;
	            other.TOTAL_FREEZER_CASES = this.TOTAL_FREEZER_CASES;
	            other.TOTAL_FREEZER_SPLITS = this.TOTAL_FREEZER_SPLITS;
	            other.TOTAL_COOLER_CASES = this.TOTAL_COOLER_CASES;
	            other.TOTAL_COOLER_SPLITS = this.TOTAL_COOLER_SPLITS;
	            other.TOTAL_DRY_CASES = this.TOTAL_DRY_CASES;
	            other.TOTAL_DRY_SPLITS = this.TOTAL_DRY_SPLITS;
	            other.TOTAL_NO_CASES_ORDER = this.TOTAL_NO_CASES_ORDER;
	            other.TOTAL_NO_SPLITS_ORDER = this.TOTAL_NO_SPLITS_ORDER;
	            other.TOTAL_ORDER_WEIGHT = this.TOTAL_ORDER_WEIGHT;
	            other.TOTAL_CUBE = this.TOTAL_CUBE;
	            other.TOTAL_LINES = this.TOTAL_LINES;
	            other.ORDER_TOTAL = this.ORDER_TOTAL;
	            other.ORDER_GRAND_TOTAL = this.ORDER_GRAND_TOTAL;
	            other.ORDER_ENTRY_TIME = this.ORDER_ENTRY_TIME;
	            other.RECORD_TYPE_INDICATOR = this.RECORD_TYPE_INDICATOR;
	            other.DELIVERY_METHOD = this.DELIVERY_METHOD;
	            other.MANIFEST_NO = this.MANIFEST_NO;
	            other.IMMEDIATE_ORDER_FLAG = this.IMMEDIATE_ORDER_FLAG;
	            other.BOOKING_ID = this.BOOKING_ID;
	            other.INCOMPLETE_ORDER_FLAG = this.INCOMPLETE_ORDER_FLAG;
	            other.FOODSHOW_PROMOTION_ID = this.FOODSHOW_PROMOTION_ID;
	            other.LAPTOP_ORDER_DATE = this.LAPTOP_ORDER_DATE;
	            other.ACCOUNT_NO = this.ACCOUNT_NO;
	            other.USER_FIELD_1 = this.USER_FIELD_1;
	            other.DELIVERY_DATE = this.DELIVERY_DATE;
	            other.EMPLOYEE_NO = this.EMPLOYEE_NO;
	            other.RESHIP_STATUS = this.RESHIP_STATUS;
	            other.HOLD_ORDER_FLAG = this.HOLD_ORDER_FLAG;
	            other.RELEASE_ORDER_FLAG = this.RELEASE_ORDER_FLAG;
	            other.HOLD_ORDER_REASON_CODE = this.HOLD_ORDER_REASON_CODE;
	            other.RELEASE_ORDER_REASON_CODE = this.RELEASE_ORDER_REASON_CODE;
	            other.TAX_AMOUNT = this.TAX_AMOUNT;
	            other.SEND_IMMEDIATE_ORDER_ROUTING = this.SEND_IMMEDIATE_ORDER_ROUTING;
	            other.REMOTE_ORDER_ENTRY_MODE = this.REMOTE_ORDER_ENTRY_MODE;
	            other.REMOTE_ORDER_CONFIRMATION_NO = this.REMOTE_ORDER_CONFIRMATION_NO;
	            other.FAX_NO = this.FAX_NO;
	            other.PRIMARY_MA = this.PRIMARY_MA;
	            other.GENERIC_LAST_USED_NO = this.GENERIC_LAST_USED_NO;
	            other.CALL_END_TIME = this.CALL_END_TIME;
	            other.CALL_START_TIME_INDICATOR = this.CALL_START_TIME_INDICATOR;
	            other.CALL_END_TIME_INDICATOR = this.CALL_END_TIME_INDICATOR;
	            other.RECORD_LOGICALLY_LOCKED_FLAG = this.RECORD_LOGICALLY_LOCKED_FLAG;
	            other.ERROR_STATUS_FLAG = this.ERROR_STATUS_FLAG;
	            other.REQUEST_STATUS_FLAG = this.REQUEST_STATUS_FLAG;
	            other.ORDER_DETAIL_LINE_NO = this.ORDER_DETAIL_LINE_NO;
	            other.ENTITY_ID = this.ENTITY_ID;
	            other.PARENT_ENTITY_1 = this.PARENT_ENTITY_1;
	            other.PARENT_ENTITY_2 = this.PARENT_ENTITY_2;
	            other.PARENT_ENTITY_3 = this.PARENT_ENTITY_3;
	            other.CANCEL_DATE = this.CANCEL_DATE;
	            other.SERVICE_ORDER_NO = this.SERVICE_ORDER_NO;
	            other.CREATE_TARGET_INDICATOR = this.CREATE_TARGET_INDICATOR;
	            other.VENDOR_APPROVAL_NO = this.VENDOR_APPROVAL_NO;
	            other.REQUESTED_BY = this.REQUESTED_BY;
	            other.TARGET_DESC = this.TARGET_DESC;
	            other.BILL_BACK_VENDOR_FLAG = this.BILL_BACK_VENDOR_FLAG;
	            other.NO_OF_AP_ROLL_DAYS = this.NO_OF_AP_ROLL_DAYS;
	            other.RETURN_AUTH_NO = this.RETURN_AUTH_NO;
	            other.DISPENSER_EQUIPMENT_ITEM = this.DISPENSER_EQUIPMENT_ITEM;
	            other.LAPTOP_USER_FLAG = this.LAPTOP_USER_FLAG;
	            other.LAPTOP_ORDER_NO = this.LAPTOP_ORDER_NO;
	            other.LAPTOP_ZID_NO = this.LAPTOP_ZID_NO;
	            other.STOP_NO = this.STOP_NO;
	            other.ENTITY_UPDATED_FLAG = this.ENTITY_UPDATED_FLAG;
	            other.MAJOR_CLASS = this.MAJOR_CLASS;
	            other.SWMS_RECOVERY_INVOICE_NO = this.SWMS_RECOVERY_INVOICE_NO;
	            other.DEFAULT_ROUTE_NO = this.DEFAULT_ROUTE_NO;
	            other.CONFIRM_NO = this.CONFIRM_NO;
	            other.CONTAINER_GROUP_ID = this.CONTAINER_GROUP_ID;
	            other.SEPARATE_CONTAINER_FLAG = this.SEPARATE_CONTAINER_FLAG;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.B6PF_SVOP = this.B6PF_SVOP;
	            
	}

	public void copyKeysDataTo(ORDER_PROCESS_HEADERStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.ORDER_NO = this.ORDER_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
						this.ORDER_NO = (BigDecimal) dis.readObject();
					
					this.ORDER_TYPE = readString(dis);
					
					this.SHIP_TO_CUST = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.NATIONAL_ACCOUNT_NO = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.CUSTOMER_CATEGORY_CODE = readString(dis);
					
						this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();
					
					this.ALLOCATION_TYPE = readString(dis);
					
					this.ROUTE_TO_NO = readString(dis);
					
					this.ROUTE_NO = readString(dis);
					
					this.WILL_CALL_NAME = readString(dis);
					
						this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();
					
					this.SEPARATE_INVOICE = readString(dis);
					
					this.ORDER_DATE = readDate(dis);
					
					this.SHIP_OR_PICKUP_DATE = readDate(dis);
					
					this.NEXT_ORDER_INDICATOR = readString(dis);
					
					this.CONFIRMATION_NO = readString(dis);
					
					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);
					
					this.ORDER_STATUS_CODE = readString(dis);
					
						this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();
					
						this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();
					
						this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.ORDER_TOTAL = (BigDecimal) dis.readObject();
					
						this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();
					
						this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();
					
					this.RECORD_TYPE_INDICATOR = readString(dis);
					
					this.DELIVERY_METHOD = readString(dis);
					
						this.MANIFEST_NO = (BigDecimal) dis.readObject();
					
					this.IMMEDIATE_ORDER_FLAG = readString(dis);
					
						this.BOOKING_ID = (BigDecimal) dis.readObject();
					
					this.INCOMPLETE_ORDER_FLAG = readString(dis);
					
					this.FOODSHOW_PROMOTION_ID = readString(dis);
					
					this.LAPTOP_ORDER_DATE = readDate(dis);
					
					this.ACCOUNT_NO = readString(dis);
					
					this.USER_FIELD_1 = readString(dis);
					
					this.DELIVERY_DATE = readDate(dis);
					
					this.EMPLOYEE_NO = readString(dis);
					
					this.RESHIP_STATUS = readString(dis);
					
					this.HOLD_ORDER_FLAG = readString(dis);
					
					this.RELEASE_ORDER_FLAG = readString(dis);
					
					this.HOLD_ORDER_REASON_CODE = readString(dis);
					
					this.RELEASE_ORDER_REASON_CODE = readString(dis);
					
						this.TAX_AMOUNT = (BigDecimal) dis.readObject();
					
					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);
					
					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);
					
						this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();
					
					this.FAX_NO = readString(dis);
					
					this.PRIMARY_MA = readString(dis);
					
						this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();
					
						this.CALL_END_TIME = (BigDecimal) dis.readObject();
					
					this.CALL_START_TIME_INDICATOR = readString(dis);
					
					this.CALL_END_TIME_INDICATOR = readString(dis);
					
					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);
					
					this.ERROR_STATUS_FLAG = readString(dis);
					
					this.REQUEST_STATUS_FLAG = readString(dis);
					
						this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();
					
					this.ENTITY_ID = readString(dis);
					
					this.PARENT_ENTITY_1 = readString(dis);
					
					this.PARENT_ENTITY_2 = readString(dis);
					
					this.PARENT_ENTITY_3 = readString(dis);
					
					this.CANCEL_DATE = readDate(dis);
					
						this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.CREATE_TARGET_INDICATOR = readString(dis);
					
					this.VENDOR_APPROVAL_NO = readString(dis);
					
					this.REQUESTED_BY = readString(dis);
					
					this.TARGET_DESC = readString(dis);
					
					this.BILL_BACK_VENDOR_FLAG = readString(dis);
					
						this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();
					
					this.RETURN_AUTH_NO = readString(dis);
					
					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);
					
					this.LAPTOP_USER_FLAG = readString(dis);
					
						this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.LAPTOP_ZID_NO = readString(dis);
					
						this.STOP_NO = (BigDecimal) dis.readObject();
					
					this.ENTITY_UPDATED_FLAG = readString(dis);
					
					this.MAJOR_CLASS = readString(dis);
					
					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);
					
					this.DEFAULT_ROUTE_NO = readString(dis);
					
						this.CONFIRM_NO = (BigDecimal) dis.readObject();
					
					this.CONTAINER_GROUP_ID = readString(dis);
					
					this.SEPARATE_CONTAINER_FLAG = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.B6PF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
						this.ORDER_NO = (BigDecimal) dis.readObject();
					
					this.ORDER_TYPE = readString(dis);
					
					this.SHIP_TO_CUST = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.NATIONAL_ACCOUNT_NO = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.CUSTOMER_CATEGORY_CODE = readString(dis);
					
						this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();
					
					this.ALLOCATION_TYPE = readString(dis);
					
					this.ROUTE_TO_NO = readString(dis);
					
					this.ROUTE_NO = readString(dis);
					
					this.WILL_CALL_NAME = readString(dis);
					
						this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();
					
					this.SEPARATE_INVOICE = readString(dis);
					
					this.ORDER_DATE = readDate(dis);
					
					this.SHIP_OR_PICKUP_DATE = readDate(dis);
					
					this.NEXT_ORDER_INDICATOR = readString(dis);
					
					this.CONFIRMATION_NO = readString(dis);
					
					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);
					
					this.ORDER_STATUS_CODE = readString(dis);
					
						this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();
					
						this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();
					
						this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.ORDER_TOTAL = (BigDecimal) dis.readObject();
					
						this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();
					
						this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();
					
					this.RECORD_TYPE_INDICATOR = readString(dis);
					
					this.DELIVERY_METHOD = readString(dis);
					
						this.MANIFEST_NO = (BigDecimal) dis.readObject();
					
					this.IMMEDIATE_ORDER_FLAG = readString(dis);
					
						this.BOOKING_ID = (BigDecimal) dis.readObject();
					
					this.INCOMPLETE_ORDER_FLAG = readString(dis);
					
					this.FOODSHOW_PROMOTION_ID = readString(dis);
					
					this.LAPTOP_ORDER_DATE = readDate(dis);
					
					this.ACCOUNT_NO = readString(dis);
					
					this.USER_FIELD_1 = readString(dis);
					
					this.DELIVERY_DATE = readDate(dis);
					
					this.EMPLOYEE_NO = readString(dis);
					
					this.RESHIP_STATUS = readString(dis);
					
					this.HOLD_ORDER_FLAG = readString(dis);
					
					this.RELEASE_ORDER_FLAG = readString(dis);
					
					this.HOLD_ORDER_REASON_CODE = readString(dis);
					
					this.RELEASE_ORDER_REASON_CODE = readString(dis);
					
						this.TAX_AMOUNT = (BigDecimal) dis.readObject();
					
					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);
					
					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);
					
						this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();
					
					this.FAX_NO = readString(dis);
					
					this.PRIMARY_MA = readString(dis);
					
						this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();
					
						this.CALL_END_TIME = (BigDecimal) dis.readObject();
					
					this.CALL_START_TIME_INDICATOR = readString(dis);
					
					this.CALL_END_TIME_INDICATOR = readString(dis);
					
					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);
					
					this.ERROR_STATUS_FLAG = readString(dis);
					
					this.REQUEST_STATUS_FLAG = readString(dis);
					
						this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();
					
					this.ENTITY_ID = readString(dis);
					
					this.PARENT_ENTITY_1 = readString(dis);
					
					this.PARENT_ENTITY_2 = readString(dis);
					
					this.PARENT_ENTITY_3 = readString(dis);
					
					this.CANCEL_DATE = readDate(dis);
					
						this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.CREATE_TARGET_INDICATOR = readString(dis);
					
					this.VENDOR_APPROVAL_NO = readString(dis);
					
					this.REQUESTED_BY = readString(dis);
					
					this.TARGET_DESC = readString(dis);
					
					this.BILL_BACK_VENDOR_FLAG = readString(dis);
					
						this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();
					
					this.RETURN_AUTH_NO = readString(dis);
					
					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);
					
					this.LAPTOP_USER_FLAG = readString(dis);
					
						this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.LAPTOP_ZID_NO = readString(dis);
					
						this.STOP_NO = (BigDecimal) dis.readObject();
					
					this.ENTITY_UPDATED_FLAG = readString(dis);
					
					this.MAJOR_CLASS = readString(dis);
					
					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);
					
					this.DEFAULT_ROUTE_NO = readString(dis);
					
						this.CONFIRM_NO = (BigDecimal) dis.readObject();
					
					this.CONTAINER_GROUP_ID = readString(dis);
					
					this.SEPARATE_CONTAINER_FLAG = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.B6PF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_NO);
					
					// String
				
						writeString(this.ORDER_TYPE,dos);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.NATIONAL_ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.CUSTOMER_CATEGORY_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ROUTING_GROUP_CODE);
					
					// String
				
						writeString(this.ALLOCATION_TYPE,dos);
					
					// String
				
						writeString(this.ROUTE_TO_NO,dos);
					
					// String
				
						writeString(this.ROUTE_NO,dos);
					
					// String
				
						writeString(this.WILL_CALL_NAME,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.WILL_CALL_START_TIME);
					
					// String
				
						writeString(this.SEPARATE_INVOICE,dos);
					
					// java.util.Date
				
						writeDate(this.ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SHIP_OR_PICKUP_DATE,dos);
					
					// String
				
						writeString(this.NEXT_ORDER_INDICATOR,dos);
					
					// String
				
						writeString(this.CONFIRMATION_NO,dos);
					
					// String
				
						writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG,dos);
					
					// String
				
						writeString(this.ORDER_STATUS_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREEZER_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREEZER_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_COOLER_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_COOLER_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DRY_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DRY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NO_CASES_ORDER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_ORDER_WEIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_GRAND_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_ENTRY_TIME);
					
					// String
				
						writeString(this.RECORD_TYPE_INDICATOR,dos);
					
					// String
				
						writeString(this.DELIVERY_METHOD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MANIFEST_NO);
					
					// String
				
						writeString(this.IMMEDIATE_ORDER_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BOOKING_ID);
					
					// String
				
						writeString(this.INCOMPLETE_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.FOODSHOW_PROMOTION_ID,dos);
					
					// java.util.Date
				
						writeDate(this.LAPTOP_ORDER_DATE,dos);
					
					// String
				
						writeString(this.ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.USER_FIELD_1,dos);
					
					// java.util.Date
				
						writeDate(this.DELIVERY_DATE,dos);
					
					// String
				
						writeString(this.EMPLOYEE_NO,dos);
					
					// String
				
						writeString(this.RESHIP_STATUS,dos);
					
					// String
				
						writeString(this.HOLD_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.RELEASE_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.HOLD_ORDER_REASON_CODE,dos);
					
					// String
				
						writeString(this.RELEASE_ORDER_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TAX_AMOUNT);
					
					// String
				
						writeString(this.SEND_IMMEDIATE_ORDER_ROUTING,dos);
					
					// String
				
						writeString(this.REMOTE_ORDER_ENTRY_MODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);
					
					// String
				
						writeString(this.FAX_NO,dos);
					
					// String
				
						writeString(this.PRIMARY_MA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERIC_LAST_USED_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CALL_END_TIME);
					
					// String
				
						writeString(this.CALL_START_TIME_INDICATOR,dos);
					
					// String
				
						writeString(this.CALL_END_TIME_INDICATOR,dos);
					
					// String
				
						writeString(this.RECORD_LOGICALLY_LOCKED_FLAG,dos);
					
					// String
				
						writeString(this.ERROR_STATUS_FLAG,dos);
					
					// String
				
						writeString(this.REQUEST_STATUS_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_DETAIL_LINE_NO);
					
					// String
				
						writeString(this.ENTITY_ID,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_1,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_2,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_3,dos);
					
					// java.util.Date
				
						writeDate(this.CANCEL_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICE_ORDER_NO);
					
					// String
				
						writeString(this.CREATE_TARGET_INDICATOR,dos);
					
					// String
				
						writeString(this.VENDOR_APPROVAL_NO,dos);
					
					// String
				
						writeString(this.REQUESTED_BY,dos);
					
					// String
				
						writeString(this.TARGET_DESC,dos);
					
					// String
				
						writeString(this.BILL_BACK_VENDOR_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_OF_AP_ROLL_DAYS);
					
					// String
				
						writeString(this.RETURN_AUTH_NO,dos);
					
					// String
				
						writeString(this.DISPENSER_EQUIPMENT_ITEM,dos);
					
					// String
				
						writeString(this.LAPTOP_USER_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAPTOP_ORDER_NO);
					
					// String
				
						writeString(this.LAPTOP_ZID_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.STOP_NO);
					
					// String
				
						writeString(this.ENTITY_UPDATED_FLAG,dos);
					
					// String
				
						writeString(this.MAJOR_CLASS,dos);
					
					// String
				
						writeString(this.SWMS_RECOVERY_INVOICE_NO,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRM_NO);
					
					// String
				
						writeString(this.CONTAINER_GROUP_ID,dos);
					
					// String
				
						writeString(this.SEPARATE_CONTAINER_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.B6PF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_NO);
					
					// String
				
						writeString(this.ORDER_TYPE,dos);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.NATIONAL_ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.CUSTOMER_CATEGORY_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ROUTING_GROUP_CODE);
					
					// String
				
						writeString(this.ALLOCATION_TYPE,dos);
					
					// String
				
						writeString(this.ROUTE_TO_NO,dos);
					
					// String
				
						writeString(this.ROUTE_NO,dos);
					
					// String
				
						writeString(this.WILL_CALL_NAME,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.WILL_CALL_START_TIME);
					
					// String
				
						writeString(this.SEPARATE_INVOICE,dos);
					
					// java.util.Date
				
						writeDate(this.ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SHIP_OR_PICKUP_DATE,dos);
					
					// String
				
						writeString(this.NEXT_ORDER_INDICATOR,dos);
					
					// String
				
						writeString(this.CONFIRMATION_NO,dos);
					
					// String
				
						writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG,dos);
					
					// String
				
						writeString(this.ORDER_STATUS_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREEZER_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREEZER_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_COOLER_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_COOLER_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DRY_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DRY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NO_CASES_ORDER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_ORDER_WEIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_GRAND_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_ENTRY_TIME);
					
					// String
				
						writeString(this.RECORD_TYPE_INDICATOR,dos);
					
					// String
				
						writeString(this.DELIVERY_METHOD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MANIFEST_NO);
					
					// String
				
						writeString(this.IMMEDIATE_ORDER_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BOOKING_ID);
					
					// String
				
						writeString(this.INCOMPLETE_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.FOODSHOW_PROMOTION_ID,dos);
					
					// java.util.Date
				
						writeDate(this.LAPTOP_ORDER_DATE,dos);
					
					// String
				
						writeString(this.ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.USER_FIELD_1,dos);
					
					// java.util.Date
				
						writeDate(this.DELIVERY_DATE,dos);
					
					// String
				
						writeString(this.EMPLOYEE_NO,dos);
					
					// String
				
						writeString(this.RESHIP_STATUS,dos);
					
					// String
				
						writeString(this.HOLD_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.RELEASE_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.HOLD_ORDER_REASON_CODE,dos);
					
					// String
				
						writeString(this.RELEASE_ORDER_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TAX_AMOUNT);
					
					// String
				
						writeString(this.SEND_IMMEDIATE_ORDER_ROUTING,dos);
					
					// String
				
						writeString(this.REMOTE_ORDER_ENTRY_MODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);
					
					// String
				
						writeString(this.FAX_NO,dos);
					
					// String
				
						writeString(this.PRIMARY_MA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERIC_LAST_USED_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CALL_END_TIME);
					
					// String
				
						writeString(this.CALL_START_TIME_INDICATOR,dos);
					
					// String
				
						writeString(this.CALL_END_TIME_INDICATOR,dos);
					
					// String
				
						writeString(this.RECORD_LOGICALLY_LOCKED_FLAG,dos);
					
					// String
				
						writeString(this.ERROR_STATUS_FLAG,dos);
					
					// String
				
						writeString(this.REQUEST_STATUS_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_DETAIL_LINE_NO);
					
					// String
				
						writeString(this.ENTITY_ID,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_1,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_2,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_3,dos);
					
					// java.util.Date
				
						writeDate(this.CANCEL_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICE_ORDER_NO);
					
					// String
				
						writeString(this.CREATE_TARGET_INDICATOR,dos);
					
					// String
				
						writeString(this.VENDOR_APPROVAL_NO,dos);
					
					// String
				
						writeString(this.REQUESTED_BY,dos);
					
					// String
				
						writeString(this.TARGET_DESC,dos);
					
					// String
				
						writeString(this.BILL_BACK_VENDOR_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_OF_AP_ROLL_DAYS);
					
					// String
				
						writeString(this.RETURN_AUTH_NO,dos);
					
					// String
				
						writeString(this.DISPENSER_EQUIPMENT_ITEM,dos);
					
					// String
				
						writeString(this.LAPTOP_USER_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAPTOP_ORDER_NO);
					
					// String
				
						writeString(this.LAPTOP_ZID_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.STOP_NO);
					
					// String
				
						writeString(this.ENTITY_UPDATED_FLAG,dos);
					
					// String
				
						writeString(this.MAJOR_CLASS,dos);
					
					// String
				
						writeString(this.SWMS_RECOVERY_INVOICE_NO,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRM_NO);
					
					// String
				
						writeString(this.CONTAINER_GROUP_ID,dos);
					
					// String
				
						writeString(this.SEPARATE_CONTAINER_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.B6PF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",ORDER_NO="+String.valueOf(ORDER_NO));
		sb.append(",ORDER_TYPE="+ORDER_TYPE);
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",SHIPPING_ADDRESS_ID="+SHIPPING_ADDRESS_ID);
		sb.append(",NATIONAL_ACCOUNT_NO="+NATIONAL_ACCOUNT_NO);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",CUSTOMER_CATEGORY_CODE="+CUSTOMER_CATEGORY_CODE);
		sb.append(",ROUTING_GROUP_CODE="+String.valueOf(ROUTING_GROUP_CODE));
		sb.append(",ALLOCATION_TYPE="+ALLOCATION_TYPE);
		sb.append(",ROUTE_TO_NO="+ROUTE_TO_NO);
		sb.append(",ROUTE_NO="+ROUTE_NO);
		sb.append(",WILL_CALL_NAME="+WILL_CALL_NAME);
		sb.append(",WILL_CALL_START_TIME="+String.valueOf(WILL_CALL_START_TIME));
		sb.append(",SEPARATE_INVOICE="+SEPARATE_INVOICE);
		sb.append(",ORDER_DATE="+String.valueOf(ORDER_DATE));
		sb.append(",SHIP_OR_PICKUP_DATE="+String.valueOf(SHIP_OR_PICKUP_DATE));
		sb.append(",NEXT_ORDER_INDICATOR="+NEXT_ORDER_INDICATOR);
		sb.append(",CONFIRMATION_NO="+CONFIRMATION_NO);
		sb.append(",ORDER_CONFIRMATION_PRINTED_FLAG="+ORDER_CONFIRMATION_PRINTED_FLAG);
		sb.append(",ORDER_STATUS_CODE="+ORDER_STATUS_CODE);
		sb.append(",TOTAL_FREEZER_CASES="+String.valueOf(TOTAL_FREEZER_CASES));
		sb.append(",TOTAL_FREEZER_SPLITS="+String.valueOf(TOTAL_FREEZER_SPLITS));
		sb.append(",TOTAL_COOLER_CASES="+String.valueOf(TOTAL_COOLER_CASES));
		sb.append(",TOTAL_COOLER_SPLITS="+String.valueOf(TOTAL_COOLER_SPLITS));
		sb.append(",TOTAL_DRY_CASES="+String.valueOf(TOTAL_DRY_CASES));
		sb.append(",TOTAL_DRY_SPLITS="+String.valueOf(TOTAL_DRY_SPLITS));
		sb.append(",TOTAL_NO_CASES_ORDER="+String.valueOf(TOTAL_NO_CASES_ORDER));
		sb.append(",TOTAL_NO_SPLITS_ORDER="+String.valueOf(TOTAL_NO_SPLITS_ORDER));
		sb.append(",TOTAL_ORDER_WEIGHT="+String.valueOf(TOTAL_ORDER_WEIGHT));
		sb.append(",TOTAL_CUBE="+String.valueOf(TOTAL_CUBE));
		sb.append(",TOTAL_LINES="+String.valueOf(TOTAL_LINES));
		sb.append(",ORDER_TOTAL="+String.valueOf(ORDER_TOTAL));
		sb.append(",ORDER_GRAND_TOTAL="+String.valueOf(ORDER_GRAND_TOTAL));
		sb.append(",ORDER_ENTRY_TIME="+String.valueOf(ORDER_ENTRY_TIME));
		sb.append(",RECORD_TYPE_INDICATOR="+RECORD_TYPE_INDICATOR);
		sb.append(",DELIVERY_METHOD="+DELIVERY_METHOD);
		sb.append(",MANIFEST_NO="+String.valueOf(MANIFEST_NO));
		sb.append(",IMMEDIATE_ORDER_FLAG="+IMMEDIATE_ORDER_FLAG);
		sb.append(",BOOKING_ID="+String.valueOf(BOOKING_ID));
		sb.append(",INCOMPLETE_ORDER_FLAG="+INCOMPLETE_ORDER_FLAG);
		sb.append(",FOODSHOW_PROMOTION_ID="+FOODSHOW_PROMOTION_ID);
		sb.append(",LAPTOP_ORDER_DATE="+String.valueOf(LAPTOP_ORDER_DATE));
		sb.append(",ACCOUNT_NO="+ACCOUNT_NO);
		sb.append(",USER_FIELD_1="+USER_FIELD_1);
		sb.append(",DELIVERY_DATE="+String.valueOf(DELIVERY_DATE));
		sb.append(",EMPLOYEE_NO="+EMPLOYEE_NO);
		sb.append(",RESHIP_STATUS="+RESHIP_STATUS);
		sb.append(",HOLD_ORDER_FLAG="+HOLD_ORDER_FLAG);
		sb.append(",RELEASE_ORDER_FLAG="+RELEASE_ORDER_FLAG);
		sb.append(",HOLD_ORDER_REASON_CODE="+HOLD_ORDER_REASON_CODE);
		sb.append(",RELEASE_ORDER_REASON_CODE="+RELEASE_ORDER_REASON_CODE);
		sb.append(",TAX_AMOUNT="+String.valueOf(TAX_AMOUNT));
		sb.append(",SEND_IMMEDIATE_ORDER_ROUTING="+SEND_IMMEDIATE_ORDER_ROUTING);
		sb.append(",REMOTE_ORDER_ENTRY_MODE="+REMOTE_ORDER_ENTRY_MODE);
		sb.append(",REMOTE_ORDER_CONFIRMATION_NO="+String.valueOf(REMOTE_ORDER_CONFIRMATION_NO));
		sb.append(",FAX_NO="+FAX_NO);
		sb.append(",PRIMARY_MA="+PRIMARY_MA);
		sb.append(",GENERIC_LAST_USED_NO="+String.valueOf(GENERIC_LAST_USED_NO));
		sb.append(",CALL_END_TIME="+String.valueOf(CALL_END_TIME));
		sb.append(",CALL_START_TIME_INDICATOR="+CALL_START_TIME_INDICATOR);
		sb.append(",CALL_END_TIME_INDICATOR="+CALL_END_TIME_INDICATOR);
		sb.append(",RECORD_LOGICALLY_LOCKED_FLAG="+RECORD_LOGICALLY_LOCKED_FLAG);
		sb.append(",ERROR_STATUS_FLAG="+ERROR_STATUS_FLAG);
		sb.append(",REQUEST_STATUS_FLAG="+REQUEST_STATUS_FLAG);
		sb.append(",ORDER_DETAIL_LINE_NO="+String.valueOf(ORDER_DETAIL_LINE_NO));
		sb.append(",ENTITY_ID="+ENTITY_ID);
		sb.append(",PARENT_ENTITY_1="+PARENT_ENTITY_1);
		sb.append(",PARENT_ENTITY_2="+PARENT_ENTITY_2);
		sb.append(",PARENT_ENTITY_3="+PARENT_ENTITY_3);
		sb.append(",CANCEL_DATE="+String.valueOf(CANCEL_DATE));
		sb.append(",SERVICE_ORDER_NO="+String.valueOf(SERVICE_ORDER_NO));
		sb.append(",CREATE_TARGET_INDICATOR="+CREATE_TARGET_INDICATOR);
		sb.append(",VENDOR_APPROVAL_NO="+VENDOR_APPROVAL_NO);
		sb.append(",REQUESTED_BY="+REQUESTED_BY);
		sb.append(",TARGET_DESC="+TARGET_DESC);
		sb.append(",BILL_BACK_VENDOR_FLAG="+BILL_BACK_VENDOR_FLAG);
		sb.append(",NO_OF_AP_ROLL_DAYS="+String.valueOf(NO_OF_AP_ROLL_DAYS));
		sb.append(",RETURN_AUTH_NO="+RETURN_AUTH_NO);
		sb.append(",DISPENSER_EQUIPMENT_ITEM="+DISPENSER_EQUIPMENT_ITEM);
		sb.append(",LAPTOP_USER_FLAG="+LAPTOP_USER_FLAG);
		sb.append(",LAPTOP_ORDER_NO="+String.valueOf(LAPTOP_ORDER_NO));
		sb.append(",LAPTOP_ZID_NO="+LAPTOP_ZID_NO);
		sb.append(",STOP_NO="+String.valueOf(STOP_NO));
		sb.append(",ENTITY_UPDATED_FLAG="+ENTITY_UPDATED_FLAG);
		sb.append(",MAJOR_CLASS="+MAJOR_CLASS);
		sb.append(",SWMS_RECOVERY_INVOICE_NO="+SWMS_RECOVERY_INVOICE_NO);
		sb.append(",DEFAULT_ROUTE_NO="+DEFAULT_ROUTE_NO);
		sb.append(",CONFIRM_NO="+String.valueOf(CONFIRM_NO));
		sb.append(",CONTAINER_GROUP_ID="+CONTAINER_GROUP_ID);
		sb.append(",SEPARATE_CONTAINER_FLAG="+SEPARATE_CONTAINER_FLAG);
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",B6PF_SVOP="+B6PF_SVOP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_TO_CUST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_TO_CUST);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPPING_ADDRESS_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPPING_ADDRESS_ID);
            			}
            		
        			sb.append("|");
        		
        				if(NATIONAL_ACCOUNT_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NATIONAL_ACCOUNT_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PURCHASE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PURCHASE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CUSTOMER_CATEGORY_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUSTOMER_CATEGORY_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(ROUTING_GROUP_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ROUTING_GROUP_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(ALLOCATION_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ALLOCATION_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ROUTE_TO_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ROUTE_TO_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ROUTE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ROUTE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(WILL_CALL_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WILL_CALL_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(WILL_CALL_START_TIME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WILL_CALL_START_TIME);
            			}
            		
        			sb.append("|");
        		
        				if(SEPARATE_INVOICE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEPARATE_INVOICE);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_OR_PICKUP_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_OR_PICKUP_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(NEXT_ORDER_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NEXT_ORDER_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMATION_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMATION_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_CONFIRMATION_PRINTED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_CONFIRMATION_PRINTED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_STATUS_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_STATUS_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_FREEZER_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_FREEZER_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_FREEZER_SPLITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_FREEZER_SPLITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_COOLER_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_COOLER_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_COOLER_SPLITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_COOLER_SPLITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_DRY_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_DRY_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_DRY_SPLITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_DRY_SPLITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_NO_CASES_ORDER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_NO_CASES_ORDER);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_NO_SPLITS_ORDER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_NO_SPLITS_ORDER);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_ORDER_WEIGHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_ORDER_WEIGHT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_LINES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_LINES);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_TOTAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_TOTAL);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_GRAND_TOTAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_GRAND_TOTAL);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_ENTRY_TIME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_ENTRY_TIME);
            			}
            		
        			sb.append("|");
        		
        				if(RECORD_TYPE_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECORD_TYPE_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(DELIVERY_METHOD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DELIVERY_METHOD);
            			}
            		
        			sb.append("|");
        		
        				if(MANIFEST_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MANIFEST_NO);
            			}
            		
        			sb.append("|");
        		
        				if(IMMEDIATE_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IMMEDIATE_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(BOOKING_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BOOKING_ID);
            			}
            		
        			sb.append("|");
        		
        				if(INCOMPLETE_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INCOMPLETE_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(FOODSHOW_PROMOTION_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FOODSHOW_PROMOTION_ID);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_ORDER_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_ORDER_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(ACCOUNT_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACCOUNT_NO);
            			}
            		
        			sb.append("|");
        		
        				if(USER_FIELD_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(USER_FIELD_1);
            			}
            		
        			sb.append("|");
        		
        				if(DELIVERY_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DELIVERY_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(EMPLOYEE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EMPLOYEE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(RESHIP_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESHIP_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(HOLD_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HOLD_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(RELEASE_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RELEASE_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(HOLD_ORDER_REASON_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HOLD_ORDER_REASON_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(RELEASE_ORDER_REASON_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RELEASE_ORDER_REASON_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(TAX_AMOUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TAX_AMOUNT);
            			}
            		
        			sb.append("|");
        		
        				if(SEND_IMMEDIATE_ORDER_ROUTING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEND_IMMEDIATE_ORDER_ROUTING);
            			}
            		
        			sb.append("|");
        		
        				if(REMOTE_ORDER_ENTRY_MODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REMOTE_ORDER_ENTRY_MODE);
            			}
            		
        			sb.append("|");
        		
        				if(REMOTE_ORDER_CONFIRMATION_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REMOTE_ORDER_CONFIRMATION_NO);
            			}
            		
        			sb.append("|");
        		
        				if(FAX_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FAX_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PRIMARY_MA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRIMARY_MA);
            			}
            		
        			sb.append("|");
        		
        				if(GENERIC_LAST_USED_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(GENERIC_LAST_USED_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CALL_END_TIME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALL_END_TIME);
            			}
            		
        			sb.append("|");
        		
        				if(CALL_START_TIME_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALL_START_TIME_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(CALL_END_TIME_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALL_END_TIME_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(RECORD_LOGICALLY_LOCKED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECORD_LOGICALLY_LOCKED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ERROR_STATUS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ERROR_STATUS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(REQUEST_STATUS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REQUEST_STATUS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_DETAIL_LINE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_DETAIL_LINE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ENTITY_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ENTITY_ID);
            			}
            		
        			sb.append("|");
        		
        				if(PARENT_ENTITY_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARENT_ENTITY_1);
            			}
            		
        			sb.append("|");
        		
        				if(PARENT_ENTITY_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARENT_ENTITY_2);
            			}
            		
        			sb.append("|");
        		
        				if(PARENT_ENTITY_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARENT_ENTITY_3);
            			}
            		
        			sb.append("|");
        		
        				if(CANCEL_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CANCEL_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(SERVICE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SERVICE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CREATE_TARGET_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATE_TARGET_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_APPROVAL_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_APPROVAL_NO);
            			}
            		
        			sb.append("|");
        		
        				if(REQUESTED_BY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REQUESTED_BY);
            			}
            		
        			sb.append("|");
        		
        				if(TARGET_DESC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TARGET_DESC);
            			}
            		
        			sb.append("|");
        		
        				if(BILL_BACK_VENDOR_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BILL_BACK_VENDOR_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(NO_OF_AP_ROLL_DAYS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_OF_AP_ROLL_DAYS);
            			}
            		
        			sb.append("|");
        		
        				if(RETURN_AUTH_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RETURN_AUTH_NO);
            			}
            		
        			sb.append("|");
        		
        				if(DISPENSER_EQUIPMENT_ITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISPENSER_EQUIPMENT_ITEM);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_USER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_USER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_ZID_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_ZID_NO);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ENTITY_UPDATED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ENTITY_UPDATED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(MAJOR_CLASS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAJOR_CLASS);
            			}
            		
        			sb.append("|");
        		
        				if(SWMS_RECOVERY_INVOICE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SWMS_RECOVERY_INVOICE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_ROUTE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_ROUTE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRM_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRM_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CONTAINER_GROUP_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONTAINER_GROUP_ID);
            			}
            		
        			sb.append("|");
        		
        				if(SEPARATE_CONTAINER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEPARATE_CONTAINER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				sb.append(IS_DELETED);
        			
        			sb.append("|");
        		
        				if(CREATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(B6PF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6PF_SVOP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(ORDER_PROCESS_HEADERStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ORDER_NO, other.ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public BigDecimal ORDER_NO;

				public BigDecimal getORDER_NO () {
					return this.ORDER_NO;
				}
				
			    public String ORDER_TYPE;

				public String getORDER_TYPE () {
					return this.ORDER_TYPE;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public String SHIPPING_ADDRESS_ID;

				public String getSHIPPING_ADDRESS_ID () {
					return this.SHIPPING_ADDRESS_ID;
				}
				
			    public String NATIONAL_ACCOUNT_NO;

				public String getNATIONAL_ACCOUNT_NO () {
					return this.NATIONAL_ACCOUNT_NO;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public String CUSTOMER_CATEGORY_CODE;

				public String getCUSTOMER_CATEGORY_CODE () {
					return this.CUSTOMER_CATEGORY_CODE;
				}
				
			    public BigDecimal ROUTING_GROUP_CODE;

				public BigDecimal getROUTING_GROUP_CODE () {
					return this.ROUTING_GROUP_CODE;
				}
				
			    public String ALLOCATION_TYPE;

				public String getALLOCATION_TYPE () {
					return this.ALLOCATION_TYPE;
				}
				
			    public String ROUTE_TO_NO;

				public String getROUTE_TO_NO () {
					return this.ROUTE_TO_NO;
				}
				
			    public String ROUTE_NO;

				public String getROUTE_NO () {
					return this.ROUTE_NO;
				}
				
			    public String WILL_CALL_NAME;

				public String getWILL_CALL_NAME () {
					return this.WILL_CALL_NAME;
				}
				
			    public BigDecimal WILL_CALL_START_TIME;

				public BigDecimal getWILL_CALL_START_TIME () {
					return this.WILL_CALL_START_TIME;
				}
				
			    public String SEPARATE_INVOICE;

				public String getSEPARATE_INVOICE () {
					return this.SEPARATE_INVOICE;
				}
				
			    public String ORDER_DATE;

				public String getORDER_DATE () {
					return this.ORDER_DATE;
				}
				
			    public String SHIP_OR_PICKUP_DATE;

				public String getSHIP_OR_PICKUP_DATE () {
					return this.SHIP_OR_PICKUP_DATE;
				}
				
			    public String NEXT_ORDER_INDICATOR;

				public String getNEXT_ORDER_INDICATOR () {
					return this.NEXT_ORDER_INDICATOR;
				}
				
			    public String CONFIRMATION_NO;

				public String getCONFIRMATION_NO () {
					return this.CONFIRMATION_NO;
				}
				
			    public String ORDER_CONFIRMATION_PRINTED_FLAG;

				public String getORDER_CONFIRMATION_PRINTED_FLAG () {
					return this.ORDER_CONFIRMATION_PRINTED_FLAG;
				}
				
			    public String ORDER_STATUS_CODE;

				public String getORDER_STATUS_CODE () {
					return this.ORDER_STATUS_CODE;
				}
				
			    public BigDecimal TOTAL_FREEZER_CASES;

				public BigDecimal getTOTAL_FREEZER_CASES () {
					return this.TOTAL_FREEZER_CASES;
				}
				
			    public BigDecimal TOTAL_FREEZER_SPLITS;

				public BigDecimal getTOTAL_FREEZER_SPLITS () {
					return this.TOTAL_FREEZER_SPLITS;
				}
				
			    public BigDecimal TOTAL_COOLER_CASES;

				public BigDecimal getTOTAL_COOLER_CASES () {
					return this.TOTAL_COOLER_CASES;
				}
				
			    public BigDecimal TOTAL_COOLER_SPLITS;

				public BigDecimal getTOTAL_COOLER_SPLITS () {
					return this.TOTAL_COOLER_SPLITS;
				}
				
			    public BigDecimal TOTAL_DRY_CASES;

				public BigDecimal getTOTAL_DRY_CASES () {
					return this.TOTAL_DRY_CASES;
				}
				
			    public BigDecimal TOTAL_DRY_SPLITS;

				public BigDecimal getTOTAL_DRY_SPLITS () {
					return this.TOTAL_DRY_SPLITS;
				}
				
			    public BigDecimal TOTAL_NO_CASES_ORDER;

				public BigDecimal getTOTAL_NO_CASES_ORDER () {
					return this.TOTAL_NO_CASES_ORDER;
				}
				
			    public BigDecimal TOTAL_NO_SPLITS_ORDER;

				public BigDecimal getTOTAL_NO_SPLITS_ORDER () {
					return this.TOTAL_NO_SPLITS_ORDER;
				}
				
			    public BigDecimal TOTAL_ORDER_WEIGHT;

				public BigDecimal getTOTAL_ORDER_WEIGHT () {
					return this.TOTAL_ORDER_WEIGHT;
				}
				
			    public BigDecimal TOTAL_CUBE;

				public BigDecimal getTOTAL_CUBE () {
					return this.TOTAL_CUBE;
				}
				
			    public BigDecimal TOTAL_LINES;

				public BigDecimal getTOTAL_LINES () {
					return this.TOTAL_LINES;
				}
				
			    public BigDecimal ORDER_TOTAL;

				public BigDecimal getORDER_TOTAL () {
					return this.ORDER_TOTAL;
				}
				
			    public BigDecimal ORDER_GRAND_TOTAL;

				public BigDecimal getORDER_GRAND_TOTAL () {
					return this.ORDER_GRAND_TOTAL;
				}
				
			    public BigDecimal ORDER_ENTRY_TIME;

				public BigDecimal getORDER_ENTRY_TIME () {
					return this.ORDER_ENTRY_TIME;
				}
				
			    public String RECORD_TYPE_INDICATOR;

				public String getRECORD_TYPE_INDICATOR () {
					return this.RECORD_TYPE_INDICATOR;
				}
				
			    public String DELIVERY_METHOD;

				public String getDELIVERY_METHOD () {
					return this.DELIVERY_METHOD;
				}
				
			    public BigDecimal MANIFEST_NO;

				public BigDecimal getMANIFEST_NO () {
					return this.MANIFEST_NO;
				}
				
			    public String IMMEDIATE_ORDER_FLAG;

				public String getIMMEDIATE_ORDER_FLAG () {
					return this.IMMEDIATE_ORDER_FLAG;
				}
				
			    public BigDecimal BOOKING_ID;

				public BigDecimal getBOOKING_ID () {
					return this.BOOKING_ID;
				}
				
			    public String INCOMPLETE_ORDER_FLAG;

				public String getINCOMPLETE_ORDER_FLAG () {
					return this.INCOMPLETE_ORDER_FLAG;
				}
				
			    public String FOODSHOW_PROMOTION_ID;

				public String getFOODSHOW_PROMOTION_ID () {
					return this.FOODSHOW_PROMOTION_ID;
				}
				
			    public String LAPTOP_ORDER_DATE;

				public String getLAPTOP_ORDER_DATE () {
					return this.LAPTOP_ORDER_DATE;
				}
				
			    public String ACCOUNT_NO;

				public String getACCOUNT_NO () {
					return this.ACCOUNT_NO;
				}
				
			    public String USER_FIELD_1;

				public String getUSER_FIELD_1 () {
					return this.USER_FIELD_1;
				}
				
			    public String DELIVERY_DATE;

				public String getDELIVERY_DATE () {
					return this.DELIVERY_DATE;
				}
				
			    public String EMPLOYEE_NO;

				public String getEMPLOYEE_NO () {
					return this.EMPLOYEE_NO;
				}
				
			    public String RESHIP_STATUS;

				public String getRESHIP_STATUS () {
					return this.RESHIP_STATUS;
				}
				
			    public String HOLD_ORDER_FLAG;

				public String getHOLD_ORDER_FLAG () {
					return this.HOLD_ORDER_FLAG;
				}
				
			    public String RELEASE_ORDER_FLAG;

				public String getRELEASE_ORDER_FLAG () {
					return this.RELEASE_ORDER_FLAG;
				}
				
			    public String HOLD_ORDER_REASON_CODE;

				public String getHOLD_ORDER_REASON_CODE () {
					return this.HOLD_ORDER_REASON_CODE;
				}
				
			    public String RELEASE_ORDER_REASON_CODE;

				public String getRELEASE_ORDER_REASON_CODE () {
					return this.RELEASE_ORDER_REASON_CODE;
				}
				
			    public BigDecimal TAX_AMOUNT;

				public BigDecimal getTAX_AMOUNT () {
					return this.TAX_AMOUNT;
				}
				
			    public String SEND_IMMEDIATE_ORDER_ROUTING;

				public String getSEND_IMMEDIATE_ORDER_ROUTING () {
					return this.SEND_IMMEDIATE_ORDER_ROUTING;
				}
				
			    public String REMOTE_ORDER_ENTRY_MODE;

				public String getREMOTE_ORDER_ENTRY_MODE () {
					return this.REMOTE_ORDER_ENTRY_MODE;
				}
				
			    public BigDecimal REMOTE_ORDER_CONFIRMATION_NO;

				public BigDecimal getREMOTE_ORDER_CONFIRMATION_NO () {
					return this.REMOTE_ORDER_CONFIRMATION_NO;
				}
				
			    public String FAX_NO;

				public String getFAX_NO () {
					return this.FAX_NO;
				}
				
			    public String PRIMARY_MA;

				public String getPRIMARY_MA () {
					return this.PRIMARY_MA;
				}
				
			    public BigDecimal GENERIC_LAST_USED_NO;

				public BigDecimal getGENERIC_LAST_USED_NO () {
					return this.GENERIC_LAST_USED_NO;
				}
				
			    public BigDecimal CALL_END_TIME;

				public BigDecimal getCALL_END_TIME () {
					return this.CALL_END_TIME;
				}
				
			    public String CALL_START_TIME_INDICATOR;

				public String getCALL_START_TIME_INDICATOR () {
					return this.CALL_START_TIME_INDICATOR;
				}
				
			    public String CALL_END_TIME_INDICATOR;

				public String getCALL_END_TIME_INDICATOR () {
					return this.CALL_END_TIME_INDICATOR;
				}
				
			    public String RECORD_LOGICALLY_LOCKED_FLAG;

				public String getRECORD_LOGICALLY_LOCKED_FLAG () {
					return this.RECORD_LOGICALLY_LOCKED_FLAG;
				}
				
			    public String ERROR_STATUS_FLAG;

				public String getERROR_STATUS_FLAG () {
					return this.ERROR_STATUS_FLAG;
				}
				
			    public String REQUEST_STATUS_FLAG;

				public String getREQUEST_STATUS_FLAG () {
					return this.REQUEST_STATUS_FLAG;
				}
				
			    public BigDecimal ORDER_DETAIL_LINE_NO;

				public BigDecimal getORDER_DETAIL_LINE_NO () {
					return this.ORDER_DETAIL_LINE_NO;
				}
				
			    public String ENTITY_ID;

				public String getENTITY_ID () {
					return this.ENTITY_ID;
				}
				
			    public String PARENT_ENTITY_1;

				public String getPARENT_ENTITY_1 () {
					return this.PARENT_ENTITY_1;
				}
				
			    public String PARENT_ENTITY_2;

				public String getPARENT_ENTITY_2 () {
					return this.PARENT_ENTITY_2;
				}
				
			    public String PARENT_ENTITY_3;

				public String getPARENT_ENTITY_3 () {
					return this.PARENT_ENTITY_3;
				}
				
			    public String CANCEL_DATE;

				public String getCANCEL_DATE () {
					return this.CANCEL_DATE;
				}
				
			    public BigDecimal SERVICE_ORDER_NO;

				public BigDecimal getSERVICE_ORDER_NO () {
					return this.SERVICE_ORDER_NO;
				}
				
			    public String CREATE_TARGET_INDICATOR;

				public String getCREATE_TARGET_INDICATOR () {
					return this.CREATE_TARGET_INDICATOR;
				}
				
			    public String VENDOR_APPROVAL_NO;

				public String getVENDOR_APPROVAL_NO () {
					return this.VENDOR_APPROVAL_NO;
				}
				
			    public String REQUESTED_BY;

				public String getREQUESTED_BY () {
					return this.REQUESTED_BY;
				}
				
			    public String TARGET_DESC;

				public String getTARGET_DESC () {
					return this.TARGET_DESC;
				}
				
			    public String BILL_BACK_VENDOR_FLAG;

				public String getBILL_BACK_VENDOR_FLAG () {
					return this.BILL_BACK_VENDOR_FLAG;
				}
				
			    public BigDecimal NO_OF_AP_ROLL_DAYS;

				public BigDecimal getNO_OF_AP_ROLL_DAYS () {
					return this.NO_OF_AP_ROLL_DAYS;
				}
				
			    public String RETURN_AUTH_NO;

				public String getRETURN_AUTH_NO () {
					return this.RETURN_AUTH_NO;
				}
				
			    public String DISPENSER_EQUIPMENT_ITEM;

				public String getDISPENSER_EQUIPMENT_ITEM () {
					return this.DISPENSER_EQUIPMENT_ITEM;
				}
				
			    public String LAPTOP_USER_FLAG;

				public String getLAPTOP_USER_FLAG () {
					return this.LAPTOP_USER_FLAG;
				}
				
			    public BigDecimal LAPTOP_ORDER_NO;

				public BigDecimal getLAPTOP_ORDER_NO () {
					return this.LAPTOP_ORDER_NO;
				}
				
			    public String LAPTOP_ZID_NO;

				public String getLAPTOP_ZID_NO () {
					return this.LAPTOP_ZID_NO;
				}
				
			    public BigDecimal STOP_NO;

				public BigDecimal getSTOP_NO () {
					return this.STOP_NO;
				}
				
			    public String ENTITY_UPDATED_FLAG;

				public String getENTITY_UPDATED_FLAG () {
					return this.ENTITY_UPDATED_FLAG;
				}
				
			    public String MAJOR_CLASS;

				public String getMAJOR_CLASS () {
					return this.MAJOR_CLASS;
				}
				
			    public String SWMS_RECOVERY_INVOICE_NO;

				public String getSWMS_RECOVERY_INVOICE_NO () {
					return this.SWMS_RECOVERY_INVOICE_NO;
				}
				
			    public String DEFAULT_ROUTE_NO;

				public String getDEFAULT_ROUTE_NO () {
					return this.DEFAULT_ROUTE_NO;
				}
				
			    public BigDecimal CONFIRM_NO;

				public BigDecimal getCONFIRM_NO () {
					return this.CONFIRM_NO;
				}
				
			    public String CONTAINER_GROUP_ID;

				public String getCONTAINER_GROUP_ID () {
					return this.CONTAINER_GROUP_ID;
				}
				
			    public String SEPARATE_CONTAINER_FLAG;

				public String getSEPARATE_CONTAINER_FLAG () {
					return this.SEPARATE_CONTAINER_FLAG;
				}
				
			    public String CREATED_TIMESTAMP;

				public String getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public String UPDATED_TIMESTAMP;

				public String getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
						this.ORDER_NO = (BigDecimal) dis.readObject();
					
					this.ORDER_TYPE = readString(dis);
					
					this.SHIP_TO_CUST = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.NATIONAL_ACCOUNT_NO = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.CUSTOMER_CATEGORY_CODE = readString(dis);
					
						this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();
					
					this.ALLOCATION_TYPE = readString(dis);
					
					this.ROUTE_TO_NO = readString(dis);
					
					this.ROUTE_NO = readString(dis);
					
					this.WILL_CALL_NAME = readString(dis);
					
						this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();
					
					this.SEPARATE_INVOICE = readString(dis);
					
					this.ORDER_DATE = readString(dis);
					
					this.SHIP_OR_PICKUP_DATE = readString(dis);
					
					this.NEXT_ORDER_INDICATOR = readString(dis);
					
					this.CONFIRMATION_NO = readString(dis);
					
					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);
					
					this.ORDER_STATUS_CODE = readString(dis);
					
						this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();
					
						this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();
					
						this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.ORDER_TOTAL = (BigDecimal) dis.readObject();
					
						this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();
					
						this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();
					
					this.RECORD_TYPE_INDICATOR = readString(dis);
					
					this.DELIVERY_METHOD = readString(dis);
					
						this.MANIFEST_NO = (BigDecimal) dis.readObject();
					
					this.IMMEDIATE_ORDER_FLAG = readString(dis);
					
						this.BOOKING_ID = (BigDecimal) dis.readObject();
					
					this.INCOMPLETE_ORDER_FLAG = readString(dis);
					
					this.FOODSHOW_PROMOTION_ID = readString(dis);
					
					this.LAPTOP_ORDER_DATE = readString(dis);
					
					this.ACCOUNT_NO = readString(dis);
					
					this.USER_FIELD_1 = readString(dis);
					
					this.DELIVERY_DATE = readString(dis);
					
					this.EMPLOYEE_NO = readString(dis);
					
					this.RESHIP_STATUS = readString(dis);
					
					this.HOLD_ORDER_FLAG = readString(dis);
					
					this.RELEASE_ORDER_FLAG = readString(dis);
					
					this.HOLD_ORDER_REASON_CODE = readString(dis);
					
					this.RELEASE_ORDER_REASON_CODE = readString(dis);
					
						this.TAX_AMOUNT = (BigDecimal) dis.readObject();
					
					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);
					
					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);
					
						this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();
					
					this.FAX_NO = readString(dis);
					
					this.PRIMARY_MA = readString(dis);
					
						this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();
					
						this.CALL_END_TIME = (BigDecimal) dis.readObject();
					
					this.CALL_START_TIME_INDICATOR = readString(dis);
					
					this.CALL_END_TIME_INDICATOR = readString(dis);
					
					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);
					
					this.ERROR_STATUS_FLAG = readString(dis);
					
					this.REQUEST_STATUS_FLAG = readString(dis);
					
						this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();
					
					this.ENTITY_ID = readString(dis);
					
					this.PARENT_ENTITY_1 = readString(dis);
					
					this.PARENT_ENTITY_2 = readString(dis);
					
					this.PARENT_ENTITY_3 = readString(dis);
					
					this.CANCEL_DATE = readString(dis);
					
						this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.CREATE_TARGET_INDICATOR = readString(dis);
					
					this.VENDOR_APPROVAL_NO = readString(dis);
					
					this.REQUESTED_BY = readString(dis);
					
					this.TARGET_DESC = readString(dis);
					
					this.BILL_BACK_VENDOR_FLAG = readString(dis);
					
						this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();
					
					this.RETURN_AUTH_NO = readString(dis);
					
					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);
					
					this.LAPTOP_USER_FLAG = readString(dis);
					
						this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.LAPTOP_ZID_NO = readString(dis);
					
						this.STOP_NO = (BigDecimal) dis.readObject();
					
					this.ENTITY_UPDATED_FLAG = readString(dis);
					
					this.MAJOR_CLASS = readString(dis);
					
					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);
					
					this.DEFAULT_ROUTE_NO = readString(dis);
					
						this.CONFIRM_NO = (BigDecimal) dis.readObject();
					
					this.CONTAINER_GROUP_ID = readString(dis);
					
					this.SEPARATE_CONTAINER_FLAG = readString(dis);
					
					this.CREATED_TIMESTAMP = readString(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
						this.ORDER_NO = (BigDecimal) dis.readObject();
					
					this.ORDER_TYPE = readString(dis);
					
					this.SHIP_TO_CUST = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.NATIONAL_ACCOUNT_NO = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.CUSTOMER_CATEGORY_CODE = readString(dis);
					
						this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();
					
					this.ALLOCATION_TYPE = readString(dis);
					
					this.ROUTE_TO_NO = readString(dis);
					
					this.ROUTE_NO = readString(dis);
					
					this.WILL_CALL_NAME = readString(dis);
					
						this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();
					
					this.SEPARATE_INVOICE = readString(dis);
					
					this.ORDER_DATE = readString(dis);
					
					this.SHIP_OR_PICKUP_DATE = readString(dis);
					
					this.NEXT_ORDER_INDICATOR = readString(dis);
					
					this.CONFIRMATION_NO = readString(dis);
					
					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);
					
					this.ORDER_STATUS_CODE = readString(dis);
					
						this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();
					
						this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();
					
						this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.ORDER_TOTAL = (BigDecimal) dis.readObject();
					
						this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();
					
						this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();
					
					this.RECORD_TYPE_INDICATOR = readString(dis);
					
					this.DELIVERY_METHOD = readString(dis);
					
						this.MANIFEST_NO = (BigDecimal) dis.readObject();
					
					this.IMMEDIATE_ORDER_FLAG = readString(dis);
					
						this.BOOKING_ID = (BigDecimal) dis.readObject();
					
					this.INCOMPLETE_ORDER_FLAG = readString(dis);
					
					this.FOODSHOW_PROMOTION_ID = readString(dis);
					
					this.LAPTOP_ORDER_DATE = readString(dis);
					
					this.ACCOUNT_NO = readString(dis);
					
					this.USER_FIELD_1 = readString(dis);
					
					this.DELIVERY_DATE = readString(dis);
					
					this.EMPLOYEE_NO = readString(dis);
					
					this.RESHIP_STATUS = readString(dis);
					
					this.HOLD_ORDER_FLAG = readString(dis);
					
					this.RELEASE_ORDER_FLAG = readString(dis);
					
					this.HOLD_ORDER_REASON_CODE = readString(dis);
					
					this.RELEASE_ORDER_REASON_CODE = readString(dis);
					
						this.TAX_AMOUNT = (BigDecimal) dis.readObject();
					
					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);
					
					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);
					
						this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();
					
					this.FAX_NO = readString(dis);
					
					this.PRIMARY_MA = readString(dis);
					
						this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();
					
						this.CALL_END_TIME = (BigDecimal) dis.readObject();
					
					this.CALL_START_TIME_INDICATOR = readString(dis);
					
					this.CALL_END_TIME_INDICATOR = readString(dis);
					
					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);
					
					this.ERROR_STATUS_FLAG = readString(dis);
					
					this.REQUEST_STATUS_FLAG = readString(dis);
					
						this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();
					
					this.ENTITY_ID = readString(dis);
					
					this.PARENT_ENTITY_1 = readString(dis);
					
					this.PARENT_ENTITY_2 = readString(dis);
					
					this.PARENT_ENTITY_3 = readString(dis);
					
					this.CANCEL_DATE = readString(dis);
					
						this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.CREATE_TARGET_INDICATOR = readString(dis);
					
					this.VENDOR_APPROVAL_NO = readString(dis);
					
					this.REQUESTED_BY = readString(dis);
					
					this.TARGET_DESC = readString(dis);
					
					this.BILL_BACK_VENDOR_FLAG = readString(dis);
					
						this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();
					
					this.RETURN_AUTH_NO = readString(dis);
					
					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);
					
					this.LAPTOP_USER_FLAG = readString(dis);
					
						this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.LAPTOP_ZID_NO = readString(dis);
					
						this.STOP_NO = (BigDecimal) dis.readObject();
					
					this.ENTITY_UPDATED_FLAG = readString(dis);
					
					this.MAJOR_CLASS = readString(dis);
					
					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);
					
					this.DEFAULT_ROUTE_NO = readString(dis);
					
						this.CONFIRM_NO = (BigDecimal) dis.readObject();
					
					this.CONTAINER_GROUP_ID = readString(dis);
					
					this.SEPARATE_CONTAINER_FLAG = readString(dis);
					
					this.CREATED_TIMESTAMP = readString(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_NO);
					
					// String
				
						writeString(this.ORDER_TYPE,dos);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.NATIONAL_ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.CUSTOMER_CATEGORY_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ROUTING_GROUP_CODE);
					
					// String
				
						writeString(this.ALLOCATION_TYPE,dos);
					
					// String
				
						writeString(this.ROUTE_TO_NO,dos);
					
					// String
				
						writeString(this.ROUTE_NO,dos);
					
					// String
				
						writeString(this.WILL_CALL_NAME,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.WILL_CALL_START_TIME);
					
					// String
				
						writeString(this.SEPARATE_INVOICE,dos);
					
					// String
				
						writeString(this.ORDER_DATE,dos);
					
					// String
				
						writeString(this.SHIP_OR_PICKUP_DATE,dos);
					
					// String
				
						writeString(this.NEXT_ORDER_INDICATOR,dos);
					
					// String
				
						writeString(this.CONFIRMATION_NO,dos);
					
					// String
				
						writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG,dos);
					
					// String
				
						writeString(this.ORDER_STATUS_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREEZER_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREEZER_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_COOLER_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_COOLER_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DRY_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DRY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NO_CASES_ORDER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_ORDER_WEIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_GRAND_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_ENTRY_TIME);
					
					// String
				
						writeString(this.RECORD_TYPE_INDICATOR,dos);
					
					// String
				
						writeString(this.DELIVERY_METHOD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MANIFEST_NO);
					
					// String
				
						writeString(this.IMMEDIATE_ORDER_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BOOKING_ID);
					
					// String
				
						writeString(this.INCOMPLETE_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.FOODSHOW_PROMOTION_ID,dos);
					
					// String
				
						writeString(this.LAPTOP_ORDER_DATE,dos);
					
					// String
				
						writeString(this.ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.USER_FIELD_1,dos);
					
					// String
				
						writeString(this.DELIVERY_DATE,dos);
					
					// String
				
						writeString(this.EMPLOYEE_NO,dos);
					
					// String
				
						writeString(this.RESHIP_STATUS,dos);
					
					// String
				
						writeString(this.HOLD_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.RELEASE_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.HOLD_ORDER_REASON_CODE,dos);
					
					// String
				
						writeString(this.RELEASE_ORDER_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TAX_AMOUNT);
					
					// String
				
						writeString(this.SEND_IMMEDIATE_ORDER_ROUTING,dos);
					
					// String
				
						writeString(this.REMOTE_ORDER_ENTRY_MODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);
					
					// String
				
						writeString(this.FAX_NO,dos);
					
					// String
				
						writeString(this.PRIMARY_MA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERIC_LAST_USED_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CALL_END_TIME);
					
					// String
				
						writeString(this.CALL_START_TIME_INDICATOR,dos);
					
					// String
				
						writeString(this.CALL_END_TIME_INDICATOR,dos);
					
					// String
				
						writeString(this.RECORD_LOGICALLY_LOCKED_FLAG,dos);
					
					// String
				
						writeString(this.ERROR_STATUS_FLAG,dos);
					
					// String
				
						writeString(this.REQUEST_STATUS_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_DETAIL_LINE_NO);
					
					// String
				
						writeString(this.ENTITY_ID,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_1,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_2,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_3,dos);
					
					// String
				
						writeString(this.CANCEL_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICE_ORDER_NO);
					
					// String
				
						writeString(this.CREATE_TARGET_INDICATOR,dos);
					
					// String
				
						writeString(this.VENDOR_APPROVAL_NO,dos);
					
					// String
				
						writeString(this.REQUESTED_BY,dos);
					
					// String
				
						writeString(this.TARGET_DESC,dos);
					
					// String
				
						writeString(this.BILL_BACK_VENDOR_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_OF_AP_ROLL_DAYS);
					
					// String
				
						writeString(this.RETURN_AUTH_NO,dos);
					
					// String
				
						writeString(this.DISPENSER_EQUIPMENT_ITEM,dos);
					
					// String
				
						writeString(this.LAPTOP_USER_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAPTOP_ORDER_NO);
					
					// String
				
						writeString(this.LAPTOP_ZID_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.STOP_NO);
					
					// String
				
						writeString(this.ENTITY_UPDATED_FLAG,dos);
					
					// String
				
						writeString(this.MAJOR_CLASS,dos);
					
					// String
				
						writeString(this.SWMS_RECOVERY_INVOICE_NO,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRM_NO);
					
					// String
				
						writeString(this.CONTAINER_GROUP_ID,dos);
					
					// String
				
						writeString(this.SEPARATE_CONTAINER_FLAG,dos);
					
					// String
				
						writeString(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_NO);
					
					// String
				
						writeString(this.ORDER_TYPE,dos);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.NATIONAL_ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.CUSTOMER_CATEGORY_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ROUTING_GROUP_CODE);
					
					// String
				
						writeString(this.ALLOCATION_TYPE,dos);
					
					// String
				
						writeString(this.ROUTE_TO_NO,dos);
					
					// String
				
						writeString(this.ROUTE_NO,dos);
					
					// String
				
						writeString(this.WILL_CALL_NAME,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.WILL_CALL_START_TIME);
					
					// String
				
						writeString(this.SEPARATE_INVOICE,dos);
					
					// String
				
						writeString(this.ORDER_DATE,dos);
					
					// String
				
						writeString(this.SHIP_OR_PICKUP_DATE,dos);
					
					// String
				
						writeString(this.NEXT_ORDER_INDICATOR,dos);
					
					// String
				
						writeString(this.CONFIRMATION_NO,dos);
					
					// String
				
						writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG,dos);
					
					// String
				
						writeString(this.ORDER_STATUS_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREEZER_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREEZER_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_COOLER_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_COOLER_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DRY_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DRY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NO_CASES_ORDER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_ORDER_WEIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_GRAND_TOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_ENTRY_TIME);
					
					// String
				
						writeString(this.RECORD_TYPE_INDICATOR,dos);
					
					// String
				
						writeString(this.DELIVERY_METHOD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MANIFEST_NO);
					
					// String
				
						writeString(this.IMMEDIATE_ORDER_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BOOKING_ID);
					
					// String
				
						writeString(this.INCOMPLETE_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.FOODSHOW_PROMOTION_ID,dos);
					
					// String
				
						writeString(this.LAPTOP_ORDER_DATE,dos);
					
					// String
				
						writeString(this.ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.USER_FIELD_1,dos);
					
					// String
				
						writeString(this.DELIVERY_DATE,dos);
					
					// String
				
						writeString(this.EMPLOYEE_NO,dos);
					
					// String
				
						writeString(this.RESHIP_STATUS,dos);
					
					// String
				
						writeString(this.HOLD_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.RELEASE_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.HOLD_ORDER_REASON_CODE,dos);
					
					// String
				
						writeString(this.RELEASE_ORDER_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TAX_AMOUNT);
					
					// String
				
						writeString(this.SEND_IMMEDIATE_ORDER_ROUTING,dos);
					
					// String
				
						writeString(this.REMOTE_ORDER_ENTRY_MODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);
					
					// String
				
						writeString(this.FAX_NO,dos);
					
					// String
				
						writeString(this.PRIMARY_MA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GENERIC_LAST_USED_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CALL_END_TIME);
					
					// String
				
						writeString(this.CALL_START_TIME_INDICATOR,dos);
					
					// String
				
						writeString(this.CALL_END_TIME_INDICATOR,dos);
					
					// String
				
						writeString(this.RECORD_LOGICALLY_LOCKED_FLAG,dos);
					
					// String
				
						writeString(this.ERROR_STATUS_FLAG,dos);
					
					// String
				
						writeString(this.REQUEST_STATUS_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_DETAIL_LINE_NO);
					
					// String
				
						writeString(this.ENTITY_ID,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_1,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_2,dos);
					
					// String
				
						writeString(this.PARENT_ENTITY_3,dos);
					
					// String
				
						writeString(this.CANCEL_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICE_ORDER_NO);
					
					// String
				
						writeString(this.CREATE_TARGET_INDICATOR,dos);
					
					// String
				
						writeString(this.VENDOR_APPROVAL_NO,dos);
					
					// String
				
						writeString(this.REQUESTED_BY,dos);
					
					// String
				
						writeString(this.TARGET_DESC,dos);
					
					// String
				
						writeString(this.BILL_BACK_VENDOR_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_OF_AP_ROLL_DAYS);
					
					// String
				
						writeString(this.RETURN_AUTH_NO,dos);
					
					// String
				
						writeString(this.DISPENSER_EQUIPMENT_ITEM,dos);
					
					// String
				
						writeString(this.LAPTOP_USER_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAPTOP_ORDER_NO);
					
					// String
				
						writeString(this.LAPTOP_ZID_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.STOP_NO);
					
					// String
				
						writeString(this.ENTITY_UPDATED_FLAG,dos);
					
					// String
				
						writeString(this.MAJOR_CLASS,dos);
					
					// String
				
						writeString(this.SWMS_RECOVERY_INVOICE_NO,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRM_NO);
					
					// String
				
						writeString(this.CONTAINER_GROUP_ID,dos);
					
					// String
				
						writeString(this.SEPARATE_CONTAINER_FLAG,dos);
					
					// String
				
						writeString(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",ORDER_NO="+String.valueOf(ORDER_NO));
		sb.append(",ORDER_TYPE="+ORDER_TYPE);
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",SHIPPING_ADDRESS_ID="+SHIPPING_ADDRESS_ID);
		sb.append(",NATIONAL_ACCOUNT_NO="+NATIONAL_ACCOUNT_NO);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",CUSTOMER_CATEGORY_CODE="+CUSTOMER_CATEGORY_CODE);
		sb.append(",ROUTING_GROUP_CODE="+String.valueOf(ROUTING_GROUP_CODE));
		sb.append(",ALLOCATION_TYPE="+ALLOCATION_TYPE);
		sb.append(",ROUTE_TO_NO="+ROUTE_TO_NO);
		sb.append(",ROUTE_NO="+ROUTE_NO);
		sb.append(",WILL_CALL_NAME="+WILL_CALL_NAME);
		sb.append(",WILL_CALL_START_TIME="+String.valueOf(WILL_CALL_START_TIME));
		sb.append(",SEPARATE_INVOICE="+SEPARATE_INVOICE);
		sb.append(",ORDER_DATE="+ORDER_DATE);
		sb.append(",SHIP_OR_PICKUP_DATE="+SHIP_OR_PICKUP_DATE);
		sb.append(",NEXT_ORDER_INDICATOR="+NEXT_ORDER_INDICATOR);
		sb.append(",CONFIRMATION_NO="+CONFIRMATION_NO);
		sb.append(",ORDER_CONFIRMATION_PRINTED_FLAG="+ORDER_CONFIRMATION_PRINTED_FLAG);
		sb.append(",ORDER_STATUS_CODE="+ORDER_STATUS_CODE);
		sb.append(",TOTAL_FREEZER_CASES="+String.valueOf(TOTAL_FREEZER_CASES));
		sb.append(",TOTAL_FREEZER_SPLITS="+String.valueOf(TOTAL_FREEZER_SPLITS));
		sb.append(",TOTAL_COOLER_CASES="+String.valueOf(TOTAL_COOLER_CASES));
		sb.append(",TOTAL_COOLER_SPLITS="+String.valueOf(TOTAL_COOLER_SPLITS));
		sb.append(",TOTAL_DRY_CASES="+String.valueOf(TOTAL_DRY_CASES));
		sb.append(",TOTAL_DRY_SPLITS="+String.valueOf(TOTAL_DRY_SPLITS));
		sb.append(",TOTAL_NO_CASES_ORDER="+String.valueOf(TOTAL_NO_CASES_ORDER));
		sb.append(",TOTAL_NO_SPLITS_ORDER="+String.valueOf(TOTAL_NO_SPLITS_ORDER));
		sb.append(",TOTAL_ORDER_WEIGHT="+String.valueOf(TOTAL_ORDER_WEIGHT));
		sb.append(",TOTAL_CUBE="+String.valueOf(TOTAL_CUBE));
		sb.append(",TOTAL_LINES="+String.valueOf(TOTAL_LINES));
		sb.append(",ORDER_TOTAL="+String.valueOf(ORDER_TOTAL));
		sb.append(",ORDER_GRAND_TOTAL="+String.valueOf(ORDER_GRAND_TOTAL));
		sb.append(",ORDER_ENTRY_TIME="+String.valueOf(ORDER_ENTRY_TIME));
		sb.append(",RECORD_TYPE_INDICATOR="+RECORD_TYPE_INDICATOR);
		sb.append(",DELIVERY_METHOD="+DELIVERY_METHOD);
		sb.append(",MANIFEST_NO="+String.valueOf(MANIFEST_NO));
		sb.append(",IMMEDIATE_ORDER_FLAG="+IMMEDIATE_ORDER_FLAG);
		sb.append(",BOOKING_ID="+String.valueOf(BOOKING_ID));
		sb.append(",INCOMPLETE_ORDER_FLAG="+INCOMPLETE_ORDER_FLAG);
		sb.append(",FOODSHOW_PROMOTION_ID="+FOODSHOW_PROMOTION_ID);
		sb.append(",LAPTOP_ORDER_DATE="+LAPTOP_ORDER_DATE);
		sb.append(",ACCOUNT_NO="+ACCOUNT_NO);
		sb.append(",USER_FIELD_1="+USER_FIELD_1);
		sb.append(",DELIVERY_DATE="+DELIVERY_DATE);
		sb.append(",EMPLOYEE_NO="+EMPLOYEE_NO);
		sb.append(",RESHIP_STATUS="+RESHIP_STATUS);
		sb.append(",HOLD_ORDER_FLAG="+HOLD_ORDER_FLAG);
		sb.append(",RELEASE_ORDER_FLAG="+RELEASE_ORDER_FLAG);
		sb.append(",HOLD_ORDER_REASON_CODE="+HOLD_ORDER_REASON_CODE);
		sb.append(",RELEASE_ORDER_REASON_CODE="+RELEASE_ORDER_REASON_CODE);
		sb.append(",TAX_AMOUNT="+String.valueOf(TAX_AMOUNT));
		sb.append(",SEND_IMMEDIATE_ORDER_ROUTING="+SEND_IMMEDIATE_ORDER_ROUTING);
		sb.append(",REMOTE_ORDER_ENTRY_MODE="+REMOTE_ORDER_ENTRY_MODE);
		sb.append(",REMOTE_ORDER_CONFIRMATION_NO="+String.valueOf(REMOTE_ORDER_CONFIRMATION_NO));
		sb.append(",FAX_NO="+FAX_NO);
		sb.append(",PRIMARY_MA="+PRIMARY_MA);
		sb.append(",GENERIC_LAST_USED_NO="+String.valueOf(GENERIC_LAST_USED_NO));
		sb.append(",CALL_END_TIME="+String.valueOf(CALL_END_TIME));
		sb.append(",CALL_START_TIME_INDICATOR="+CALL_START_TIME_INDICATOR);
		sb.append(",CALL_END_TIME_INDICATOR="+CALL_END_TIME_INDICATOR);
		sb.append(",RECORD_LOGICALLY_LOCKED_FLAG="+RECORD_LOGICALLY_LOCKED_FLAG);
		sb.append(",ERROR_STATUS_FLAG="+ERROR_STATUS_FLAG);
		sb.append(",REQUEST_STATUS_FLAG="+REQUEST_STATUS_FLAG);
		sb.append(",ORDER_DETAIL_LINE_NO="+String.valueOf(ORDER_DETAIL_LINE_NO));
		sb.append(",ENTITY_ID="+ENTITY_ID);
		sb.append(",PARENT_ENTITY_1="+PARENT_ENTITY_1);
		sb.append(",PARENT_ENTITY_2="+PARENT_ENTITY_2);
		sb.append(",PARENT_ENTITY_3="+PARENT_ENTITY_3);
		sb.append(",CANCEL_DATE="+CANCEL_DATE);
		sb.append(",SERVICE_ORDER_NO="+String.valueOf(SERVICE_ORDER_NO));
		sb.append(",CREATE_TARGET_INDICATOR="+CREATE_TARGET_INDICATOR);
		sb.append(",VENDOR_APPROVAL_NO="+VENDOR_APPROVAL_NO);
		sb.append(",REQUESTED_BY="+REQUESTED_BY);
		sb.append(",TARGET_DESC="+TARGET_DESC);
		sb.append(",BILL_BACK_VENDOR_FLAG="+BILL_BACK_VENDOR_FLAG);
		sb.append(",NO_OF_AP_ROLL_DAYS="+String.valueOf(NO_OF_AP_ROLL_DAYS));
		sb.append(",RETURN_AUTH_NO="+RETURN_AUTH_NO);
		sb.append(",DISPENSER_EQUIPMENT_ITEM="+DISPENSER_EQUIPMENT_ITEM);
		sb.append(",LAPTOP_USER_FLAG="+LAPTOP_USER_FLAG);
		sb.append(",LAPTOP_ORDER_NO="+String.valueOf(LAPTOP_ORDER_NO));
		sb.append(",LAPTOP_ZID_NO="+LAPTOP_ZID_NO);
		sb.append(",STOP_NO="+String.valueOf(STOP_NO));
		sb.append(",ENTITY_UPDATED_FLAG="+ENTITY_UPDATED_FLAG);
		sb.append(",MAJOR_CLASS="+MAJOR_CLASS);
		sb.append(",SWMS_RECOVERY_INVOICE_NO="+SWMS_RECOVERY_INVOICE_NO);
		sb.append(",DEFAULT_ROUTE_NO="+DEFAULT_ROUTE_NO);
		sb.append(",CONFIRM_NO="+String.valueOf(CONFIRM_NO));
		sb.append(",CONTAINER_GROUP_ID="+CONTAINER_GROUP_ID);
		sb.append(",SEPARATE_CONTAINER_FLAG="+SEPARATE_CONTAINER_FLAG);
		sb.append(",CREATED_TIMESTAMP="+CREATED_TIMESTAMP);
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+UPDATED_TIMESTAMP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_TO_CUST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_TO_CUST);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPPING_ADDRESS_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPPING_ADDRESS_ID);
            			}
            		
        			sb.append("|");
        		
        				if(NATIONAL_ACCOUNT_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NATIONAL_ACCOUNT_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PURCHASE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PURCHASE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CUSTOMER_CATEGORY_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUSTOMER_CATEGORY_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(ROUTING_GROUP_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ROUTING_GROUP_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(ALLOCATION_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ALLOCATION_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ROUTE_TO_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ROUTE_TO_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ROUTE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ROUTE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(WILL_CALL_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WILL_CALL_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(WILL_CALL_START_TIME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WILL_CALL_START_TIME);
            			}
            		
        			sb.append("|");
        		
        				if(SEPARATE_INVOICE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEPARATE_INVOICE);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_OR_PICKUP_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_OR_PICKUP_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(NEXT_ORDER_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NEXT_ORDER_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMATION_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMATION_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_CONFIRMATION_PRINTED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_CONFIRMATION_PRINTED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_STATUS_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_STATUS_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_FREEZER_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_FREEZER_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_FREEZER_SPLITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_FREEZER_SPLITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_COOLER_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_COOLER_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_COOLER_SPLITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_COOLER_SPLITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_DRY_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_DRY_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_DRY_SPLITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_DRY_SPLITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_NO_CASES_ORDER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_NO_CASES_ORDER);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_NO_SPLITS_ORDER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_NO_SPLITS_ORDER);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_ORDER_WEIGHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_ORDER_WEIGHT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_LINES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_LINES);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_TOTAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_TOTAL);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_GRAND_TOTAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_GRAND_TOTAL);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_ENTRY_TIME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_ENTRY_TIME);
            			}
            		
        			sb.append("|");
        		
        				if(RECORD_TYPE_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECORD_TYPE_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(DELIVERY_METHOD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DELIVERY_METHOD);
            			}
            		
        			sb.append("|");
        		
        				if(MANIFEST_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MANIFEST_NO);
            			}
            		
        			sb.append("|");
        		
        				if(IMMEDIATE_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IMMEDIATE_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(BOOKING_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BOOKING_ID);
            			}
            		
        			sb.append("|");
        		
        				if(INCOMPLETE_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INCOMPLETE_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(FOODSHOW_PROMOTION_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FOODSHOW_PROMOTION_ID);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_ORDER_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_ORDER_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(ACCOUNT_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACCOUNT_NO);
            			}
            		
        			sb.append("|");
        		
        				if(USER_FIELD_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(USER_FIELD_1);
            			}
            		
        			sb.append("|");
        		
        				if(DELIVERY_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DELIVERY_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(EMPLOYEE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EMPLOYEE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(RESHIP_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESHIP_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(HOLD_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HOLD_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(RELEASE_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RELEASE_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(HOLD_ORDER_REASON_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HOLD_ORDER_REASON_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(RELEASE_ORDER_REASON_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RELEASE_ORDER_REASON_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(TAX_AMOUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TAX_AMOUNT);
            			}
            		
        			sb.append("|");
        		
        				if(SEND_IMMEDIATE_ORDER_ROUTING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEND_IMMEDIATE_ORDER_ROUTING);
            			}
            		
        			sb.append("|");
        		
        				if(REMOTE_ORDER_ENTRY_MODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REMOTE_ORDER_ENTRY_MODE);
            			}
            		
        			sb.append("|");
        		
        				if(REMOTE_ORDER_CONFIRMATION_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REMOTE_ORDER_CONFIRMATION_NO);
            			}
            		
        			sb.append("|");
        		
        				if(FAX_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FAX_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PRIMARY_MA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRIMARY_MA);
            			}
            		
        			sb.append("|");
        		
        				if(GENERIC_LAST_USED_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(GENERIC_LAST_USED_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CALL_END_TIME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALL_END_TIME);
            			}
            		
        			sb.append("|");
        		
        				if(CALL_START_TIME_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALL_START_TIME_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(CALL_END_TIME_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALL_END_TIME_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(RECORD_LOGICALLY_LOCKED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECORD_LOGICALLY_LOCKED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ERROR_STATUS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ERROR_STATUS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(REQUEST_STATUS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REQUEST_STATUS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_DETAIL_LINE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_DETAIL_LINE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ENTITY_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ENTITY_ID);
            			}
            		
        			sb.append("|");
        		
        				if(PARENT_ENTITY_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARENT_ENTITY_1);
            			}
            		
        			sb.append("|");
        		
        				if(PARENT_ENTITY_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARENT_ENTITY_2);
            			}
            		
        			sb.append("|");
        		
        				if(PARENT_ENTITY_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARENT_ENTITY_3);
            			}
            		
        			sb.append("|");
        		
        				if(CANCEL_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CANCEL_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(SERVICE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SERVICE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CREATE_TARGET_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATE_TARGET_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_APPROVAL_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_APPROVAL_NO);
            			}
            		
        			sb.append("|");
        		
        				if(REQUESTED_BY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REQUESTED_BY);
            			}
            		
        			sb.append("|");
        		
        				if(TARGET_DESC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TARGET_DESC);
            			}
            		
        			sb.append("|");
        		
        				if(BILL_BACK_VENDOR_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BILL_BACK_VENDOR_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(NO_OF_AP_ROLL_DAYS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_OF_AP_ROLL_DAYS);
            			}
            		
        			sb.append("|");
        		
        				if(RETURN_AUTH_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RETURN_AUTH_NO);
            			}
            		
        			sb.append("|");
        		
        				if(DISPENSER_EQUIPMENT_ITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISPENSER_EQUIPMENT_ITEM);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_USER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_USER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_ZID_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_ZID_NO);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ENTITY_UPDATED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ENTITY_UPDATED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(MAJOR_CLASS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAJOR_CLASS);
            			}
            		
        			sb.append("|");
        		
        				if(SWMS_RECOVERY_INVOICE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SWMS_RECOVERY_INVOICE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_ROUTE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_ROUTE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRM_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRM_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CONTAINER_GROUP_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONTAINER_GROUP_ID);
            			}
            		
        			sb.append("|");
        		
        				if(SEPARATE_CONTAINER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEPARATE_CONTAINER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(IS_DELETED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_DELETED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

	
			    public BigDecimal B6ORNO;

				public BigDecimal getB6ORNO () {
					return this.B6ORNO;
				}
				
			    public String B6ORTY;

				public String getB6ORTY () {
					return this.B6ORTY;
				}
				
			    public String B6CUNO;

				public String getB6CUNO () {
					return this.B6CUNO;
				}
				
			    public String B6SADD;

				public String getB6SADD () {
					return this.B6SADD;
				}
				
			    public String B6NANO;

				public String getB6NANO () {
					return this.B6NANO;
				}
				
			    public String B6PONU;

				public String getB6PONU () {
					return this.B6PONU;
				}
				
			    public String B6CATG;

				public String getB6CATG () {
					return this.B6CATG;
				}
				
			    public BigDecimal B6TZNU;

				public BigDecimal getB6TZNU () {
					return this.B6TZNU;
				}
				
			    public String B6ALTY;

				public String getB6ALTY () {
					return this.B6ALTY;
				}
				
			    public String B6RTNO;

				public String getB6RTNO () {
					return this.B6RTNO;
				}
				
			    public String B6RTNU;

				public String getB6RTNU () {
					return this.B6RTNU;
				}
				
			    public String B6WCNM;

				public String getB6WCNM () {
					return this.B6WCNM;
				}
				
			    public BigDecimal B6WCTM;

				public BigDecimal getB6WCTM () {
					return this.B6WCTM;
				}
				
			    public String B6SEIN;

				public String getB6SEIN () {
					return this.B6SEIN;
				}
				
			    public BigDecimal B6ORDT;

				public BigDecimal getB6ORDT () {
					return this.B6ORDT;
				}
				
			    public BigDecimal B6SHDT;

				public BigDecimal getB6SHDT () {
					return this.B6SHDT;
				}
				
			    public String B6WNOI;

				public String getB6WNOI () {
					return this.B6WNOI;
				}
				
			    public String B6TCFN;

				public String getB6TCFN () {
					return this.B6TCFN;
				}
				
			    public String B6OCFP;

				public String getB6OCFP () {
					return this.B6OCFP;
				}
				
			    public String B6ORST;

				public String getB6ORST () {
					return this.B6ORST;
				}
				
			    public BigDecimal B6TFZC;

				public BigDecimal getB6TFZC () {
					return this.B6TFZC;
				}
				
			    public BigDecimal B6TFZS;

				public BigDecimal getB6TFZS () {
					return this.B6TFZS;
				}
				
			    public BigDecimal B6TCLC;

				public BigDecimal getB6TCLC () {
					return this.B6TCLC;
				}
				
			    public BigDecimal B6TCLS;

				public BigDecimal getB6TCLS () {
					return this.B6TCLS;
				}
				
			    public BigDecimal B6TDRC;

				public BigDecimal getB6TDRC () {
					return this.B6TDRC;
				}
				
			    public BigDecimal B6TDRS;

				public BigDecimal getB6TDRS () {
					return this.B6TDRS;
				}
				
			    public BigDecimal B6TTNC;

				public BigDecimal getB6TTNC () {
					return this.B6TTNC;
				}
				
			    public BigDecimal B6TTSP;

				public BigDecimal getB6TTSP () {
					return this.B6TTSP;
				}
				
			    public BigDecimal B6TTOW;

				public BigDecimal getB6TTOW () {
					return this.B6TTOW;
				}
				
			    public BigDecimal B6TTOC;

				public BigDecimal getB6TTOC () {
					return this.B6TTOC;
				}
				
			    public BigDecimal B6TTL1;

				public BigDecimal getB6TTL1 () {
					return this.B6TTL1;
				}
				
			    public BigDecimal B6TTOR;

				public BigDecimal getB6TTOR () {
					return this.B6TTOR;
				}
				
			    public BigDecimal B6TTOG;

				public BigDecimal getB6TTOG () {
					return this.B6TTOG;
				}
				
			    public BigDecimal B6ORTM;

				public BigDecimal getB6ORTM () {
					return this.B6ORTM;
				}
				
			    public String B6BTRT;

				public String getB6BTRT () {
					return this.B6BTRT;
				}
				
			    public String B6DELM;

				public String getB6DELM () {
					return this.B6DELM;
				}
				
			    public BigDecimal B6MNFS;

				public BigDecimal getB6MNFS () {
					return this.B6MNFS;
				}
				
			    public String B6IOFL;

				public String getB6IOFL () {
					return this.B6IOFL;
				}
				
			    public BigDecimal B6BOKI;

				public BigDecimal getB6BOKI () {
					return this.B6BOKI;
				}
				
			    public String B6IORF;

				public String getB6IORF () {
					return this.B6IORF;
				}
				
			    public String B6IDFP;

				public String getB6IDFP () {
					return this.B6IDFP;
				}
				
			    public BigDecimal B6LODT;

				public BigDecimal getB6LODT () {
					return this.B6LODT;
				}
				
			    public String B6ACT1;

				public String getB6ACT1 () {
					return this.B6ACT1;
				}
				
			    public String B6USR1;

				public String getB6USR1 () {
					return this.B6USR1;
				}
				
			    public BigDecimal B6DLDT;

				public BigDecimal getB6DLDT () {
					return this.B6DLDT;
				}
				
			    public String B6EMP;

				public String getB6EMP () {
					return this.B6EMP;
				}
				
			    public String B6STRE;

				public String getB6STRE () {
					return this.B6STRE;
				}
				
			    public String B6HOFL;

				public String getB6HOFL () {
					return this.B6HOFL;
				}
				
			    public String B6ROFL;

				public String getB6ROFL () {
					return this.B6ROFL;
				}
				
			    public String B6HORC;

				public String getB6HORC () {
					return this.B6HORC;
				}
				
			    public String B6RORC;

				public String getB6RORC () {
					return this.B6RORC;
				}
				
			    public BigDecimal B6TXAM;

				public BigDecimal getB6TXAM () {
					return this.B6TXAM;
				}
				
			    public String B6SIOR;

				public String getB6SIOR () {
					return this.B6SIOR;
				}
				
			    public String B6ROEM;

				public String getB6ROEM () {
					return this.B6ROEM;
				}
				
			    public BigDecimal B6RMCN;

				public BigDecimal getB6RMCN () {
					return this.B6RMCN;
				}
				
			    public String B6FAX;

				public String getB6FAX () {
					return this.B6FAX;
				}
				
			    public String B6PRMA;

				public String getB6PRMA () {
					return this.B6PRMA;
				}
				
			    public BigDecimal B6GCNO;

				public BigDecimal getB6GCNO () {
					return this.B6GCNO;
				}
				
			    public BigDecimal B6WCET;

				public BigDecimal getB6WCET () {
					return this.B6WCET;
				}
				
			    public String B6WCST;

				public String getB6WCST () {
					return this.B6WCST;
				}
				
			    public String B6WCEN;

				public String getB6WCEN () {
					return this.B6WCEN;
				}
				
			    public String B6RLLF;

				public String getB6RLLF () {
					return this.B6RLLF;
				}
				
			    public String B6PEFL;

				public String getB6PEFL () {
					return this.B6PEFL;
				}
				
			    public String B6RQSF;

				public String getB6RQSF () {
					return this.B6RQSF;
				}
				
			    public BigDecimal B6ODLN;

				public BigDecimal getB6ODLN () {
					return this.B6ODLN;
				}
				
			    public String B6ENID;

				public String getB6ENID () {
					return this.B6ENID;
				}
				
			    public String B6ENT1;

				public String getB6ENT1 () {
					return this.B6ENT1;
				}
				
			    public String B6ENT2;

				public String getB6ENT2 () {
					return this.B6ENT2;
				}
				
			    public String B6ENT3;

				public String getB6ENT3 () {
					return this.B6ENT3;
				}
				
			    public BigDecimal B6CNDT;

				public BigDecimal getB6CNDT () {
					return this.B6CNDT;
				}
				
			    public BigDecimal B6SORD;

				public BigDecimal getB6SORD () {
					return this.B6SORD;
				}
				
			    public String B6TGCI;

				public String getB6TGCI () {
					return this.B6TGCI;
				}
				
			    public String B6VPAN;

				public String getB6VPAN () {
					return this.B6VPAN;
				}
				
			    public String B6RQBY;

				public String getB6RQBY () {
					return this.B6RQBY;
				}
				
			    public String B6TDES;

				public String getB6TDES () {
					return this.B6TDES;
				}
				
			    public String B6BBVF;

				public String getB6BBVF () {
					return this.B6BBVF;
				}
				
			    public BigDecimal B6APRD;

				public BigDecimal getB6APRD () {
					return this.B6APRD;
				}
				
			    public String B6RANO;

				public String getB6RANO () {
					return this.B6RANO;
				}
				
			    public String B6ITDE;

				public String getB6ITDE () {
					return this.B6ITDE;
				}
				
			    public String B6LTUF;

				public String getB6LTUF () {
					return this.B6LTUF;
				}
				
			    public BigDecimal B6LODN;

				public BigDecimal getB6LODN () {
					return this.B6LODN;
				}
				
			    public String B6LTZN;

				public String getB6LTZN () {
					return this.B6LTZN;
				}
				
			    public BigDecimal B6STOP;

				public BigDecimal getB6STOP () {
					return this.B6STOP;
				}
				
			    public String B6ENUF;

				public String getB6ENUF () {
					return this.B6ENUF;
				}
				
			    public String B6MACL;

				public String getB6MACL () {
					return this.B6MACL;
				}
				
			    public String B6SRIN;

				public String getB6SRIN () {
					return this.B6SRIN;
				}
				
			    public String B6DFRN;

				public String getB6DFRN () {
					return this.B6DFRN;
				}
				
			    public BigDecimal B6M6CN;

				public BigDecimal getB6M6CN () {
					return this.B6M6CN;
				}
				
			    public String B6CNTN;

				public String getB6CNTN () {
					return this.B6CNTN;
				}
				
			    public String B6CTFG;

				public String getB6CTFG () {
					return this.B6CTFG;
				}
				
			    public BigDecimal B6EADT;

				public BigDecimal getB6EADT () {
					return this.B6EADT;
				}
				
			    public BigDecimal B6EATM;

				public BigDecimal getB6EATM () {
					return this.B6EATM;
				}
				
			    public String B6EAID;

				public String getB6EAID () {
					return this.B6EAID;
				}
				
			    public BigDecimal B6MODT;

				public BigDecimal getB6MODT () {
					return this.B6MODT;
				}
				
			    public BigDecimal B6MOTM;

				public BigDecimal getB6MOTM () {
					return this.B6MOTM;
				}
				
			    public String B6MOID;

				public String getB6MOID () {
					return this.B6MOID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
						this.B6ORNO = (BigDecimal) dis.readObject();
					
					this.B6ORTY = readString(dis);
					
					this.B6CUNO = readString(dis);
					
					this.B6SADD = readString(dis);
					
					this.B6NANO = readString(dis);
					
					this.B6PONU = readString(dis);
					
					this.B6CATG = readString(dis);
					
						this.B6TZNU = (BigDecimal) dis.readObject();
					
					this.B6ALTY = readString(dis);
					
					this.B6RTNO = readString(dis);
					
					this.B6RTNU = readString(dis);
					
					this.B6WCNM = readString(dis);
					
						this.B6WCTM = (BigDecimal) dis.readObject();
					
					this.B6SEIN = readString(dis);
					
						this.B6ORDT = (BigDecimal) dis.readObject();
					
						this.B6SHDT = (BigDecimal) dis.readObject();
					
					this.B6WNOI = readString(dis);
					
					this.B6TCFN = readString(dis);
					
					this.B6OCFP = readString(dis);
					
					this.B6ORST = readString(dis);
					
						this.B6TFZC = (BigDecimal) dis.readObject();
					
						this.B6TFZS = (BigDecimal) dis.readObject();
					
						this.B6TCLC = (BigDecimal) dis.readObject();
					
						this.B6TCLS = (BigDecimal) dis.readObject();
					
						this.B6TDRC = (BigDecimal) dis.readObject();
					
						this.B6TDRS = (BigDecimal) dis.readObject();
					
						this.B6TTNC = (BigDecimal) dis.readObject();
					
						this.B6TTSP = (BigDecimal) dis.readObject();
					
						this.B6TTOW = (BigDecimal) dis.readObject();
					
						this.B6TTOC = (BigDecimal) dis.readObject();
					
						this.B6TTL1 = (BigDecimal) dis.readObject();
					
						this.B6TTOR = (BigDecimal) dis.readObject();
					
						this.B6TTOG = (BigDecimal) dis.readObject();
					
						this.B6ORTM = (BigDecimal) dis.readObject();
					
					this.B6BTRT = readString(dis);
					
					this.B6DELM = readString(dis);
					
						this.B6MNFS = (BigDecimal) dis.readObject();
					
					this.B6IOFL = readString(dis);
					
						this.B6BOKI = (BigDecimal) dis.readObject();
					
					this.B6IORF = readString(dis);
					
					this.B6IDFP = readString(dis);
					
						this.B6LODT = (BigDecimal) dis.readObject();
					
					this.B6ACT1 = readString(dis);
					
					this.B6USR1 = readString(dis);
					
						this.B6DLDT = (BigDecimal) dis.readObject();
					
					this.B6EMP = readString(dis);
					
					this.B6STRE = readString(dis);
					
					this.B6HOFL = readString(dis);
					
					this.B6ROFL = readString(dis);
					
					this.B6HORC = readString(dis);
					
					this.B6RORC = readString(dis);
					
						this.B6TXAM = (BigDecimal) dis.readObject();
					
					this.B6SIOR = readString(dis);
					
					this.B6ROEM = readString(dis);
					
						this.B6RMCN = (BigDecimal) dis.readObject();
					
					this.B6FAX = readString(dis);
					
					this.B6PRMA = readString(dis);
					
						this.B6GCNO = (BigDecimal) dis.readObject();
					
						this.B6WCET = (BigDecimal) dis.readObject();
					
					this.B6WCST = readString(dis);
					
					this.B6WCEN = readString(dis);
					
					this.B6RLLF = readString(dis);
					
					this.B6PEFL = readString(dis);
					
					this.B6RQSF = readString(dis);
					
						this.B6ODLN = (BigDecimal) dis.readObject();
					
					this.B6ENID = readString(dis);
					
					this.B6ENT1 = readString(dis);
					
					this.B6ENT2 = readString(dis);
					
					this.B6ENT3 = readString(dis);
					
						this.B6CNDT = (BigDecimal) dis.readObject();
					
						this.B6SORD = (BigDecimal) dis.readObject();
					
					this.B6TGCI = readString(dis);
					
					this.B6VPAN = readString(dis);
					
					this.B6RQBY = readString(dis);
					
					this.B6TDES = readString(dis);
					
					this.B6BBVF = readString(dis);
					
						this.B6APRD = (BigDecimal) dis.readObject();
					
					this.B6RANO = readString(dis);
					
					this.B6ITDE = readString(dis);
					
					this.B6LTUF = readString(dis);
					
						this.B6LODN = (BigDecimal) dis.readObject();
					
					this.B6LTZN = readString(dis);
					
						this.B6STOP = (BigDecimal) dis.readObject();
					
					this.B6ENUF = readString(dis);
					
					this.B6MACL = readString(dis);
					
					this.B6SRIN = readString(dis);
					
					this.B6DFRN = readString(dis);
					
						this.B6M6CN = (BigDecimal) dis.readObject();
					
					this.B6CNTN = readString(dis);
					
					this.B6CTFG = readString(dis);
					
						this.B6EADT = (BigDecimal) dis.readObject();
					
						this.B6EATM = (BigDecimal) dis.readObject();
					
					this.B6EAID = readString(dis);
					
						this.B6MODT = (BigDecimal) dis.readObject();
					
						this.B6MOTM = (BigDecimal) dis.readObject();
					
					this.B6MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

        	try {

        		int length = 0;
		
						this.B6ORNO = (BigDecimal) dis.readObject();
					
					this.B6ORTY = readString(dis);
					
					this.B6CUNO = readString(dis);
					
					this.B6SADD = readString(dis);
					
					this.B6NANO = readString(dis);
					
					this.B6PONU = readString(dis);
					
					this.B6CATG = readString(dis);
					
						this.B6TZNU = (BigDecimal) dis.readObject();
					
					this.B6ALTY = readString(dis);
					
					this.B6RTNO = readString(dis);
					
					this.B6RTNU = readString(dis);
					
					this.B6WCNM = readString(dis);
					
						this.B6WCTM = (BigDecimal) dis.readObject();
					
					this.B6SEIN = readString(dis);
					
						this.B6ORDT = (BigDecimal) dis.readObject();
					
						this.B6SHDT = (BigDecimal) dis.readObject();
					
					this.B6WNOI = readString(dis);
					
					this.B6TCFN = readString(dis);
					
					this.B6OCFP = readString(dis);
					
					this.B6ORST = readString(dis);
					
						this.B6TFZC = (BigDecimal) dis.readObject();
					
						this.B6TFZS = (BigDecimal) dis.readObject();
					
						this.B6TCLC = (BigDecimal) dis.readObject();
					
						this.B6TCLS = (BigDecimal) dis.readObject();
					
						this.B6TDRC = (BigDecimal) dis.readObject();
					
						this.B6TDRS = (BigDecimal) dis.readObject();
					
						this.B6TTNC = (BigDecimal) dis.readObject();
					
						this.B6TTSP = (BigDecimal) dis.readObject();
					
						this.B6TTOW = (BigDecimal) dis.readObject();
					
						this.B6TTOC = (BigDecimal) dis.readObject();
					
						this.B6TTL1 = (BigDecimal) dis.readObject();
					
						this.B6TTOR = (BigDecimal) dis.readObject();
					
						this.B6TTOG = (BigDecimal) dis.readObject();
					
						this.B6ORTM = (BigDecimal) dis.readObject();
					
					this.B6BTRT = readString(dis);
					
					this.B6DELM = readString(dis);
					
						this.B6MNFS = (BigDecimal) dis.readObject();
					
					this.B6IOFL = readString(dis);
					
						this.B6BOKI = (BigDecimal) dis.readObject();
					
					this.B6IORF = readString(dis);
					
					this.B6IDFP = readString(dis);
					
						this.B6LODT = (BigDecimal) dis.readObject();
					
					this.B6ACT1 = readString(dis);
					
					this.B6USR1 = readString(dis);
					
						this.B6DLDT = (BigDecimal) dis.readObject();
					
					this.B6EMP = readString(dis);
					
					this.B6STRE = readString(dis);
					
					this.B6HOFL = readString(dis);
					
					this.B6ROFL = readString(dis);
					
					this.B6HORC = readString(dis);
					
					this.B6RORC = readString(dis);
					
						this.B6TXAM = (BigDecimal) dis.readObject();
					
					this.B6SIOR = readString(dis);
					
					this.B6ROEM = readString(dis);
					
						this.B6RMCN = (BigDecimal) dis.readObject();
					
					this.B6FAX = readString(dis);
					
					this.B6PRMA = readString(dis);
					
						this.B6GCNO = (BigDecimal) dis.readObject();
					
						this.B6WCET = (BigDecimal) dis.readObject();
					
					this.B6WCST = readString(dis);
					
					this.B6WCEN = readString(dis);
					
					this.B6RLLF = readString(dis);
					
					this.B6PEFL = readString(dis);
					
					this.B6RQSF = readString(dis);
					
						this.B6ODLN = (BigDecimal) dis.readObject();
					
					this.B6ENID = readString(dis);
					
					this.B6ENT1 = readString(dis);
					
					this.B6ENT2 = readString(dis);
					
					this.B6ENT3 = readString(dis);
					
						this.B6CNDT = (BigDecimal) dis.readObject();
					
						this.B6SORD = (BigDecimal) dis.readObject();
					
					this.B6TGCI = readString(dis);
					
					this.B6VPAN = readString(dis);
					
					this.B6RQBY = readString(dis);
					
					this.B6TDES = readString(dis);
					
					this.B6BBVF = readString(dis);
					
						this.B6APRD = (BigDecimal) dis.readObject();
					
					this.B6RANO = readString(dis);
					
					this.B6ITDE = readString(dis);
					
					this.B6LTUF = readString(dis);
					
						this.B6LODN = (BigDecimal) dis.readObject();
					
					this.B6LTZN = readString(dis);
					
						this.B6STOP = (BigDecimal) dis.readObject();
					
					this.B6ENUF = readString(dis);
					
					this.B6MACL = readString(dis);
					
					this.B6SRIN = readString(dis);
					
					this.B6DFRN = readString(dis);
					
						this.B6M6CN = (BigDecimal) dis.readObject();
					
					this.B6CNTN = readString(dis);
					
					this.B6CTFG = readString(dis);
					
						this.B6EADT = (BigDecimal) dis.readObject();
					
						this.B6EATM = (BigDecimal) dis.readObject();
					
					this.B6EAID = readString(dis);
					
						this.B6MODT = (BigDecimal) dis.readObject();
					
						this.B6MOTM = (BigDecimal) dis.readObject();
					
					this.B6MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.B6ORNO);
					
					// String
				
						writeString(this.B6ORTY,dos);
					
					// String
				
						writeString(this.B6CUNO,dos);
					
					// String
				
						writeString(this.B6SADD,dos);
					
					// String
				
						writeString(this.B6NANO,dos);
					
					// String
				
						writeString(this.B6PONU,dos);
					
					// String
				
						writeString(this.B6CATG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TZNU);
					
					// String
				
						writeString(this.B6ALTY,dos);
					
					// String
				
						writeString(this.B6RTNO,dos);
					
					// String
				
						writeString(this.B6RTNU,dos);
					
					// String
				
						writeString(this.B6WCNM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6WCTM);
					
					// String
				
						writeString(this.B6SEIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6SHDT);
					
					// String
				
						writeString(this.B6WNOI,dos);
					
					// String
				
						writeString(this.B6TCFN,dos);
					
					// String
				
						writeString(this.B6OCFP,dos);
					
					// String
				
						writeString(this.B6ORST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TFZC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TFZS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TCLC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TCLS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TDRC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TDRS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTNC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTOG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6ORTM);
					
					// String
				
						writeString(this.B6BTRT,dos);
					
					// String
				
						writeString(this.B6DELM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6MNFS);
					
					// String
				
						writeString(this.B6IOFL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6BOKI);
					
					// String
				
						writeString(this.B6IORF,dos);
					
					// String
				
						writeString(this.B6IDFP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6LODT);
					
					// String
				
						writeString(this.B6ACT1,dos);
					
					// String
				
						writeString(this.B6USR1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6DLDT);
					
					// String
				
						writeString(this.B6EMP,dos);
					
					// String
				
						writeString(this.B6STRE,dos);
					
					// String
				
						writeString(this.B6HOFL,dos);
					
					// String
				
						writeString(this.B6ROFL,dos);
					
					// String
				
						writeString(this.B6HORC,dos);
					
					// String
				
						writeString(this.B6RORC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TXAM);
					
					// String
				
						writeString(this.B6SIOR,dos);
					
					// String
				
						writeString(this.B6ROEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6RMCN);
					
					// String
				
						writeString(this.B6FAX,dos);
					
					// String
				
						writeString(this.B6PRMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6GCNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6WCET);
					
					// String
				
						writeString(this.B6WCST,dos);
					
					// String
				
						writeString(this.B6WCEN,dos);
					
					// String
				
						writeString(this.B6RLLF,dos);
					
					// String
				
						writeString(this.B6PEFL,dos);
					
					// String
				
						writeString(this.B6RQSF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6ODLN);
					
					// String
				
						writeString(this.B6ENID,dos);
					
					// String
				
						writeString(this.B6ENT1,dos);
					
					// String
				
						writeString(this.B6ENT2,dos);
					
					// String
				
						writeString(this.B6ENT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6CNDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6SORD);
					
					// String
				
						writeString(this.B6TGCI,dos);
					
					// String
				
						writeString(this.B6VPAN,dos);
					
					// String
				
						writeString(this.B6RQBY,dos);
					
					// String
				
						writeString(this.B6TDES,dos);
					
					// String
				
						writeString(this.B6BBVF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6APRD);
					
					// String
				
						writeString(this.B6RANO,dos);
					
					// String
				
						writeString(this.B6ITDE,dos);
					
					// String
				
						writeString(this.B6LTUF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6LODN);
					
					// String
				
						writeString(this.B6LTZN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6STOP);
					
					// String
				
						writeString(this.B6ENUF,dos);
					
					// String
				
						writeString(this.B6MACL,dos);
					
					// String
				
						writeString(this.B6SRIN,dos);
					
					// String
				
						writeString(this.B6DFRN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6M6CN);
					
					// String
				
						writeString(this.B6CNTN,dos);
					
					// String
				
						writeString(this.B6CTFG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6EATM);
					
					// String
				
						writeString(this.B6EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6MOTM);
					
					// String
				
						writeString(this.B6MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.B6ORNO);
					
					// String
				
						writeString(this.B6ORTY,dos);
					
					// String
				
						writeString(this.B6CUNO,dos);
					
					// String
				
						writeString(this.B6SADD,dos);
					
					// String
				
						writeString(this.B6NANO,dos);
					
					// String
				
						writeString(this.B6PONU,dos);
					
					// String
				
						writeString(this.B6CATG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TZNU);
					
					// String
				
						writeString(this.B6ALTY,dos);
					
					// String
				
						writeString(this.B6RTNO,dos);
					
					// String
				
						writeString(this.B6RTNU,dos);
					
					// String
				
						writeString(this.B6WCNM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6WCTM);
					
					// String
				
						writeString(this.B6SEIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6SHDT);
					
					// String
				
						writeString(this.B6WNOI,dos);
					
					// String
				
						writeString(this.B6TCFN,dos);
					
					// String
				
						writeString(this.B6OCFP,dos);
					
					// String
				
						writeString(this.B6ORST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TFZC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TFZS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TCLC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TCLS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TDRC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TDRS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTNC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTSP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TTOG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6ORTM);
					
					// String
				
						writeString(this.B6BTRT,dos);
					
					// String
				
						writeString(this.B6DELM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6MNFS);
					
					// String
				
						writeString(this.B6IOFL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6BOKI);
					
					// String
				
						writeString(this.B6IORF,dos);
					
					// String
				
						writeString(this.B6IDFP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6LODT);
					
					// String
				
						writeString(this.B6ACT1,dos);
					
					// String
				
						writeString(this.B6USR1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6DLDT);
					
					// String
				
						writeString(this.B6EMP,dos);
					
					// String
				
						writeString(this.B6STRE,dos);
					
					// String
				
						writeString(this.B6HOFL,dos);
					
					// String
				
						writeString(this.B6ROFL,dos);
					
					// String
				
						writeString(this.B6HORC,dos);
					
					// String
				
						writeString(this.B6RORC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6TXAM);
					
					// String
				
						writeString(this.B6SIOR,dos);
					
					// String
				
						writeString(this.B6ROEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6RMCN);
					
					// String
				
						writeString(this.B6FAX,dos);
					
					// String
				
						writeString(this.B6PRMA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6GCNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6WCET);
					
					// String
				
						writeString(this.B6WCST,dos);
					
					// String
				
						writeString(this.B6WCEN,dos);
					
					// String
				
						writeString(this.B6RLLF,dos);
					
					// String
				
						writeString(this.B6PEFL,dos);
					
					// String
				
						writeString(this.B6RQSF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6ODLN);
					
					// String
				
						writeString(this.B6ENID,dos);
					
					// String
				
						writeString(this.B6ENT1,dos);
					
					// String
				
						writeString(this.B6ENT2,dos);
					
					// String
				
						writeString(this.B6ENT3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6CNDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6SORD);
					
					// String
				
						writeString(this.B6TGCI,dos);
					
					// String
				
						writeString(this.B6VPAN,dos);
					
					// String
				
						writeString(this.B6RQBY,dos);
					
					// String
				
						writeString(this.B6TDES,dos);
					
					// String
				
						writeString(this.B6BBVF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6APRD);
					
					// String
				
						writeString(this.B6RANO,dos);
					
					// String
				
						writeString(this.B6ITDE,dos);
					
					// String
				
						writeString(this.B6LTUF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6LODN);
					
					// String
				
						writeString(this.B6LTZN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6STOP);
					
					// String
				
						writeString(this.B6ENUF,dos);
					
					// String
				
						writeString(this.B6MACL,dos);
					
					// String
				
						writeString(this.B6SRIN,dos);
					
					// String
				
						writeString(this.B6DFRN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6M6CN);
					
					// String
				
						writeString(this.B6CNTN,dos);
					
					// String
				
						writeString(this.B6CTFG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6EATM);
					
					// String
				
						writeString(this.B6EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B6MOTM);
					
					// String
				
						writeString(this.B6MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("B6ORNO="+String.valueOf(B6ORNO));
		sb.append(",B6ORTY="+B6ORTY);
		sb.append(",B6CUNO="+B6CUNO);
		sb.append(",B6SADD="+B6SADD);
		sb.append(",B6NANO="+B6NANO);
		sb.append(",B6PONU="+B6PONU);
		sb.append(",B6CATG="+B6CATG);
		sb.append(",B6TZNU="+String.valueOf(B6TZNU));
		sb.append(",B6ALTY="+B6ALTY);
		sb.append(",B6RTNO="+B6RTNO);
		sb.append(",B6RTNU="+B6RTNU);
		sb.append(",B6WCNM="+B6WCNM);
		sb.append(",B6WCTM="+String.valueOf(B6WCTM));
		sb.append(",B6SEIN="+B6SEIN);
		sb.append(",B6ORDT="+String.valueOf(B6ORDT));
		sb.append(",B6SHDT="+String.valueOf(B6SHDT));
		sb.append(",B6WNOI="+B6WNOI);
		sb.append(",B6TCFN="+B6TCFN);
		sb.append(",B6OCFP="+B6OCFP);
		sb.append(",B6ORST="+B6ORST);
		sb.append(",B6TFZC="+String.valueOf(B6TFZC));
		sb.append(",B6TFZS="+String.valueOf(B6TFZS));
		sb.append(",B6TCLC="+String.valueOf(B6TCLC));
		sb.append(",B6TCLS="+String.valueOf(B6TCLS));
		sb.append(",B6TDRC="+String.valueOf(B6TDRC));
		sb.append(",B6TDRS="+String.valueOf(B6TDRS));
		sb.append(",B6TTNC="+String.valueOf(B6TTNC));
		sb.append(",B6TTSP="+String.valueOf(B6TTSP));
		sb.append(",B6TTOW="+String.valueOf(B6TTOW));
		sb.append(",B6TTOC="+String.valueOf(B6TTOC));
		sb.append(",B6TTL1="+String.valueOf(B6TTL1));
		sb.append(",B6TTOR="+String.valueOf(B6TTOR));
		sb.append(",B6TTOG="+String.valueOf(B6TTOG));
		sb.append(",B6ORTM="+String.valueOf(B6ORTM));
		sb.append(",B6BTRT="+B6BTRT);
		sb.append(",B6DELM="+B6DELM);
		sb.append(",B6MNFS="+String.valueOf(B6MNFS));
		sb.append(",B6IOFL="+B6IOFL);
		sb.append(",B6BOKI="+String.valueOf(B6BOKI));
		sb.append(",B6IORF="+B6IORF);
		sb.append(",B6IDFP="+B6IDFP);
		sb.append(",B6LODT="+String.valueOf(B6LODT));
		sb.append(",B6ACT1="+B6ACT1);
		sb.append(",B6USR1="+B6USR1);
		sb.append(",B6DLDT="+String.valueOf(B6DLDT));
		sb.append(",B6EMP="+B6EMP);
		sb.append(",B6STRE="+B6STRE);
		sb.append(",B6HOFL="+B6HOFL);
		sb.append(",B6ROFL="+B6ROFL);
		sb.append(",B6HORC="+B6HORC);
		sb.append(",B6RORC="+B6RORC);
		sb.append(",B6TXAM="+String.valueOf(B6TXAM));
		sb.append(",B6SIOR="+B6SIOR);
		sb.append(",B6ROEM="+B6ROEM);
		sb.append(",B6RMCN="+String.valueOf(B6RMCN));
		sb.append(",B6FAX="+B6FAX);
		sb.append(",B6PRMA="+B6PRMA);
		sb.append(",B6GCNO="+String.valueOf(B6GCNO));
		sb.append(",B6WCET="+String.valueOf(B6WCET));
		sb.append(",B6WCST="+B6WCST);
		sb.append(",B6WCEN="+B6WCEN);
		sb.append(",B6RLLF="+B6RLLF);
		sb.append(",B6PEFL="+B6PEFL);
		sb.append(",B6RQSF="+B6RQSF);
		sb.append(",B6ODLN="+String.valueOf(B6ODLN));
		sb.append(",B6ENID="+B6ENID);
		sb.append(",B6ENT1="+B6ENT1);
		sb.append(",B6ENT2="+B6ENT2);
		sb.append(",B6ENT3="+B6ENT3);
		sb.append(",B6CNDT="+String.valueOf(B6CNDT));
		sb.append(",B6SORD="+String.valueOf(B6SORD));
		sb.append(",B6TGCI="+B6TGCI);
		sb.append(",B6VPAN="+B6VPAN);
		sb.append(",B6RQBY="+B6RQBY);
		sb.append(",B6TDES="+B6TDES);
		sb.append(",B6BBVF="+B6BBVF);
		sb.append(",B6APRD="+String.valueOf(B6APRD));
		sb.append(",B6RANO="+B6RANO);
		sb.append(",B6ITDE="+B6ITDE);
		sb.append(",B6LTUF="+B6LTUF);
		sb.append(",B6LODN="+String.valueOf(B6LODN));
		sb.append(",B6LTZN="+B6LTZN);
		sb.append(",B6STOP="+String.valueOf(B6STOP));
		sb.append(",B6ENUF="+B6ENUF);
		sb.append(",B6MACL="+B6MACL);
		sb.append(",B6SRIN="+B6SRIN);
		sb.append(",B6DFRN="+B6DFRN);
		sb.append(",B6M6CN="+String.valueOf(B6M6CN));
		sb.append(",B6CNTN="+B6CNTN);
		sb.append(",B6CTFG="+B6CTFG);
		sb.append(",B6EADT="+String.valueOf(B6EADT));
		sb.append(",B6EATM="+String.valueOf(B6EATM));
		sb.append(",B6EAID="+B6EAID);
		sb.append(",B6MODT="+String.valueOf(B6MODT));
		sb.append(",B6MOTM="+String.valueOf(B6MOTM));
		sb.append(",B6MOID="+B6MOID);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(B6ORNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ORNO);
            			}
            		
        			sb.append("|");
        		
        				if(B6ORTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ORTY);
            			}
            		
        			sb.append("|");
        		
        				if(B6CUNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6CUNO);
            			}
            		
        			sb.append("|");
        		
        				if(B6SADD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6SADD);
            			}
            		
        			sb.append("|");
        		
        				if(B6NANO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6NANO);
            			}
            		
        			sb.append("|");
        		
        				if(B6PONU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6PONU);
            			}
            		
        			sb.append("|");
        		
        				if(B6CATG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6CATG);
            			}
            		
        			sb.append("|");
        		
        				if(B6TZNU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TZNU);
            			}
            		
        			sb.append("|");
        		
        				if(B6ALTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ALTY);
            			}
            		
        			sb.append("|");
        		
        				if(B6RTNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6RTNO);
            			}
            		
        			sb.append("|");
        		
        				if(B6RTNU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6RTNU);
            			}
            		
        			sb.append("|");
        		
        				if(B6WCNM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6WCNM);
            			}
            		
        			sb.append("|");
        		
        				if(B6WCTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6WCTM);
            			}
            		
        			sb.append("|");
        		
        				if(B6SEIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6SEIN);
            			}
            		
        			sb.append("|");
        		
        				if(B6ORDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ORDT);
            			}
            		
        			sb.append("|");
        		
        				if(B6SHDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6SHDT);
            			}
            		
        			sb.append("|");
        		
        				if(B6WNOI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6WNOI);
            			}
            		
        			sb.append("|");
        		
        				if(B6TCFN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TCFN);
            			}
            		
        			sb.append("|");
        		
        				if(B6OCFP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6OCFP);
            			}
            		
        			sb.append("|");
        		
        				if(B6ORST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ORST);
            			}
            		
        			sb.append("|");
        		
        				if(B6TFZC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TFZC);
            			}
            		
        			sb.append("|");
        		
        				if(B6TFZS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TFZS);
            			}
            		
        			sb.append("|");
        		
        				if(B6TCLC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TCLC);
            			}
            		
        			sb.append("|");
        		
        				if(B6TCLS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TCLS);
            			}
            		
        			sb.append("|");
        		
        				if(B6TDRC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TDRC);
            			}
            		
        			sb.append("|");
        		
        				if(B6TDRS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TDRS);
            			}
            		
        			sb.append("|");
        		
        				if(B6TTNC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TTNC);
            			}
            		
        			sb.append("|");
        		
        				if(B6TTSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TTSP);
            			}
            		
        			sb.append("|");
        		
        				if(B6TTOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TTOW);
            			}
            		
        			sb.append("|");
        		
        				if(B6TTOC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TTOC);
            			}
            		
        			sb.append("|");
        		
        				if(B6TTL1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TTL1);
            			}
            		
        			sb.append("|");
        		
        				if(B6TTOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TTOR);
            			}
            		
        			sb.append("|");
        		
        				if(B6TTOG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TTOG);
            			}
            		
        			sb.append("|");
        		
        				if(B6ORTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ORTM);
            			}
            		
        			sb.append("|");
        		
        				if(B6BTRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6BTRT);
            			}
            		
        			sb.append("|");
        		
        				if(B6DELM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6DELM);
            			}
            		
        			sb.append("|");
        		
        				if(B6MNFS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6MNFS);
            			}
            		
        			sb.append("|");
        		
        				if(B6IOFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6IOFL);
            			}
            		
        			sb.append("|");
        		
        				if(B6BOKI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6BOKI);
            			}
            		
        			sb.append("|");
        		
        				if(B6IORF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6IORF);
            			}
            		
        			sb.append("|");
        		
        				if(B6IDFP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6IDFP);
            			}
            		
        			sb.append("|");
        		
        				if(B6LODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6LODT);
            			}
            		
        			sb.append("|");
        		
        				if(B6ACT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ACT1);
            			}
            		
        			sb.append("|");
        		
        				if(B6USR1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6USR1);
            			}
            		
        			sb.append("|");
        		
        				if(B6DLDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6DLDT);
            			}
            		
        			sb.append("|");
        		
        				if(B6EMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6EMP);
            			}
            		
        			sb.append("|");
        		
        				if(B6STRE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6STRE);
            			}
            		
        			sb.append("|");
        		
        				if(B6HOFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6HOFL);
            			}
            		
        			sb.append("|");
        		
        				if(B6ROFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ROFL);
            			}
            		
        			sb.append("|");
        		
        				if(B6HORC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6HORC);
            			}
            		
        			sb.append("|");
        		
        				if(B6RORC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6RORC);
            			}
            		
        			sb.append("|");
        		
        				if(B6TXAM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TXAM);
            			}
            		
        			sb.append("|");
        		
        				if(B6SIOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6SIOR);
            			}
            		
        			sb.append("|");
        		
        				if(B6ROEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ROEM);
            			}
            		
        			sb.append("|");
        		
        				if(B6RMCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6RMCN);
            			}
            		
        			sb.append("|");
        		
        				if(B6FAX == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6FAX);
            			}
            		
        			sb.append("|");
        		
        				if(B6PRMA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6PRMA);
            			}
            		
        			sb.append("|");
        		
        				if(B6GCNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6GCNO);
            			}
            		
        			sb.append("|");
        		
        				if(B6WCET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6WCET);
            			}
            		
        			sb.append("|");
        		
        				if(B6WCST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6WCST);
            			}
            		
        			sb.append("|");
        		
        				if(B6WCEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6WCEN);
            			}
            		
        			sb.append("|");
        		
        				if(B6RLLF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6RLLF);
            			}
            		
        			sb.append("|");
        		
        				if(B6PEFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6PEFL);
            			}
            		
        			sb.append("|");
        		
        				if(B6RQSF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6RQSF);
            			}
            		
        			sb.append("|");
        		
        				if(B6ODLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ODLN);
            			}
            		
        			sb.append("|");
        		
        				if(B6ENID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ENID);
            			}
            		
        			sb.append("|");
        		
        				if(B6ENT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ENT1);
            			}
            		
        			sb.append("|");
        		
        				if(B6ENT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ENT2);
            			}
            		
        			sb.append("|");
        		
        				if(B6ENT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ENT3);
            			}
            		
        			sb.append("|");
        		
        				if(B6CNDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6CNDT);
            			}
            		
        			sb.append("|");
        		
        				if(B6SORD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6SORD);
            			}
            		
        			sb.append("|");
        		
        				if(B6TGCI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TGCI);
            			}
            		
        			sb.append("|");
        		
        				if(B6VPAN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6VPAN);
            			}
            		
        			sb.append("|");
        		
        				if(B6RQBY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6RQBY);
            			}
            		
        			sb.append("|");
        		
        				if(B6TDES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6TDES);
            			}
            		
        			sb.append("|");
        		
        				if(B6BBVF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6BBVF);
            			}
            		
        			sb.append("|");
        		
        				if(B6APRD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6APRD);
            			}
            		
        			sb.append("|");
        		
        				if(B6RANO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6RANO);
            			}
            		
        			sb.append("|");
        		
        				if(B6ITDE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ITDE);
            			}
            		
        			sb.append("|");
        		
        				if(B6LTUF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6LTUF);
            			}
            		
        			sb.append("|");
        		
        				if(B6LODN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6LODN);
            			}
            		
        			sb.append("|");
        		
        				if(B6LTZN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6LTZN);
            			}
            		
        			sb.append("|");
        		
        				if(B6STOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6STOP);
            			}
            		
        			sb.append("|");
        		
        				if(B6ENUF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6ENUF);
            			}
            		
        			sb.append("|");
        		
        				if(B6MACL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6MACL);
            			}
            		
        			sb.append("|");
        		
        				if(B6SRIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6SRIN);
            			}
            		
        			sb.append("|");
        		
        				if(B6DFRN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6DFRN);
            			}
            		
        			sb.append("|");
        		
        				if(B6M6CN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6M6CN);
            			}
            		
        			sb.append("|");
        		
        				if(B6CNTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6CNTN);
            			}
            		
        			sb.append("|");
        		
        				if(B6CTFG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6CTFG);
            			}
            		
        			sb.append("|");
        		
        				if(B6EADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6EADT);
            			}
            		
        			sb.append("|");
        		
        				if(B6EATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6EATM);
            			}
            		
        			sb.append("|");
        		
        				if(B6EAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6EAID);
            			}
            		
        			sb.append("|");
        		
        				if(B6MODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6MODT);
            			}
            		
        			sb.append("|");
        		
        				if(B6MOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6MOTM);
            			}
            		
        			sb.append("|");
        		
        				if(B6MOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(B6MOID);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
ORDER_PROCESS_HEADERStruct ORDER_PROCESS_HEADER = new ORDER_PROCESS_HEADERStruct();






	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ORDER_PROCESS_HEADER");
					}
				
		int tos_count_tDBOutput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_2 = new StringBuilder();
                    log4jParamters_tDBOutput_2.append("Parameters:");
                            log4jParamters_tDBOutput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Order_Processing");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("TABLE" + " = " + "\"ORDER_PROCESS_HEADER\"");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + (log4jParamters_tDBOutput_2) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_2().limitLog4jByte();
            }





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.GIM_Schema_Order_Processing;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("ORDER_PROCESS_HEADER");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("ORDER_PROCESS_HEADER");
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_2 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_2 = context.GIM_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection attempts to '")  + (url_tDBOutput_2)  + ("' with the username '")  + (dbUser_tDBOutput_2)  + ("'.") );
    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to '")  + (url_tDBOutput_2)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 1;
        int commitCounter_tDBOutput_2 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_2.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_2 = 1;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"SITE_ID\",\"ORDER_NO\",\"ORDER_TYPE\",\"SHIP_TO_CUST\",\"SHIPPING_ADDRESS_ID\",\"NATIONAL_ACCOUNT_NO\",\"PURCHASE_ORDER_NO\",\"CUSTOMER_CATEGORY_CODE\",\"ROUTING_GROUP_CODE\",\"ALLOCATION_TYPE\",\"ROUTE_TO_NO\",\"ROUTE_NO\",\"WILL_CALL_NAME\",\"WILL_CALL_START_TIME\",\"SEPARATE_INVOICE\",\"ORDER_DATE\",\"SHIP_OR_PICKUP_DATE\",\"NEXT_ORDER_INDICATOR\",\"CONFIRMATION_NO\",\"ORDER_CONFIRMATION_PRINTED_FLAG\",\"ORDER_STATUS_CODE\",\"TOTAL_FREEZER_CASES\",\"TOTAL_FREEZER_SPLITS\",\"TOTAL_COOLER_CASES\",\"TOTAL_COOLER_SPLITS\",\"TOTAL_DRY_CASES\",\"TOTAL_DRY_SPLITS\",\"TOTAL_NO_CASES_ORDER\",\"TOTAL_NO_SPLITS_ORDER\",\"TOTAL_ORDER_WEIGHT\",\"TOTAL_CUBE\",\"TOTAL_LINES\",\"ORDER_TOTAL\",\"ORDER_GRAND_TOTAL\",\"ORDER_ENTRY_TIME\",\"RECORD_TYPE_INDICATOR\",\"DELIVERY_METHOD\",\"MANIFEST_NO\",\"IMMEDIATE_ORDER_FLAG\",\"BOOKING_ID\",\"INCOMPLETE_ORDER_FLAG\",\"FOODSHOW_PROMOTION_ID\",\"LAPTOP_ORDER_DATE\",\"ACCOUNT_NO\",\"USER_FIELD_1\",\"DELIVERY_DATE\",\"EMPLOYEE_NO\",\"RESHIP_STATUS\",\"HOLD_ORDER_FLAG\",\"RELEASE_ORDER_FLAG\",\"HOLD_ORDER_REASON_CODE\",\"RELEASE_ORDER_REASON_CODE\",\"TAX_AMOUNT\",\"SEND_IMMEDIATE_ORDER_ROUTING\",\"REMOTE_ORDER_ENTRY_MODE\",\"REMOTE_ORDER_CONFIRMATION_NO\",\"FAX_NO\",\"PRIMARY_MA\",\"GENERIC_LAST_USED_NO\",\"CALL_END_TIME\",\"CALL_START_TIME_INDICATOR\",\"CALL_END_TIME_INDICATOR\",\"RECORD_LOGICALLY_LOCKED_FLAG\",\"ERROR_STATUS_FLAG\",\"REQUEST_STATUS_FLAG\",\"ORDER_DETAIL_LINE_NO\",\"ENTITY_ID\",\"PARENT_ENTITY_1\",\"PARENT_ENTITY_2\",\"PARENT_ENTITY_3\",\"CANCEL_DATE\",\"SERVICE_ORDER_NO\",\"CREATE_TARGET_INDICATOR\",\"VENDOR_APPROVAL_NO\",\"REQUESTED_BY\",\"TARGET_DESC\",\"BILL_BACK_VENDOR_FLAG\",\"NO_OF_AP_ROLL_DAYS\",\"RETURN_AUTH_NO\",\"DISPENSER_EQUIPMENT_ITEM\",\"LAPTOP_USER_FLAG\",\"LAPTOP_ORDER_NO\",\"LAPTOP_ZID_NO\",\"STOP_NO\",\"ENTITY_UPDATED_FLAG\",\"MAJOR_CLASS\",\"SWMS_RECOVERY_INVOICE_NO\",\"DEFAULT_ROUTE_NO\",\"CONFIRM_NO\",\"CONTAINER_GROUP_ID\",\"SEPARATE_CONTAINER_FLAG\",\"CREATED_TIMESTAMP\",\"CREATED_USER_ID\",\"UPDATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\",\"B6PF_SVOP\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row2_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_ORDER_PROCESS_HEADER_tMap_1 = 0;
				
ORDER_PROCESS_HEADERStruct ORDER_PROCESS_HEADER_tmp = new ORDER_PROCESS_HEADERStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"OPNJB6PF\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"SELECT    OPNJB6PF.B6ORNO,    OPNJB6PF.B6ORTY,    OPNJB6PF.B6CUNO,    OPNJB6PF.B6SADD,    OPNJB6PF.B6NANO,    OPNJB6PF.B6PONU,    OPNJB6PF.B6CATG,    OPNJB6PF.B6TZNU,    OPNJB6PF.B6ALTY,    OPNJB6PF.B6RTNO,    OPNJB6PF.B6RTNU,    OPNJB6PF.B6WCNM,    OPNJB6PF.B6WCTM,    OPNJB6PF.B6SEIN,    OPNJB6PF.B6ORDT,    OPNJB6PF.B6SHDT,    OPNJB6PF.B6WNOI,    OPNJB6PF.B6TCFN,    OPNJB6PF.B6OCFP,    OPNJB6PF.B6ORST,    OPNJB6PF.B6TFZC,    OPNJB6PF.B6TFZS,    OPNJB6PF.B6TCLC,    OPNJB6PF.B6TCLS,    OPNJB6PF.B6TDRC,    OPNJB6PF.B6TDRS,    OPNJB6PF.B6TTNC,    OPNJB6PF.B6TTSP,    OPNJB6PF.B6TTOW,    OPNJB6PF.B6TTOC,    OPNJB6PF.B6TTL1,    OPNJB6PF.B6TTOR,    OPNJB6PF.B6TTOG,    OPNJB6PF.B6ORTM,    OPNJB6PF.B6BTRT,    OPNJB6PF.B6DELM,    OPNJB6PF.B6MNFS,    OPNJB6PF.B6IOFL,    OPNJB6PF.B6BOKI,    OPNJB6PF.B6IORF,    OPNJB6PF.B6IDFP,    OPNJB6PF.B6LODT,    OPNJB6PF.B6ACT1,    OPNJB6PF.B6USR1,    OPNJB6PF.B6DLDT,    OPNJB6PF.\\\"B6EMP#\\\",    OPNJB6PF.B6STRE,    OPNJB6PF.B6HOFL,    OPNJB6PF.B6ROFL,    OPNJB6PF.B6HORC,    OPNJB6PF.B6RORC,    OPNJB6PF.B6TXAM,    OPNJB6PF.B6SIOR,    OPNJB6PF.B6ROEM,    OPNJB6PF.B6RMCN,    OPNJB6PF.B6FAX,    OPNJB6PF.B6PRMA,    OPNJB6PF.B6GCNO,    OPNJB6PF.B6WCET,    OPNJB6PF.B6WCST,    OPNJB6PF.B6WCEN,    OPNJB6PF.B6RLLF,    OPNJB6PF.B6PEFL,    OPNJB6PF.B6RQSF,    OPNJB6PF.B6ODLN,    OPNJB6PF.B6ENID,    OPNJB6PF.B6ENT1,    OPNJB6PF.B6ENT2,    OPNJB6PF.B6ENT3,    OPNJB6PF.B6CNDT,    OPNJB6PF.B6SORD,    OPNJB6PF.B6TGCI,    OPNJB6PF.B6VPAN,    OPNJB6PF.B6RQBY,    OPNJB6PF.B6TDES,    OPNJB6PF.B6BBVF,    OPNJB6PF.B6APRD,    OPNJB6PF.B6RANO,    OPNJB6PF.B6ITDE,    OPNJB6PF.B6LTUF,    OPNJB6PF.B6LODN,    OPNJB6PF.B6LTZN,    OPNJB6PF.B6STOP,    OPNJB6PF.B6ENUF,    OPNJB6PF.B6MACL,    OPNJB6PF.B6SRIN,    OPNJB6PF.B6DFRN,    OPNJB6PF.B6M6CN,    OPNJB6PF.B6CNTN,    OPNJB6PF.B6CTFG,    OPNJB6PF.B6EADT,    OPNJB6PF.B6EATM,    OPNJB6PF.B6EAID,    OPNJB6PF.B6MODT,    OPNJB6PF.B6MOTM,    OPNJB6PF.B6MOID FROM OPNJB6PF ORDER BY OPNJB6PF.B6EADT DESC\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.SUS_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_1 - Driver ClassName: "+driverClass_tDBInput_1+".");
			
	    		log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '" + dbUser_tDBInput_1 + "'.");
			
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
	    		log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  OPNJB6PF.B6ORNO, \n  OPNJB6PF.B6ORTY, \n  OPNJB6PF.B6CUNO, \n  OPNJB6PF.B6SADD, \n  OPNJB6PF.B6NANO, \n  OPNJB6PF."
+"B6PONU, \n  OPNJB6PF.B6CATG, \n  OPNJB6PF.B6TZNU, \n  OPNJB6PF.B6ALTY, \n  OPNJB6PF.B6RTNO, \n  OPNJB6PF.B6RTNU, \n  OPNJB6PF."
+"B6WCNM, \n  OPNJB6PF.B6WCTM, \n  OPNJB6PF.B6SEIN, \n  OPNJB6PF.B6ORDT, \n  OPNJB6PF.B6SHDT, \n  OPNJB6PF.B6WNOI, \n  OPNJB6PF."
+"B6TCFN, \n  OPNJB6PF.B6OCFP, \n  OPNJB6PF.B6ORST, \n  OPNJB6PF.B6TFZC, \n  OPNJB6PF.B6TFZS, \n  OPNJB6PF.B6TCLC, \n  OPNJB6PF."
+"B6TCLS, \n  OPNJB6PF.B6TDRC, \n  OPNJB6PF.B6TDRS, \n  OPNJB6PF.B6TTNC, \n  OPNJB6PF.B6TTSP, \n  OPNJB6PF.B6TTOW, \n  OPNJB6PF."
+"B6TTOC, \n  OPNJB6PF.B6TTL1, \n  OPNJB6PF.B6TTOR, \n  OPNJB6PF.B6TTOG, \n  OPNJB6PF.B6ORTM, \n  OPNJB6PF.B6BTRT, \n  OPNJB6PF."
+"B6DELM, \n  OPNJB6PF.B6MNFS, \n  OPNJB6PF.B6IOFL, \n  OPNJB6PF.B6BOKI, \n  OPNJB6PF.B6IORF, \n  OPNJB6PF.B6IDFP, \n  OPNJB6PF."
+"B6LODT, \n  OPNJB6PF.B6ACT1, \n  OPNJB6PF.B6USR1, \n  OPNJB6PF.B6DLDT, \n  OPNJB6PF.\"B6EMP#\", \n  OPNJB6PF.B6STRE, \n  OPNJB"
+"6PF.B6HOFL, \n  OPNJB6PF.B6ROFL, \n  OPNJB6PF.B6HORC, \n  OPNJB6PF.B6RORC, \n  OPNJB6PF.B6TXAM, \n  OPNJB6PF.B6SIOR, \n  OPNJB"
+"6PF.B6ROEM, \n  OPNJB6PF.B6RMCN, \n  OPNJB6PF.B6FAX, \n  OPNJB6PF.B6PRMA, \n  OPNJB6PF.B6GCNO, \n  OPNJB6PF.B6WCET, \n  OPNJB6"
+"PF.B6WCST, \n  OPNJB6PF.B6WCEN, \n  OPNJB6PF.B6RLLF, \n  OPNJB6PF.B6PEFL, \n  OPNJB6PF.B6RQSF, \n  OPNJB6PF.B6ODLN, \n  OPNJB6"
+"PF.B6ENID, \n  OPNJB6PF.B6ENT1, \n  OPNJB6PF.B6ENT2, \n  OPNJB6PF.B6ENT3, \n  OPNJB6PF.B6CNDT, \n  OPNJB6PF.B6SORD, \n  OPNJB6"
+"PF.B6TGCI, \n  OPNJB6PF.B6VPAN, \n  OPNJB6PF.B6RQBY, \n  OPNJB6PF.B6TDES, \n  OPNJB6PF.B6BBVF, \n  OPNJB6PF.B6APRD, \n  OPNJB6"
+"PF.B6RANO, \n  OPNJB6PF.B6ITDE, \n  OPNJB6PF.B6LTUF, \n  OPNJB6PF.B6LODN, \n  OPNJB6PF.B6LTZN, \n  OPNJB6PF.B6STOP, \n  OPNJB6"
+"PF.B6ENUF, \n  OPNJB6PF.B6MACL, \n  OPNJB6PF.B6SRIN, \n  OPNJB6PF.B6DFRN, \n  OPNJB6PF.B6M6CN, \n  OPNJB6PF.B6CNTN, \n  OPNJB6"
+"PF.B6CTFG, \n  OPNJB6PF.B6EADT, \n  OPNJB6PF.B6EATM, \n  OPNJB6PF.B6EAID, \n  OPNJB6PF.B6MODT, \n  OPNJB6PF.B6MOTM, \n  OPNJB6"
+"PF.B6MOID\nFROM OPNJB6PF ORDER BY OPNJB6PF.B6EADT DESC";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.B6ORNO = null;
							} else {
		                          
            row1.B6ORNO = rs_tDBInput_1.getBigDecimal(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.B6ORTY = null;
							} else {
	                         		
        	row1.B6ORTY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.B6CUNO = null;
							} else {
	                         		
        	row1.B6CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.B6SADD = null;
							} else {
	                         		
        	row1.B6SADD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.B6NANO = null;
							} else {
	                         		
        	row1.B6NANO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.B6PONU = null;
							} else {
	                         		
        	row1.B6PONU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.B6CATG = null;
							} else {
	                         		
        	row1.B6CATG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.B6TZNU = null;
							} else {
		                          
            row1.B6TZNU = rs_tDBInput_1.getBigDecimal(8);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.B6ALTY = null;
							} else {
	                         		
        	row1.B6ALTY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.B6RTNO = null;
							} else {
	                         		
        	row1.B6RTNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.B6RTNU = null;
							} else {
	                         		
        	row1.B6RTNU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.B6WCNM = null;
							} else {
	                         		
        	row1.B6WCNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.B6WCTM = null;
							} else {
		                          
            row1.B6WCTM = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.B6SEIN = null;
							} else {
	                         		
        	row1.B6SEIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.B6ORDT = null;
							} else {
		                          
            row1.B6ORDT = rs_tDBInput_1.getBigDecimal(15);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.B6SHDT = null;
							} else {
		                          
            row1.B6SHDT = rs_tDBInput_1.getBigDecimal(16);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.B6WNOI = null;
							} else {
	                         		
        	row1.B6WNOI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.B6TCFN = null;
							} else {
	                         		
        	row1.B6TCFN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.B6OCFP = null;
							} else {
	                         		
        	row1.B6OCFP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.B6ORST = null;
							} else {
	                         		
        	row1.B6ORST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.B6TFZC = null;
							} else {
		                          
            row1.B6TFZC = rs_tDBInput_1.getBigDecimal(21);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.B6TFZS = null;
							} else {
		                          
            row1.B6TFZS = rs_tDBInput_1.getBigDecimal(22);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.B6TCLC = null;
							} else {
		                          
            row1.B6TCLC = rs_tDBInput_1.getBigDecimal(23);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.B6TCLS = null;
							} else {
		                          
            row1.B6TCLS = rs_tDBInput_1.getBigDecimal(24);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.B6TDRC = null;
							} else {
		                          
            row1.B6TDRC = rs_tDBInput_1.getBigDecimal(25);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.B6TDRS = null;
							} else {
		                          
            row1.B6TDRS = rs_tDBInput_1.getBigDecimal(26);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.B6TTNC = null;
							} else {
		                          
            row1.B6TTNC = rs_tDBInput_1.getBigDecimal(27);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.B6TTSP = null;
							} else {
		                          
            row1.B6TTSP = rs_tDBInput_1.getBigDecimal(28);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.B6TTOW = null;
							} else {
		                          
            row1.B6TTOW = rs_tDBInput_1.getBigDecimal(29);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.B6TTOC = null;
							} else {
		                          
            row1.B6TTOC = rs_tDBInput_1.getBigDecimal(30);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.B6TTL1 = null;
							} else {
		                          
            row1.B6TTL1 = rs_tDBInput_1.getBigDecimal(31);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.B6TTOR = null;
							} else {
		                          
            row1.B6TTOR = rs_tDBInput_1.getBigDecimal(32);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.B6TTOG = null;
							} else {
		                          
            row1.B6TTOG = rs_tDBInput_1.getBigDecimal(33);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.B6ORTM = null;
							} else {
		                          
            row1.B6ORTM = rs_tDBInput_1.getBigDecimal(34);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.B6BTRT = null;
							} else {
	                         		
        	row1.B6BTRT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.B6DELM = null;
							} else {
	                         		
        	row1.B6DELM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.B6MNFS = null;
							} else {
		                          
            row1.B6MNFS = rs_tDBInput_1.getBigDecimal(37);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.B6IOFL = null;
							} else {
	                         		
        	row1.B6IOFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.B6BOKI = null;
							} else {
		                          
            row1.B6BOKI = rs_tDBInput_1.getBigDecimal(39);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.B6IORF = null;
							} else {
	                         		
        	row1.B6IORF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.B6IDFP = null;
							} else {
	                         		
        	row1.B6IDFP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.B6LODT = null;
							} else {
		                          
            row1.B6LODT = rs_tDBInput_1.getBigDecimal(42);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.B6ACT1 = null;
							} else {
	                         		
        	row1.B6ACT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.B6USR1 = null;
							} else {
	                         		
        	row1.B6USR1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.B6DLDT = null;
							} else {
		                          
            row1.B6DLDT = rs_tDBInput_1.getBigDecimal(45);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.B6EMP = null;
							} else {
	                         		
        	row1.B6EMP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.B6STRE = null;
							} else {
	                         		
        	row1.B6STRE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.B6HOFL = null;
							} else {
	                         		
        	row1.B6HOFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.B6ROFL = null;
							} else {
	                         		
        	row1.B6ROFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.B6HORC = null;
							} else {
	                         		
        	row1.B6HORC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.B6RORC = null;
							} else {
	                         		
        	row1.B6RORC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.B6TXAM = null;
							} else {
		                          
            row1.B6TXAM = rs_tDBInput_1.getBigDecimal(52);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.B6SIOR = null;
							} else {
	                         		
        	row1.B6SIOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.B6ROEM = null;
							} else {
	                         		
        	row1.B6ROEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.B6RMCN = null;
							} else {
		                          
            row1.B6RMCN = rs_tDBInput_1.getBigDecimal(55);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.B6FAX = null;
							} else {
	                         		
        	row1.B6FAX = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.B6PRMA = null;
							} else {
	                         		
        	row1.B6PRMA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 57, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.B6GCNO = null;
							} else {
		                          
            row1.B6GCNO = rs_tDBInput_1.getBigDecimal(58);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.B6WCET = null;
							} else {
		                          
            row1.B6WCET = rs_tDBInput_1.getBigDecimal(59);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.B6WCST = null;
							} else {
	                         		
        	row1.B6WCST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 60, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.B6WCEN = null;
							} else {
	                         		
        	row1.B6WCEN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 61, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.B6RLLF = null;
							} else {
	                         		
        	row1.B6RLLF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 62, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.B6PEFL = null;
							} else {
	                         		
        	row1.B6PEFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 63, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.B6RQSF = null;
							} else {
	                         		
        	row1.B6RQSF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.B6ODLN = null;
							} else {
		                          
            row1.B6ODLN = rs_tDBInput_1.getBigDecimal(65);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.B6ENID = null;
							} else {
	                         		
        	row1.B6ENID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 66, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.B6ENT1 = null;
							} else {
	                         		
        	row1.B6ENT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 67, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.B6ENT2 = null;
							} else {
	                         		
        	row1.B6ENT2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.B6ENT3 = null;
							} else {
	                         		
        	row1.B6ENT3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 69, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.B6CNDT = null;
							} else {
		                          
            row1.B6CNDT = rs_tDBInput_1.getBigDecimal(70);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.B6SORD = null;
							} else {
		                          
            row1.B6SORD = rs_tDBInput_1.getBigDecimal(71);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.B6TGCI = null;
							} else {
	                         		
        	row1.B6TGCI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.B6VPAN = null;
							} else {
	                         		
        	row1.B6VPAN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 73, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.B6RQBY = null;
							} else {
	                         		
        	row1.B6RQBY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 74, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.B6TDES = null;
							} else {
	                         		
        	row1.B6TDES = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.B6BBVF = null;
							} else {
	                         		
        	row1.B6BBVF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.B6APRD = null;
							} else {
		                          
            row1.B6APRD = rs_tDBInput_1.getBigDecimal(77);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row1.B6RANO = null;
							} else {
	                         		
        	row1.B6RANO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 78, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 79) {
								row1.B6ITDE = null;
							} else {
	                         		
        	row1.B6ITDE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 79, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 80) {
								row1.B6LTUF = null;
							} else {
	                         		
        	row1.B6LTUF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 80, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 81) {
								row1.B6LODN = null;
							} else {
		                          
            row1.B6LODN = rs_tDBInput_1.getBigDecimal(81);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 82) {
								row1.B6LTZN = null;
							} else {
	                         		
        	row1.B6LTZN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 82, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 83) {
								row1.B6STOP = null;
							} else {
		                          
            row1.B6STOP = rs_tDBInput_1.getBigDecimal(83);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 84) {
								row1.B6ENUF = null;
							} else {
	                         		
        	row1.B6ENUF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 84, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 85) {
								row1.B6MACL = null;
							} else {
	                         		
        	row1.B6MACL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 85, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 86) {
								row1.B6SRIN = null;
							} else {
	                         		
        	row1.B6SRIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 86, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 87) {
								row1.B6DFRN = null;
							} else {
	                         		
        	row1.B6DFRN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 87, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 88) {
								row1.B6M6CN = null;
							} else {
		                          
            row1.B6M6CN = rs_tDBInput_1.getBigDecimal(88);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 89) {
								row1.B6CNTN = null;
							} else {
	                         		
        	row1.B6CNTN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 89, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 90) {
								row1.B6CTFG = null;
							} else {
	                         		
        	row1.B6CTFG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 90, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 91) {
								row1.B6EADT = null;
							} else {
		                          
            row1.B6EADT = rs_tDBInput_1.getBigDecimal(91);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 92) {
								row1.B6EATM = null;
							} else {
		                          
            row1.B6EATM = rs_tDBInput_1.getBigDecimal(92);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 93) {
								row1.B6EAID = null;
							} else {
	                         		
        	row1.B6EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 93, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 94) {
								row1.B6MODT = null;
							} else {
		                          
            row1.B6MODT = rs_tDBInput_1.getBigDecimal(94);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 95) {
								row1.B6MOTM = null;
							} else {
		                          
            row1.B6MOTM = rs_tDBInput_1.getBigDecimal(95);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 96) {
								row1.B6MOID = null;
							} else {
	                         		
        	row1.B6MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 96, true);
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		

    //Code generated according to input schema and output schema
row2.SITE_ID = context.opco;
row2.ORDER_NO = row1.B6ORNO;
row2.ORDER_TYPE = CharSetHandling.convertEBCDICStrToASCII(row1.B6ORTY);
row2.SHIP_TO_CUST = CharSetHandling.convertEBCDICStrToASCII(row1.B6CUNO);
row2.SHIPPING_ADDRESS_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6SADD);
row2.NATIONAL_ACCOUNT_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6NANO);
row2.PURCHASE_ORDER_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6PONU);
row2.CUSTOMER_CATEGORY_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6CATG);
row2.ROUTING_GROUP_CODE = row1.B6TZNU;
row2.ALLOCATION_TYPE = CharSetHandling.convertEBCDICStrToASCII(row1.B6ALTY);
row2.ROUTE_TO_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6RTNO);
row2.ROUTE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6RTNU);
row2.WILL_CALL_NAME = CharSetHandling.convertEBCDICStrToASCII(row1.B6WCNM);
row2.WILL_CALL_START_TIME = row1.B6WCTM;
row2.SEPARATE_INVOICE = CharSetHandling.convertEBCDICStrToASCII(row1.B6SEIN);
row2.ORDER_DATE = TimeStampConverting.convertToDate(row1.B6ORDT.toString());
row2.SHIP_OR_PICKUP_DATE = TimeStampConverting.convertToDate(row1.B6SHDT.toString());
row2.NEXT_ORDER_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6WNOI);
row2.CONFIRMATION_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6TCFN);
row2.ORDER_CONFIRMATION_PRINTED_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6OCFP);
row2.ORDER_STATUS_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6ORST);
row2.TOTAL_FREEZER_CASES = row1.B6TFZC;
row2.TOTAL_FREEZER_SPLITS = row1.B6TFZS;
row2.TOTAL_COOLER_CASES = row1.B6TCLC;
row2.TOTAL_COOLER_SPLITS = row1.B6TCLS;
row2.TOTAL_DRY_CASES = row1.B6TDRC;
row2.TOTAL_DRY_SPLITS = row1.B6TDRS;
row2.TOTAL_NO_CASES_ORDER = row1.B6TTNC;
row2.TOTAL_NO_SPLITS_ORDER = row1.B6TTSP;
row2.TOTAL_ORDER_WEIGHT = row1.B6TTOW;
row2.TOTAL_CUBE = row1.B6TTOC;
row2.TOTAL_LINES = row1.B6TTL1;
row2.ORDER_TOTAL = row1.B6TTOR;
row2.ORDER_GRAND_TOTAL = row1.B6TTOG;
row2.ORDER_ENTRY_TIME = row1.B6ORTM;
row2.RECORD_TYPE_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6BTRT);
row2.DELIVERY_METHOD = CharSetHandling.convertEBCDICStrToASCII(row1.B6DELM);
row2.MANIFEST_NO = row1.B6MNFS;
row2.IMMEDIATE_ORDER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6IOFL);
row2.BOOKING_ID = row1.B6BOKI;
row2.INCOMPLETE_ORDER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6IORF);
row2.FOODSHOW_PROMOTION_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6IDFP);
row2.LAPTOP_ORDER_DATE = TimeStampConverting.convertToDate(row1.B6LODT.toString());
row2.ACCOUNT_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6ACT1);
row2.USER_FIELD_1 = CharSetHandling.convertEBCDICStrToASCII(row1.B6USR1);
row2.DELIVERY_DATE = TimeStampConverting.convertToDate(row1.B6DLDT.toString());
row2.EMPLOYEE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6EMP);
row2.RESHIP_STATUS = CharSetHandling.convertEBCDICStrToASCII(row1.B6STRE);
row2.HOLD_ORDER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6HOFL);
row2.RELEASE_ORDER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6ROFL);
row2.HOLD_ORDER_REASON_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6HORC);
row2.RELEASE_ORDER_REASON_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6RORC);
row2.TAX_AMOUNT = row1.B6TXAM;
row2.SEND_IMMEDIATE_ORDER_ROUTING = CharSetHandling.convertEBCDICStrToASCII(row1.B6SIOR);
row2.REMOTE_ORDER_ENTRY_MODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6ROEM);
row2.REMOTE_ORDER_CONFIRMATION_NO = row1.B6RMCN;
row2.FAX_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6FAX);
row2.PRIMARY_MA = CharSetHandling.convertEBCDICStrToASCII(row1.B6PRMA);
row2.GENERIC_LAST_USED_NO = row1.B6GCNO;
row2.CALL_END_TIME = row1.B6WCET;
row2.CALL_START_TIME_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6WCST);
row2.CALL_END_TIME_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6WCEN);
row2.RECORD_LOGICALLY_LOCKED_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6RLLF);
row2.ERROR_STATUS_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6PEFL);
row2.REQUEST_STATUS_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6RQSF);
row2.ORDER_DETAIL_LINE_NO = row1.B6ODLN;
row2.ENTITY_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENID);
row2.PARENT_ENTITY_1 = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENT1);
row2.PARENT_ENTITY_2 = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENT2);
row2.PARENT_ENTITY_3 = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENT3);
row2.CANCEL_DATE = TimeStampConverting.convertToDate(row1.B6CNDT.toString());
row2.SERVICE_ORDER_NO = row1.B6SORD;
row2.CREATE_TARGET_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6TGCI);
row2.VENDOR_APPROVAL_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6VPAN);
row2.REQUESTED_BY = CharSetHandling.convertEBCDICStrToASCII(row1.B6RQBY);
row2.TARGET_DESC = CharSetHandling.convertEBCDICStrToASCII(row1.B6TDES);
row2.BILL_BACK_VENDOR_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6BBVF);
row2.NO_OF_AP_ROLL_DAYS = row1.B6APRD;
row2.RETURN_AUTH_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6RANO);
row2.DISPENSER_EQUIPMENT_ITEM = CharSetHandling.convertEBCDICStrToASCII(row1.B6ITDE);
row2.LAPTOP_USER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6LTUF);
row2.LAPTOP_ORDER_NO = row1.B6LODN;
row2.LAPTOP_ZID_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6LTZN);
row2.STOP_NO = row1.B6STOP;
row2.ENTITY_UPDATED_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENUF);
row2.MAJOR_CLASS = CharSetHandling.convertEBCDICStrToASCII(row1.B6MACL);
row2.SWMS_RECOVERY_INVOICE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6SRIN);
row2.DEFAULT_ROUTE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6DFRN);
row2.CONFIRM_NO = row1.B6M6CN;
row2.CONTAINER_GROUP_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6CNTN);
row2.SEPARATE_CONTAINER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6CTFG);
row2.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.B6EADT.toString(),row1.B6EATM.toString());
row2.CREATED_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6EAID);
row2.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.B6MODT.toString(),row1.B6MOTM.toString());
row2.UPDATED_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6MOID);
row2.IS_DELETED = false;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row2 - " + (row2==null? "": row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ORDER_PROCESS_HEADER = null;


// # Output table : 'ORDER_PROCESS_HEADER'
count_ORDER_PROCESS_HEADER_tMap_1++;

ORDER_PROCESS_HEADER_tmp.SITE_ID = row2.SITE_ID;
ORDER_PROCESS_HEADER_tmp.ORDER_NO = row2.ORDER_NO;
ORDER_PROCESS_HEADER_tmp.ORDER_TYPE = row2.ORDER_TYPE;
ORDER_PROCESS_HEADER_tmp.SHIP_TO_CUST = row2.SHIP_TO_CUST;
ORDER_PROCESS_HEADER_tmp.SHIPPING_ADDRESS_ID = row2.SHIPPING_ADDRESS_ID;
ORDER_PROCESS_HEADER_tmp.NATIONAL_ACCOUNT_NO = row2.NATIONAL_ACCOUNT_NO;
ORDER_PROCESS_HEADER_tmp.PURCHASE_ORDER_NO = row2.PURCHASE_ORDER_NO;
ORDER_PROCESS_HEADER_tmp.CUSTOMER_CATEGORY_CODE = row2.CUSTOMER_CATEGORY_CODE;
ORDER_PROCESS_HEADER_tmp.ROUTING_GROUP_CODE = row2.ROUTING_GROUP_CODE;
ORDER_PROCESS_HEADER_tmp.ALLOCATION_TYPE = row2.ALLOCATION_TYPE;
ORDER_PROCESS_HEADER_tmp.ROUTE_TO_NO = row2.ROUTE_TO_NO;
ORDER_PROCESS_HEADER_tmp.ROUTE_NO = row2.ROUTE_NO;
ORDER_PROCESS_HEADER_tmp.WILL_CALL_NAME = row2.WILL_CALL_NAME;
ORDER_PROCESS_HEADER_tmp.WILL_CALL_START_TIME = row2.WILL_CALL_START_TIME;
ORDER_PROCESS_HEADER_tmp.SEPARATE_INVOICE = row2.SEPARATE_INVOICE;
ORDER_PROCESS_HEADER_tmp.ORDER_DATE = row2.ORDER_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",row2.ORDER_DATE):null ;
ORDER_PROCESS_HEADER_tmp.SHIP_OR_PICKUP_DATE = row2.SHIP_OR_PICKUP_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",row2.SHIP_OR_PICKUP_DATE):null ;
ORDER_PROCESS_HEADER_tmp.NEXT_ORDER_INDICATOR = row2.NEXT_ORDER_INDICATOR;
ORDER_PROCESS_HEADER_tmp.CONFIRMATION_NO = row2.CONFIRMATION_NO;
ORDER_PROCESS_HEADER_tmp.ORDER_CONFIRMATION_PRINTED_FLAG = row2.ORDER_CONFIRMATION_PRINTED_FLAG;
ORDER_PROCESS_HEADER_tmp.ORDER_STATUS_CODE = row2.ORDER_STATUS_CODE;
ORDER_PROCESS_HEADER_tmp.TOTAL_FREEZER_CASES = row2.TOTAL_FREEZER_CASES;
ORDER_PROCESS_HEADER_tmp.TOTAL_FREEZER_SPLITS = row2.TOTAL_FREEZER_SPLITS;
ORDER_PROCESS_HEADER_tmp.TOTAL_COOLER_CASES = row2.TOTAL_COOLER_CASES;
ORDER_PROCESS_HEADER_tmp.TOTAL_COOLER_SPLITS = row2.TOTAL_COOLER_SPLITS;
ORDER_PROCESS_HEADER_tmp.TOTAL_DRY_CASES = row2.TOTAL_DRY_CASES;
ORDER_PROCESS_HEADER_tmp.TOTAL_DRY_SPLITS = row2.TOTAL_DRY_SPLITS;
ORDER_PROCESS_HEADER_tmp.TOTAL_NO_CASES_ORDER = row2.TOTAL_NO_CASES_ORDER;
ORDER_PROCESS_HEADER_tmp.TOTAL_NO_SPLITS_ORDER = row2.TOTAL_NO_SPLITS_ORDER;
ORDER_PROCESS_HEADER_tmp.TOTAL_ORDER_WEIGHT = row2.TOTAL_ORDER_WEIGHT;
ORDER_PROCESS_HEADER_tmp.TOTAL_CUBE = row2.TOTAL_CUBE;
ORDER_PROCESS_HEADER_tmp.TOTAL_LINES = row2.TOTAL_LINES;
ORDER_PROCESS_HEADER_tmp.ORDER_TOTAL = row2.ORDER_TOTAL;
ORDER_PROCESS_HEADER_tmp.ORDER_GRAND_TOTAL = row2.ORDER_GRAND_TOTAL;
ORDER_PROCESS_HEADER_tmp.ORDER_ENTRY_TIME = row2.ORDER_ENTRY_TIME;
ORDER_PROCESS_HEADER_tmp.RECORD_TYPE_INDICATOR = row2.RECORD_TYPE_INDICATOR;
ORDER_PROCESS_HEADER_tmp.DELIVERY_METHOD = row2.DELIVERY_METHOD;
ORDER_PROCESS_HEADER_tmp.MANIFEST_NO = row2.MANIFEST_NO;
ORDER_PROCESS_HEADER_tmp.IMMEDIATE_ORDER_FLAG = row2.IMMEDIATE_ORDER_FLAG;
ORDER_PROCESS_HEADER_tmp.BOOKING_ID = row2.BOOKING_ID;
ORDER_PROCESS_HEADER_tmp.INCOMPLETE_ORDER_FLAG = row2.INCOMPLETE_ORDER_FLAG;
ORDER_PROCESS_HEADER_tmp.FOODSHOW_PROMOTION_ID = row2.FOODSHOW_PROMOTION_ID;
ORDER_PROCESS_HEADER_tmp.LAPTOP_ORDER_DATE = row2.LAPTOP_ORDER_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",row2.LAPTOP_ORDER_DATE):null ;
ORDER_PROCESS_HEADER_tmp.ACCOUNT_NO = row2.ACCOUNT_NO;
ORDER_PROCESS_HEADER_tmp.USER_FIELD_1 = row2.USER_FIELD_1;
ORDER_PROCESS_HEADER_tmp.DELIVERY_DATE = row2.DELIVERY_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",row2.DELIVERY_DATE):null ;
ORDER_PROCESS_HEADER_tmp.EMPLOYEE_NO = row2.EMPLOYEE_NO;
ORDER_PROCESS_HEADER_tmp.RESHIP_STATUS = row2.RESHIP_STATUS;
ORDER_PROCESS_HEADER_tmp.HOLD_ORDER_FLAG = row2.HOLD_ORDER_FLAG;
ORDER_PROCESS_HEADER_tmp.RELEASE_ORDER_FLAG = row2.RELEASE_ORDER_FLAG;
ORDER_PROCESS_HEADER_tmp.HOLD_ORDER_REASON_CODE = row2.HOLD_ORDER_REASON_CODE;
ORDER_PROCESS_HEADER_tmp.RELEASE_ORDER_REASON_CODE = row2.RELEASE_ORDER_REASON_CODE;
ORDER_PROCESS_HEADER_tmp.TAX_AMOUNT = row2.TAX_AMOUNT;
ORDER_PROCESS_HEADER_tmp.SEND_IMMEDIATE_ORDER_ROUTING = row2.SEND_IMMEDIATE_ORDER_ROUTING;
ORDER_PROCESS_HEADER_tmp.REMOTE_ORDER_ENTRY_MODE = row2.REMOTE_ORDER_ENTRY_MODE;
ORDER_PROCESS_HEADER_tmp.REMOTE_ORDER_CONFIRMATION_NO = row2.REMOTE_ORDER_CONFIRMATION_NO;
ORDER_PROCESS_HEADER_tmp.FAX_NO = row2.FAX_NO;
ORDER_PROCESS_HEADER_tmp.PRIMARY_MA = row2.PRIMARY_MA;
ORDER_PROCESS_HEADER_tmp.GENERIC_LAST_USED_NO = row2.GENERIC_LAST_USED_NO;
ORDER_PROCESS_HEADER_tmp.CALL_END_TIME = row2.CALL_END_TIME;
ORDER_PROCESS_HEADER_tmp.CALL_START_TIME_INDICATOR = row2.CALL_START_TIME_INDICATOR;
ORDER_PROCESS_HEADER_tmp.CALL_END_TIME_INDICATOR = row2.CALL_END_TIME_INDICATOR;
ORDER_PROCESS_HEADER_tmp.RECORD_LOGICALLY_LOCKED_FLAG = row2.RECORD_LOGICALLY_LOCKED_FLAG;
ORDER_PROCESS_HEADER_tmp.ERROR_STATUS_FLAG = row2.ERROR_STATUS_FLAG;
ORDER_PROCESS_HEADER_tmp.REQUEST_STATUS_FLAG = row2.REQUEST_STATUS_FLAG;
ORDER_PROCESS_HEADER_tmp.ORDER_DETAIL_LINE_NO = row2.ORDER_DETAIL_LINE_NO;
ORDER_PROCESS_HEADER_tmp.ENTITY_ID = row2.ENTITY_ID;
ORDER_PROCESS_HEADER_tmp.PARENT_ENTITY_1 = row2.PARENT_ENTITY_1;
ORDER_PROCESS_HEADER_tmp.PARENT_ENTITY_2 = row2.PARENT_ENTITY_2;
ORDER_PROCESS_HEADER_tmp.PARENT_ENTITY_3 = row2.PARENT_ENTITY_3;
ORDER_PROCESS_HEADER_tmp.CANCEL_DATE = row2.CANCEL_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",row2.CANCEL_DATE):null ;
ORDER_PROCESS_HEADER_tmp.SERVICE_ORDER_NO = row2.SERVICE_ORDER_NO;
ORDER_PROCESS_HEADER_tmp.CREATE_TARGET_INDICATOR = row2.CREATE_TARGET_INDICATOR;
ORDER_PROCESS_HEADER_tmp.VENDOR_APPROVAL_NO = row2.VENDOR_APPROVAL_NO;
ORDER_PROCESS_HEADER_tmp.REQUESTED_BY = row2.REQUESTED_BY;
ORDER_PROCESS_HEADER_tmp.TARGET_DESC = row2.TARGET_DESC;
ORDER_PROCESS_HEADER_tmp.BILL_BACK_VENDOR_FLAG = row2.BILL_BACK_VENDOR_FLAG;
ORDER_PROCESS_HEADER_tmp.NO_OF_AP_ROLL_DAYS = row2.NO_OF_AP_ROLL_DAYS;
ORDER_PROCESS_HEADER_tmp.RETURN_AUTH_NO = row2.RETURN_AUTH_NO;
ORDER_PROCESS_HEADER_tmp.DISPENSER_EQUIPMENT_ITEM = row2.DISPENSER_EQUIPMENT_ITEM;
ORDER_PROCESS_HEADER_tmp.LAPTOP_USER_FLAG = row2.LAPTOP_USER_FLAG;
ORDER_PROCESS_HEADER_tmp.LAPTOP_ORDER_NO = row2.LAPTOP_ORDER_NO;
ORDER_PROCESS_HEADER_tmp.LAPTOP_ZID_NO = row2.LAPTOP_ZID_NO;
ORDER_PROCESS_HEADER_tmp.STOP_NO = row2.STOP_NO;
ORDER_PROCESS_HEADER_tmp.ENTITY_UPDATED_FLAG = row2.ENTITY_UPDATED_FLAG;
ORDER_PROCESS_HEADER_tmp.MAJOR_CLASS = row2.MAJOR_CLASS;
ORDER_PROCESS_HEADER_tmp.SWMS_RECOVERY_INVOICE_NO = row2.SWMS_RECOVERY_INVOICE_NO;
ORDER_PROCESS_HEADER_tmp.DEFAULT_ROUTE_NO = row2.DEFAULT_ROUTE_NO;
ORDER_PROCESS_HEADER_tmp.CONFIRM_NO = row2.CONFIRM_NO;
ORDER_PROCESS_HEADER_tmp.CONTAINER_GROUP_ID = row2.CONTAINER_GROUP_ID;
ORDER_PROCESS_HEADER_tmp.SEPARATE_CONTAINER_FLAG = row2.SEPARATE_CONTAINER_FLAG;
ORDER_PROCESS_HEADER_tmp.CREATED_TIMESTAMP = row2.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",row2.CREATED_TIMESTAMP):null ;
ORDER_PROCESS_HEADER_tmp.CREATED_USER_ID = row2.CREATED_USER_ID;
ORDER_PROCESS_HEADER_tmp.UPDATED_TIMESTAMP = row2.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",row2.UPDATED_TIMESTAMP):null ;
ORDER_PROCESS_HEADER_tmp.UPDATED_USER_ID = row2.UPDATED_USER_ID;
ORDER_PROCESS_HEADER_tmp.IS_DELETED = row2.IS_DELETED;
ORDER_PROCESS_HEADER_tmp.CREATED_ORIGIN = "SUS";
ORDER_PROCESS_HEADER_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
ORDER_PROCESS_HEADER_tmp.UPDATED_ORIGIN = "SUS";
ORDER_PROCESS_HEADER_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
ORDER_PROCESS_HEADER_tmp.B6PF_SVOP = context.svop;
ORDER_PROCESS_HEADER = ORDER_PROCESS_HEADER_tmp;
log.debug("tMap_1 - Outputting the record " + count_ORDER_PROCESS_HEADER_tMap_1 + " of the output table 'ORDER_PROCESS_HEADER'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "ORDER_PROCESS_HEADER"
if(ORDER_PROCESS_HEADER != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ORDER_PROCESS_HEADER"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("ORDER_PROCESS_HEADER - " + (ORDER_PROCESS_HEADER==null? "": ORDER_PROCESS_HEADER.toLogString()));
    			}
    		



        whetherReject_tDBOutput_2 = false;
                    if(ORDER_PROCESS_HEADER.SITE_ID == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, ORDER_PROCESS_HEADER.SITE_ID);
}

                    pstmt_tDBOutput_2.setBigDecimal(2, ORDER_PROCESS_HEADER.ORDER_NO);

                    if(ORDER_PROCESS_HEADER.ORDER_TYPE == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, ORDER_PROCESS_HEADER.ORDER_TYPE);
}

                    if(ORDER_PROCESS_HEADER.SHIP_TO_CUST == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, ORDER_PROCESS_HEADER.SHIP_TO_CUST);
}

                    if(ORDER_PROCESS_HEADER.SHIPPING_ADDRESS_ID == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, ORDER_PROCESS_HEADER.SHIPPING_ADDRESS_ID);
}

                    if(ORDER_PROCESS_HEADER.NATIONAL_ACCOUNT_NO == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, ORDER_PROCESS_HEADER.NATIONAL_ACCOUNT_NO);
}

                    if(ORDER_PROCESS_HEADER.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, ORDER_PROCESS_HEADER.PURCHASE_ORDER_NO);
}

                    if(ORDER_PROCESS_HEADER.CUSTOMER_CATEGORY_CODE == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, ORDER_PROCESS_HEADER.CUSTOMER_CATEGORY_CODE);
}

                    pstmt_tDBOutput_2.setBigDecimal(9, ORDER_PROCESS_HEADER.ROUTING_GROUP_CODE);

                    if(ORDER_PROCESS_HEADER.ALLOCATION_TYPE == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(10, ORDER_PROCESS_HEADER.ALLOCATION_TYPE);
}

                    if(ORDER_PROCESS_HEADER.ROUTE_TO_NO == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(11, ORDER_PROCESS_HEADER.ROUTE_TO_NO);
}

                    if(ORDER_PROCESS_HEADER.ROUTE_NO == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(12, ORDER_PROCESS_HEADER.ROUTE_NO);
}

                    if(ORDER_PROCESS_HEADER.WILL_CALL_NAME == null) {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(13, ORDER_PROCESS_HEADER.WILL_CALL_NAME);
}

                    pstmt_tDBOutput_2.setBigDecimal(14, ORDER_PROCESS_HEADER.WILL_CALL_START_TIME);

                    if(ORDER_PROCESS_HEADER.SEPARATE_INVOICE == null) {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(15, ORDER_PROCESS_HEADER.SEPARATE_INVOICE);
}

                    if(ORDER_PROCESS_HEADER.ORDER_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(16, new java.sql.Timestamp(ORDER_PROCESS_HEADER.ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_HEADER.SHIP_OR_PICKUP_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(17, new java.sql.Timestamp(ORDER_PROCESS_HEADER.SHIP_OR_PICKUP_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(17, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_HEADER.NEXT_ORDER_INDICATOR == null) {
pstmt_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(18, ORDER_PROCESS_HEADER.NEXT_ORDER_INDICATOR);
}

                    if(ORDER_PROCESS_HEADER.CONFIRMATION_NO == null) {
pstmt_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(19, ORDER_PROCESS_HEADER.CONFIRMATION_NO);
}

                    if(ORDER_PROCESS_HEADER.ORDER_CONFIRMATION_PRINTED_FLAG == null) {
pstmt_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(20, ORDER_PROCESS_HEADER.ORDER_CONFIRMATION_PRINTED_FLAG);
}

                    if(ORDER_PROCESS_HEADER.ORDER_STATUS_CODE == null) {
pstmt_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(21, ORDER_PROCESS_HEADER.ORDER_STATUS_CODE);
}

                    pstmt_tDBOutput_2.setBigDecimal(22, ORDER_PROCESS_HEADER.TOTAL_FREEZER_CASES);

                    pstmt_tDBOutput_2.setBigDecimal(23, ORDER_PROCESS_HEADER.TOTAL_FREEZER_SPLITS);

                    pstmt_tDBOutput_2.setBigDecimal(24, ORDER_PROCESS_HEADER.TOTAL_COOLER_CASES);

                    pstmt_tDBOutput_2.setBigDecimal(25, ORDER_PROCESS_HEADER.TOTAL_COOLER_SPLITS);

                    pstmt_tDBOutput_2.setBigDecimal(26, ORDER_PROCESS_HEADER.TOTAL_DRY_CASES);

                    pstmt_tDBOutput_2.setBigDecimal(27, ORDER_PROCESS_HEADER.TOTAL_DRY_SPLITS);

                    pstmt_tDBOutput_2.setBigDecimal(28, ORDER_PROCESS_HEADER.TOTAL_NO_CASES_ORDER);

                    pstmt_tDBOutput_2.setBigDecimal(29, ORDER_PROCESS_HEADER.TOTAL_NO_SPLITS_ORDER);

                    pstmt_tDBOutput_2.setBigDecimal(30, ORDER_PROCESS_HEADER.TOTAL_ORDER_WEIGHT);

                    pstmt_tDBOutput_2.setBigDecimal(31, ORDER_PROCESS_HEADER.TOTAL_CUBE);

                    pstmt_tDBOutput_2.setBigDecimal(32, ORDER_PROCESS_HEADER.TOTAL_LINES);

                    pstmt_tDBOutput_2.setBigDecimal(33, ORDER_PROCESS_HEADER.ORDER_TOTAL);

                    pstmt_tDBOutput_2.setBigDecimal(34, ORDER_PROCESS_HEADER.ORDER_GRAND_TOTAL);

                    pstmt_tDBOutput_2.setBigDecimal(35, ORDER_PROCESS_HEADER.ORDER_ENTRY_TIME);

                    if(ORDER_PROCESS_HEADER.RECORD_TYPE_INDICATOR == null) {
pstmt_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(36, ORDER_PROCESS_HEADER.RECORD_TYPE_INDICATOR);
}

                    if(ORDER_PROCESS_HEADER.DELIVERY_METHOD == null) {
pstmt_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(37, ORDER_PROCESS_HEADER.DELIVERY_METHOD);
}

                    pstmt_tDBOutput_2.setBigDecimal(38, ORDER_PROCESS_HEADER.MANIFEST_NO);

                    if(ORDER_PROCESS_HEADER.IMMEDIATE_ORDER_FLAG == null) {
pstmt_tDBOutput_2.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(39, ORDER_PROCESS_HEADER.IMMEDIATE_ORDER_FLAG);
}

                    pstmt_tDBOutput_2.setBigDecimal(40, ORDER_PROCESS_HEADER.BOOKING_ID);

                    if(ORDER_PROCESS_HEADER.INCOMPLETE_ORDER_FLAG == null) {
pstmt_tDBOutput_2.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(41, ORDER_PROCESS_HEADER.INCOMPLETE_ORDER_FLAG);
}

                    if(ORDER_PROCESS_HEADER.FOODSHOW_PROMOTION_ID == null) {
pstmt_tDBOutput_2.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(42, ORDER_PROCESS_HEADER.FOODSHOW_PROMOTION_ID);
}

                    if(ORDER_PROCESS_HEADER.LAPTOP_ORDER_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(43, new java.sql.Timestamp(ORDER_PROCESS_HEADER.LAPTOP_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(43, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_HEADER.ACCOUNT_NO == null) {
pstmt_tDBOutput_2.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(44, ORDER_PROCESS_HEADER.ACCOUNT_NO);
}

                    if(ORDER_PROCESS_HEADER.USER_FIELD_1 == null) {
pstmt_tDBOutput_2.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(45, ORDER_PROCESS_HEADER.USER_FIELD_1);
}

                    if(ORDER_PROCESS_HEADER.DELIVERY_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(46, new java.sql.Timestamp(ORDER_PROCESS_HEADER.DELIVERY_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(46, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_HEADER.EMPLOYEE_NO == null) {
pstmt_tDBOutput_2.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(47, ORDER_PROCESS_HEADER.EMPLOYEE_NO);
}

                    if(ORDER_PROCESS_HEADER.RESHIP_STATUS == null) {
pstmt_tDBOutput_2.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(48, ORDER_PROCESS_HEADER.RESHIP_STATUS);
}

                    if(ORDER_PROCESS_HEADER.HOLD_ORDER_FLAG == null) {
pstmt_tDBOutput_2.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(49, ORDER_PROCESS_HEADER.HOLD_ORDER_FLAG);
}

                    if(ORDER_PROCESS_HEADER.RELEASE_ORDER_FLAG == null) {
pstmt_tDBOutput_2.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(50, ORDER_PROCESS_HEADER.RELEASE_ORDER_FLAG);
}

                    if(ORDER_PROCESS_HEADER.HOLD_ORDER_REASON_CODE == null) {
pstmt_tDBOutput_2.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(51, ORDER_PROCESS_HEADER.HOLD_ORDER_REASON_CODE);
}

                    if(ORDER_PROCESS_HEADER.RELEASE_ORDER_REASON_CODE == null) {
pstmt_tDBOutput_2.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(52, ORDER_PROCESS_HEADER.RELEASE_ORDER_REASON_CODE);
}

                    pstmt_tDBOutput_2.setBigDecimal(53, ORDER_PROCESS_HEADER.TAX_AMOUNT);

                    if(ORDER_PROCESS_HEADER.SEND_IMMEDIATE_ORDER_ROUTING == null) {
pstmt_tDBOutput_2.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(54, ORDER_PROCESS_HEADER.SEND_IMMEDIATE_ORDER_ROUTING);
}

                    if(ORDER_PROCESS_HEADER.REMOTE_ORDER_ENTRY_MODE == null) {
pstmt_tDBOutput_2.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(55, ORDER_PROCESS_HEADER.REMOTE_ORDER_ENTRY_MODE);
}

                    pstmt_tDBOutput_2.setBigDecimal(56, ORDER_PROCESS_HEADER.REMOTE_ORDER_CONFIRMATION_NO);

                    if(ORDER_PROCESS_HEADER.FAX_NO == null) {
pstmt_tDBOutput_2.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(57, ORDER_PROCESS_HEADER.FAX_NO);
}

                    if(ORDER_PROCESS_HEADER.PRIMARY_MA == null) {
pstmt_tDBOutput_2.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(58, ORDER_PROCESS_HEADER.PRIMARY_MA);
}

                    pstmt_tDBOutput_2.setBigDecimal(59, ORDER_PROCESS_HEADER.GENERIC_LAST_USED_NO);

                    pstmt_tDBOutput_2.setBigDecimal(60, ORDER_PROCESS_HEADER.CALL_END_TIME);

                    if(ORDER_PROCESS_HEADER.CALL_START_TIME_INDICATOR == null) {
pstmt_tDBOutput_2.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(61, ORDER_PROCESS_HEADER.CALL_START_TIME_INDICATOR);
}

                    if(ORDER_PROCESS_HEADER.CALL_END_TIME_INDICATOR == null) {
pstmt_tDBOutput_2.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(62, ORDER_PROCESS_HEADER.CALL_END_TIME_INDICATOR);
}

                    if(ORDER_PROCESS_HEADER.RECORD_LOGICALLY_LOCKED_FLAG == null) {
pstmt_tDBOutput_2.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(63, ORDER_PROCESS_HEADER.RECORD_LOGICALLY_LOCKED_FLAG);
}

                    if(ORDER_PROCESS_HEADER.ERROR_STATUS_FLAG == null) {
pstmt_tDBOutput_2.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(64, ORDER_PROCESS_HEADER.ERROR_STATUS_FLAG);
}

                    if(ORDER_PROCESS_HEADER.REQUEST_STATUS_FLAG == null) {
pstmt_tDBOutput_2.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(65, ORDER_PROCESS_HEADER.REQUEST_STATUS_FLAG);
}

                    pstmt_tDBOutput_2.setBigDecimal(66, ORDER_PROCESS_HEADER.ORDER_DETAIL_LINE_NO);

                    if(ORDER_PROCESS_HEADER.ENTITY_ID == null) {
pstmt_tDBOutput_2.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(67, ORDER_PROCESS_HEADER.ENTITY_ID);
}

                    if(ORDER_PROCESS_HEADER.PARENT_ENTITY_1 == null) {
pstmt_tDBOutput_2.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(68, ORDER_PROCESS_HEADER.PARENT_ENTITY_1);
}

                    if(ORDER_PROCESS_HEADER.PARENT_ENTITY_2 == null) {
pstmt_tDBOutput_2.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(69, ORDER_PROCESS_HEADER.PARENT_ENTITY_2);
}

                    if(ORDER_PROCESS_HEADER.PARENT_ENTITY_3 == null) {
pstmt_tDBOutput_2.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(70, ORDER_PROCESS_HEADER.PARENT_ENTITY_3);
}

                    if(ORDER_PROCESS_HEADER.CANCEL_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(71, new java.sql.Timestamp(ORDER_PROCESS_HEADER.CANCEL_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(71, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_2.setBigDecimal(72, ORDER_PROCESS_HEADER.SERVICE_ORDER_NO);

                    if(ORDER_PROCESS_HEADER.CREATE_TARGET_INDICATOR == null) {
pstmt_tDBOutput_2.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(73, ORDER_PROCESS_HEADER.CREATE_TARGET_INDICATOR);
}

                    if(ORDER_PROCESS_HEADER.VENDOR_APPROVAL_NO == null) {
pstmt_tDBOutput_2.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(74, ORDER_PROCESS_HEADER.VENDOR_APPROVAL_NO);
}

                    if(ORDER_PROCESS_HEADER.REQUESTED_BY == null) {
pstmt_tDBOutput_2.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(75, ORDER_PROCESS_HEADER.REQUESTED_BY);
}

                    if(ORDER_PROCESS_HEADER.TARGET_DESC == null) {
pstmt_tDBOutput_2.setNull(76, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(76, ORDER_PROCESS_HEADER.TARGET_DESC);
}

                    if(ORDER_PROCESS_HEADER.BILL_BACK_VENDOR_FLAG == null) {
pstmt_tDBOutput_2.setNull(77, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(77, ORDER_PROCESS_HEADER.BILL_BACK_VENDOR_FLAG);
}

                    pstmt_tDBOutput_2.setBigDecimal(78, ORDER_PROCESS_HEADER.NO_OF_AP_ROLL_DAYS);

                    if(ORDER_PROCESS_HEADER.RETURN_AUTH_NO == null) {
pstmt_tDBOutput_2.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(79, ORDER_PROCESS_HEADER.RETURN_AUTH_NO);
}

                    if(ORDER_PROCESS_HEADER.DISPENSER_EQUIPMENT_ITEM == null) {
pstmt_tDBOutput_2.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(80, ORDER_PROCESS_HEADER.DISPENSER_EQUIPMENT_ITEM);
}

                    if(ORDER_PROCESS_HEADER.LAPTOP_USER_FLAG == null) {
pstmt_tDBOutput_2.setNull(81, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(81, ORDER_PROCESS_HEADER.LAPTOP_USER_FLAG);
}

                    pstmt_tDBOutput_2.setBigDecimal(82, ORDER_PROCESS_HEADER.LAPTOP_ORDER_NO);

                    if(ORDER_PROCESS_HEADER.LAPTOP_ZID_NO == null) {
pstmt_tDBOutput_2.setNull(83, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(83, ORDER_PROCESS_HEADER.LAPTOP_ZID_NO);
}

                    pstmt_tDBOutput_2.setBigDecimal(84, ORDER_PROCESS_HEADER.STOP_NO);

                    if(ORDER_PROCESS_HEADER.ENTITY_UPDATED_FLAG == null) {
pstmt_tDBOutput_2.setNull(85, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(85, ORDER_PROCESS_HEADER.ENTITY_UPDATED_FLAG);
}

                    if(ORDER_PROCESS_HEADER.MAJOR_CLASS == null) {
pstmt_tDBOutput_2.setNull(86, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(86, ORDER_PROCESS_HEADER.MAJOR_CLASS);
}

                    if(ORDER_PROCESS_HEADER.SWMS_RECOVERY_INVOICE_NO == null) {
pstmt_tDBOutput_2.setNull(87, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(87, ORDER_PROCESS_HEADER.SWMS_RECOVERY_INVOICE_NO);
}

                    if(ORDER_PROCESS_HEADER.DEFAULT_ROUTE_NO == null) {
pstmt_tDBOutput_2.setNull(88, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(88, ORDER_PROCESS_HEADER.DEFAULT_ROUTE_NO);
}

                    pstmt_tDBOutput_2.setBigDecimal(89, ORDER_PROCESS_HEADER.CONFIRM_NO);

                    if(ORDER_PROCESS_HEADER.CONTAINER_GROUP_ID == null) {
pstmt_tDBOutput_2.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(90, ORDER_PROCESS_HEADER.CONTAINER_GROUP_ID);
}

                    if(ORDER_PROCESS_HEADER.SEPARATE_CONTAINER_FLAG == null) {
pstmt_tDBOutput_2.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(91, ORDER_PROCESS_HEADER.SEPARATE_CONTAINER_FLAG);
}

                    if(ORDER_PROCESS_HEADER.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(92, new java.sql.Timestamp(ORDER_PROCESS_HEADER.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(92, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_HEADER.CREATED_USER_ID == null) {
pstmt_tDBOutput_2.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(93, ORDER_PROCESS_HEADER.CREATED_USER_ID);
}

                    if(ORDER_PROCESS_HEADER.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(94, new java.sql.Timestamp(ORDER_PROCESS_HEADER.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(94, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_HEADER.UPDATED_USER_ID == null) {
pstmt_tDBOutput_2.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(95, ORDER_PROCESS_HEADER.UPDATED_USER_ID);
}

                    pstmt_tDBOutput_2.setBoolean(96, ORDER_PROCESS_HEADER.IS_DELETED);

                    if(ORDER_PROCESS_HEADER.CREATED_ORIGIN == null) {
pstmt_tDBOutput_2.setNull(97, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(97, ORDER_PROCESS_HEADER.CREATED_ORIGIN);
}

                    if(ORDER_PROCESS_HEADER.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(98, new java.sql.Timestamp(ORDER_PROCESS_HEADER.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(98, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_HEADER.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_2.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(99, ORDER_PROCESS_HEADER.UPDATED_ORIGIN);
}

                    if(ORDER_PROCESS_HEADER.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(100, new java.sql.Timestamp(ORDER_PROCESS_HEADER.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(100, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_HEADER.B6PF_SVOP == null) {
pstmt_tDBOutput_2.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(101, ORDER_PROCESS_HEADER.B6PF_SVOP);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Adding the record ")  + (nb_line_tDBOutput_2)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_2)  + (" record(s).") );
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "ORDER_PROCESS_HEADER"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
	    		log.debug("tDBInput_1 - Closing the connection to the database.");
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_1", end_Hash.get("tDBInput_1")-start_Hash.get("tDBInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'ORDER_PROCESS_HEADER': " + count_ORDER_PROCESS_HEADER_tMap_1 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_2)  + (" record(s).") );
			}
			conn_tDBOutput_2.commit();
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_2 = 0;
			}
			commitCounter_tDBOutput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_2 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_2)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ORDER_PROCESS_HEADER");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Done.") );

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_2", end_Hash.get("tDBOutput_2")-start_Hash.get("tDBOutput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_2.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
            log.error("tDBOutput_2 - "  + (errorMessage_tDBOutput_2) );
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "PROD";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Order_Process_Header_Inbound Order_Process_Header_InboundClass = new Order_Process_Header_Inbound();

        int exitCode = Order_Process_Header_InboundClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'Order_Process_Header_Inbound' - Done.");
	        }

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
    	    }
        	log.info("TalendJob: 'Order_Process_Header_Inbound' - Start.");
    	
    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Order_Process_Header_Inbound.class.getClassLoader().getResourceAsStream("sus_sli_etl/order_process_header_inbound_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Order_Process_Header_Inbound.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("opco", "id_String");
                        if(context.getStringValue("opco") == null) {
                            context.opco = null;
                        } else {
                            context.opco=(String) context.getProperty("opco");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("sopco", "id_String");
                        if(context.getStringValue("sopco") == null) {
                            context.sopco = null;
                        } else {
                            context.sopco=(String) context.getProperty("sopco");
                        }
                        context.setContextType("svop", "id_String");
                        if(context.getStringValue("svop") == null) {
                            context.svop = null;
                        } else {
                            context.svop=(String) context.getProperty("svop");
                        }
                        context.setContextType("GIM_AdditionalParams", "id_String");
                        if(context.getStringValue("GIM_AdditionalParams") == null) {
                            context.GIM_AdditionalParams = null;
                        } else {
                            context.GIM_AdditionalParams=(String) context.getProperty("GIM_AdditionalParams");
                        }
                        context.setContextType("GIM_Database", "id_String");
                        if(context.getStringValue("GIM_Database") == null) {
                            context.GIM_Database = null;
                        } else {
                            context.GIM_Database=(String) context.getProperty("GIM_Database");
                        }
                        context.setContextType("GIM_Login", "id_String");
                        if(context.getStringValue("GIM_Login") == null) {
                            context.GIM_Login = null;
                        } else {
                            context.GIM_Login=(String) context.getProperty("GIM_Login");
                        }
                        context.setContextType("GIM_Password", "id_Password");
                        if(context.getStringValue("GIM_Password") == null) {
                            context.GIM_Password = null;
                        } else {
                            String pwd_GIM_Password_value = context.getProperty("GIM_Password");
                            context.GIM_Password = null;
                            if(pwd_GIM_Password_value!=null) {
                                if(context_param.containsKey("GIM_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.GIM_Password = pwd_GIM_Password_value;
                                } else if (!pwd_GIM_Password_value.isEmpty()) {
                                    try {
                                        context.GIM_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_GIM_Password_value);
                                        context.put("GIM_Password",context.GIM_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("GIM_Port", "id_String");
                        if(context.getStringValue("GIM_Port") == null) {
                            context.GIM_Port = null;
                        } else {
                            context.GIM_Port=(String) context.getProperty("GIM_Port");
                        }
                        context.setContextType("GIM_Schema_Demand", "id_String");
                        if(context.getStringValue("GIM_Schema_Demand") == null) {
                            context.GIM_Schema_Demand = null;
                        } else {
                            context.GIM_Schema_Demand=(String) context.getProperty("GIM_Schema_Demand");
                        }
                        context.setContextType("GIM_Schema_Inventory", "id_String");
                        if(context.getStringValue("GIM_Schema_Inventory") == null) {
                            context.GIM_Schema_Inventory = null;
                        } else {
                            context.GIM_Schema_Inventory=(String) context.getProperty("GIM_Schema_Inventory");
                        }
                        context.setContextType("GIM_Schema_Master", "id_String");
                        if(context.getStringValue("GIM_Schema_Master") == null) {
                            context.GIM_Schema_Master = null;
                        } else {
                            context.GIM_Schema_Master=(String) context.getProperty("GIM_Schema_Master");
                        }
                        context.setContextType("GIM_Schema_Migrating_Test", "id_String");
                        if(context.getStringValue("GIM_Schema_Migrating_Test") == null) {
                            context.GIM_Schema_Migrating_Test = null;
                        } else {
                            context.GIM_Schema_Migrating_Test=(String) context.getProperty("GIM_Schema_Migrating_Test");
                        }
                        context.setContextType("GIM_Schema_Order_Processing", "id_String");
                        if(context.getStringValue("GIM_Schema_Order_Processing") == null) {
                            context.GIM_Schema_Order_Processing = null;
                        } else {
                            context.GIM_Schema_Order_Processing=(String) context.getProperty("GIM_Schema_Order_Processing");
                        }
                        context.setContextType("GIM_Schema_PO", "id_String");
                        if(context.getStringValue("GIM_Schema_PO") == null) {
                            context.GIM_Schema_PO = null;
                        } else {
                            context.GIM_Schema_PO=(String) context.getProperty("GIM_Schema_PO");
                        }
                        context.setContextType("GIM_Schema_System", "id_String");
                        if(context.getStringValue("GIM_Schema_System") == null) {
                            context.GIM_Schema_System = null;
                        } else {
                            context.GIM_Schema_System=(String) context.getProperty("GIM_Schema_System");
                        }
                        context.setContextType("GIM_Server", "id_String");
                        if(context.getStringValue("GIM_Server") == null) {
                            context.GIM_Server = null;
                        } else {
                            context.GIM_Server=(String) context.getProperty("GIM_Server");
                        }
                        context.setContextType("SUS_Additional_Params", "id_String");
                        if(context.getStringValue("SUS_Additional_Params") == null) {
                            context.SUS_Additional_Params = null;
                        } else {
                            context.SUS_Additional_Params=(String) context.getProperty("SUS_Additional_Params");
                        }
                        context.setContextType("SUS_Database", "id_String");
                        if(context.getStringValue("SUS_Database") == null) {
                            context.SUS_Database = null;
                        } else {
                            context.SUS_Database=(String) context.getProperty("SUS_Database");
                        }
                        context.setContextType("SUS_Database_ARDBFA", "id_String");
                        if(context.getStringValue("SUS_Database_ARDBFA") == null) {
                            context.SUS_Database_ARDBFA = null;
                        } else {
                            context.SUS_Database_ARDBFA=(String) context.getProperty("SUS_Database_ARDBFA");
                        }
                        context.setContextType("SUS_Login", "id_String");
                        if(context.getStringValue("SUS_Login") == null) {
                            context.SUS_Login = null;
                        } else {
                            context.SUS_Login=(String) context.getProperty("SUS_Login");
                        }
                        context.setContextType("SUS_Password", "id_Password");
                        if(context.getStringValue("SUS_Password") == null) {
                            context.SUS_Password = null;
                        } else {
                            String pwd_SUS_Password_value = context.getProperty("SUS_Password");
                            context.SUS_Password = null;
                            if(pwd_SUS_Password_value!=null) {
                                if(context_param.containsKey("SUS_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SUS_Password = pwd_SUS_Password_value;
                                } else if (!pwd_SUS_Password_value.isEmpty()) {
                                    try {
                                        context.SUS_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SUS_Password_value);
                                        context.put("SUS_Password",context.SUS_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SUS_Port", "id_String");
                        if(context.getStringValue("SUS_Port") == null) {
                            context.SUS_Port = null;
                        } else {
                            context.SUS_Port=(String) context.getProperty("SUS_Port");
                        }
                        context.setContextType("SUS_Schema", "id_String");
                        if(context.getStringValue("SUS_Schema") == null) {
                            context.SUS_Schema = null;
                        } else {
                            context.SUS_Schema=(String) context.getProperty("SUS_Schema");
                        }
                        context.setContextType("SUS_Server", "id_String");
                        if(context.getStringValue("SUS_Server") == null) {
                            context.SUS_Server = null;
                        } else {
                            context.SUS_Server=(String) context.getProperty("SUS_Server");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("opco")) {
                context.opco = (String) parentContextMap.get("opco");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("sopco")) {
                context.sopco = (String) parentContextMap.get("sopco");
            }if (parentContextMap.containsKey("svop")) {
                context.svop = (String) parentContextMap.get("svop");
            }if (parentContextMap.containsKey("GIM_AdditionalParams")) {
                context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
            }if (parentContextMap.containsKey("GIM_Database")) {
                context.GIM_Database = (String) parentContextMap.get("GIM_Database");
            }if (parentContextMap.containsKey("GIM_Login")) {
                context.GIM_Login = (String) parentContextMap.get("GIM_Login");
            }if (parentContextMap.containsKey("GIM_Password")) {
                context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
            }if (parentContextMap.containsKey("GIM_Port")) {
                context.GIM_Port = (String) parentContextMap.get("GIM_Port");
            }if (parentContextMap.containsKey("GIM_Schema_Demand")) {
                context.GIM_Schema_Demand = (String) parentContextMap.get("GIM_Schema_Demand");
            }if (parentContextMap.containsKey("GIM_Schema_Inventory")) {
                context.GIM_Schema_Inventory = (String) parentContextMap.get("GIM_Schema_Inventory");
            }if (parentContextMap.containsKey("GIM_Schema_Master")) {
                context.GIM_Schema_Master = (String) parentContextMap.get("GIM_Schema_Master");
            }if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
                context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
            }if (parentContextMap.containsKey("GIM_Schema_Order_Processing")) {
                context.GIM_Schema_Order_Processing = (String) parentContextMap.get("GIM_Schema_Order_Processing");
            }if (parentContextMap.containsKey("GIM_Schema_PO")) {
                context.GIM_Schema_PO = (String) parentContextMap.get("GIM_Schema_PO");
            }if (parentContextMap.containsKey("GIM_Schema_System")) {
                context.GIM_Schema_System = (String) parentContextMap.get("GIM_Schema_System");
            }if (parentContextMap.containsKey("GIM_Server")) {
                context.GIM_Server = (String) parentContextMap.get("GIM_Server");
            }if (parentContextMap.containsKey("SUS_Additional_Params")) {
                context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
            }if (parentContextMap.containsKey("SUS_Database")) {
                context.SUS_Database = (String) parentContextMap.get("SUS_Database");
            }if (parentContextMap.containsKey("SUS_Database_ARDBFA")) {
                context.SUS_Database_ARDBFA = (String) parentContextMap.get("SUS_Database_ARDBFA");
            }if (parentContextMap.containsKey("SUS_Login")) {
                context.SUS_Login = (String) parentContextMap.get("SUS_Login");
            }if (parentContextMap.containsKey("SUS_Password")) {
                context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
            }if (parentContextMap.containsKey("SUS_Port")) {
                context.SUS_Port = (String) parentContextMap.get("SUS_Port");
            }if (parentContextMap.containsKey("SUS_Schema")) {
                context.SUS_Schema = (String) parentContextMap.get("SUS_Schema");
            }if (parentContextMap.containsKey("SUS_Server")) {
                context.SUS_Server = (String) parentContextMap.get("SUS_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("GIM_Password");
			parametersToEncrypt.add("SUS_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Order_Process_Header_Inbound");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     520047 characters generated by Talend Open Studio for Data Integration 
 *     on the November 30, 2022 at 10:08:15 AM IST
 ************************************************************************************************/