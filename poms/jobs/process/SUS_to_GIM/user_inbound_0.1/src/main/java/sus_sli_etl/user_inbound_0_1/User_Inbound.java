// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sus_sli_etl.user_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.CharSetHandling;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: User_Inbound Purpose: Migrating data from SYDBO4PF to User<br>
 * Description: Migrating data from SYDBO4PF to User <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class User_Inbound implements TalendJob {
	static {System.setProperty("TalendJob.log", "User_Inbound.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(User_Inbound.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(opco != null){
				
					this.setProperty("opco", opco.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(sopco != null){
				
					this.setProperty("sopco", sopco.toString());
				
			}
			
			if(svop != null){
				
					this.setProperty("svop", svop.toString());
				
			}
			
			if(GIM_AdditionalParams != null){
				
					this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());
				
			}
			
			if(GIM_Database != null){
				
					this.setProperty("GIM_Database", GIM_Database.toString());
				
			}
			
			if(GIM_Login != null){
				
					this.setProperty("GIM_Login", GIM_Login.toString());
				
			}
			
			if(GIM_Password != null){
				
					this.setProperty("GIM_Password", GIM_Password.toString());
				
			}
			
			if(GIM_Port != null){
				
					this.setProperty("GIM_Port", GIM_Port.toString());
				
			}
			
			if(GIM_Schema_Migrating_Test != null){
				
					this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());
				
			}
			
			if(GIM_Server != null){
				
					this.setProperty("GIM_Server", GIM_Server.toString());
				
			}
			
			if(SUS_Additional_Params != null){
				
					this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());
				
			}
			
			if(SUS_Database != null){
				
					this.setProperty("SUS_Database", SUS_Database.toString());
				
			}
			
			if(SUS_Login != null){
				
					this.setProperty("SUS_Login", SUS_Login.toString());
				
			}
			
			if(SUS_Password != null){
				
					this.setProperty("SUS_Password", SUS_Password.toString());
				
			}
			
			if(SUS_Server != null){
				
					this.setProperty("SUS_Server", SUS_Server.toString());
				
			}
			
			if(GIM_Schema_Master != null){
				
					this.setProperty("GIM_Schema_Master", GIM_Schema_Master.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String opco;
public String getOpco(){
	return this.opco;
}
public String server;
public String getServer(){
	return this.server;
}
public String sopco;
public String getSopco(){
	return this.sopco;
}
public String svop;
public String getSvop(){
	return this.svop;
}
public String GIM_AdditionalParams;
public String getGIM_AdditionalParams(){
	return this.GIM_AdditionalParams;
}
public String GIM_Database;
public String getGIM_Database(){
	return this.GIM_Database;
}
public String GIM_Login;
public String getGIM_Login(){
	return this.GIM_Login;
}
public java.lang.String GIM_Password;
public java.lang.String getGIM_Password(){
	return this.GIM_Password;
}
public String GIM_Port;
public String getGIM_Port(){
	return this.GIM_Port;
}
public String GIM_Schema_Migrating_Test;
public String getGIM_Schema_Migrating_Test(){
	return this.GIM_Schema_Migrating_Test;
}
public String GIM_Server;
public String getGIM_Server(){
	return this.GIM_Server;
}
public String SUS_Additional_Params;
public String getSUS_Additional_Params(){
	return this.SUS_Additional_Params;
}
public String SUS_Database;
public String getSUS_Database(){
	return this.SUS_Database;
}
public String SUS_Login;
public String getSUS_Login(){
	return this.SUS_Login;
}
public java.lang.String SUS_Password;
public java.lang.String getSUS_Password(){
	return this.SUS_Password;
}
public String SUS_Server;
public String getSUS_Server(){
	return this.SUS_Server;
}
public String GIM_Schema_Master;
public String getGIM_Schema_Master(){
	return this.GIM_Schema_Master;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "User_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_t5T2EANgEe2mdNKMHGUS9Q", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_t5T2EANgEe2mdNKMHGUS9Q", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				User_Inbound.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(User_Inbound.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class Main_StatStruct implements routines.system.IPersistableRow<Main_StatStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_StatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
Main_StatStruct Main_Stat = new Main_StatStruct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Stat");
					}
				
		int tos_count_tLogRow_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_2 = new StringBuilder();
                    log4jParamters_tLogRow_2.append("Parameters:");
                            log4jParamters_tLogRow_2.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + (log4jParamters_tLogRow_2) );
                    } 
                } 
            new BytesLimit65535_tLogRow_2().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[7];

        public void addRow(String[] row) {

            for (int i = 0; i < 7; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 6 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 6 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[6] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"moment","pid","job","origin","message_type","message","duration",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_2 = new StringBuilder();
                    log4jParamters_tMap_2.append("Parameters:");
                            log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + (log4jParamters_tMap_2) );
                    } 
                } 
            new BytesLimit65535_tMap_2().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row4_tMap_2 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Stat_tMap_2 = 0;
				
Main_StatStruct Main_Stat_tmp = new Main_StatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tStatCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tStatCatcher_1 = new StringBuilder();
                    log4jParamters_tStatCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + (log4jParamters_tStatCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tStatCatcher_1().limitLog4jByte();
            }

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row4.pid = pid;
		row4.root_pid = rootPid;
		row4.father_pid = fatherPid;	
    	row4.project = projectName;
    	row4.job = jobName;
    	row4.context = contextStr;
		row4.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row4.message = scm.getMessage();
		row4.duration = scm.getDuration();
		row4.moment = scm.getMoment();
		row4.message_type = scm.getMessageType();
		row4.job_version = scm.getJobVersion();
		row4.job_repository_id = scm.getJobId();
		row4.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row4 - " + (row4==null? "": row4.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Main_Stat = null;


// # Output table : 'Main_Stat'
count_Main_Stat_tMap_2++;

Main_Stat_tmp.moment = row4.moment;
Main_Stat_tmp.pid = row4.pid;
Main_Stat_tmp.job = row4.job;
Main_Stat_tmp.origin = row4.origin;
Main_Stat_tmp.message_type = row4.message_type;
Main_Stat_tmp.message = row4.message;
Main_Stat_tmp.duration = row4.duration ;
Main_Stat = Main_Stat_tmp;
log.debug("tMap_2 - Outputting the record " + count_Main_Stat_tMap_2 + " of the output table 'Main_Stat'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Main_Stat"
if(Main_Stat != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Stat"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Stat - " + (Main_Stat==null? "": Main_Stat.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[7];
   				
	    		if(Main_Stat.moment != null) { //              
                 row_tLogRow_2[0]=    						
								FormatterUtils.format_Date(Main_Stat.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.pid != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(Main_Stat.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.job != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(Main_Stat.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.origin != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(Main_Stat.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message_type != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(Main_Stat.message_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(Main_Stat.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.duration != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(Main_Stat.duration)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
                	log.info("tLogRow_2 - Content of row "+nb_line_tLogRow_2+": " + TalendString.unionString("|",row_tLogRow_2));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "Main_Stat"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Done.") );

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'Main_Stat': " + count_Main_Stat_tMap_2 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Done.") );

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);
                if(log.isInfoEnabled())
            log.info("tLogRow_2 - "  + ("Printed row count: ")  + (nb_line_tLogRow_2)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Stat");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Done.") );

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_LogStruct implements routines.system.IPersistableRow<Main_LogStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_LogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
Main_LogStruct Main_Log = new Main_LogStruct();





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Log");
					}
				
		int tos_count_tLogRow_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_3 = new StringBuilder();
                    log4jParamters_tLogRow_3.append("Parameters:");
                            log4jParamters_tLogRow_3.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + (log4jParamters_tLogRow_3) );
                    } 
                } 
            new BytesLimit65535_tLogRow_3().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_3 = new StringBuilder();
                    log4jParamters_tMap_3.append("Parameters:");
                            log4jParamters_tMap_3.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + (log4jParamters_tMap_3) );
                    } 
                } 
            new BytesLimit65535_tMap_3().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row5_tMap_3 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Log_tMap_3 = 0;
				
Main_LogStruct Main_Log_tmp = new Main_LogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogCatcher_1 = new StringBuilder();
                    log4jParamters_tLogCatcher_1.append("Parameters:");
                            log4jParamters_tLogCatcher_1.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + (log4jParamters_tLogCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tLogCatcher_1().limitLog4jByte();
            }

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row5.type = lcm.getType();
		row5.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row5.priority = lcm.getPriority();
		row5.message = lcm.getMessage();
		row5.code = lcm.getCode();
		
		row5.moment = java.util.Calendar.getInstance().getTime();
	
    	row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;
	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row5 - " + (row5==null? "": row5.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Main_Log = null;


// # Output table : 'Main_Log'
count_Main_Log_tMap_3++;

Main_Log_tmp.moment = row5.moment ;
Main_Log_tmp.pid = row5.pid ;
Main_Log_tmp.job = row5.job ;
Main_Log_tmp.type = row5.type ;
Main_Log_tmp.origin = row5.origin ;
Main_Log_tmp.message = row5.message ;
Main_Log = Main_Log_tmp;
log.debug("tMap_3 - Outputting the record " + count_Main_Log_tMap_3 + " of the output table 'Main_Log'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Main_Log"
if(Main_Log != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Log"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Log - " + (Main_Log==null? "": Main_Log.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(Main_Log.moment != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
								FormatterUtils.format_Date(Main_Log.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.job != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.type != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.origin != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.message != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    	log.info("tLogRow_3 - Content of row "+(nb_line_tLogRow_3+1)+": " + strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "Main_Log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Done.") );

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_3 - Written records count in the table 'Main_Log': " + count_Main_Log_tMap_3 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Done.") );

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);
                if(log.isInfoEnabled())
            log.info("tLogRow_3 - "  + ("Printed row count: ")  + (nb_line_tLogRow_3)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Log");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Done.") );

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_Flow_MeterStruct implements routines.system.IPersistableRow<Main_Flow_MeterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_Flow_MeterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();
Main_Flow_MeterStruct Main_Flow_Meter = new Main_Flow_MeterStruct();





	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Flow_Meter");
					}
				
		int tos_count_tLogRow_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_4 = new StringBuilder();
                    log4jParamters_tLogRow_4.append("Parameters:");
                            log4jParamters_tLogRow_4.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + (log4jParamters_tLogRow_4) );
                    } 
                } 
            new BytesLimit65535_tLogRow_4().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("tLogRow_4");
        util_tLogRow_4.addRow(new String[]{"moment","pid","job","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tMap_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_4 = new StringBuilder();
                    log4jParamters_tMap_4.append("Parameters:");
                            log4jParamters_tMap_4.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + (log4jParamters_tMap_4) );
                    } 
                } 
            new BytesLimit65535_tMap_4().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row3_0_tMap_4 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Flow_Meter_tMap_4 = 0;
				
Main_Flow_MeterStruct Main_Flow_Meter_tmp = new Main_Flow_MeterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowMeterCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowMeterCatcher_1 = new StringBuilder();
                    log4jParamters_tFlowMeterCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + (log4jParamters_tFlowMeterCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();
            }

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row3_0.pid = pid;
		row3_0.root_pid = rootPid;
		row3_0.father_pid = fatherPid;	
        row3_0.project = projectName;
        row3_0.job = jobName;
        row3_0.context = contextStr;
		row3_0.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row3_0.moment = mcm.getMoment();
		row3_0.job_version = mcm.getJobVersion();
		row3_0.job_repository_id = mcm.getJobId();
		row3_0.system_pid = mcm.getSystemPid();
		row3_0.label = mcm.getLabel();
		row3_0.count = mcm.getCount();
		row3_0.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row3_0.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3_0 - " + (row3_0==null? "": row3_0.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Main_Flow_Meter = null;


// # Output table : 'Main_Flow_Meter'
count_Main_Flow_Meter_tMap_4++;

Main_Flow_Meter_tmp.moment = row3_0.moment ;
Main_Flow_Meter_tmp.pid = row3_0.pid ;
Main_Flow_Meter_tmp.job = row3_0.job ;
Main_Flow_Meter_tmp.origin = row3_0.origin ;
Main_Flow_Meter_tmp.label = row3_0.label ;
Main_Flow_Meter_tmp.count = row3_0.count ;
Main_Flow_Meter_tmp.reference = row3_0.reference ;
Main_Flow_Meter_tmp.thresholds = row3_0.thresholds ;
Main_Flow_Meter = Main_Flow_Meter_tmp;
log.debug("tMap_4 - Outputting the record " + count_Main_Flow_Meter_tMap_4 + " of the output table 'Main_Flow_Meter'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Main_Flow_Meter"
if(Main_Flow_Meter != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Flow_Meter"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Flow_Meter - " + (Main_Flow_Meter==null? "": Main_Flow_Meter.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[8];
   				
	    		if(Main_Flow_Meter.moment != null) { //              
                 row_tLogRow_4[0]=    						
								FormatterUtils.format_Date(Main_Flow_Meter.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.pid != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(Main_Flow_Meter.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.job != null) { //              
                 row_tLogRow_4[2]=    						    
				                String.valueOf(Main_Flow_Meter.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.origin != null) { //              
                 row_tLogRow_4[3]=    						    
				                String.valueOf(Main_Flow_Meter.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.label != null) { //              
                 row_tLogRow_4[4]=    						    
				                String.valueOf(Main_Flow_Meter.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.count != null) { //              
                 row_tLogRow_4[5]=    						    
				                String.valueOf(Main_Flow_Meter.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.reference != null) { //              
                 row_tLogRow_4[6]=    						    
				                String.valueOf(Main_Flow_Meter.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.thresholds != null) { //              
                 row_tLogRow_4[7]=    						    
				                String.valueOf(Main_Flow_Meter.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
                	log.info("tLogRow_4 - Content of row "+nb_line_tLogRow_4+": " + TalendString.unionString("|",row_tLogRow_4));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "Main_Flow_Meter"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Done.") );

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_4 - Written records count in the table 'Main_Flow_Meter': " + count_Main_Flow_Meter_tMap_4 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Done.") );

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);
                if(log.isInfoEnabled())
            log.info("tLogRow_4 - "  + ("Printed row count: ")  + (nb_line_tLogRow_4)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Flow_Meter");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Done.") );

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Starting the Migrating Data from SYDBO4PF to USER...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class USER_MasterStruct implements routines.system.IPersistableRow<USER_MasterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String USER_ID;

				public String getUSER_ID () {
					return this.USER_ID;
				}
				
			    public String MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY;

				public String getMERCHANDISE_PROFORMA_APPROVAL_AUTHORITY () {
					return this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY;
				}
				
			    public String FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY;

				public String getFREIGHT_PRO_FORMA_APPROVAL_AUTHORITY () {
					return this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY;
				}
				
			    public String PRICE_LIST_APPROVAL_AUTHORITY;

				public String getPRICE_LIST_APPROVAL_AUTHORITY () {
					return this.PRICE_LIST_APPROVAL_AUTHORITY;
				}
				
			    public String APPROVE_VALID_FOR_PRICING;

				public String getAPPROVE_VALID_FOR_PRICING () {
					return this.APPROVE_VALID_FOR_PRICING;
				}
				
			    public BigDecimal SOCIAL_SECURITY_NO;

				public BigDecimal getSOCIAL_SECURITY_NO () {
					return this.SOCIAL_SECURITY_NO;
				}
				
			    public String EMPLOYEE_LAST_NAME;

				public String getEMPLOYEE_LAST_NAME () {
					return this.EMPLOYEE_LAST_NAME;
				}
				
			    public String EMPLOYEE_FIRST_NAME;

				public String getEMPLOYEE_FIRST_NAME () {
					return this.EMPLOYEE_FIRST_NAME;
				}
				
			    public String ADDRESS_LINE_1;

				public String getADDRESS_LINE_1 () {
					return this.ADDRESS_LINE_1;
				}
				
			    public String ADDRESS_LINE_2;

				public String getADDRESS_LINE_2 () {
					return this.ADDRESS_LINE_2;
				}
				
			    public String ADDEESS_LINE_3;

				public String getADDEESS_LINE_3 () {
					return this.ADDEESS_LINE_3;
				}
				
			    public String CITY;

				public String getCITY () {
					return this.CITY;
				}
				
			    public String STATE;

				public String getSTATE () {
					return this.STATE;
				}
				
			    public String ZIP_CODE;

				public String getZIP_CODE () {
					return this.ZIP_CODE;
				}
				
			    public java.util.Date BIRTHDATE;

				public java.util.Date getBIRTHDATE () {
					return this.BIRTHDATE;
				}
				
			    public String PRINTER;

				public String getPRINTER () {
					return this.PRINTER;
				}
				
			    public String SPOOL_STATUS_FLAG;

				public String getSPOOL_STATUS_FLAG () {
					return this.SPOOL_STATUS_FLAG;
				}
				
			    public String EMPLOYEE_NO;

				public String getEMPLOYEE_NO () {
					return this.EMPLOYEE_NO;
				}
				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}
				
			    public String IMS_AUTHORIZED_FREIGHT;

				public String getIMS_AUTHORIZED_FREIGHT () {
					return this.IMS_AUTHORIZED_FREIGHT;
				}
				
			    public String AUTHORITY_HOLD_ORDERS;

				public String getAUTHORITY_HOLD_ORDERS () {
					return this.AUTHORITY_HOLD_ORDERS;
				}
				
			    public String AUTHORITY_RELEASE_ORDERS;

				public String getAUTHORITY_RELEASE_ORDERS () {
					return this.AUTHORITY_RELEASE_ORDERS;
				}
				
			    public String AUTHORITY_IMMEDIATE_ORDERS;

				public String getAUTHORITY_IMMEDIATE_ORDERS () {
					return this.AUTHORITY_IMMEDIATE_ORDERS;
				}
				
			    public String AUTHORITY_CANCEL_ORDERS;

				public String getAUTHORITY_CANCEL_ORDERS () {
					return this.AUTHORITY_CANCEL_ORDERS;
				}
				
			    public BigDecimal PHONE;

				public BigDecimal getPHONE () {
					return this.PHONE;
				}
				
			    public String AUTHORITY_APPROVE_RECEIVED_PAYMENTS;

				public String getAUTHORITY_APPROVE_RECEIVED_PAYMENTS () {
					return this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS;
				}
				
			    public String PRICE_CONTROLLER_APPROVAL_FLAG;

				public String getPRICE_CONTROLLER_APPROVAL_FLAG () {
					return this.PRICE_CONTROLLER_APPROVAL_FLAG;
				}
				
			    public String TELEPHONE_LOCAL_EXTENSION;

				public String getTELEPHONE_LOCAL_EXTENSION () {
					return this.TELEPHONE_LOCAL_EXTENSION;
				}
				
			    public java.util.Date HIRE_DATE;

				public java.util.Date getHIRE_DATE () {
					return this.HIRE_DATE;
				}
				
			    public java.util.Date TERMINATION_DATE;

				public java.util.Date getTERMINATION_DATE () {
					return this.TERMINATION_DATE;
				}
				
			    public String MIDDLE_INITIAL;

				public String getMIDDLE_INITIAL () {
					return this.MIDDLE_INITIAL;
				}
				
			    public String CUSTOMER_AGMT_APPROVAL_LEVEL;

				public String getCUSTOMER_AGMT_APPROVAL_LEVEL () {
					return this.CUSTOMER_AGMT_APPROVAL_LEVEL;
				}
				
			    public String UPDATE_PO_COST;

				public String getUPDATE_PO_COST () {
					return this.UPDATE_PO_COST;
				}
				
			    public String MISCELLANEOUS_BILLING_APPROVAL;

				public String getMISCELLANEOUS_BILLING_APPROVAL () {
					return this.MISCELLANEOUS_BILLING_APPROVAL;
				}
				
			    public String ACTIVE_INACTIVE_APPROVAL_AUTH_BILL;

				public String getACTIVE_INACTIVE_APPROVAL_AUTH_BILL () {
					return this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL;
				}
				
			    public String ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP;

				public String getACTIVE_INACTIVE_APPROVAL_AUTH_SHIP () {
					return this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP;
				}
				
			    public String AGEING_POLICY_APPROVAL_AUTH_BILL;

				public String getAGEING_POLICY_APPROVAL_AUTH_BILL () {
					return this.AGEING_POLICY_APPROVAL_AUTH_BILL;
				}
				
			    public String AGEING_POLICY_APPROVAL_AUTH_SHIP;

				public String getAGEING_POLICY_APPROVAL_AUTH_SHIP () {
					return this.AGEING_POLICY_APPROVAL_AUTH_SHIP;
				}
				
			    public String DISCOUNT_GRACE_DAYS_APP_BILL;

				public String getDISCOUNT_GRACE_DAYS_APP_BILL () {
					return this.DISCOUNT_GRACE_DAYS_APP_BILL;
				}
				
			    public String DISCOUNT_GRACE_DAYS_APP_SHIP;

				public String getDISCOUNT_GRACE_DAYS_APP_SHIP () {
					return this.DISCOUNT_GRACE_DAYS_APP_SHIP;
				}
				
			    public String NET_GRACE_DAYS_APP_BILL;

				public String getNET_GRACE_DAYS_APP_BILL () {
					return this.NET_GRACE_DAYS_APP_BILL;
				}
				
			    public String NET_GRACE_DAYS_APP_SHIP;

				public String getNET_GRACE_DAYS_APP_SHIP () {
					return this.NET_GRACE_DAYS_APP_SHIP;
				}
				
			    public String PAYMENT_TERMS_POLICY_APP_BILL;

				public String getPAYMENT_TERMS_POLICY_APP_BILL () {
					return this.PAYMENT_TERMS_POLICY_APP_BILL;
				}
				
			    public String PAYMENT_TERMS_POLICY_APP_SHIP;

				public String getPAYMENT_TERMS_POLICY_APP_SHIP () {
					return this.PAYMENT_TERMS_POLICY_APP_SHIP;
				}
				
			    public String STOP_CODE_APPROVAL_AUTHORITY_BILL;

				public String getSTOP_CODE_APPROVAL_AUTHORITY_BILL () {
					return this.STOP_CODE_APPROVAL_AUTHORITY_BILL;
				}
				
			    public String STOP_CODE_APPROVAL_AUTHORITY_SHIP;

				public String getSTOP_CODE_APPROVAL_AUTHORITY_SHIP () {
					return this.STOP_CODE_APPROVAL_AUTHORITY_SHIP;
				}
				
			    public String ALLOC_INVENTORY_IMMED_APP_SHIP;

				public String getALLOC_INVENTORY_IMMED_APP_SHIP () {
					return this.ALLOC_INVENTORY_IMMED_APP_SHIP;
				}
				
			    public String RESTOCK_FEE_APPROVAL_FLAG_SHIP;

				public String getRESTOCK_FEE_APPROVAL_FLAG_SHIP () {
					return this.RESTOCK_FEE_APPROVAL_FLAG_SHIP;
				}
				
			    public String MISCELLANEOUS_TAX_EXEMPT_SHIP;

				public String getMISCELLANEOUS_TAX_EXEMPT_SHIP () {
					return this.MISCELLANEOUS_TAX_EXEMPT_SHIP;
				}
				
			    public String BUYER_SUPERVISOR_AUTHORITY;

				public String getBUYER_SUPERVISOR_AUTHORITY () {
					return this.BUYER_SUPERVISOR_AUTHORITY;
				}
				
			    public String AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS;

				public String getAUTHORITY_APPROVE_BILLING_ADJ_REQUESTS () {
					return this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS;
				}
				
			    public String AUTHORITY_TO_APPROVE_PICKUP_REQUESTS;

				public String getAUTHORITY_TO_APPROVE_PICKUP_REQUESTS () {
					return this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS;
				}
				
			    public String APPROVAL_SECURITY_LEVEL;

				public String getAPPROVAL_SECURITY_LEVEL () {
					return this.APPROVAL_SECURITY_LEVEL;
				}
				
			    public String VISIBILITY_SECURITY_LEVEL;

				public String getVISIBILITY_SECURITY_LEVEL () {
					return this.VISIBILITY_SECURITY_LEVEL;
				}
				
			    public String AUTO_UP_FLAG;

				public String getAUTO_UP_FLAG () {
					return this.AUTO_UP_FLAG;
				}
				
			    public String AUTO_DOWN_FLAG;

				public String getAUTO_DOWN_FLAG () {
					return this.AUTO_DOWN_FLAG;
				}
				
			    public String AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE;

				public String getAUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE () {
					return this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE;
				}
				
			    public String APPROVAL_ROUTE_TO;

				public String getAPPROVAL_ROUTE_TO () {
					return this.APPROVAL_ROUTE_TO;
				}
				
			    public String AUTHORITY_APPROVE_SAMPLE_REQUESTS;

				public String getAUTHORITY_APPROVE_SAMPLE_REQUESTS () {
					return this.AUTHORITY_APPROVE_SAMPLE_REQUESTS;
				}
				
			    public String APPROVE_SPECIAL_FLAG;

				public String getAPPROVE_SPECIAL_FLAG () {
					return this.APPROVE_SPECIAL_FLAG;
				}
				
			    public String OVERRIDE_SAMPLE_APPROVAL;

				public String getOVERRIDE_SAMPLE_APPROVAL () {
					return this.OVERRIDE_SAMPLE_APPROVAL;
				}
				
			    public String OVERRIDE_SPECIAL_APPROVAL;

				public String getOVERRIDE_SPECIAL_APPROVAL () {
					return this.OVERRIDE_SPECIAL_APPROVAL;
				}
				
			    public String AUTHORITY_APPROVE_PENDING_CUST_AGMTS;

				public String getAUTHORITY_APPROVE_PENDING_CUST_AGMTS () {
					return this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS;
				}
				
			    public String AUTHORITY_REFUSE_PENDING_CUST_AGMTS;

				public String getAUTHORITY_REFUSE_PENDING_CUST_AGMTS () {
					return this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS;
				}
				
			    public String AUTHORITY_APPROVE_DISPENSER_REQUESTS;

				public String getAUTHORITY_APPROVE_DISPENSER_REQUESTS () {
					return this.AUTHORITY_APPROVE_DISPENSER_REQUESTS;
				}
				
			    public String AUTHORITY_UPDATE_CUSTOMER_GROUPS;

				public String getAUTHORITY_UPDATE_CUSTOMER_GROUPS () {
					return this.AUTHORITY_UPDATE_CUSTOMER_GROUPS;
				}
				
			    public String AP_SUPERVISOR_AUTHORITY;

				public String getAP_SUPERVISOR_AUTHORITY () {
					return this.AP_SUPERVISOR_AUTHORITY;
				}
				
			    public String TOLERATED_VARIANCE_OVERRIDE_AUTHORITY;

				public String getTOLERATED_VARIANCE_OVERRIDE_AUTHORITY () {
					return this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY;
				}
				
			    public String AUTHORITY_TO_POST_BATCHES;

				public String getAUTHORITY_TO_POST_BATCHES () {
					return this.AUTHORITY_TO_POST_BATCHES;
				}
				
			    public String OVERRIDE_DISPENSOR_APPROVAL;

				public String getOVERRIDE_DISPENSOR_APPROVAL () {
					return this.OVERRIDE_DISPENSOR_APPROVAL;
				}
				
			    public String AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS;

				public String getAUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS () {
					return this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS;
				}
				
			    public String AUTHORITY_MAINTAIN_INSURANCE_INFORMATION;

				public String getAUTHORITY_MAINTAIN_INSURANCE_INFORMATION () {
					return this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION;
				}
				
			    public String COPY_FROM_USER_ID;

				public String getCOPY_FROM_USER_ID () {
					return this.COPY_FROM_USER_ID;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public boolean IS_DELETED;

				public boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public String O4PF_SVOP;

				public String getO4PF_SVOP () {
					return this.O4PF_SVOP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.EMPLOYEE_NO == null) ? 0 : this.EMPLOYEE_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final USER_MasterStruct other = (USER_MasterStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.EMPLOYEE_NO == null) {
							if (other.EMPLOYEE_NO != null)
								return false;
						
						} else if (!this.EMPLOYEE_NO.equals(other.EMPLOYEE_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(USER_MasterStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.USER_ID = this.USER_ID;
	            other.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY = this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY;
	            other.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY = this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY;
	            other.PRICE_LIST_APPROVAL_AUTHORITY = this.PRICE_LIST_APPROVAL_AUTHORITY;
	            other.APPROVE_VALID_FOR_PRICING = this.APPROVE_VALID_FOR_PRICING;
	            other.SOCIAL_SECURITY_NO = this.SOCIAL_SECURITY_NO;
	            other.EMPLOYEE_LAST_NAME = this.EMPLOYEE_LAST_NAME;
	            other.EMPLOYEE_FIRST_NAME = this.EMPLOYEE_FIRST_NAME;
	            other.ADDRESS_LINE_1 = this.ADDRESS_LINE_1;
	            other.ADDRESS_LINE_2 = this.ADDRESS_LINE_2;
	            other.ADDEESS_LINE_3 = this.ADDEESS_LINE_3;
	            other.CITY = this.CITY;
	            other.STATE = this.STATE;
	            other.ZIP_CODE = this.ZIP_CODE;
	            other.BIRTHDATE = this.BIRTHDATE;
	            other.PRINTER = this.PRINTER;
	            other.SPOOL_STATUS_FLAG = this.SPOOL_STATUS_FLAG;
	            other.EMPLOYEE_NO = this.EMPLOYEE_NO;
	            other.STATUS = this.STATUS;
	            other.IMS_AUTHORIZED_FREIGHT = this.IMS_AUTHORIZED_FREIGHT;
	            other.AUTHORITY_HOLD_ORDERS = this.AUTHORITY_HOLD_ORDERS;
	            other.AUTHORITY_RELEASE_ORDERS = this.AUTHORITY_RELEASE_ORDERS;
	            other.AUTHORITY_IMMEDIATE_ORDERS = this.AUTHORITY_IMMEDIATE_ORDERS;
	            other.AUTHORITY_CANCEL_ORDERS = this.AUTHORITY_CANCEL_ORDERS;
	            other.PHONE = this.PHONE;
	            other.AUTHORITY_APPROVE_RECEIVED_PAYMENTS = this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS;
	            other.PRICE_CONTROLLER_APPROVAL_FLAG = this.PRICE_CONTROLLER_APPROVAL_FLAG;
	            other.TELEPHONE_LOCAL_EXTENSION = this.TELEPHONE_LOCAL_EXTENSION;
	            other.HIRE_DATE = this.HIRE_DATE;
	            other.TERMINATION_DATE = this.TERMINATION_DATE;
	            other.MIDDLE_INITIAL = this.MIDDLE_INITIAL;
	            other.CUSTOMER_AGMT_APPROVAL_LEVEL = this.CUSTOMER_AGMT_APPROVAL_LEVEL;
	            other.UPDATE_PO_COST = this.UPDATE_PO_COST;
	            other.MISCELLANEOUS_BILLING_APPROVAL = this.MISCELLANEOUS_BILLING_APPROVAL;
	            other.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL = this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL;
	            other.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP = this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP;
	            other.AGEING_POLICY_APPROVAL_AUTH_BILL = this.AGEING_POLICY_APPROVAL_AUTH_BILL;
	            other.AGEING_POLICY_APPROVAL_AUTH_SHIP = this.AGEING_POLICY_APPROVAL_AUTH_SHIP;
	            other.DISCOUNT_GRACE_DAYS_APP_BILL = this.DISCOUNT_GRACE_DAYS_APP_BILL;
	            other.DISCOUNT_GRACE_DAYS_APP_SHIP = this.DISCOUNT_GRACE_DAYS_APP_SHIP;
	            other.NET_GRACE_DAYS_APP_BILL = this.NET_GRACE_DAYS_APP_BILL;
	            other.NET_GRACE_DAYS_APP_SHIP = this.NET_GRACE_DAYS_APP_SHIP;
	            other.PAYMENT_TERMS_POLICY_APP_BILL = this.PAYMENT_TERMS_POLICY_APP_BILL;
	            other.PAYMENT_TERMS_POLICY_APP_SHIP = this.PAYMENT_TERMS_POLICY_APP_SHIP;
	            other.STOP_CODE_APPROVAL_AUTHORITY_BILL = this.STOP_CODE_APPROVAL_AUTHORITY_BILL;
	            other.STOP_CODE_APPROVAL_AUTHORITY_SHIP = this.STOP_CODE_APPROVAL_AUTHORITY_SHIP;
	            other.ALLOC_INVENTORY_IMMED_APP_SHIP = this.ALLOC_INVENTORY_IMMED_APP_SHIP;
	            other.RESTOCK_FEE_APPROVAL_FLAG_SHIP = this.RESTOCK_FEE_APPROVAL_FLAG_SHIP;
	            other.MISCELLANEOUS_TAX_EXEMPT_SHIP = this.MISCELLANEOUS_TAX_EXEMPT_SHIP;
	            other.BUYER_SUPERVISOR_AUTHORITY = this.BUYER_SUPERVISOR_AUTHORITY;
	            other.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS = this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS;
	            other.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS = this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS;
	            other.APPROVAL_SECURITY_LEVEL = this.APPROVAL_SECURITY_LEVEL;
	            other.VISIBILITY_SECURITY_LEVEL = this.VISIBILITY_SECURITY_LEVEL;
	            other.AUTO_UP_FLAG = this.AUTO_UP_FLAG;
	            other.AUTO_DOWN_FLAG = this.AUTO_DOWN_FLAG;
	            other.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE = this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE;
	            other.APPROVAL_ROUTE_TO = this.APPROVAL_ROUTE_TO;
	            other.AUTHORITY_APPROVE_SAMPLE_REQUESTS = this.AUTHORITY_APPROVE_SAMPLE_REQUESTS;
	            other.APPROVE_SPECIAL_FLAG = this.APPROVE_SPECIAL_FLAG;
	            other.OVERRIDE_SAMPLE_APPROVAL = this.OVERRIDE_SAMPLE_APPROVAL;
	            other.OVERRIDE_SPECIAL_APPROVAL = this.OVERRIDE_SPECIAL_APPROVAL;
	            other.AUTHORITY_APPROVE_PENDING_CUST_AGMTS = this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS;
	            other.AUTHORITY_REFUSE_PENDING_CUST_AGMTS = this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS;
	            other.AUTHORITY_APPROVE_DISPENSER_REQUESTS = this.AUTHORITY_APPROVE_DISPENSER_REQUESTS;
	            other.AUTHORITY_UPDATE_CUSTOMER_GROUPS = this.AUTHORITY_UPDATE_CUSTOMER_GROUPS;
	            other.AP_SUPERVISOR_AUTHORITY = this.AP_SUPERVISOR_AUTHORITY;
	            other.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY = this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY;
	            other.AUTHORITY_TO_POST_BATCHES = this.AUTHORITY_TO_POST_BATCHES;
	            other.OVERRIDE_DISPENSOR_APPROVAL = this.OVERRIDE_DISPENSOR_APPROVAL;
	            other.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS = this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS;
	            other.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION = this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION;
	            other.COPY_FROM_USER_ID = this.COPY_FROM_USER_ID;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.O4PF_SVOP = this.O4PF_SVOP;
	            
	}

	public void copyKeysDataTo(USER_MasterStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.EMPLOYEE_NO = this.EMPLOYEE_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.USER_ID = readString(dis);
					
					this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY = readString(dis);
					
					this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY = readString(dis);
					
					this.PRICE_LIST_APPROVAL_AUTHORITY = readString(dis);
					
					this.APPROVE_VALID_FOR_PRICING = readString(dis);
					
						this.SOCIAL_SECURITY_NO = (BigDecimal) dis.readObject();
					
					this.EMPLOYEE_LAST_NAME = readString(dis);
					
					this.EMPLOYEE_FIRST_NAME = readString(dis);
					
					this.ADDRESS_LINE_1 = readString(dis);
					
					this.ADDRESS_LINE_2 = readString(dis);
					
					this.ADDEESS_LINE_3 = readString(dis);
					
					this.CITY = readString(dis);
					
					this.STATE = readString(dis);
					
					this.ZIP_CODE = readString(dis);
					
					this.BIRTHDATE = readDate(dis);
					
					this.PRINTER = readString(dis);
					
					this.SPOOL_STATUS_FLAG = readString(dis);
					
					this.EMPLOYEE_NO = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.IMS_AUTHORIZED_FREIGHT = readString(dis);
					
					this.AUTHORITY_HOLD_ORDERS = readString(dis);
					
					this.AUTHORITY_RELEASE_ORDERS = readString(dis);
					
					this.AUTHORITY_IMMEDIATE_ORDERS = readString(dis);
					
					this.AUTHORITY_CANCEL_ORDERS = readString(dis);
					
						this.PHONE = (BigDecimal) dis.readObject();
					
					this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS = readString(dis);
					
					this.PRICE_CONTROLLER_APPROVAL_FLAG = readString(dis);
					
					this.TELEPHONE_LOCAL_EXTENSION = readString(dis);
					
					this.HIRE_DATE = readDate(dis);
					
					this.TERMINATION_DATE = readDate(dis);
					
					this.MIDDLE_INITIAL = readString(dis);
					
					this.CUSTOMER_AGMT_APPROVAL_LEVEL = readString(dis);
					
					this.UPDATE_PO_COST = readString(dis);
					
					this.MISCELLANEOUS_BILLING_APPROVAL = readString(dis);
					
					this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL = readString(dis);
					
					this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP = readString(dis);
					
					this.AGEING_POLICY_APPROVAL_AUTH_BILL = readString(dis);
					
					this.AGEING_POLICY_APPROVAL_AUTH_SHIP = readString(dis);
					
					this.DISCOUNT_GRACE_DAYS_APP_BILL = readString(dis);
					
					this.DISCOUNT_GRACE_DAYS_APP_SHIP = readString(dis);
					
					this.NET_GRACE_DAYS_APP_BILL = readString(dis);
					
					this.NET_GRACE_DAYS_APP_SHIP = readString(dis);
					
					this.PAYMENT_TERMS_POLICY_APP_BILL = readString(dis);
					
					this.PAYMENT_TERMS_POLICY_APP_SHIP = readString(dis);
					
					this.STOP_CODE_APPROVAL_AUTHORITY_BILL = readString(dis);
					
					this.STOP_CODE_APPROVAL_AUTHORITY_SHIP = readString(dis);
					
					this.ALLOC_INVENTORY_IMMED_APP_SHIP = readString(dis);
					
					this.RESTOCK_FEE_APPROVAL_FLAG_SHIP = readString(dis);
					
					this.MISCELLANEOUS_TAX_EXEMPT_SHIP = readString(dis);
					
					this.BUYER_SUPERVISOR_AUTHORITY = readString(dis);
					
					this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS = readString(dis);
					
					this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS = readString(dis);
					
					this.APPROVAL_SECURITY_LEVEL = readString(dis);
					
					this.VISIBILITY_SECURITY_LEVEL = readString(dis);
					
					this.AUTO_UP_FLAG = readString(dis);
					
					this.AUTO_DOWN_FLAG = readString(dis);
					
					this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE = readString(dis);
					
					this.APPROVAL_ROUTE_TO = readString(dis);
					
					this.AUTHORITY_APPROVE_SAMPLE_REQUESTS = readString(dis);
					
					this.APPROVE_SPECIAL_FLAG = readString(dis);
					
					this.OVERRIDE_SAMPLE_APPROVAL = readString(dis);
					
					this.OVERRIDE_SPECIAL_APPROVAL = readString(dis);
					
					this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS = readString(dis);
					
					this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS = readString(dis);
					
					this.AUTHORITY_APPROVE_DISPENSER_REQUESTS = readString(dis);
					
					this.AUTHORITY_UPDATE_CUSTOMER_GROUPS = readString(dis);
					
					this.AP_SUPERVISOR_AUTHORITY = readString(dis);
					
					this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY = readString(dis);
					
					this.AUTHORITY_TO_POST_BATCHES = readString(dis);
					
					this.OVERRIDE_DISPENSOR_APPROVAL = readString(dis);
					
					this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS = readString(dis);
					
					this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION = readString(dis);
					
					this.COPY_FROM_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.O4PF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.USER_ID = readString(dis);
					
					this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY = readString(dis);
					
					this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY = readString(dis);
					
					this.PRICE_LIST_APPROVAL_AUTHORITY = readString(dis);
					
					this.APPROVE_VALID_FOR_PRICING = readString(dis);
					
						this.SOCIAL_SECURITY_NO = (BigDecimal) dis.readObject();
					
					this.EMPLOYEE_LAST_NAME = readString(dis);
					
					this.EMPLOYEE_FIRST_NAME = readString(dis);
					
					this.ADDRESS_LINE_1 = readString(dis);
					
					this.ADDRESS_LINE_2 = readString(dis);
					
					this.ADDEESS_LINE_3 = readString(dis);
					
					this.CITY = readString(dis);
					
					this.STATE = readString(dis);
					
					this.ZIP_CODE = readString(dis);
					
					this.BIRTHDATE = readDate(dis);
					
					this.PRINTER = readString(dis);
					
					this.SPOOL_STATUS_FLAG = readString(dis);
					
					this.EMPLOYEE_NO = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.IMS_AUTHORIZED_FREIGHT = readString(dis);
					
					this.AUTHORITY_HOLD_ORDERS = readString(dis);
					
					this.AUTHORITY_RELEASE_ORDERS = readString(dis);
					
					this.AUTHORITY_IMMEDIATE_ORDERS = readString(dis);
					
					this.AUTHORITY_CANCEL_ORDERS = readString(dis);
					
						this.PHONE = (BigDecimal) dis.readObject();
					
					this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS = readString(dis);
					
					this.PRICE_CONTROLLER_APPROVAL_FLAG = readString(dis);
					
					this.TELEPHONE_LOCAL_EXTENSION = readString(dis);
					
					this.HIRE_DATE = readDate(dis);
					
					this.TERMINATION_DATE = readDate(dis);
					
					this.MIDDLE_INITIAL = readString(dis);
					
					this.CUSTOMER_AGMT_APPROVAL_LEVEL = readString(dis);
					
					this.UPDATE_PO_COST = readString(dis);
					
					this.MISCELLANEOUS_BILLING_APPROVAL = readString(dis);
					
					this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL = readString(dis);
					
					this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP = readString(dis);
					
					this.AGEING_POLICY_APPROVAL_AUTH_BILL = readString(dis);
					
					this.AGEING_POLICY_APPROVAL_AUTH_SHIP = readString(dis);
					
					this.DISCOUNT_GRACE_DAYS_APP_BILL = readString(dis);
					
					this.DISCOUNT_GRACE_DAYS_APP_SHIP = readString(dis);
					
					this.NET_GRACE_DAYS_APP_BILL = readString(dis);
					
					this.NET_GRACE_DAYS_APP_SHIP = readString(dis);
					
					this.PAYMENT_TERMS_POLICY_APP_BILL = readString(dis);
					
					this.PAYMENT_TERMS_POLICY_APP_SHIP = readString(dis);
					
					this.STOP_CODE_APPROVAL_AUTHORITY_BILL = readString(dis);
					
					this.STOP_CODE_APPROVAL_AUTHORITY_SHIP = readString(dis);
					
					this.ALLOC_INVENTORY_IMMED_APP_SHIP = readString(dis);
					
					this.RESTOCK_FEE_APPROVAL_FLAG_SHIP = readString(dis);
					
					this.MISCELLANEOUS_TAX_EXEMPT_SHIP = readString(dis);
					
					this.BUYER_SUPERVISOR_AUTHORITY = readString(dis);
					
					this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS = readString(dis);
					
					this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS = readString(dis);
					
					this.APPROVAL_SECURITY_LEVEL = readString(dis);
					
					this.VISIBILITY_SECURITY_LEVEL = readString(dis);
					
					this.AUTO_UP_FLAG = readString(dis);
					
					this.AUTO_DOWN_FLAG = readString(dis);
					
					this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE = readString(dis);
					
					this.APPROVAL_ROUTE_TO = readString(dis);
					
					this.AUTHORITY_APPROVE_SAMPLE_REQUESTS = readString(dis);
					
					this.APPROVE_SPECIAL_FLAG = readString(dis);
					
					this.OVERRIDE_SAMPLE_APPROVAL = readString(dis);
					
					this.OVERRIDE_SPECIAL_APPROVAL = readString(dis);
					
					this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS = readString(dis);
					
					this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS = readString(dis);
					
					this.AUTHORITY_APPROVE_DISPENSER_REQUESTS = readString(dis);
					
					this.AUTHORITY_UPDATE_CUSTOMER_GROUPS = readString(dis);
					
					this.AP_SUPERVISOR_AUTHORITY = readString(dis);
					
					this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY = readString(dis);
					
					this.AUTHORITY_TO_POST_BATCHES = readString(dis);
					
					this.OVERRIDE_DISPENSOR_APPROVAL = readString(dis);
					
					this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS = readString(dis);
					
					this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION = readString(dis);
					
					this.COPY_FROM_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.O4PF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.USER_ID,dos);
					
					// String
				
						writeString(this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.PRICE_LIST_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.APPROVE_VALID_FOR_PRICING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SOCIAL_SECURITY_NO);
					
					// String
				
						writeString(this.EMPLOYEE_LAST_NAME,dos);
					
					// String
				
						writeString(this.EMPLOYEE_FIRST_NAME,dos);
					
					// String
				
						writeString(this.ADDRESS_LINE_1,dos);
					
					// String
				
						writeString(this.ADDRESS_LINE_2,dos);
					
					// String
				
						writeString(this.ADDEESS_LINE_3,dos);
					
					// String
				
						writeString(this.CITY,dos);
					
					// String
				
						writeString(this.STATE,dos);
					
					// String
				
						writeString(this.ZIP_CODE,dos);
					
					// java.util.Date
				
						writeDate(this.BIRTHDATE,dos);
					
					// String
				
						writeString(this.PRINTER,dos);
					
					// String
				
						writeString(this.SPOOL_STATUS_FLAG,dos);
					
					// String
				
						writeString(this.EMPLOYEE_NO,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.IMS_AUTHORIZED_FREIGHT,dos);
					
					// String
				
						writeString(this.AUTHORITY_HOLD_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_RELEASE_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_IMMEDIATE_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_CANCEL_ORDERS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PHONE);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS,dos);
					
					// String
				
						writeString(this.PRICE_CONTROLLER_APPROVAL_FLAG,dos);
					
					// String
				
						writeString(this.TELEPHONE_LOCAL_EXTENSION,dos);
					
					// java.util.Date
				
						writeDate(this.HIRE_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.TERMINATION_DATE,dos);
					
					// String
				
						writeString(this.MIDDLE_INITIAL,dos);
					
					// String
				
						writeString(this.CUSTOMER_AGMT_APPROVAL_LEVEL,dos);
					
					// String
				
						writeString(this.UPDATE_PO_COST,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_BILLING_APPROVAL,dos);
					
					// String
				
						writeString(this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL,dos);
					
					// String
				
						writeString(this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP,dos);
					
					// String
				
						writeString(this.AGEING_POLICY_APPROVAL_AUTH_BILL,dos);
					
					// String
				
						writeString(this.AGEING_POLICY_APPROVAL_AUTH_SHIP,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_DAYS_APP_BILL,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_DAYS_APP_SHIP,dos);
					
					// String
				
						writeString(this.NET_GRACE_DAYS_APP_BILL,dos);
					
					// String
				
						writeString(this.NET_GRACE_DAYS_APP_SHIP,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY_APP_BILL,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY_APP_SHIP,dos);
					
					// String
				
						writeString(this.STOP_CODE_APPROVAL_AUTHORITY_BILL,dos);
					
					// String
				
						writeString(this.STOP_CODE_APPROVAL_AUTHORITY_SHIP,dos);
					
					// String
				
						writeString(this.ALLOC_INVENTORY_IMMED_APP_SHIP,dos);
					
					// String
				
						writeString(this.RESTOCK_FEE_APPROVAL_FLAG_SHIP,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_TAX_EXEMPT_SHIP,dos);
					
					// String
				
						writeString(this.BUYER_SUPERVISOR_AUTHORITY,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS,dos);
					
					// String
				
						writeString(this.APPROVAL_SECURITY_LEVEL,dos);
					
					// String
				
						writeString(this.VISIBILITY_SECURITY_LEVEL,dos);
					
					// String
				
						writeString(this.AUTO_UP_FLAG,dos);
					
					// String
				
						writeString(this.AUTO_DOWN_FLAG,dos);
					
					// String
				
						writeString(this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE,dos);
					
					// String
				
						writeString(this.APPROVAL_ROUTE_TO,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_SAMPLE_REQUESTS,dos);
					
					// String
				
						writeString(this.APPROVE_SPECIAL_FLAG,dos);
					
					// String
				
						writeString(this.OVERRIDE_SAMPLE_APPROVAL,dos);
					
					// String
				
						writeString(this.OVERRIDE_SPECIAL_APPROVAL,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_DISPENSER_REQUESTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_UPDATE_CUSTOMER_GROUPS,dos);
					
					// String
				
						writeString(this.AP_SUPERVISOR_AUTHORITY,dos);
					
					// String
				
						writeString(this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY,dos);
					
					// String
				
						writeString(this.AUTHORITY_TO_POST_BATCHES,dos);
					
					// String
				
						writeString(this.OVERRIDE_DISPENSOR_APPROVAL,dos);
					
					// String
				
						writeString(this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS,dos);
					
					// String
				
						writeString(this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION,dos);
					
					// String
				
						writeString(this.COPY_FROM_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.O4PF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.USER_ID,dos);
					
					// String
				
						writeString(this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.PRICE_LIST_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.APPROVE_VALID_FOR_PRICING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SOCIAL_SECURITY_NO);
					
					// String
				
						writeString(this.EMPLOYEE_LAST_NAME,dos);
					
					// String
				
						writeString(this.EMPLOYEE_FIRST_NAME,dos);
					
					// String
				
						writeString(this.ADDRESS_LINE_1,dos);
					
					// String
				
						writeString(this.ADDRESS_LINE_2,dos);
					
					// String
				
						writeString(this.ADDEESS_LINE_3,dos);
					
					// String
				
						writeString(this.CITY,dos);
					
					// String
				
						writeString(this.STATE,dos);
					
					// String
				
						writeString(this.ZIP_CODE,dos);
					
					// java.util.Date
				
						writeDate(this.BIRTHDATE,dos);
					
					// String
				
						writeString(this.PRINTER,dos);
					
					// String
				
						writeString(this.SPOOL_STATUS_FLAG,dos);
					
					// String
				
						writeString(this.EMPLOYEE_NO,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.IMS_AUTHORIZED_FREIGHT,dos);
					
					// String
				
						writeString(this.AUTHORITY_HOLD_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_RELEASE_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_IMMEDIATE_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_CANCEL_ORDERS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PHONE);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS,dos);
					
					// String
				
						writeString(this.PRICE_CONTROLLER_APPROVAL_FLAG,dos);
					
					// String
				
						writeString(this.TELEPHONE_LOCAL_EXTENSION,dos);
					
					// java.util.Date
				
						writeDate(this.HIRE_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.TERMINATION_DATE,dos);
					
					// String
				
						writeString(this.MIDDLE_INITIAL,dos);
					
					// String
				
						writeString(this.CUSTOMER_AGMT_APPROVAL_LEVEL,dos);
					
					// String
				
						writeString(this.UPDATE_PO_COST,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_BILLING_APPROVAL,dos);
					
					// String
				
						writeString(this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL,dos);
					
					// String
				
						writeString(this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP,dos);
					
					// String
				
						writeString(this.AGEING_POLICY_APPROVAL_AUTH_BILL,dos);
					
					// String
				
						writeString(this.AGEING_POLICY_APPROVAL_AUTH_SHIP,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_DAYS_APP_BILL,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_DAYS_APP_SHIP,dos);
					
					// String
				
						writeString(this.NET_GRACE_DAYS_APP_BILL,dos);
					
					// String
				
						writeString(this.NET_GRACE_DAYS_APP_SHIP,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY_APP_BILL,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY_APP_SHIP,dos);
					
					// String
				
						writeString(this.STOP_CODE_APPROVAL_AUTHORITY_BILL,dos);
					
					// String
				
						writeString(this.STOP_CODE_APPROVAL_AUTHORITY_SHIP,dos);
					
					// String
				
						writeString(this.ALLOC_INVENTORY_IMMED_APP_SHIP,dos);
					
					// String
				
						writeString(this.RESTOCK_FEE_APPROVAL_FLAG_SHIP,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_TAX_EXEMPT_SHIP,dos);
					
					// String
				
						writeString(this.BUYER_SUPERVISOR_AUTHORITY,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS,dos);
					
					// String
				
						writeString(this.APPROVAL_SECURITY_LEVEL,dos);
					
					// String
				
						writeString(this.VISIBILITY_SECURITY_LEVEL,dos);
					
					// String
				
						writeString(this.AUTO_UP_FLAG,dos);
					
					// String
				
						writeString(this.AUTO_DOWN_FLAG,dos);
					
					// String
				
						writeString(this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE,dos);
					
					// String
				
						writeString(this.APPROVAL_ROUTE_TO,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_SAMPLE_REQUESTS,dos);
					
					// String
				
						writeString(this.APPROVE_SPECIAL_FLAG,dos);
					
					// String
				
						writeString(this.OVERRIDE_SAMPLE_APPROVAL,dos);
					
					// String
				
						writeString(this.OVERRIDE_SPECIAL_APPROVAL,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_DISPENSER_REQUESTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_UPDATE_CUSTOMER_GROUPS,dos);
					
					// String
				
						writeString(this.AP_SUPERVISOR_AUTHORITY,dos);
					
					// String
				
						writeString(this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY,dos);
					
					// String
				
						writeString(this.AUTHORITY_TO_POST_BATCHES,dos);
					
					// String
				
						writeString(this.OVERRIDE_DISPENSOR_APPROVAL,dos);
					
					// String
				
						writeString(this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS,dos);
					
					// String
				
						writeString(this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION,dos);
					
					// String
				
						writeString(this.COPY_FROM_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.O4PF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",USER_ID="+USER_ID);
		sb.append(",MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY="+MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY);
		sb.append(",FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY="+FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY);
		sb.append(",PRICE_LIST_APPROVAL_AUTHORITY="+PRICE_LIST_APPROVAL_AUTHORITY);
		sb.append(",APPROVE_VALID_FOR_PRICING="+APPROVE_VALID_FOR_PRICING);
		sb.append(",SOCIAL_SECURITY_NO="+String.valueOf(SOCIAL_SECURITY_NO));
		sb.append(",EMPLOYEE_LAST_NAME="+EMPLOYEE_LAST_NAME);
		sb.append(",EMPLOYEE_FIRST_NAME="+EMPLOYEE_FIRST_NAME);
		sb.append(",ADDRESS_LINE_1="+ADDRESS_LINE_1);
		sb.append(",ADDRESS_LINE_2="+ADDRESS_LINE_2);
		sb.append(",ADDEESS_LINE_3="+ADDEESS_LINE_3);
		sb.append(",CITY="+CITY);
		sb.append(",STATE="+STATE);
		sb.append(",ZIP_CODE="+ZIP_CODE);
		sb.append(",BIRTHDATE="+String.valueOf(BIRTHDATE));
		sb.append(",PRINTER="+PRINTER);
		sb.append(",SPOOL_STATUS_FLAG="+SPOOL_STATUS_FLAG);
		sb.append(",EMPLOYEE_NO="+EMPLOYEE_NO);
		sb.append(",STATUS="+STATUS);
		sb.append(",IMS_AUTHORIZED_FREIGHT="+IMS_AUTHORIZED_FREIGHT);
		sb.append(",AUTHORITY_HOLD_ORDERS="+AUTHORITY_HOLD_ORDERS);
		sb.append(",AUTHORITY_RELEASE_ORDERS="+AUTHORITY_RELEASE_ORDERS);
		sb.append(",AUTHORITY_IMMEDIATE_ORDERS="+AUTHORITY_IMMEDIATE_ORDERS);
		sb.append(",AUTHORITY_CANCEL_ORDERS="+AUTHORITY_CANCEL_ORDERS);
		sb.append(",PHONE="+String.valueOf(PHONE));
		sb.append(",AUTHORITY_APPROVE_RECEIVED_PAYMENTS="+AUTHORITY_APPROVE_RECEIVED_PAYMENTS);
		sb.append(",PRICE_CONTROLLER_APPROVAL_FLAG="+PRICE_CONTROLLER_APPROVAL_FLAG);
		sb.append(",TELEPHONE_LOCAL_EXTENSION="+TELEPHONE_LOCAL_EXTENSION);
		sb.append(",HIRE_DATE="+String.valueOf(HIRE_DATE));
		sb.append(",TERMINATION_DATE="+String.valueOf(TERMINATION_DATE));
		sb.append(",MIDDLE_INITIAL="+MIDDLE_INITIAL);
		sb.append(",CUSTOMER_AGMT_APPROVAL_LEVEL="+CUSTOMER_AGMT_APPROVAL_LEVEL);
		sb.append(",UPDATE_PO_COST="+UPDATE_PO_COST);
		sb.append(",MISCELLANEOUS_BILLING_APPROVAL="+MISCELLANEOUS_BILLING_APPROVAL);
		sb.append(",ACTIVE_INACTIVE_APPROVAL_AUTH_BILL="+ACTIVE_INACTIVE_APPROVAL_AUTH_BILL);
		sb.append(",ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP="+ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP);
		sb.append(",AGEING_POLICY_APPROVAL_AUTH_BILL="+AGEING_POLICY_APPROVAL_AUTH_BILL);
		sb.append(",AGEING_POLICY_APPROVAL_AUTH_SHIP="+AGEING_POLICY_APPROVAL_AUTH_SHIP);
		sb.append(",DISCOUNT_GRACE_DAYS_APP_BILL="+DISCOUNT_GRACE_DAYS_APP_BILL);
		sb.append(",DISCOUNT_GRACE_DAYS_APP_SHIP="+DISCOUNT_GRACE_DAYS_APP_SHIP);
		sb.append(",NET_GRACE_DAYS_APP_BILL="+NET_GRACE_DAYS_APP_BILL);
		sb.append(",NET_GRACE_DAYS_APP_SHIP="+NET_GRACE_DAYS_APP_SHIP);
		sb.append(",PAYMENT_TERMS_POLICY_APP_BILL="+PAYMENT_TERMS_POLICY_APP_BILL);
		sb.append(",PAYMENT_TERMS_POLICY_APP_SHIP="+PAYMENT_TERMS_POLICY_APP_SHIP);
		sb.append(",STOP_CODE_APPROVAL_AUTHORITY_BILL="+STOP_CODE_APPROVAL_AUTHORITY_BILL);
		sb.append(",STOP_CODE_APPROVAL_AUTHORITY_SHIP="+STOP_CODE_APPROVAL_AUTHORITY_SHIP);
		sb.append(",ALLOC_INVENTORY_IMMED_APP_SHIP="+ALLOC_INVENTORY_IMMED_APP_SHIP);
		sb.append(",RESTOCK_FEE_APPROVAL_FLAG_SHIP="+RESTOCK_FEE_APPROVAL_FLAG_SHIP);
		sb.append(",MISCELLANEOUS_TAX_EXEMPT_SHIP="+MISCELLANEOUS_TAX_EXEMPT_SHIP);
		sb.append(",BUYER_SUPERVISOR_AUTHORITY="+BUYER_SUPERVISOR_AUTHORITY);
		sb.append(",AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS="+AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS);
		sb.append(",AUTHORITY_TO_APPROVE_PICKUP_REQUESTS="+AUTHORITY_TO_APPROVE_PICKUP_REQUESTS);
		sb.append(",APPROVAL_SECURITY_LEVEL="+APPROVAL_SECURITY_LEVEL);
		sb.append(",VISIBILITY_SECURITY_LEVEL="+VISIBILITY_SECURITY_LEVEL);
		sb.append(",AUTO_UP_FLAG="+AUTO_UP_FLAG);
		sb.append(",AUTO_DOWN_FLAG="+AUTO_DOWN_FLAG);
		sb.append(",AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE="+AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE);
		sb.append(",APPROVAL_ROUTE_TO="+APPROVAL_ROUTE_TO);
		sb.append(",AUTHORITY_APPROVE_SAMPLE_REQUESTS="+AUTHORITY_APPROVE_SAMPLE_REQUESTS);
		sb.append(",APPROVE_SPECIAL_FLAG="+APPROVE_SPECIAL_FLAG);
		sb.append(",OVERRIDE_SAMPLE_APPROVAL="+OVERRIDE_SAMPLE_APPROVAL);
		sb.append(",OVERRIDE_SPECIAL_APPROVAL="+OVERRIDE_SPECIAL_APPROVAL);
		sb.append(",AUTHORITY_APPROVE_PENDING_CUST_AGMTS="+AUTHORITY_APPROVE_PENDING_CUST_AGMTS);
		sb.append(",AUTHORITY_REFUSE_PENDING_CUST_AGMTS="+AUTHORITY_REFUSE_PENDING_CUST_AGMTS);
		sb.append(",AUTHORITY_APPROVE_DISPENSER_REQUESTS="+AUTHORITY_APPROVE_DISPENSER_REQUESTS);
		sb.append(",AUTHORITY_UPDATE_CUSTOMER_GROUPS="+AUTHORITY_UPDATE_CUSTOMER_GROUPS);
		sb.append(",AP_SUPERVISOR_AUTHORITY="+AP_SUPERVISOR_AUTHORITY);
		sb.append(",TOLERATED_VARIANCE_OVERRIDE_AUTHORITY="+TOLERATED_VARIANCE_OVERRIDE_AUTHORITY);
		sb.append(",AUTHORITY_TO_POST_BATCHES="+AUTHORITY_TO_POST_BATCHES);
		sb.append(",OVERRIDE_DISPENSOR_APPROVAL="+OVERRIDE_DISPENSOR_APPROVAL);
		sb.append(",AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS="+AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS);
		sb.append(",AUTHORITY_MAINTAIN_INSURANCE_INFORMATION="+AUTHORITY_MAINTAIN_INSURANCE_INFORMATION);
		sb.append(",COPY_FROM_USER_ID="+COPY_FROM_USER_ID);
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",O4PF_SVOP="+O4PF_SVOP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_LIST_APPROVAL_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_LIST_APPROVAL_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(APPROVE_VALID_FOR_PRICING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPROVE_VALID_FOR_PRICING);
            			}
            		
        			sb.append("|");
        		
        				if(SOCIAL_SECURITY_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SOCIAL_SECURITY_NO);
            			}
            		
        			sb.append("|");
        		
        				if(EMPLOYEE_LAST_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EMPLOYEE_LAST_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(EMPLOYEE_FIRST_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EMPLOYEE_FIRST_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(ADDRESS_LINE_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADDRESS_LINE_1);
            			}
            		
        			sb.append("|");
        		
        				if(ADDRESS_LINE_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADDRESS_LINE_2);
            			}
            		
        			sb.append("|");
        		
        				if(ADDEESS_LINE_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADDEESS_LINE_3);
            			}
            		
        			sb.append("|");
        		
        				if(CITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CITY);
            			}
            		
        			sb.append("|");
        		
        				if(STATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STATE);
            			}
            		
        			sb.append("|");
        		
        				if(ZIP_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ZIP_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(BIRTHDATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BIRTHDATE);
            			}
            		
        			sb.append("|");
        		
        				if(PRINTER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRINTER);
            			}
            		
        			sb.append("|");
        		
        				if(SPOOL_STATUS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SPOOL_STATUS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(EMPLOYEE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EMPLOYEE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(IMS_AUTHORIZED_FREIGHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IMS_AUTHORIZED_FREIGHT);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_HOLD_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_HOLD_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_RELEASE_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_RELEASE_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_IMMEDIATE_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_IMMEDIATE_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_CANCEL_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_CANCEL_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(PHONE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PHONE);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_RECEIVED_PAYMENTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_RECEIVED_PAYMENTS);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_CONTROLLER_APPROVAL_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_CONTROLLER_APPROVAL_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TELEPHONE_LOCAL_EXTENSION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TELEPHONE_LOCAL_EXTENSION);
            			}
            		
        			sb.append("|");
        		
        				if(HIRE_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HIRE_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(TERMINATION_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TERMINATION_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(MIDDLE_INITIAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MIDDLE_INITIAL);
            			}
            		
        			sb.append("|");
        		
        				if(CUSTOMER_AGMT_APPROVAL_LEVEL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUSTOMER_AGMT_APPROVAL_LEVEL);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATE_PO_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATE_PO_COST);
            			}
            		
        			sb.append("|");
        		
        				if(MISCELLANEOUS_BILLING_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MISCELLANEOUS_BILLING_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(ACTIVE_INACTIVE_APPROVAL_AUTH_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACTIVE_INACTIVE_APPROVAL_AUTH_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(AGEING_POLICY_APPROVAL_AUTH_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AGEING_POLICY_APPROVAL_AUTH_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(AGEING_POLICY_APPROVAL_AUTH_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AGEING_POLICY_APPROVAL_AUTH_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(DISCOUNT_GRACE_DAYS_APP_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISCOUNT_GRACE_DAYS_APP_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(DISCOUNT_GRACE_DAYS_APP_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISCOUNT_GRACE_DAYS_APP_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(NET_GRACE_DAYS_APP_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NET_GRACE_DAYS_APP_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(NET_GRACE_DAYS_APP_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NET_GRACE_DAYS_APP_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(PAYMENT_TERMS_POLICY_APP_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PAYMENT_TERMS_POLICY_APP_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(PAYMENT_TERMS_POLICY_APP_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PAYMENT_TERMS_POLICY_APP_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_CODE_APPROVAL_AUTHORITY_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_CODE_APPROVAL_AUTHORITY_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_CODE_APPROVAL_AUTHORITY_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_CODE_APPROVAL_AUTHORITY_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(ALLOC_INVENTORY_IMMED_APP_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ALLOC_INVENTORY_IMMED_APP_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(RESTOCK_FEE_APPROVAL_FLAG_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESTOCK_FEE_APPROVAL_FLAG_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(MISCELLANEOUS_TAX_EXEMPT_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MISCELLANEOUS_TAX_EXEMPT_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(BUYER_SUPERVISOR_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUYER_SUPERVISOR_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_TO_APPROVE_PICKUP_REQUESTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_TO_APPROVE_PICKUP_REQUESTS);
            			}
            		
        			sb.append("|");
        		
        				if(APPROVAL_SECURITY_LEVEL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPROVAL_SECURITY_LEVEL);
            			}
            		
        			sb.append("|");
        		
        				if(VISIBILITY_SECURITY_LEVEL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VISIBILITY_SECURITY_LEVEL);
            			}
            		
        			sb.append("|");
        		
        				if(AUTO_UP_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTO_UP_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(AUTO_DOWN_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTO_DOWN_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(APPROVAL_ROUTE_TO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPROVAL_ROUTE_TO);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_SAMPLE_REQUESTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_SAMPLE_REQUESTS);
            			}
            		
        			sb.append("|");
        		
        				if(APPROVE_SPECIAL_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPROVE_SPECIAL_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(OVERRIDE_SAMPLE_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OVERRIDE_SAMPLE_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(OVERRIDE_SPECIAL_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OVERRIDE_SPECIAL_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_PENDING_CUST_AGMTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_PENDING_CUST_AGMTS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_REFUSE_PENDING_CUST_AGMTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_REFUSE_PENDING_CUST_AGMTS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_DISPENSER_REQUESTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_DISPENSER_REQUESTS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_UPDATE_CUSTOMER_GROUPS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_UPDATE_CUSTOMER_GROUPS);
            			}
            		
        			sb.append("|");
        		
        				if(AP_SUPERVISOR_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AP_SUPERVISOR_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(TOLERATED_VARIANCE_OVERRIDE_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOLERATED_VARIANCE_OVERRIDE_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_TO_POST_BATCHES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_TO_POST_BATCHES);
            			}
            		
        			sb.append("|");
        		
        				if(OVERRIDE_DISPENSOR_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OVERRIDE_DISPENSOR_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_MAINTAIN_INSURANCE_INFORMATION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_MAINTAIN_INSURANCE_INFORMATION);
            			}
            		
        			sb.append("|");
        		
        				if(COPY_FROM_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COPY_FROM_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				sb.append(IS_DELETED);
        			
        			sb.append("|");
        		
        				if(CREATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(O4PF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4PF_SVOP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(USER_MasterStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.EMPLOYEE_NO, other.EMPLOYEE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];

	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String USER_ID;

				public String getUSER_ID () {
					return this.USER_ID;
				}
				
			    public String MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY;

				public String getMERCHANDISE_PROFORMA_APPROVAL_AUTHORITY () {
					return this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY;
				}
				
			    public String FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY;

				public String getFREIGHT_PRO_FORMA_APPROVAL_AUTHORITY () {
					return this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY;
				}
				
			    public String PRICE_LIST_APPROVAL_AUTHORITY;

				public String getPRICE_LIST_APPROVAL_AUTHORITY () {
					return this.PRICE_LIST_APPROVAL_AUTHORITY;
				}
				
			    public String APPROVE_VALID_FOR_PRICING;

				public String getAPPROVE_VALID_FOR_PRICING () {
					return this.APPROVE_VALID_FOR_PRICING;
				}
				
			    public BigDecimal SOCIAL_SECURITY_NO;

				public BigDecimal getSOCIAL_SECURITY_NO () {
					return this.SOCIAL_SECURITY_NO;
				}
				
			    public String EMPLOYEE_LAST_NAME;

				public String getEMPLOYEE_LAST_NAME () {
					return this.EMPLOYEE_LAST_NAME;
				}
				
			    public String EMPLOYEE_FIRST_NAME;

				public String getEMPLOYEE_FIRST_NAME () {
					return this.EMPLOYEE_FIRST_NAME;
				}
				
			    public String ADDRESS_LINE_1;

				public String getADDRESS_LINE_1 () {
					return this.ADDRESS_LINE_1;
				}
				
			    public String ADDRESS_LINE_2;

				public String getADDRESS_LINE_2 () {
					return this.ADDRESS_LINE_2;
				}
				
			    public String ADDEESS_LINE_3;

				public String getADDEESS_LINE_3 () {
					return this.ADDEESS_LINE_3;
				}
				
			    public String CITY;

				public String getCITY () {
					return this.CITY;
				}
				
			    public String STATE;

				public String getSTATE () {
					return this.STATE;
				}
				
			    public String ZIP_CODE;

				public String getZIP_CODE () {
					return this.ZIP_CODE;
				}
				
			    public String BIRTHDATE;

				public String getBIRTHDATE () {
					return this.BIRTHDATE;
				}
				
			    public String PRINTER;

				public String getPRINTER () {
					return this.PRINTER;
				}
				
			    public String SPOOL_STATUS_FLAG;

				public String getSPOOL_STATUS_FLAG () {
					return this.SPOOL_STATUS_FLAG;
				}
				
			    public String EMPLOYEE_NO;

				public String getEMPLOYEE_NO () {
					return this.EMPLOYEE_NO;
				}
				
			    public String STATUS;

				public String getSTATUS () {
					return this.STATUS;
				}
				
			    public String IMS_AUTHORIZED_FREIGHT;

				public String getIMS_AUTHORIZED_FREIGHT () {
					return this.IMS_AUTHORIZED_FREIGHT;
				}
				
			    public String AUTHORITY_HOLD_ORDERS;

				public String getAUTHORITY_HOLD_ORDERS () {
					return this.AUTHORITY_HOLD_ORDERS;
				}
				
			    public String AUTHORITY_RELEASE_ORDERS;

				public String getAUTHORITY_RELEASE_ORDERS () {
					return this.AUTHORITY_RELEASE_ORDERS;
				}
				
			    public String AUTHORITY_IMMEDIATE_ORDERS;

				public String getAUTHORITY_IMMEDIATE_ORDERS () {
					return this.AUTHORITY_IMMEDIATE_ORDERS;
				}
				
			    public String AUTHORITY_CANCEL_ORDERS;

				public String getAUTHORITY_CANCEL_ORDERS () {
					return this.AUTHORITY_CANCEL_ORDERS;
				}
				
			    public BigDecimal PHONE;

				public BigDecimal getPHONE () {
					return this.PHONE;
				}
				
			    public String AUTHORITY_APPROVE_RECEIVED_PAYMENTS;

				public String getAUTHORITY_APPROVE_RECEIVED_PAYMENTS () {
					return this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS;
				}
				
			    public String PRICE_CONTROLLER_APPROVAL_FLAG;

				public String getPRICE_CONTROLLER_APPROVAL_FLAG () {
					return this.PRICE_CONTROLLER_APPROVAL_FLAG;
				}
				
			    public String TELEPHONE_LOCAL_EXTENSION;

				public String getTELEPHONE_LOCAL_EXTENSION () {
					return this.TELEPHONE_LOCAL_EXTENSION;
				}
				
			    public String HIRE_DATE;

				public String getHIRE_DATE () {
					return this.HIRE_DATE;
				}
				
			    public String TERMINATION_DATE;

				public String getTERMINATION_DATE () {
					return this.TERMINATION_DATE;
				}
				
			    public String MIDDLE_INITIAL;

				public String getMIDDLE_INITIAL () {
					return this.MIDDLE_INITIAL;
				}
				
			    public String CUSTOMER_AGMT_APPROVAL_LEVEL;

				public String getCUSTOMER_AGMT_APPROVAL_LEVEL () {
					return this.CUSTOMER_AGMT_APPROVAL_LEVEL;
				}
				
			    public String UPDATE_PO_COST;

				public String getUPDATE_PO_COST () {
					return this.UPDATE_PO_COST;
				}
				
			    public String MISCELLANEOUS_BILLING_APPROVAL;

				public String getMISCELLANEOUS_BILLING_APPROVAL () {
					return this.MISCELLANEOUS_BILLING_APPROVAL;
				}
				
			    public String ACTIVE_INACTIVE_APPROVAL_AUTH_BILL;

				public String getACTIVE_INACTIVE_APPROVAL_AUTH_BILL () {
					return this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL;
				}
				
			    public String ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP;

				public String getACTIVE_INACTIVE_APPROVAL_AUTH_SHIP () {
					return this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP;
				}
				
			    public String AGEING_POLICY_APPROVAL_AUTH_BILL;

				public String getAGEING_POLICY_APPROVAL_AUTH_BILL () {
					return this.AGEING_POLICY_APPROVAL_AUTH_BILL;
				}
				
			    public String AGEING_POLICY_APPROVAL_AUTH_SHIP;

				public String getAGEING_POLICY_APPROVAL_AUTH_SHIP () {
					return this.AGEING_POLICY_APPROVAL_AUTH_SHIP;
				}
				
			    public String DISCOUNT_GRACE_DAYS_APP_BILL;

				public String getDISCOUNT_GRACE_DAYS_APP_BILL () {
					return this.DISCOUNT_GRACE_DAYS_APP_BILL;
				}
				
			    public String DISCOUNT_GRACE_DAYS_APP_SHIP;

				public String getDISCOUNT_GRACE_DAYS_APP_SHIP () {
					return this.DISCOUNT_GRACE_DAYS_APP_SHIP;
				}
				
			    public String NET_GRACE_DAYS_APP_BILL;

				public String getNET_GRACE_DAYS_APP_BILL () {
					return this.NET_GRACE_DAYS_APP_BILL;
				}
				
			    public String NET_GRACE_DAYS_APP_SHIP;

				public String getNET_GRACE_DAYS_APP_SHIP () {
					return this.NET_GRACE_DAYS_APP_SHIP;
				}
				
			    public String PAYMENT_TERMS_POLICY_APP_BILL;

				public String getPAYMENT_TERMS_POLICY_APP_BILL () {
					return this.PAYMENT_TERMS_POLICY_APP_BILL;
				}
				
			    public String PAYMENT_TERMS_POLICY_APP_SHIP;

				public String getPAYMENT_TERMS_POLICY_APP_SHIP () {
					return this.PAYMENT_TERMS_POLICY_APP_SHIP;
				}
				
			    public String STOP_CODE_APPROVAL_AUTHORITY_BILL;

				public String getSTOP_CODE_APPROVAL_AUTHORITY_BILL () {
					return this.STOP_CODE_APPROVAL_AUTHORITY_BILL;
				}
				
			    public String STOP_CODE_APPROVAL_AUTHORITY_SHIP;

				public String getSTOP_CODE_APPROVAL_AUTHORITY_SHIP () {
					return this.STOP_CODE_APPROVAL_AUTHORITY_SHIP;
				}
				
			    public String ALLOC_INVENTORY_IMMED_APP_SHIP;

				public String getALLOC_INVENTORY_IMMED_APP_SHIP () {
					return this.ALLOC_INVENTORY_IMMED_APP_SHIP;
				}
				
			    public String RESTOCK_FEE_APPROVAL_FLAG_SHIP;

				public String getRESTOCK_FEE_APPROVAL_FLAG_SHIP () {
					return this.RESTOCK_FEE_APPROVAL_FLAG_SHIP;
				}
				
			    public String MISCELLANEOUS_TAX_EXEMPT_SHIP;

				public String getMISCELLANEOUS_TAX_EXEMPT_SHIP () {
					return this.MISCELLANEOUS_TAX_EXEMPT_SHIP;
				}
				
			    public String BUYER_SUPERVISOR_AUTHORITY;

				public String getBUYER_SUPERVISOR_AUTHORITY () {
					return this.BUYER_SUPERVISOR_AUTHORITY;
				}
				
			    public String AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS;

				public String getAUTHORITY_APPROVE_BILLING_ADJ_REQUESTS () {
					return this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS;
				}
				
			    public String AUTHORITY_TO_APPROVE_PICKUP_REQUESTS;

				public String getAUTHORITY_TO_APPROVE_PICKUP_REQUESTS () {
					return this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS;
				}
				
			    public String APPROVAL_SECURITY_LEVEL;

				public String getAPPROVAL_SECURITY_LEVEL () {
					return this.APPROVAL_SECURITY_LEVEL;
				}
				
			    public String VISIBILITY_SECURITY_LEVEL;

				public String getVISIBILITY_SECURITY_LEVEL () {
					return this.VISIBILITY_SECURITY_LEVEL;
				}
				
			    public String AUTO_UP_FLAG;

				public String getAUTO_UP_FLAG () {
					return this.AUTO_UP_FLAG;
				}
				
			    public String AUTO_DOWN_FLAG;

				public String getAUTO_DOWN_FLAG () {
					return this.AUTO_DOWN_FLAG;
				}
				
			    public String AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE;

				public String getAUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE () {
					return this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE;
				}
				
			    public String APPROVAL_ROUTE_TO;

				public String getAPPROVAL_ROUTE_TO () {
					return this.APPROVAL_ROUTE_TO;
				}
				
			    public String AUTHORITY_APPROVE_SAMPLE_REQUESTS;

				public String getAUTHORITY_APPROVE_SAMPLE_REQUESTS () {
					return this.AUTHORITY_APPROVE_SAMPLE_REQUESTS;
				}
				
			    public String APPROVE_SPECIAL_FLAG;

				public String getAPPROVE_SPECIAL_FLAG () {
					return this.APPROVE_SPECIAL_FLAG;
				}
				
			    public String OVERRIDE_SAMPLE_APPROVAL;

				public String getOVERRIDE_SAMPLE_APPROVAL () {
					return this.OVERRIDE_SAMPLE_APPROVAL;
				}
				
			    public String OVERRIDE_SPECIAL_APPROVAL;

				public String getOVERRIDE_SPECIAL_APPROVAL () {
					return this.OVERRIDE_SPECIAL_APPROVAL;
				}
				
			    public String AUTHORITY_APPROVE_PENDING_CUST_AGMTS;

				public String getAUTHORITY_APPROVE_PENDING_CUST_AGMTS () {
					return this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS;
				}
				
			    public String AUTHORITY_REFUSE_PENDING_CUST_AGMTS;

				public String getAUTHORITY_REFUSE_PENDING_CUST_AGMTS () {
					return this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS;
				}
				
			    public String AUTHORITY_APPROVE_DISPENSER_REQUESTS;

				public String getAUTHORITY_APPROVE_DISPENSER_REQUESTS () {
					return this.AUTHORITY_APPROVE_DISPENSER_REQUESTS;
				}
				
			    public String AUTHORITY_UPDATE_CUSTOMER_GROUPS;

				public String getAUTHORITY_UPDATE_CUSTOMER_GROUPS () {
					return this.AUTHORITY_UPDATE_CUSTOMER_GROUPS;
				}
				
			    public String AP_SUPERVISOR_AUTHORITY;

				public String getAP_SUPERVISOR_AUTHORITY () {
					return this.AP_SUPERVISOR_AUTHORITY;
				}
				
			    public String TOLERATED_VARIANCE_OVERRIDE_AUTHORITY;

				public String getTOLERATED_VARIANCE_OVERRIDE_AUTHORITY () {
					return this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY;
				}
				
			    public String AUTHORITY_TO_POST_BATCHES;

				public String getAUTHORITY_TO_POST_BATCHES () {
					return this.AUTHORITY_TO_POST_BATCHES;
				}
				
			    public String OVERRIDE_DISPENSOR_APPROVAL;

				public String getOVERRIDE_DISPENSOR_APPROVAL () {
					return this.OVERRIDE_DISPENSOR_APPROVAL;
				}
				
			    public String AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS;

				public String getAUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS () {
					return this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS;
				}
				
			    public String AUTHORITY_MAINTAIN_INSURANCE_INFORMATION;

				public String getAUTHORITY_MAINTAIN_INSURANCE_INFORMATION () {
					return this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION;
				}
				
			    public String COPY_FROM_USER_ID;

				public String getCOPY_FROM_USER_ID () {
					return this.COPY_FROM_USER_ID;
				}
				
			    public String CREATED_TIMESTAMP;

				public String getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public String UPDATED_TIMESTAMP;

				public String getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.USER_ID = readString(dis);
					
					this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY = readString(dis);
					
					this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY = readString(dis);
					
					this.PRICE_LIST_APPROVAL_AUTHORITY = readString(dis);
					
					this.APPROVE_VALID_FOR_PRICING = readString(dis);
					
						this.SOCIAL_SECURITY_NO = (BigDecimal) dis.readObject();
					
					this.EMPLOYEE_LAST_NAME = readString(dis);
					
					this.EMPLOYEE_FIRST_NAME = readString(dis);
					
					this.ADDRESS_LINE_1 = readString(dis);
					
					this.ADDRESS_LINE_2 = readString(dis);
					
					this.ADDEESS_LINE_3 = readString(dis);
					
					this.CITY = readString(dis);
					
					this.STATE = readString(dis);
					
					this.ZIP_CODE = readString(dis);
					
					this.BIRTHDATE = readString(dis);
					
					this.PRINTER = readString(dis);
					
					this.SPOOL_STATUS_FLAG = readString(dis);
					
					this.EMPLOYEE_NO = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.IMS_AUTHORIZED_FREIGHT = readString(dis);
					
					this.AUTHORITY_HOLD_ORDERS = readString(dis);
					
					this.AUTHORITY_RELEASE_ORDERS = readString(dis);
					
					this.AUTHORITY_IMMEDIATE_ORDERS = readString(dis);
					
					this.AUTHORITY_CANCEL_ORDERS = readString(dis);
					
						this.PHONE = (BigDecimal) dis.readObject();
					
					this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS = readString(dis);
					
					this.PRICE_CONTROLLER_APPROVAL_FLAG = readString(dis);
					
					this.TELEPHONE_LOCAL_EXTENSION = readString(dis);
					
					this.HIRE_DATE = readString(dis);
					
					this.TERMINATION_DATE = readString(dis);
					
					this.MIDDLE_INITIAL = readString(dis);
					
					this.CUSTOMER_AGMT_APPROVAL_LEVEL = readString(dis);
					
					this.UPDATE_PO_COST = readString(dis);
					
					this.MISCELLANEOUS_BILLING_APPROVAL = readString(dis);
					
					this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL = readString(dis);
					
					this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP = readString(dis);
					
					this.AGEING_POLICY_APPROVAL_AUTH_BILL = readString(dis);
					
					this.AGEING_POLICY_APPROVAL_AUTH_SHIP = readString(dis);
					
					this.DISCOUNT_GRACE_DAYS_APP_BILL = readString(dis);
					
					this.DISCOUNT_GRACE_DAYS_APP_SHIP = readString(dis);
					
					this.NET_GRACE_DAYS_APP_BILL = readString(dis);
					
					this.NET_GRACE_DAYS_APP_SHIP = readString(dis);
					
					this.PAYMENT_TERMS_POLICY_APP_BILL = readString(dis);
					
					this.PAYMENT_TERMS_POLICY_APP_SHIP = readString(dis);
					
					this.STOP_CODE_APPROVAL_AUTHORITY_BILL = readString(dis);
					
					this.STOP_CODE_APPROVAL_AUTHORITY_SHIP = readString(dis);
					
					this.ALLOC_INVENTORY_IMMED_APP_SHIP = readString(dis);
					
					this.RESTOCK_FEE_APPROVAL_FLAG_SHIP = readString(dis);
					
					this.MISCELLANEOUS_TAX_EXEMPT_SHIP = readString(dis);
					
					this.BUYER_SUPERVISOR_AUTHORITY = readString(dis);
					
					this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS = readString(dis);
					
					this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS = readString(dis);
					
					this.APPROVAL_SECURITY_LEVEL = readString(dis);
					
					this.VISIBILITY_SECURITY_LEVEL = readString(dis);
					
					this.AUTO_UP_FLAG = readString(dis);
					
					this.AUTO_DOWN_FLAG = readString(dis);
					
					this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE = readString(dis);
					
					this.APPROVAL_ROUTE_TO = readString(dis);
					
					this.AUTHORITY_APPROVE_SAMPLE_REQUESTS = readString(dis);
					
					this.APPROVE_SPECIAL_FLAG = readString(dis);
					
					this.OVERRIDE_SAMPLE_APPROVAL = readString(dis);
					
					this.OVERRIDE_SPECIAL_APPROVAL = readString(dis);
					
					this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS = readString(dis);
					
					this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS = readString(dis);
					
					this.AUTHORITY_APPROVE_DISPENSER_REQUESTS = readString(dis);
					
					this.AUTHORITY_UPDATE_CUSTOMER_GROUPS = readString(dis);
					
					this.AP_SUPERVISOR_AUTHORITY = readString(dis);
					
					this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY = readString(dis);
					
					this.AUTHORITY_TO_POST_BATCHES = readString(dis);
					
					this.OVERRIDE_DISPENSOR_APPROVAL = readString(dis);
					
					this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS = readString(dis);
					
					this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION = readString(dis);
					
					this.COPY_FROM_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readString(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.USER_ID = readString(dis);
					
					this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY = readString(dis);
					
					this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY = readString(dis);
					
					this.PRICE_LIST_APPROVAL_AUTHORITY = readString(dis);
					
					this.APPROVE_VALID_FOR_PRICING = readString(dis);
					
						this.SOCIAL_SECURITY_NO = (BigDecimal) dis.readObject();
					
					this.EMPLOYEE_LAST_NAME = readString(dis);
					
					this.EMPLOYEE_FIRST_NAME = readString(dis);
					
					this.ADDRESS_LINE_1 = readString(dis);
					
					this.ADDRESS_LINE_2 = readString(dis);
					
					this.ADDEESS_LINE_3 = readString(dis);
					
					this.CITY = readString(dis);
					
					this.STATE = readString(dis);
					
					this.ZIP_CODE = readString(dis);
					
					this.BIRTHDATE = readString(dis);
					
					this.PRINTER = readString(dis);
					
					this.SPOOL_STATUS_FLAG = readString(dis);
					
					this.EMPLOYEE_NO = readString(dis);
					
					this.STATUS = readString(dis);
					
					this.IMS_AUTHORIZED_FREIGHT = readString(dis);
					
					this.AUTHORITY_HOLD_ORDERS = readString(dis);
					
					this.AUTHORITY_RELEASE_ORDERS = readString(dis);
					
					this.AUTHORITY_IMMEDIATE_ORDERS = readString(dis);
					
					this.AUTHORITY_CANCEL_ORDERS = readString(dis);
					
						this.PHONE = (BigDecimal) dis.readObject();
					
					this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS = readString(dis);
					
					this.PRICE_CONTROLLER_APPROVAL_FLAG = readString(dis);
					
					this.TELEPHONE_LOCAL_EXTENSION = readString(dis);
					
					this.HIRE_DATE = readString(dis);
					
					this.TERMINATION_DATE = readString(dis);
					
					this.MIDDLE_INITIAL = readString(dis);
					
					this.CUSTOMER_AGMT_APPROVAL_LEVEL = readString(dis);
					
					this.UPDATE_PO_COST = readString(dis);
					
					this.MISCELLANEOUS_BILLING_APPROVAL = readString(dis);
					
					this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL = readString(dis);
					
					this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP = readString(dis);
					
					this.AGEING_POLICY_APPROVAL_AUTH_BILL = readString(dis);
					
					this.AGEING_POLICY_APPROVAL_AUTH_SHIP = readString(dis);
					
					this.DISCOUNT_GRACE_DAYS_APP_BILL = readString(dis);
					
					this.DISCOUNT_GRACE_DAYS_APP_SHIP = readString(dis);
					
					this.NET_GRACE_DAYS_APP_BILL = readString(dis);
					
					this.NET_GRACE_DAYS_APP_SHIP = readString(dis);
					
					this.PAYMENT_TERMS_POLICY_APP_BILL = readString(dis);
					
					this.PAYMENT_TERMS_POLICY_APP_SHIP = readString(dis);
					
					this.STOP_CODE_APPROVAL_AUTHORITY_BILL = readString(dis);
					
					this.STOP_CODE_APPROVAL_AUTHORITY_SHIP = readString(dis);
					
					this.ALLOC_INVENTORY_IMMED_APP_SHIP = readString(dis);
					
					this.RESTOCK_FEE_APPROVAL_FLAG_SHIP = readString(dis);
					
					this.MISCELLANEOUS_TAX_EXEMPT_SHIP = readString(dis);
					
					this.BUYER_SUPERVISOR_AUTHORITY = readString(dis);
					
					this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS = readString(dis);
					
					this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS = readString(dis);
					
					this.APPROVAL_SECURITY_LEVEL = readString(dis);
					
					this.VISIBILITY_SECURITY_LEVEL = readString(dis);
					
					this.AUTO_UP_FLAG = readString(dis);
					
					this.AUTO_DOWN_FLAG = readString(dis);
					
					this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE = readString(dis);
					
					this.APPROVAL_ROUTE_TO = readString(dis);
					
					this.AUTHORITY_APPROVE_SAMPLE_REQUESTS = readString(dis);
					
					this.APPROVE_SPECIAL_FLAG = readString(dis);
					
					this.OVERRIDE_SAMPLE_APPROVAL = readString(dis);
					
					this.OVERRIDE_SPECIAL_APPROVAL = readString(dis);
					
					this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS = readString(dis);
					
					this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS = readString(dis);
					
					this.AUTHORITY_APPROVE_DISPENSER_REQUESTS = readString(dis);
					
					this.AUTHORITY_UPDATE_CUSTOMER_GROUPS = readString(dis);
					
					this.AP_SUPERVISOR_AUTHORITY = readString(dis);
					
					this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY = readString(dis);
					
					this.AUTHORITY_TO_POST_BATCHES = readString(dis);
					
					this.OVERRIDE_DISPENSOR_APPROVAL = readString(dis);
					
					this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS = readString(dis);
					
					this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION = readString(dis);
					
					this.COPY_FROM_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readString(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.USER_ID,dos);
					
					// String
				
						writeString(this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.PRICE_LIST_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.APPROVE_VALID_FOR_PRICING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SOCIAL_SECURITY_NO);
					
					// String
				
						writeString(this.EMPLOYEE_LAST_NAME,dos);
					
					// String
				
						writeString(this.EMPLOYEE_FIRST_NAME,dos);
					
					// String
				
						writeString(this.ADDRESS_LINE_1,dos);
					
					// String
				
						writeString(this.ADDRESS_LINE_2,dos);
					
					// String
				
						writeString(this.ADDEESS_LINE_3,dos);
					
					// String
				
						writeString(this.CITY,dos);
					
					// String
				
						writeString(this.STATE,dos);
					
					// String
				
						writeString(this.ZIP_CODE,dos);
					
					// String
				
						writeString(this.BIRTHDATE,dos);
					
					// String
				
						writeString(this.PRINTER,dos);
					
					// String
				
						writeString(this.SPOOL_STATUS_FLAG,dos);
					
					// String
				
						writeString(this.EMPLOYEE_NO,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.IMS_AUTHORIZED_FREIGHT,dos);
					
					// String
				
						writeString(this.AUTHORITY_HOLD_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_RELEASE_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_IMMEDIATE_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_CANCEL_ORDERS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PHONE);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS,dos);
					
					// String
				
						writeString(this.PRICE_CONTROLLER_APPROVAL_FLAG,dos);
					
					// String
				
						writeString(this.TELEPHONE_LOCAL_EXTENSION,dos);
					
					// String
				
						writeString(this.HIRE_DATE,dos);
					
					// String
				
						writeString(this.TERMINATION_DATE,dos);
					
					// String
				
						writeString(this.MIDDLE_INITIAL,dos);
					
					// String
				
						writeString(this.CUSTOMER_AGMT_APPROVAL_LEVEL,dos);
					
					// String
				
						writeString(this.UPDATE_PO_COST,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_BILLING_APPROVAL,dos);
					
					// String
				
						writeString(this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL,dos);
					
					// String
				
						writeString(this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP,dos);
					
					// String
				
						writeString(this.AGEING_POLICY_APPROVAL_AUTH_BILL,dos);
					
					// String
				
						writeString(this.AGEING_POLICY_APPROVAL_AUTH_SHIP,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_DAYS_APP_BILL,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_DAYS_APP_SHIP,dos);
					
					// String
				
						writeString(this.NET_GRACE_DAYS_APP_BILL,dos);
					
					// String
				
						writeString(this.NET_GRACE_DAYS_APP_SHIP,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY_APP_BILL,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY_APP_SHIP,dos);
					
					// String
				
						writeString(this.STOP_CODE_APPROVAL_AUTHORITY_BILL,dos);
					
					// String
				
						writeString(this.STOP_CODE_APPROVAL_AUTHORITY_SHIP,dos);
					
					// String
				
						writeString(this.ALLOC_INVENTORY_IMMED_APP_SHIP,dos);
					
					// String
				
						writeString(this.RESTOCK_FEE_APPROVAL_FLAG_SHIP,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_TAX_EXEMPT_SHIP,dos);
					
					// String
				
						writeString(this.BUYER_SUPERVISOR_AUTHORITY,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS,dos);
					
					// String
				
						writeString(this.APPROVAL_SECURITY_LEVEL,dos);
					
					// String
				
						writeString(this.VISIBILITY_SECURITY_LEVEL,dos);
					
					// String
				
						writeString(this.AUTO_UP_FLAG,dos);
					
					// String
				
						writeString(this.AUTO_DOWN_FLAG,dos);
					
					// String
				
						writeString(this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE,dos);
					
					// String
				
						writeString(this.APPROVAL_ROUTE_TO,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_SAMPLE_REQUESTS,dos);
					
					// String
				
						writeString(this.APPROVE_SPECIAL_FLAG,dos);
					
					// String
				
						writeString(this.OVERRIDE_SAMPLE_APPROVAL,dos);
					
					// String
				
						writeString(this.OVERRIDE_SPECIAL_APPROVAL,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_DISPENSER_REQUESTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_UPDATE_CUSTOMER_GROUPS,dos);
					
					// String
				
						writeString(this.AP_SUPERVISOR_AUTHORITY,dos);
					
					// String
				
						writeString(this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY,dos);
					
					// String
				
						writeString(this.AUTHORITY_TO_POST_BATCHES,dos);
					
					// String
				
						writeString(this.OVERRIDE_DISPENSOR_APPROVAL,dos);
					
					// String
				
						writeString(this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS,dos);
					
					// String
				
						writeString(this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION,dos);
					
					// String
				
						writeString(this.COPY_FROM_USER_ID,dos);
					
					// String
				
						writeString(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.USER_ID,dos);
					
					// String
				
						writeString(this.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.PRICE_LIST_APPROVAL_AUTHORITY,dos);
					
					// String
				
						writeString(this.APPROVE_VALID_FOR_PRICING,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SOCIAL_SECURITY_NO);
					
					// String
				
						writeString(this.EMPLOYEE_LAST_NAME,dos);
					
					// String
				
						writeString(this.EMPLOYEE_FIRST_NAME,dos);
					
					// String
				
						writeString(this.ADDRESS_LINE_1,dos);
					
					// String
				
						writeString(this.ADDRESS_LINE_2,dos);
					
					// String
				
						writeString(this.ADDEESS_LINE_3,dos);
					
					// String
				
						writeString(this.CITY,dos);
					
					// String
				
						writeString(this.STATE,dos);
					
					// String
				
						writeString(this.ZIP_CODE,dos);
					
					// String
				
						writeString(this.BIRTHDATE,dos);
					
					// String
				
						writeString(this.PRINTER,dos);
					
					// String
				
						writeString(this.SPOOL_STATUS_FLAG,dos);
					
					// String
				
						writeString(this.EMPLOYEE_NO,dos);
					
					// String
				
						writeString(this.STATUS,dos);
					
					// String
				
						writeString(this.IMS_AUTHORIZED_FREIGHT,dos);
					
					// String
				
						writeString(this.AUTHORITY_HOLD_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_RELEASE_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_IMMEDIATE_ORDERS,dos);
					
					// String
				
						writeString(this.AUTHORITY_CANCEL_ORDERS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PHONE);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_RECEIVED_PAYMENTS,dos);
					
					// String
				
						writeString(this.PRICE_CONTROLLER_APPROVAL_FLAG,dos);
					
					// String
				
						writeString(this.TELEPHONE_LOCAL_EXTENSION,dos);
					
					// String
				
						writeString(this.HIRE_DATE,dos);
					
					// String
				
						writeString(this.TERMINATION_DATE,dos);
					
					// String
				
						writeString(this.MIDDLE_INITIAL,dos);
					
					// String
				
						writeString(this.CUSTOMER_AGMT_APPROVAL_LEVEL,dos);
					
					// String
				
						writeString(this.UPDATE_PO_COST,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_BILLING_APPROVAL,dos);
					
					// String
				
						writeString(this.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL,dos);
					
					// String
				
						writeString(this.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP,dos);
					
					// String
				
						writeString(this.AGEING_POLICY_APPROVAL_AUTH_BILL,dos);
					
					// String
				
						writeString(this.AGEING_POLICY_APPROVAL_AUTH_SHIP,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_DAYS_APP_BILL,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_DAYS_APP_SHIP,dos);
					
					// String
				
						writeString(this.NET_GRACE_DAYS_APP_BILL,dos);
					
					// String
				
						writeString(this.NET_GRACE_DAYS_APP_SHIP,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY_APP_BILL,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY_APP_SHIP,dos);
					
					// String
				
						writeString(this.STOP_CODE_APPROVAL_AUTHORITY_BILL,dos);
					
					// String
				
						writeString(this.STOP_CODE_APPROVAL_AUTHORITY_SHIP,dos);
					
					// String
				
						writeString(this.ALLOC_INVENTORY_IMMED_APP_SHIP,dos);
					
					// String
				
						writeString(this.RESTOCK_FEE_APPROVAL_FLAG_SHIP,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_TAX_EXEMPT_SHIP,dos);
					
					// String
				
						writeString(this.BUYER_SUPERVISOR_AUTHORITY,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS,dos);
					
					// String
				
						writeString(this.APPROVAL_SECURITY_LEVEL,dos);
					
					// String
				
						writeString(this.VISIBILITY_SECURITY_LEVEL,dos);
					
					// String
				
						writeString(this.AUTO_UP_FLAG,dos);
					
					// String
				
						writeString(this.AUTO_DOWN_FLAG,dos);
					
					// String
				
						writeString(this.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE,dos);
					
					// String
				
						writeString(this.APPROVAL_ROUTE_TO,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_SAMPLE_REQUESTS,dos);
					
					// String
				
						writeString(this.APPROVE_SPECIAL_FLAG,dos);
					
					// String
				
						writeString(this.OVERRIDE_SAMPLE_APPROVAL,dos);
					
					// String
				
						writeString(this.OVERRIDE_SPECIAL_APPROVAL,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_PENDING_CUST_AGMTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_REFUSE_PENDING_CUST_AGMTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_APPROVE_DISPENSER_REQUESTS,dos);
					
					// String
				
						writeString(this.AUTHORITY_UPDATE_CUSTOMER_GROUPS,dos);
					
					// String
				
						writeString(this.AP_SUPERVISOR_AUTHORITY,dos);
					
					// String
				
						writeString(this.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY,dos);
					
					// String
				
						writeString(this.AUTHORITY_TO_POST_BATCHES,dos);
					
					// String
				
						writeString(this.OVERRIDE_DISPENSOR_APPROVAL,dos);
					
					// String
				
						writeString(this.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS,dos);
					
					// String
				
						writeString(this.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION,dos);
					
					// String
				
						writeString(this.COPY_FROM_USER_ID,dos);
					
					// String
				
						writeString(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",USER_ID="+USER_ID);
		sb.append(",MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY="+MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY);
		sb.append(",FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY="+FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY);
		sb.append(",PRICE_LIST_APPROVAL_AUTHORITY="+PRICE_LIST_APPROVAL_AUTHORITY);
		sb.append(",APPROVE_VALID_FOR_PRICING="+APPROVE_VALID_FOR_PRICING);
		sb.append(",SOCIAL_SECURITY_NO="+String.valueOf(SOCIAL_SECURITY_NO));
		sb.append(",EMPLOYEE_LAST_NAME="+EMPLOYEE_LAST_NAME);
		sb.append(",EMPLOYEE_FIRST_NAME="+EMPLOYEE_FIRST_NAME);
		sb.append(",ADDRESS_LINE_1="+ADDRESS_LINE_1);
		sb.append(",ADDRESS_LINE_2="+ADDRESS_LINE_2);
		sb.append(",ADDEESS_LINE_3="+ADDEESS_LINE_3);
		sb.append(",CITY="+CITY);
		sb.append(",STATE="+STATE);
		sb.append(",ZIP_CODE="+ZIP_CODE);
		sb.append(",BIRTHDATE="+BIRTHDATE);
		sb.append(",PRINTER="+PRINTER);
		sb.append(",SPOOL_STATUS_FLAG="+SPOOL_STATUS_FLAG);
		sb.append(",EMPLOYEE_NO="+EMPLOYEE_NO);
		sb.append(",STATUS="+STATUS);
		sb.append(",IMS_AUTHORIZED_FREIGHT="+IMS_AUTHORIZED_FREIGHT);
		sb.append(",AUTHORITY_HOLD_ORDERS="+AUTHORITY_HOLD_ORDERS);
		sb.append(",AUTHORITY_RELEASE_ORDERS="+AUTHORITY_RELEASE_ORDERS);
		sb.append(",AUTHORITY_IMMEDIATE_ORDERS="+AUTHORITY_IMMEDIATE_ORDERS);
		sb.append(",AUTHORITY_CANCEL_ORDERS="+AUTHORITY_CANCEL_ORDERS);
		sb.append(",PHONE="+String.valueOf(PHONE));
		sb.append(",AUTHORITY_APPROVE_RECEIVED_PAYMENTS="+AUTHORITY_APPROVE_RECEIVED_PAYMENTS);
		sb.append(",PRICE_CONTROLLER_APPROVAL_FLAG="+PRICE_CONTROLLER_APPROVAL_FLAG);
		sb.append(",TELEPHONE_LOCAL_EXTENSION="+TELEPHONE_LOCAL_EXTENSION);
		sb.append(",HIRE_DATE="+HIRE_DATE);
		sb.append(",TERMINATION_DATE="+TERMINATION_DATE);
		sb.append(",MIDDLE_INITIAL="+MIDDLE_INITIAL);
		sb.append(",CUSTOMER_AGMT_APPROVAL_LEVEL="+CUSTOMER_AGMT_APPROVAL_LEVEL);
		sb.append(",UPDATE_PO_COST="+UPDATE_PO_COST);
		sb.append(",MISCELLANEOUS_BILLING_APPROVAL="+MISCELLANEOUS_BILLING_APPROVAL);
		sb.append(",ACTIVE_INACTIVE_APPROVAL_AUTH_BILL="+ACTIVE_INACTIVE_APPROVAL_AUTH_BILL);
		sb.append(",ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP="+ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP);
		sb.append(",AGEING_POLICY_APPROVAL_AUTH_BILL="+AGEING_POLICY_APPROVAL_AUTH_BILL);
		sb.append(",AGEING_POLICY_APPROVAL_AUTH_SHIP="+AGEING_POLICY_APPROVAL_AUTH_SHIP);
		sb.append(",DISCOUNT_GRACE_DAYS_APP_BILL="+DISCOUNT_GRACE_DAYS_APP_BILL);
		sb.append(",DISCOUNT_GRACE_DAYS_APP_SHIP="+DISCOUNT_GRACE_DAYS_APP_SHIP);
		sb.append(",NET_GRACE_DAYS_APP_BILL="+NET_GRACE_DAYS_APP_BILL);
		sb.append(",NET_GRACE_DAYS_APP_SHIP="+NET_GRACE_DAYS_APP_SHIP);
		sb.append(",PAYMENT_TERMS_POLICY_APP_BILL="+PAYMENT_TERMS_POLICY_APP_BILL);
		sb.append(",PAYMENT_TERMS_POLICY_APP_SHIP="+PAYMENT_TERMS_POLICY_APP_SHIP);
		sb.append(",STOP_CODE_APPROVAL_AUTHORITY_BILL="+STOP_CODE_APPROVAL_AUTHORITY_BILL);
		sb.append(",STOP_CODE_APPROVAL_AUTHORITY_SHIP="+STOP_CODE_APPROVAL_AUTHORITY_SHIP);
		sb.append(",ALLOC_INVENTORY_IMMED_APP_SHIP="+ALLOC_INVENTORY_IMMED_APP_SHIP);
		sb.append(",RESTOCK_FEE_APPROVAL_FLAG_SHIP="+RESTOCK_FEE_APPROVAL_FLAG_SHIP);
		sb.append(",MISCELLANEOUS_TAX_EXEMPT_SHIP="+MISCELLANEOUS_TAX_EXEMPT_SHIP);
		sb.append(",BUYER_SUPERVISOR_AUTHORITY="+BUYER_SUPERVISOR_AUTHORITY);
		sb.append(",AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS="+AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS);
		sb.append(",AUTHORITY_TO_APPROVE_PICKUP_REQUESTS="+AUTHORITY_TO_APPROVE_PICKUP_REQUESTS);
		sb.append(",APPROVAL_SECURITY_LEVEL="+APPROVAL_SECURITY_LEVEL);
		sb.append(",VISIBILITY_SECURITY_LEVEL="+VISIBILITY_SECURITY_LEVEL);
		sb.append(",AUTO_UP_FLAG="+AUTO_UP_FLAG);
		sb.append(",AUTO_DOWN_FLAG="+AUTO_DOWN_FLAG);
		sb.append(",AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE="+AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE);
		sb.append(",APPROVAL_ROUTE_TO="+APPROVAL_ROUTE_TO);
		sb.append(",AUTHORITY_APPROVE_SAMPLE_REQUESTS="+AUTHORITY_APPROVE_SAMPLE_REQUESTS);
		sb.append(",APPROVE_SPECIAL_FLAG="+APPROVE_SPECIAL_FLAG);
		sb.append(",OVERRIDE_SAMPLE_APPROVAL="+OVERRIDE_SAMPLE_APPROVAL);
		sb.append(",OVERRIDE_SPECIAL_APPROVAL="+OVERRIDE_SPECIAL_APPROVAL);
		sb.append(",AUTHORITY_APPROVE_PENDING_CUST_AGMTS="+AUTHORITY_APPROVE_PENDING_CUST_AGMTS);
		sb.append(",AUTHORITY_REFUSE_PENDING_CUST_AGMTS="+AUTHORITY_REFUSE_PENDING_CUST_AGMTS);
		sb.append(",AUTHORITY_APPROVE_DISPENSER_REQUESTS="+AUTHORITY_APPROVE_DISPENSER_REQUESTS);
		sb.append(",AUTHORITY_UPDATE_CUSTOMER_GROUPS="+AUTHORITY_UPDATE_CUSTOMER_GROUPS);
		sb.append(",AP_SUPERVISOR_AUTHORITY="+AP_SUPERVISOR_AUTHORITY);
		sb.append(",TOLERATED_VARIANCE_OVERRIDE_AUTHORITY="+TOLERATED_VARIANCE_OVERRIDE_AUTHORITY);
		sb.append(",AUTHORITY_TO_POST_BATCHES="+AUTHORITY_TO_POST_BATCHES);
		sb.append(",OVERRIDE_DISPENSOR_APPROVAL="+OVERRIDE_DISPENSOR_APPROVAL);
		sb.append(",AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS="+AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS);
		sb.append(",AUTHORITY_MAINTAIN_INSURANCE_INFORMATION="+AUTHORITY_MAINTAIN_INSURANCE_INFORMATION);
		sb.append(",COPY_FROM_USER_ID="+COPY_FROM_USER_ID);
		sb.append(",CREATED_TIMESTAMP="+CREATED_TIMESTAMP);
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+UPDATED_TIMESTAMP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_LIST_APPROVAL_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_LIST_APPROVAL_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(APPROVE_VALID_FOR_PRICING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPROVE_VALID_FOR_PRICING);
            			}
            		
        			sb.append("|");
        		
        				if(SOCIAL_SECURITY_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SOCIAL_SECURITY_NO);
            			}
            		
        			sb.append("|");
        		
        				if(EMPLOYEE_LAST_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EMPLOYEE_LAST_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(EMPLOYEE_FIRST_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EMPLOYEE_FIRST_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(ADDRESS_LINE_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADDRESS_LINE_1);
            			}
            		
        			sb.append("|");
        		
        				if(ADDRESS_LINE_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADDRESS_LINE_2);
            			}
            		
        			sb.append("|");
        		
        				if(ADDEESS_LINE_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ADDEESS_LINE_3);
            			}
            		
        			sb.append("|");
        		
        				if(CITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CITY);
            			}
            		
        			sb.append("|");
        		
        				if(STATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STATE);
            			}
            		
        			sb.append("|");
        		
        				if(ZIP_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ZIP_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(BIRTHDATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BIRTHDATE);
            			}
            		
        			sb.append("|");
        		
        				if(PRINTER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRINTER);
            			}
            		
        			sb.append("|");
        		
        				if(SPOOL_STATUS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SPOOL_STATUS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(EMPLOYEE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EMPLOYEE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(IMS_AUTHORIZED_FREIGHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IMS_AUTHORIZED_FREIGHT);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_HOLD_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_HOLD_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_RELEASE_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_RELEASE_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_IMMEDIATE_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_IMMEDIATE_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_CANCEL_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_CANCEL_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(PHONE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PHONE);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_RECEIVED_PAYMENTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_RECEIVED_PAYMENTS);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_CONTROLLER_APPROVAL_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_CONTROLLER_APPROVAL_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TELEPHONE_LOCAL_EXTENSION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TELEPHONE_LOCAL_EXTENSION);
            			}
            		
        			sb.append("|");
        		
        				if(HIRE_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HIRE_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(TERMINATION_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TERMINATION_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(MIDDLE_INITIAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MIDDLE_INITIAL);
            			}
            		
        			sb.append("|");
        		
        				if(CUSTOMER_AGMT_APPROVAL_LEVEL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUSTOMER_AGMT_APPROVAL_LEVEL);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATE_PO_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATE_PO_COST);
            			}
            		
        			sb.append("|");
        		
        				if(MISCELLANEOUS_BILLING_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MISCELLANEOUS_BILLING_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(ACTIVE_INACTIVE_APPROVAL_AUTH_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACTIVE_INACTIVE_APPROVAL_AUTH_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(AGEING_POLICY_APPROVAL_AUTH_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AGEING_POLICY_APPROVAL_AUTH_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(AGEING_POLICY_APPROVAL_AUTH_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AGEING_POLICY_APPROVAL_AUTH_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(DISCOUNT_GRACE_DAYS_APP_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISCOUNT_GRACE_DAYS_APP_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(DISCOUNT_GRACE_DAYS_APP_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISCOUNT_GRACE_DAYS_APP_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(NET_GRACE_DAYS_APP_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NET_GRACE_DAYS_APP_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(NET_GRACE_DAYS_APP_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NET_GRACE_DAYS_APP_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(PAYMENT_TERMS_POLICY_APP_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PAYMENT_TERMS_POLICY_APP_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(PAYMENT_TERMS_POLICY_APP_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PAYMENT_TERMS_POLICY_APP_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_CODE_APPROVAL_AUTHORITY_BILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_CODE_APPROVAL_AUTHORITY_BILL);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_CODE_APPROVAL_AUTHORITY_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_CODE_APPROVAL_AUTHORITY_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(ALLOC_INVENTORY_IMMED_APP_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ALLOC_INVENTORY_IMMED_APP_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(RESTOCK_FEE_APPROVAL_FLAG_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESTOCK_FEE_APPROVAL_FLAG_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(MISCELLANEOUS_TAX_EXEMPT_SHIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MISCELLANEOUS_TAX_EXEMPT_SHIP);
            			}
            		
        			sb.append("|");
        		
        				if(BUYER_SUPERVISOR_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUYER_SUPERVISOR_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_TO_APPROVE_PICKUP_REQUESTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_TO_APPROVE_PICKUP_REQUESTS);
            			}
            		
        			sb.append("|");
        		
        				if(APPROVAL_SECURITY_LEVEL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPROVAL_SECURITY_LEVEL);
            			}
            		
        			sb.append("|");
        		
        				if(VISIBILITY_SECURITY_LEVEL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VISIBILITY_SECURITY_LEVEL);
            			}
            		
        			sb.append("|");
        		
        				if(AUTO_UP_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTO_UP_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(AUTO_DOWN_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTO_DOWN_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(APPROVAL_ROUTE_TO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPROVAL_ROUTE_TO);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_SAMPLE_REQUESTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_SAMPLE_REQUESTS);
            			}
            		
        			sb.append("|");
        		
        				if(APPROVE_SPECIAL_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPROVE_SPECIAL_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(OVERRIDE_SAMPLE_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OVERRIDE_SAMPLE_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(OVERRIDE_SPECIAL_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OVERRIDE_SPECIAL_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_PENDING_CUST_AGMTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_PENDING_CUST_AGMTS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_REFUSE_PENDING_CUST_AGMTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_REFUSE_PENDING_CUST_AGMTS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_APPROVE_DISPENSER_REQUESTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_APPROVE_DISPENSER_REQUESTS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_UPDATE_CUSTOMER_GROUPS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_UPDATE_CUSTOMER_GROUPS);
            			}
            		
        			sb.append("|");
        		
        				if(AP_SUPERVISOR_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AP_SUPERVISOR_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(TOLERATED_VARIANCE_OVERRIDE_AUTHORITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOLERATED_VARIANCE_OVERRIDE_AUTHORITY);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_TO_POST_BATCHES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_TO_POST_BATCHES);
            			}
            		
        			sb.append("|");
        		
        				if(OVERRIDE_DISPENSOR_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OVERRIDE_DISPENSOR_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(AUTHORITY_MAINTAIN_INSURANCE_INFORMATION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUTHORITY_MAINTAIN_INSURANCE_INFORMATION);
            			}
            		
        			sb.append("|");
        		
        				if(COPY_FROM_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COPY_FROM_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(IS_DELETED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_DELETED);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_User_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[0];

	
			    public String O4USER;

				public String getO4USER () {
					return this.O4USER;
				}
				
			    public String O4PFMA;

				public String getO4PFMA () {
					return this.O4PFMA;
				}
				
			    public String O4PFFA;

				public String getO4PFFA () {
					return this.O4PFFA;
				}
				
			    public String O4PLAA;

				public String getO4PLAA () {
					return this.O4PLAA;
				}
				
			    public String O4AVPF;

				public String getO4AVPF () {
					return this.O4AVPF;
				}
				
			    public BigDecimal O4SSNO;

				public BigDecimal getO4SSNO () {
					return this.O4SSNO;
				}
				
			    public String O4LAST;

				public String getO4LAST () {
					return this.O4LAST;
				}
				
			    public String O4FRST;

				public String getO4FRST () {
					return this.O4FRST;
				}
				
			    public String O4ADR1;

				public String getO4ADR1 () {
					return this.O4ADR1;
				}
				
			    public String O4ADR2;

				public String getO4ADR2 () {
					return this.O4ADR2;
				}
				
			    public String O4ADR3;

				public String getO4ADR3 () {
					return this.O4ADR3;
				}
				
			    public String O4CIT;

				public String getO4CIT () {
					return this.O4CIT;
				}
				
			    public String O4STAE;

				public String getO4STAE () {
					return this.O4STAE;
				}
				
			    public String O4ZIP;

				public String getO4ZIP () {
					return this.O4ZIP;
				}
				
			    public BigDecimal O4BDAY;

				public BigDecimal getO4BDAY () {
					return this.O4BDAY;
				}
				
			    public String O4PRTR;

				public String getO4PRTR () {
					return this.O4PRTR;
				}
				
			    public String O4SPLF;

				public String getO4SPLF () {
					return this.O4SPLF;
				}
				
			    public String O4EMP;

				public String getO4EMP () {
					return this.O4EMP;
				}
				
			    public String O4STAS;

				public String getO4STAS () {
					return this.O4STAS;
				}
				
			    public String O4IAMF;

				public String getO4IAMF () {
					return this.O4IAMF;
				}
				
			    public String O4ATHO;

				public String getO4ATHO () {
					return this.O4ATHO;
				}
				
			    public String O4ATRO;

				public String getO4ATRO () {
					return this.O4ATRO;
				}
				
			    public String O4ATIO;

				public String getO4ATIO () {
					return this.O4ATIO;
				}
				
			    public String O4ATCO;

				public String getO4ATCO () {
					return this.O4ATCO;
				}
				
			    public BigDecimal O4TLPH;

				public BigDecimal getO4TLPH () {
					return this.O4TLPH;
				}
				
			    public String O4AARP;

				public String getO4AARP () {
					return this.O4AARP;
				}
				
			    public String O4PCAF;

				public String getO4PCAF () {
					return this.O4PCAF;
				}
				
			    public String O4TLXT;

				public String getO4TLXT () {
					return this.O4TLXT;
				}
				
			    public BigDecimal O4HRDT;

				public BigDecimal getO4HRDT () {
					return this.O4HRDT;
				}
				
			    public BigDecimal O4TMDT;

				public BigDecimal getO4TMDT () {
					return this.O4TMDT;
				}
				
			    public String O4MIDI;

				public String getO4MIDI () {
					return this.O4MIDI;
				}
				
			    public String O4CAAL;

				public String getO4CAAL () {
					return this.O4CAAL;
				}
				
			    public String O4VUPO;

				public String getO4VUPO () {
					return this.O4VUPO;
				}
				
			    public String O4MBAP;

				public String getO4MBAP () {
					return this.O4MBAP;
				}
				
			    public String O4AIAB;

				public String getO4AIAB () {
					return this.O4AIAB;
				}
				
			    public String O4AIAS;

				public String getO4AIAS () {
					return this.O4AIAS;
				}
				
			    public String O4AGAB;

				public String getO4AGAB () {
					return this.O4AGAB;
				}
				
			    public String O4AGAS;

				public String getO4AGAS () {
					return this.O4AGAS;
				}
				
			    public String O4DGDB;

				public String getO4DGDB () {
					return this.O4DGDB;
				}
				
			    public String O4DGDS;

				public String getO4DGDS () {
					return this.O4DGDS;
				}
				
			    public String O4NGDB;

				public String getO4NGDB () {
					return this.O4NGDB;
				}
				
			    public String O4NGDS;

				public String getO4NGDS () {
					return this.O4NGDS;
				}
				
			    public String O4PTPB;

				public String getO4PTPB () {
					return this.O4PTPB;
				}
				
			    public String O4PTPS;

				public String getO4PTPS () {
					return this.O4PTPS;
				}
				
			    public String O4STCB;

				public String getO4STCB () {
					return this.O4STCB;
				}
				
			    public String O4STCS;

				public String getO4STCS () {
					return this.O4STCS;
				}
				
			    public String O4AIIS;

				public String getO4AIIS () {
					return this.O4AIIS;
				}
				
			    public String O4RFAF;

				public String getO4RFAF () {
					return this.O4RFAF;
				}
				
			    public String O4MTES;

				public String getO4MTES () {
					return this.O4MTES;
				}
				
			    public String O4BYSA;

				public String getO4BYSA () {
					return this.O4BYSA;
				}
				
			    public String O4AABA;

				public String getO4AABA () {
					return this.O4AABA;
				}
				
			    public String O4AAPU;

				public String getO4AAPU () {
					return this.O4AAPU;
				}
				
			    public String O4APSL;

				public String getO4APSL () {
					return this.O4APSL;
				}
				
			    public String O4VSCL;

				public String getO4VSCL () {
					return this.O4VSCL;
				}
				
			    public String O4AUPF;

				public String getO4AUPF () {
					return this.O4AUPF;
				}
				
			    public String O4ADNF;

				public String getO4ADNF () {
					return this.O4ADNF;
				}
				
			    public String O4AOHH;

				public String getO4AOHH () {
					return this.O4AOHH;
				}
				
			    public String O4APLR;

				public String getO4APLR () {
					return this.O4APLR;
				}
				
			    public String O4APSR;

				public String getO4APSR () {
					return this.O4APSR;
				}
				
			    public String O4ASPF;

				public String getO4ASPF () {
					return this.O4ASPF;
				}
				
			    public String O4OSMA;

				public String getO4OSMA () {
					return this.O4OSMA;
				}
				
			    public String O4OSPA;

				public String getO4OSPA () {
					return this.O4OSPA;
				}
				
			    public String O4AACA;

				public String getO4AACA () {
					return this.O4AACA;
				}
				
			    public String O4ARCA;

				public String getO4ARCA () {
					return this.O4ARCA;
				}
				
			    public String O4APDR;

				public String getO4APDR () {
					return this.O4APDR;
				}
				
			    public String O4AUCG;

				public String getO4AUCG () {
					return this.O4AUCG;
				}
				
			    public String O4APSA;

				public String getO4APSA () {
					return this.O4APSA;
				}
				
			    public String O4TVOA;

				public String getO4TVOA () {
					return this.O4TVOA;
				}
				
			    public String O4ATPB;

				public String getO4ATPB () {
					return this.O4ATPB;
				}
				
			    public String O4ODSA;

				public String getO4ODSA () {
					return this.O4ODSA;
				}
				
			    public String O4UVDT;

				public String getO4UVDT () {
					return this.O4UVDT;
				}
				
			    public String O4UVIN;

				public String getO4UVIN () {
					return this.O4UVIN;
				}
				
			    public String O4FFUI;

				public String getO4FFUI () {
					return this.O4FFUI;
				}
				
			    public BigDecimal O4EADT;

				public BigDecimal getO4EADT () {
					return this.O4EADT;
				}
				
			    public BigDecimal O4EATM;

				public BigDecimal getO4EATM () {
					return this.O4EATM;
				}
				
			    public String O4EAID;

				public String getO4EAID () {
					return this.O4EAID;
				}
				
			    public BigDecimal O4MODT;

				public BigDecimal getO4MODT () {
					return this.O4MODT;
				}
				
			    public BigDecimal O4MOTM;

				public BigDecimal getO4MOTM () {
					return this.O4MOTM;
				}
				
			    public String O4MOID;

				public String getO4MOID () {
					return this.O4MOID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_User_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_User_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_User_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_User_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.O4USER = readString(dis);
					
					this.O4PFMA = readString(dis);
					
					this.O4PFFA = readString(dis);
					
					this.O4PLAA = readString(dis);
					
					this.O4AVPF = readString(dis);
					
						this.O4SSNO = (BigDecimal) dis.readObject();
					
					this.O4LAST = readString(dis);
					
					this.O4FRST = readString(dis);
					
					this.O4ADR1 = readString(dis);
					
					this.O4ADR2 = readString(dis);
					
					this.O4ADR3 = readString(dis);
					
					this.O4CIT = readString(dis);
					
					this.O4STAE = readString(dis);
					
					this.O4ZIP = readString(dis);
					
						this.O4BDAY = (BigDecimal) dis.readObject();
					
					this.O4PRTR = readString(dis);
					
					this.O4SPLF = readString(dis);
					
					this.O4EMP = readString(dis);
					
					this.O4STAS = readString(dis);
					
					this.O4IAMF = readString(dis);
					
					this.O4ATHO = readString(dis);
					
					this.O4ATRO = readString(dis);
					
					this.O4ATIO = readString(dis);
					
					this.O4ATCO = readString(dis);
					
						this.O4TLPH = (BigDecimal) dis.readObject();
					
					this.O4AARP = readString(dis);
					
					this.O4PCAF = readString(dis);
					
					this.O4TLXT = readString(dis);
					
						this.O4HRDT = (BigDecimal) dis.readObject();
					
						this.O4TMDT = (BigDecimal) dis.readObject();
					
					this.O4MIDI = readString(dis);
					
					this.O4CAAL = readString(dis);
					
					this.O4VUPO = readString(dis);
					
					this.O4MBAP = readString(dis);
					
					this.O4AIAB = readString(dis);
					
					this.O4AIAS = readString(dis);
					
					this.O4AGAB = readString(dis);
					
					this.O4AGAS = readString(dis);
					
					this.O4DGDB = readString(dis);
					
					this.O4DGDS = readString(dis);
					
					this.O4NGDB = readString(dis);
					
					this.O4NGDS = readString(dis);
					
					this.O4PTPB = readString(dis);
					
					this.O4PTPS = readString(dis);
					
					this.O4STCB = readString(dis);
					
					this.O4STCS = readString(dis);
					
					this.O4AIIS = readString(dis);
					
					this.O4RFAF = readString(dis);
					
					this.O4MTES = readString(dis);
					
					this.O4BYSA = readString(dis);
					
					this.O4AABA = readString(dis);
					
					this.O4AAPU = readString(dis);
					
					this.O4APSL = readString(dis);
					
					this.O4VSCL = readString(dis);
					
					this.O4AUPF = readString(dis);
					
					this.O4ADNF = readString(dis);
					
					this.O4AOHH = readString(dis);
					
					this.O4APLR = readString(dis);
					
					this.O4APSR = readString(dis);
					
					this.O4ASPF = readString(dis);
					
					this.O4OSMA = readString(dis);
					
					this.O4OSPA = readString(dis);
					
					this.O4AACA = readString(dis);
					
					this.O4ARCA = readString(dis);
					
					this.O4APDR = readString(dis);
					
					this.O4AUCG = readString(dis);
					
					this.O4APSA = readString(dis);
					
					this.O4TVOA = readString(dis);
					
					this.O4ATPB = readString(dis);
					
					this.O4ODSA = readString(dis);
					
					this.O4UVDT = readString(dis);
					
					this.O4UVIN = readString(dis);
					
					this.O4FFUI = readString(dis);
					
						this.O4EADT = (BigDecimal) dis.readObject();
					
						this.O4EATM = (BigDecimal) dis.readObject();
					
					this.O4EAID = readString(dis);
					
						this.O4MODT = (BigDecimal) dis.readObject();
					
						this.O4MOTM = (BigDecimal) dis.readObject();
					
					this.O4MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_User_Inbound) {

        	try {

        		int length = 0;
		
					this.O4USER = readString(dis);
					
					this.O4PFMA = readString(dis);
					
					this.O4PFFA = readString(dis);
					
					this.O4PLAA = readString(dis);
					
					this.O4AVPF = readString(dis);
					
						this.O4SSNO = (BigDecimal) dis.readObject();
					
					this.O4LAST = readString(dis);
					
					this.O4FRST = readString(dis);
					
					this.O4ADR1 = readString(dis);
					
					this.O4ADR2 = readString(dis);
					
					this.O4ADR3 = readString(dis);
					
					this.O4CIT = readString(dis);
					
					this.O4STAE = readString(dis);
					
					this.O4ZIP = readString(dis);
					
						this.O4BDAY = (BigDecimal) dis.readObject();
					
					this.O4PRTR = readString(dis);
					
					this.O4SPLF = readString(dis);
					
					this.O4EMP = readString(dis);
					
					this.O4STAS = readString(dis);
					
					this.O4IAMF = readString(dis);
					
					this.O4ATHO = readString(dis);
					
					this.O4ATRO = readString(dis);
					
					this.O4ATIO = readString(dis);
					
					this.O4ATCO = readString(dis);
					
						this.O4TLPH = (BigDecimal) dis.readObject();
					
					this.O4AARP = readString(dis);
					
					this.O4PCAF = readString(dis);
					
					this.O4TLXT = readString(dis);
					
						this.O4HRDT = (BigDecimal) dis.readObject();
					
						this.O4TMDT = (BigDecimal) dis.readObject();
					
					this.O4MIDI = readString(dis);
					
					this.O4CAAL = readString(dis);
					
					this.O4VUPO = readString(dis);
					
					this.O4MBAP = readString(dis);
					
					this.O4AIAB = readString(dis);
					
					this.O4AIAS = readString(dis);
					
					this.O4AGAB = readString(dis);
					
					this.O4AGAS = readString(dis);
					
					this.O4DGDB = readString(dis);
					
					this.O4DGDS = readString(dis);
					
					this.O4NGDB = readString(dis);
					
					this.O4NGDS = readString(dis);
					
					this.O4PTPB = readString(dis);
					
					this.O4PTPS = readString(dis);
					
					this.O4STCB = readString(dis);
					
					this.O4STCS = readString(dis);
					
					this.O4AIIS = readString(dis);
					
					this.O4RFAF = readString(dis);
					
					this.O4MTES = readString(dis);
					
					this.O4BYSA = readString(dis);
					
					this.O4AABA = readString(dis);
					
					this.O4AAPU = readString(dis);
					
					this.O4APSL = readString(dis);
					
					this.O4VSCL = readString(dis);
					
					this.O4AUPF = readString(dis);
					
					this.O4ADNF = readString(dis);
					
					this.O4AOHH = readString(dis);
					
					this.O4APLR = readString(dis);
					
					this.O4APSR = readString(dis);
					
					this.O4ASPF = readString(dis);
					
					this.O4OSMA = readString(dis);
					
					this.O4OSPA = readString(dis);
					
					this.O4AACA = readString(dis);
					
					this.O4ARCA = readString(dis);
					
					this.O4APDR = readString(dis);
					
					this.O4AUCG = readString(dis);
					
					this.O4APSA = readString(dis);
					
					this.O4TVOA = readString(dis);
					
					this.O4ATPB = readString(dis);
					
					this.O4ODSA = readString(dis);
					
					this.O4UVDT = readString(dis);
					
					this.O4UVIN = readString(dis);
					
					this.O4FFUI = readString(dis);
					
						this.O4EADT = (BigDecimal) dis.readObject();
					
						this.O4EATM = (BigDecimal) dis.readObject();
					
					this.O4EAID = readString(dis);
					
						this.O4MODT = (BigDecimal) dis.readObject();
					
						this.O4MOTM = (BigDecimal) dis.readObject();
					
					this.O4MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.O4USER,dos);
					
					// String
				
						writeString(this.O4PFMA,dos);
					
					// String
				
						writeString(this.O4PFFA,dos);
					
					// String
				
						writeString(this.O4PLAA,dos);
					
					// String
				
						writeString(this.O4AVPF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4SSNO);
					
					// String
				
						writeString(this.O4LAST,dos);
					
					// String
				
						writeString(this.O4FRST,dos);
					
					// String
				
						writeString(this.O4ADR1,dos);
					
					// String
				
						writeString(this.O4ADR2,dos);
					
					// String
				
						writeString(this.O4ADR3,dos);
					
					// String
				
						writeString(this.O4CIT,dos);
					
					// String
				
						writeString(this.O4STAE,dos);
					
					// String
				
						writeString(this.O4ZIP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4BDAY);
					
					// String
				
						writeString(this.O4PRTR,dos);
					
					// String
				
						writeString(this.O4SPLF,dos);
					
					// String
				
						writeString(this.O4EMP,dos);
					
					// String
				
						writeString(this.O4STAS,dos);
					
					// String
				
						writeString(this.O4IAMF,dos);
					
					// String
				
						writeString(this.O4ATHO,dos);
					
					// String
				
						writeString(this.O4ATRO,dos);
					
					// String
				
						writeString(this.O4ATIO,dos);
					
					// String
				
						writeString(this.O4ATCO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4TLPH);
					
					// String
				
						writeString(this.O4AARP,dos);
					
					// String
				
						writeString(this.O4PCAF,dos);
					
					// String
				
						writeString(this.O4TLXT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4HRDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4TMDT);
					
					// String
				
						writeString(this.O4MIDI,dos);
					
					// String
				
						writeString(this.O4CAAL,dos);
					
					// String
				
						writeString(this.O4VUPO,dos);
					
					// String
				
						writeString(this.O4MBAP,dos);
					
					// String
				
						writeString(this.O4AIAB,dos);
					
					// String
				
						writeString(this.O4AIAS,dos);
					
					// String
				
						writeString(this.O4AGAB,dos);
					
					// String
				
						writeString(this.O4AGAS,dos);
					
					// String
				
						writeString(this.O4DGDB,dos);
					
					// String
				
						writeString(this.O4DGDS,dos);
					
					// String
				
						writeString(this.O4NGDB,dos);
					
					// String
				
						writeString(this.O4NGDS,dos);
					
					// String
				
						writeString(this.O4PTPB,dos);
					
					// String
				
						writeString(this.O4PTPS,dos);
					
					// String
				
						writeString(this.O4STCB,dos);
					
					// String
				
						writeString(this.O4STCS,dos);
					
					// String
				
						writeString(this.O4AIIS,dos);
					
					// String
				
						writeString(this.O4RFAF,dos);
					
					// String
				
						writeString(this.O4MTES,dos);
					
					// String
				
						writeString(this.O4BYSA,dos);
					
					// String
				
						writeString(this.O4AABA,dos);
					
					// String
				
						writeString(this.O4AAPU,dos);
					
					// String
				
						writeString(this.O4APSL,dos);
					
					// String
				
						writeString(this.O4VSCL,dos);
					
					// String
				
						writeString(this.O4AUPF,dos);
					
					// String
				
						writeString(this.O4ADNF,dos);
					
					// String
				
						writeString(this.O4AOHH,dos);
					
					// String
				
						writeString(this.O4APLR,dos);
					
					// String
				
						writeString(this.O4APSR,dos);
					
					// String
				
						writeString(this.O4ASPF,dos);
					
					// String
				
						writeString(this.O4OSMA,dos);
					
					// String
				
						writeString(this.O4OSPA,dos);
					
					// String
				
						writeString(this.O4AACA,dos);
					
					// String
				
						writeString(this.O4ARCA,dos);
					
					// String
				
						writeString(this.O4APDR,dos);
					
					// String
				
						writeString(this.O4AUCG,dos);
					
					// String
				
						writeString(this.O4APSA,dos);
					
					// String
				
						writeString(this.O4TVOA,dos);
					
					// String
				
						writeString(this.O4ATPB,dos);
					
					// String
				
						writeString(this.O4ODSA,dos);
					
					// String
				
						writeString(this.O4UVDT,dos);
					
					// String
				
						writeString(this.O4UVIN,dos);
					
					// String
				
						writeString(this.O4FFUI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4EATM);
					
					// String
				
						writeString(this.O4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4MOTM);
					
					// String
				
						writeString(this.O4MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.O4USER,dos);
					
					// String
				
						writeString(this.O4PFMA,dos);
					
					// String
				
						writeString(this.O4PFFA,dos);
					
					// String
				
						writeString(this.O4PLAA,dos);
					
					// String
				
						writeString(this.O4AVPF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4SSNO);
					
					// String
				
						writeString(this.O4LAST,dos);
					
					// String
				
						writeString(this.O4FRST,dos);
					
					// String
				
						writeString(this.O4ADR1,dos);
					
					// String
				
						writeString(this.O4ADR2,dos);
					
					// String
				
						writeString(this.O4ADR3,dos);
					
					// String
				
						writeString(this.O4CIT,dos);
					
					// String
				
						writeString(this.O4STAE,dos);
					
					// String
				
						writeString(this.O4ZIP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4BDAY);
					
					// String
				
						writeString(this.O4PRTR,dos);
					
					// String
				
						writeString(this.O4SPLF,dos);
					
					// String
				
						writeString(this.O4EMP,dos);
					
					// String
				
						writeString(this.O4STAS,dos);
					
					// String
				
						writeString(this.O4IAMF,dos);
					
					// String
				
						writeString(this.O4ATHO,dos);
					
					// String
				
						writeString(this.O4ATRO,dos);
					
					// String
				
						writeString(this.O4ATIO,dos);
					
					// String
				
						writeString(this.O4ATCO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4TLPH);
					
					// String
				
						writeString(this.O4AARP,dos);
					
					// String
				
						writeString(this.O4PCAF,dos);
					
					// String
				
						writeString(this.O4TLXT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4HRDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4TMDT);
					
					// String
				
						writeString(this.O4MIDI,dos);
					
					// String
				
						writeString(this.O4CAAL,dos);
					
					// String
				
						writeString(this.O4VUPO,dos);
					
					// String
				
						writeString(this.O4MBAP,dos);
					
					// String
				
						writeString(this.O4AIAB,dos);
					
					// String
				
						writeString(this.O4AIAS,dos);
					
					// String
				
						writeString(this.O4AGAB,dos);
					
					// String
				
						writeString(this.O4AGAS,dos);
					
					// String
				
						writeString(this.O4DGDB,dos);
					
					// String
				
						writeString(this.O4DGDS,dos);
					
					// String
				
						writeString(this.O4NGDB,dos);
					
					// String
				
						writeString(this.O4NGDS,dos);
					
					// String
				
						writeString(this.O4PTPB,dos);
					
					// String
				
						writeString(this.O4PTPS,dos);
					
					// String
				
						writeString(this.O4STCB,dos);
					
					// String
				
						writeString(this.O4STCS,dos);
					
					// String
				
						writeString(this.O4AIIS,dos);
					
					// String
				
						writeString(this.O4RFAF,dos);
					
					// String
				
						writeString(this.O4MTES,dos);
					
					// String
				
						writeString(this.O4BYSA,dos);
					
					// String
				
						writeString(this.O4AABA,dos);
					
					// String
				
						writeString(this.O4AAPU,dos);
					
					// String
				
						writeString(this.O4APSL,dos);
					
					// String
				
						writeString(this.O4VSCL,dos);
					
					// String
				
						writeString(this.O4AUPF,dos);
					
					// String
				
						writeString(this.O4ADNF,dos);
					
					// String
				
						writeString(this.O4AOHH,dos);
					
					// String
				
						writeString(this.O4APLR,dos);
					
					// String
				
						writeString(this.O4APSR,dos);
					
					// String
				
						writeString(this.O4ASPF,dos);
					
					// String
				
						writeString(this.O4OSMA,dos);
					
					// String
				
						writeString(this.O4OSPA,dos);
					
					// String
				
						writeString(this.O4AACA,dos);
					
					// String
				
						writeString(this.O4ARCA,dos);
					
					// String
				
						writeString(this.O4APDR,dos);
					
					// String
				
						writeString(this.O4AUCG,dos);
					
					// String
				
						writeString(this.O4APSA,dos);
					
					// String
				
						writeString(this.O4TVOA,dos);
					
					// String
				
						writeString(this.O4ATPB,dos);
					
					// String
				
						writeString(this.O4ODSA,dos);
					
					// String
				
						writeString(this.O4UVDT,dos);
					
					// String
				
						writeString(this.O4UVIN,dos);
					
					// String
				
						writeString(this.O4FFUI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4EATM);
					
					// String
				
						writeString(this.O4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.O4MOTM);
					
					// String
				
						writeString(this.O4MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("O4USER="+O4USER);
		sb.append(",O4PFMA="+O4PFMA);
		sb.append(",O4PFFA="+O4PFFA);
		sb.append(",O4PLAA="+O4PLAA);
		sb.append(",O4AVPF="+O4AVPF);
		sb.append(",O4SSNO="+String.valueOf(O4SSNO));
		sb.append(",O4LAST="+O4LAST);
		sb.append(",O4FRST="+O4FRST);
		sb.append(",O4ADR1="+O4ADR1);
		sb.append(",O4ADR2="+O4ADR2);
		sb.append(",O4ADR3="+O4ADR3);
		sb.append(",O4CIT="+O4CIT);
		sb.append(",O4STAE="+O4STAE);
		sb.append(",O4ZIP="+O4ZIP);
		sb.append(",O4BDAY="+String.valueOf(O4BDAY));
		sb.append(",O4PRTR="+O4PRTR);
		sb.append(",O4SPLF="+O4SPLF);
		sb.append(",O4EMP="+O4EMP);
		sb.append(",O4STAS="+O4STAS);
		sb.append(",O4IAMF="+O4IAMF);
		sb.append(",O4ATHO="+O4ATHO);
		sb.append(",O4ATRO="+O4ATRO);
		sb.append(",O4ATIO="+O4ATIO);
		sb.append(",O4ATCO="+O4ATCO);
		sb.append(",O4TLPH="+String.valueOf(O4TLPH));
		sb.append(",O4AARP="+O4AARP);
		sb.append(",O4PCAF="+O4PCAF);
		sb.append(",O4TLXT="+O4TLXT);
		sb.append(",O4HRDT="+String.valueOf(O4HRDT));
		sb.append(",O4TMDT="+String.valueOf(O4TMDT));
		sb.append(",O4MIDI="+O4MIDI);
		sb.append(",O4CAAL="+O4CAAL);
		sb.append(",O4VUPO="+O4VUPO);
		sb.append(",O4MBAP="+O4MBAP);
		sb.append(",O4AIAB="+O4AIAB);
		sb.append(",O4AIAS="+O4AIAS);
		sb.append(",O4AGAB="+O4AGAB);
		sb.append(",O4AGAS="+O4AGAS);
		sb.append(",O4DGDB="+O4DGDB);
		sb.append(",O4DGDS="+O4DGDS);
		sb.append(",O4NGDB="+O4NGDB);
		sb.append(",O4NGDS="+O4NGDS);
		sb.append(",O4PTPB="+O4PTPB);
		sb.append(",O4PTPS="+O4PTPS);
		sb.append(",O4STCB="+O4STCB);
		sb.append(",O4STCS="+O4STCS);
		sb.append(",O4AIIS="+O4AIIS);
		sb.append(",O4RFAF="+O4RFAF);
		sb.append(",O4MTES="+O4MTES);
		sb.append(",O4BYSA="+O4BYSA);
		sb.append(",O4AABA="+O4AABA);
		sb.append(",O4AAPU="+O4AAPU);
		sb.append(",O4APSL="+O4APSL);
		sb.append(",O4VSCL="+O4VSCL);
		sb.append(",O4AUPF="+O4AUPF);
		sb.append(",O4ADNF="+O4ADNF);
		sb.append(",O4AOHH="+O4AOHH);
		sb.append(",O4APLR="+O4APLR);
		sb.append(",O4APSR="+O4APSR);
		sb.append(",O4ASPF="+O4ASPF);
		sb.append(",O4OSMA="+O4OSMA);
		sb.append(",O4OSPA="+O4OSPA);
		sb.append(",O4AACA="+O4AACA);
		sb.append(",O4ARCA="+O4ARCA);
		sb.append(",O4APDR="+O4APDR);
		sb.append(",O4AUCG="+O4AUCG);
		sb.append(",O4APSA="+O4APSA);
		sb.append(",O4TVOA="+O4TVOA);
		sb.append(",O4ATPB="+O4ATPB);
		sb.append(",O4ODSA="+O4ODSA);
		sb.append(",O4UVDT="+O4UVDT);
		sb.append(",O4UVIN="+O4UVIN);
		sb.append(",O4FFUI="+O4FFUI);
		sb.append(",O4EADT="+String.valueOf(O4EADT));
		sb.append(",O4EATM="+String.valueOf(O4EATM));
		sb.append(",O4EAID="+O4EAID);
		sb.append(",O4MODT="+String.valueOf(O4MODT));
		sb.append(",O4MOTM="+String.valueOf(O4MOTM));
		sb.append(",O4MOID="+O4MOID);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(O4USER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4USER);
            			}
            		
        			sb.append("|");
        		
        				if(O4PFMA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4PFMA);
            			}
            		
        			sb.append("|");
        		
        				if(O4PFFA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4PFFA);
            			}
            		
        			sb.append("|");
        		
        				if(O4PLAA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4PLAA);
            			}
            		
        			sb.append("|");
        		
        				if(O4AVPF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AVPF);
            			}
            		
        			sb.append("|");
        		
        				if(O4SSNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4SSNO);
            			}
            		
        			sb.append("|");
        		
        				if(O4LAST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4LAST);
            			}
            		
        			sb.append("|");
        		
        				if(O4FRST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4FRST);
            			}
            		
        			sb.append("|");
        		
        				if(O4ADR1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ADR1);
            			}
            		
        			sb.append("|");
        		
        				if(O4ADR2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ADR2);
            			}
            		
        			sb.append("|");
        		
        				if(O4ADR3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ADR3);
            			}
            		
        			sb.append("|");
        		
        				if(O4CIT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4CIT);
            			}
            		
        			sb.append("|");
        		
        				if(O4STAE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4STAE);
            			}
            		
        			sb.append("|");
        		
        				if(O4ZIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ZIP);
            			}
            		
        			sb.append("|");
        		
        				if(O4BDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4BDAY);
            			}
            		
        			sb.append("|");
        		
        				if(O4PRTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4PRTR);
            			}
            		
        			sb.append("|");
        		
        				if(O4SPLF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4SPLF);
            			}
            		
        			sb.append("|");
        		
        				if(O4EMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4EMP);
            			}
            		
        			sb.append("|");
        		
        				if(O4STAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4STAS);
            			}
            		
        			sb.append("|");
        		
        				if(O4IAMF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4IAMF);
            			}
            		
        			sb.append("|");
        		
        				if(O4ATHO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ATHO);
            			}
            		
        			sb.append("|");
        		
        				if(O4ATRO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ATRO);
            			}
            		
        			sb.append("|");
        		
        				if(O4ATIO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ATIO);
            			}
            		
        			sb.append("|");
        		
        				if(O4ATCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ATCO);
            			}
            		
        			sb.append("|");
        		
        				if(O4TLPH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4TLPH);
            			}
            		
        			sb.append("|");
        		
        				if(O4AARP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AARP);
            			}
            		
        			sb.append("|");
        		
        				if(O4PCAF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4PCAF);
            			}
            		
        			sb.append("|");
        		
        				if(O4TLXT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4TLXT);
            			}
            		
        			sb.append("|");
        		
        				if(O4HRDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4HRDT);
            			}
            		
        			sb.append("|");
        		
        				if(O4TMDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4TMDT);
            			}
            		
        			sb.append("|");
        		
        				if(O4MIDI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4MIDI);
            			}
            		
        			sb.append("|");
        		
        				if(O4CAAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4CAAL);
            			}
            		
        			sb.append("|");
        		
        				if(O4VUPO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4VUPO);
            			}
            		
        			sb.append("|");
        		
        				if(O4MBAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4MBAP);
            			}
            		
        			sb.append("|");
        		
        				if(O4AIAB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AIAB);
            			}
            		
        			sb.append("|");
        		
        				if(O4AIAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AIAS);
            			}
            		
        			sb.append("|");
        		
        				if(O4AGAB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AGAB);
            			}
            		
        			sb.append("|");
        		
        				if(O4AGAS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AGAS);
            			}
            		
        			sb.append("|");
        		
        				if(O4DGDB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4DGDB);
            			}
            		
        			sb.append("|");
        		
        				if(O4DGDS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4DGDS);
            			}
            		
        			sb.append("|");
        		
        				if(O4NGDB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4NGDB);
            			}
            		
        			sb.append("|");
        		
        				if(O4NGDS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4NGDS);
            			}
            		
        			sb.append("|");
        		
        				if(O4PTPB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4PTPB);
            			}
            		
        			sb.append("|");
        		
        				if(O4PTPS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4PTPS);
            			}
            		
        			sb.append("|");
        		
        				if(O4STCB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4STCB);
            			}
            		
        			sb.append("|");
        		
        				if(O4STCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4STCS);
            			}
            		
        			sb.append("|");
        		
        				if(O4AIIS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AIIS);
            			}
            		
        			sb.append("|");
        		
        				if(O4RFAF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4RFAF);
            			}
            		
        			sb.append("|");
        		
        				if(O4MTES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4MTES);
            			}
            		
        			sb.append("|");
        		
        				if(O4BYSA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4BYSA);
            			}
            		
        			sb.append("|");
        		
        				if(O4AABA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AABA);
            			}
            		
        			sb.append("|");
        		
        				if(O4AAPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AAPU);
            			}
            		
        			sb.append("|");
        		
        				if(O4APSL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4APSL);
            			}
            		
        			sb.append("|");
        		
        				if(O4VSCL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4VSCL);
            			}
            		
        			sb.append("|");
        		
        				if(O4AUPF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AUPF);
            			}
            		
        			sb.append("|");
        		
        				if(O4ADNF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ADNF);
            			}
            		
        			sb.append("|");
        		
        				if(O4AOHH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AOHH);
            			}
            		
        			sb.append("|");
        		
        				if(O4APLR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4APLR);
            			}
            		
        			sb.append("|");
        		
        				if(O4APSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4APSR);
            			}
            		
        			sb.append("|");
        		
        				if(O4ASPF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ASPF);
            			}
            		
        			sb.append("|");
        		
        				if(O4OSMA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4OSMA);
            			}
            		
        			sb.append("|");
        		
        				if(O4OSPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4OSPA);
            			}
            		
        			sb.append("|");
        		
        				if(O4AACA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AACA);
            			}
            		
        			sb.append("|");
        		
        				if(O4ARCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ARCA);
            			}
            		
        			sb.append("|");
        		
        				if(O4APDR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4APDR);
            			}
            		
        			sb.append("|");
        		
        				if(O4AUCG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4AUCG);
            			}
            		
        			sb.append("|");
        		
        				if(O4APSA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4APSA);
            			}
            		
        			sb.append("|");
        		
        				if(O4TVOA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4TVOA);
            			}
            		
        			sb.append("|");
        		
        				if(O4ATPB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ATPB);
            			}
            		
        			sb.append("|");
        		
        				if(O4ODSA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4ODSA);
            			}
            		
        			sb.append("|");
        		
        				if(O4UVDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4UVDT);
            			}
            		
        			sb.append("|");
        		
        				if(O4UVIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4UVIN);
            			}
            		
        			sb.append("|");
        		
        				if(O4FFUI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4FFUI);
            			}
            		
        			sb.append("|");
        		
        				if(O4EADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4EADT);
            			}
            		
        			sb.append("|");
        		
        				if(O4EATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4EATM);
            			}
            		
        			sb.append("|");
        		
        				if(O4EAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4EAID);
            			}
            		
        			sb.append("|");
        		
        				if(O4MODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4MODT);
            			}
            		
        			sb.append("|");
        		
        				if(O4MOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4MOTM);
            			}
            		
        			sb.append("|");
        		
        				if(O4MOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(O4MOID);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
USER_MasterStruct USER_Master = new USER_MasterStruct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"USER_Master");
					}
				
		int tos_count_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_1 = new StringBuilder();
                    log4jParamters_tDBOutput_1.append("Parameters:");
                            log4jParamters_tDBOutput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Master");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE" + " = " + "\"USER\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + (log4jParamters_tDBOutput_1) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_1().limitLog4jByte();
            }





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.GIM_Schema_Master;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("USER");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("USER");
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_1 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_1 = context.GIM_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection attempts to '")  + (url_tDBOutput_1)  + ("' with the username '")  + (dbUser_tDBOutput_1)  + ("'.") );
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to '")  + (url_tDBOutput_1)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_1.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_1 = 1;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"SITE_ID\",\"USER_ID\",\"MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY\",\"FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY\",\"PRICE_LIST_APPROVAL_AUTHORITY\",\"APPROVE_VALID_FOR_PRICING\",\"SOCIAL_SECURITY_NO\",\"EMPLOYEE_LAST_NAME\",\"EMPLOYEE_FIRST_NAME\",\"ADDRESS_LINE_1\",\"ADDRESS_LINE_2\",\"ADDEESS_LINE_3\",\"CITY\",\"STATE\",\"ZIP_CODE\",\"BIRTHDATE\",\"PRINTER\",\"SPOOL_STATUS_FLAG\",\"EMPLOYEE_NO\",\"STATUS\",\"IMS_AUTHORIZED_FREIGHT\",\"AUTHORITY_HOLD_ORDERS\",\"AUTHORITY_RELEASE_ORDERS\",\"AUTHORITY_IMMEDIATE_ORDERS\",\"AUTHORITY_CANCEL_ORDERS\",\"PHONE\",\"AUTHORITY_APPROVE_RECEIVED_PAYMENTS\",\"PRICE_CONTROLLER_APPROVAL_FLAG\",\"TELEPHONE_LOCAL_EXTENSION\",\"HIRE_DATE\",\"TERMINATION_DATE\",\"MIDDLE_INITIAL\",\"CUSTOMER_AGMT_APPROVAL_LEVEL\",\"UPDATE_PO_COST\",\"MISCELLANEOUS_BILLING_APPROVAL\",\"ACTIVE_INACTIVE_APPROVAL_AUTH_BILL\",\"ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP\",\"AGEING_POLICY_APPROVAL_AUTH_BILL\",\"AGEING_POLICY_APPROVAL_AUTH_SHIP\",\"DISCOUNT_GRACE_DAYS_APP_BILL\",\"DISCOUNT_GRACE_DAYS_APP_SHIP\",\"NET_GRACE_DAYS_APP_BILL\",\"NET_GRACE_DAYS_APP_SHIP\",\"PAYMENT_TERMS_POLICY_APP_BILL\",\"PAYMENT_TERMS_POLICY_APP_SHIP\",\"STOP_CODE_APPROVAL_AUTHORITY_BILL\",\"STOP_CODE_APPROVAL_AUTHORITY_SHIP\",\"ALLOC_INVENTORY_IMMED_APP_SHIP\",\"RESTOCK_FEE_APPROVAL_FLAG_SHIP\",\"MISCELLANEOUS_TAX_EXEMPT_SHIP\",\"BUYER_SUPERVISOR_AUTHORITY\",\"AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS\",\"AUTHORITY_TO_APPROVE_PICKUP_REQUESTS\",\"APPROVAL_SECURITY_LEVEL\",\"VISIBILITY_SECURITY_LEVEL\",\"AUTO_UP_FLAG\",\"AUTO_DOWN_FLAG\",\"AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE\",\"APPROVAL_ROUTE_TO\",\"AUTHORITY_APPROVE_SAMPLE_REQUESTS\",\"APPROVE_SPECIAL_FLAG\",\"OVERRIDE_SAMPLE_APPROVAL\",\"OVERRIDE_SPECIAL_APPROVAL\",\"AUTHORITY_APPROVE_PENDING_CUST_AGMTS\",\"AUTHORITY_REFUSE_PENDING_CUST_AGMTS\",\"AUTHORITY_APPROVE_DISPENSER_REQUESTS\",\"AUTHORITY_UPDATE_CUSTOMER_GROUPS\",\"AP_SUPERVISOR_AUTHORITY\",\"TOLERATED_VARIANCE_OVERRIDE_AUTHORITY\",\"AUTHORITY_TO_POST_BATCHES\",\"OVERRIDE_DISPENSOR_APPROVAL\",\"AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS\",\"AUTHORITY_MAINTAIN_INSURANCE_INFORMATION\",\"COPY_FROM_USER_ID\",\"CREATED_TIMESTAMP\",\"CREATED_USER_ID\",\"UPDATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\",\"O4PF_SVOP\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row2_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_USER_Master_tMap_1 = 0;
				
USER_MasterStruct USER_Master_tmp = new USER_MasterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"SYDBO4PF\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"SELECT    SYDBO4PF.O4USER,    SYDBO4PF.O4PFMA,    SYDBO4PF.O4PFFA,    SYDBO4PF.O4PLAA,    SYDBO4PF.O4AVPF,    SYDBO4PF.O4SSNO,    SYDBO4PF.O4LAST,    SYDBO4PF.O4FRST,    SYDBO4PF.O4ADR1,    SYDBO4PF.O4ADR2,    SYDBO4PF.O4ADR3,    SYDBO4PF.O4CIT,    SYDBO4PF.O4STAE,    SYDBO4PF.O4ZIP,    SYDBO4PF.O4BDAY,    SYDBO4PF.O4PRTR,    SYDBO4PF.O4SPLF,    SYDBO4PF.\\\"O4EMP#\\\",    SYDBO4PF.O4STAS,    SYDBO4PF.O4IAMF,    SYDBO4PF.O4ATHO,    SYDBO4PF.O4ATRO,    SYDBO4PF.O4ATIO,    SYDBO4PF.O4ATCO,    SYDBO4PF.O4TLPH,    SYDBO4PF.O4AARP,    SYDBO4PF.O4PCAF,    SYDBO4PF.O4TLXT,    SYDBO4PF.O4HRDT,    SYDBO4PF.O4TMDT,    SYDBO4PF.O4MIDI,    SYDBO4PF.O4CAAL,    SYDBO4PF.O4VUPO,    SYDBO4PF.O4MBAP,    SYDBO4PF.O4AIAB,    SYDBO4PF.O4AIAS,    SYDBO4PF.O4AGAB,    SYDBO4PF.O4AGAS,    SYDBO4PF.O4DGDB,    SYDBO4PF.O4DGDS,    SYDBO4PF.O4NGDB,    SYDBO4PF.O4NGDS,    SYDBO4PF.O4PTPB,    SYDBO4PF.O4PTPS,    SYDBO4PF.O4STCB,    SYDBO4PF.O4STCS,    SYDBO4PF.O4AIIS,    SYDBO4PF.O4RFAF,    SYDBO4PF.O4MTES,    SYDBO4PF.O4BYSA,    SYDBO4PF.O4AABA,    SYDBO4PF.O4AAPU,    SYDBO4PF.O4APSL,    SYDBO4PF.O4VSCL,    SYDBO4PF.O4AUPF,    SYDBO4PF.O4ADNF,    SYDBO4PF.O4AOHH,    SYDBO4PF.O4APLR,    SYDBO4PF.O4APSR,    SYDBO4PF.O4ASPF,    SYDBO4PF.O4OSMA,    SYDBO4PF.O4OSPA,    SYDBO4PF.O4AACA,    SYDBO4PF.O4ARCA,    SYDBO4PF.O4APDR,    SYDBO4PF.O4AUCG,    SYDBO4PF.O4APSA,    SYDBO4PF.O4TVOA,    SYDBO4PF.O4ATPB,    SYDBO4PF.O4ODSA,    SYDBO4PF.O4UVDT,    SYDBO4PF.O4UVIN,    SYDBO4PF.O4FFUI,    SYDBO4PF.O4EADT,    SYDBO4PF.O4EATM,    SYDBO4PF.O4EAID,    SYDBO4PF.O4MODT,    SYDBO4PF.O4MOTM,    SYDBO4PF.O4MOID FROM SYDBO4PF ORDER BY SYDBO4PF.O4EADT DESC\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.SUS_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_1 - Driver ClassName: "+driverClass_tDBInput_1+".");
			
	    		log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '" + dbUser_tDBInput_1 + "'.");
			
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
	    		log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  SYDBO4PF.O4USER, \n  SYDBO4PF.O4PFMA, \n  SYDBO4PF.O4PFFA, \n  SYDBO4PF.O4PLAA, \n  SYDBO4PF.O4AVPF, \n  SYDBO4PF."
+"O4SSNO, \n  SYDBO4PF.O4LAST, \n  SYDBO4PF.O4FRST, \n  SYDBO4PF.O4ADR1, \n  SYDBO4PF.O4ADR2, \n  SYDBO4PF.O4ADR3, \n  SYDBO4PF."
+"O4CIT, \n  SYDBO4PF.O4STAE, \n  SYDBO4PF.O4ZIP, \n  SYDBO4PF.O4BDAY, \n  SYDBO4PF.O4PRTR, \n  SYDBO4PF.O4SPLF, \n  SYDBO4PF.\""
+"O4EMP#\", \n  SYDBO4PF.O4STAS, \n  SYDBO4PF.O4IAMF, \n  SYDBO4PF.O4ATHO, \n  SYDBO4PF.O4ATRO, \n  SYDBO4PF.O4ATIO, \n  SYDBO4P"
+"F.O4ATCO, \n  SYDBO4PF.O4TLPH, \n  SYDBO4PF.O4AARP, \n  SYDBO4PF.O4PCAF, \n  SYDBO4PF.O4TLXT, \n  SYDBO4PF.O4HRDT, \n  SYDBO4P"
+"F.O4TMDT, \n  SYDBO4PF.O4MIDI, \n  SYDBO4PF.O4CAAL, \n  SYDBO4PF.O4VUPO, \n  SYDBO4PF.O4MBAP, \n  SYDBO4PF.O4AIAB, \n  SYDBO4P"
+"F.O4AIAS, \n  SYDBO4PF.O4AGAB, \n  SYDBO4PF.O4AGAS, \n  SYDBO4PF.O4DGDB, \n  SYDBO4PF.O4DGDS, \n  SYDBO4PF.O4NGDB, \n  SYDBO4P"
+"F.O4NGDS, \n  SYDBO4PF.O4PTPB, \n  SYDBO4PF.O4PTPS, \n  SYDBO4PF.O4STCB, \n  SYDBO4PF.O4STCS, \n  SYDBO4PF.O4AIIS, \n  SYDBO4P"
+"F.O4RFAF, \n  SYDBO4PF.O4MTES, \n  SYDBO4PF.O4BYSA, \n  SYDBO4PF.O4AABA, \n  SYDBO4PF.O4AAPU, \n  SYDBO4PF.O4APSL, \n  SYDBO4P"
+"F.O4VSCL, \n  SYDBO4PF.O4AUPF, \n  SYDBO4PF.O4ADNF, \n  SYDBO4PF.O4AOHH, \n  SYDBO4PF.O4APLR, \n  SYDBO4PF.O4APSR, \n  SYDBO4P"
+"F.O4ASPF, \n  SYDBO4PF.O4OSMA, \n  SYDBO4PF.O4OSPA, \n  SYDBO4PF.O4AACA, \n  SYDBO4PF.O4ARCA, \n  SYDBO4PF.O4APDR, \n  SYDBO4P"
+"F.O4AUCG, \n  SYDBO4PF.O4APSA, \n  SYDBO4PF.O4TVOA, \n  SYDBO4PF.O4ATPB, \n  SYDBO4PF.O4ODSA, \n  SYDBO4PF.O4UVDT, \n  SYDBO4P"
+"F.O4UVIN, \n  SYDBO4PF.O4FFUI, \n  SYDBO4PF.O4EADT, \n  SYDBO4PF.O4EATM, \n  SYDBO4PF.O4EAID, \n  SYDBO4PF.O4MODT, \n  SYDBO4P"
+"F.O4MOTM, \n  SYDBO4PF.O4MOID\nFROM SYDBO4PF ORDER BY SYDBO4PF.O4EADT DESC";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.O4USER = null;
							} else {
	                         		
        	row1.O4USER = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.O4PFMA = null;
							} else {
	                         		
        	row1.O4PFMA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.O4PFFA = null;
							} else {
	                         		
        	row1.O4PFFA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.O4PLAA = null;
							} else {
	                         		
        	row1.O4PLAA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.O4AVPF = null;
							} else {
	                         		
        	row1.O4AVPF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.O4SSNO = null;
							} else {
		                          
            row1.O4SSNO = rs_tDBInput_1.getBigDecimal(6);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.O4LAST = null;
							} else {
	                         		
        	row1.O4LAST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.O4FRST = null;
							} else {
	                         		
        	row1.O4FRST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.O4ADR1 = null;
							} else {
	                         		
        	row1.O4ADR1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.O4ADR2 = null;
							} else {
	                         		
        	row1.O4ADR2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.O4ADR3 = null;
							} else {
	                         		
        	row1.O4ADR3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.O4CIT = null;
							} else {
	                         		
        	row1.O4CIT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.O4STAE = null;
							} else {
	                         		
        	row1.O4STAE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.O4ZIP = null;
							} else {
	                         		
        	row1.O4ZIP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.O4BDAY = null;
							} else {
		                          
            row1.O4BDAY = rs_tDBInput_1.getBigDecimal(15);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.O4PRTR = null;
							} else {
	                         		
        	row1.O4PRTR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.O4SPLF = null;
							} else {
	                         		
        	row1.O4SPLF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.O4EMP = null;
							} else {
	                         		
        	row1.O4EMP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.O4STAS = null;
							} else {
	                         		
        	row1.O4STAS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.O4IAMF = null;
							} else {
	                         		
        	row1.O4IAMF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.O4ATHO = null;
							} else {
	                         		
        	row1.O4ATHO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.O4ATRO = null;
							} else {
	                         		
        	row1.O4ATRO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.O4ATIO = null;
							} else {
	                         		
        	row1.O4ATIO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.O4ATCO = null;
							} else {
	                         		
        	row1.O4ATCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.O4TLPH = null;
							} else {
		                          
            row1.O4TLPH = rs_tDBInput_1.getBigDecimal(25);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.O4AARP = null;
							} else {
	                         		
        	row1.O4AARP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.O4PCAF = null;
							} else {
	                         		
        	row1.O4PCAF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.O4TLXT = null;
							} else {
	                         		
        	row1.O4TLXT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.O4HRDT = null;
							} else {
		                          
            row1.O4HRDT = rs_tDBInput_1.getBigDecimal(29);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.O4TMDT = null;
							} else {
		                          
            row1.O4TMDT = rs_tDBInput_1.getBigDecimal(30);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.O4MIDI = null;
							} else {
	                         		
        	row1.O4MIDI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.O4CAAL = null;
							} else {
	                         		
        	row1.O4CAAL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.O4VUPO = null;
							} else {
	                         		
        	row1.O4VUPO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.O4MBAP = null;
							} else {
	                         		
        	row1.O4MBAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.O4AIAB = null;
							} else {
	                         		
        	row1.O4AIAB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.O4AIAS = null;
							} else {
	                         		
        	row1.O4AIAS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.O4AGAB = null;
							} else {
	                         		
        	row1.O4AGAB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.O4AGAS = null;
							} else {
	                         		
        	row1.O4AGAS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.O4DGDB = null;
							} else {
	                         		
        	row1.O4DGDB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.O4DGDS = null;
							} else {
	                         		
        	row1.O4DGDS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.O4NGDB = null;
							} else {
	                         		
        	row1.O4NGDB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.O4NGDS = null;
							} else {
	                         		
        	row1.O4NGDS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.O4PTPB = null;
							} else {
	                         		
        	row1.O4PTPB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.O4PTPS = null;
							} else {
	                         		
        	row1.O4PTPS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.O4STCB = null;
							} else {
	                         		
        	row1.O4STCB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.O4STCS = null;
							} else {
	                         		
        	row1.O4STCS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.O4AIIS = null;
							} else {
	                         		
        	row1.O4AIIS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.O4RFAF = null;
							} else {
	                         		
        	row1.O4RFAF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.O4MTES = null;
							} else {
	                         		
        	row1.O4MTES = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.O4BYSA = null;
							} else {
	                         		
        	row1.O4BYSA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.O4AABA = null;
							} else {
	                         		
        	row1.O4AABA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.O4AAPU = null;
							} else {
	                         		
        	row1.O4AAPU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 52, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.O4APSL = null;
							} else {
	                         		
        	row1.O4APSL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.O4VSCL = null;
							} else {
	                         		
        	row1.O4VSCL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.O4AUPF = null;
							} else {
	                         		
        	row1.O4AUPF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 55, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.O4ADNF = null;
							} else {
	                         		
        	row1.O4ADNF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.O4AOHH = null;
							} else {
	                         		
        	row1.O4AOHH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 57, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.O4APLR = null;
							} else {
	                         		
        	row1.O4APLR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 58, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.O4APSR = null;
							} else {
	                         		
        	row1.O4APSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 59, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.O4ASPF = null;
							} else {
	                         		
        	row1.O4ASPF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 60, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.O4OSMA = null;
							} else {
	                         		
        	row1.O4OSMA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 61, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.O4OSPA = null;
							} else {
	                         		
        	row1.O4OSPA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 62, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.O4AACA = null;
							} else {
	                         		
        	row1.O4AACA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 63, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.O4ARCA = null;
							} else {
	                         		
        	row1.O4ARCA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.O4APDR = null;
							} else {
	                         		
        	row1.O4APDR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 65, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.O4AUCG = null;
							} else {
	                         		
        	row1.O4AUCG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 66, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.O4APSA = null;
							} else {
	                         		
        	row1.O4APSA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 67, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.O4TVOA = null;
							} else {
	                         		
        	row1.O4TVOA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.O4ATPB = null;
							} else {
	                         		
        	row1.O4ATPB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 69, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.O4ODSA = null;
							} else {
	                         		
        	row1.O4ODSA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 70, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.O4UVDT = null;
							} else {
	                         		
        	row1.O4UVDT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 71, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.O4UVIN = null;
							} else {
	                         		
        	row1.O4UVIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.O4FFUI = null;
							} else {
	                         		
        	row1.O4FFUI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 73, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.O4EADT = null;
							} else {
		                          
            row1.O4EADT = rs_tDBInput_1.getBigDecimal(74);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.O4EATM = null;
							} else {
		                          
            row1.O4EATM = rs_tDBInput_1.getBigDecimal(75);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.O4EAID = null;
							} else {
	                         		
        	row1.O4EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.O4MODT = null;
							} else {
		                          
            row1.O4MODT = rs_tDBInput_1.getBigDecimal(77);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row1.O4MOTM = null;
							} else {
		                          
            row1.O4MOTM = rs_tDBInput_1.getBigDecimal(78);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 79) {
								row1.O4MOID = null;
							} else {
	                         		
        	row1.O4MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 79, true);
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		

    //Code generated according to input schema and output schema
row2.SITE_ID = context.opco;
row2.USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.O4USER);
row2.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY = CharSetHandling.convertEBCDICStrToASCII(row1.O4PFMA);
row2.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY = CharSetHandling.convertEBCDICStrToASCII(row1.O4PFFA);
row2.PRICE_LIST_APPROVAL_AUTHORITY = CharSetHandling.convertEBCDICStrToASCII(row1.O4PLAA);
row2.APPROVE_VALID_FOR_PRICING = CharSetHandling.convertEBCDICStrToASCII(row1.O4AVPF);
row2.SOCIAL_SECURITY_NO = row1.O4SSNO;
row2.EMPLOYEE_LAST_NAME = CharSetHandling.convertEBCDICStrToASCII(row1.O4LAST);
row2.EMPLOYEE_FIRST_NAME = CharSetHandling.convertEBCDICStrToASCII(row1.O4FRST);
row2.ADDRESS_LINE_1 = CharSetHandling.convertEBCDICStrToASCII(row1.O4ADR1);
row2.ADDRESS_LINE_2 = CharSetHandling.convertEBCDICStrToASCII(row1.O4ADR2);
row2.ADDEESS_LINE_3 = CharSetHandling.convertEBCDICStrToASCII(row1.O4ADR3);
row2.CITY = CharSetHandling.convertEBCDICStrToASCII(row1.O4CIT);
row2.STATE = CharSetHandling.convertEBCDICStrToASCII(row1.O4STAE);
row2.ZIP_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.O4ZIP);
row2.BIRTHDATE = TimeStampConverting.convertToDate(row1.O4BDAY.toString());
row2.PRINTER = CharSetHandling.convertEBCDICStrToASCII(row1.O4PRTR);
row2.SPOOL_STATUS_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.O4SPLF);
row2.EMPLOYEE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.O4EMP);
row2.STATUS = CharSetHandling.convertEBCDICStrToASCII(row1.O4STAS);
row2.IMS_AUTHORIZED_FREIGHT = CharSetHandling.convertEBCDICStrToASCII(row1.O4IAMF);
row2.AUTHORITY_HOLD_ORDERS = CharSetHandling.convertEBCDICStrToASCII(row1.O4ATHO);
row2.AUTHORITY_RELEASE_ORDERS = CharSetHandling.convertEBCDICStrToASCII(row1.O4ATRO);
row2.AUTHORITY_IMMEDIATE_ORDERS = CharSetHandling.convertEBCDICStrToASCII(row1.O4ATIO);
row2.AUTHORITY_CANCEL_ORDERS = CharSetHandling.convertEBCDICStrToASCII(row1.O4ATCO);
row2.PHONE = row1.O4TLPH;
row2.AUTHORITY_APPROVE_RECEIVED_PAYMENTS = CharSetHandling.convertEBCDICStrToASCII(row1.O4AARP);
row2.PRICE_CONTROLLER_APPROVAL_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.O4PCAF);
row2.TELEPHONE_LOCAL_EXTENSION = CharSetHandling.convertEBCDICStrToASCII(row1.O4TLXT);
row2.HIRE_DATE = TimeStampConverting.convertToDate(row1.O4HRDT.toString());
row2.TERMINATION_DATE = TimeStampConverting.convertToDate(row1.O4TMDT.toString());
row2.MIDDLE_INITIAL = CharSetHandling.convertEBCDICStrToASCII(row1.O4MIDI);
row2.CUSTOMER_AGMT_APPROVAL_LEVEL = CharSetHandling.convertEBCDICStrToASCII(row1.O4CAAL);
row2.UPDATE_PO_COST = CharSetHandling.convertEBCDICStrToASCII(row1.O4VUPO);
row2.MISCELLANEOUS_BILLING_APPROVAL = CharSetHandling.convertEBCDICStrToASCII(row1.O4MBAP);
row2.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL = CharSetHandling.convertEBCDICStrToASCII(row1.O4AIAB);
row2.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4AIAS);
row2.AGEING_POLICY_APPROVAL_AUTH_BILL = CharSetHandling.convertEBCDICStrToASCII(row1.O4AGAB);
row2.AGEING_POLICY_APPROVAL_AUTH_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4AGAS);
row2.DISCOUNT_GRACE_DAYS_APP_BILL = CharSetHandling.convertEBCDICStrToASCII(row1.O4DGDB);
row2.DISCOUNT_GRACE_DAYS_APP_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4DGDS);
row2.NET_GRACE_DAYS_APP_BILL = CharSetHandling.convertEBCDICStrToASCII(row1.O4NGDB);
row2.NET_GRACE_DAYS_APP_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4NGDS);
row2.PAYMENT_TERMS_POLICY_APP_BILL = CharSetHandling.convertEBCDICStrToASCII(row1.O4PTPB);
row2.PAYMENT_TERMS_POLICY_APP_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4PTPS);
row2.STOP_CODE_APPROVAL_AUTHORITY_BILL = CharSetHandling.convertEBCDICStrToASCII(row1.O4STCB);
row2.STOP_CODE_APPROVAL_AUTHORITY_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4STCS);
row2.ALLOC_INVENTORY_IMMED_APP_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4AIIS);
row2.RESTOCK_FEE_APPROVAL_FLAG_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4RFAF);
row2.MISCELLANEOUS_TAX_EXEMPT_SHIP = CharSetHandling.convertEBCDICStrToASCII(row1.O4MTES);
row2.BUYER_SUPERVISOR_AUTHORITY = CharSetHandling.convertEBCDICStrToASCII(row1.O4BYSA);
row2.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS = CharSetHandling.convertEBCDICStrToASCII(row1.O4AABA);
row2.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS = CharSetHandling.convertEBCDICStrToASCII(row1.O4AAPU);
row2.APPROVAL_SECURITY_LEVEL = CharSetHandling.convertEBCDICStrToASCII(row1.O4APSL);
row2.VISIBILITY_SECURITY_LEVEL = CharSetHandling.convertEBCDICStrToASCII(row1.O4VSCL);
row2.AUTO_UP_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.O4AUPF);
row2.AUTO_DOWN_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.O4ADNF);
row2.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.O4AOHH);
row2.APPROVAL_ROUTE_TO = CharSetHandling.convertEBCDICStrToASCII(row1.O4APLR);
row2.AUTHORITY_APPROVE_SAMPLE_REQUESTS = CharSetHandling.convertEBCDICStrToASCII(row1.O4APSR);
row2.APPROVE_SPECIAL_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.O4ASPF);
row2.OVERRIDE_SAMPLE_APPROVAL = CharSetHandling.convertEBCDICStrToASCII(row1.O4OSMA);
row2.OVERRIDE_SPECIAL_APPROVAL = CharSetHandling.convertEBCDICStrToASCII(row1.O4OSPA);
row2.AUTHORITY_APPROVE_PENDING_CUST_AGMTS = CharSetHandling.convertEBCDICStrToASCII(row1.O4AACA);
row2.AUTHORITY_REFUSE_PENDING_CUST_AGMTS = CharSetHandling.convertEBCDICStrToASCII(row1.O4ARCA);
row2.AUTHORITY_APPROVE_DISPENSER_REQUESTS = CharSetHandling.convertEBCDICStrToASCII(row1.O4APDR);
row2.AUTHORITY_UPDATE_CUSTOMER_GROUPS = CharSetHandling.convertEBCDICStrToASCII(row1.O4AUCG);
row2.AP_SUPERVISOR_AUTHORITY = CharSetHandling.convertEBCDICStrToASCII(row1.O4APSA);
row2.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY = CharSetHandling.convertEBCDICStrToASCII(row1.O4TVOA);
row2.AUTHORITY_TO_POST_BATCHES = CharSetHandling.convertEBCDICStrToASCII(row1.O4ATPB);
row2.OVERRIDE_DISPENSOR_APPROVAL = CharSetHandling.convertEBCDICStrToASCII(row1.O4ODSA);
row2.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS = CharSetHandling.convertEBCDICStrToASCII(row1.O4UVDT);
row2.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION = CharSetHandling.convertEBCDICStrToASCII(row1.O4UVIN);
row2.COPY_FROM_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.O4FFUI);
row2.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.O4EADT.toString(), row1.O4EATM.toString());
row2.CREATED_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.O4EAID);
row2.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.O4MODT.toString(), row1.O4MOTM.toString());
row2.UPDATED_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.O4MOID);
row2.IS_DELETED = false;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row2 - " + (row2==null? "": row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

USER_Master = null;


// # Output table : 'USER_Master'
count_USER_Master_tMap_1++;

USER_Master_tmp.SITE_ID = row2.SITE_ID ;
USER_Master_tmp.USER_ID = row2.USER_ID;
USER_Master_tmp.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY = row2.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY;
USER_Master_tmp.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY = row2.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY;
USER_Master_tmp.PRICE_LIST_APPROVAL_AUTHORITY = row2.PRICE_LIST_APPROVAL_AUTHORITY;
USER_Master_tmp.APPROVE_VALID_FOR_PRICING = row2.APPROVE_VALID_FOR_PRICING;
USER_Master_tmp.SOCIAL_SECURITY_NO = row2.SOCIAL_SECURITY_NO;
USER_Master_tmp.EMPLOYEE_LAST_NAME = row2.EMPLOYEE_LAST_NAME;
USER_Master_tmp.EMPLOYEE_FIRST_NAME = row2.EMPLOYEE_FIRST_NAME;
USER_Master_tmp.ADDRESS_LINE_1 = row2.ADDRESS_LINE_1;
USER_Master_tmp.ADDRESS_LINE_2 = row2.ADDRESS_LINE_2;
USER_Master_tmp.ADDEESS_LINE_3 = row2.ADDEESS_LINE_3;
USER_Master_tmp.CITY = row2.CITY;
USER_Master_tmp.STATE = row2.STATE;
USER_Master_tmp.ZIP_CODE = row2.ZIP_CODE;
USER_Master_tmp.BIRTHDATE = row2.BIRTHDATE!=""? TalendDate.parseDate("dd-MM-yyyy",row2.BIRTHDATE):null ;
USER_Master_tmp.PRINTER = row2.PRINTER;
USER_Master_tmp.SPOOL_STATUS_FLAG = row2.SPOOL_STATUS_FLAG;
USER_Master_tmp.EMPLOYEE_NO = row2.EMPLOYEE_NO;
USER_Master_tmp.STATUS = row2.STATUS;
USER_Master_tmp.IMS_AUTHORIZED_FREIGHT = row2.IMS_AUTHORIZED_FREIGHT;
USER_Master_tmp.AUTHORITY_HOLD_ORDERS = row2.AUTHORITY_HOLD_ORDERS;
USER_Master_tmp.AUTHORITY_RELEASE_ORDERS = row2.AUTHORITY_RELEASE_ORDERS;
USER_Master_tmp.AUTHORITY_IMMEDIATE_ORDERS = row2.AUTHORITY_IMMEDIATE_ORDERS;
USER_Master_tmp.AUTHORITY_CANCEL_ORDERS = row2.AUTHORITY_CANCEL_ORDERS;
USER_Master_tmp.PHONE = row2.PHONE;
USER_Master_tmp.AUTHORITY_APPROVE_RECEIVED_PAYMENTS = row2.AUTHORITY_APPROVE_RECEIVED_PAYMENTS;
USER_Master_tmp.PRICE_CONTROLLER_APPROVAL_FLAG = row2.PRICE_CONTROLLER_APPROVAL_FLAG;
USER_Master_tmp.TELEPHONE_LOCAL_EXTENSION = row2.TELEPHONE_LOCAL_EXTENSION;
USER_Master_tmp.HIRE_DATE = row2.HIRE_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",row2.HIRE_DATE):null ;
USER_Master_tmp.TERMINATION_DATE = row2.TERMINATION_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",row2.TERMINATION_DATE):null ;
USER_Master_tmp.MIDDLE_INITIAL = row2.MIDDLE_INITIAL;
USER_Master_tmp.CUSTOMER_AGMT_APPROVAL_LEVEL = row2.CUSTOMER_AGMT_APPROVAL_LEVEL;
USER_Master_tmp.UPDATE_PO_COST = row2.UPDATE_PO_COST;
USER_Master_tmp.MISCELLANEOUS_BILLING_APPROVAL = row2.MISCELLANEOUS_BILLING_APPROVAL;
USER_Master_tmp.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL = row2.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL;
USER_Master_tmp.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP = row2.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP;
USER_Master_tmp.AGEING_POLICY_APPROVAL_AUTH_BILL = row2.AGEING_POLICY_APPROVAL_AUTH_BILL;
USER_Master_tmp.AGEING_POLICY_APPROVAL_AUTH_SHIP = row2.AGEING_POLICY_APPROVAL_AUTH_SHIP;
USER_Master_tmp.DISCOUNT_GRACE_DAYS_APP_BILL = row2.DISCOUNT_GRACE_DAYS_APP_BILL;
USER_Master_tmp.DISCOUNT_GRACE_DAYS_APP_SHIP = row2.DISCOUNT_GRACE_DAYS_APP_SHIP;
USER_Master_tmp.NET_GRACE_DAYS_APP_BILL = row2.NET_GRACE_DAYS_APP_BILL;
USER_Master_tmp.NET_GRACE_DAYS_APP_SHIP = row2.NET_GRACE_DAYS_APP_SHIP;
USER_Master_tmp.PAYMENT_TERMS_POLICY_APP_BILL = row2.PAYMENT_TERMS_POLICY_APP_BILL;
USER_Master_tmp.PAYMENT_TERMS_POLICY_APP_SHIP = row2.PAYMENT_TERMS_POLICY_APP_SHIP;
USER_Master_tmp.STOP_CODE_APPROVAL_AUTHORITY_BILL = row2.STOP_CODE_APPROVAL_AUTHORITY_BILL;
USER_Master_tmp.STOP_CODE_APPROVAL_AUTHORITY_SHIP = row2.STOP_CODE_APPROVAL_AUTHORITY_SHIP;
USER_Master_tmp.ALLOC_INVENTORY_IMMED_APP_SHIP = row2.ALLOC_INVENTORY_IMMED_APP_SHIP;
USER_Master_tmp.RESTOCK_FEE_APPROVAL_FLAG_SHIP = row2.RESTOCK_FEE_APPROVAL_FLAG_SHIP;
USER_Master_tmp.MISCELLANEOUS_TAX_EXEMPT_SHIP = row2.MISCELLANEOUS_TAX_EXEMPT_SHIP;
USER_Master_tmp.BUYER_SUPERVISOR_AUTHORITY = row2.BUYER_SUPERVISOR_AUTHORITY;
USER_Master_tmp.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS = row2.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS;
USER_Master_tmp.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS = row2.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS;
USER_Master_tmp.APPROVAL_SECURITY_LEVEL = row2.APPROVAL_SECURITY_LEVEL;
USER_Master_tmp.VISIBILITY_SECURITY_LEVEL = row2.VISIBILITY_SECURITY_LEVEL;
USER_Master_tmp.AUTO_UP_FLAG = row2.AUTO_UP_FLAG;
USER_Master_tmp.AUTO_DOWN_FLAG = row2.AUTO_DOWN_FLAG;
USER_Master_tmp.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE = row2.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE;
USER_Master_tmp.APPROVAL_ROUTE_TO = row2.APPROVAL_ROUTE_TO;
USER_Master_tmp.AUTHORITY_APPROVE_SAMPLE_REQUESTS = row2.AUTHORITY_APPROVE_SAMPLE_REQUESTS;
USER_Master_tmp.APPROVE_SPECIAL_FLAG = row2.APPROVE_SPECIAL_FLAG;
USER_Master_tmp.OVERRIDE_SAMPLE_APPROVAL = row2.OVERRIDE_SAMPLE_APPROVAL;
USER_Master_tmp.OVERRIDE_SPECIAL_APPROVAL = row2.OVERRIDE_SPECIAL_APPROVAL;
USER_Master_tmp.AUTHORITY_APPROVE_PENDING_CUST_AGMTS = row2.AUTHORITY_APPROVE_PENDING_CUST_AGMTS;
USER_Master_tmp.AUTHORITY_REFUSE_PENDING_CUST_AGMTS = row2.AUTHORITY_REFUSE_PENDING_CUST_AGMTS;
USER_Master_tmp.AUTHORITY_APPROVE_DISPENSER_REQUESTS = row2.AUTHORITY_APPROVE_DISPENSER_REQUESTS;
USER_Master_tmp.AUTHORITY_UPDATE_CUSTOMER_GROUPS = row2.AUTHORITY_UPDATE_CUSTOMER_GROUPS;
USER_Master_tmp.AP_SUPERVISOR_AUTHORITY = row2.AP_SUPERVISOR_AUTHORITY;
USER_Master_tmp.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY = row2.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY;
USER_Master_tmp.AUTHORITY_TO_POST_BATCHES = row2.AUTHORITY_TO_POST_BATCHES;
USER_Master_tmp.OVERRIDE_DISPENSOR_APPROVAL = row2.OVERRIDE_DISPENSOR_APPROVAL;
USER_Master_tmp.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS = row2.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS;
USER_Master_tmp.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION = row2.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION;
USER_Master_tmp.COPY_FROM_USER_ID = row2.COPY_FROM_USER_ID;
USER_Master_tmp.CREATED_TIMESTAMP = row2.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",row2.CREATED_TIMESTAMP):null ;
USER_Master_tmp.CREATED_USER_ID = row2.CREATED_USER_ID;
USER_Master_tmp.UPDATED_TIMESTAMP = row2.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",row2.UPDATED_TIMESTAMP):null ;
USER_Master_tmp.UPDATED_USER_ID = row2.UPDATED_USER_ID;
USER_Master_tmp.IS_DELETED = row2.IS_DELETED;
USER_Master_tmp.CREATED_ORIGIN = "SUS";
USER_Master_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
USER_Master_tmp.UPDATED_ORIGIN = "SUS";
USER_Master_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
USER_Master_tmp.O4PF_SVOP = context.svop;
USER_Master = USER_Master_tmp;
log.debug("tMap_1 - Outputting the record " + count_USER_Master_tMap_1 + " of the output table 'USER_Master'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "USER_Master"
if(USER_Master != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"USER_Master"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("USER_Master - " + (USER_Master==null? "": USER_Master.toLogString()));
    			}
    		



        whetherReject_tDBOutput_1 = false;
                    if(USER_Master.SITE_ID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, USER_Master.SITE_ID);
}

                    if(USER_Master.USER_ID == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, USER_Master.USER_ID);
}

                    if(USER_Master.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, USER_Master.MERCHANDISE_PROFORMA_APPROVAL_AUTHORITY);
}

                    if(USER_Master.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, USER_Master.FREIGHT_PRO_FORMA_APPROVAL_AUTHORITY);
}

                    if(USER_Master.PRICE_LIST_APPROVAL_AUTHORITY == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, USER_Master.PRICE_LIST_APPROVAL_AUTHORITY);
}

                    if(USER_Master.APPROVE_VALID_FOR_PRICING == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, USER_Master.APPROVE_VALID_FOR_PRICING);
}

                    pstmt_tDBOutput_1.setBigDecimal(7, USER_Master.SOCIAL_SECURITY_NO);

                    if(USER_Master.EMPLOYEE_LAST_NAME == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, USER_Master.EMPLOYEE_LAST_NAME);
}

                    if(USER_Master.EMPLOYEE_FIRST_NAME == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, USER_Master.EMPLOYEE_FIRST_NAME);
}

                    if(USER_Master.ADDRESS_LINE_1 == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, USER_Master.ADDRESS_LINE_1);
}

                    if(USER_Master.ADDRESS_LINE_2 == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, USER_Master.ADDRESS_LINE_2);
}

                    if(USER_Master.ADDEESS_LINE_3 == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, USER_Master.ADDEESS_LINE_3);
}

                    if(USER_Master.CITY == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, USER_Master.CITY);
}

                    if(USER_Master.STATE == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, USER_Master.STATE);
}

                    if(USER_Master.ZIP_CODE == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, USER_Master.ZIP_CODE);
}

                    if(USER_Master.BIRTHDATE != null) {
pstmt_tDBOutput_1.setTimestamp(16, new java.sql.Timestamp(USER_Master.BIRTHDATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.TIMESTAMP);
}

                    if(USER_Master.PRINTER == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, USER_Master.PRINTER);
}

                    if(USER_Master.SPOOL_STATUS_FLAG == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, USER_Master.SPOOL_STATUS_FLAG);
}

                    if(USER_Master.EMPLOYEE_NO == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, USER_Master.EMPLOYEE_NO);
}

                    if(USER_Master.STATUS == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, USER_Master.STATUS);
}

                    if(USER_Master.IMS_AUTHORIZED_FREIGHT == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, USER_Master.IMS_AUTHORIZED_FREIGHT);
}

                    if(USER_Master.AUTHORITY_HOLD_ORDERS == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, USER_Master.AUTHORITY_HOLD_ORDERS);
}

                    if(USER_Master.AUTHORITY_RELEASE_ORDERS == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, USER_Master.AUTHORITY_RELEASE_ORDERS);
}

                    if(USER_Master.AUTHORITY_IMMEDIATE_ORDERS == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(24, USER_Master.AUTHORITY_IMMEDIATE_ORDERS);
}

                    if(USER_Master.AUTHORITY_CANCEL_ORDERS == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, USER_Master.AUTHORITY_CANCEL_ORDERS);
}

                    pstmt_tDBOutput_1.setBigDecimal(26, USER_Master.PHONE);

                    if(USER_Master.AUTHORITY_APPROVE_RECEIVED_PAYMENTS == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, USER_Master.AUTHORITY_APPROVE_RECEIVED_PAYMENTS);
}

                    if(USER_Master.PRICE_CONTROLLER_APPROVAL_FLAG == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, USER_Master.PRICE_CONTROLLER_APPROVAL_FLAG);
}

                    if(USER_Master.TELEPHONE_LOCAL_EXTENSION == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, USER_Master.TELEPHONE_LOCAL_EXTENSION);
}

                    if(USER_Master.HIRE_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(30, new java.sql.Timestamp(USER_Master.HIRE_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.TIMESTAMP);
}

                    if(USER_Master.TERMINATION_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(31, new java.sql.Timestamp(USER_Master.TERMINATION_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.TIMESTAMP);
}

                    if(USER_Master.MIDDLE_INITIAL == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, USER_Master.MIDDLE_INITIAL);
}

                    if(USER_Master.CUSTOMER_AGMT_APPROVAL_LEVEL == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, USER_Master.CUSTOMER_AGMT_APPROVAL_LEVEL);
}

                    if(USER_Master.UPDATE_PO_COST == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, USER_Master.UPDATE_PO_COST);
}

                    if(USER_Master.MISCELLANEOUS_BILLING_APPROVAL == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, USER_Master.MISCELLANEOUS_BILLING_APPROVAL);
}

                    if(USER_Master.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, USER_Master.ACTIVE_INACTIVE_APPROVAL_AUTH_BILL);
}

                    if(USER_Master.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(37, USER_Master.ACTIVE_INACTIVE_APPROVAL_AUTH_SHIP);
}

                    if(USER_Master.AGEING_POLICY_APPROVAL_AUTH_BILL == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, USER_Master.AGEING_POLICY_APPROVAL_AUTH_BILL);
}

                    if(USER_Master.AGEING_POLICY_APPROVAL_AUTH_SHIP == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, USER_Master.AGEING_POLICY_APPROVAL_AUTH_SHIP);
}

                    if(USER_Master.DISCOUNT_GRACE_DAYS_APP_BILL == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, USER_Master.DISCOUNT_GRACE_DAYS_APP_BILL);
}

                    if(USER_Master.DISCOUNT_GRACE_DAYS_APP_SHIP == null) {
pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(41, USER_Master.DISCOUNT_GRACE_DAYS_APP_SHIP);
}

                    if(USER_Master.NET_GRACE_DAYS_APP_BILL == null) {
pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(42, USER_Master.NET_GRACE_DAYS_APP_BILL);
}

                    if(USER_Master.NET_GRACE_DAYS_APP_SHIP == null) {
pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(43, USER_Master.NET_GRACE_DAYS_APP_SHIP);
}

                    if(USER_Master.PAYMENT_TERMS_POLICY_APP_BILL == null) {
pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(44, USER_Master.PAYMENT_TERMS_POLICY_APP_BILL);
}

                    if(USER_Master.PAYMENT_TERMS_POLICY_APP_SHIP == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, USER_Master.PAYMENT_TERMS_POLICY_APP_SHIP);
}

                    if(USER_Master.STOP_CODE_APPROVAL_AUTHORITY_BILL == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, USER_Master.STOP_CODE_APPROVAL_AUTHORITY_BILL);
}

                    if(USER_Master.STOP_CODE_APPROVAL_AUTHORITY_SHIP == null) {
pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(47, USER_Master.STOP_CODE_APPROVAL_AUTHORITY_SHIP);
}

                    if(USER_Master.ALLOC_INVENTORY_IMMED_APP_SHIP == null) {
pstmt_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(48, USER_Master.ALLOC_INVENTORY_IMMED_APP_SHIP);
}

                    if(USER_Master.RESTOCK_FEE_APPROVAL_FLAG_SHIP == null) {
pstmt_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(49, USER_Master.RESTOCK_FEE_APPROVAL_FLAG_SHIP);
}

                    if(USER_Master.MISCELLANEOUS_TAX_EXEMPT_SHIP == null) {
pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(50, USER_Master.MISCELLANEOUS_TAX_EXEMPT_SHIP);
}

                    if(USER_Master.BUYER_SUPERVISOR_AUTHORITY == null) {
pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(51, USER_Master.BUYER_SUPERVISOR_AUTHORITY);
}

                    if(USER_Master.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS == null) {
pstmt_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(52, USER_Master.AUTHORITY_APPROVE_BILLING_ADJ_REQUESTS);
}

                    if(USER_Master.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS == null) {
pstmt_tDBOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(53, USER_Master.AUTHORITY_TO_APPROVE_PICKUP_REQUESTS);
}

                    if(USER_Master.APPROVAL_SECURITY_LEVEL == null) {
pstmt_tDBOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(54, USER_Master.APPROVAL_SECURITY_LEVEL);
}

                    if(USER_Master.VISIBILITY_SECURITY_LEVEL == null) {
pstmt_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(55, USER_Master.VISIBILITY_SECURITY_LEVEL);
}

                    if(USER_Master.AUTO_UP_FLAG == null) {
pstmt_tDBOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(56, USER_Master.AUTO_UP_FLAG);
}

                    if(USER_Master.AUTO_DOWN_FLAG == null) {
pstmt_tDBOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(57, USER_Master.AUTO_DOWN_FLAG);
}

                    if(USER_Master.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE == null) {
pstmt_tDBOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(58, USER_Master.AUTHORITY_OVERRIDE_HOLD_HARMLESS_CODE);
}

                    if(USER_Master.APPROVAL_ROUTE_TO == null) {
pstmt_tDBOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(59, USER_Master.APPROVAL_ROUTE_TO);
}

                    if(USER_Master.AUTHORITY_APPROVE_SAMPLE_REQUESTS == null) {
pstmt_tDBOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(60, USER_Master.AUTHORITY_APPROVE_SAMPLE_REQUESTS);
}

                    if(USER_Master.APPROVE_SPECIAL_FLAG == null) {
pstmt_tDBOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(61, USER_Master.APPROVE_SPECIAL_FLAG);
}

                    if(USER_Master.OVERRIDE_SAMPLE_APPROVAL == null) {
pstmt_tDBOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(62, USER_Master.OVERRIDE_SAMPLE_APPROVAL);
}

                    if(USER_Master.OVERRIDE_SPECIAL_APPROVAL == null) {
pstmt_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(63, USER_Master.OVERRIDE_SPECIAL_APPROVAL);
}

                    if(USER_Master.AUTHORITY_APPROVE_PENDING_CUST_AGMTS == null) {
pstmt_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(64, USER_Master.AUTHORITY_APPROVE_PENDING_CUST_AGMTS);
}

                    if(USER_Master.AUTHORITY_REFUSE_PENDING_CUST_AGMTS == null) {
pstmt_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(65, USER_Master.AUTHORITY_REFUSE_PENDING_CUST_AGMTS);
}

                    if(USER_Master.AUTHORITY_APPROVE_DISPENSER_REQUESTS == null) {
pstmt_tDBOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(66, USER_Master.AUTHORITY_APPROVE_DISPENSER_REQUESTS);
}

                    if(USER_Master.AUTHORITY_UPDATE_CUSTOMER_GROUPS == null) {
pstmt_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(67, USER_Master.AUTHORITY_UPDATE_CUSTOMER_GROUPS);
}

                    if(USER_Master.AP_SUPERVISOR_AUTHORITY == null) {
pstmt_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(68, USER_Master.AP_SUPERVISOR_AUTHORITY);
}

                    if(USER_Master.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY == null) {
pstmt_tDBOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(69, USER_Master.TOLERATED_VARIANCE_OVERRIDE_AUTHORITY);
}

                    if(USER_Master.AUTHORITY_TO_POST_BATCHES == null) {
pstmt_tDBOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(70, USER_Master.AUTHORITY_TO_POST_BATCHES);
}

                    if(USER_Master.OVERRIDE_DISPENSOR_APPROVAL == null) {
pstmt_tDBOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(71, USER_Master.OVERRIDE_DISPENSOR_APPROVAL);
}

                    if(USER_Master.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS == null) {
pstmt_tDBOutput_1.setNull(72, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(72, USER_Master.AUTHORITY_UPDATE_VENDOR_DISCOUNT_TERMS);
}

                    if(USER_Master.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION == null) {
pstmt_tDBOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(73, USER_Master.AUTHORITY_MAINTAIN_INSURANCE_INFORMATION);
}

                    if(USER_Master.COPY_FROM_USER_ID == null) {
pstmt_tDBOutput_1.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(74, USER_Master.COPY_FROM_USER_ID);
}

                    if(USER_Master.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(75, new java.sql.Timestamp(USER_Master.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(75, java.sql.Types.TIMESTAMP);
}

                    if(USER_Master.CREATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(76, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(76, USER_Master.CREATED_USER_ID);
}

                    if(USER_Master.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(77, new java.sql.Timestamp(USER_Master.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(USER_Master.UPDATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(78, USER_Master.UPDATED_USER_ID);
}

                    pstmt_tDBOutput_1.setBoolean(79, USER_Master.IS_DELETED);

                    if(USER_Master.CREATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(80, USER_Master.CREATED_ORIGIN);
}

                    if(USER_Master.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(81, new java.sql.Timestamp(USER_Master.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(81, java.sql.Types.TIMESTAMP);
}

                    if(USER_Master.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(82, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(82, USER_Master.UPDATED_ORIGIN);
}

                    if(USER_Master.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(83, new java.sql.Timestamp(USER_Master.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(83, java.sql.Types.TIMESTAMP);
}

                    if(USER_Master.O4PF_SVOP == null) {
pstmt_tDBOutput_1.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(84, USER_Master.O4PF_SVOP);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Adding the record ")  + (nb_line_tDBOutput_1)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "USER_Master"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
	    		log.debug("tDBInput_1 - Closing the connection to the database.");
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_1", end_Hash.get("tDBInput_1")-start_Hash.get("tDBInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'USER_Master': " + count_USER_Master_tMap_1 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
			}
			conn_tDBOutput_1.commit();
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_1 = 0;
			}
			commitCounter_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_1 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_1)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"USER_Master");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Done.") );

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_1", end_Hash.get("tDBOutput_1")-start_Hash.get("tDBOutput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_1.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
            log.error("tDBOutput_1 - "  + (errorMessage_tDBOutput_1) );
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final User_Inbound User_InboundClass = new User_Inbound();

        int exitCode = User_InboundClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'User_Inbound' - Done.");
	        }

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
    	    }
        	log.info("TalendJob: 'User_Inbound' - Start.");
    	
    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = User_Inbound.class.getClassLoader().getResourceAsStream("sus_sli_etl/user_inbound_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = User_Inbound.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("opco", "id_String");
                        if(context.getStringValue("opco") == null) {
                            context.opco = null;
                        } else {
                            context.opco=(String) context.getProperty("opco");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("sopco", "id_String");
                        if(context.getStringValue("sopco") == null) {
                            context.sopco = null;
                        } else {
                            context.sopco=(String) context.getProperty("sopco");
                        }
                        context.setContextType("svop", "id_String");
                        if(context.getStringValue("svop") == null) {
                            context.svop = null;
                        } else {
                            context.svop=(String) context.getProperty("svop");
                        }
                        context.setContextType("GIM_AdditionalParams", "id_String");
                        if(context.getStringValue("GIM_AdditionalParams") == null) {
                            context.GIM_AdditionalParams = null;
                        } else {
                            context.GIM_AdditionalParams=(String) context.getProperty("GIM_AdditionalParams");
                        }
                        context.setContextType("GIM_Database", "id_String");
                        if(context.getStringValue("GIM_Database") == null) {
                            context.GIM_Database = null;
                        } else {
                            context.GIM_Database=(String) context.getProperty("GIM_Database");
                        }
                        context.setContextType("GIM_Login", "id_String");
                        if(context.getStringValue("GIM_Login") == null) {
                            context.GIM_Login = null;
                        } else {
                            context.GIM_Login=(String) context.getProperty("GIM_Login");
                        }
                        context.setContextType("GIM_Password", "id_Password");
                        if(context.getStringValue("GIM_Password") == null) {
                            context.GIM_Password = null;
                        } else {
                            String pwd_GIM_Password_value = context.getProperty("GIM_Password");
                            context.GIM_Password = null;
                            if(pwd_GIM_Password_value!=null) {
                                if(context_param.containsKey("GIM_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.GIM_Password = pwd_GIM_Password_value;
                                } else if (!pwd_GIM_Password_value.isEmpty()) {
                                    try {
                                        context.GIM_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_GIM_Password_value);
                                        context.put("GIM_Password",context.GIM_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("GIM_Port", "id_String");
                        if(context.getStringValue("GIM_Port") == null) {
                            context.GIM_Port = null;
                        } else {
                            context.GIM_Port=(String) context.getProperty("GIM_Port");
                        }
                        context.setContextType("GIM_Schema_Migrating_Test", "id_String");
                        if(context.getStringValue("GIM_Schema_Migrating_Test") == null) {
                            context.GIM_Schema_Migrating_Test = null;
                        } else {
                            context.GIM_Schema_Migrating_Test=(String) context.getProperty("GIM_Schema_Migrating_Test");
                        }
                        context.setContextType("GIM_Server", "id_String");
                        if(context.getStringValue("GIM_Server") == null) {
                            context.GIM_Server = null;
                        } else {
                            context.GIM_Server=(String) context.getProperty("GIM_Server");
                        }
                        context.setContextType("SUS_Additional_Params", "id_String");
                        if(context.getStringValue("SUS_Additional_Params") == null) {
                            context.SUS_Additional_Params = null;
                        } else {
                            context.SUS_Additional_Params=(String) context.getProperty("SUS_Additional_Params");
                        }
                        context.setContextType("SUS_Database", "id_String");
                        if(context.getStringValue("SUS_Database") == null) {
                            context.SUS_Database = null;
                        } else {
                            context.SUS_Database=(String) context.getProperty("SUS_Database");
                        }
                        context.setContextType("SUS_Login", "id_String");
                        if(context.getStringValue("SUS_Login") == null) {
                            context.SUS_Login = null;
                        } else {
                            context.SUS_Login=(String) context.getProperty("SUS_Login");
                        }
                        context.setContextType("SUS_Password", "id_Password");
                        if(context.getStringValue("SUS_Password") == null) {
                            context.SUS_Password = null;
                        } else {
                            String pwd_SUS_Password_value = context.getProperty("SUS_Password");
                            context.SUS_Password = null;
                            if(pwd_SUS_Password_value!=null) {
                                if(context_param.containsKey("SUS_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SUS_Password = pwd_SUS_Password_value;
                                } else if (!pwd_SUS_Password_value.isEmpty()) {
                                    try {
                                        context.SUS_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SUS_Password_value);
                                        context.put("SUS_Password",context.SUS_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SUS_Server", "id_String");
                        if(context.getStringValue("SUS_Server") == null) {
                            context.SUS_Server = null;
                        } else {
                            context.SUS_Server=(String) context.getProperty("SUS_Server");
                        }
                        context.setContextType("GIM_Schema_Master", "id_String");
                        if(context.getStringValue("GIM_Schema_Master") == null) {
                            context.GIM_Schema_Master = null;
                        } else {
                            context.GIM_Schema_Master=(String) context.getProperty("GIM_Schema_Master");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("opco")) {
                context.opco = (String) parentContextMap.get("opco");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("sopco")) {
                context.sopco = (String) parentContextMap.get("sopco");
            }if (parentContextMap.containsKey("svop")) {
                context.svop = (String) parentContextMap.get("svop");
            }if (parentContextMap.containsKey("GIM_AdditionalParams")) {
                context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
            }if (parentContextMap.containsKey("GIM_Database")) {
                context.GIM_Database = (String) parentContextMap.get("GIM_Database");
            }if (parentContextMap.containsKey("GIM_Login")) {
                context.GIM_Login = (String) parentContextMap.get("GIM_Login");
            }if (parentContextMap.containsKey("GIM_Password")) {
                context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
            }if (parentContextMap.containsKey("GIM_Port")) {
                context.GIM_Port = (String) parentContextMap.get("GIM_Port");
            }if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
                context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
            }if (parentContextMap.containsKey("GIM_Server")) {
                context.GIM_Server = (String) parentContextMap.get("GIM_Server");
            }if (parentContextMap.containsKey("SUS_Additional_Params")) {
                context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
            }if (parentContextMap.containsKey("SUS_Database")) {
                context.SUS_Database = (String) parentContextMap.get("SUS_Database");
            }if (parentContextMap.containsKey("SUS_Login")) {
                context.SUS_Login = (String) parentContextMap.get("SUS_Login");
            }if (parentContextMap.containsKey("SUS_Password")) {
                context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
            }if (parentContextMap.containsKey("SUS_Server")) {
                context.SUS_Server = (String) parentContextMap.get("SUS_Server");
            }if (parentContextMap.containsKey("GIM_Schema_Master")) {
                context.GIM_Schema_Master = (String) parentContextMap.get("GIM_Schema_Master");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("GIM_Password");
			parametersToEncrypt.add("SUS_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : User_Inbound");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     473767 characters generated by Talend Open Studio for Data Integration 
 *     on the October 28, 2022 at 1:47:47 PM IST
 ************************************************************************************************/