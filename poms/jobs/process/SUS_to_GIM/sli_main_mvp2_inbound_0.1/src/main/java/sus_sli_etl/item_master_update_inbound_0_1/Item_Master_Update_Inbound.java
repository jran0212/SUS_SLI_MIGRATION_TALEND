// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sus_sli_etl.item_master_update_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.CharSetHandling;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Item_Master_Update_Inbound Purpose: Migrating data from USIAJFPF to Item Detail and Item Header<br>
 * Description: Migrating data from USIAJFPF to Item Detail and Item Header <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Item_Master_Update_Inbound implements TalendJob {
	static {System.setProperty("TalendJob.log", "Item_Master_Update_Inbound.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(Item_Master_Update_Inbound.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(opco != null){
				
					this.setProperty("opco", opco.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(sopco != null){
				
					this.setProperty("sopco", sopco.toString());
				
			}
			
			if(svop != null){
				
					this.setProperty("svop", svop.toString());
				
			}
			
			if(GIM_AdditionalParams != null){
				
					this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());
				
			}
			
			if(GIM_Database != null){
				
					this.setProperty("GIM_Database", GIM_Database.toString());
				
			}
			
			if(GIM_Login != null){
				
					this.setProperty("GIM_Login", GIM_Login.toString());
				
			}
			
			if(GIM_Password != null){
				
					this.setProperty("GIM_Password", GIM_Password.toString());
				
			}
			
			if(GIM_Port != null){
				
					this.setProperty("GIM_Port", GIM_Port.toString());
				
			}
			
			if(GIM_Schema_Master != null){
				
					this.setProperty("GIM_Schema_Master", GIM_Schema_Master.toString());
				
			}
			
			if(GIM_Server != null){
				
					this.setProperty("GIM_Server", GIM_Server.toString());
				
			}
			
			if(SUS_Login != null){
				
					this.setProperty("SUS_Login", SUS_Login.toString());
				
			}
			
			if(SUS_Password != null){
				
					this.setProperty("SUS_Password", SUS_Password.toString());
				
			}
			
			if(SUS_Database != null){
				
					this.setProperty("SUS_Database", SUS_Database.toString());
				
			}
			
			if(SUS_Server != null){
				
					this.setProperty("SUS_Server", SUS_Server.toString());
				
			}
			
			if(SUS_Additional_Params != null){
				
					this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String opco;
public String getOpco(){
	return this.opco;
}
public String server;
public String getServer(){
	return this.server;
}
public String sopco;
public String getSopco(){
	return this.sopco;
}
public String svop;
public String getSvop(){
	return this.svop;
}
public String GIM_AdditionalParams;
public String getGIM_AdditionalParams(){
	return this.GIM_AdditionalParams;
}
public String GIM_Database;
public String getGIM_Database(){
	return this.GIM_Database;
}
public String GIM_Login;
public String getGIM_Login(){
	return this.GIM_Login;
}
public java.lang.String GIM_Password;
public java.lang.String getGIM_Password(){
	return this.GIM_Password;
}
public String GIM_Port;
public String getGIM_Port(){
	return this.GIM_Port;
}
public String GIM_Schema_Master;
public String getGIM_Schema_Master(){
	return this.GIM_Schema_Master;
}
public String GIM_Server;
public String getGIM_Server(){
	return this.GIM_Server;
}
public String SUS_Login;
public String getSUS_Login(){
	return this.SUS_Login;
}
public java.lang.String SUS_Password;
public java.lang.String getSUS_Password(){
	return this.SUS_Password;
}
public String SUS_Database;
public String getSUS_Database(){
	return this.SUS_Database;
}
public String SUS_Server;
public String getSUS_Server(){
	return this.SUS_Server;
}
public String SUS_Additional_Params;
public String getSUS_Additional_Params(){
	return this.SUS_Additional_Params;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Item_Master_Update_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_4RzjQPbQEeyGXci4tcuu9w", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_4RzjQPbQEeyGXci4tcuu9w", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Item_Master_Update_Inbound.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Item_Master_Update_Inbound.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Starting the Migrating Data from USIAJFPF to ITEM_DETAIL and ITEM_HEADER...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class ITEM_DETAILStruct implements routines.system.IPersistableRow<ITEM_DETAILStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String ITEM_NO;

				public String getITEM_NO () {
					return this.ITEM_NO;
				}
				
			    public BigDecimal EXTERNAL_UPC;

				public BigDecimal getEXTERNAL_UPC () {
					return this.EXTERNAL_UPC;
				}
				
			    public String BUYER_NO;

				public String getBUYER_NO () {
					return this.BUYER_NO;
				}
				
			    public String ITEM_STATUS;

				public String getITEM_STATUS () {
					return this.ITEM_STATUS;
				}
				
			    public BigDecimal UNITS_PER_CASE;

				public BigDecimal getUNITS_PER_CASE () {
					return this.UNITS_PER_CASE;
				}
				
			    public String ITEM_HAZARD_CODE;

				public String getITEM_HAZARD_CODE () {
					return this.ITEM_HAZARD_CODE;
				}
				
			    public String PROPRIETARY_ITEM;

				public String getPROPRIETARY_ITEM () {
					return this.PROPRIETARY_ITEM;
				}
				
			    public String DEMAND_STATUS;

				public String getDEMAND_STATUS () {
					return this.DEMAND_STATUS;
				}
				
			    public boolean IS_DELETED;

				public boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public String JFPF_SVOP;

				public String getJFPF_SVOP () {
					return this.JFPF_SVOP;
				}
				
			    public BigDecimal INTERNAL_UPC;

				public BigDecimal getINTERNAL_UPC () {
					return this.INTERNAL_UPC;
				}
				
			    public BigDecimal CUBE;

				public BigDecimal getCUBE () {
					return this.CUBE;
				}
				
			    public String CONTAINER;

				public String getCONTAINER () {
					return this.CONTAINER;
				}
				
			    public String ITEM_CATCH_WEIGHT_IND;

				public String getITEM_CATCH_WEIGHT_IND () {
					return this.ITEM_CATCH_WEIGHT_IND;
				}
				
			    public BigDecimal ITEM_GROSS_WEIGHT;

				public BigDecimal getITEM_GROSS_WEIGHT () {
					return this.ITEM_GROSS_WEIGHT;
				}
				
			    public String SPECIALTY_GROUP_CODE;

				public String getSPECIALTY_GROUP_CODE () {
					return this.SPECIALTY_GROUP_CODE;
				}
				
			    public String ITEM_STORAGE;

				public String getITEM_STORAGE () {
					return this.ITEM_STORAGE;
				}
				
			    public String REPACK_ITEM;

				public String getREPACK_ITEM () {
					return this.REPACK_ITEM;
				}
				
			    public String DISPENSER_EQUIPMENT_ITEM;

				public String getDISPENSER_EQUIPMENT_ITEM () {
					return this.DISPENSER_EQUIPMENT_ITEM;
				}
				
			    public String EQUIPMENT_TYPE;

				public String getEQUIPMENT_TYPE () {
					return this.EQUIPMENT_TYPE;
				}
				
			    public String ITEM_IMPORT_FLAG;

				public String getITEM_IMPORT_FLAG () {
					return this.ITEM_IMPORT_FLAG;
				}
				
			    public String DISPENSABLE_ITEM_FLAG;

				public String getDISPENSABLE_ITEM_FLAG () {
					return this.DISPENSABLE_ITEM_FLAG;
				}
				
			    public java.util.Date STATUS_EFFECTIVE_DATE;

				public java.util.Date getSTATUS_EFFECTIVE_DATE () {
					return this.STATUS_EFFECTIVE_DATE;
				}
				
			    public String STOCK_TYPE;

				public String getSTOCK_TYPE () {
					return this.STOCK_TYPE;
				}
				
			    public BigDecimal MASTER_CASE;

				public BigDecimal getMASTER_CASE () {
					return this.MASTER_CASE;
				}
				
			    public BigDecimal PICK_UP_WINDOW;

				public BigDecimal getPICK_UP_WINDOW () {
					return this.PICK_UP_WINDOW;
				}
				
			    public BigDecimal CREDIT_WINDOW;

				public BigDecimal getCREDIT_WINDOW () {
					return this.CREDIT_WINDOW;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.ITEM_NO == null) ? 0 : this.ITEM_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ITEM_DETAILStruct other = (ITEM_DETAILStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.ITEM_NO == null) {
							if (other.ITEM_NO != null)
								return false;
						
						} else if (!this.ITEM_NO.equals(other.ITEM_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ITEM_DETAILStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.ITEM_NO = this.ITEM_NO;
	            other.EXTERNAL_UPC = this.EXTERNAL_UPC;
	            other.BUYER_NO = this.BUYER_NO;
	            other.ITEM_STATUS = this.ITEM_STATUS;
	            other.UNITS_PER_CASE = this.UNITS_PER_CASE;
	            other.ITEM_HAZARD_CODE = this.ITEM_HAZARD_CODE;
	            other.PROPRIETARY_ITEM = this.PROPRIETARY_ITEM;
	            other.DEMAND_STATUS = this.DEMAND_STATUS;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.JFPF_SVOP = this.JFPF_SVOP;
	            other.INTERNAL_UPC = this.INTERNAL_UPC;
	            other.CUBE = this.CUBE;
	            other.CONTAINER = this.CONTAINER;
	            other.ITEM_CATCH_WEIGHT_IND = this.ITEM_CATCH_WEIGHT_IND;
	            other.ITEM_GROSS_WEIGHT = this.ITEM_GROSS_WEIGHT;
	            other.SPECIALTY_GROUP_CODE = this.SPECIALTY_GROUP_CODE;
	            other.ITEM_STORAGE = this.ITEM_STORAGE;
	            other.REPACK_ITEM = this.REPACK_ITEM;
	            other.DISPENSER_EQUIPMENT_ITEM = this.DISPENSER_EQUIPMENT_ITEM;
	            other.EQUIPMENT_TYPE = this.EQUIPMENT_TYPE;
	            other.ITEM_IMPORT_FLAG = this.ITEM_IMPORT_FLAG;
	            other.DISPENSABLE_ITEM_FLAG = this.DISPENSABLE_ITEM_FLAG;
	            other.STATUS_EFFECTIVE_DATE = this.STATUS_EFFECTIVE_DATE;
	            other.STOCK_TYPE = this.STOCK_TYPE;
	            other.MASTER_CASE = this.MASTER_CASE;
	            other.PICK_UP_WINDOW = this.PICK_UP_WINDOW;
	            other.CREDIT_WINDOW = this.CREDIT_WINDOW;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            
	}

	public void copyKeysDataTo(ITEM_DETAILStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.ITEM_NO = this.ITEM_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
						this.EXTERNAL_UPC = (BigDecimal) dis.readObject();
					
					this.BUYER_NO = readString(dis);
					
					this.ITEM_STATUS = readString(dis);
					
						this.UNITS_PER_CASE = (BigDecimal) dis.readObject();
					
					this.ITEM_HAZARD_CODE = readString(dis);
					
					this.PROPRIETARY_ITEM = readString(dis);
					
					this.DEMAND_STATUS = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.JFPF_SVOP = readString(dis);
					
						this.INTERNAL_UPC = (BigDecimal) dis.readObject();
					
						this.CUBE = (BigDecimal) dis.readObject();
					
					this.CONTAINER = readString(dis);
					
					this.ITEM_CATCH_WEIGHT_IND = readString(dis);
					
						this.ITEM_GROSS_WEIGHT = (BigDecimal) dis.readObject();
					
					this.SPECIALTY_GROUP_CODE = readString(dis);
					
					this.ITEM_STORAGE = readString(dis);
					
					this.REPACK_ITEM = readString(dis);
					
					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);
					
					this.EQUIPMENT_TYPE = readString(dis);
					
					this.ITEM_IMPORT_FLAG = readString(dis);
					
					this.DISPENSABLE_ITEM_FLAG = readString(dis);
					
					this.STATUS_EFFECTIVE_DATE = readDate(dis);
					
					this.STOCK_TYPE = readString(dis);
					
						this.MASTER_CASE = (BigDecimal) dis.readObject();
					
						this.PICK_UP_WINDOW = (BigDecimal) dis.readObject();
					
						this.CREDIT_WINDOW = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
						this.EXTERNAL_UPC = (BigDecimal) dis.readObject();
					
					this.BUYER_NO = readString(dis);
					
					this.ITEM_STATUS = readString(dis);
					
						this.UNITS_PER_CASE = (BigDecimal) dis.readObject();
					
					this.ITEM_HAZARD_CODE = readString(dis);
					
					this.PROPRIETARY_ITEM = readString(dis);
					
					this.DEMAND_STATUS = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.JFPF_SVOP = readString(dis);
					
						this.INTERNAL_UPC = (BigDecimal) dis.readObject();
					
						this.CUBE = (BigDecimal) dis.readObject();
					
					this.CONTAINER = readString(dis);
					
					this.ITEM_CATCH_WEIGHT_IND = readString(dis);
					
						this.ITEM_GROSS_WEIGHT = (BigDecimal) dis.readObject();
					
					this.SPECIALTY_GROUP_CODE = readString(dis);
					
					this.ITEM_STORAGE = readString(dis);
					
					this.REPACK_ITEM = readString(dis);
					
					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);
					
					this.EQUIPMENT_TYPE = readString(dis);
					
					this.ITEM_IMPORT_FLAG = readString(dis);
					
					this.DISPENSABLE_ITEM_FLAG = readString(dis);
					
					this.STATUS_EFFECTIVE_DATE = readDate(dis);
					
					this.STOCK_TYPE = readString(dis);
					
						this.MASTER_CASE = (BigDecimal) dis.readObject();
					
						this.PICK_UP_WINDOW = (BigDecimal) dis.readObject();
					
						this.CREDIT_WINDOW = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EXTERNAL_UPC);
					
					// String
				
						writeString(this.BUYER_NO,dos);
					
					// String
				
						writeString(this.ITEM_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNITS_PER_CASE);
					
					// String
				
						writeString(this.ITEM_HAZARD_CODE,dos);
					
					// String
				
						writeString(this.PROPRIETARY_ITEM,dos);
					
					// String
				
						writeString(this.DEMAND_STATUS,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.JFPF_SVOP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERNAL_UPC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUBE);
					
					// String
				
						writeString(this.CONTAINER,dos);
					
					// String
				
						writeString(this.ITEM_CATCH_WEIGHT_IND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITEM_GROSS_WEIGHT);
					
					// String
				
						writeString(this.SPECIALTY_GROUP_CODE,dos);
					
					// String
				
						writeString(this.ITEM_STORAGE,dos);
					
					// String
				
						writeString(this.REPACK_ITEM,dos);
					
					// String
				
						writeString(this.DISPENSER_EQUIPMENT_ITEM,dos);
					
					// String
				
						writeString(this.EQUIPMENT_TYPE,dos);
					
					// String
				
						writeString(this.ITEM_IMPORT_FLAG,dos);
					
					// String
				
						writeString(this.DISPENSABLE_ITEM_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.STATUS_EFFECTIVE_DATE,dos);
					
					// String
				
						writeString(this.STOCK_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MASTER_CASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICK_UP_WINDOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CREDIT_WINDOW);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EXTERNAL_UPC);
					
					// String
				
						writeString(this.BUYER_NO,dos);
					
					// String
				
						writeString(this.ITEM_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNITS_PER_CASE);
					
					// String
				
						writeString(this.ITEM_HAZARD_CODE,dos);
					
					// String
				
						writeString(this.PROPRIETARY_ITEM,dos);
					
					// String
				
						writeString(this.DEMAND_STATUS,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.JFPF_SVOP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERNAL_UPC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUBE);
					
					// String
				
						writeString(this.CONTAINER,dos);
					
					// String
				
						writeString(this.ITEM_CATCH_WEIGHT_IND,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ITEM_GROSS_WEIGHT);
					
					// String
				
						writeString(this.SPECIALTY_GROUP_CODE,dos);
					
					// String
				
						writeString(this.ITEM_STORAGE,dos);
					
					// String
				
						writeString(this.REPACK_ITEM,dos);
					
					// String
				
						writeString(this.DISPENSER_EQUIPMENT_ITEM,dos);
					
					// String
				
						writeString(this.EQUIPMENT_TYPE,dos);
					
					// String
				
						writeString(this.ITEM_IMPORT_FLAG,dos);
					
					// String
				
						writeString(this.DISPENSABLE_ITEM_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.STATUS_EFFECTIVE_DATE,dos);
					
					// String
				
						writeString(this.STOCK_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MASTER_CASE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICK_UP_WINDOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CREDIT_WINDOW);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",ITEM_NO="+ITEM_NO);
		sb.append(",EXTERNAL_UPC="+String.valueOf(EXTERNAL_UPC));
		sb.append(",BUYER_NO="+BUYER_NO);
		sb.append(",ITEM_STATUS="+ITEM_STATUS);
		sb.append(",UNITS_PER_CASE="+String.valueOf(UNITS_PER_CASE));
		sb.append(",ITEM_HAZARD_CODE="+ITEM_HAZARD_CODE);
		sb.append(",PROPRIETARY_ITEM="+PROPRIETARY_ITEM);
		sb.append(",DEMAND_STATUS="+DEMAND_STATUS);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",JFPF_SVOP="+JFPF_SVOP);
		sb.append(",INTERNAL_UPC="+String.valueOf(INTERNAL_UPC));
		sb.append(",CUBE="+String.valueOf(CUBE));
		sb.append(",CONTAINER="+CONTAINER);
		sb.append(",ITEM_CATCH_WEIGHT_IND="+ITEM_CATCH_WEIGHT_IND);
		sb.append(",ITEM_GROSS_WEIGHT="+String.valueOf(ITEM_GROSS_WEIGHT));
		sb.append(",SPECIALTY_GROUP_CODE="+SPECIALTY_GROUP_CODE);
		sb.append(",ITEM_STORAGE="+ITEM_STORAGE);
		sb.append(",REPACK_ITEM="+REPACK_ITEM);
		sb.append(",DISPENSER_EQUIPMENT_ITEM="+DISPENSER_EQUIPMENT_ITEM);
		sb.append(",EQUIPMENT_TYPE="+EQUIPMENT_TYPE);
		sb.append(",ITEM_IMPORT_FLAG="+ITEM_IMPORT_FLAG);
		sb.append(",DISPENSABLE_ITEM_FLAG="+DISPENSABLE_ITEM_FLAG);
		sb.append(",STATUS_EFFECTIVE_DATE="+String.valueOf(STATUS_EFFECTIVE_DATE));
		sb.append(",STOCK_TYPE="+STOCK_TYPE);
		sb.append(",MASTER_CASE="+String.valueOf(MASTER_CASE));
		sb.append(",PICK_UP_WINDOW="+String.valueOf(PICK_UP_WINDOW));
		sb.append(",CREDIT_WINDOW="+String.valueOf(CREDIT_WINDOW));
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_NO);
            			}
            		
        			sb.append("|");
        		
        				if(EXTERNAL_UPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EXTERNAL_UPC);
            			}
            		
        			sb.append("|");
        		
        				if(BUYER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUYER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(UNITS_PER_CASE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UNITS_PER_CASE);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_HAZARD_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_HAZARD_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(PROPRIETARY_ITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PROPRIETARY_ITEM);
            			}
            		
        			sb.append("|");
        		
        				if(DEMAND_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEMAND_STATUS);
            			}
            		
        			sb.append("|");
        		
        				sb.append(IS_DELETED);
        			
        			sb.append("|");
        		
        				if(CREATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(JFPF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPF_SVOP);
            			}
            		
        			sb.append("|");
        		
        				if(INTERNAL_UPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INTERNAL_UPC);
            			}
            		
        			sb.append("|");
        		
        				if(CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(CONTAINER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONTAINER);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_CATCH_WEIGHT_IND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_CATCH_WEIGHT_IND);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_GROSS_WEIGHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_GROSS_WEIGHT);
            			}
            		
        			sb.append("|");
        		
        				if(SPECIALTY_GROUP_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SPECIALTY_GROUP_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_STORAGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_STORAGE);
            			}
            		
        			sb.append("|");
        		
        				if(REPACK_ITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REPACK_ITEM);
            			}
            		
        			sb.append("|");
        		
        				if(DISPENSER_EQUIPMENT_ITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISPENSER_EQUIPMENT_ITEM);
            			}
            		
        			sb.append("|");
        		
        				if(EQUIPMENT_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EQUIPMENT_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_IMPORT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_IMPORT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(DISPENSABLE_ITEM_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISPENSABLE_ITEM_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(STATUS_EFFECTIVE_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STATUS_EFFECTIVE_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(STOCK_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOCK_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(MASTER_CASE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MASTER_CASE);
            			}
            		
        			sb.append("|");
        		
        				if(PICK_UP_WINDOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PICK_UP_WINDOW);
            			}
            		
        			sb.append("|");
        		
        				if(CREDIT_WINDOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREDIT_WINDOW);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(IS_ACTIVE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_ACTIVE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(ITEM_DETAILStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ITEM_NO, other.ITEM_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ITEM_HEADERStruct implements routines.system.IPersistableRow<ITEM_HEADERStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ITEM_NO;

				public String getITEM_NO () {
					return this.ITEM_NO;
				}
				
			    public String PACK;

				public String getPACK () {
					return this.PACK;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String ITEM_DESC;

				public String getITEM_DESC () {
					return this.ITEM_DESC;
				}
				
			    public String MFG_CODE;

				public String getMFG_CODE () {
					return this.MFG_CODE;
				}
				
			    public String ITEM_SIZE;

				public String getITEM_SIZE () {
					return this.ITEM_SIZE;
				}
				
			    public boolean IS_DELETED;

				public boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public String JFPF_SVOP;

				public String getJFPF_SVOP () {
					return this.JFPF_SVOP;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ITEM_NO == null) ? 0 : this.ITEM_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ITEM_HEADERStruct other = (ITEM_HEADERStruct) obj;
		
						if (this.ITEM_NO == null) {
							if (other.ITEM_NO != null)
								return false;
						
						} else if (!this.ITEM_NO.equals(other.ITEM_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ITEM_HEADERStruct other) {

		other.ITEM_NO = this.ITEM_NO;
	            other.PACK = this.PACK;
	            other.BRAND = this.BRAND;
	            other.ITEM_DESC = this.ITEM_DESC;
	            other.MFG_CODE = this.MFG_CODE;
	            other.ITEM_SIZE = this.ITEM_SIZE;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.JFPF_SVOP = this.JFPF_SVOP;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            
	}

	public void copyKeysDataTo(ITEM_HEADERStruct other) {

		other.ITEM_NO = this.ITEM_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.ITEM_NO = readString(dis);
					
					this.PACK = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.ITEM_DESC = readString(dis);
					
					this.MFG_CODE = readString(dis);
					
					this.ITEM_SIZE = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.JFPF_SVOP = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.ITEM_NO = readString(dis);
					
					this.PACK = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.ITEM_DESC = readString(dis);
					
					this.MFG_CODE = readString(dis);
					
					this.ITEM_SIZE = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.JFPF_SVOP = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.PACK,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.ITEM_DESC,dos);
					
					// String
				
						writeString(this.MFG_CODE,dos);
					
					// String
				
						writeString(this.ITEM_SIZE,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.JFPF_SVOP,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.PACK,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.ITEM_DESC,dos);
					
					// String
				
						writeString(this.MFG_CODE,dos);
					
					// String
				
						writeString(this.ITEM_SIZE,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.JFPF_SVOP,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEM_NO="+ITEM_NO);
		sb.append(",PACK="+PACK);
		sb.append(",BRAND="+BRAND);
		sb.append(",ITEM_DESC="+ITEM_DESC);
		sb.append(",MFG_CODE="+MFG_CODE);
		sb.append(",ITEM_SIZE="+ITEM_SIZE);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",JFPF_SVOP="+JFPF_SVOP);
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ITEM_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PACK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PACK);
            			}
            		
        			sb.append("|");
        		
        				if(BRAND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BRAND);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_DESC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_DESC);
            			}
            		
        			sb.append("|");
        		
        				if(MFG_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MFG_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_SIZE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_SIZE);
            			}
            		
        			sb.append("|");
        		
        				sb.append(IS_DELETED);
        			
        			sb.append("|");
        		
        				if(CREATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(JFPF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPF_SVOP);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(IS_ACTIVE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_ACTIVE);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(ITEM_HEADERStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ITEM_NO, other.ITEM_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public String JFITEM;

				public String getJFITEM () {
					return this.JFITEM;
				}
				
			    public String JFVNBR;

				public String getJFVNBR () {
					return this.JFVNBR;
				}
				
			    public String JFPACK;

				public String getJFPACK () {
					return this.JFPACK;
				}
				
			    public String JFBRND;

				public String getJFBRND () {
					return this.JFBRND;
				}
				
			    public String JFITDS;

				public String getJFITDS () {
					return this.JFITDS;
				}
				
			    public String JFIEDS;

				public String getJFIEDS () {
					return this.JFIEDS;
				}
				
			    public String JFMNPC;

				public String getJFMNPC () {
					return this.JFMNPC;
				}
				
			    public BigDecimal JFEUPC;

				public BigDecimal getJFEUPC () {
					return this.JFEUPC;
				}
				
			    public BigDecimal JFIUPC;

				public BigDecimal getJFIUPC () {
					return this.JFIUPC;
				}
				
			    public String JFBUYR;

				public String getJFBUYR () {
					return this.JFBUYR;
				}
				
			    public String JFITST;

				public String getJFITST () {
					return this.JFITST;
				}
				
			    public String JFITTY;

				public String getJFITTY () {
					return this.JFITTY;
				}
				
			    public BigDecimal JFCUBE;

				public BigDecimal getJFCUBE () {
					return this.JFCUBE;
				}
				
			    public String JFCOTR;

				public String getJFCOTR () {
					return this.JFCOTR;
				}
				
			    public BigDecimal JFPRTN;

				public BigDecimal getJFPRTN () {
					return this.JFPRTN;
				}
				
			    public String JFPOSZ;

				public String getJFPOSZ () {
					return this.JFPOSZ;
				}
				
			    public BigDecimal JFUNCA;

				public BigDecimal getJFUNCA () {
					return this.JFUNCA;
				}
				
			    public BigDecimal JFMISP;

				public BigDecimal getJFMISP () {
					return this.JFMISP;
				}
				
			    public BigDecimal JFSUCA;

				public BigDecimal getJFSUCA () {
					return this.JFSUCA;
				}
				
			    public BigDecimal JFPBMJ;

				public BigDecimal getJFPBMJ () {
					return this.JFPBMJ;
				}
				
			    public BigDecimal JFPBNT;

				public BigDecimal getJFPBNT () {
					return this.JFPBNT;
				}
				
			    public BigDecimal JFPBMN;

				public BigDecimal getJFPBMN () {
					return this.JFPBMN;
				}
				
			    public BigDecimal JFLCCT;

				public BigDecimal getJFLCCT () {
					return this.JFLCCT;
				}
				
			    public BigDecimal JFLCMC;

				public BigDecimal getJFLCMC () {
					return this.JFLCMC;
				}
				
			    public BigDecimal JFLCIN;

				public BigDecimal getJFLCIN () {
					return this.JFLCIN;
				}
				
			    public BigDecimal JFLCMN;

				public BigDecimal getJFLCMN () {
					return this.JFLCMN;
				}
				
			    public String JFITSZ;

				public String getJFITSZ () {
					return this.JFITSZ;
				}
				
			    public String JFITCI;

				public String getJFITCI () {
					return this.JFITCI;
				}
				
			    public BigDecimal JFITNW;

				public BigDecimal getJFITNW () {
					return this.JFITNW;
				}
				
			    public BigDecimal JFITTW;

				public BigDecimal getJFITTW () {
					return this.JFITTW;
				}
				
			    public BigDecimal JFITGW;

				public BigDecimal getJFITGW () {
					return this.JFITGW;
				}
				
			    public String JFITHZ;

				public String getJFITHZ () {
					return this.JFITHZ;
				}
				
			    public String JFITPR;

				public String getJFITPR () {
					return this.JFITPR;
				}
				
			    public String JFITCO;

				public String getJFITCO () {
					return this.JFITCO;
				}
				
			    public String JFITSP;

				public String getJFITSP () {
					return this.JFITSP;
				}
				
			    public String JFITKO;

				public String getJFITKO () {
					return this.JFITKO;
				}
				
			    public String JFITSG;

				public String getJFITSG () {
					return this.JFITSG;
				}
				
			    public String JFCHNU;

				public String getJFCHNU () {
					return this.JFCHNU;
				}
				
			    public String JFITRP;

				public String getJFITRP () {
					return this.JFITRP;
				}
				
			    public String JFITKT;

				public String getJFITKT () {
					return this.JFITKT;
				}
				
			    public String JFITDE;

				public String getJFITDE () {
					return this.JFITDE;
				}
				
			    public String JFEQTP;

				public String getJFEQTP () {
					return this.JFEQTP;
				}
				
			    public String JFIMIN;

				public String getJFIMIN () {
					return this.JFIMIN;
				}
				
			    public String JFDSPI;

				public String getJFDSPI () {
					return this.JFDSPI;
				}
				
			    public BigDecimal JFSEDT;

				public BigDecimal getJFSEDT () {
					return this.JFSEDT;
				}
				
			    public String JFSTKT;

				public String getJFSTKT () {
					return this.JFSTKT;
				}
				
			    public String JFDRPI;

				public String getJFDRPI () {
					return this.JFDRPI;
				}
				
			    public String JFDMST;

				public String getJFDMST () {
					return this.JFDMST;
				}
				
			    public String JFCPVN;

				public String getJFCPVN () {
					return this.JFCPVN;
				}
				
			    public String JFSPIT;

				public String getJFSPIT () {
					return this.JFSPIT;
				}
				
			    public String JFTMIT;

				public String getJFTMIT () {
					return this.JFTMIT;
				}
				
			    public String JFDSIF;

				public String getJFDSIF () {
					return this.JFDSIF;
				}
				
			    public String JFMLTV;

				public String getJFMLTV () {
					return this.JFMLTV;
				}
				
			    public BigDecimal JFADCD;

				public BigDecimal getJFADCD () {
					return this.JFADCD;
				}
				
			    public String JFSTIC;

				public String getJFSTIC () {
					return this.JFSTIC;
				}
				
			    public BigDecimal JFMRCA;

				public BigDecimal getJFMRCA () {
					return this.JFMRCA;
				}
				
			    public String JFMNII;

				public String getJFMNII () {
					return this.JFMNII;
				}
				
			    public String JFTITM;

				public String getJFTITM () {
					return this.JFTITM;
				}
				
			    public String JFSHSP;

				public String getJFSHSP () {
					return this.JFSHSP;
				}
				
			    public BigDecimal JFPUWN;

				public BigDecimal getJFPUWN () {
					return this.JFPUWN;
				}
				
			    public BigDecimal JFCRWN;

				public BigDecimal getJFCRWN () {
					return this.JFCRWN;
				}
				
			    public String JFCSCN;

				public String getJFCSCN () {
					return this.JFCSCN;
				}
				
			    public BigDecimal JFNUT;

				public BigDecimal getJFNUT () {
					return this.JFNUT;
				}
				
			    public String JFPRVS;

				public String getJFPRVS () {
					return this.JFPRVS;
				}
				
			    public BigDecimal JFREDT;

				public BigDecimal getJFREDT () {
					return this.JFREDT;
				}
				
			    public String JFRQCF;

				public String getJFRQCF () {
					return this.JFRQCF;
				}
				
			    public String JFNHZF;

				public String getJFNHZF () {
					return this.JFNHZF;
				}
				
			    public String JFRIST;

				public String getJFRIST () {
					return this.JFRIST;
				}
				
			    public String JFNCTN;

				public String getJFNCTN () {
					return this.JFNCTN;
				}
				
			    public String JFSCTC;

				public String getJFSCTC () {
					return this.JFSCTC;
				}
				
			    public String JFCATY;

				public String getJFCATY () {
					return this.JFCATY;
				}
				
			    public String JFCTST;

				public String getJFCTST () {
					return this.JFCTST;
				}
				
			    public String JFPPGM;

				public String getJFPPGM () {
					return this.JFPPGM;
				}
				
			    public BigDecimal JFEADT;

				public BigDecimal getJFEADT () {
					return this.JFEADT;
				}
				
			    public BigDecimal JFEATM;

				public BigDecimal getJFEATM () {
					return this.JFEATM;
				}
				
			    public String JFEAID;

				public String getJFEAID () {
					return this.JFEAID;
				}
				
			    public BigDecimal JFMODT;

				public BigDecimal getJFMODT () {
					return this.JFMODT;
				}
				
			    public BigDecimal JFMOTM;

				public BigDecimal getJFMOTM () {
					return this.JFMOTM;
				}
				
			    public String JFMOID;

				public String getJFMOID () {
					return this.JFMOID;
				}
				
			    public String JFMOPG;

				public String getJFMOPG () {
					return this.JFMOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.JFITEM = readString(dis);
					
					this.JFVNBR = readString(dis);
					
					this.JFPACK = readString(dis);
					
					this.JFBRND = readString(dis);
					
					this.JFITDS = readString(dis);
					
					this.JFIEDS = readString(dis);
					
					this.JFMNPC = readString(dis);
					
						this.JFEUPC = (BigDecimal) dis.readObject();
					
						this.JFIUPC = (BigDecimal) dis.readObject();
					
					this.JFBUYR = readString(dis);
					
					this.JFITST = readString(dis);
					
					this.JFITTY = readString(dis);
					
						this.JFCUBE = (BigDecimal) dis.readObject();
					
					this.JFCOTR = readString(dis);
					
						this.JFPRTN = (BigDecimal) dis.readObject();
					
					this.JFPOSZ = readString(dis);
					
						this.JFUNCA = (BigDecimal) dis.readObject();
					
						this.JFMISP = (BigDecimal) dis.readObject();
					
						this.JFSUCA = (BigDecimal) dis.readObject();
					
						this.JFPBMJ = (BigDecimal) dis.readObject();
					
						this.JFPBNT = (BigDecimal) dis.readObject();
					
						this.JFPBMN = (BigDecimal) dis.readObject();
					
						this.JFLCCT = (BigDecimal) dis.readObject();
					
						this.JFLCMC = (BigDecimal) dis.readObject();
					
						this.JFLCIN = (BigDecimal) dis.readObject();
					
						this.JFLCMN = (BigDecimal) dis.readObject();
					
					this.JFITSZ = readString(dis);
					
					this.JFITCI = readString(dis);
					
						this.JFITNW = (BigDecimal) dis.readObject();
					
						this.JFITTW = (BigDecimal) dis.readObject();
					
						this.JFITGW = (BigDecimal) dis.readObject();
					
					this.JFITHZ = readString(dis);
					
					this.JFITPR = readString(dis);
					
					this.JFITCO = readString(dis);
					
					this.JFITSP = readString(dis);
					
					this.JFITKO = readString(dis);
					
					this.JFITSG = readString(dis);
					
					this.JFCHNU = readString(dis);
					
					this.JFITRP = readString(dis);
					
					this.JFITKT = readString(dis);
					
					this.JFITDE = readString(dis);
					
					this.JFEQTP = readString(dis);
					
					this.JFIMIN = readString(dis);
					
					this.JFDSPI = readString(dis);
					
						this.JFSEDT = (BigDecimal) dis.readObject();
					
					this.JFSTKT = readString(dis);
					
					this.JFDRPI = readString(dis);
					
					this.JFDMST = readString(dis);
					
					this.JFCPVN = readString(dis);
					
					this.JFSPIT = readString(dis);
					
					this.JFTMIT = readString(dis);
					
					this.JFDSIF = readString(dis);
					
					this.JFMLTV = readString(dis);
					
						this.JFADCD = (BigDecimal) dis.readObject();
					
					this.JFSTIC = readString(dis);
					
						this.JFMRCA = (BigDecimal) dis.readObject();
					
					this.JFMNII = readString(dis);
					
					this.JFTITM = readString(dis);
					
					this.JFSHSP = readString(dis);
					
						this.JFPUWN = (BigDecimal) dis.readObject();
					
						this.JFCRWN = (BigDecimal) dis.readObject();
					
					this.JFCSCN = readString(dis);
					
						this.JFNUT = (BigDecimal) dis.readObject();
					
					this.JFPRVS = readString(dis);
					
						this.JFREDT = (BigDecimal) dis.readObject();
					
					this.JFRQCF = readString(dis);
					
					this.JFNHZF = readString(dis);
					
					this.JFRIST = readString(dis);
					
					this.JFNCTN = readString(dis);
					
					this.JFSCTC = readString(dis);
					
					this.JFCATY = readString(dis);
					
					this.JFCTST = readString(dis);
					
					this.JFPPGM = readString(dis);
					
						this.JFEADT = (BigDecimal) dis.readObject();
					
						this.JFEATM = (BigDecimal) dis.readObject();
					
					this.JFEAID = readString(dis);
					
						this.JFMODT = (BigDecimal) dis.readObject();
					
						this.JFMOTM = (BigDecimal) dis.readObject();
					
					this.JFMOID = readString(dis);
					
					this.JFMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.JFITEM = readString(dis);
					
					this.JFVNBR = readString(dis);
					
					this.JFPACK = readString(dis);
					
					this.JFBRND = readString(dis);
					
					this.JFITDS = readString(dis);
					
					this.JFIEDS = readString(dis);
					
					this.JFMNPC = readString(dis);
					
						this.JFEUPC = (BigDecimal) dis.readObject();
					
						this.JFIUPC = (BigDecimal) dis.readObject();
					
					this.JFBUYR = readString(dis);
					
					this.JFITST = readString(dis);
					
					this.JFITTY = readString(dis);
					
						this.JFCUBE = (BigDecimal) dis.readObject();
					
					this.JFCOTR = readString(dis);
					
						this.JFPRTN = (BigDecimal) dis.readObject();
					
					this.JFPOSZ = readString(dis);
					
						this.JFUNCA = (BigDecimal) dis.readObject();
					
						this.JFMISP = (BigDecimal) dis.readObject();
					
						this.JFSUCA = (BigDecimal) dis.readObject();
					
						this.JFPBMJ = (BigDecimal) dis.readObject();
					
						this.JFPBNT = (BigDecimal) dis.readObject();
					
						this.JFPBMN = (BigDecimal) dis.readObject();
					
						this.JFLCCT = (BigDecimal) dis.readObject();
					
						this.JFLCMC = (BigDecimal) dis.readObject();
					
						this.JFLCIN = (BigDecimal) dis.readObject();
					
						this.JFLCMN = (BigDecimal) dis.readObject();
					
					this.JFITSZ = readString(dis);
					
					this.JFITCI = readString(dis);
					
						this.JFITNW = (BigDecimal) dis.readObject();
					
						this.JFITTW = (BigDecimal) dis.readObject();
					
						this.JFITGW = (BigDecimal) dis.readObject();
					
					this.JFITHZ = readString(dis);
					
					this.JFITPR = readString(dis);
					
					this.JFITCO = readString(dis);
					
					this.JFITSP = readString(dis);
					
					this.JFITKO = readString(dis);
					
					this.JFITSG = readString(dis);
					
					this.JFCHNU = readString(dis);
					
					this.JFITRP = readString(dis);
					
					this.JFITKT = readString(dis);
					
					this.JFITDE = readString(dis);
					
					this.JFEQTP = readString(dis);
					
					this.JFIMIN = readString(dis);
					
					this.JFDSPI = readString(dis);
					
						this.JFSEDT = (BigDecimal) dis.readObject();
					
					this.JFSTKT = readString(dis);
					
					this.JFDRPI = readString(dis);
					
					this.JFDMST = readString(dis);
					
					this.JFCPVN = readString(dis);
					
					this.JFSPIT = readString(dis);
					
					this.JFTMIT = readString(dis);
					
					this.JFDSIF = readString(dis);
					
					this.JFMLTV = readString(dis);
					
						this.JFADCD = (BigDecimal) dis.readObject();
					
					this.JFSTIC = readString(dis);
					
						this.JFMRCA = (BigDecimal) dis.readObject();
					
					this.JFMNII = readString(dis);
					
					this.JFTITM = readString(dis);
					
					this.JFSHSP = readString(dis);
					
						this.JFPUWN = (BigDecimal) dis.readObject();
					
						this.JFCRWN = (BigDecimal) dis.readObject();
					
					this.JFCSCN = readString(dis);
					
						this.JFNUT = (BigDecimal) dis.readObject();
					
					this.JFPRVS = readString(dis);
					
						this.JFREDT = (BigDecimal) dis.readObject();
					
					this.JFRQCF = readString(dis);
					
					this.JFNHZF = readString(dis);
					
					this.JFRIST = readString(dis);
					
					this.JFNCTN = readString(dis);
					
					this.JFSCTC = readString(dis);
					
					this.JFCATY = readString(dis);
					
					this.JFCTST = readString(dis);
					
					this.JFPPGM = readString(dis);
					
						this.JFEADT = (BigDecimal) dis.readObject();
					
						this.JFEATM = (BigDecimal) dis.readObject();
					
					this.JFEAID = readString(dis);
					
						this.JFMODT = (BigDecimal) dis.readObject();
					
						this.JFMOTM = (BigDecimal) dis.readObject();
					
					this.JFMOID = readString(dis);
					
					this.JFMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.JFITEM,dos);
					
					// String
				
						writeString(this.JFVNBR,dos);
					
					// String
				
						writeString(this.JFPACK,dos);
					
					// String
				
						writeString(this.JFBRND,dos);
					
					// String
				
						writeString(this.JFITDS,dos);
					
					// String
				
						writeString(this.JFIEDS,dos);
					
					// String
				
						writeString(this.JFMNPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFEUPC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFIUPC);
					
					// String
				
						writeString(this.JFBUYR,dos);
					
					// String
				
						writeString(this.JFITST,dos);
					
					// String
				
						writeString(this.JFITTY,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFCUBE);
					
					// String
				
						writeString(this.JFCOTR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPRTN);
					
					// String
				
						writeString(this.JFPOSZ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFUNCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFMISP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFSUCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPBMJ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPBNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPBMN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFLCCT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFLCMC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFLCIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFLCMN);
					
					// String
				
						writeString(this.JFITSZ,dos);
					
					// String
				
						writeString(this.JFITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFITNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFITTW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFITGW);
					
					// String
				
						writeString(this.JFITHZ,dos);
					
					// String
				
						writeString(this.JFITPR,dos);
					
					// String
				
						writeString(this.JFITCO,dos);
					
					// String
				
						writeString(this.JFITSP,dos);
					
					// String
				
						writeString(this.JFITKO,dos);
					
					// String
				
						writeString(this.JFITSG,dos);
					
					// String
				
						writeString(this.JFCHNU,dos);
					
					// String
				
						writeString(this.JFITRP,dos);
					
					// String
				
						writeString(this.JFITKT,dos);
					
					// String
				
						writeString(this.JFITDE,dos);
					
					// String
				
						writeString(this.JFEQTP,dos);
					
					// String
				
						writeString(this.JFIMIN,dos);
					
					// String
				
						writeString(this.JFDSPI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFSEDT);
					
					// String
				
						writeString(this.JFSTKT,dos);
					
					// String
				
						writeString(this.JFDRPI,dos);
					
					// String
				
						writeString(this.JFDMST,dos);
					
					// String
				
						writeString(this.JFCPVN,dos);
					
					// String
				
						writeString(this.JFSPIT,dos);
					
					// String
				
						writeString(this.JFTMIT,dos);
					
					// String
				
						writeString(this.JFDSIF,dos);
					
					// String
				
						writeString(this.JFMLTV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFADCD);
					
					// String
				
						writeString(this.JFSTIC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFMRCA);
					
					// String
				
						writeString(this.JFMNII,dos);
					
					// String
				
						writeString(this.JFTITM,dos);
					
					// String
				
						writeString(this.JFSHSP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPUWN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFCRWN);
					
					// String
				
						writeString(this.JFCSCN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFNUT);
					
					// String
				
						writeString(this.JFPRVS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFREDT);
					
					// String
				
						writeString(this.JFRQCF,dos);
					
					// String
				
						writeString(this.JFNHZF,dos);
					
					// String
				
						writeString(this.JFRIST,dos);
					
					// String
				
						writeString(this.JFNCTN,dos);
					
					// String
				
						writeString(this.JFSCTC,dos);
					
					// String
				
						writeString(this.JFCATY,dos);
					
					// String
				
						writeString(this.JFCTST,dos);
					
					// String
				
						writeString(this.JFPPGM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFEADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFEATM);
					
					// String
				
						writeString(this.JFEAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFMOTM);
					
					// String
				
						writeString(this.JFMOID,dos);
					
					// String
				
						writeString(this.JFMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.JFITEM,dos);
					
					// String
				
						writeString(this.JFVNBR,dos);
					
					// String
				
						writeString(this.JFPACK,dos);
					
					// String
				
						writeString(this.JFBRND,dos);
					
					// String
				
						writeString(this.JFITDS,dos);
					
					// String
				
						writeString(this.JFIEDS,dos);
					
					// String
				
						writeString(this.JFMNPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFEUPC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFIUPC);
					
					// String
				
						writeString(this.JFBUYR,dos);
					
					// String
				
						writeString(this.JFITST,dos);
					
					// String
				
						writeString(this.JFITTY,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFCUBE);
					
					// String
				
						writeString(this.JFCOTR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPRTN);
					
					// String
				
						writeString(this.JFPOSZ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFUNCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFMISP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFSUCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPBMJ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPBNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPBMN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFLCCT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFLCMC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFLCIN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFLCMN);
					
					// String
				
						writeString(this.JFITSZ,dos);
					
					// String
				
						writeString(this.JFITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFITNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFITTW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFITGW);
					
					// String
				
						writeString(this.JFITHZ,dos);
					
					// String
				
						writeString(this.JFITPR,dos);
					
					// String
				
						writeString(this.JFITCO,dos);
					
					// String
				
						writeString(this.JFITSP,dos);
					
					// String
				
						writeString(this.JFITKO,dos);
					
					// String
				
						writeString(this.JFITSG,dos);
					
					// String
				
						writeString(this.JFCHNU,dos);
					
					// String
				
						writeString(this.JFITRP,dos);
					
					// String
				
						writeString(this.JFITKT,dos);
					
					// String
				
						writeString(this.JFITDE,dos);
					
					// String
				
						writeString(this.JFEQTP,dos);
					
					// String
				
						writeString(this.JFIMIN,dos);
					
					// String
				
						writeString(this.JFDSPI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFSEDT);
					
					// String
				
						writeString(this.JFSTKT,dos);
					
					// String
				
						writeString(this.JFDRPI,dos);
					
					// String
				
						writeString(this.JFDMST,dos);
					
					// String
				
						writeString(this.JFCPVN,dos);
					
					// String
				
						writeString(this.JFSPIT,dos);
					
					// String
				
						writeString(this.JFTMIT,dos);
					
					// String
				
						writeString(this.JFDSIF,dos);
					
					// String
				
						writeString(this.JFMLTV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFADCD);
					
					// String
				
						writeString(this.JFSTIC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFMRCA);
					
					// String
				
						writeString(this.JFMNII,dos);
					
					// String
				
						writeString(this.JFTITM,dos);
					
					// String
				
						writeString(this.JFSHSP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFPUWN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFCRWN);
					
					// String
				
						writeString(this.JFCSCN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFNUT);
					
					// String
				
						writeString(this.JFPRVS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFREDT);
					
					// String
				
						writeString(this.JFRQCF,dos);
					
					// String
				
						writeString(this.JFNHZF,dos);
					
					// String
				
						writeString(this.JFRIST,dos);
					
					// String
				
						writeString(this.JFNCTN,dos);
					
					// String
				
						writeString(this.JFSCTC,dos);
					
					// String
				
						writeString(this.JFCATY,dos);
					
					// String
				
						writeString(this.JFCTST,dos);
					
					// String
				
						writeString(this.JFPPGM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFEADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFEATM);
					
					// String
				
						writeString(this.JFEAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JFMOTM);
					
					// String
				
						writeString(this.JFMOID,dos);
					
					// String
				
						writeString(this.JFMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("JFITEM="+JFITEM);
		sb.append(",JFVNBR="+JFVNBR);
		sb.append(",JFPACK="+JFPACK);
		sb.append(",JFBRND="+JFBRND);
		sb.append(",JFITDS="+JFITDS);
		sb.append(",JFIEDS="+JFIEDS);
		sb.append(",JFMNPC="+JFMNPC);
		sb.append(",JFEUPC="+String.valueOf(JFEUPC));
		sb.append(",JFIUPC="+String.valueOf(JFIUPC));
		sb.append(",JFBUYR="+JFBUYR);
		sb.append(",JFITST="+JFITST);
		sb.append(",JFITTY="+JFITTY);
		sb.append(",JFCUBE="+String.valueOf(JFCUBE));
		sb.append(",JFCOTR="+JFCOTR);
		sb.append(",JFPRTN="+String.valueOf(JFPRTN));
		sb.append(",JFPOSZ="+JFPOSZ);
		sb.append(",JFUNCA="+String.valueOf(JFUNCA));
		sb.append(",JFMISP="+String.valueOf(JFMISP));
		sb.append(",JFSUCA="+String.valueOf(JFSUCA));
		sb.append(",JFPBMJ="+String.valueOf(JFPBMJ));
		sb.append(",JFPBNT="+String.valueOf(JFPBNT));
		sb.append(",JFPBMN="+String.valueOf(JFPBMN));
		sb.append(",JFLCCT="+String.valueOf(JFLCCT));
		sb.append(",JFLCMC="+String.valueOf(JFLCMC));
		sb.append(",JFLCIN="+String.valueOf(JFLCIN));
		sb.append(",JFLCMN="+String.valueOf(JFLCMN));
		sb.append(",JFITSZ="+JFITSZ);
		sb.append(",JFITCI="+JFITCI);
		sb.append(",JFITNW="+String.valueOf(JFITNW));
		sb.append(",JFITTW="+String.valueOf(JFITTW));
		sb.append(",JFITGW="+String.valueOf(JFITGW));
		sb.append(",JFITHZ="+JFITHZ);
		sb.append(",JFITPR="+JFITPR);
		sb.append(",JFITCO="+JFITCO);
		sb.append(",JFITSP="+JFITSP);
		sb.append(",JFITKO="+JFITKO);
		sb.append(",JFITSG="+JFITSG);
		sb.append(",JFCHNU="+JFCHNU);
		sb.append(",JFITRP="+JFITRP);
		sb.append(",JFITKT="+JFITKT);
		sb.append(",JFITDE="+JFITDE);
		sb.append(",JFEQTP="+JFEQTP);
		sb.append(",JFIMIN="+JFIMIN);
		sb.append(",JFDSPI="+JFDSPI);
		sb.append(",JFSEDT="+String.valueOf(JFSEDT));
		sb.append(",JFSTKT="+JFSTKT);
		sb.append(",JFDRPI="+JFDRPI);
		sb.append(",JFDMST="+JFDMST);
		sb.append(",JFCPVN="+JFCPVN);
		sb.append(",JFSPIT="+JFSPIT);
		sb.append(",JFTMIT="+JFTMIT);
		sb.append(",JFDSIF="+JFDSIF);
		sb.append(",JFMLTV="+JFMLTV);
		sb.append(",JFADCD="+String.valueOf(JFADCD));
		sb.append(",JFSTIC="+JFSTIC);
		sb.append(",JFMRCA="+String.valueOf(JFMRCA));
		sb.append(",JFMNII="+JFMNII);
		sb.append(",JFTITM="+JFTITM);
		sb.append(",JFSHSP="+JFSHSP);
		sb.append(",JFPUWN="+String.valueOf(JFPUWN));
		sb.append(",JFCRWN="+String.valueOf(JFCRWN));
		sb.append(",JFCSCN="+JFCSCN);
		sb.append(",JFNUT="+String.valueOf(JFNUT));
		sb.append(",JFPRVS="+JFPRVS);
		sb.append(",JFREDT="+String.valueOf(JFREDT));
		sb.append(",JFRQCF="+JFRQCF);
		sb.append(",JFNHZF="+JFNHZF);
		sb.append(",JFRIST="+JFRIST);
		sb.append(",JFNCTN="+JFNCTN);
		sb.append(",JFSCTC="+JFSCTC);
		sb.append(",JFCATY="+JFCATY);
		sb.append(",JFCTST="+JFCTST);
		sb.append(",JFPPGM="+JFPPGM);
		sb.append(",JFEADT="+String.valueOf(JFEADT));
		sb.append(",JFEATM="+String.valueOf(JFEATM));
		sb.append(",JFEAID="+JFEAID);
		sb.append(",JFMODT="+String.valueOf(JFMODT));
		sb.append(",JFMOTM="+String.valueOf(JFMOTM));
		sb.append(",JFMOID="+JFMOID);
		sb.append(",JFMOPG="+JFMOPG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(JFITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITEM);
            			}
            		
        			sb.append("|");
        		
        				if(JFVNBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFVNBR);
            			}
            		
        			sb.append("|");
        		
        				if(JFPACK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPACK);
            			}
            		
        			sb.append("|");
        		
        				if(JFBRND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFBRND);
            			}
            		
        			sb.append("|");
        		
        				if(JFITDS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITDS);
            			}
            		
        			sb.append("|");
        		
        				if(JFIEDS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFIEDS);
            			}
            		
        			sb.append("|");
        		
        				if(JFMNPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMNPC);
            			}
            		
        			sb.append("|");
        		
        				if(JFEUPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFEUPC);
            			}
            		
        			sb.append("|");
        		
        				if(JFIUPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFIUPC);
            			}
            		
        			sb.append("|");
        		
        				if(JFBUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFBUYR);
            			}
            		
        			sb.append("|");
        		
        				if(JFITST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITST);
            			}
            		
        			sb.append("|");
        		
        				if(JFITTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITTY);
            			}
            		
        			sb.append("|");
        		
        				if(JFCUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFCUBE);
            			}
            		
        			sb.append("|");
        		
        				if(JFCOTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFCOTR);
            			}
            		
        			sb.append("|");
        		
        				if(JFPRTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPRTN);
            			}
            		
        			sb.append("|");
        		
        				if(JFPOSZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPOSZ);
            			}
            		
        			sb.append("|");
        		
        				if(JFUNCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFUNCA);
            			}
            		
        			sb.append("|");
        		
        				if(JFMISP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMISP);
            			}
            		
        			sb.append("|");
        		
        				if(JFSUCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFSUCA);
            			}
            		
        			sb.append("|");
        		
        				if(JFPBMJ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPBMJ);
            			}
            		
        			sb.append("|");
        		
        				if(JFPBNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPBNT);
            			}
            		
        			sb.append("|");
        		
        				if(JFPBMN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPBMN);
            			}
            		
        			sb.append("|");
        		
        				if(JFLCCT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFLCCT);
            			}
            		
        			sb.append("|");
        		
        				if(JFLCMC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFLCMC);
            			}
            		
        			sb.append("|");
        		
        				if(JFLCIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFLCIN);
            			}
            		
        			sb.append("|");
        		
        				if(JFLCMN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFLCMN);
            			}
            		
        			sb.append("|");
        		
        				if(JFITSZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITSZ);
            			}
            		
        			sb.append("|");
        		
        				if(JFITCI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITCI);
            			}
            		
        			sb.append("|");
        		
        				if(JFITNW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITNW);
            			}
            		
        			sb.append("|");
        		
        				if(JFITTW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITTW);
            			}
            		
        			sb.append("|");
        		
        				if(JFITGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITGW);
            			}
            		
        			sb.append("|");
        		
        				if(JFITHZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITHZ);
            			}
            		
        			sb.append("|");
        		
        				if(JFITPR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITPR);
            			}
            		
        			sb.append("|");
        		
        				if(JFITCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITCO);
            			}
            		
        			sb.append("|");
        		
        				if(JFITSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITSP);
            			}
            		
        			sb.append("|");
        		
        				if(JFITKO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITKO);
            			}
            		
        			sb.append("|");
        		
        				if(JFITSG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITSG);
            			}
            		
        			sb.append("|");
        		
        				if(JFCHNU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFCHNU);
            			}
            		
        			sb.append("|");
        		
        				if(JFITRP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITRP);
            			}
            		
        			sb.append("|");
        		
        				if(JFITKT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITKT);
            			}
            		
        			sb.append("|");
        		
        				if(JFITDE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFITDE);
            			}
            		
        			sb.append("|");
        		
        				if(JFEQTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFEQTP);
            			}
            		
        			sb.append("|");
        		
        				if(JFIMIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFIMIN);
            			}
            		
        			sb.append("|");
        		
        				if(JFDSPI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFDSPI);
            			}
            		
        			sb.append("|");
        		
        				if(JFSEDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFSEDT);
            			}
            		
        			sb.append("|");
        		
        				if(JFSTKT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFSTKT);
            			}
            		
        			sb.append("|");
        		
        				if(JFDRPI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFDRPI);
            			}
            		
        			sb.append("|");
        		
        				if(JFDMST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFDMST);
            			}
            		
        			sb.append("|");
        		
        				if(JFCPVN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFCPVN);
            			}
            		
        			sb.append("|");
        		
        				if(JFSPIT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFSPIT);
            			}
            		
        			sb.append("|");
        		
        				if(JFTMIT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFTMIT);
            			}
            		
        			sb.append("|");
        		
        				if(JFDSIF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFDSIF);
            			}
            		
        			sb.append("|");
        		
        				if(JFMLTV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMLTV);
            			}
            		
        			sb.append("|");
        		
        				if(JFADCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFADCD);
            			}
            		
        			sb.append("|");
        		
        				if(JFSTIC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFSTIC);
            			}
            		
        			sb.append("|");
        		
        				if(JFMRCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMRCA);
            			}
            		
        			sb.append("|");
        		
        				if(JFMNII == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMNII);
            			}
            		
        			sb.append("|");
        		
        				if(JFTITM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFTITM);
            			}
            		
        			sb.append("|");
        		
        				if(JFSHSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFSHSP);
            			}
            		
        			sb.append("|");
        		
        				if(JFPUWN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPUWN);
            			}
            		
        			sb.append("|");
        		
        				if(JFCRWN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFCRWN);
            			}
            		
        			sb.append("|");
        		
        				if(JFCSCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFCSCN);
            			}
            		
        			sb.append("|");
        		
        				if(JFNUT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFNUT);
            			}
            		
        			sb.append("|");
        		
        				if(JFPRVS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPRVS);
            			}
            		
        			sb.append("|");
        		
        				if(JFREDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFREDT);
            			}
            		
        			sb.append("|");
        		
        				if(JFRQCF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFRQCF);
            			}
            		
        			sb.append("|");
        		
        				if(JFNHZF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFNHZF);
            			}
            		
        			sb.append("|");
        		
        				if(JFRIST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFRIST);
            			}
            		
        			sb.append("|");
        		
        				if(JFNCTN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFNCTN);
            			}
            		
        			sb.append("|");
        		
        				if(JFSCTC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFSCTC);
            			}
            		
        			sb.append("|");
        		
        				if(JFCATY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFCATY);
            			}
            		
        			sb.append("|");
        		
        				if(JFCTST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFCTST);
            			}
            		
        			sb.append("|");
        		
        				if(JFPPGM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFPPGM);
            			}
            		
        			sb.append("|");
        		
        				if(JFEADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFEADT);
            			}
            		
        			sb.append("|");
        		
        				if(JFEATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFEATM);
            			}
            		
        			sb.append("|");
        		
        				if(JFEAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFEAID);
            			}
            		
        			sb.append("|");
        		
        				if(JFMODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMODT);
            			}
            		
        			sb.append("|");
        		
        				if(JFMOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMOTM);
            			}
            		
        			sb.append("|");
        		
        				if(JFMOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMOID);
            			}
            		
        			sb.append("|");
        		
        				if(JFMOPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JFMOPG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
ITEM_DETAILStruct ITEM_DETAIL = new ITEM_DETAILStruct();
ITEM_HEADERStruct ITEM_HEADER = new ITEM_HEADERStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ITEM_DETAIL");
					}
				
		int tos_count_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_1 = new StringBuilder();
                    log4jParamters_tDBOutput_1.append("Parameters:");
                            log4jParamters_tDBOutput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Master");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE" + " = " + "\"ITEM_DETAIL\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DATA_ACTION" + " = " + "UPDATE_OR_INSERT");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + (log4jParamters_tDBOutput_1) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_1().limitLog4jByte();
            }





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.GIM_Schema_Master;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("ITEM_DETAIL");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("ITEM_DETAIL");
}

        int updateKeyCount_tDBOutput_1 = 2;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 36 && true) {
                    log.warn("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_1 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_1 = context.GIM_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection attempts to '")  + (url_tDBOutput_1)  + ("' with the username '")  + (dbUser_tDBOutput_1)  + ("'.") );
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to '")  + (url_tDBOutput_1)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_1.getAutoCommit())  + ("'.") );



int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"EXTERNAL_UPC\" = ?,\"BUYER_NO\" = ?,\"ITEM_STATUS\" = ?,\"UNITS_PER_CASE\" = ?,\"ITEM_HAZARD_CODE\" = ?,\"PROPRIETARY_ITEM\" = ?,\"DEMAND_STATUS\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"JFPF_SVOP\" = ?,\"INTERNAL_UPC\" = ?,\"CUBE\" = ?,\"CONTAINER\" = ?,\"ITEM_CATCH_WEIGHT_IND\" = ?,\"ITEM_GROSS_WEIGHT\" = ?,\"SPECIALTY_GROUP_CODE\" = ?,\"ITEM_STORAGE\" = ?,\"REPACK_ITEM\" = ?,\"DISPENSER_EQUIPMENT_ITEM\" = ?,\"EQUIPMENT_TYPE\" = ?,\"ITEM_IMPORT_FLAG\" = ?,\"DISPENSABLE_ITEM_FLAG\" = ?,\"STATUS_EFFECTIVE_DATE\" = ?,\"STOCK_TYPE\" = ?,\"MASTER_CASE\" = ?,\"PICK_UP_WINDOW\" = ?,\"CREDIT_WINDOW\" = ?,\"CREATED_TIMESTAMP\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"UPDATED_USER_ID\" = ?,\"IS_ACTIVE\" = ? WHERE \"SITE_ID\" = ? AND \"ITEM_NO\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"SITE_ID\",\"ITEM_NO\",\"EXTERNAL_UPC\",\"BUYER_NO\",\"ITEM_STATUS\",\"UNITS_PER_CASE\",\"ITEM_HAZARD_CODE\",\"PROPRIETARY_ITEM\",\"DEMAND_STATUS\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\",\"JFPF_SVOP\",\"INTERNAL_UPC\",\"CUBE\",\"CONTAINER\",\"ITEM_CATCH_WEIGHT_IND\",\"ITEM_GROSS_WEIGHT\",\"SPECIALTY_GROUP_CODE\",\"ITEM_STORAGE\",\"REPACK_ITEM\",\"DISPENSER_EQUIPMENT_ITEM\",\"EQUIPMENT_TYPE\",\"ITEM_IMPORT_FLAG\",\"DISPENSABLE_ITEM_FLAG\",\"STATUS_EFFECTIVE_DATE\",\"STOCK_TYPE\",\"MASTER_CASE\",\"PICK_UP_WINDOW\",\"CREDIT_WINDOW\",\"CREATED_TIMESTAMP\",\"UPDATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"IS_ACTIVE\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ITEM_HEADER");
					}
				
		int tos_count_tDBOutput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_2 = new StringBuilder();
                    log4jParamters_tDBOutput_2.append("Parameters:");
                            log4jParamters_tDBOutput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Master");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("TABLE" + " = " + "\"ITEM_HEADER\"");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DATA_ACTION" + " = " + "UPDATE_OR_INSERT");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + (log4jParamters_tDBOutput_2) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_2().limitLog4jByte();
            }





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.GIM_Schema_Master;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("ITEM_HEADER");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("ITEM_HEADER");
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 16 && true) {
                    log.warn("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_2 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_2 = context.GIM_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection attempts to '")  + (url_tDBOutput_2)  + ("' with the username '")  + (dbUser_tDBOutput_2)  + ("'.") );
    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to '")  + (url_tDBOutput_2)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 1;
        int commitCounter_tDBOutput_2 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_2.getAutoCommit())  + ("'.") );



int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"PACK\" = ?,\"BRAND\" = ?,\"ITEM_DESC\" = ?,\"MFG_CODE\" = ?,\"ITEM_SIZE\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"JFPF_SVOP\" = ?,\"CREATED_TIMESTAMP\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"UPDATED_USER_ID\" = ?,\"IS_ACTIVE\" = ? WHERE \"ITEM_NO\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"ITEM_NO\",\"PACK\",\"BRAND\",\"ITEM_DESC\",\"MFG_CODE\",\"ITEM_SIZE\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\",\"JFPF_SVOP\",\"CREATED_TIMESTAMP\",\"UPDATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"IS_ACTIVE\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
	String STATUS_EFFECTIVE_DATE;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_ITEM_DETAIL_tMap_1 = 0;
				
ITEM_DETAILStruct ITEM_DETAIL_tmp = new ITEM_DETAILStruct();
				int count_ITEM_HEADER_tMap_1 = 0;
				
ITEM_HEADERStruct ITEM_HEADER_tmp = new ITEM_HEADERStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"USIAJFPF\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"SELECT    USIAJFPF.JFITEM,    USIAJFPF.JFVNBR,    USIAJFPF.JFPACK,    USIAJFPF.JFBRND,    USIAJFPF.JFITDS,    USIAJFPF.JFIEDS,    USIAJFPF.JFMNPC,    USIAJFPF.JFEUPC,    USIAJFPF.JFIUPC,    USIAJFPF.JFBUYR,    USIAJFPF.JFITST,    USIAJFPF.JFITTY,    USIAJFPF.JFCUBE,    USIAJFPF.JFCOTR,    USIAJFPF.JFPRTN,    USIAJFPF.JFPOSZ,    USIAJFPF.JFUNCA,    USIAJFPF.JFMISP,    USIAJFPF.JFSUCA,    USIAJFPF.JFPBMJ,    USIAJFPF.JFPBNT,    USIAJFPF.JFPBMN,    USIAJFPF.JFLCCT,    USIAJFPF.JFLCMC,    USIAJFPF.JFLCIN,    USIAJFPF.JFLCMN,    USIAJFPF.JFITSZ,    USIAJFPF.JFITCI,    USIAJFPF.JFITNW,    USIAJFPF.JFITTW,    USIAJFPF.JFITGW,    USIAJFPF.JFITHZ,    USIAJFPF.JFITPR,    USIAJFPF.JFITCO,    USIAJFPF.JFITSP,    USIAJFPF.JFITKO,    USIAJFPF.JFITSG,    USIAJFPF.JFCHNU,    USIAJFPF.JFITRP,    USIAJFPF.JFITKT,    USIAJFPF.JFITDE,    USIAJFPF.JFEQTP,    USIAJFPF.JFIMIN,    USIAJFPF.JFDSPI,    USIAJFPF.JFSEDT,    USIAJFPF.JFSTKT,    USIAJFPF.JFDRPI,    USIAJFPF.JFDMST,    USIAJFPF.JFCPVN,    USIAJFPF.JFSPIT,    USIAJFPF.JFTMIT,    USIAJFPF.JFDSIF,    USIAJFPF.JFMLTV,    USIAJFPF.JFADCD,    USIAJFPF.JFSTIC,    USIAJFPF.JFMRCA,    USIAJFPF.JFMNII,    USIAJFPF.JFTITM,    USIAJFPF.JFSHSP,    USIAJFPF.JFPUWN,    USIAJFPF.JFCRWN,    USIAJFPF.JFCSCN,    USIAJFPF.\\\"JFNUT#\\\",    USIAJFPF.JFPRVS,    USIAJFPF.JFREDT,    USIAJFPF.JFRQCF,    USIAJFPF.JFNHZF,    USIAJFPF.JFRIST,    USIAJFPF.JFNCTN,    USIAJFPF.JFSCTC,    USIAJFPF.JFCATY,    USIAJFPF.JFCTST,    USIAJFPF.JFPPGM,    USIAJFPF.JFEADT,    USIAJFPF.JFEATM,    USIAJFPF.JFEAID,    USIAJFPF.JFMODT,    USIAJFPF.JFMOTM,    USIAJFPF.JFMOID,    USIAJFPF.JFMOPG FROM USIAJFPF ORDER BY USIAJFPF.JFEADT DESC\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.SUS_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_1 - Driver ClassName: "+driverClass_tDBInput_1+".");
			
	    		log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '" + dbUser_tDBInput_1 + "'.");
			
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
	    		log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  USIAJFPF.JFITEM, \n  USIAJFPF.JFVNBR, \n  USIAJFPF.JFPACK, \n  USIAJFPF.JFBRND, \n  USIAJFPF.JFITDS, \n  USIAJFPF."
+"JFIEDS, \n  USIAJFPF.JFMNPC, \n  USIAJFPF.JFEUPC, \n  USIAJFPF.JFIUPC, \n  USIAJFPF.JFBUYR, \n  USIAJFPF.JFITST, \n  USIAJFPF."
+"JFITTY, \n  USIAJFPF.JFCUBE, \n  USIAJFPF.JFCOTR, \n  USIAJFPF.JFPRTN, \n  USIAJFPF.JFPOSZ, \n  USIAJFPF.JFUNCA, \n  USIAJFPF."
+"JFMISP, \n  USIAJFPF.JFSUCA, \n  USIAJFPF.JFPBMJ, \n  USIAJFPF.JFPBNT, \n  USIAJFPF.JFPBMN, \n  USIAJFPF.JFLCCT, \n  USIAJFPF."
+"JFLCMC, \n  USIAJFPF.JFLCIN, \n  USIAJFPF.JFLCMN, \n  USIAJFPF.JFITSZ, \n  USIAJFPF.JFITCI, \n  USIAJFPF.JFITNW, \n  USIAJFPF."
+"JFITTW, \n  USIAJFPF.JFITGW, \n  USIAJFPF.JFITHZ, \n  USIAJFPF.JFITPR, \n  USIAJFPF.JFITCO, \n  USIAJFPF.JFITSP, \n  USIAJFPF."
+"JFITKO, \n  USIAJFPF.JFITSG, \n  USIAJFPF.JFCHNU, \n  USIAJFPF.JFITRP, \n  USIAJFPF.JFITKT, \n  USIAJFPF.JFITDE, \n  USIAJFPF."
+"JFEQTP, \n  USIAJFPF.JFIMIN, \n  USIAJFPF.JFDSPI, \n  USIAJFPF.JFSEDT, \n  USIAJFPF.JFSTKT, \n  USIAJFPF.JFDRPI, \n  USIAJFPF."
+"JFDMST, \n  USIAJFPF.JFCPVN, \n  USIAJFPF.JFSPIT, \n  USIAJFPF.JFTMIT, \n  USIAJFPF.JFDSIF, \n  USIAJFPF.JFMLTV, \n  USIAJFPF."
+"JFADCD, \n  USIAJFPF.JFSTIC, \n  USIAJFPF.JFMRCA, \n  USIAJFPF.JFMNII, \n  USIAJFPF.JFTITM, \n  USIAJFPF.JFSHSP, \n  USIAJFPF."
+"JFPUWN, \n  USIAJFPF.JFCRWN, \n  USIAJFPF.JFCSCN, \n  USIAJFPF.\"JFNUT#\", \n  USIAJFPF.JFPRVS, \n  USIAJFPF.JFREDT, \n  USIAJ"
+"FPF.JFRQCF, \n  USIAJFPF.JFNHZF, \n  USIAJFPF.JFRIST, \n  USIAJFPF.JFNCTN, \n  USIAJFPF.JFSCTC, \n  USIAJFPF.JFCATY, \n  USIAJ"
+"FPF.JFCTST, \n  USIAJFPF.JFPPGM, \n  USIAJFPF.JFEADT, \n  USIAJFPF.JFEATM, \n  USIAJFPF.JFEAID, \n  USIAJFPF.JFMODT, \n  USIAJ"
+"FPF.JFMOTM, \n  USIAJFPF.JFMOID, \n  USIAJFPF.JFMOPG\nFROM USIAJFPF ORDER BY USIAJFPF.JFEADT DESC";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.JFITEM = null;
							} else {
	                         		
        	row1.JFITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.JFVNBR = null;
							} else {
	                         		
        	row1.JFVNBR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.JFPACK = null;
							} else {
	                         		
        	row1.JFPACK = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.JFBRND = null;
							} else {
	                         		
        	row1.JFBRND = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.JFITDS = null;
							} else {
	                         		
        	row1.JFITDS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.JFIEDS = null;
							} else {
	                         		
        	row1.JFIEDS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.JFMNPC = null;
							} else {
	                         		
        	row1.JFMNPC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.JFEUPC = null;
							} else {
		                          
            row1.JFEUPC = rs_tDBInput_1.getBigDecimal(8);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.JFIUPC = null;
							} else {
		                          
            row1.JFIUPC = rs_tDBInput_1.getBigDecimal(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.JFBUYR = null;
							} else {
	                         		
        	row1.JFBUYR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.JFITST = null;
							} else {
	                         		
        	row1.JFITST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.JFITTY = null;
							} else {
	                         		
        	row1.JFITTY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.JFCUBE = null;
							} else {
		                          
            row1.JFCUBE = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.JFCOTR = null;
							} else {
	                         		
        	row1.JFCOTR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.JFPRTN = null;
							} else {
		                          
            row1.JFPRTN = rs_tDBInput_1.getBigDecimal(15);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.JFPOSZ = null;
							} else {
	                         		
        	row1.JFPOSZ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.JFUNCA = null;
							} else {
		                          
            row1.JFUNCA = rs_tDBInput_1.getBigDecimal(17);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.JFMISP = null;
							} else {
		                          
            row1.JFMISP = rs_tDBInput_1.getBigDecimal(18);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.JFSUCA = null;
							} else {
		                          
            row1.JFSUCA = rs_tDBInput_1.getBigDecimal(19);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.JFPBMJ = null;
							} else {
		                          
            row1.JFPBMJ = rs_tDBInput_1.getBigDecimal(20);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.JFPBNT = null;
							} else {
		                          
            row1.JFPBNT = rs_tDBInput_1.getBigDecimal(21);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.JFPBMN = null;
							} else {
		                          
            row1.JFPBMN = rs_tDBInput_1.getBigDecimal(22);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.JFLCCT = null;
							} else {
		                          
            row1.JFLCCT = rs_tDBInput_1.getBigDecimal(23);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.JFLCMC = null;
							} else {
		                          
            row1.JFLCMC = rs_tDBInput_1.getBigDecimal(24);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.JFLCIN = null;
							} else {
		                          
            row1.JFLCIN = rs_tDBInput_1.getBigDecimal(25);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.JFLCMN = null;
							} else {
		                          
            row1.JFLCMN = rs_tDBInput_1.getBigDecimal(26);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.JFITSZ = null;
							} else {
	                         		
        	row1.JFITSZ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.JFITCI = null;
							} else {
	                         		
        	row1.JFITCI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.JFITNW = null;
							} else {
		                          
            row1.JFITNW = rs_tDBInput_1.getBigDecimal(29);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.JFITTW = null;
							} else {
		                          
            row1.JFITTW = rs_tDBInput_1.getBigDecimal(30);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.JFITGW = null;
							} else {
		                          
            row1.JFITGW = rs_tDBInput_1.getBigDecimal(31);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.JFITHZ = null;
							} else {
	                         		
        	row1.JFITHZ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.JFITPR = null;
							} else {
	                         		
        	row1.JFITPR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.JFITCO = null;
							} else {
	                         		
        	row1.JFITCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.JFITSP = null;
							} else {
	                         		
        	row1.JFITSP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.JFITKO = null;
							} else {
	                         		
        	row1.JFITKO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.JFITSG = null;
							} else {
	                         		
        	row1.JFITSG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.JFCHNU = null;
							} else {
	                         		
        	row1.JFCHNU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.JFITRP = null;
							} else {
	                         		
        	row1.JFITRP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.JFITKT = null;
							} else {
	                         		
        	row1.JFITKT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.JFITDE = null;
							} else {
	                         		
        	row1.JFITDE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.JFEQTP = null;
							} else {
	                         		
        	row1.JFEQTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.JFIMIN = null;
							} else {
	                         		
        	row1.JFIMIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.JFDSPI = null;
							} else {
	                         		
        	row1.JFDSPI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.JFSEDT = null;
							} else {
		                          
            row1.JFSEDT = rs_tDBInput_1.getBigDecimal(45);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.JFSTKT = null;
							} else {
	                         		
        	row1.JFSTKT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.JFDRPI = null;
							} else {
	                         		
        	row1.JFDRPI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.JFDMST = null;
							} else {
	                         		
        	row1.JFDMST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.JFCPVN = null;
							} else {
	                         		
        	row1.JFCPVN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.JFSPIT = null;
							} else {
	                         		
        	row1.JFSPIT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.JFTMIT = null;
							} else {
	                         		
        	row1.JFTMIT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.JFDSIF = null;
							} else {
	                         		
        	row1.JFDSIF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 52, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.JFMLTV = null;
							} else {
	                         		
        	row1.JFMLTV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.JFADCD = null;
							} else {
		                          
            row1.JFADCD = rs_tDBInput_1.getBigDecimal(54);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.JFSTIC = null;
							} else {
	                         		
        	row1.JFSTIC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 55, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.JFMRCA = null;
							} else {
		                          
            row1.JFMRCA = rs_tDBInput_1.getBigDecimal(56);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.JFMNII = null;
							} else {
	                         		
        	row1.JFMNII = routines.system.JDBCUtil.getString(rs_tDBInput_1, 57, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.JFTITM = null;
							} else {
	                         		
        	row1.JFTITM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 58, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.JFSHSP = null;
							} else {
	                         		
        	row1.JFSHSP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 59, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.JFPUWN = null;
							} else {
		                          
            row1.JFPUWN = rs_tDBInput_1.getBigDecimal(60);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.JFCRWN = null;
							} else {
		                          
            row1.JFCRWN = rs_tDBInput_1.getBigDecimal(61);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.JFCSCN = null;
							} else {
	                         		
        	row1.JFCSCN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 62, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.JFNUT = null;
							} else {
		                          
            row1.JFNUT = rs_tDBInput_1.getBigDecimal(63);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.JFPRVS = null;
							} else {
	                         		
        	row1.JFPRVS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.JFREDT = null;
							} else {
		                          
            row1.JFREDT = rs_tDBInput_1.getBigDecimal(65);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.JFRQCF = null;
							} else {
	                         		
        	row1.JFRQCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 66, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.JFNHZF = null;
							} else {
	                         		
        	row1.JFNHZF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 67, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.JFRIST = null;
							} else {
	                         		
        	row1.JFRIST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.JFNCTN = null;
							} else {
	                         		
        	row1.JFNCTN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 69, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.JFSCTC = null;
							} else {
	                         		
        	row1.JFSCTC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 70, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.JFCATY = null;
							} else {
	                         		
        	row1.JFCATY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 71, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.JFCTST = null;
							} else {
	                         		
        	row1.JFCTST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.JFPPGM = null;
							} else {
	                         		
        	row1.JFPPGM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 73, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.JFEADT = null;
							} else {
		                          
            row1.JFEADT = rs_tDBInput_1.getBigDecimal(74);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.JFEATM = null;
							} else {
		                          
            row1.JFEATM = rs_tDBInput_1.getBigDecimal(75);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.JFEAID = null;
							} else {
	                         		
        	row1.JFEAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.JFMODT = null;
							} else {
		                          
            row1.JFMODT = rs_tDBInput_1.getBigDecimal(77);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row1.JFMOTM = null;
							} else {
		                          
            row1.JFMOTM = rs_tDBInput_1.getBigDecimal(78);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 79) {
								row1.JFMOID = null;
							} else {
	                         		
        	row1.JFMOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 79, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 80) {
								row1.JFMOPG = null;
							} else {
	                         		
        	row1.JFMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 80, true);
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.JFEADT.toString(),row1.JFEATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.JFMODT.toString(),row1.JFMOTM.toString()) ;
Var.STATUS_EFFECTIVE_DATE = TimeStampConverting.convertToDate(row1.JFSEDT.toString()) ;// ###############################
        // ###############################
        // # Output tables

ITEM_DETAIL = null;
ITEM_HEADER = null;


// # Output table : 'ITEM_DETAIL'
count_ITEM_DETAIL_tMap_1++;

ITEM_DETAIL_tmp.SITE_ID = context.opco;
ITEM_DETAIL_tmp.ITEM_NO = row1.JFITEM;
ITEM_DETAIL_tmp.EXTERNAL_UPC = row1.JFEUPC ;
ITEM_DETAIL_tmp.BUYER_NO = row1.JFBUYR;
ITEM_DETAIL_tmp.ITEM_STATUS = row1.JFITST;
ITEM_DETAIL_tmp.UNITS_PER_CASE = row1.JFUNCA ;
ITEM_DETAIL_tmp.ITEM_HAZARD_CODE = row1.JFITHZ;
ITEM_DETAIL_tmp.PROPRIETARY_ITEM = row1.JFITPR;
ITEM_DETAIL_tmp.DEMAND_STATUS = row1.JFDMST;
ITEM_DETAIL_tmp.IS_DELETED = false;
ITEM_DETAIL_tmp.CREATED_ORIGIN = "SUS";
ITEM_DETAIL_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
ITEM_DETAIL_tmp.UPDATED_ORIGIN = "SUS";
ITEM_DETAIL_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
ITEM_DETAIL_tmp.JFPF_SVOP = context.svop;
ITEM_DETAIL_tmp.INTERNAL_UPC = row1.JFIUPC ;
ITEM_DETAIL_tmp.CUBE = row1.JFCUBE ;
ITEM_DETAIL_tmp.CONTAINER = row1.JFCOTR;
ITEM_DETAIL_tmp.ITEM_CATCH_WEIGHT_IND = row1.JFITCI;
ITEM_DETAIL_tmp.ITEM_GROSS_WEIGHT = row1.JFITGW;
ITEM_DETAIL_tmp.SPECIALTY_GROUP_CODE = row1.JFITSP;
ITEM_DETAIL_tmp.ITEM_STORAGE = row1.JFITSG;
ITEM_DETAIL_tmp.REPACK_ITEM = row1.JFITRP;
ITEM_DETAIL_tmp.DISPENSER_EQUIPMENT_ITEM = row1.JFITDE;
ITEM_DETAIL_tmp.EQUIPMENT_TYPE = row1.JFEQTP;
ITEM_DETAIL_tmp.ITEM_IMPORT_FLAG = row1.JFIMIN;
ITEM_DETAIL_tmp.DISPENSABLE_ITEM_FLAG = row1.JFDSPI;
ITEM_DETAIL_tmp.STATUS_EFFECTIVE_DATE = Var.STATUS_EFFECTIVE_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.STATUS_EFFECTIVE_DATE):null ;
ITEM_DETAIL_tmp.STOCK_TYPE = row1.JFSTKT;
ITEM_DETAIL_tmp.MASTER_CASE = row1.JFMRCA;
ITEM_DETAIL_tmp.PICK_UP_WINDOW = row1.JFPUWN;
ITEM_DETAIL_tmp.CREDIT_WINDOW = row1.JFCRWN;
ITEM_DETAIL_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
ITEM_DETAIL_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
ITEM_DETAIL_tmp.UPDATED_USER_ID = row1.JFMOID ;
ITEM_DETAIL_tmp.IS_ACTIVE = true;
ITEM_DETAIL = ITEM_DETAIL_tmp;
log.debug("tMap_1 - Outputting the record " + count_ITEM_DETAIL_tMap_1 + " of the output table 'ITEM_DETAIL'.");


// # Output table : 'ITEM_HEADER'
count_ITEM_HEADER_tMap_1++;

ITEM_HEADER_tmp.ITEM_NO = row1.JFITEM;
ITEM_HEADER_tmp.PACK = row1.JFPACK;
ITEM_HEADER_tmp.BRAND = row1.JFBRND;
ITEM_HEADER_tmp.ITEM_DESC = row1.JFITDS;
ITEM_HEADER_tmp.MFG_CODE = row1.JFMNPC;
ITEM_HEADER_tmp.ITEM_SIZE = row1.JFITSZ ;
ITEM_HEADER_tmp.IS_DELETED = false;
ITEM_HEADER_tmp.CREATED_ORIGIN = "SUS";
ITEM_HEADER_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
ITEM_HEADER_tmp.UPDATED_ORIGIN = "SUS";
ITEM_HEADER_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
ITEM_HEADER_tmp.JFPF_SVOP = context.svop;
ITEM_HEADER_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
ITEM_HEADER_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
ITEM_HEADER_tmp.UPDATED_USER_ID = row1.JFMOID ;
ITEM_HEADER_tmp.IS_ACTIVE = true;
ITEM_HEADER = ITEM_HEADER_tmp;
log.debug("tMap_1 - Outputting the record " + count_ITEM_HEADER_tMap_1 + " of the output table 'ITEM_HEADER'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "ITEM_DETAIL"
if(ITEM_DETAIL != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ITEM_DETAIL"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("ITEM_DETAIL - " + (ITEM_DETAIL==null? "": ITEM_DETAIL.toLogString()));
    			}
    		



        whetherReject_tDBOutput_1 = false;
            int updateFlag_tDBOutput_1=0;
                    pstmtUpdate_tDBOutput_1.setBigDecimal(1, ITEM_DETAIL.EXTERNAL_UPC);

                    if(ITEM_DETAIL.BUYER_NO == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, ITEM_DETAIL.BUYER_NO);
}

                    if(ITEM_DETAIL.ITEM_STATUS == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, ITEM_DETAIL.ITEM_STATUS);
}

                    pstmtUpdate_tDBOutput_1.setBigDecimal(4, ITEM_DETAIL.UNITS_PER_CASE);

                    if(ITEM_DETAIL.ITEM_HAZARD_CODE == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, ITEM_DETAIL.ITEM_HAZARD_CODE);
}

                    if(ITEM_DETAIL.PROPRIETARY_ITEM == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, ITEM_DETAIL.PROPRIETARY_ITEM);
}

                    if(ITEM_DETAIL.DEMAND_STATUS == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, ITEM_DETAIL.DEMAND_STATUS);
}

                    pstmtUpdate_tDBOutput_1.setBoolean(8, ITEM_DETAIL.IS_DELETED);

                    if(ITEM_DETAIL.CREATED_ORIGIN == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(9, ITEM_DETAIL.CREATED_ORIGIN);
}

                    if(ITEM_DETAIL.CREATED_ORIGIN_TIMESTAMP != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(ITEM_DETAIL.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_DETAIL.UPDATED_ORIGIN == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(11, ITEM_DETAIL.UPDATED_ORIGIN);
}

                    if(ITEM_DETAIL.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(ITEM_DETAIL.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_DETAIL.JFPF_SVOP == null) {
pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(13, ITEM_DETAIL.JFPF_SVOP);
}

                    pstmtUpdate_tDBOutput_1.setBigDecimal(14, ITEM_DETAIL.INTERNAL_UPC);

                    pstmtUpdate_tDBOutput_1.setBigDecimal(15, ITEM_DETAIL.CUBE);

                    if(ITEM_DETAIL.CONTAINER == null) {
pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(16, ITEM_DETAIL.CONTAINER);
}

                    if(ITEM_DETAIL.ITEM_CATCH_WEIGHT_IND == null) {
pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(17, ITEM_DETAIL.ITEM_CATCH_WEIGHT_IND);
}

                    pstmtUpdate_tDBOutput_1.setBigDecimal(18, ITEM_DETAIL.ITEM_GROSS_WEIGHT);

                    if(ITEM_DETAIL.SPECIALTY_GROUP_CODE == null) {
pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(19, ITEM_DETAIL.SPECIALTY_GROUP_CODE);
}

                    if(ITEM_DETAIL.ITEM_STORAGE == null) {
pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(20, ITEM_DETAIL.ITEM_STORAGE);
}

                    if(ITEM_DETAIL.REPACK_ITEM == null) {
pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(21, ITEM_DETAIL.REPACK_ITEM);
}

                    if(ITEM_DETAIL.DISPENSER_EQUIPMENT_ITEM == null) {
pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(22, ITEM_DETAIL.DISPENSER_EQUIPMENT_ITEM);
}

                    if(ITEM_DETAIL.EQUIPMENT_TYPE == null) {
pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(23, ITEM_DETAIL.EQUIPMENT_TYPE);
}

                    if(ITEM_DETAIL.ITEM_IMPORT_FLAG == null) {
pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(24, ITEM_DETAIL.ITEM_IMPORT_FLAG);
}

                    if(ITEM_DETAIL.DISPENSABLE_ITEM_FLAG == null) {
pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(25, ITEM_DETAIL.DISPENSABLE_ITEM_FLAG);
}

                    if(ITEM_DETAIL.STATUS_EFFECTIVE_DATE != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(26, new java.sql.Timestamp(ITEM_DETAIL.STATUS_EFFECTIVE_DATE.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_DETAIL.STOCK_TYPE == null) {
pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(27, ITEM_DETAIL.STOCK_TYPE);
}

                    pstmtUpdate_tDBOutput_1.setBigDecimal(28, ITEM_DETAIL.MASTER_CASE);

                    pstmtUpdate_tDBOutput_1.setBigDecimal(29, ITEM_DETAIL.PICK_UP_WINDOW);

                    pstmtUpdate_tDBOutput_1.setBigDecimal(30, ITEM_DETAIL.CREDIT_WINDOW);

                    if(ITEM_DETAIL.CREATED_TIMESTAMP != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(31, new java.sql.Timestamp(ITEM_DETAIL.CREATED_TIMESTAMP.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(31, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_DETAIL.UPDATED_TIMESTAMP != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(32, new java.sql.Timestamp(ITEM_DETAIL.UPDATED_TIMESTAMP.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(32, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_DETAIL.UPDATED_USER_ID == null) {
pstmtUpdate_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(33, ITEM_DETAIL.UPDATED_USER_ID);
}

                    if(ITEM_DETAIL.IS_ACTIVE == null) {
pstmtUpdate_tDBOutput_1.setNull(34, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_1.setBoolean(34, ITEM_DETAIL.IS_ACTIVE);
}


                    if(ITEM_DETAIL.SITE_ID == null) {
pstmtUpdate_tDBOutput_1.setNull(35 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(35 + count_tDBOutput_1, ITEM_DETAIL.SITE_ID);
}


                    if(ITEM_DETAIL.ITEM_NO == null) {
pstmtUpdate_tDBOutput_1.setNull(36 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(36 + count_tDBOutput_1, ITEM_DETAIL.ITEM_NO);
}


            try {
				
                updateFlag_tDBOutput_1=pstmtUpdate_tDBOutput_1.executeUpdate();
                updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1+updateFlag_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += updateFlag_tDBOutput_1;
				
            if(updateFlag_tDBOutput_1 == 0) {
            	
                        if(ITEM_DETAIL.SITE_ID == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, ITEM_DETAIL.SITE_ID);
}

                        if(ITEM_DETAIL.ITEM_NO == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, ITEM_DETAIL.ITEM_NO);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(3, ITEM_DETAIL.EXTERNAL_UPC);

                        if(ITEM_DETAIL.BUYER_NO == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, ITEM_DETAIL.BUYER_NO);
}

                        if(ITEM_DETAIL.ITEM_STATUS == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, ITEM_DETAIL.ITEM_STATUS);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(6, ITEM_DETAIL.UNITS_PER_CASE);

                        if(ITEM_DETAIL.ITEM_HAZARD_CODE == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, ITEM_DETAIL.ITEM_HAZARD_CODE);
}

                        if(ITEM_DETAIL.PROPRIETARY_ITEM == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(8, ITEM_DETAIL.PROPRIETARY_ITEM);
}

                        if(ITEM_DETAIL.DEMAND_STATUS == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(9, ITEM_DETAIL.DEMAND_STATUS);
}

                        pstmtInsert_tDBOutput_1.setBoolean(10, ITEM_DETAIL.IS_DELETED);

                        if(ITEM_DETAIL.CREATED_ORIGIN == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(11, ITEM_DETAIL.CREATED_ORIGIN);
}

                        if(ITEM_DETAIL.CREATED_ORIGIN_TIMESTAMP != null) {
pstmtInsert_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(ITEM_DETAIL.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_DETAIL.UPDATED_ORIGIN == null) {
pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(13, ITEM_DETAIL.UPDATED_ORIGIN);
}

                        if(ITEM_DETAIL.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmtInsert_tDBOutput_1.setTimestamp(14, new java.sql.Timestamp(ITEM_DETAIL.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_DETAIL.JFPF_SVOP == null) {
pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(15, ITEM_DETAIL.JFPF_SVOP);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(16, ITEM_DETAIL.INTERNAL_UPC);

                        pstmtInsert_tDBOutput_1.setBigDecimal(17, ITEM_DETAIL.CUBE);

                        if(ITEM_DETAIL.CONTAINER == null) {
pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(18, ITEM_DETAIL.CONTAINER);
}

                        if(ITEM_DETAIL.ITEM_CATCH_WEIGHT_IND == null) {
pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(19, ITEM_DETAIL.ITEM_CATCH_WEIGHT_IND);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(20, ITEM_DETAIL.ITEM_GROSS_WEIGHT);

                        if(ITEM_DETAIL.SPECIALTY_GROUP_CODE == null) {
pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(21, ITEM_DETAIL.SPECIALTY_GROUP_CODE);
}

                        if(ITEM_DETAIL.ITEM_STORAGE == null) {
pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(22, ITEM_DETAIL.ITEM_STORAGE);
}

                        if(ITEM_DETAIL.REPACK_ITEM == null) {
pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(23, ITEM_DETAIL.REPACK_ITEM);
}

                        if(ITEM_DETAIL.DISPENSER_EQUIPMENT_ITEM == null) {
pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(24, ITEM_DETAIL.DISPENSER_EQUIPMENT_ITEM);
}

                        if(ITEM_DETAIL.EQUIPMENT_TYPE == null) {
pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(25, ITEM_DETAIL.EQUIPMENT_TYPE);
}

                        if(ITEM_DETAIL.ITEM_IMPORT_FLAG == null) {
pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(26, ITEM_DETAIL.ITEM_IMPORT_FLAG);
}

                        if(ITEM_DETAIL.DISPENSABLE_ITEM_FLAG == null) {
pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(27, ITEM_DETAIL.DISPENSABLE_ITEM_FLAG);
}

                        if(ITEM_DETAIL.STATUS_EFFECTIVE_DATE != null) {
pstmtInsert_tDBOutput_1.setTimestamp(28, new java.sql.Timestamp(ITEM_DETAIL.STATUS_EFFECTIVE_DATE.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_DETAIL.STOCK_TYPE == null) {
pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(29, ITEM_DETAIL.STOCK_TYPE);
}

                        pstmtInsert_tDBOutput_1.setBigDecimal(30, ITEM_DETAIL.MASTER_CASE);

                        pstmtInsert_tDBOutput_1.setBigDecimal(31, ITEM_DETAIL.PICK_UP_WINDOW);

                        pstmtInsert_tDBOutput_1.setBigDecimal(32, ITEM_DETAIL.CREDIT_WINDOW);

                        if(ITEM_DETAIL.CREATED_TIMESTAMP != null) {
pstmtInsert_tDBOutput_1.setTimestamp(33, new java.sql.Timestamp(ITEM_DETAIL.CREATED_TIMESTAMP.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(33, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_DETAIL.UPDATED_TIMESTAMP != null) {
pstmtInsert_tDBOutput_1.setTimestamp(34, new java.sql.Timestamp(ITEM_DETAIL.UPDATED_TIMESTAMP.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(34, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_DETAIL.UPDATED_USER_ID == null) {
pstmtInsert_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(35, ITEM_DETAIL.UPDATED_USER_ID);
}

                        if(ITEM_DETAIL.IS_ACTIVE == null) {
pstmtInsert_tDBOutput_1.setNull(36, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_1.setBoolean(36, ITEM_DETAIL.IS_ACTIVE);
}

					
                    int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                    insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Inserting")  + (" the record ")  + (nb_line_tDBOutput_1)  + (".") );
					
    	            }else{
    					nb_line_tDBOutput_1++;
    					
     					
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Updating")  + (" the record ")  + (nb_line_tDBOutput_1)  + (".") );
    				}
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
            log.error("tDBOutput_1 - "  + (e.getMessage()) );
                            System.err.print(e.getMessage());
                }
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "ITEM_DETAIL"




// Start of branch "ITEM_HEADER"
if(ITEM_HEADER != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ITEM_HEADER"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("ITEM_HEADER - " + (ITEM_HEADER==null? "": ITEM_HEADER.toLogString()));
    			}
    		



        whetherReject_tDBOutput_2 = false;
            int updateFlag_tDBOutput_2=0;
                    if(ITEM_HEADER.PACK == null) {
pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(1, ITEM_HEADER.PACK);
}

                    if(ITEM_HEADER.BRAND == null) {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(2, ITEM_HEADER.BRAND);
}

                    if(ITEM_HEADER.ITEM_DESC == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, ITEM_HEADER.ITEM_DESC);
}

                    if(ITEM_HEADER.MFG_CODE == null) {
pstmtUpdate_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(4, ITEM_HEADER.MFG_CODE);
}

                    if(ITEM_HEADER.ITEM_SIZE == null) {
pstmtUpdate_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(5, ITEM_HEADER.ITEM_SIZE);
}

                    pstmtUpdate_tDBOutput_2.setBoolean(6, ITEM_HEADER.IS_DELETED);

                    if(ITEM_HEADER.CREATED_ORIGIN == null) {
pstmtUpdate_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(7, ITEM_HEADER.CREATED_ORIGIN);
}

                    if(ITEM_HEADER.CREATED_ORIGIN_TIMESTAMP != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(8, new java.sql.Timestamp(ITEM_HEADER.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(8, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_HEADER.UPDATED_ORIGIN == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(9, ITEM_HEADER.UPDATED_ORIGIN);
}

                    if(ITEM_HEADER.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(10, new java.sql.Timestamp(ITEM_HEADER.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_HEADER.JFPF_SVOP == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(11, ITEM_HEADER.JFPF_SVOP);
}

                    if(ITEM_HEADER.CREATED_TIMESTAMP != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(12, new java.sql.Timestamp(ITEM_HEADER.CREATED_TIMESTAMP.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_HEADER.UPDATED_TIMESTAMP != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(13, new java.sql.Timestamp(ITEM_HEADER.UPDATED_TIMESTAMP.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(13, java.sql.Types.TIMESTAMP);
}

                    if(ITEM_HEADER.UPDATED_USER_ID == null) {
pstmtUpdate_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(14, ITEM_HEADER.UPDATED_USER_ID);
}

                    if(ITEM_HEADER.IS_ACTIVE == null) {
pstmtUpdate_tDBOutput_2.setNull(15, java.sql.Types.BOOLEAN);
} else {pstmtUpdate_tDBOutput_2.setBoolean(15, ITEM_HEADER.IS_ACTIVE);
}


                    if(ITEM_HEADER.ITEM_NO == null) {
pstmtUpdate_tDBOutput_2.setNull(16 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(16 + count_tDBOutput_2, ITEM_HEADER.ITEM_NO);
}


            try {
				
                updateFlag_tDBOutput_2=pstmtUpdate_tDBOutput_2.executeUpdate();
                updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2+updateFlag_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += updateFlag_tDBOutput_2;
				
            if(updateFlag_tDBOutput_2 == 0) {
            	
                        if(ITEM_HEADER.ITEM_NO == null) {
pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(1, ITEM_HEADER.ITEM_NO);
}

                        if(ITEM_HEADER.PACK == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(2, ITEM_HEADER.PACK);
}

                        if(ITEM_HEADER.BRAND == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, ITEM_HEADER.BRAND);
}

                        if(ITEM_HEADER.ITEM_DESC == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, ITEM_HEADER.ITEM_DESC);
}

                        if(ITEM_HEADER.MFG_CODE == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, ITEM_HEADER.MFG_CODE);
}

                        if(ITEM_HEADER.ITEM_SIZE == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(6, ITEM_HEADER.ITEM_SIZE);
}

                        pstmtInsert_tDBOutput_2.setBoolean(7, ITEM_HEADER.IS_DELETED);

                        if(ITEM_HEADER.CREATED_ORIGIN == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(8, ITEM_HEADER.CREATED_ORIGIN);
}

                        if(ITEM_HEADER.CREATED_ORIGIN_TIMESTAMP != null) {
pstmtInsert_tDBOutput_2.setTimestamp(9, new java.sql.Timestamp(ITEM_HEADER.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_HEADER.UPDATED_ORIGIN == null) {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(10, ITEM_HEADER.UPDATED_ORIGIN);
}

                        if(ITEM_HEADER.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmtInsert_tDBOutput_2.setTimestamp(11, new java.sql.Timestamp(ITEM_HEADER.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_HEADER.JFPF_SVOP == null) {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(12, ITEM_HEADER.JFPF_SVOP);
}

                        if(ITEM_HEADER.CREATED_TIMESTAMP != null) {
pstmtInsert_tDBOutput_2.setTimestamp(13, new java.sql.Timestamp(ITEM_HEADER.CREATED_TIMESTAMP.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_HEADER.UPDATED_TIMESTAMP != null) {
pstmtInsert_tDBOutput_2.setTimestamp(14, new java.sql.Timestamp(ITEM_HEADER.UPDATED_TIMESTAMP.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.TIMESTAMP);
}

                        if(ITEM_HEADER.UPDATED_USER_ID == null) {
pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(15, ITEM_HEADER.UPDATED_USER_ID);
}

                        if(ITEM_HEADER.IS_ACTIVE == null) {
pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(16, ITEM_HEADER.IS_ACTIVE);
}

					
                    int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
                    insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    nb_line_tDBOutput_2++;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Inserting")  + (" the record ")  + (nb_line_tDBOutput_2)  + (".") );
					
    	            }else{
    					nb_line_tDBOutput_2++;
    					
     					
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Updating")  + (" the record ")  + (nb_line_tDBOutput_2)  + (".") );
    				}
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
            log.error("tDBOutput_2 - "  + (e.getMessage()) );
                            System.err.print(e.getMessage());
                }
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_2)  + (" record(s).") );
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "ITEM_HEADER"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
	    		log.debug("tDBInput_1 - Closing the connection to the database.");
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_1", end_Hash.get("tDBInput_1")-start_Hash.get("tDBInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'ITEM_DETAIL': " + count_ITEM_DETAIL_tMap_1 + ".");
				log.debug("tMap_1 - Written records count in the table 'ITEM_HEADER': " + count_ITEM_HEADER_tMap_1 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
			}
			conn_tDBOutput_1.commit();
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_1 = 0;
			}
			commitCounter_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_1 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Has ")  + ("updated")  + (" ")  + (nb_line_update_tDBOutput_1)  + (" record(s).") );
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_1)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ITEM_DETAIL");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Done.") );

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_1", end_Hash.get("tDBOutput_1")-start_Hash.get("tDBOutput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_2)  + (" record(s).") );
			}
			conn_tDBOutput_2.commit();
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_2 = 0;
			}
			commitCounter_tDBOutput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_2 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Has ")  + ("updated")  + (" ")  + (nb_line_update_tDBOutput_2)  + (" record(s).") );
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_2)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ITEM_HEADER");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Done.") );

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_2", end_Hash.get("tDBOutput_2")-start_Hash.get("tDBOutput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_1.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
            log.error("tDBOutput_1 - "  + (errorMessage_tDBOutput_1) );
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_2.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
            log.error("tDBOutput_2 - "  + (errorMessage_tDBOutput_2) );
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Starting the Updating Data from USIAVRPF to ITEM_DETAIL...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class ITEM_DETAIL_UPDATEStruct implements routines.system.IPersistableRow<ITEM_DETAIL_UPDATEStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String ITEM_NO;

				public String getITEM_NO () {
					return this.ITEM_NO;
				}
				
			    public String GRADE_CODE;

				public String getGRADE_CODE () {
					return this.GRADE_CODE;
				}
				
			    public String VRPF_SVOP;

				public String getVRPF_SVOP () {
					return this.VRPF_SVOP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.ITEM_NO == null) ? 0 : this.ITEM_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ITEM_DETAIL_UPDATEStruct other = (ITEM_DETAIL_UPDATEStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.ITEM_NO == null) {
							if (other.ITEM_NO != null)
								return false;
						
						} else if (!this.ITEM_NO.equals(other.ITEM_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ITEM_DETAIL_UPDATEStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.ITEM_NO = this.ITEM_NO;
	            other.GRADE_CODE = this.GRADE_CODE;
	            other.VRPF_SVOP = this.VRPF_SVOP;
	            
	}

	public void copyKeysDataTo(ITEM_DETAIL_UPDATEStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.ITEM_NO = this.ITEM_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.GRADE_CODE = readString(dis);
					
					this.VRPF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.GRADE_CODE = readString(dis);
					
					this.VRPF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.GRADE_CODE,dos);
					
					// String
				
						writeString(this.VRPF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.GRADE_CODE,dos);
					
					// String
				
						writeString(this.VRPF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",ITEM_NO="+ITEM_NO);
		sb.append(",GRADE_CODE="+GRADE_CODE);
		sb.append(",VRPF_SVOP="+VRPF_SVOP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_NO);
            			}
            		
        			sb.append("|");
        		
        				if(GRADE_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(GRADE_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(VRPF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRPF_SVOP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(ITEM_DETAIL_UPDATEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ITEM_NO, other.ITEM_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public String VRITEM;

				public String getVRITEM () {
					return this.VRITEM;
				}
				
			    public String VRPGDL;

				public String getVRPGDL () {
					return this.VRPGDL;
				}
				
			    public String VRBCTR;

				public String getVRBCTR () {
					return this.VRBCTR;
				}
				
			    public BigDecimal VRPEXP;

				public BigDecimal getVRPEXP () {
					return this.VRPEXP;
				}
				
			    public String VRDNSB;

				public String getVRDNSB () {
					return this.VRDNSB;
				}
				
			    public String VRICMT;

				public String getVRICMT () {
					return this.VRICMT;
				}
				
			    public String VRCUNO;

				public String getVRCUNO () {
					return this.VRCUNO;
				}
				
			    public String VRALTI;

				public String getVRALTI () {
					return this.VRALTI;
				}
				
			    public BigDecimal VRMCUB;

				public BigDecimal getVRMCUB () {
					return this.VRMCUB;
				}
				
			    public String VRMITD;

				public String getVRMITD () {
					return this.VRMITD;
				}
				
			    public String VRMISZ;

				public String getVRMISZ () {
					return this.VRMISZ;
				}
				
			    public BigDecimal VRMINW;

				public BigDecimal getVRMINW () {
					return this.VRMINW;
				}
				
			    public BigDecimal VRMITT;

				public BigDecimal getVRMITT () {
					return this.VRMITT;
				}
				
			    public BigDecimal VRMIGW;

				public BigDecimal getVRMIGW () {
					return this.VRMIGW;
				}
				
			    public String VRUCCD;

				public String getVRUCCD () {
					return this.VRUCCD;
				}
				
			    public String VRGRDC;

				public String getVRGRDC () {
					return this.VRGRDC;
				}
				
			    public BigDecimal VREADT;

				public BigDecimal getVREADT () {
					return this.VREADT;
				}
				
			    public BigDecimal VREATM;

				public BigDecimal getVREATM () {
					return this.VREATM;
				}
				
			    public String VREAID;

				public String getVREAID () {
					return this.VREAID;
				}
				
			    public BigDecimal VRMODT;

				public BigDecimal getVRMODT () {
					return this.VRMODT;
				}
				
			    public BigDecimal VRMOTM;

				public BigDecimal getVRMOTM () {
					return this.VRMOTM;
				}
				
			    public String VRMOID;

				public String getVRMOID () {
					return this.VRMOID;
				}
				
			    public String VRMOPG;

				public String getVRMOPG () {
					return this.VRMOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.VRITEM = readString(dis);
					
					this.VRPGDL = readString(dis);
					
					this.VRBCTR = readString(dis);
					
						this.VRPEXP = (BigDecimal) dis.readObject();
					
					this.VRDNSB = readString(dis);
					
					this.VRICMT = readString(dis);
					
					this.VRCUNO = readString(dis);
					
					this.VRALTI = readString(dis);
					
						this.VRMCUB = (BigDecimal) dis.readObject();
					
					this.VRMITD = readString(dis);
					
					this.VRMISZ = readString(dis);
					
						this.VRMINW = (BigDecimal) dis.readObject();
					
						this.VRMITT = (BigDecimal) dis.readObject();
					
						this.VRMIGW = (BigDecimal) dis.readObject();
					
					this.VRUCCD = readString(dis);
					
					this.VRGRDC = readString(dis);
					
						this.VREADT = (BigDecimal) dis.readObject();
					
						this.VREATM = (BigDecimal) dis.readObject();
					
					this.VREAID = readString(dis);
					
						this.VRMODT = (BigDecimal) dis.readObject();
					
						this.VRMOTM = (BigDecimal) dis.readObject();
					
					this.VRMOID = readString(dis);
					
					this.VRMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.VRITEM = readString(dis);
					
					this.VRPGDL = readString(dis);
					
					this.VRBCTR = readString(dis);
					
						this.VRPEXP = (BigDecimal) dis.readObject();
					
					this.VRDNSB = readString(dis);
					
					this.VRICMT = readString(dis);
					
					this.VRCUNO = readString(dis);
					
					this.VRALTI = readString(dis);
					
						this.VRMCUB = (BigDecimal) dis.readObject();
					
					this.VRMITD = readString(dis);
					
					this.VRMISZ = readString(dis);
					
						this.VRMINW = (BigDecimal) dis.readObject();
					
						this.VRMITT = (BigDecimal) dis.readObject();
					
						this.VRMIGW = (BigDecimal) dis.readObject();
					
					this.VRUCCD = readString(dis);
					
					this.VRGRDC = readString(dis);
					
						this.VREADT = (BigDecimal) dis.readObject();
					
						this.VREATM = (BigDecimal) dis.readObject();
					
					this.VREAID = readString(dis);
					
						this.VRMODT = (BigDecimal) dis.readObject();
					
						this.VRMOTM = (BigDecimal) dis.readObject();
					
					this.VRMOID = readString(dis);
					
					this.VRMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VRITEM,dos);
					
					// String
				
						writeString(this.VRPGDL,dos);
					
					// String
				
						writeString(this.VRBCTR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRPEXP);
					
					// String
				
						writeString(this.VRDNSB,dos);
					
					// String
				
						writeString(this.VRICMT,dos);
					
					// String
				
						writeString(this.VRCUNO,dos);
					
					// String
				
						writeString(this.VRALTI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMCUB);
					
					// String
				
						writeString(this.VRMITD,dos);
					
					// String
				
						writeString(this.VRMISZ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMINW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMITT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMIGW);
					
					// String
				
						writeString(this.VRUCCD,dos);
					
					// String
				
						writeString(this.VRGRDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VREADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VREATM);
					
					// String
				
						writeString(this.VREAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMOTM);
					
					// String
				
						writeString(this.VRMOID,dos);
					
					// String
				
						writeString(this.VRMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VRITEM,dos);
					
					// String
				
						writeString(this.VRPGDL,dos);
					
					// String
				
						writeString(this.VRBCTR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRPEXP);
					
					// String
				
						writeString(this.VRDNSB,dos);
					
					// String
				
						writeString(this.VRICMT,dos);
					
					// String
				
						writeString(this.VRCUNO,dos);
					
					// String
				
						writeString(this.VRALTI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMCUB);
					
					// String
				
						writeString(this.VRMITD,dos);
					
					// String
				
						writeString(this.VRMISZ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMINW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMITT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMIGW);
					
					// String
				
						writeString(this.VRUCCD,dos);
					
					// String
				
						writeString(this.VRGRDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VREADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VREATM);
					
					// String
				
						writeString(this.VREAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMOTM);
					
					// String
				
						writeString(this.VRMOID,dos);
					
					// String
				
						writeString(this.VRMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VRITEM="+VRITEM);
		sb.append(",VRPGDL="+VRPGDL);
		sb.append(",VRBCTR="+VRBCTR);
		sb.append(",VRPEXP="+String.valueOf(VRPEXP));
		sb.append(",VRDNSB="+VRDNSB);
		sb.append(",VRICMT="+VRICMT);
		sb.append(",VRCUNO="+VRCUNO);
		sb.append(",VRALTI="+VRALTI);
		sb.append(",VRMCUB="+String.valueOf(VRMCUB));
		sb.append(",VRMITD="+VRMITD);
		sb.append(",VRMISZ="+VRMISZ);
		sb.append(",VRMINW="+String.valueOf(VRMINW));
		sb.append(",VRMITT="+String.valueOf(VRMITT));
		sb.append(",VRMIGW="+String.valueOf(VRMIGW));
		sb.append(",VRUCCD="+VRUCCD);
		sb.append(",VRGRDC="+VRGRDC);
		sb.append(",VREADT="+String.valueOf(VREADT));
		sb.append(",VREATM="+String.valueOf(VREATM));
		sb.append(",VREAID="+VREAID);
		sb.append(",VRMODT="+String.valueOf(VRMODT));
		sb.append(",VRMOTM="+String.valueOf(VRMOTM));
		sb.append(",VRMOID="+VRMOID);
		sb.append(",VRMOPG="+VRMOPG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(VRITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRITEM);
            			}
            		
        			sb.append("|");
        		
        				if(VRPGDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRPGDL);
            			}
            		
        			sb.append("|");
        		
        				if(VRBCTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRBCTR);
            			}
            		
        			sb.append("|");
        		
        				if(VRPEXP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRPEXP);
            			}
            		
        			sb.append("|");
        		
        				if(VRDNSB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRDNSB);
            			}
            		
        			sb.append("|");
        		
        				if(VRICMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRICMT);
            			}
            		
        			sb.append("|");
        		
        				if(VRCUNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRCUNO);
            			}
            		
        			sb.append("|");
        		
        				if(VRALTI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRALTI);
            			}
            		
        			sb.append("|");
        		
        				if(VRMCUB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMCUB);
            			}
            		
        			sb.append("|");
        		
        				if(VRMITD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMITD);
            			}
            		
        			sb.append("|");
        		
        				if(VRMISZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMISZ);
            			}
            		
        			sb.append("|");
        		
        				if(VRMINW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMINW);
            			}
            		
        			sb.append("|");
        		
        				if(VRMITT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMITT);
            			}
            		
        			sb.append("|");
        		
        				if(VRMIGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMIGW);
            			}
            		
        			sb.append("|");
        		
        				if(VRUCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRUCCD);
            			}
            		
        			sb.append("|");
        		
        				if(VRGRDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRGRDC);
            			}
            		
        			sb.append("|");
        		
        				if(VREADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VREADT);
            			}
            		
        			sb.append("|");
        		
        				if(VREATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VREATM);
            			}
            		
        			sb.append("|");
        		
        				if(VREAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VREAID);
            			}
            		
        			sb.append("|");
        		
        				if(VRMODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMODT);
            			}
            		
        			sb.append("|");
        		
        				if(VRMOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMOTM);
            			}
            		
        			sb.append("|");
        		
        				if(VRMOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMOID);
            			}
            		
        			sb.append("|");
        		
        				if(VRMOPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMOPG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
ITEM_DETAIL_UPDATEStruct ITEM_DETAIL_UPDATE = new ITEM_DETAIL_UPDATEStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_3");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ITEM_DETAIL_UPDATE");
					}
				
		int tos_count_tDBOutput_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_3 = new StringBuilder();
                    log4jParamters_tDBOutput_3.append("Parameters:");
                            log4jParamters_tDBOutput_3.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Master");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("TABLE" + " = " + "\"ITEM_DETAIL\"");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("DATA_ACTION" + " = " + "UPDATE");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_3.append(" | ");
                            log4jParamters_tDBOutput_3.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + (log4jParamters_tDBOutput_3) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_3().limitLog4jByte();
            }





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.GIM_Schema_Master;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("ITEM_DETAIL");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("ITEM_DETAIL");
}

        int updateKeyCount_tDBOutput_3 = 2;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 4 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_3 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_3 = context.GIM_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection attempts to '")  + (url_tDBOutput_3)  + ("' with the username '")  + (dbUser_tDBOutput_3)  + ("'.") );
    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection to '")  + (url_tDBOutput_3)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 1;
        int commitCounter_tDBOutput_3 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_3.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_3 = 1;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"GRADE_CODE\" = ?,\"VRPF_SVOP\" = ? WHERE \"SITE_ID\" = ? AND \"ITEM_NO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_5 = new StringBuilder();
                    log4jParamters_tMap_5.append("Parameters:");
                            log4jParamters_tMap_5.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + (log4jParamters_tMap_5) );
                    } 
                } 
            new BytesLimit65535_tMap_5().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row2_tMap_5 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_ITEM_DETAIL_UPDATE_tMap_5 = 0;
				
ITEM_DETAIL_UPDATEStruct ITEM_DETAIL_UPDATE_tmp = new ITEM_DETAIL_UPDATEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_2 = new StringBuilder();
                    log4jParamters_tDBInput_2.append("Parameters:");
                            log4jParamters_tDBInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TABLE" + " = " + "\"USIAVRPF\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("QUERY" + " = " + "\"SELECT    USIAVRPF.VRITEM,    USIAVRPF.VRPGDL,    USIAVRPF.VRBCTR,    USIAVRPF.VRPEXP,    USIAVRPF.VRDNSB,    USIAVRPF.VRICMT,    USIAVRPF.VRCUNO,    USIAVRPF.VRALTI,    USIAVRPF.VRMCUB,    USIAVRPF.VRMITD,    USIAVRPF.VRMISZ,    USIAVRPF.VRMINW,    USIAVRPF.VRMITT,    USIAVRPF.VRMIGW,    USIAVRPF.VRUCCD,    USIAVRPF.VRGRDC,    USIAVRPF.VREADT,    USIAVRPF.VREATM,    USIAVRPF.VREAID,    USIAVRPF.VRMODT,    USIAVRPF.VRMOTM,    USIAVRPF.VRMOID,    USIAVRPF.VRMOPG FROM USIAVRPF  ORDER BY USIAVRPF.VREADT DESC\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + (log4jParamters_tDBInput_2) );
                    } 
                } 
            new BytesLimit65535_tDBInput_2().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.SUS_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				  
				String url_tDBInput_2 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_2 - Driver ClassName: "+driverClass_tDBInput_2+".");
			
	    		log.debug("tDBInput_2 - Connection attempt to '" + url_tDBInput_2 + "' with the username '" + dbUser_tDBInput_2 + "'.");
			
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
	    		log.debug("tDBInput_2 - Connection to '" + url_tDBInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  USIAVRPF.VRITEM, \n  USIAVRPF.VRPGDL, \n  USIAVRPF.VRBCTR, \n  USIAVRPF.VRPEXP, \n  USIAVRPF.VRDNSB, \n  USIAVRPF."
+"VRICMT, \n  USIAVRPF.VRCUNO, \n  USIAVRPF.VRALTI, \n  USIAVRPF.VRMCUB, \n  USIAVRPF.VRMITD, \n  USIAVRPF.VRMISZ, \n  USIAVRPF."
+"VRMINW, \n  USIAVRPF.VRMITT, \n  USIAVRPF.VRMIGW, \n  USIAVRPF.VRUCCD, \n  USIAVRPF.VRGRDC, \n  USIAVRPF.VREADT, \n  USIAVRPF."
+"VREATM, \n  USIAVRPF.VREAID, \n  USIAVRPF.VRMODT, \n  USIAVRPF.VRMOTM, \n  USIAVRPF.VRMOID, \n  USIAVRPF.VRMOPG\nFROM USIAVRPF"
+"  ORDER BY USIAVRPF.VREADT DESC";
		    
	    		log.debug("tDBInput_2 - Executing the query: '" + dbquery_tDBInput_2 + "'.");
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    	log.debug("tDBInput_2 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.VRITEM = null;
							} else {
	                         		
        	row2.VRITEM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.VRPGDL = null;
							} else {
	                         		
        	row2.VRPGDL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.VRBCTR = null;
							} else {
	                         		
        	row2.VRBCTR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.VRPEXP = null;
							} else {
		                          
            row2.VRPEXP = rs_tDBInput_2.getBigDecimal(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.VRDNSB = null;
							} else {
	                         		
        	row2.VRDNSB = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.VRICMT = null;
							} else {
	                         		
        	row2.VRICMT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.VRCUNO = null;
							} else {
	                         		
        	row2.VRCUNO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.VRALTI = null;
							} else {
	                         		
        	row2.VRALTI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.VRMCUB = null;
							} else {
		                          
            row2.VRMCUB = rs_tDBInput_2.getBigDecimal(9);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.VRMITD = null;
							} else {
	                         		
        	row2.VRMITD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.VRMISZ = null;
							} else {
	                         		
        	row2.VRMISZ = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.VRMINW = null;
							} else {
		                          
            row2.VRMINW = rs_tDBInput_2.getBigDecimal(12);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.VRMITT = null;
							} else {
		                          
            row2.VRMITT = rs_tDBInput_2.getBigDecimal(13);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2.VRMIGW = null;
							} else {
		                          
            row2.VRMIGW = rs_tDBInput_2.getBigDecimal(14);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.VRUCCD = null;
							} else {
	                         		
        	row2.VRUCCD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2.VRGRDC = null;
							} else {
	                         		
        	row2.VRGRDC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.VREADT = null;
							} else {
		                          
            row2.VREADT = rs_tDBInput_2.getBigDecimal(17);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row2.VREATM = null;
							} else {
		                          
            row2.VREATM = rs_tDBInput_2.getBigDecimal(18);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row2.VREAID = null;
							} else {
	                         		
        	row2.VREAID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row2.VRMODT = null;
							} else {
		                          
            row2.VRMODT = rs_tDBInput_2.getBigDecimal(20);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row2.VRMOTM = null;
							} else {
		                          
            row2.VRMOTM = rs_tDBInput_2.getBigDecimal(21);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row2.VRMOID = null;
							} else {
	                         		
        	row2.VRMOID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row2.VRMOPG = null;
							} else {
	                         		
        	row2.VRMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, true);
		                    }
					
						log.debug("tDBInput_2 - Retrieving the record " + nb_line_tDBInput_2 + ".");
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row2 - " + (row2==null? "": row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

ITEM_DETAIL_UPDATE = null;


// # Output table : 'ITEM_DETAIL_UPDATE'
count_ITEM_DETAIL_UPDATE_tMap_5++;

ITEM_DETAIL_UPDATE_tmp.SITE_ID = context.opco;
ITEM_DETAIL_UPDATE_tmp.ITEM_NO = row2.VRITEM;
ITEM_DETAIL_UPDATE_tmp.GRADE_CODE = row2.VRGRDC ;
ITEM_DETAIL_UPDATE_tmp.VRPF_SVOP = context.svop;
ITEM_DETAIL_UPDATE = ITEM_DETAIL_UPDATE_tmp;
log.debug("tMap_5 - Outputting the record " + count_ITEM_DETAIL_UPDATE_tMap_5 + " of the output table 'ITEM_DETAIL_UPDATE'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "ITEM_DETAIL_UPDATE"
if(ITEM_DETAIL_UPDATE != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ITEM_DETAIL_UPDATE"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("ITEM_DETAIL_UPDATE - " + (ITEM_DETAIL_UPDATE==null? "": ITEM_DETAIL_UPDATE.toLogString()));
    			}
    		



        whetherReject_tDBOutput_3 = false;
                    if(ITEM_DETAIL_UPDATE.GRADE_CODE == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, ITEM_DETAIL_UPDATE.GRADE_CODE);
}

                    if(ITEM_DETAIL_UPDATE.VRPF_SVOP == null) {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(2, ITEM_DETAIL_UPDATE.VRPF_SVOP);
}

                    if(ITEM_DETAIL_UPDATE.SITE_ID == null) {
pstmt_tDBOutput_3.setNull(3 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(3 + count_tDBOutput_3, ITEM_DETAIL_UPDATE.SITE_ID);
}


                    if(ITEM_DETAIL_UPDATE.ITEM_NO == null) {
pstmt_tDBOutput_3.setNull(4 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4 + count_tDBOutput_3, ITEM_DETAIL_UPDATE.ITEM_NO);
}


    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Adding the record ")  + (nb_line_tDBOutput_3)  + (" to the ")  + ("UPDATE")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            log.error("tDBOutput_3 - "  + (errormessage_tDBOutput_3) );
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
                try {
                		int countSum_tDBOutput_3 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
            	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
                batchSizeCounter_tDBOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
			    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
			    	String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					}else{
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}
			    	
			    	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
					
			    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
			    	
            log.error("tDBOutput_3 - "  + (errormessage_tDBOutput_3) );
			    	System.err.println(errormessage_tDBOutput_3);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_3 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_3)  + (" record(s).") );
                    }
                    conn_tDBOutput_3.commit();
                    if(rowsToCommitCount_tDBOutput_3 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_3 = 0;
                    }
                    commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "ITEM_DETAIL_UPDATE"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
	    		log.debug("tDBInput_2 - Closing the connection to the database.");
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
	    		log.debug("tDBInput_2 - Retrieved records count: "+nb_line_tDBInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + ("Done.") );

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_2", end_Hash.get("tDBInput_2")-start_Hash.get("tDBInput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_5 - Written records count in the table 'ITEM_DETAIL_UPDATE': " + count_ITEM_DETAIL_UPDATE_tMap_5 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + ("Done.") );

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
			
	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
            log.error("tDBOutput_3 - "  + (errormessage_tDBOutput_3) );
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			if(rowsToCommitCount_tDBOutput_3 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_3)  + (" record(s).") );
			}
			conn_tDBOutput_3.commit();
			if(rowsToCommitCount_tDBOutput_3 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_3 = 0;
			}
			commitCounter_tDBOutput_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_3 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Has ")  + ("updated")  + (" ")  + (nb_line_update_tDBOutput_3)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ITEM_DETAIL_UPDATE");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Done.") );

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_3", end_Hash.get("tDBOutput_3")-start_Hash.get("tDBOutput_3"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tJava_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_3.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_3 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
            log.error("tDBOutput_3 - "  + (errorMessage_tDBOutput_3) );
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


System.out.println("Starting the Migrating Data from USIAVRPF to ITEM_DETAIL...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class ITEM_DETAIL_VRPFStruct implements routines.system.IPersistableRow<ITEM_DETAIL_VRPFStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String ITEM_NO;

				public String getITEM_NO () {
					return this.ITEM_NO;
				}
				
			    public String GRADE_CODE;

				public String getGRADE_CODE () {
					return this.GRADE_CODE;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String VRPF_SVOP;

				public String getVRPF_SVOP () {
					return this.VRPF_SVOP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.ITEM_NO == null) ? 0 : this.ITEM_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ITEM_DETAIL_VRPFStruct other = (ITEM_DETAIL_VRPFStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.ITEM_NO == null) {
							if (other.ITEM_NO != null)
								return false;
						
						} else if (!this.ITEM_NO.equals(other.ITEM_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ITEM_DETAIL_VRPFStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.ITEM_NO = this.ITEM_NO;
	            other.GRADE_CODE = this.GRADE_CODE;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.VRPF_SVOP = this.VRPF_SVOP;
	            
	}

	public void copyKeysDataTo(ITEM_DETAIL_VRPFStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.ITEM_NO = this.ITEM_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.GRADE_CODE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.VRPF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.GRADE_CODE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.VRPF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.GRADE_CODE,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.VRPF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.GRADE_CODE,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.VRPF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",ITEM_NO="+ITEM_NO);
		sb.append(",GRADE_CODE="+GRADE_CODE);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",VRPF_SVOP="+VRPF_SVOP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_NO);
            			}
            		
        			sb.append("|");
        		
        				if(GRADE_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(GRADE_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(IS_ACTIVE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_ACTIVE);
            			}
            		
        			sb.append("|");
        		
        				if(VRPF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRPF_SVOP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(ITEM_DETAIL_VRPFStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ITEM_NO, other.ITEM_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public String VRITEM;

				public String getVRITEM () {
					return this.VRITEM;
				}
				
			    public String VRPGDL;

				public String getVRPGDL () {
					return this.VRPGDL;
				}
				
			    public String VRBCTR;

				public String getVRBCTR () {
					return this.VRBCTR;
				}
				
			    public BigDecimal VRPEXP;

				public BigDecimal getVRPEXP () {
					return this.VRPEXP;
				}
				
			    public String VRDNSB;

				public String getVRDNSB () {
					return this.VRDNSB;
				}
				
			    public String VRICMT;

				public String getVRICMT () {
					return this.VRICMT;
				}
				
			    public String VRCUNO;

				public String getVRCUNO () {
					return this.VRCUNO;
				}
				
			    public String VRALTI;

				public String getVRALTI () {
					return this.VRALTI;
				}
				
			    public BigDecimal VRMCUB;

				public BigDecimal getVRMCUB () {
					return this.VRMCUB;
				}
				
			    public String VRMITD;

				public String getVRMITD () {
					return this.VRMITD;
				}
				
			    public String VRMISZ;

				public String getVRMISZ () {
					return this.VRMISZ;
				}
				
			    public BigDecimal VRMINW;

				public BigDecimal getVRMINW () {
					return this.VRMINW;
				}
				
			    public BigDecimal VRMITT;

				public BigDecimal getVRMITT () {
					return this.VRMITT;
				}
				
			    public BigDecimal VRMIGW;

				public BigDecimal getVRMIGW () {
					return this.VRMIGW;
				}
				
			    public String VRUCCD;

				public String getVRUCCD () {
					return this.VRUCCD;
				}
				
			    public String VRGRDC;

				public String getVRGRDC () {
					return this.VRGRDC;
				}
				
			    public BigDecimal VREADT;

				public BigDecimal getVREADT () {
					return this.VREADT;
				}
				
			    public BigDecimal VREATM;

				public BigDecimal getVREATM () {
					return this.VREATM;
				}
				
			    public String VREAID;

				public String getVREAID () {
					return this.VREAID;
				}
				
			    public BigDecimal VRMODT;

				public BigDecimal getVRMODT () {
					return this.VRMODT;
				}
				
			    public BigDecimal VRMOTM;

				public BigDecimal getVRMOTM () {
					return this.VRMOTM;
				}
				
			    public String VRMOID;

				public String getVRMOID () {
					return this.VRMOID;
				}
				
			    public String VRMOPG;

				public String getVRMOPG () {
					return this.VRMOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.VRITEM = readString(dis);
					
					this.VRPGDL = readString(dis);
					
					this.VRBCTR = readString(dis);
					
						this.VRPEXP = (BigDecimal) dis.readObject();
					
					this.VRDNSB = readString(dis);
					
					this.VRICMT = readString(dis);
					
					this.VRCUNO = readString(dis);
					
					this.VRALTI = readString(dis);
					
						this.VRMCUB = (BigDecimal) dis.readObject();
					
					this.VRMITD = readString(dis);
					
					this.VRMISZ = readString(dis);
					
						this.VRMINW = (BigDecimal) dis.readObject();
					
						this.VRMITT = (BigDecimal) dis.readObject();
					
						this.VRMIGW = (BigDecimal) dis.readObject();
					
					this.VRUCCD = readString(dis);
					
					this.VRGRDC = readString(dis);
					
						this.VREADT = (BigDecimal) dis.readObject();
					
						this.VREATM = (BigDecimal) dis.readObject();
					
					this.VREAID = readString(dis);
					
						this.VRMODT = (BigDecimal) dis.readObject();
					
						this.VRMOTM = (BigDecimal) dis.readObject();
					
					this.VRMOID = readString(dis);
					
					this.VRMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.VRITEM = readString(dis);
					
					this.VRPGDL = readString(dis);
					
					this.VRBCTR = readString(dis);
					
						this.VRPEXP = (BigDecimal) dis.readObject();
					
					this.VRDNSB = readString(dis);
					
					this.VRICMT = readString(dis);
					
					this.VRCUNO = readString(dis);
					
					this.VRALTI = readString(dis);
					
						this.VRMCUB = (BigDecimal) dis.readObject();
					
					this.VRMITD = readString(dis);
					
					this.VRMISZ = readString(dis);
					
						this.VRMINW = (BigDecimal) dis.readObject();
					
						this.VRMITT = (BigDecimal) dis.readObject();
					
						this.VRMIGW = (BigDecimal) dis.readObject();
					
					this.VRUCCD = readString(dis);
					
					this.VRGRDC = readString(dis);
					
						this.VREADT = (BigDecimal) dis.readObject();
					
						this.VREATM = (BigDecimal) dis.readObject();
					
					this.VREAID = readString(dis);
					
						this.VRMODT = (BigDecimal) dis.readObject();
					
						this.VRMOTM = (BigDecimal) dis.readObject();
					
					this.VRMOID = readString(dis);
					
					this.VRMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VRITEM,dos);
					
					// String
				
						writeString(this.VRPGDL,dos);
					
					// String
				
						writeString(this.VRBCTR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRPEXP);
					
					// String
				
						writeString(this.VRDNSB,dos);
					
					// String
				
						writeString(this.VRICMT,dos);
					
					// String
				
						writeString(this.VRCUNO,dos);
					
					// String
				
						writeString(this.VRALTI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMCUB);
					
					// String
				
						writeString(this.VRMITD,dos);
					
					// String
				
						writeString(this.VRMISZ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMINW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMITT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMIGW);
					
					// String
				
						writeString(this.VRUCCD,dos);
					
					// String
				
						writeString(this.VRGRDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VREADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VREATM);
					
					// String
				
						writeString(this.VREAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMOTM);
					
					// String
				
						writeString(this.VRMOID,dos);
					
					// String
				
						writeString(this.VRMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VRITEM,dos);
					
					// String
				
						writeString(this.VRPGDL,dos);
					
					// String
				
						writeString(this.VRBCTR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRPEXP);
					
					// String
				
						writeString(this.VRDNSB,dos);
					
					// String
				
						writeString(this.VRICMT,dos);
					
					// String
				
						writeString(this.VRCUNO,dos);
					
					// String
				
						writeString(this.VRALTI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMCUB);
					
					// String
				
						writeString(this.VRMITD,dos);
					
					// String
				
						writeString(this.VRMISZ,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMINW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMITT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMIGW);
					
					// String
				
						writeString(this.VRUCCD,dos);
					
					// String
				
						writeString(this.VRGRDC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VREADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VREATM);
					
					// String
				
						writeString(this.VREAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRMOTM);
					
					// String
				
						writeString(this.VRMOID,dos);
					
					// String
				
						writeString(this.VRMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VRITEM="+VRITEM);
		sb.append(",VRPGDL="+VRPGDL);
		sb.append(",VRBCTR="+VRBCTR);
		sb.append(",VRPEXP="+String.valueOf(VRPEXP));
		sb.append(",VRDNSB="+VRDNSB);
		sb.append(",VRICMT="+VRICMT);
		sb.append(",VRCUNO="+VRCUNO);
		sb.append(",VRALTI="+VRALTI);
		sb.append(",VRMCUB="+String.valueOf(VRMCUB));
		sb.append(",VRMITD="+VRMITD);
		sb.append(",VRMISZ="+VRMISZ);
		sb.append(",VRMINW="+String.valueOf(VRMINW));
		sb.append(",VRMITT="+String.valueOf(VRMITT));
		sb.append(",VRMIGW="+String.valueOf(VRMIGW));
		sb.append(",VRUCCD="+VRUCCD);
		sb.append(",VRGRDC="+VRGRDC);
		sb.append(",VREADT="+String.valueOf(VREADT));
		sb.append(",VREATM="+String.valueOf(VREATM));
		sb.append(",VREAID="+VREAID);
		sb.append(",VRMODT="+String.valueOf(VRMODT));
		sb.append(",VRMOTM="+String.valueOf(VRMOTM));
		sb.append(",VRMOID="+VRMOID);
		sb.append(",VRMOPG="+VRMOPG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(VRITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRITEM);
            			}
            		
        			sb.append("|");
        		
        				if(VRPGDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRPGDL);
            			}
            		
        			sb.append("|");
        		
        				if(VRBCTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRBCTR);
            			}
            		
        			sb.append("|");
        		
        				if(VRPEXP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRPEXP);
            			}
            		
        			sb.append("|");
        		
        				if(VRDNSB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRDNSB);
            			}
            		
        			sb.append("|");
        		
        				if(VRICMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRICMT);
            			}
            		
        			sb.append("|");
        		
        				if(VRCUNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRCUNO);
            			}
            		
        			sb.append("|");
        		
        				if(VRALTI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRALTI);
            			}
            		
        			sb.append("|");
        		
        				if(VRMCUB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMCUB);
            			}
            		
        			sb.append("|");
        		
        				if(VRMITD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMITD);
            			}
            		
        			sb.append("|");
        		
        				if(VRMISZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMISZ);
            			}
            		
        			sb.append("|");
        		
        				if(VRMINW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMINW);
            			}
            		
        			sb.append("|");
        		
        				if(VRMITT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMITT);
            			}
            		
        			sb.append("|");
        		
        				if(VRMIGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMIGW);
            			}
            		
        			sb.append("|");
        		
        				if(VRUCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRUCCD);
            			}
            		
        			sb.append("|");
        		
        				if(VRGRDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRGRDC);
            			}
            		
        			sb.append("|");
        		
        				if(VREADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VREADT);
            			}
            		
        			sb.append("|");
        		
        				if(VREATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VREATM);
            			}
            		
        			sb.append("|");
        		
        				if(VREAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VREAID);
            			}
            		
        			sb.append("|");
        		
        				if(VRMODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMODT);
            			}
            		
        			sb.append("|");
        		
        				if(VRMOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMOTM);
            			}
            		
        			sb.append("|");
        		
        				if(VRMOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMOID);
            			}
            		
        			sb.append("|");
        		
        				if(VRMOPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VRMOPG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
ITEM_DETAIL_VRPFStruct ITEM_DETAIL_VRPF = new ITEM_DETAIL_VRPFStruct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_5");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ITEM_DETAIL_VRPF");
					}
				
		int tos_count_tDBOutput_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_5 = new StringBuilder();
                    log4jParamters_tDBOutput_5.append("Parameters:");
                            log4jParamters_tDBOutput_5.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Master");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("TABLE" + " = " + "\"ITEM_DETAIL\"");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_5.append(" | ");
                            log4jParamters_tDBOutput_5.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + (log4jParamters_tDBOutput_5) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_5().limitLog4jByte();
            }





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.GIM_Schema_Master;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("ITEM_DETAIL");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("ITEM_DETAIL");
}


int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_5 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_5 = context.GIM_Password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection attempts to '")  + (url_tDBOutput_5)  + ("' with the username '")  + (dbUser_tDBOutput_5)  + ("'.") );
    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection to '")  + (url_tDBOutput_5)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 1;
        int commitCounter_tDBOutput_5 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_5.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_5 = 1;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"SITE_ID\",\"ITEM_NO\",\"GRADE_CODE\",\"IS_ACTIVE\",\"VRPF_SVOP\") VALUES (?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_7 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_7 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_7{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_7 = new StringBuilder();
                    log4jParamters_tMap_7.append("Parameters:");
                            log4jParamters_tMap_7.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_7.append(" | ");
                            log4jParamters_tMap_7.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_7.append(" | ");
                            log4jParamters_tMap_7.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_7.append(" | ");
                            log4jParamters_tMap_7.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_7.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_7 - "  + (log4jParamters_tMap_7) );
                    } 
                } 
            new BytesLimit65535_tMap_7().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row6_tMap_7 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_ITEM_DETAIL_VRPF_tMap_7 = 0;
				
ITEM_DETAIL_VRPFStruct ITEM_DETAIL_VRPF_tmp = new ITEM_DETAIL_VRPFStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_4");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_4 = new StringBuilder();
                    log4jParamters_tDBInput_4.append("Parameters:");
                            log4jParamters_tDBInput_4.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("TABLE" + " = " + "\"USIAVRPF\"");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("QUERY" + " = " + "\"SELECT    USIAVRPF.VRITEM,    USIAVRPF.VRPGDL,    USIAVRPF.VRBCTR,    USIAVRPF.VRPEXP,    USIAVRPF.VRDNSB,    USIAVRPF.VRICMT,    USIAVRPF.VRCUNO,    USIAVRPF.VRALTI,    USIAVRPF.VRMCUB,    USIAVRPF.VRMITD,    USIAVRPF.VRMISZ,    USIAVRPF.VRMINW,    USIAVRPF.VRMITT,    USIAVRPF.VRMIGW,    USIAVRPF.VRUCCD,    USIAVRPF.VRGRDC,    USIAVRPF.VREADT,    USIAVRPF.VREATM,    USIAVRPF.VREAID,    USIAVRPF.VRMODT,    USIAVRPF.VRMOTM,    USIAVRPF.VRMOID,    USIAVRPF.VRMOPG FROM USIAVRPF  ORDER BY USIAVRPF.VREADT DESC\"");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_4.append(" | ");
                            log4jParamters_tDBInput_4.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_4 - "  + (log4jParamters_tDBInput_4) );
                    } 
                } 
            new BytesLimit65535_tDBInput_4().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.SUS_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				  
				String url_tDBInput_4 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_4 - Driver ClassName: "+driverClass_tDBInput_4+".");
			
	    		log.debug("tDBInput_4 - Connection attempt to '" + url_tDBInput_4 + "' with the username '" + dbUser_tDBInput_4 + "'.");
			
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
	    		log.debug("tDBInput_4 - Connection to '" + url_tDBInput_4 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  USIAVRPF.VRITEM, \n  USIAVRPF.VRPGDL, \n  USIAVRPF.VRBCTR, \n  USIAVRPF.VRPEXP, \n  USIAVRPF.VRDNSB, \n  USIAVRPF."
+"VRICMT, \n  USIAVRPF.VRCUNO, \n  USIAVRPF.VRALTI, \n  USIAVRPF.VRMCUB, \n  USIAVRPF.VRMITD, \n  USIAVRPF.VRMISZ, \n  USIAVRPF."
+"VRMINW, \n  USIAVRPF.VRMITT, \n  USIAVRPF.VRMIGW, \n  USIAVRPF.VRUCCD, \n  USIAVRPF.VRGRDC, \n  USIAVRPF.VREADT, \n  USIAVRPF."
+"VREATM, \n  USIAVRPF.VREAID, \n  USIAVRPF.VRMODT, \n  USIAVRPF.VRMOTM, \n  USIAVRPF.VRMOID, \n  USIAVRPF.VRMOPG\nFROM USIAVRPF"
+"  ORDER BY USIAVRPF.VREADT DESC";
		    
	    		log.debug("tDBInput_4 - Executing the query: '" + dbquery_tDBInput_4 + "'.");
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    	log.debug("tDBInput_4 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row6.VRITEM = null;
							} else {
	                         		
        	row6.VRITEM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row6.VRPGDL = null;
							} else {
	                         		
        	row6.VRPGDL = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row6.VRBCTR = null;
							} else {
	                         		
        	row6.VRBCTR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row6.VRPEXP = null;
							} else {
		                          
            row6.VRPEXP = rs_tDBInput_4.getBigDecimal(4);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row6.VRDNSB = null;
							} else {
	                         		
        	row6.VRDNSB = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row6.VRICMT = null;
							} else {
	                         		
        	row6.VRICMT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row6.VRCUNO = null;
							} else {
	                         		
        	row6.VRCUNO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row6.VRALTI = null;
							} else {
	                         		
        	row6.VRALTI = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row6.VRMCUB = null;
							} else {
		                          
            row6.VRMCUB = rs_tDBInput_4.getBigDecimal(9);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row6.VRMITD = null;
							} else {
	                         		
        	row6.VRMITD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row6.VRMISZ = null;
							} else {
	                         		
        	row6.VRMISZ = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row6.VRMINW = null;
							} else {
		                          
            row6.VRMINW = rs_tDBInput_4.getBigDecimal(12);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row6.VRMITT = null;
							} else {
		                          
            row6.VRMITT = rs_tDBInput_4.getBigDecimal(13);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row6.VRMIGW = null;
							} else {
		                          
            row6.VRMIGW = rs_tDBInput_4.getBigDecimal(14);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row6.VRUCCD = null;
							} else {
	                         		
        	row6.VRUCCD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row6.VRGRDC = null;
							} else {
	                         		
        	row6.VRGRDC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 16, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row6.VREADT = null;
							} else {
		                          
            row6.VREADT = rs_tDBInput_4.getBigDecimal(17);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row6.VREATM = null;
							} else {
		                          
            row6.VREATM = rs_tDBInput_4.getBigDecimal(18);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row6.VREAID = null;
							} else {
	                         		
        	row6.VREAID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 19, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row6.VRMODT = null;
							} else {
		                          
            row6.VRMODT = rs_tDBInput_4.getBigDecimal(20);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row6.VRMOTM = null;
							} else {
		                          
            row6.VRMOTM = rs_tDBInput_4.getBigDecimal(21);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row6.VRMOID = null;
							} else {
	                         		
        	row6.VRMOID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 22, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row6.VRMOPG = null;
							} else {
	                         		
        	row6.VRMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_4, 23, true);
		                    }
					
						log.debug("tDBInput_4 - Retrieving the record " + nb_line_tDBInput_4 + ".");
					



 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row6 - " + (row6==null? "": row6.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

ITEM_DETAIL_VRPF = null;


// # Output table : 'ITEM_DETAIL_VRPF'
count_ITEM_DETAIL_VRPF_tMap_7++;

ITEM_DETAIL_VRPF_tmp.SITE_ID = context.opco;
ITEM_DETAIL_VRPF_tmp.ITEM_NO = row6.VRITEM;
ITEM_DETAIL_VRPF_tmp.GRADE_CODE = row6.VRGRDC ;
ITEM_DETAIL_VRPF_tmp.IS_ACTIVE = false;
ITEM_DETAIL_VRPF_tmp.VRPF_SVOP = context.svop;
ITEM_DETAIL_VRPF = ITEM_DETAIL_VRPF_tmp;
log.debug("tMap_7 - Outputting the record " + count_ITEM_DETAIL_VRPF_tMap_7 + " of the output table 'ITEM_DETAIL_VRPF'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "ITEM_DETAIL_VRPF"
if(ITEM_DETAIL_VRPF != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ITEM_DETAIL_VRPF"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("ITEM_DETAIL_VRPF - " + (ITEM_DETAIL_VRPF==null? "": ITEM_DETAIL_VRPF.toLogString()));
    			}
    		



        whetherReject_tDBOutput_5 = false;
                    if(ITEM_DETAIL_VRPF.SITE_ID == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, ITEM_DETAIL_VRPF.SITE_ID);
}

                    if(ITEM_DETAIL_VRPF.ITEM_NO == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, ITEM_DETAIL_VRPF.ITEM_NO);
}

                    if(ITEM_DETAIL_VRPF.GRADE_CODE == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(3, ITEM_DETAIL_VRPF.GRADE_CODE);
}

                    if(ITEM_DETAIL_VRPF.IS_ACTIVE == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(4, ITEM_DETAIL_VRPF.IS_ACTIVE);
}

                    if(ITEM_DETAIL_VRPF.VRPF_SVOP == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(5, ITEM_DETAIL_VRPF.VRPF_SVOP);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Adding the record ")  + (nb_line_tDBOutput_5)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            log.error("tDBOutput_5 - "  + (errormessage_tDBOutput_5) );
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                if ((batchSize_tDBOutput_5 > 0) && (batchSizeCounter_tDBOutput_5 > 0)) {
                try {
                		int countSum_tDBOutput_5 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
            	    	
            	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
            	    	
                batchSizeCounter_tDBOutput_5 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
			    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
			    	String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					}else{
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}
			    	
			    	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
					
			    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
			    	
            log.error("tDBOutput_5 - "  + (errormessage_tDBOutput_5) );
			    	System.err.println(errormessage_tDBOutput_5);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_5 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_5)  + (" record(s).") );
                    }
                    conn_tDBOutput_5.commit();
                    if(rowsToCommitCount_tDBOutput_5 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_5 = 0;
                    }
                    commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "ITEM_DETAIL_VRPF"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
	    		log.debug("tDBInput_4 - Closing the connection to the database.");
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_4 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
	    		log.debug("tDBInput_4 - Retrieved records count: "+nb_line_tDBInput_4 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_4 - "  + ("Done.") );

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_4", end_Hash.get("tDBInput_4")-start_Hash.get("tDBInput_4"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_7 - Written records count in the table 'ITEM_DETAIL_VRPF': " + count_ITEM_DETAIL_VRPF_tMap_7 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_7 - "  + ("Done.") );

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
			
	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
            log.error("tDBOutput_5 - "  + (errormessage_tDBOutput_5) );
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			if(rowsToCommitCount_tDBOutput_5 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_5)  + (" record(s).") );
			}
			conn_tDBOutput_5.commit();
			if(rowsToCommitCount_tDBOutput_5 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_5 = 0;
			}
			commitCounter_tDBOutput_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_5 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_5)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ITEM_DETAIL_VRPF");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Done.") );

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_5", end_Hash.get("tDBOutput_5")-start_Hash.get("tDBOutput_5"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_5.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_5 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
            log.error("tDBOutput_5 - "  + (errorMessage_tDBOutput_5) );
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println("Starting the Updating Data from USIAMLRF to ITEM_DETAIL...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class ITEM_DETAIL_UPDATE_MLRFStruct implements routines.system.IPersistableRow<ITEM_DETAIL_UPDATE_MLRFStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String ITEM_NO;

				public String getITEM_NO () {
					return this.ITEM_NO;
				}
				
			    public String ORGANIC_FLAG;

				public String getORGANIC_FLAG () {
					return this.ORGANIC_FLAG;
				}
				
			    public String CHILD_FLAG;

				public String getCHILD_FLAG () {
					return this.CHILD_FLAG;
				}
				
			    public String PARENT_ITEM;

				public String getPARENT_ITEM () {
					return this.PARENT_ITEM;
				}
				
			    public String MLRF_SVOP;

				public String getMLRF_SVOP () {
					return this.MLRF_SVOP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.ITEM_NO == null) ? 0 : this.ITEM_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ITEM_DETAIL_UPDATE_MLRFStruct other = (ITEM_DETAIL_UPDATE_MLRFStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.ITEM_NO == null) {
							if (other.ITEM_NO != null)
								return false;
						
						} else if (!this.ITEM_NO.equals(other.ITEM_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ITEM_DETAIL_UPDATE_MLRFStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.ITEM_NO = this.ITEM_NO;
	            other.ORGANIC_FLAG = this.ORGANIC_FLAG;
	            other.CHILD_FLAG = this.CHILD_FLAG;
	            other.PARENT_ITEM = this.PARENT_ITEM;
	            other.MLRF_SVOP = this.MLRF_SVOP;
	            
	}

	public void copyKeysDataTo(ITEM_DETAIL_UPDATE_MLRFStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.ITEM_NO = this.ITEM_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.ORGANIC_FLAG = readString(dis);
					
					this.CHILD_FLAG = readString(dis);
					
					this.PARENT_ITEM = readString(dis);
					
					this.MLRF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.ORGANIC_FLAG = readString(dis);
					
					this.CHILD_FLAG = readString(dis);
					
					this.PARENT_ITEM = readString(dis);
					
					this.MLRF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.ORGANIC_FLAG,dos);
					
					// String
				
						writeString(this.CHILD_FLAG,dos);
					
					// String
				
						writeString(this.PARENT_ITEM,dos);
					
					// String
				
						writeString(this.MLRF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.ORGANIC_FLAG,dos);
					
					// String
				
						writeString(this.CHILD_FLAG,dos);
					
					// String
				
						writeString(this.PARENT_ITEM,dos);
					
					// String
				
						writeString(this.MLRF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",ITEM_NO="+ITEM_NO);
		sb.append(",ORGANIC_FLAG="+ORGANIC_FLAG);
		sb.append(",CHILD_FLAG="+CHILD_FLAG);
		sb.append(",PARENT_ITEM="+PARENT_ITEM);
		sb.append(",MLRF_SVOP="+MLRF_SVOP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ORGANIC_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORGANIC_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CHILD_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CHILD_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PARENT_ITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARENT_ITEM);
            			}
            		
        			sb.append("|");
        		
        				if(MLRF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLRF_SVOP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(ITEM_DETAIL_UPDATE_MLRFStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ITEM_NO, other.ITEM_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public String MLITEM;

				public String getMLITEM () {
					return this.MLITEM;
				}
				
			    public String MLBYRP;

				public String getMLBYRP () {
					return this.MLBYRP;
				}
				
			    public String MLCOCO;

				public String getMLCOCO () {
					return this.MLCOCO;
				}
				
			    public String MLFUA1;

				public String getMLFUA1 () {
					return this.MLFUA1;
				}
				
			    public String MLFUA2;

				public String getMLFUA2 () {
					return this.MLFUA2;
				}
				
			    public String MLFUA3;

				public String getMLFUA3 () {
					return this.MLFUA3;
				}
				
			    public String MLFUF1;

				public String getMLFUF1 () {
					return this.MLFUF1;
				}
				
			    public String MLFUF2;

				public String getMLFUF2 () {
					return this.MLFUF2;
				}
				
			    public String MLFUF3;

				public String getMLFUF3 () {
					return this.MLFUF3;
				}
				
			    public BigDecimal MLFUN1;

				public BigDecimal getMLFUN1 () {
					return this.MLFUN1;
				}
				
			    public BigDecimal MLFUN2;

				public BigDecimal getMLFUN2 () {
					return this.MLFUN2;
				}
				
			    public BigDecimal MLFUN3;

				public BigDecimal getMLFUN3 () {
					return this.MLFUN3;
				}
				
			    public String MLOROR;

				public String getMLOROR () {
					return this.MLOROR;
				}
				
			    public String MLVATY;

				public String getMLVATY () {
					return this.MLVATY;
				}
				
			    public String MLVATF;

				public String getMLVATF () {
					return this.MLVATF;
				}
				
			    public String MLTRT1;

				public String getMLTRT1 () {
					return this.MLTRT1;
				}
				
			    public String MLSRCC;

				public String getMLSRCC () {
					return this.MLSRCC;
				}
				
			    public String MLCHFL;

				public String getMLCHFL () {
					return this.MLCHFL;
				}
				
			    public String MLOSPC;

				public String getMLOSPC () {
					return this.MLOSPC;
				}
				
			    public BigDecimal MLEADT;

				public BigDecimal getMLEADT () {
					return this.MLEADT;
				}
				
			    public BigDecimal MLEATM;

				public BigDecimal getMLEATM () {
					return this.MLEATM;
				}
				
			    public String MLEAID;

				public String getMLEAID () {
					return this.MLEAID;
				}
				
			    public String MLEAPG;

				public String getMLEAPG () {
					return this.MLEAPG;
				}
				
			    public BigDecimal MLMODT;

				public BigDecimal getMLMODT () {
					return this.MLMODT;
				}
				
			    public BigDecimal MLMOTM;

				public BigDecimal getMLMOTM () {
					return this.MLMOTM;
				}
				
			    public String MLMOID;

				public String getMLMOID () {
					return this.MLMOID;
				}
				
			    public String MLMOPG;

				public String getMLMOPG () {
					return this.MLMOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.MLITEM = readString(dis);
					
					this.MLBYRP = readString(dis);
					
					this.MLCOCO = readString(dis);
					
					this.MLFUA1 = readString(dis);
					
					this.MLFUA2 = readString(dis);
					
					this.MLFUA3 = readString(dis);
					
					this.MLFUF1 = readString(dis);
					
					this.MLFUF2 = readString(dis);
					
					this.MLFUF3 = readString(dis);
					
						this.MLFUN1 = (BigDecimal) dis.readObject();
					
						this.MLFUN2 = (BigDecimal) dis.readObject();
					
						this.MLFUN3 = (BigDecimal) dis.readObject();
					
					this.MLOROR = readString(dis);
					
					this.MLVATY = readString(dis);
					
					this.MLVATF = readString(dis);
					
					this.MLTRT1 = readString(dis);
					
					this.MLSRCC = readString(dis);
					
					this.MLCHFL = readString(dis);
					
					this.MLOSPC = readString(dis);
					
						this.MLEADT = (BigDecimal) dis.readObject();
					
						this.MLEATM = (BigDecimal) dis.readObject();
					
					this.MLEAID = readString(dis);
					
					this.MLEAPG = readString(dis);
					
						this.MLMODT = (BigDecimal) dis.readObject();
					
						this.MLMOTM = (BigDecimal) dis.readObject();
					
					this.MLMOID = readString(dis);
					
					this.MLMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.MLITEM = readString(dis);
					
					this.MLBYRP = readString(dis);
					
					this.MLCOCO = readString(dis);
					
					this.MLFUA1 = readString(dis);
					
					this.MLFUA2 = readString(dis);
					
					this.MLFUA3 = readString(dis);
					
					this.MLFUF1 = readString(dis);
					
					this.MLFUF2 = readString(dis);
					
					this.MLFUF3 = readString(dis);
					
						this.MLFUN1 = (BigDecimal) dis.readObject();
					
						this.MLFUN2 = (BigDecimal) dis.readObject();
					
						this.MLFUN3 = (BigDecimal) dis.readObject();
					
					this.MLOROR = readString(dis);
					
					this.MLVATY = readString(dis);
					
					this.MLVATF = readString(dis);
					
					this.MLTRT1 = readString(dis);
					
					this.MLSRCC = readString(dis);
					
					this.MLCHFL = readString(dis);
					
					this.MLOSPC = readString(dis);
					
						this.MLEADT = (BigDecimal) dis.readObject();
					
						this.MLEATM = (BigDecimal) dis.readObject();
					
					this.MLEAID = readString(dis);
					
					this.MLEAPG = readString(dis);
					
						this.MLMODT = (BigDecimal) dis.readObject();
					
						this.MLMOTM = (BigDecimal) dis.readObject();
					
					this.MLMOID = readString(dis);
					
					this.MLMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MLITEM,dos);
					
					// String
				
						writeString(this.MLBYRP,dos);
					
					// String
				
						writeString(this.MLCOCO,dos);
					
					// String
				
						writeString(this.MLFUA1,dos);
					
					// String
				
						writeString(this.MLFUA2,dos);
					
					// String
				
						writeString(this.MLFUA3,dos);
					
					// String
				
						writeString(this.MLFUF1,dos);
					
					// String
				
						writeString(this.MLFUF2,dos);
					
					// String
				
						writeString(this.MLFUF3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN3);
					
					// String
				
						writeString(this.MLOROR,dos);
					
					// String
				
						writeString(this.MLVATY,dos);
					
					// String
				
						writeString(this.MLVATF,dos);
					
					// String
				
						writeString(this.MLTRT1,dos);
					
					// String
				
						writeString(this.MLSRCC,dos);
					
					// String
				
						writeString(this.MLCHFL,dos);
					
					// String
				
						writeString(this.MLOSPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLEADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLEATM);
					
					// String
				
						writeString(this.MLEAID,dos);
					
					// String
				
						writeString(this.MLEAPG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLMOTM);
					
					// String
				
						writeString(this.MLMOID,dos);
					
					// String
				
						writeString(this.MLMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.MLITEM,dos);
					
					// String
				
						writeString(this.MLBYRP,dos);
					
					// String
				
						writeString(this.MLCOCO,dos);
					
					// String
				
						writeString(this.MLFUA1,dos);
					
					// String
				
						writeString(this.MLFUA2,dos);
					
					// String
				
						writeString(this.MLFUA3,dos);
					
					// String
				
						writeString(this.MLFUF1,dos);
					
					// String
				
						writeString(this.MLFUF2,dos);
					
					// String
				
						writeString(this.MLFUF3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN3);
					
					// String
				
						writeString(this.MLOROR,dos);
					
					// String
				
						writeString(this.MLVATY,dos);
					
					// String
				
						writeString(this.MLVATF,dos);
					
					// String
				
						writeString(this.MLTRT1,dos);
					
					// String
				
						writeString(this.MLSRCC,dos);
					
					// String
				
						writeString(this.MLCHFL,dos);
					
					// String
				
						writeString(this.MLOSPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLEADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLEATM);
					
					// String
				
						writeString(this.MLEAID,dos);
					
					// String
				
						writeString(this.MLEAPG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLMOTM);
					
					// String
				
						writeString(this.MLMOID,dos);
					
					// String
				
						writeString(this.MLMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MLITEM="+MLITEM);
		sb.append(",MLBYRP="+MLBYRP);
		sb.append(",MLCOCO="+MLCOCO);
		sb.append(",MLFUA1="+MLFUA1);
		sb.append(",MLFUA2="+MLFUA2);
		sb.append(",MLFUA3="+MLFUA3);
		sb.append(",MLFUF1="+MLFUF1);
		sb.append(",MLFUF2="+MLFUF2);
		sb.append(",MLFUF3="+MLFUF3);
		sb.append(",MLFUN1="+String.valueOf(MLFUN1));
		sb.append(",MLFUN2="+String.valueOf(MLFUN2));
		sb.append(",MLFUN3="+String.valueOf(MLFUN3));
		sb.append(",MLOROR="+MLOROR);
		sb.append(",MLVATY="+MLVATY);
		sb.append(",MLVATF="+MLVATF);
		sb.append(",MLTRT1="+MLTRT1);
		sb.append(",MLSRCC="+MLSRCC);
		sb.append(",MLCHFL="+MLCHFL);
		sb.append(",MLOSPC="+MLOSPC);
		sb.append(",MLEADT="+String.valueOf(MLEADT));
		sb.append(",MLEATM="+String.valueOf(MLEATM));
		sb.append(",MLEAID="+MLEAID);
		sb.append(",MLEAPG="+MLEAPG);
		sb.append(",MLMODT="+String.valueOf(MLMODT));
		sb.append(",MLMOTM="+String.valueOf(MLMOTM));
		sb.append(",MLMOID="+MLMOID);
		sb.append(",MLMOPG="+MLMOPG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(MLITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLITEM);
            			}
            		
        			sb.append("|");
        		
        				if(MLBYRP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLBYRP);
            			}
            		
        			sb.append("|");
        		
        				if(MLCOCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLCOCO);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUA1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUA1);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUA2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUA2);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUA3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUA3);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUF1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUF1);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUF2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUF2);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUF3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUF3);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUN1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUN1);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUN2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUN2);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUN3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUN3);
            			}
            		
        			sb.append("|");
        		
        				if(MLOROR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLOROR);
            			}
            		
        			sb.append("|");
        		
        				if(MLVATY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLVATY);
            			}
            		
        			sb.append("|");
        		
        				if(MLVATF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLVATF);
            			}
            		
        			sb.append("|");
        		
        				if(MLTRT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLTRT1);
            			}
            		
        			sb.append("|");
        		
        				if(MLSRCC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLSRCC);
            			}
            		
        			sb.append("|");
        		
        				if(MLCHFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLCHFL);
            			}
            		
        			sb.append("|");
        		
        				if(MLOSPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLOSPC);
            			}
            		
        			sb.append("|");
        		
        				if(MLEADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLEADT);
            			}
            		
        			sb.append("|");
        		
        				if(MLEATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLEATM);
            			}
            		
        			sb.append("|");
        		
        				if(MLEAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLEAID);
            			}
            		
        			sb.append("|");
        		
        				if(MLEAPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLEAPG);
            			}
            		
        			sb.append("|");
        		
        				if(MLMODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLMODT);
            			}
            		
        			sb.append("|");
        		
        				if(MLMOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLMOTM);
            			}
            		
        			sb.append("|");
        		
        				if(MLMOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLMOID);
            			}
            		
        			sb.append("|");
        		
        				if(MLMOPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLMOPG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
ITEM_DETAIL_UPDATE_MLRFStruct ITEM_DETAIL_UPDATE_MLRF = new ITEM_DETAIL_UPDATE_MLRFStruct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_4");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ITEM_DETAIL_UPDATE_MLRF");
					}
				
		int tos_count_tDBOutput_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_4 = new StringBuilder();
                    log4jParamters_tDBOutput_4.append("Parameters:");
                            log4jParamters_tDBOutput_4.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Master");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("TABLE" + " = " + "\"ITEM_DETAIL\"");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("DATA_ACTION" + " = " + "UPDATE");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_4.append(" | ");
                            log4jParamters_tDBOutput_4.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + (log4jParamters_tDBOutput_4) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_4().limitLog4jByte();
            }





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.GIM_Schema_Master;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("ITEM_DETAIL");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("ITEM_DETAIL");
}

        int updateKeyCount_tDBOutput_4 = 2;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_4 == 6 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_4 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_4 = context.GIM_Password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection attempts to '")  + (url_tDBOutput_4)  + ("' with the username '")  + (dbUser_tDBOutput_4)  + ("'.") );
    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection to '")  + (url_tDBOutput_4)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 1;
        int commitCounter_tDBOutput_4 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_4.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_4 = 1;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"ORGANIC_FLAG\" = ?,\"CHILD_FLAG\" = ?,\"PARENT_ITEM\" = ?,\"MLRF_SVOP\" = ? WHERE \"SITE_ID\" = ? AND \"ITEM_NO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_6 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_6 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_6{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_6 = new StringBuilder();
                    log4jParamters_tMap_6.append("Parameters:");
                            log4jParamters_tMap_6.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_6.append(" | ");
                            log4jParamters_tMap_6.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_6.append(" | ");
                            log4jParamters_tMap_6.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_6.append(" | ");
                            log4jParamters_tMap_6.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_6.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_6 - "  + (log4jParamters_tMap_6) );
                    } 
                } 
            new BytesLimit65535_tMap_6().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row3_tMap_6 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_ITEM_DETAIL_UPDATE_MLRF_tMap_6 = 0;
				
ITEM_DETAIL_UPDATE_MLRFStruct ITEM_DETAIL_UPDATE_MLRF_tmp = new ITEM_DETAIL_UPDATE_MLRFStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_3");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_3 = new StringBuilder();
                    log4jParamters_tDBInput_3.append("Parameters:");
                            log4jParamters_tDBInput_3.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("TABLE" + " = " + "\"USIAMLRF\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("QUERY" + " = " + "\"SELECT    USIAMLRF.MLITEM,    USIAMLRF.MLBYRP,    USIAMLRF.MLCOCO,    USIAMLRF.MLFUA1,    USIAMLRF.MLFUA2,    USIAMLRF.MLFUA3,    USIAMLRF.MLFUF1,    USIAMLRF.MLFUF2,    USIAMLRF.MLFUF3,    USIAMLRF.MLFUN1,    USIAMLRF.MLFUN2,    USIAMLRF.MLFUN3,    USIAMLRF.MLOROR,    USIAMLRF.MLVATY,    USIAMLRF.MLVATF,    USIAMLRF.MLTRT1,    USIAMLRF.MLSRCC,    USIAMLRF.MLCHFL,    USIAMLRF.MLOSPC,    USIAMLRF.MLEADT,    USIAMLRF.MLEATM,    USIAMLRF.MLEAID,    USIAMLRF.MLEAPG,    USIAMLRF.MLMODT,    USIAMLRF.MLMOTM,    USIAMLRF.MLMOID,    USIAMLRF.MLMOPG FROM USIAMLRF ORDER BY USIAMLRF.MLEADT DESC\"");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_3.append(" | ");
                            log4jParamters_tDBInput_3.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + (log4jParamters_tDBInput_3) );
                    } 
                } 
            new BytesLimit65535_tDBInput_3().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.SUS_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				  
				String url_tDBInput_3 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_3 - Driver ClassName: "+driverClass_tDBInput_3+".");
			
	    		log.debug("tDBInput_3 - Connection attempt to '" + url_tDBInput_3 + "' with the username '" + dbUser_tDBInput_3 + "'.");
			
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
	    		log.debug("tDBInput_3 - Connection to '" + url_tDBInput_3 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  USIAMLRF.MLITEM, \n  USIAMLRF.MLBYRP, \n  USIAMLRF.MLCOCO, \n  USIAMLRF.MLFUA1, \n  USIAMLRF.MLFUA2, \n  USIAMLRF."
+"MLFUA3, \n  USIAMLRF.MLFUF1, \n  USIAMLRF.MLFUF2, \n  USIAMLRF.MLFUF3, \n  USIAMLRF.MLFUN1, \n  USIAMLRF.MLFUN2, \n  USIAMLRF."
+"MLFUN3, \n  USIAMLRF.MLOROR, \n  USIAMLRF.MLVATY, \n  USIAMLRF.MLVATF, \n  USIAMLRF.MLTRT1, \n  USIAMLRF.MLSRCC, \n  USIAMLRF."
+"MLCHFL, \n  USIAMLRF.MLOSPC, \n  USIAMLRF.MLEADT, \n  USIAMLRF.MLEATM, \n  USIAMLRF.MLEAID, \n  USIAMLRF.MLEAPG, \n  USIAMLRF."
+"MLMODT, \n  USIAMLRF.MLMOTM, \n  USIAMLRF.MLMOID, \n  USIAMLRF.MLMOPG\nFROM USIAMLRF ORDER BY USIAMLRF.MLEADT DESC";
		    
	    		log.debug("tDBInput_3 - Executing the query: '" + dbquery_tDBInput_3 + "'.");
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    	log.debug("tDBInput_3 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.MLITEM = null;
							} else {
	                         		
        	row3.MLITEM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.MLBYRP = null;
							} else {
	                         		
        	row3.MLBYRP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.MLCOCO = null;
							} else {
	                         		
        	row3.MLCOCO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.MLFUA1 = null;
							} else {
	                         		
        	row3.MLFUA1 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.MLFUA2 = null;
							} else {
	                         		
        	row3.MLFUA2 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row3.MLFUA3 = null;
							} else {
	                         		
        	row3.MLFUA3 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row3.MLFUF1 = null;
							} else {
	                         		
        	row3.MLFUF1 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row3.MLFUF2 = null;
							} else {
	                         		
        	row3.MLFUF2 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row3.MLFUF3 = null;
							} else {
	                         		
        	row3.MLFUF3 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row3.MLFUN1 = null;
							} else {
		                          
            row3.MLFUN1 = rs_tDBInput_3.getBigDecimal(10);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row3.MLFUN2 = null;
							} else {
		                          
            row3.MLFUN2 = rs_tDBInput_3.getBigDecimal(11);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row3.MLFUN3 = null;
							} else {
		                          
            row3.MLFUN3 = rs_tDBInput_3.getBigDecimal(12);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row3.MLOROR = null;
							} else {
	                         		
        	row3.MLOROR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row3.MLVATY = null;
							} else {
	                         		
        	row3.MLVATY = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row3.MLVATF = null;
							} else {
	                         		
        	row3.MLVATF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row3.MLTRT1 = null;
							} else {
	                         		
        	row3.MLTRT1 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row3.MLSRCC = null;
							} else {
	                         		
        	row3.MLSRCC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row3.MLCHFL = null;
							} else {
	                         		
        	row3.MLCHFL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row3.MLOSPC = null;
							} else {
	                         		
        	row3.MLOSPC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row3.MLEADT = null;
							} else {
		                          
            row3.MLEADT = rs_tDBInput_3.getBigDecimal(20);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row3.MLEATM = null;
							} else {
		                          
            row3.MLEATM = rs_tDBInput_3.getBigDecimal(21);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row3.MLEAID = null;
							} else {
	                         		
        	row3.MLEAID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 22, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row3.MLEAPG = null;
							} else {
	                         		
        	row3.MLEAPG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row3.MLMODT = null;
							} else {
		                          
            row3.MLMODT = rs_tDBInput_3.getBigDecimal(24);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row3.MLMOTM = null;
							} else {
		                          
            row3.MLMOTM = rs_tDBInput_3.getBigDecimal(25);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 26) {
								row3.MLMOID = null;
							} else {
	                         		
        	row3.MLMOID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 26, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 27) {
								row3.MLMOPG = null;
							} else {
	                         		
        	row3.MLMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 27, true);
		                    }
					
						log.debug("tDBInput_3 - Retrieving the record " + nb_line_tDBInput_3 + ".");
					



 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3 - " + (row3==null? "": row3.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

ITEM_DETAIL_UPDATE_MLRF = null;


// # Output table : 'ITEM_DETAIL_UPDATE_MLRF'
count_ITEM_DETAIL_UPDATE_MLRF_tMap_6++;

ITEM_DETAIL_UPDATE_MLRF_tmp.SITE_ID = context.opco;
ITEM_DETAIL_UPDATE_MLRF_tmp.ITEM_NO = row3.MLITEM ;
ITEM_DETAIL_UPDATE_MLRF_tmp.ORGANIC_FLAG = row3.MLOROR ;
ITEM_DETAIL_UPDATE_MLRF_tmp.CHILD_FLAG = row3.MLCHFL ;
ITEM_DETAIL_UPDATE_MLRF_tmp.PARENT_ITEM = row3.MLOSPC ;
ITEM_DETAIL_UPDATE_MLRF_tmp.MLRF_SVOP = context.svop;
ITEM_DETAIL_UPDATE_MLRF = ITEM_DETAIL_UPDATE_MLRF_tmp;
log.debug("tMap_6 - Outputting the record " + count_ITEM_DETAIL_UPDATE_MLRF_tMap_6 + " of the output table 'ITEM_DETAIL_UPDATE_MLRF'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "ITEM_DETAIL_UPDATE_MLRF"
if(ITEM_DETAIL_UPDATE_MLRF != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ITEM_DETAIL_UPDATE_MLRF"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("ITEM_DETAIL_UPDATE_MLRF - " + (ITEM_DETAIL_UPDATE_MLRF==null? "": ITEM_DETAIL_UPDATE_MLRF.toLogString()));
    			}
    		



        whetherReject_tDBOutput_4 = false;
                    if(ITEM_DETAIL_UPDATE_MLRF.ORGANIC_FLAG == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, ITEM_DETAIL_UPDATE_MLRF.ORGANIC_FLAG);
}

                    if(ITEM_DETAIL_UPDATE_MLRF.CHILD_FLAG == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, ITEM_DETAIL_UPDATE_MLRF.CHILD_FLAG);
}

                    if(ITEM_DETAIL_UPDATE_MLRF.PARENT_ITEM == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, ITEM_DETAIL_UPDATE_MLRF.PARENT_ITEM);
}

                    if(ITEM_DETAIL_UPDATE_MLRF.MLRF_SVOP == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, ITEM_DETAIL_UPDATE_MLRF.MLRF_SVOP);
}

                    if(ITEM_DETAIL_UPDATE_MLRF.SITE_ID == null) {
pstmt_tDBOutput_4.setNull(5 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5 + count_tDBOutput_4, ITEM_DETAIL_UPDATE_MLRF.SITE_ID);
}


                    if(ITEM_DETAIL_UPDATE_MLRF.ITEM_NO == null) {
pstmt_tDBOutput_4.setNull(6 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6 + count_tDBOutput_4, ITEM_DETAIL_UPDATE_MLRF.ITEM_NO);
}


    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Adding the record ")  + (nb_line_tDBOutput_4)  + (" to the ")  + ("UPDATE")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            log.error("tDBOutput_4 - "  + (errormessage_tDBOutput_4) );
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                if ((batchSize_tDBOutput_4 > 0) && (batchSizeCounter_tDBOutput_4 > 0)) {
                try {
                		int countSum_tDBOutput_4 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
            	    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
                batchSizeCounter_tDBOutput_4 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
			    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
			    	String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					}else{
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}
			    	
			    	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
					
			    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
			    	
            log.error("tDBOutput_4 - "  + (errormessage_tDBOutput_4) );
			    	System.err.println(errormessage_tDBOutput_4);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_4)  + (" record(s).") );
                    }
                    conn_tDBOutput_4.commit();
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_4 = 0;
                    }
                    commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "ITEM_DETAIL_UPDATE_MLRF"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
	    		log.debug("tDBInput_3 - Closing the connection to the database.");
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_3 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
	    		log.debug("tDBInput_3 - Retrieved records count: "+nb_line_tDBInput_3 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_3 - "  + ("Done.") );

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_3", end_Hash.get("tDBInput_3")-start_Hash.get("tDBInput_3"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_6 - Written records count in the table 'ITEM_DETAIL_UPDATE_MLRF': " + count_ITEM_DETAIL_UPDATE_MLRF_tMap_6 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_6 - "  + ("Done.") );

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
				}
		    	
		    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
			
	    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
            log.error("tDBOutput_4 - "  + (errormessage_tDBOutput_4) );
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			if(rowsToCommitCount_tDBOutput_4 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_4)  + (" record(s).") );
			}
			conn_tDBOutput_4.commit();
			if(rowsToCommitCount_tDBOutput_4 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_4 = 0;
			}
			commitCounter_tDBOutput_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_4 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Has ")  + ("updated")  + (" ")  + (nb_line_update_tDBOutput_4)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ITEM_DETAIL_UPDATE_MLRF");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Done.") );

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_4", end_Hash.get("tDBOutput_4")-start_Hash.get("tDBOutput_4"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tJava_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_4.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_4 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
            log.error("tDBOutput_4 - "  + (errorMessage_tDBOutput_4) );
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


System.out.println("Starting the Migrating Data from USIAMLRF to ITEM_DETAIL...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tDBInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class ITEM_DETAIL_MLRFStruct implements routines.system.IPersistableRow<ITEM_DETAIL_MLRFStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String ITEM_NO;

				public String getITEM_NO () {
					return this.ITEM_NO;
				}
				
			    public String ORGANIC_FLAG;

				public String getORGANIC_FLAG () {
					return this.ORGANIC_FLAG;
				}
				
			    public String CHILD_FLAG;

				public String getCHILD_FLAG () {
					return this.CHILD_FLAG;
				}
				
			    public String PARENT_ITEM;

				public String getPARENT_ITEM () {
					return this.PARENT_ITEM;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String MLRF_SVOP;

				public String getMLRF_SVOP () {
					return this.MLRF_SVOP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.ITEM_NO == null) ? 0 : this.ITEM_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ITEM_DETAIL_MLRFStruct other = (ITEM_DETAIL_MLRFStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.ITEM_NO == null) {
							if (other.ITEM_NO != null)
								return false;
						
						} else if (!this.ITEM_NO.equals(other.ITEM_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ITEM_DETAIL_MLRFStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.ITEM_NO = this.ITEM_NO;
	            other.ORGANIC_FLAG = this.ORGANIC_FLAG;
	            other.CHILD_FLAG = this.CHILD_FLAG;
	            other.PARENT_ITEM = this.PARENT_ITEM;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.MLRF_SVOP = this.MLRF_SVOP;
	            
	}

	public void copyKeysDataTo(ITEM_DETAIL_MLRFStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.ITEM_NO = this.ITEM_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.ORGANIC_FLAG = readString(dis);
					
					this.CHILD_FLAG = readString(dis);
					
					this.PARENT_ITEM = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.MLRF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.ORGANIC_FLAG = readString(dis);
					
					this.CHILD_FLAG = readString(dis);
					
					this.PARENT_ITEM = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.MLRF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.ORGANIC_FLAG,dos);
					
					// String
				
						writeString(this.CHILD_FLAG,dos);
					
					// String
				
						writeString(this.PARENT_ITEM,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.MLRF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.ORGANIC_FLAG,dos);
					
					// String
				
						writeString(this.CHILD_FLAG,dos);
					
					// String
				
						writeString(this.PARENT_ITEM,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.MLRF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",ITEM_NO="+ITEM_NO);
		sb.append(",ORGANIC_FLAG="+ORGANIC_FLAG);
		sb.append(",CHILD_FLAG="+CHILD_FLAG);
		sb.append(",PARENT_ITEM="+PARENT_ITEM);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",MLRF_SVOP="+MLRF_SVOP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ORGANIC_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORGANIC_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CHILD_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CHILD_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PARENT_ITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARENT_ITEM);
            			}
            		
        			sb.append("|");
        		
        				if(IS_ACTIVE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_ACTIVE);
            			}
            		
        			sb.append("|");
        		
        				if(MLRF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLRF_SVOP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(ITEM_DETAIL_MLRFStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ITEM_NO, other.ITEM_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public String MLITEM;

				public String getMLITEM () {
					return this.MLITEM;
				}
				
			    public String MLBYRP;

				public String getMLBYRP () {
					return this.MLBYRP;
				}
				
			    public String MLCOCO;

				public String getMLCOCO () {
					return this.MLCOCO;
				}
				
			    public String MLFUA1;

				public String getMLFUA1 () {
					return this.MLFUA1;
				}
				
			    public String MLFUA2;

				public String getMLFUA2 () {
					return this.MLFUA2;
				}
				
			    public String MLFUA3;

				public String getMLFUA3 () {
					return this.MLFUA3;
				}
				
			    public String MLFUF1;

				public String getMLFUF1 () {
					return this.MLFUF1;
				}
				
			    public String MLFUF2;

				public String getMLFUF2 () {
					return this.MLFUF2;
				}
				
			    public String MLFUF3;

				public String getMLFUF3 () {
					return this.MLFUF3;
				}
				
			    public BigDecimal MLFUN1;

				public BigDecimal getMLFUN1 () {
					return this.MLFUN1;
				}
				
			    public BigDecimal MLFUN2;

				public BigDecimal getMLFUN2 () {
					return this.MLFUN2;
				}
				
			    public BigDecimal MLFUN3;

				public BigDecimal getMLFUN3 () {
					return this.MLFUN3;
				}
				
			    public String MLOROR;

				public String getMLOROR () {
					return this.MLOROR;
				}
				
			    public String MLVATY;

				public String getMLVATY () {
					return this.MLVATY;
				}
				
			    public String MLVATF;

				public String getMLVATF () {
					return this.MLVATF;
				}
				
			    public String MLTRT1;

				public String getMLTRT1 () {
					return this.MLTRT1;
				}
				
			    public String MLSRCC;

				public String getMLSRCC () {
					return this.MLSRCC;
				}
				
			    public String MLCHFL;

				public String getMLCHFL () {
					return this.MLCHFL;
				}
				
			    public String MLOSPC;

				public String getMLOSPC () {
					return this.MLOSPC;
				}
				
			    public BigDecimal MLEADT;

				public BigDecimal getMLEADT () {
					return this.MLEADT;
				}
				
			    public BigDecimal MLEATM;

				public BigDecimal getMLEATM () {
					return this.MLEATM;
				}
				
			    public String MLEAID;

				public String getMLEAID () {
					return this.MLEAID;
				}
				
			    public String MLEAPG;

				public String getMLEAPG () {
					return this.MLEAPG;
				}
				
			    public BigDecimal MLMODT;

				public BigDecimal getMLMODT () {
					return this.MLMODT;
				}
				
			    public BigDecimal MLMOTM;

				public BigDecimal getMLMOTM () {
					return this.MLMOTM;
				}
				
			    public String MLMOID;

				public String getMLMOID () {
					return this.MLMOID;
				}
				
			    public String MLMOPG;

				public String getMLMOPG () {
					return this.MLMOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.MLITEM = readString(dis);
					
					this.MLBYRP = readString(dis);
					
					this.MLCOCO = readString(dis);
					
					this.MLFUA1 = readString(dis);
					
					this.MLFUA2 = readString(dis);
					
					this.MLFUA3 = readString(dis);
					
					this.MLFUF1 = readString(dis);
					
					this.MLFUF2 = readString(dis);
					
					this.MLFUF3 = readString(dis);
					
						this.MLFUN1 = (BigDecimal) dis.readObject();
					
						this.MLFUN2 = (BigDecimal) dis.readObject();
					
						this.MLFUN3 = (BigDecimal) dis.readObject();
					
					this.MLOROR = readString(dis);
					
					this.MLVATY = readString(dis);
					
					this.MLVATF = readString(dis);
					
					this.MLTRT1 = readString(dis);
					
					this.MLSRCC = readString(dis);
					
					this.MLCHFL = readString(dis);
					
					this.MLOSPC = readString(dis);
					
						this.MLEADT = (BigDecimal) dis.readObject();
					
						this.MLEATM = (BigDecimal) dis.readObject();
					
					this.MLEAID = readString(dis);
					
					this.MLEAPG = readString(dis);
					
						this.MLMODT = (BigDecimal) dis.readObject();
					
						this.MLMOTM = (BigDecimal) dis.readObject();
					
					this.MLMOID = readString(dis);
					
					this.MLMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.MLITEM = readString(dis);
					
					this.MLBYRP = readString(dis);
					
					this.MLCOCO = readString(dis);
					
					this.MLFUA1 = readString(dis);
					
					this.MLFUA2 = readString(dis);
					
					this.MLFUA3 = readString(dis);
					
					this.MLFUF1 = readString(dis);
					
					this.MLFUF2 = readString(dis);
					
					this.MLFUF3 = readString(dis);
					
						this.MLFUN1 = (BigDecimal) dis.readObject();
					
						this.MLFUN2 = (BigDecimal) dis.readObject();
					
						this.MLFUN3 = (BigDecimal) dis.readObject();
					
					this.MLOROR = readString(dis);
					
					this.MLVATY = readString(dis);
					
					this.MLVATF = readString(dis);
					
					this.MLTRT1 = readString(dis);
					
					this.MLSRCC = readString(dis);
					
					this.MLCHFL = readString(dis);
					
					this.MLOSPC = readString(dis);
					
						this.MLEADT = (BigDecimal) dis.readObject();
					
						this.MLEATM = (BigDecimal) dis.readObject();
					
					this.MLEAID = readString(dis);
					
					this.MLEAPG = readString(dis);
					
						this.MLMODT = (BigDecimal) dis.readObject();
					
						this.MLMOTM = (BigDecimal) dis.readObject();
					
					this.MLMOID = readString(dis);
					
					this.MLMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MLITEM,dos);
					
					// String
				
						writeString(this.MLBYRP,dos);
					
					// String
				
						writeString(this.MLCOCO,dos);
					
					// String
				
						writeString(this.MLFUA1,dos);
					
					// String
				
						writeString(this.MLFUA2,dos);
					
					// String
				
						writeString(this.MLFUA3,dos);
					
					// String
				
						writeString(this.MLFUF1,dos);
					
					// String
				
						writeString(this.MLFUF2,dos);
					
					// String
				
						writeString(this.MLFUF3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN3);
					
					// String
				
						writeString(this.MLOROR,dos);
					
					// String
				
						writeString(this.MLVATY,dos);
					
					// String
				
						writeString(this.MLVATF,dos);
					
					// String
				
						writeString(this.MLTRT1,dos);
					
					// String
				
						writeString(this.MLSRCC,dos);
					
					// String
				
						writeString(this.MLCHFL,dos);
					
					// String
				
						writeString(this.MLOSPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLEADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLEATM);
					
					// String
				
						writeString(this.MLEAID,dos);
					
					// String
				
						writeString(this.MLEAPG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLMOTM);
					
					// String
				
						writeString(this.MLMOID,dos);
					
					// String
				
						writeString(this.MLMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.MLITEM,dos);
					
					// String
				
						writeString(this.MLBYRP,dos);
					
					// String
				
						writeString(this.MLCOCO,dos);
					
					// String
				
						writeString(this.MLFUA1,dos);
					
					// String
				
						writeString(this.MLFUA2,dos);
					
					// String
				
						writeString(this.MLFUA3,dos);
					
					// String
				
						writeString(this.MLFUF1,dos);
					
					// String
				
						writeString(this.MLFUF2,dos);
					
					// String
				
						writeString(this.MLFUF3,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN2);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLFUN3);
					
					// String
				
						writeString(this.MLOROR,dos);
					
					// String
				
						writeString(this.MLVATY,dos);
					
					// String
				
						writeString(this.MLVATF,dos);
					
					// String
				
						writeString(this.MLTRT1,dos);
					
					// String
				
						writeString(this.MLSRCC,dos);
					
					// String
				
						writeString(this.MLCHFL,dos);
					
					// String
				
						writeString(this.MLOSPC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLEADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLEATM);
					
					// String
				
						writeString(this.MLEAID,dos);
					
					// String
				
						writeString(this.MLEAPG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MLMOTM);
					
					// String
				
						writeString(this.MLMOID,dos);
					
					// String
				
						writeString(this.MLMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MLITEM="+MLITEM);
		sb.append(",MLBYRP="+MLBYRP);
		sb.append(",MLCOCO="+MLCOCO);
		sb.append(",MLFUA1="+MLFUA1);
		sb.append(",MLFUA2="+MLFUA2);
		sb.append(",MLFUA3="+MLFUA3);
		sb.append(",MLFUF1="+MLFUF1);
		sb.append(",MLFUF2="+MLFUF2);
		sb.append(",MLFUF3="+MLFUF3);
		sb.append(",MLFUN1="+String.valueOf(MLFUN1));
		sb.append(",MLFUN2="+String.valueOf(MLFUN2));
		sb.append(",MLFUN3="+String.valueOf(MLFUN3));
		sb.append(",MLOROR="+MLOROR);
		sb.append(",MLVATY="+MLVATY);
		sb.append(",MLVATF="+MLVATF);
		sb.append(",MLTRT1="+MLTRT1);
		sb.append(",MLSRCC="+MLSRCC);
		sb.append(",MLCHFL="+MLCHFL);
		sb.append(",MLOSPC="+MLOSPC);
		sb.append(",MLEADT="+String.valueOf(MLEADT));
		sb.append(",MLEATM="+String.valueOf(MLEATM));
		sb.append(",MLEAID="+MLEAID);
		sb.append(",MLEAPG="+MLEAPG);
		sb.append(",MLMODT="+String.valueOf(MLMODT));
		sb.append(",MLMOTM="+String.valueOf(MLMOTM));
		sb.append(",MLMOID="+MLMOID);
		sb.append(",MLMOPG="+MLMOPG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(MLITEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLITEM);
            			}
            		
        			sb.append("|");
        		
        				if(MLBYRP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLBYRP);
            			}
            		
        			sb.append("|");
        		
        				if(MLCOCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLCOCO);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUA1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUA1);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUA2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUA2);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUA3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUA3);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUF1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUF1);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUF2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUF2);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUF3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUF3);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUN1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUN1);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUN2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUN2);
            			}
            		
        			sb.append("|");
        		
        				if(MLFUN3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLFUN3);
            			}
            		
        			sb.append("|");
        		
        				if(MLOROR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLOROR);
            			}
            		
        			sb.append("|");
        		
        				if(MLVATY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLVATY);
            			}
            		
        			sb.append("|");
        		
        				if(MLVATF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLVATF);
            			}
            		
        			sb.append("|");
        		
        				if(MLTRT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLTRT1);
            			}
            		
        			sb.append("|");
        		
        				if(MLSRCC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLSRCC);
            			}
            		
        			sb.append("|");
        		
        				if(MLCHFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLCHFL);
            			}
            		
        			sb.append("|");
        		
        				if(MLOSPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLOSPC);
            			}
            		
        			sb.append("|");
        		
        				if(MLEADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLEADT);
            			}
            		
        			sb.append("|");
        		
        				if(MLEATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLEATM);
            			}
            		
        			sb.append("|");
        		
        				if(MLEAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLEAID);
            			}
            		
        			sb.append("|");
        		
        				if(MLEAPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLEAPG);
            			}
            		
        			sb.append("|");
        		
        				if(MLMODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLMODT);
            			}
            		
        			sb.append("|");
        		
        				if(MLMOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLMOTM);
            			}
            		
        			sb.append("|");
        		
        				if(MLMOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLMOID);
            			}
            		
        			sb.append("|");
        		
        				if(MLMOPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MLMOPG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
ITEM_DETAIL_MLRFStruct ITEM_DETAIL_MLRF = new ITEM_DETAIL_MLRFStruct();





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_6");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ITEM_DETAIL_MLRF");
					}
				
		int tos_count_tDBOutput_6 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_6{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_6 = new StringBuilder();
                    log4jParamters_tDBOutput_6.append("Parameters:");
                            log4jParamters_tDBOutput_6.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Master");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("TABLE" + " = " + "\"ITEM_DETAIL\"");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_6.append(" | ");
                            log4jParamters_tDBOutput_6.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_6.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + (log4jParamters_tDBOutput_6) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_6().limitLog4jByte();
            }





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = context.GIM_Schema_Master;
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("ITEM_DETAIL");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("ITEM_DETAIL");
}


int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_6 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_6 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_6 = context.GIM_Password; 

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection attempts to '")  + (url_tDBOutput_6)  + ("' with the username '")  + (dbUser_tDBOutput_6)  + ("'.") );
    conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection to '")  + (url_tDBOutput_6)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 1;
        int commitCounter_tDBOutput_6 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_6.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_6 = 1;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
	    String insert_tDBOutput_6 = "INSERT INTO \"" + tableName_tDBOutput_6 + "\" (\"SITE_ID\",\"ITEM_NO\",\"ORGANIC_FLAG\",\"CHILD_FLAG\",\"PARENT_ITEM\",\"IS_ACTIVE\",\"MLRF_SVOP\") VALUES (?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_8 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_8 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_8{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_8 = new StringBuilder();
                    log4jParamters_tMap_8.append("Parameters:");
                            log4jParamters_tMap_8.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_8.append(" | ");
                            log4jParamters_tMap_8.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_8.append(" | ");
                            log4jParamters_tMap_8.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_8.append(" | ");
                            log4jParamters_tMap_8.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_8.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_8 - "  + (log4jParamters_tMap_8) );
                    } 
                } 
            new BytesLimit65535_tMap_8().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row7_tMap_8 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_ITEM_DETAIL_MLRF_tMap_8 = 0;
				
ITEM_DETAIL_MLRFStruct ITEM_DETAIL_MLRF_tmp = new ITEM_DETAIL_MLRFStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_5");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_5 = new StringBuilder();
                    log4jParamters_tDBInput_5.append("Parameters:");
                            log4jParamters_tDBInput_5.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("TABLE" + " = " + "\"USIAMLRF\"");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("QUERY" + " = " + "\"SELECT    USIAMLRF.MLITEM,    USIAMLRF.MLBYRP,    USIAMLRF.MLCOCO,    USIAMLRF.MLFUA1,    USIAMLRF.MLFUA2,    USIAMLRF.MLFUA3,    USIAMLRF.MLFUF1,    USIAMLRF.MLFUF2,    USIAMLRF.MLFUF3,    USIAMLRF.MLFUN1,    USIAMLRF.MLFUN2,    USIAMLRF.MLFUN3,    USIAMLRF.MLOROR,    USIAMLRF.MLVATY,    USIAMLRF.MLVATF,    USIAMLRF.MLTRT1,    USIAMLRF.MLSRCC,    USIAMLRF.MLCHFL,    USIAMLRF.MLOSPC,    USIAMLRF.MLEADT,    USIAMLRF.MLEATM,    USIAMLRF.MLEAID,    USIAMLRF.MLEAPG,    USIAMLRF.MLMODT,    USIAMLRF.MLMOTM,    USIAMLRF.MLMOID,    USIAMLRF.MLMOPG FROM USIAMLRF ORDER BY USIAMLRF.MLEADT DESC\"");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_5.append(" | ");
                            log4jParamters_tDBInput_5.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_5 - "  + (log4jParamters_tDBInput_5) );
                    } 
                } 
            new BytesLimit65535_tDBInput_5().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.SUS_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				  
				String url_tDBInput_5 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_5 - Driver ClassName: "+driverClass_tDBInput_5+".");
			
	    		log.debug("tDBInput_5 - Connection attempt to '" + url_tDBInput_5 + "' with the username '" + dbUser_tDBInput_5 + "'.");
			
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
	    		log.debug("tDBInput_5 - Connection to '" + url_tDBInput_5 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  USIAMLRF.MLITEM, \n  USIAMLRF.MLBYRP, \n  USIAMLRF.MLCOCO, \n  USIAMLRF.MLFUA1, \n  USIAMLRF.MLFUA2, \n  USIAMLRF."
+"MLFUA3, \n  USIAMLRF.MLFUF1, \n  USIAMLRF.MLFUF2, \n  USIAMLRF.MLFUF3, \n  USIAMLRF.MLFUN1, \n  USIAMLRF.MLFUN2, \n  USIAMLRF."
+"MLFUN3, \n  USIAMLRF.MLOROR, \n  USIAMLRF.MLVATY, \n  USIAMLRF.MLVATF, \n  USIAMLRF.MLTRT1, \n  USIAMLRF.MLSRCC, \n  USIAMLRF."
+"MLCHFL, \n  USIAMLRF.MLOSPC, \n  USIAMLRF.MLEADT, \n  USIAMLRF.MLEATM, \n  USIAMLRF.MLEAID, \n  USIAMLRF.MLEAPG, \n  USIAMLRF."
+"MLMODT, \n  USIAMLRF.MLMOTM, \n  USIAMLRF.MLMOID, \n  USIAMLRF.MLMOPG\nFROM USIAMLRF ORDER BY USIAMLRF.MLEADT DESC";
		    
	    		log.debug("tDBInput_5 - Executing the query: '" + dbquery_tDBInput_5 + "'.");
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    	log.debug("tDBInput_5 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row7.MLITEM = null;
							} else {
	                         		
        	row7.MLITEM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row7.MLBYRP = null;
							} else {
	                         		
        	row7.MLBYRP = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row7.MLCOCO = null;
							} else {
	                         		
        	row7.MLCOCO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row7.MLFUA1 = null;
							} else {
	                         		
        	row7.MLFUA1 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row7.MLFUA2 = null;
							} else {
	                         		
        	row7.MLFUA2 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row7.MLFUA3 = null;
							} else {
	                         		
        	row7.MLFUA3 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row7.MLFUF1 = null;
							} else {
	                         		
        	row7.MLFUF1 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 7, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row7.MLFUF2 = null;
							} else {
	                         		
        	row7.MLFUF2 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 8, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row7.MLFUF3 = null;
							} else {
	                         		
        	row7.MLFUF3 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 9, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row7.MLFUN1 = null;
							} else {
		                          
            row7.MLFUN1 = rs_tDBInput_5.getBigDecimal(10);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row7.MLFUN2 = null;
							} else {
		                          
            row7.MLFUN2 = rs_tDBInput_5.getBigDecimal(11);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row7.MLFUN3 = null;
							} else {
		                          
            row7.MLFUN3 = rs_tDBInput_5.getBigDecimal(12);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row7.MLOROR = null;
							} else {
	                         		
        	row7.MLOROR = routines.system.JDBCUtil.getString(rs_tDBInput_5, 13, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row7.MLVATY = null;
							} else {
	                         		
        	row7.MLVATY = routines.system.JDBCUtil.getString(rs_tDBInput_5, 14, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row7.MLVATF = null;
							} else {
	                         		
        	row7.MLVATF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 15, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row7.MLTRT1 = null;
							} else {
	                         		
        	row7.MLTRT1 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 16, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row7.MLSRCC = null;
							} else {
	                         		
        	row7.MLSRCC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 17, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row7.MLCHFL = null;
							} else {
	                         		
        	row7.MLCHFL = routines.system.JDBCUtil.getString(rs_tDBInput_5, 18, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row7.MLOSPC = null;
							} else {
	                         		
        	row7.MLOSPC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 19, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row7.MLEADT = null;
							} else {
		                          
            row7.MLEADT = rs_tDBInput_5.getBigDecimal(20);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row7.MLEATM = null;
							} else {
		                          
            row7.MLEATM = rs_tDBInput_5.getBigDecimal(21);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row7.MLEAID = null;
							} else {
	                         		
        	row7.MLEAID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 22, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 23) {
								row7.MLEAPG = null;
							} else {
	                         		
        	row7.MLEAPG = routines.system.JDBCUtil.getString(rs_tDBInput_5, 23, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 24) {
								row7.MLMODT = null;
							} else {
		                          
            row7.MLMODT = rs_tDBInput_5.getBigDecimal(24);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 25) {
								row7.MLMOTM = null;
							} else {
		                          
            row7.MLMOTM = rs_tDBInput_5.getBigDecimal(25);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 26) {
								row7.MLMOID = null;
							} else {
	                         		
        	row7.MLMOID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 26, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 27) {
								row7.MLMOPG = null;
							} else {
	                         		
        	row7.MLMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_5, 27, true);
		                    }
					
						log.debug("tDBInput_5 - Retrieving the record " + nb_line_tDBInput_5 + ".");
					



 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row7 - " + (row7==null? "": row7.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

ITEM_DETAIL_MLRF = null;


// # Output table : 'ITEM_DETAIL_MLRF'
count_ITEM_DETAIL_MLRF_tMap_8++;

ITEM_DETAIL_MLRF_tmp.SITE_ID = context.opco;
ITEM_DETAIL_MLRF_tmp.ITEM_NO = row7.MLITEM ;
ITEM_DETAIL_MLRF_tmp.ORGANIC_FLAG = row7.MLOROR ;
ITEM_DETAIL_MLRF_tmp.CHILD_FLAG = row7.MLCHFL ;
ITEM_DETAIL_MLRF_tmp.PARENT_ITEM = row7.MLOSPC ;
ITEM_DETAIL_MLRF_tmp.IS_ACTIVE = false;
ITEM_DETAIL_MLRF_tmp.MLRF_SVOP = context.svop;
ITEM_DETAIL_MLRF = ITEM_DETAIL_MLRF_tmp;
log.debug("tMap_8 - Outputting the record " + count_ITEM_DETAIL_MLRF_tMap_8 + " of the output table 'ITEM_DETAIL_MLRF'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "ITEM_DETAIL_MLRF"
if(ITEM_DETAIL_MLRF != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ITEM_DETAIL_MLRF"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("ITEM_DETAIL_MLRF - " + (ITEM_DETAIL_MLRF==null? "": ITEM_DETAIL_MLRF.toLogString()));
    			}
    		



        whetherReject_tDBOutput_6 = false;
                    if(ITEM_DETAIL_MLRF.SITE_ID == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, ITEM_DETAIL_MLRF.SITE_ID);
}

                    if(ITEM_DETAIL_MLRF.ITEM_NO == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, ITEM_DETAIL_MLRF.ITEM_NO);
}

                    if(ITEM_DETAIL_MLRF.ORGANIC_FLAG == null) {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(3, ITEM_DETAIL_MLRF.ORGANIC_FLAG);
}

                    if(ITEM_DETAIL_MLRF.CHILD_FLAG == null) {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(4, ITEM_DETAIL_MLRF.CHILD_FLAG);
}

                    if(ITEM_DETAIL_MLRF.PARENT_ITEM == null) {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(5, ITEM_DETAIL_MLRF.PARENT_ITEM);
}

                    if(ITEM_DETAIL_MLRF.IS_ACTIVE == null) {
pstmt_tDBOutput_6.setNull(6, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_6.setBoolean(6, ITEM_DETAIL_MLRF.IS_ACTIVE);
}

                    if(ITEM_DETAIL_MLRF.MLRF_SVOP == null) {
pstmt_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(7, ITEM_DETAIL_MLRF.MLRF_SVOP);
}

			
    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Adding the record ")  + (nb_line_tDBOutput_6)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_6++;
    		  
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            log.error("tDBOutput_6 - "  + (errormessage_tDBOutput_6) );
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                if ((batchSize_tDBOutput_6 > 0) && (batchSizeCounter_tDBOutput_6 > 0)) {
                try {
                		int countSum_tDBOutput_6 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
            	    	
            	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
            	    	
                batchSizeCounter_tDBOutput_6 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
			    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
			    	String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
					}else{
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}
			    	
			    	int countSum_tDBOutput_6 = 0;
					for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
					
			    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
			    	
            log.error("tDBOutput_6 - "  + (errormessage_tDBOutput_6) );
			    	System.err.println(errormessage_tDBOutput_6);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_6 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_6)  + (" record(s).") );
                    }
                    conn_tDBOutput_6.commit();
                    if(rowsToCommitCount_tDBOutput_6 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_6 = 0;
                    }
                    commitCounter_tDBOutput_6=0;
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "ITEM_DETAIL_MLRF"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
	    		log.debug("tDBInput_5 - Closing the connection to the database.");
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_5 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
	    		log.debug("tDBInput_5 - Retrieved records count: "+nb_line_tDBInput_5 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_5 - "  + ("Done.") );

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_5", end_Hash.get("tDBInput_5")-start_Hash.get("tDBInput_5"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_8 - Written records count in the table 'ITEM_DETAIL_MLRF': " + count_ITEM_DETAIL_MLRF_tMap_8 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_8 - "  + ("Done.") );

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
			
	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
            log.error("tDBOutput_6 - "  + (errormessage_tDBOutput_6) );
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
			if(rowsToCommitCount_tDBOutput_6 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_6)  + (" record(s).") );
			}
			conn_tDBOutput_6.commit();
			if(rowsToCommitCount_tDBOutput_6 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_6 = 0;
			}
			commitCounter_tDBOutput_6 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_6 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_6", true);
    	

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_6)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ITEM_DETAIL_MLRF");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Done.") );

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_6", end_Hash.get("tDBOutput_6")-start_Hash.get("tDBOutput_6"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_6.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_6 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
            log.error("tDBOutput_6 - "  + (errorMessage_tDBOutput_6) );
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class Main_StatStruct implements routines.system.IPersistableRow<Main_StatStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_StatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
Main_StatStruct Main_Stat = new Main_StatStruct();





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Stat");
					}
				
		int tos_count_tLogRow_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_3 = new StringBuilder();
                    log4jParamters_tLogRow_3.append("Parameters:");
                            log4jParamters_tLogRow_3.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + (log4jParamters_tLogRow_3) );
                    } 
                } 
            new BytesLimit65535_tLogRow_3().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[7];

        public void addRow(String[] row) {

            for (int i = 0; i < 7; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 6 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 6 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[6] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("tLogRow_3");
        util_tLogRow_3.addRow(new String[]{"moment","pid","job","origin","message_type","message","duration",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_2 = new StringBuilder();
                    log4jParamters_tMap_2.append("Parameters:");
                            log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + (log4jParamters_tMap_2) );
                    } 
                } 
            new BytesLimit65535_tMap_2().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row4_tMap_2 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Stat_tMap_2 = 0;
				
Main_StatStruct Main_Stat_tmp = new Main_StatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tStatCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tStatCatcher_1 = new StringBuilder();
                    log4jParamters_tStatCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + (log4jParamters_tStatCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tStatCatcher_1().limitLog4jByte();
            }

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row4.pid = pid;
		row4.root_pid = rootPid;
		row4.father_pid = fatherPid;	
    	row4.project = projectName;
    	row4.job = jobName;
    	row4.context = contextStr;
		row4.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row4.message = scm.getMessage();
		row4.duration = scm.getDuration();
		row4.moment = scm.getMoment();
		row4.message_type = scm.getMessageType();
		row4.job_version = scm.getJobVersion();
		row4.job_repository_id = scm.getJobId();
		row4.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row4 - " + (row4==null? "": row4.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Main_Stat = null;


// # Output table : 'Main_Stat'
count_Main_Stat_tMap_2++;

Main_Stat_tmp.moment = row4.moment;
Main_Stat_tmp.pid = row4.pid;
Main_Stat_tmp.job = row4.job;
Main_Stat_tmp.origin = row4.origin;
Main_Stat_tmp.message_type = row4.message_type;
Main_Stat_tmp.message = row4.message;
Main_Stat_tmp.duration = row4.duration ;
Main_Stat = Main_Stat_tmp;
log.debug("tMap_2 - Outputting the record " + count_Main_Stat_tMap_2 + " of the output table 'Main_Stat'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Main_Stat"
if(Main_Stat != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Stat"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Stat - " + (Main_Stat==null? "": Main_Stat.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[7];
   				
	    		if(Main_Stat.moment != null) { //              
                 row_tLogRow_3[0]=    						
								FormatterUtils.format_Date(Main_Stat.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.pid != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(Main_Stat.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.job != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(Main_Stat.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.origin != null) { //              
                 row_tLogRow_3[3]=    						    
				                String.valueOf(Main_Stat.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message_type != null) { //              
                 row_tLogRow_3[4]=    						    
				                String.valueOf(Main_Stat.message_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message != null) { //              
                 row_tLogRow_3[5]=    						    
				                String.valueOf(Main_Stat.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.duration != null) { //              
                 row_tLogRow_3[6]=    						    
				                String.valueOf(Main_Stat.duration)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
                	log.info("tLogRow_3 - Content of row "+nb_line_tLogRow_3+": " + TalendString.unionString("|",row_tLogRow_3));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "Main_Stat"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Done.") );

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'Main_Stat': " + count_Main_Stat_tMap_2 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Done.") );

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);
                if(log.isInfoEnabled())
            log.info("tLogRow_3 - "  + ("Printed row count: ")  + (nb_line_tLogRow_3)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Stat");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Done.") );

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_LogStruct implements routines.system.IPersistableRow<Main_LogStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_LogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
Main_LogStruct Main_Log = new Main_LogStruct();





	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Log");
					}
				
		int tos_count_tLogRow_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_4 = new StringBuilder();
                    log4jParamters_tLogRow_4.append("Parameters:");
                            log4jParamters_tLogRow_4.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + (log4jParamters_tLogRow_4) );
                    } 
                } 
            new BytesLimit65535_tLogRow_4().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = "|";
		java.io.PrintStream consoleOut_tLogRow_4 = null;	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_3 = new StringBuilder();
                    log4jParamters_tMap_3.append("Parameters:");
                            log4jParamters_tMap_3.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + (log4jParamters_tMap_3) );
                    } 
                } 
            new BytesLimit65535_tMap_3().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row5_tMap_3 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Log_tMap_3 = 0;
				
Main_LogStruct Main_Log_tmp = new Main_LogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogCatcher_1 = new StringBuilder();
                    log4jParamters_tLogCatcher_1.append("Parameters:");
                            log4jParamters_tLogCatcher_1.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + (log4jParamters_tLogCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tLogCatcher_1().limitLog4jByte();
            }

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row5.type = lcm.getType();
		row5.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row5.priority = lcm.getPriority();
		row5.message = lcm.getMessage();
		row5.code = lcm.getCode();
		
		row5.moment = java.util.Calendar.getInstance().getTime();
	
    	row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;
	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row5 - " + (row5==null? "": row5.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Main_Log = null;


// # Output table : 'Main_Log'
count_Main_Log_tMap_3++;

Main_Log_tmp.moment = row5.moment ;
Main_Log_tmp.pid = row5.pid ;
Main_Log_tmp.job = row5.job ;
Main_Log_tmp.type = row5.type ;
Main_Log_tmp.origin = row5.origin ;
Main_Log_tmp.message = row5.message ;
Main_Log = Main_Log_tmp;
log.debug("tMap_3 - Outputting the record " + count_Main_Log_tMap_3 + " of the output table 'Main_Log'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Main_Log"
if(Main_Log != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Log"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Log - " + (Main_Log==null? "": Main_Log.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(Main_Log.moment != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
								FormatterUtils.format_Date(Main_Log.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(Main_Log.pid != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(Main_Log.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(Main_Log.job != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(Main_Log.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(Main_Log.type != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(Main_Log.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(Main_Log.origin != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(Main_Log.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_4.append("|");
    			


   				
	    		if(Main_Log.message != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(Main_Log.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    	log.info("tLogRow_4 - Content of row "+(nb_line_tLogRow_4+1)+": " + strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "Main_Log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Done.") );

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_3 - Written records count in the table 'Main_Log': " + count_Main_Log_tMap_3 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Done.") );

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);
                if(log.isInfoEnabled())
            log.info("tLogRow_4 - "  + ("Printed row count: ")  + (nb_line_tLogRow_4)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Log");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Done.") );

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_Flow_MeterStruct implements routines.system.IPersistableRow<Main_Flow_MeterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_Flow_MeterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Item_Master_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Item_Master_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();
Main_Flow_MeterStruct Main_Flow_Meter = new Main_Flow_MeterStruct();





	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Flow_Meter");
					}
				
		int tos_count_tLogRow_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_5 = new StringBuilder();
                    log4jParamters_tLogRow_5.append("Parameters:");
                            log4jParamters_tLogRow_5.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_5.append(" | ");
                            log4jParamters_tLogRow_5.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_5.append(" | ");
                            log4jParamters_tLogRow_5.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_5.append(" | ");
                            log4jParamters_tLogRow_5.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_5 - "  + (log4jParamters_tLogRow_5) );
                    } 
                } 
            new BytesLimit65535_tLogRow_5().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_5 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
        util_tLogRow_5.setTableName("tLogRow_5");
        util_tLogRow_5.addRow(new String[]{"moment","pid","job","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tMap_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_4 = new StringBuilder();
                    log4jParamters_tMap_4.append("Parameters:");
                            log4jParamters_tMap_4.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + (log4jParamters_tMap_4) );
                    } 
                } 
            new BytesLimit65535_tMap_4().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row3_0_tMap_4 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Flow_Meter_tMap_4 = 0;
				
Main_Flow_MeterStruct Main_Flow_Meter_tmp = new Main_Flow_MeterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowMeterCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowMeterCatcher_1 = new StringBuilder();
                    log4jParamters_tFlowMeterCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + (log4jParamters_tFlowMeterCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();
            }

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row3_0.pid = pid;
		row3_0.root_pid = rootPid;
		row3_0.father_pid = fatherPid;	
        row3_0.project = projectName;
        row3_0.job = jobName;
        row3_0.context = contextStr;
		row3_0.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row3_0.moment = mcm.getMoment();
		row3_0.job_version = mcm.getJobVersion();
		row3_0.job_repository_id = mcm.getJobId();
		row3_0.system_pid = mcm.getSystemPid();
		row3_0.label = mcm.getLabel();
		row3_0.count = mcm.getCount();
		row3_0.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row3_0.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3_0 - " + (row3_0==null? "": row3_0.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Main_Flow_Meter = null;


// # Output table : 'Main_Flow_Meter'
count_Main_Flow_Meter_tMap_4++;

Main_Flow_Meter_tmp.moment = row3_0.moment ;
Main_Flow_Meter_tmp.pid = row3_0.pid ;
Main_Flow_Meter_tmp.job = row3_0.job ;
Main_Flow_Meter_tmp.origin = row3_0.origin ;
Main_Flow_Meter_tmp.label = row3_0.label ;
Main_Flow_Meter_tmp.count = row3_0.count ;
Main_Flow_Meter_tmp.reference = row3_0.reference ;
Main_Flow_Meter_tmp.thresholds = row3_0.thresholds ;
Main_Flow_Meter = Main_Flow_Meter_tmp;
log.debug("tMap_4 - Outputting the record " + count_Main_Flow_Meter_tMap_4 + " of the output table 'Main_Flow_Meter'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Main_Flow_Meter"
if(Main_Flow_Meter != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Flow_Meter"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Flow_Meter - " + (Main_Flow_Meter==null? "": Main_Flow_Meter.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_5 = new String[8];
   				
	    		if(Main_Flow_Meter.moment != null) { //              
                 row_tLogRow_5[0]=    						
								FormatterUtils.format_Date(Main_Flow_Meter.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.pid != null) { //              
                 row_tLogRow_5[1]=    						    
				                String.valueOf(Main_Flow_Meter.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.job != null) { //              
                 row_tLogRow_5[2]=    						    
				                String.valueOf(Main_Flow_Meter.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.origin != null) { //              
                 row_tLogRow_5[3]=    						    
				                String.valueOf(Main_Flow_Meter.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.label != null) { //              
                 row_tLogRow_5[4]=    						    
				                String.valueOf(Main_Flow_Meter.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.count != null) { //              
                 row_tLogRow_5[5]=    						    
				                String.valueOf(Main_Flow_Meter.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.reference != null) { //              
                 row_tLogRow_5[6]=    						    
				                String.valueOf(Main_Flow_Meter.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.thresholds != null) { //              
                 row_tLogRow_5[7]=    						    
				                String.valueOf(Main_Flow_Meter.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_5.addRow(row_tLogRow_5);	
				nb_line_tLogRow_5++;
                	log.info("tLogRow_5 - Content of row "+nb_line_tLogRow_5+": " + TalendString.unionString("|",row_tLogRow_5));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "Main_Flow_Meter"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Done.") );

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_4 - Written records count in the table 'Main_Flow_Meter': " + count_Main_Flow_Meter_tMap_4 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Done.") );

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_5 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    
                    consoleOut_tLogRow_5.println(util_tLogRow_5.format().toString());
                    consoleOut_tLogRow_5.flush();
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);
                if(log.isInfoEnabled())
            log.info("tLogRow_5 - "  + ("Printed row count: ")  + (nb_line_tLogRow_5)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Flow_Meter");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_5 - "  + ("Done.") );

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Item_Master_Update_Inbound Item_Master_Update_InboundClass = new Item_Master_Update_Inbound();

        int exitCode = Item_Master_Update_InboundClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'Item_Master_Update_Inbound' - Done.");
	        }

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
    	    }
        	log.info("TalendJob: 'Item_Master_Update_Inbound' - Start.");
    	
    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Item_Master_Update_Inbound.class.getClassLoader().getResourceAsStream("sus_sli_etl/item_master_update_inbound_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Item_Master_Update_Inbound.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("opco", "id_String");
                        if(context.getStringValue("opco") == null) {
                            context.opco = null;
                        } else {
                            context.opco=(String) context.getProperty("opco");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("sopco", "id_String");
                        if(context.getStringValue("sopco") == null) {
                            context.sopco = null;
                        } else {
                            context.sopco=(String) context.getProperty("sopco");
                        }
                        context.setContextType("svop", "id_String");
                        if(context.getStringValue("svop") == null) {
                            context.svop = null;
                        } else {
                            context.svop=(String) context.getProperty("svop");
                        }
                        context.setContextType("GIM_AdditionalParams", "id_String");
                        if(context.getStringValue("GIM_AdditionalParams") == null) {
                            context.GIM_AdditionalParams = null;
                        } else {
                            context.GIM_AdditionalParams=(String) context.getProperty("GIM_AdditionalParams");
                        }
                        context.setContextType("GIM_Database", "id_String");
                        if(context.getStringValue("GIM_Database") == null) {
                            context.GIM_Database = null;
                        } else {
                            context.GIM_Database=(String) context.getProperty("GIM_Database");
                        }
                        context.setContextType("GIM_Login", "id_String");
                        if(context.getStringValue("GIM_Login") == null) {
                            context.GIM_Login = null;
                        } else {
                            context.GIM_Login=(String) context.getProperty("GIM_Login");
                        }
                        context.setContextType("GIM_Password", "id_Password");
                        if(context.getStringValue("GIM_Password") == null) {
                            context.GIM_Password = null;
                        } else {
                            String pwd_GIM_Password_value = context.getProperty("GIM_Password");
                            context.GIM_Password = null;
                            if(pwd_GIM_Password_value!=null) {
                                if(context_param.containsKey("GIM_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.GIM_Password = pwd_GIM_Password_value;
                                } else if (!pwd_GIM_Password_value.isEmpty()) {
                                    try {
                                        context.GIM_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_GIM_Password_value);
                                        context.put("GIM_Password",context.GIM_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("GIM_Port", "id_String");
                        if(context.getStringValue("GIM_Port") == null) {
                            context.GIM_Port = null;
                        } else {
                            context.GIM_Port=(String) context.getProperty("GIM_Port");
                        }
                        context.setContextType("GIM_Schema_Master", "id_String");
                        if(context.getStringValue("GIM_Schema_Master") == null) {
                            context.GIM_Schema_Master = null;
                        } else {
                            context.GIM_Schema_Master=(String) context.getProperty("GIM_Schema_Master");
                        }
                        context.setContextType("GIM_Server", "id_String");
                        if(context.getStringValue("GIM_Server") == null) {
                            context.GIM_Server = null;
                        } else {
                            context.GIM_Server=(String) context.getProperty("GIM_Server");
                        }
                        context.setContextType("SUS_Login", "id_String");
                        if(context.getStringValue("SUS_Login") == null) {
                            context.SUS_Login = null;
                        } else {
                            context.SUS_Login=(String) context.getProperty("SUS_Login");
                        }
                        context.setContextType("SUS_Password", "id_Password");
                        if(context.getStringValue("SUS_Password") == null) {
                            context.SUS_Password = null;
                        } else {
                            String pwd_SUS_Password_value = context.getProperty("SUS_Password");
                            context.SUS_Password = null;
                            if(pwd_SUS_Password_value!=null) {
                                if(context_param.containsKey("SUS_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SUS_Password = pwd_SUS_Password_value;
                                } else if (!pwd_SUS_Password_value.isEmpty()) {
                                    try {
                                        context.SUS_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SUS_Password_value);
                                        context.put("SUS_Password",context.SUS_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SUS_Database", "id_String");
                        if(context.getStringValue("SUS_Database") == null) {
                            context.SUS_Database = null;
                        } else {
                            context.SUS_Database=(String) context.getProperty("SUS_Database");
                        }
                        context.setContextType("SUS_Server", "id_String");
                        if(context.getStringValue("SUS_Server") == null) {
                            context.SUS_Server = null;
                        } else {
                            context.SUS_Server=(String) context.getProperty("SUS_Server");
                        }
                        context.setContextType("SUS_Additional_Params", "id_String");
                        if(context.getStringValue("SUS_Additional_Params") == null) {
                            context.SUS_Additional_Params = null;
                        } else {
                            context.SUS_Additional_Params=(String) context.getProperty("SUS_Additional_Params");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("opco")) {
                context.opco = (String) parentContextMap.get("opco");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("sopco")) {
                context.sopco = (String) parentContextMap.get("sopco");
            }if (parentContextMap.containsKey("svop")) {
                context.svop = (String) parentContextMap.get("svop");
            }if (parentContextMap.containsKey("GIM_AdditionalParams")) {
                context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
            }if (parentContextMap.containsKey("GIM_Database")) {
                context.GIM_Database = (String) parentContextMap.get("GIM_Database");
            }if (parentContextMap.containsKey("GIM_Login")) {
                context.GIM_Login = (String) parentContextMap.get("GIM_Login");
            }if (parentContextMap.containsKey("GIM_Password")) {
                context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
            }if (parentContextMap.containsKey("GIM_Port")) {
                context.GIM_Port = (String) parentContextMap.get("GIM_Port");
            }if (parentContextMap.containsKey("GIM_Schema_Master")) {
                context.GIM_Schema_Master = (String) parentContextMap.get("GIM_Schema_Master");
            }if (parentContextMap.containsKey("GIM_Server")) {
                context.GIM_Server = (String) parentContextMap.get("GIM_Server");
            }if (parentContextMap.containsKey("SUS_Login")) {
                context.SUS_Login = (String) parentContextMap.get("SUS_Login");
            }if (parentContextMap.containsKey("SUS_Password")) {
                context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
            }if (parentContextMap.containsKey("SUS_Database")) {
                context.SUS_Database = (String) parentContextMap.get("SUS_Database");
            }if (parentContextMap.containsKey("SUS_Server")) {
                context.SUS_Server = (String) parentContextMap.get("SUS_Server");
            }if (parentContextMap.containsKey("SUS_Additional_Params")) {
                context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("GIM_Password");
			parametersToEncrypt.add("SUS_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Item_Master_Update_Inbound");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     715341 characters generated by Talend Open Studio for Data Integration 
 *     on the October 28, 2022 at 10:58:08 AM IST
 ************************************************************************************************/