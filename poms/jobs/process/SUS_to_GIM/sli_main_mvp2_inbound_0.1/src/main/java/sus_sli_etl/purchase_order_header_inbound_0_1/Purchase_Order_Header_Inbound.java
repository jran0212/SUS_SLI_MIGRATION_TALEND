// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sus_sli_etl.purchase_order_header_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Purchase_Order_Header_Inbound Purpose: Migrating data from IMHAV3PF to PURCHASE_ORDER_HEADER<br>
 * Description: Migrating data from IMHAV3PF to PURCHASE_ORDER_HEADER <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Purchase_Order_Header_Inbound implements TalendJob {
	static {System.setProperty("TalendJob.log", "Purchase_Order_Header_Inbound.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(Purchase_Order_Header_Inbound.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(opco != null){
				
					this.setProperty("opco", opco.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(sopco != null){
				
					this.setProperty("sopco", sopco.toString());
				
			}
			
			if(svop != null){
				
					this.setProperty("svop", svop.toString());
				
			}
			
			if(GIM_AdditionalParams != null){
				
					this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());
				
			}
			
			if(GIM_Database != null){
				
					this.setProperty("GIM_Database", GIM_Database.toString());
				
			}
			
			if(GIM_Login != null){
				
					this.setProperty("GIM_Login", GIM_Login.toString());
				
			}
			
			if(GIM_Password != null){
				
					this.setProperty("GIM_Password", GIM_Password.toString());
				
			}
			
			if(GIM_Port != null){
				
					this.setProperty("GIM_Port", GIM_Port.toString());
				
			}
			
			if(GIM_Schema_Demand != null){
				
					this.setProperty("GIM_Schema_Demand", GIM_Schema_Demand.toString());
				
			}
			
			if(GIM_Schema_Inventory != null){
				
					this.setProperty("GIM_Schema_Inventory", GIM_Schema_Inventory.toString());
				
			}
			
			if(GIM_Schema_Master != null){
				
					this.setProperty("GIM_Schema_Master", GIM_Schema_Master.toString());
				
			}
			
			if(GIM_Schema_Migrating_Test != null){
				
					this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());
				
			}
			
			if(GIM_Schema_Order_Processing != null){
				
					this.setProperty("GIM_Schema_Order_Processing", GIM_Schema_Order_Processing.toString());
				
			}
			
			if(GIM_Schema_PO != null){
				
					this.setProperty("GIM_Schema_PO", GIM_Schema_PO.toString());
				
			}
			
			if(GIM_Schema_System != null){
				
					this.setProperty("GIM_Schema_System", GIM_Schema_System.toString());
				
			}
			
			if(GIM_Server != null){
				
					this.setProperty("GIM_Server", GIM_Server.toString());
				
			}
			
			if(SUS_Additional_Params != null){
				
					this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());
				
			}
			
			if(SUS_Database != null){
				
					this.setProperty("SUS_Database", SUS_Database.toString());
				
			}
			
			if(SUS_Login != null){
				
					this.setProperty("SUS_Login", SUS_Login.toString());
				
			}
			
			if(SUS_Password != null){
				
					this.setProperty("SUS_Password", SUS_Password.toString());
				
			}
			
			if(SUS_Server != null){
				
					this.setProperty("SUS_Server", SUS_Server.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String opco;
public String getOpco(){
	return this.opco;
}
public String server;
public String getServer(){
	return this.server;
}
public String sopco;
public String getSopco(){
	return this.sopco;
}
public String svop;
public String getSvop(){
	return this.svop;
}
public String GIM_AdditionalParams;
public String getGIM_AdditionalParams(){
	return this.GIM_AdditionalParams;
}
public String GIM_Database;
public String getGIM_Database(){
	return this.GIM_Database;
}
public String GIM_Login;
public String getGIM_Login(){
	return this.GIM_Login;
}
public java.lang.String GIM_Password;
public java.lang.String getGIM_Password(){
	return this.GIM_Password;
}
public String GIM_Port;
public String getGIM_Port(){
	return this.GIM_Port;
}
public String GIM_Schema_Demand;
public String getGIM_Schema_Demand(){
	return this.GIM_Schema_Demand;
}
public String GIM_Schema_Inventory;
public String getGIM_Schema_Inventory(){
	return this.GIM_Schema_Inventory;
}
public String GIM_Schema_Master;
public String getGIM_Schema_Master(){
	return this.GIM_Schema_Master;
}
public String GIM_Schema_Migrating_Test;
public String getGIM_Schema_Migrating_Test(){
	return this.GIM_Schema_Migrating_Test;
}
public String GIM_Schema_Order_Processing;
public String getGIM_Schema_Order_Processing(){
	return this.GIM_Schema_Order_Processing;
}
public String GIM_Schema_PO;
public String getGIM_Schema_PO(){
	return this.GIM_Schema_PO;
}
public String GIM_Schema_System;
public String getGIM_Schema_System(){
	return this.GIM_Schema_System;
}
public String GIM_Server;
public String getGIM_Server(){
	return this.GIM_Server;
}
public String SUS_Additional_Params;
public String getSUS_Additional_Params(){
	return this.SUS_Additional_Params;
}
public String SUS_Database;
public String getSUS_Database(){
	return this.SUS_Database;
}
public String SUS_Login;
public String getSUS_Login(){
	return this.SUS_Login;
}
public java.lang.String SUS_Password;
public java.lang.String getSUS_Password(){
	return this.SUS_Password;
}
public String SUS_Server;
public String getSUS_Server(){
	return this.SUS_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Purchase_Order_Header_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_0Sj2gEC-Ee2loaSGMM96aw", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_0Sj2gEC-Ee2loaSGMM96aw", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Purchase_Order_Header_Inbound.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Purchase_Order_Header_Inbound.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class Main_StatStruct implements routines.system.IPersistableRow<Main_StatStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_StatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
Main_StatStruct Main_Stat = new Main_StatStruct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Stat");
					}
				
		int tos_count_tLogRow_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_1 = new StringBuilder();
                    log4jParamters_tLogRow_1.append("Parameters:");
                            log4jParamters_tLogRow_1.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_1.append(" | ");
                            log4jParamters_tLogRow_1.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_1 - "  + (log4jParamters_tLogRow_1) );
                    } 
                } 
            new BytesLimit65535_tLogRow_1().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[7];

        public void addRow(String[] row) {

            for (int i = 0; i < 7; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 6 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 6 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[6] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"moment","pid","job","origin","message_type","message","duration",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row3_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Stat_tMap_1 = 0;
				
Main_StatStruct Main_Stat_tmp = new Main_StatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tStatCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tStatCatcher_1 = new StringBuilder();
                    log4jParamters_tStatCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + (log4jParamters_tStatCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tStatCatcher_1().limitLog4jByte();
            }

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
		row3.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row3.message = scm.getMessage();
		row3.duration = scm.getDuration();
		row3.moment = scm.getMoment();
		row3.message_type = scm.getMessageType();
		row3.job_version = scm.getJobVersion();
		row3.job_repository_id = scm.getJobId();
		row3.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3 - " + (row3==null? "": row3.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Main_Stat = null;


// # Output table : 'Main_Stat'
count_Main_Stat_tMap_1++;

Main_Stat_tmp.moment = row3.moment ;
Main_Stat_tmp.pid = row3.pid ;
Main_Stat_tmp.job = row3.job ;
Main_Stat_tmp.origin = row3.origin ;
Main_Stat_tmp.message_type = row3.message_type ;
Main_Stat_tmp.message = row3.message ;
Main_Stat_tmp.duration = row3.duration ;
Main_Stat = Main_Stat_tmp;
log.debug("tMap_1 - Outputting the record " + count_Main_Stat_tMap_1 + " of the output table 'Main_Stat'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Main_Stat"
if(Main_Stat != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Stat"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Stat - " + (Main_Stat==null? "": Main_Stat.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[7];
   				
	    		if(Main_Stat.moment != null) { //              
                 row_tLogRow_1[0]=    						
								FormatterUtils.format_Date(Main_Stat.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.pid != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(Main_Stat.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.job != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(Main_Stat.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.origin != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(Main_Stat.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message_type != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(Main_Stat.message_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(Main_Stat.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.duration != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(Main_Stat.duration)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
                	log.info("tLogRow_1 - Content of row "+nb_line_tLogRow_1+": " + TalendString.unionString("|",row_tLogRow_1));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "Main_Stat"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Done.") );

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'Main_Stat': " + count_Main_Stat_tMap_1 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);
                if(log.isInfoEnabled())
            log.info("tLogRow_1 - "  + ("Printed row count: ")  + (nb_line_tLogRow_1)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Stat");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_1 - "  + ("Done.") );

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_LogStruct implements routines.system.IPersistableRow<Main_LogStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_LogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
Main_LogStruct Main_Log = new Main_LogStruct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Log");
					}
				
		int tos_count_tLogRow_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_2 = new StringBuilder();
                    log4jParamters_tLogRow_2.append("Parameters:");
                            log4jParamters_tLogRow_2.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + (log4jParamters_tLogRow_2) );
                    } 
                } 
            new BytesLimit65535_tLogRow_2().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_2 = new StringBuilder();
                    log4jParamters_tMap_2.append("Parameters:");
                            log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + (log4jParamters_tMap_2) );
                    } 
                } 
            new BytesLimit65535_tMap_2().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row4_tMap_2 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Log_tMap_2 = 0;
				
Main_LogStruct Main_Log_tmp = new Main_LogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogCatcher_1 = new StringBuilder();
                    log4jParamters_tLogCatcher_1.append("Parameters:");
                            log4jParamters_tLogCatcher_1.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + (log4jParamters_tLogCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tLogCatcher_1().limitLog4jByte();
            }

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row4.type = lcm.getType();
		row4.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row4.priority = lcm.getPriority();
		row4.message = lcm.getMessage();
		row4.code = lcm.getCode();
		
		row4.moment = java.util.Calendar.getInstance().getTime();
	
    	row4.pid = pid;
		row4.root_pid = rootPid;
		row4.father_pid = fatherPid;
	
    	row4.project = projectName;
    	row4.job = jobName;
    	row4.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row4 - " + (row4==null? "": row4.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Main_Log = null;


// # Output table : 'Main_Log'
count_Main_Log_tMap_2++;

Main_Log_tmp.moment = row4.moment ;
Main_Log_tmp.pid = row4.pid ;
Main_Log_tmp.job = row4.job ;
Main_Log_tmp.type = row4.type ;
Main_Log_tmp.origin = row4.origin ;
Main_Log_tmp.message = row4.message ;
Main_Log = Main_Log_tmp;
log.debug("tMap_2 - Outputting the record " + count_Main_Log_tMap_2 + " of the output table 'Main_Log'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Main_Log"
if(Main_Log != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Log"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Log - " + (Main_Log==null? "": Main_Log.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(Main_Log.moment != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(Main_Log.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.pid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.job != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.type != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.origin != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.message != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    	log.info("tLogRow_2 - Content of row "+(nb_line_tLogRow_2+1)+": " + strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "Main_Log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Done.") );

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'Main_Log': " + count_Main_Log_tMap_2 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Done.") );

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);
                if(log.isInfoEnabled())
            log.info("tLogRow_2 - "  + ("Printed row count: ")  + (nb_line_tLogRow_2)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Log");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Done.") );

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_Flow_MeterStruct implements routines.system.IPersistableRow<Main_Flow_MeterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_Flow_MeterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();
Main_Flow_MeterStruct Main_Flow_Meter = new Main_Flow_MeterStruct();





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Flow_Meter");
					}
				
		int tos_count_tLogRow_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_3 = new StringBuilder();
                    log4jParamters_tLogRow_3.append("Parameters:");
                            log4jParamters_tLogRow_3.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + (log4jParamters_tLogRow_3) );
                    } 
                } 
            new BytesLimit65535_tLogRow_3().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("tLogRow_3");
        util_tLogRow_3.addRow(new String[]{"moment","pid","job","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tMap_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_3 = new StringBuilder();
                    log4jParamters_tMap_3.append("Parameters:");
                            log4jParamters_tMap_3.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + (log4jParamters_tMap_3) );
                    } 
                } 
            new BytesLimit65535_tMap_3().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row3_0_tMap_3 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Flow_Meter_tMap_3 = 0;
				
Main_Flow_MeterStruct Main_Flow_Meter_tmp = new Main_Flow_MeterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowMeterCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowMeterCatcher_1 = new StringBuilder();
                    log4jParamters_tFlowMeterCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + (log4jParamters_tFlowMeterCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();
            }

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row3_0.pid = pid;
		row3_0.root_pid = rootPid;
		row3_0.father_pid = fatherPid;	
        row3_0.project = projectName;
        row3_0.job = jobName;
        row3_0.context = contextStr;
		row3_0.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row3_0.moment = mcm.getMoment();
		row3_0.job_version = mcm.getJobVersion();
		row3_0.job_repository_id = mcm.getJobId();
		row3_0.system_pid = mcm.getSystemPid();
		row3_0.label = mcm.getLabel();
		row3_0.count = mcm.getCount();
		row3_0.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row3_0.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3_0 - " + (row3_0==null? "": row3_0.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Main_Flow_Meter = null;


// # Output table : 'Main_Flow_Meter'
count_Main_Flow_Meter_tMap_3++;

Main_Flow_Meter_tmp.moment = row3_0.moment ;
Main_Flow_Meter_tmp.pid = row3_0.pid ;
Main_Flow_Meter_tmp.job = row3_0.job ;
Main_Flow_Meter_tmp.origin = row3_0.origin ;
Main_Flow_Meter_tmp.label = row3_0.label ;
Main_Flow_Meter_tmp.count = row3_0.count ;
Main_Flow_Meter_tmp.reference = row3_0.reference ;
Main_Flow_Meter_tmp.thresholds = row3_0.thresholds ;
Main_Flow_Meter = Main_Flow_Meter_tmp;
log.debug("tMap_3 - Outputting the record " + count_Main_Flow_Meter_tMap_3 + " of the output table 'Main_Flow_Meter'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Main_Flow_Meter"
if(Main_Flow_Meter != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Flow_Meter"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Flow_Meter - " + (Main_Flow_Meter==null? "": Main_Flow_Meter.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[8];
   				
	    		if(Main_Flow_Meter.moment != null) { //              
                 row_tLogRow_3[0]=    						
								FormatterUtils.format_Date(Main_Flow_Meter.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.pid != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(Main_Flow_Meter.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.job != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(Main_Flow_Meter.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.origin != null) { //              
                 row_tLogRow_3[3]=    						    
				                String.valueOf(Main_Flow_Meter.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.label != null) { //              
                 row_tLogRow_3[4]=    						    
				                String.valueOf(Main_Flow_Meter.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.count != null) { //              
                 row_tLogRow_3[5]=    						    
				                String.valueOf(Main_Flow_Meter.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.reference != null) { //              
                 row_tLogRow_3[6]=    						    
				                String.valueOf(Main_Flow_Meter.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.thresholds != null) { //              
                 row_tLogRow_3[7]=    						    
				                String.valueOf(Main_Flow_Meter.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
                	log.info("tLogRow_3 - Content of row "+nb_line_tLogRow_3+": " + TalendString.unionString("|",row_tLogRow_3));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "Main_Flow_Meter"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Done.") );

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_3 - Written records count in the table 'Main_Flow_Meter': " + count_Main_Flow_Meter_tMap_3 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Done.") );

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);
                if(log.isInfoEnabled())
            log.info("tLogRow_3 - "  + ("Printed row count: ")  + (nb_line_tLogRow_3)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Flow_Meter");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Done.") );

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Starting the Updating Data from IMHAV3PF to PURCHASE_ORDER_HEADER...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class PURCHASE_ORDER_HEADER_2_UPDATEStruct implements routines.system.IPersistableRow<PURCHASE_ORDER_HEADER_2_UPDATEStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public java.util.Date SMS_CONFIRMED_DATE;

				public java.util.Date getSMS_CONFIRMED_DATE () {
					return this.SMS_CONFIRMED_DATE;
				}
				
			    public java.util.Date VENDOR_CONFIRMED_SHIP_DATE;

				public java.util.Date getVENDOR_CONFIRMED_SHIP_DATE () {
					return this.VENDOR_CONFIRMED_SHIP_DATE;
				}
				
			    public java.util.Date SCHEDULED_PO_RECEIPT_TIMESTAMP;

				public java.util.Date getSCHEDULED_PO_RECEIPT_TIMESTAMP () {
					return this.SCHEDULED_PO_RECEIPT_TIMESTAMP;
				}
				
			    public String ORIG_PICKUP_ALLOW_TYPE;

				public String getORIG_PICKUP_ALLOW_TYPE () {
					return this.ORIG_PICKUP_ALLOW_TYPE;
				}
				
			    public BigDecimal PICKUP_ALLOW_FROM_BRACKET;

				public BigDecimal getPICKUP_ALLOW_FROM_BRACKET () {
					return this.PICKUP_ALLOW_FROM_BRACKET;
				}
				
			    public BigDecimal ORIG_FREIGHT_RATE;

				public BigDecimal getORIG_FREIGHT_RATE () {
					return this.ORIG_FREIGHT_RATE;
				}
				
			    public String ORIG_FREIGHT_TYPE;

				public String getORIG_FREIGHT_TYPE () {
					return this.ORIG_FREIGHT_TYPE;
				}
				
			    public BigDecimal ORIG_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_MERCH_ALLOW_CHARGE () {
					return this.ORIG_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal ORIG_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getORIG_FREIGHT_ALLOW_CHARGE () {
					return this.ORIG_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal FREIGHT_ROUNDING_VARIANCE;

				public BigDecimal getFREIGHT_ROUNDING_VARIANCE () {
					return this.FREIGHT_ROUNDING_VARIANCE;
				}
				
			    public String SHIP_WITH_NEXT_ORDER_IND;

				public String getSHIP_WITH_NEXT_ORDER_IND () {
					return this.SHIP_WITH_NEXT_ORDER_IND;
				}
				
			    public String CUST_REFERENCE_ORDER_NO;

				public String getCUST_REFERENCE_ORDER_NO () {
					return this.CUST_REFERENCE_ORDER_NO;
				}
				
			    public String OUTSIDE_WHSE_ID;

				public String getOUTSIDE_WHSE_ID () {
					return this.OUTSIDE_WHSE_ID;
				}
				
			    public BigDecimal RECOMMENDED_ORDER_SEQ_NO;

				public BigDecimal getRECOMMENDED_ORDER_SEQ_NO () {
					return this.RECOMMENDED_ORDER_SEQ_NO;
				}
				
			    public BigDecimal SYSCO_BRACKET_NO;

				public BigDecimal getSYSCO_BRACKET_NO () {
					return this.SYSCO_BRACKET_NO;
				}
				
			    public String BUYER_NO;

				public String getBUYER_NO () {
					return this.BUYER_NO;
				}
				
			    public String ORDER_GROUP;

				public String getORDER_GROUP () {
					return this.ORDER_GROUP;
				}
				
			    public BigDecimal BUYING_GROUP;

				public BigDecimal getBUYING_GROUP () {
					return this.BUYING_GROUP;
				}
				
			    public String PO_PRIMARY_STATUS;

				public String getPO_PRIMARY_STATUS () {
					return this.PO_PRIMARY_STATUS;
				}
				
			    public String PO_SECONDARY_STATUS;

				public String getPO_SECONDARY_STATUS () {
					return this.PO_SECONDARY_STATUS;
				}
				
			    public String PO_IN_USE_FLAG;

				public String getPO_IN_USE_FLAG () {
					return this.PO_IN_USE_FLAG;
				}
				
			    public String WHSE_CHANGE_CODE;

				public String getWHSE_CHANGE_CODE () {
					return this.WHSE_CHANGE_CODE;
				}
				
			    public String PO_VALID_PRICING_FLAG;

				public String getPO_VALID_PRICING_FLAG () {
					return this.PO_VALID_PRICING_FLAG;
				}
				
			    public String PO_TYPE;

				public String getPO_TYPE () {
					return this.PO_TYPE;
				}
				
			    public String DEMAND_STATUS;

				public String getDEMAND_STATUS () {
					return this.DEMAND_STATUS;
				}
				
			    public String BACKORDER_FLAG;

				public String getBACKORDER_FLAG () {
					return this.BACKORDER_FLAG;
				}
				
			    public String PROC_BILLED_VENDOR_BILLED_FLAG;

				public String getPROC_BILLED_VENDOR_BILLED_FLAG () {
					return this.PROC_BILLED_VENDOR_BILLED_FLAG;
				}
				
			    public String FREIGHT_INTER_COMPANY_STMT_FLAG;

				public String getFREIGHT_INTER_COMPANY_STMT_FLAG () {
					return this.FREIGHT_INTER_COMPANY_STMT_FLAG;
				}
				
			    public String CONF_STATUS;

				public String getCONF_STATUS () {
					return this.CONF_STATUS;
				}
				
			    public String PO_VALID_PRICING_APPROVAL;

				public String getPO_VALID_PRICING_APPROVAL () {
					return this.PO_VALID_PRICING_APPROVAL;
				}
				
			    public String CONF_RECVD_FLAG;

				public String getCONF_RECVD_FLAG () {
					return this.CONF_RECVD_FLAG;
				}
				
			    public String WHSE_STATUS;

				public String getWHSE_STATUS () {
					return this.WHSE_STATUS;
				}
				
			    public String PO_CHANGED_FLAG;

				public String getPO_CHANGED_FLAG () {
					return this.PO_CHANGED_FLAG;
				}
				
			    public String PRINT_PRICE_ON_PO_FLAG;

				public String getPRINT_PRICE_ON_PO_FLAG () {
					return this.PRINT_PRICE_ON_PO_FLAG;
				}
				
			    public String UPDATE_LEAD_TIME_FLAG;

				public String getUPDATE_LEAD_TIME_FLAG () {
					return this.UPDATE_LEAD_TIME_FLAG;
				}
				
			    public String PRICE_CHANGE_FLAG;

				public String getPRICE_CHANGE_FLAG () {
					return this.PRICE_CHANGE_FLAG;
				}
				
			    public String CARRIER_ID;

				public String getCARRIER_ID () {
					return this.CARRIER_ID;
				}
				
			    public String REVISED_PROFORMA_FLAG;

				public String getREVISED_PROFORMA_FLAG () {
					return this.REVISED_PROFORMA_FLAG;
				}
				
			    public String PROFORMA_INPROCESS_FLAG;

				public String getPROFORMA_INPROCESS_FLAG () {
					return this.PROFORMA_INPROCESS_FLAG;
				}
				
			    public String TRANSMIT_TO;

				public String getTRANSMIT_TO () {
					return this.TRANSMIT_TO;
				}
				
			    public String RETRANSMIT_TO_VENDOR_FLAG;

				public String getRETRANSMIT_TO_VENDOR_FLAG () {
					return this.RETRANSMIT_TO_VENDOR_FLAG;
				}
				
			    public String JOB_NO;

				public String getJOB_NO () {
					return this.JOB_NO;
				}
				
			    public String PAY_TO_VENDOR_NO;

				public String getPAY_TO_VENDOR_NO () {
					return this.PAY_TO_VENDOR_NO;
				}
				
			    public String FREIGHT_VENDOR;

				public String getFREIGHT_VENDOR () {
					return this.FREIGHT_VENDOR;
				}
				
			    public String VENDOR_TERMS;

				public String getVENDOR_TERMS () {
					return this.VENDOR_TERMS;
				}
				
			    public String FREIGHT_VENDOR_TERMS;

				public String getFREIGHT_VENDOR_TERMS () {
					return this.FREIGHT_VENDOR_TERMS;
				}
				
			    public String CONFIRMED_TERMS;

				public String getCONFIRMED_TERMS () {
					return this.CONFIRMED_TERMS;
				}
				
			    public String CONFIRMED_FREIGHT_VENDOR_TERMS;

				public String getCONFIRMED_FREIGHT_VENDOR_TERMS () {
					return this.CONFIRMED_FREIGHT_VENDOR_TERMS;
				}
				
			    public String TERMS_OVERRIDE_FLAG;

				public String getTERMS_OVERRIDE_FLAG () {
					return this.TERMS_OVERRIDE_FLAG;
				}
				
			    public String PO_PLACED_WITH;

				public String getPO_PLACED_WITH () {
					return this.PO_PLACED_WITH;
				}
				
			    public String LOAD_CTRL_NO;

				public String getLOAD_CTRL_NO () {
					return this.LOAD_CTRL_NO;
				}
				
			    public java.util.Date BUSINESS_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ANTICIPATED_RECEIPT () {
					return this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ANTICIPATED_RECEIPT () {
					return this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_VENDOR_CONF_RECEIPT;

				public java.util.Date getCALENDAR_VENDOR_CONF_RECEIPT () {
					return this.CALENDAR_VENDOR_CONF_RECEIPT;
				}
				
			    public java.util.Date BUSINESS_DATE_SHIP_PICKUP;

				public java.util.Date getBUSINESS_DATE_SHIP_PICKUP () {
					return this.BUSINESS_DATE_SHIP_PICKUP;
				}
				
			    public java.util.Date CALENDAR_DATE_SHIP_PICKUP;

				public java.util.Date getCALENDAR_DATE_SHIP_PICKUP () {
					return this.CALENDAR_DATE_SHIP_PICKUP;
				}
				
			    public java.util.Date BUSINESS_ORDER_DATE;

				public java.util.Date getBUSINESS_ORDER_DATE () {
					return this.BUSINESS_ORDER_DATE;
				}
				
			    public java.util.Date CALENDAR_ORDER_DATE;

				public java.util.Date getCALENDAR_ORDER_DATE () {
					return this.CALENDAR_ORDER_DATE;
				}
				
			    public java.util.Date BUSINESS_DATE_PO_NEEDED;

				public java.util.Date getBUSINESS_DATE_PO_NEEDED () {
					return this.BUSINESS_DATE_PO_NEEDED;
				}
				
			    public java.util.Date CALENDAR_DATE_PO_NEEDED;

				public java.util.Date getCALENDAR_DATE_PO_NEEDED () {
					return this.CALENDAR_DATE_PO_NEEDED;
				}
				
			    public java.util.Date PO_TRANSMISSION_TIMESTAMP;

				public java.util.Date getPO_TRANSMISSION_TIMESTAMP () {
					return this.PO_TRANSMISSION_TIMESTAMP;
				}
				
			    public java.util.Date BUSINESS_DATE_PO_ACCEPTED;

				public java.util.Date getBUSINESS_DATE_PO_ACCEPTED () {
					return this.BUSINESS_DATE_PO_ACCEPTED;
				}
				
			    public java.util.Date CALENDAR_DATE_PO_ACCEPTED;

				public java.util.Date getCALENDAR_DATE_PO_ACCEPTED () {
					return this.CALENDAR_DATE_PO_ACCEPTED;
				}
				
			    public java.util.Date BUSINESS_DATE_ACTUAL_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ACTUAL_RECEIPT () {
					return this.BUSINESS_DATE_ACTUAL_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_ACTUAL_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ACTUAL_RECEIPT () {
					return this.CALENDAR_DATE_ACTUAL_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE;

				public java.util.Date getCALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE () {
					return this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE;
				}
				
			    public java.util.Date CALENDAR_VENDOR_CONF_DATE;

				public java.util.Date getCALENDAR_VENDOR_CONF_DATE () {
					return this.CALENDAR_VENDOR_CONF_DATE;
				}
				
			    public BigDecimal TOTAL_LINES;

				public BigDecimal getTOTAL_LINES () {
					return this.TOTAL_LINES;
				}
				
			    public BigDecimal TOTAL_CASES;

				public BigDecimal getTOTAL_CASES () {
					return this.TOTAL_CASES;
				}
				
			    public BigDecimal TOTAL_CUBE;

				public BigDecimal getTOTAL_CUBE () {
					return this.TOTAL_CUBE;
				}
				
			    public BigDecimal TOTAL_NET_WGT;

				public BigDecimal getTOTAL_NET_WGT () {
					return this.TOTAL_NET_WGT;
				}
				
			    public BigDecimal TOTAL_GROSS_WGT;

				public BigDecimal getTOTAL_GROSS_WGT () {
					return this.TOTAL_GROSS_WGT;
				}
				
			    public BigDecimal TOTAL_VENDOR_PALLETS;

				public BigDecimal getTOTAL_VENDOR_PALLETS () {
					return this.TOTAL_VENDOR_PALLETS;
				}
				
			    public BigDecimal TOTAL_VENDOR_UNITS;

				public BigDecimal getTOTAL_VENDOR_UNITS () {
					return this.TOTAL_VENDOR_UNITS;
				}
				
			    public BigDecimal TOTAL_FOB_COST;

				public BigDecimal getTOTAL_FOB_COST () {
					return this.TOTAL_FOB_COST;
				}
				
			    public BigDecimal TOTAL_FREIGHT_COST;

				public BigDecimal getTOTAL_FREIGHT_COST () {
					return this.TOTAL_FREIGHT_COST;
				}
				
			    public BigDecimal TOTAL_AP_COST;

				public BigDecimal getTOTAL_AP_COST () {
					return this.TOTAL_AP_COST;
				}
				
			    public BigDecimal TOTAL_PICKUP_ALLOW;

				public BigDecimal getTOTAL_PICKUP_ALLOW () {
					return this.TOTAL_PICKUP_ALLOW;
				}
				
			    public BigDecimal TOTAL_PICKUP_ALLOW_RATE;

				public BigDecimal getTOTAL_PICKUP_ALLOW_RATE () {
					return this.TOTAL_PICKUP_ALLOW_RATE;
				}
				
			    public BigDecimal PICKUP_ALLOW_TO_BRACKET;

				public BigDecimal getPICKUP_ALLOW_TO_BRACKET () {
					return this.PICKUP_ALLOW_TO_BRACKET;
				}
				
			    public BigDecimal WHSE_UNLOAD_CHARGE;

				public BigDecimal getWHSE_UNLOAD_CHARGE () {
					return this.WHSE_UNLOAD_CHARGE;
				}
				
			    public String WHSE_UNLOAD_CHARGE_TYPE;

				public String getWHSE_UNLOAD_CHARGE_TYPE () {
					return this.WHSE_UNLOAD_CHARGE_TYPE;
				}
				
			    public BigDecimal ORIG_NON_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_NON_DIST_MERCH_ALLOW_CHARGE () {
					return this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal TOTAL_WHSE_PALLETS;

				public BigDecimal getTOTAL_WHSE_PALLETS () {
					return this.TOTAL_WHSE_PALLETS;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_RATE;

				public BigDecimal getCONFIRMED_FREIGHT_RATE () {
					return this.CONFIRMED_FREIGHT_RATE;
				}
				
			    public String CONFIRMED_FREIGHT_RATE_TYPE;

				public String getCONFIRMED_FREIGHT_RATE_TYPE () {
					return this.CONFIRMED_FREIGHT_RATE_TYPE;
				}
				
			    public BigDecimal CONFIRMED_UNLOADING_CHARGE;

				public BigDecimal getCONFIRMED_UNLOADING_CHARGE () {
					return this.CONFIRMED_UNLOADING_CHARGE;
				}
				
			    public String CONFIRMED_UNLOADING_CHRG_TYPE;

				public String getCONFIRMED_UNLOADING_CHRG_TYPE () {
					return this.CONFIRMED_UNLOADING_CHRG_TYPE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_RATE;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_RATE () {
					return this.CONFIRMED_PICKUP_ALLOW_RATE;
				}
				
			    public String CONFIRMED_PICKUP_ALLOW_TYPE;

				public String getCONFIRMED_PICKUP_ALLOW_TYPE () {
					return this.CONFIRMED_PICKUP_ALLOW_TYPE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_FROM_BRACKET;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_FROM_BRACKET () {
					return this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_TO_BRACKET;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_TO_BRACKET () {
					return this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_LINES;

				public BigDecimal getCONFIRMED_TOTAL_LINES () {
					return this.CONFIRMED_TOTAL_LINES;
				}
				
			    public BigDecimal CONFIRMED_TOTA_CASES;

				public BigDecimal getCONFIRMED_TOTA_CASES () {
					return this.CONFIRMED_TOTA_CASES;
				}
				
			    public BigDecimal CONFIMRED_TOTAL_CUBE;

				public BigDecimal getCONFIMRED_TOTAL_CUBE () {
					return this.CONFIMRED_TOTAL_CUBE;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_NET_WGT;

				public BigDecimal getCONFIRMED_TOTAL_NET_WGT () {
					return this.CONFIRMED_TOTAL_NET_WGT;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_GROSS_WGT;

				public BigDecimal getCONFIRMED_TOTAL_GROSS_WGT () {
					return this.CONFIRMED_TOTAL_GROSS_WGT;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_VENDOR_PALLETS;

				public BigDecimal getCONFIRMED_TOTAL_VENDOR_PALLETS () {
					return this.CONFIRMED_TOTAL_VENDOR_PALLETS;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_VENDOR_UNITS;

				public BigDecimal getCONFIRMED_TOTAL_VENDOR_UNITS () {
					return this.CONFIRMED_TOTAL_VENDOR_UNITS;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_FOB_COST;

				public BigDecimal getCONFIRMED_TOTAL_FOB_COST () {
					return this.CONFIRMED_TOTAL_FOB_COST;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_FREIGHT_COST;

				public BigDecimal getCONFIRMED_TOTAL_FREIGHT_COST () {
					return this.CONFIRMED_TOTAL_FREIGHT_COST;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_AP_COST;

				public BigDecimal getCONFIRMED_TOTAL_AP_COST () {
					return this.CONFIRMED_TOTAL_AP_COST;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_PICKUP_ALLOW;

				public BigDecimal getCONFIRMED_TOTAL_PICKUP_ALLOW () {
					return this.CONFIRMED_TOTAL_PICKUP_ALLOW;
				}
				
			    public BigDecimal CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE () {
					return this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE () {
					return this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONFIRMED_MERCH_ALLOW_CHARGE () {
					return this.CONFIRMED_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONFIRMED_FREIGHT_ALLOW_CHARGE () {
					return this.CONFIRMED_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_UNLOADING_CHARGE;

				public BigDecimal getCONFIRMED_TOTAL_UNLOADING_CHARGE () {
					return this.CONFIRMED_TOTAL_UNLOADING_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_BRACKET_DIFF;

				public BigDecimal getCONFIRMED_TOTAL_BRACKET_DIFF () {
					return this.CONFIRMED_TOTAL_BRACKET_DIFF;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_WHSE_PALLETS;

				public BigDecimal getCONFIRMED_TOTAL_WHSE_PALLETS () {
					return this.CONFIRMED_TOTAL_WHSE_PALLETS;
				}
				
			    public String CONFIRMED_USER;

				public String getCONFIRMED_USER () {
					return this.CONFIRMED_USER;
				}
				
			    public String VENDOR_CONF_NO;

				public String getVENDOR_CONF_NO () {
					return this.VENDOR_CONF_NO;
				}
				
			    public String VENDOR_CONF_METHOD;

				public String getVENDOR_CONF_METHOD () {
					return this.VENDOR_CONF_METHOD;
				}
				
			    public BigDecimal TOTAL_RECVD_LINES;

				public BigDecimal getTOTAL_RECVD_LINES () {
					return this.TOTAL_RECVD_LINES;
				}
				
			    public BigDecimal TOTAL_RECVD_CASES;

				public BigDecimal getTOTAL_RECVD_CASES () {
					return this.TOTAL_RECVD_CASES;
				}
				
			    public BigDecimal TOTAL_RECVD_CUBE;

				public BigDecimal getTOTAL_RECVD_CUBE () {
					return this.TOTAL_RECVD_CUBE;
				}
				
			    public BigDecimal TOTAL_RECVD_NET_WGT;

				public BigDecimal getTOTAL_RECVD_NET_WGT () {
					return this.TOTAL_RECVD_NET_WGT;
				}
				
			    public BigDecimal TOTAL_RECVD_GROSS_WGT;

				public BigDecimal getTOTAL_RECVD_GROSS_WGT () {
					return this.TOTAL_RECVD_GROSS_WGT;
				}
				
			    public BigDecimal TOTAL_RECVD_VENDOR_PALLETS;

				public BigDecimal getTOTAL_RECVD_VENDOR_PALLETS () {
					return this.TOTAL_RECVD_VENDOR_PALLETS;
				}
				
			    public BigDecimal TOTAL_RECVD_WHSE_PALLETS;

				public BigDecimal getTOTAL_RECVD_WHSE_PALLETS () {
					return this.TOTAL_RECVD_WHSE_PALLETS;
				}
				
			    public BigDecimal TOTAL_RECVD_VENDOR_UNITS;

				public BigDecimal getTOTAL_RECVD_VENDOR_UNITS () {
					return this.TOTAL_RECVD_VENDOR_UNITS;
				}
				
			    public BigDecimal TOTAL_RECVD_FOB_COST;

				public BigDecimal getTOTAL_RECVD_FOB_COST () {
					return this.TOTAL_RECVD_FOB_COST;
				}
				
			    public BigDecimal TOTAL_RECVD_FREIGHT_COST;

				public BigDecimal getTOTAL_RECVD_FREIGHT_COST () {
					return this.TOTAL_RECVD_FREIGHT_COST;
				}
				
			    public BigDecimal TOTAL_RECVD_AP_COST;

				public BigDecimal getTOTAL_RECVD_AP_COST () {
					return this.TOTAL_RECVD_AP_COST;
				}
				
			    public BigDecimal TOTAL_RECVD_BRACKET_DIFF;

				public BigDecimal getTOTAL_RECVD_BRACKET_DIFF () {
					return this.TOTAL_RECVD_BRACKET_DIFF;
				}
				
			    public BigDecimal TOTAL_RECVD_PICKUP_ALLOW;

				public BigDecimal getTOTAL_RECVD_PICKUP_ALLOW () {
					return this.TOTAL_RECVD_PICKUP_ALLOW;
				}
				
			    public BigDecimal TOTAL_RECVD_UNLOADING_CHARGE;

				public BigDecimal getTOTAL_RECVD_UNLOADING_CHARGE () {
					return this.TOTAL_RECVD_UNLOADING_CHARGE;
				}
				
			    public String MERCH_PROFORMA_STATUS;

				public String getMERCH_PROFORMA_STATUS () {
					return this.MERCH_PROFORMA_STATUS;
				}
				
			    public BigDecimal MERCH_PROFORMA_NET_AMT;

				public BigDecimal getMERCH_PROFORMA_NET_AMT () {
					return this.MERCH_PROFORMA_NET_AMT;
				}
				
			    public BigDecimal UNMATCHED_MERCH_PROFROMA_NET_AMT;

				public BigDecimal getUNMATCHED_MERCH_PROFROMA_NET_AMT () {
					return this.UNMATCHED_MERCH_PROFROMA_NET_AMT;
				}
				
			    public BigDecimal MERCH_AMT_TO_BE_VOUCH;

				public BigDecimal getMERCH_AMT_TO_BE_VOUCH () {
					return this.MERCH_AMT_TO_BE_VOUCH;
				}
				
			    public String MERCH_MATCHED_STATUS;

				public String getMERCH_MATCHED_STATUS () {
					return this.MERCH_MATCHED_STATUS;
				}
				
			    public String MERCH_VOUCH_STATUS;

				public String getMERCH_VOUCH_STATUS () {
					return this.MERCH_VOUCH_STATUS;
				}
				
			    public String MERCH_PAID_STATUS;

				public String getMERCH_PAID_STATUS () {
					return this.MERCH_PAID_STATUS;
				}
				
			    public String MERCH_PRICE_DIFF_HEADER_STATUS;

				public String getMERCH_PRICE_DIFF_HEADER_STATUS () {
					return this.MERCH_PRICE_DIFF_HEADER_STATUS;
				}
				
			    public BigDecimal MERCH_PRICE_DIFF_ERROR_LINE_COUNT;

				public BigDecimal getMERCH_PRICE_DIFF_ERROR_LINE_COUNT () {
					return this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT;
				}
				
			    public String MERCH_QTY_DIFF_HEADER_STATUS;

				public String getMERCH_QTY_DIFF_HEADER_STATUS () {
					return this.MERCH_QTY_DIFF_HEADER_STATUS;
				}
				
			    public BigDecimal MERCH_QTY_DIFF_ERROR_LINE_COUNT;

				public BigDecimal getMERCH_QTY_DIFF_ERROR_LINE_COUNT () {
					return this.MERCH_QTY_DIFF_ERROR_LINE_COUNT;
				}
				
			    public java.util.Date MERCH_PAYMENT_DUE_DATE;

				public java.util.Date getMERCH_PAYMENT_DUE_DATE () {
					return this.MERCH_PAYMENT_DUE_DATE;
				}
				
			    public BigDecimal MERCH_CASH_DISC;

				public BigDecimal getMERCH_CASH_DISC () {
					return this.MERCH_CASH_DISC;
				}
				
			    public BigDecimal MERCH_VOUCH_AMT;

				public BigDecimal getMERCH_VOUCH_AMT () {
					return this.MERCH_VOUCH_AMT;
				}
				
			    public BigDecimal MERCH_ROUNDING_VAR;

				public BigDecimal getMERCH_ROUNDING_VAR () {
					return this.MERCH_ROUNDING_VAR;
				}
				
			    public String MERCH_VENDOR_INTERCOM_BILLED_FLAG;

				public String getMERCH_VENDOR_INTERCOM_BILLED_FLAG () {
					return this.MERCH_VENDOR_INTERCOM_BILLED_FLAG;
				}
				
			    public BigDecimal MERCH_VAR_AMT;

				public BigDecimal getMERCH_VAR_AMT () {
					return this.MERCH_VAR_AMT;
				}
				
			    public BigDecimal MERCH_FREIGHT_AMT;

				public BigDecimal getMERCH_FREIGHT_AMT () {
					return this.MERCH_FREIGHT_AMT;
				}
				
			    public BigDecimal FREIGHT_PROFORMA_NET_AMT;

				public BigDecimal getFREIGHT_PROFORMA_NET_AMT () {
					return this.FREIGHT_PROFORMA_NET_AMT;
				}
				
			    public BigDecimal UNMATCHED_FREIGHT_PROFORMA_NET_AMT;

				public BigDecimal getUNMATCHED_FREIGHT_PROFORMA_NET_AMT () {
					return this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT;
				}
				
			    public BigDecimal FREIGHT_AMT_TO_BE_VOUCH;

				public BigDecimal getFREIGHT_AMT_TO_BE_VOUCH () {
					return this.FREIGHT_AMT_TO_BE_VOUCH;
				}
				
			    public String FREIGHT_MATCHED_STATUS;

				public String getFREIGHT_MATCHED_STATUS () {
					return this.FREIGHT_MATCHED_STATUS;
				}
				
			    public String FREIGHT_VOUCH_STATUS;

				public String getFREIGHT_VOUCH_STATUS () {
					return this.FREIGHT_VOUCH_STATUS;
				}
				
			    public String FREIGHT_PAID_STATUS;

				public String getFREIGHT_PAID_STATUS () {
					return this.FREIGHT_PAID_STATUS;
				}
				
			    public String FREIGHT_DIFF_HEADER_STATUS;

				public String getFREIGHT_DIFF_HEADER_STATUS () {
					return this.FREIGHT_DIFF_HEADER_STATUS;
				}
				
			    public java.util.Date FREIGHT_PAYMENT_DUE_DATE;

				public java.util.Date getFREIGHT_PAYMENT_DUE_DATE () {
					return this.FREIGHT_PAYMENT_DUE_DATE;
				}
				
			    public String FREIGHT_CLAIM_STATUS;

				public String getFREIGHT_CLAIM_STATUS () {
					return this.FREIGHT_CLAIM_STATUS;
				}
				
			    public BigDecimal FREIGHT_CASH_DISC;

				public BigDecimal getFREIGHT_CASH_DISC () {
					return this.FREIGHT_CASH_DISC;
				}
				
			    public BigDecimal FREIGHT_VARIANCE_AMT;

				public BigDecimal getFREIGHT_VARIANCE_AMT () {
					return this.FREIGHT_VARIANCE_AMT;
				}
				
			    public BigDecimal FREIGHT_VOUCH_AMT;

				public BigDecimal getFREIGHT_VOUCH_AMT () {
					return this.FREIGHT_VOUCH_AMT;
				}
				
			    public String FREIGHT_INV_NO;

				public String getFREIGHT_INV_NO () {
					return this.FREIGHT_INV_NO;
				}
				
			    public java.util.Date FREIGHT_INV_DATE;

				public java.util.Date getFREIGHT_INV_DATE () {
					return this.FREIGHT_INV_DATE;
				}
				
			    public String FREIGHT_VENDOR_INTERCOM_BILLED_FLAG;

				public String getFREIGHT_VENDOR_INTERCOM_BILLED_FLAG () {
					return this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG;
				}
				
			    public BigDecimal TOTAL_VENDOR_SHORT_QTY;

				public BigDecimal getTOTAL_VENDOR_SHORT_QTY () {
					return this.TOTAL_VENDOR_SHORT_QTY;
				}
				
			    public BigDecimal TOTAL_CARRIER_SHORT_QTY;

				public BigDecimal getTOTAL_CARRIER_SHORT_QTY () {
					return this.TOTAL_CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal TOTAL_DAMAGED_ACCEPTED_QTY;

				public BigDecimal getTOTAL_DAMAGED_ACCEPTED_QTY () {
					return this.TOTAL_DAMAGED_ACCEPTED_QTY;
				}
				
			    public BigDecimal FREIGHT_PAID_AMOUNT;

				public BigDecimal getFREIGHT_PAID_AMOUNT () {
					return this.FREIGHT_PAID_AMOUNT;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public BigDecimal CUST_ORDER_NO;

				public BigDecimal getCUST_ORDER_NO () {
					return this.CUST_ORDER_NO;
				}
				
			    public String SHIP_FROM_NAME;

				public String getSHIP_FROM_NAME () {
					return this.SHIP_FROM_NAME;
				}
				
			    public String SHIPPING_ADDRESS_ID;

				public String getSHIPPING_ADDRESS_ID () {
					return this.SHIPPING_ADDRESS_ID;
				}
				
			    public String RESERVED_RE_RECOMMEND_FLAG;

				public String getRESERVED_RE_RECOMMEND_FLAG () {
					return this.RESERVED_RE_RECOMMEND_FLAG;
				}
				
			    public String RECOMMENDED_ORDER_FLAG;

				public String getRECOMMENDED_ORDER_FLAG () {
					return this.RECOMMENDED_ORDER_FLAG;
				}
				
			    public String FAILED_SCORECARD_FLAG;

				public String getFAILED_SCORECARD_FLAG () {
					return this.FAILED_SCORECARD_FLAG;
				}
				
			    public String VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG;

				public String getVENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG () {
					return this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG;
				}
				
			    public String PRICE_BRACKET_SOURCE_CODE;

				public String getPRICE_BRACKET_SOURCE_CODE () {
					return this.PRICE_BRACKET_SOURCE_CODE;
				}
				
			    public BigDecimal SHORT_PERCENT_TO_BACKORDER;

				public BigDecimal getSHORT_PERCENT_TO_BACKORDER () {
					return this.SHORT_PERCENT_TO_BACKORDER;
				}
				
			    public String SECONDARY_PO_TYPE;

				public String getSECONDARY_PO_TYPE () {
					return this.SECONDARY_PO_TYPE;
				}
				
			    public String TRANSMIT_FLAG;

				public String getTRANSMIT_FLAG () {
					return this.TRANSMIT_FLAG;
				}
				
			    public java.util.Date TRANSMIT_TIMESTAMP;

				public java.util.Date getTRANSMIT_TIMESTAMP () {
					return this.TRANSMIT_TIMESTAMP;
				}
				
			    public String PO_ERROR_IND;

				public String getPO_ERROR_IND () {
					return this.PO_ERROR_IND;
				}
				
			    public String STOCK_IND;

				public String getSTOCK_IND () {
					return this.STOCK_IND;
				}
				
			    public java.util.Date PO_CLOSE_TIME;

				public java.util.Date getPO_CLOSE_TIME () {
					return this.PO_CLOSE_TIME;
				}
				
			    public String REPLENISHMENT_SYSTEM;

				public String getREPLENISHMENT_SYSTEM () {
					return this.REPLENISHMENT_SYSTEM;
				}
				
			    public String SHIPMENT_NOTICE_NO;

				public String getSHIPMENT_NOTICE_NO () {
					return this.SHIPMENT_NOTICE_NO;
				}
				
			    public String FREIGHT_PROFORMA_STATUS;

				public String getFREIGHT_PROFORMA_STATUS () {
					return this.FREIGHT_PROFORMA_STATUS;
				}
				
			    public String SHIPMENT_ID;

				public String getSHIPMENT_ID () {
					return this.SHIPMENT_ID;
				}
				
			    public String FREIGHT_PROCESS_FLAG;

				public String getFREIGHT_PROCESS_FLAG () {
					return this.FREIGHT_PROCESS_FLAG;
				}
				
			    public String ORIG_PURCHASE_ORDER_NO;

				public String getORIG_PURCHASE_ORDER_NO () {
					return this.ORIG_PURCHASE_ORDER_NO;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String V3PF_SVOP;

				public String getV3PF_SVOP () {
					return this.V3PF_SVOP;
				}
				
			    public String CONFERENCE_TYPE;

				public String getCONFERENCE_TYPE () {
					return this.CONFERENCE_TYPE;
				}
				
			    public String NEXT_CONF_RECVD_FLAG;

				public String getNEXT_CONF_RECVD_FLAG () {
					return this.NEXT_CONF_RECVD_FLAG;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public String PICKUP_ALLOWANCE_OVERRIDE_FLAG;

				public String getPICKUP_ALLOWANCE_OVERRIDE_FLAG () {
					return this.PICKUP_ALLOWANCE_OVERRIDE_FLAG;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PURCHASE_ORDER_HEADER_2_UPDATEStruct other = (PURCHASE_ORDER_HEADER_2_UPDATEStruct) obj;
		
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PURCHASE_ORDER_HEADER_2_UPDATEStruct other) {

		other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.SITE_ID = this.SITE_ID;
	            other.SMS_CONFIRMED_DATE = this.SMS_CONFIRMED_DATE;
	            other.VENDOR_CONFIRMED_SHIP_DATE = this.VENDOR_CONFIRMED_SHIP_DATE;
	            other.SCHEDULED_PO_RECEIPT_TIMESTAMP = this.SCHEDULED_PO_RECEIPT_TIMESTAMP;
	            other.ORIG_PICKUP_ALLOW_TYPE = this.ORIG_PICKUP_ALLOW_TYPE;
	            other.PICKUP_ALLOW_FROM_BRACKET = this.PICKUP_ALLOW_FROM_BRACKET;
	            other.ORIG_FREIGHT_RATE = this.ORIG_FREIGHT_RATE;
	            other.ORIG_FREIGHT_TYPE = this.ORIG_FREIGHT_TYPE;
	            other.ORIG_MERCH_ALLOW_CHARGE = this.ORIG_MERCH_ALLOW_CHARGE;
	            other.ORIG_FREIGHT_ALLOW_CHARGE = this.ORIG_FREIGHT_ALLOW_CHARGE;
	            other.FREIGHT_ROUNDING_VARIANCE = this.FREIGHT_ROUNDING_VARIANCE;
	            other.SHIP_WITH_NEXT_ORDER_IND = this.SHIP_WITH_NEXT_ORDER_IND;
	            other.CUST_REFERENCE_ORDER_NO = this.CUST_REFERENCE_ORDER_NO;
	            other.OUTSIDE_WHSE_ID = this.OUTSIDE_WHSE_ID;
	            other.RECOMMENDED_ORDER_SEQ_NO = this.RECOMMENDED_ORDER_SEQ_NO;
	            other.SYSCO_BRACKET_NO = this.SYSCO_BRACKET_NO;
	            other.BUYER_NO = this.BUYER_NO;
	            other.ORDER_GROUP = this.ORDER_GROUP;
	            other.BUYING_GROUP = this.BUYING_GROUP;
	            other.PO_PRIMARY_STATUS = this.PO_PRIMARY_STATUS;
	            other.PO_SECONDARY_STATUS = this.PO_SECONDARY_STATUS;
	            other.PO_IN_USE_FLAG = this.PO_IN_USE_FLAG;
	            other.WHSE_CHANGE_CODE = this.WHSE_CHANGE_CODE;
	            other.PO_VALID_PRICING_FLAG = this.PO_VALID_PRICING_FLAG;
	            other.PO_TYPE = this.PO_TYPE;
	            other.DEMAND_STATUS = this.DEMAND_STATUS;
	            other.BACKORDER_FLAG = this.BACKORDER_FLAG;
	            other.PROC_BILLED_VENDOR_BILLED_FLAG = this.PROC_BILLED_VENDOR_BILLED_FLAG;
	            other.FREIGHT_INTER_COMPANY_STMT_FLAG = this.FREIGHT_INTER_COMPANY_STMT_FLAG;
	            other.CONF_STATUS = this.CONF_STATUS;
	            other.PO_VALID_PRICING_APPROVAL = this.PO_VALID_PRICING_APPROVAL;
	            other.CONF_RECVD_FLAG = this.CONF_RECVD_FLAG;
	            other.WHSE_STATUS = this.WHSE_STATUS;
	            other.PO_CHANGED_FLAG = this.PO_CHANGED_FLAG;
	            other.PRINT_PRICE_ON_PO_FLAG = this.PRINT_PRICE_ON_PO_FLAG;
	            other.UPDATE_LEAD_TIME_FLAG = this.UPDATE_LEAD_TIME_FLAG;
	            other.PRICE_CHANGE_FLAG = this.PRICE_CHANGE_FLAG;
	            other.CARRIER_ID = this.CARRIER_ID;
	            other.REVISED_PROFORMA_FLAG = this.REVISED_PROFORMA_FLAG;
	            other.PROFORMA_INPROCESS_FLAG = this.PROFORMA_INPROCESS_FLAG;
	            other.TRANSMIT_TO = this.TRANSMIT_TO;
	            other.RETRANSMIT_TO_VENDOR_FLAG = this.RETRANSMIT_TO_VENDOR_FLAG;
	            other.JOB_NO = this.JOB_NO;
	            other.PAY_TO_VENDOR_NO = this.PAY_TO_VENDOR_NO;
	            other.FREIGHT_VENDOR = this.FREIGHT_VENDOR;
	            other.VENDOR_TERMS = this.VENDOR_TERMS;
	            other.FREIGHT_VENDOR_TERMS = this.FREIGHT_VENDOR_TERMS;
	            other.CONFIRMED_TERMS = this.CONFIRMED_TERMS;
	            other.CONFIRMED_FREIGHT_VENDOR_TERMS = this.CONFIRMED_FREIGHT_VENDOR_TERMS;
	            other.TERMS_OVERRIDE_FLAG = this.TERMS_OVERRIDE_FLAG;
	            other.PO_PLACED_WITH = this.PO_PLACED_WITH;
	            other.LOAD_CTRL_NO = this.LOAD_CTRL_NO;
	            other.BUSINESS_DATE_ANTICIPATED_RECEIPT = this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_DATE_ANTICIPATED_RECEIPT = this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_VENDOR_CONF_RECEIPT = this.CALENDAR_VENDOR_CONF_RECEIPT;
	            other.BUSINESS_DATE_SHIP_PICKUP = this.BUSINESS_DATE_SHIP_PICKUP;
	            other.CALENDAR_DATE_SHIP_PICKUP = this.CALENDAR_DATE_SHIP_PICKUP;
	            other.BUSINESS_ORDER_DATE = this.BUSINESS_ORDER_DATE;
	            other.CALENDAR_ORDER_DATE = this.CALENDAR_ORDER_DATE;
	            other.BUSINESS_DATE_PO_NEEDED = this.BUSINESS_DATE_PO_NEEDED;
	            other.CALENDAR_DATE_PO_NEEDED = this.CALENDAR_DATE_PO_NEEDED;
	            other.PO_TRANSMISSION_TIMESTAMP = this.PO_TRANSMISSION_TIMESTAMP;
	            other.BUSINESS_DATE_PO_ACCEPTED = this.BUSINESS_DATE_PO_ACCEPTED;
	            other.CALENDAR_DATE_PO_ACCEPTED = this.CALENDAR_DATE_PO_ACCEPTED;
	            other.BUSINESS_DATE_ACTUAL_RECEIPT = this.BUSINESS_DATE_ACTUAL_RECEIPT;
	            other.CALENDAR_DATE_ACTUAL_RECEIPT = this.CALENDAR_DATE_ACTUAL_RECEIPT;
	            other.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE = this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE;
	            other.CALENDAR_VENDOR_CONF_DATE = this.CALENDAR_VENDOR_CONF_DATE;
	            other.TOTAL_LINES = this.TOTAL_LINES;
	            other.TOTAL_CASES = this.TOTAL_CASES;
	            other.TOTAL_CUBE = this.TOTAL_CUBE;
	            other.TOTAL_NET_WGT = this.TOTAL_NET_WGT;
	            other.TOTAL_GROSS_WGT = this.TOTAL_GROSS_WGT;
	            other.TOTAL_VENDOR_PALLETS = this.TOTAL_VENDOR_PALLETS;
	            other.TOTAL_VENDOR_UNITS = this.TOTAL_VENDOR_UNITS;
	            other.TOTAL_FOB_COST = this.TOTAL_FOB_COST;
	            other.TOTAL_FREIGHT_COST = this.TOTAL_FREIGHT_COST;
	            other.TOTAL_AP_COST = this.TOTAL_AP_COST;
	            other.TOTAL_PICKUP_ALLOW = this.TOTAL_PICKUP_ALLOW;
	            other.TOTAL_PICKUP_ALLOW_RATE = this.TOTAL_PICKUP_ALLOW_RATE;
	            other.PICKUP_ALLOW_TO_BRACKET = this.PICKUP_ALLOW_TO_BRACKET;
	            other.WHSE_UNLOAD_CHARGE = this.WHSE_UNLOAD_CHARGE;
	            other.WHSE_UNLOAD_CHARGE_TYPE = this.WHSE_UNLOAD_CHARGE_TYPE;
	            other.ORIG_NON_DIST_MERCH_ALLOW_CHARGE = this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE;
	            other.TOTAL_WHSE_PALLETS = this.TOTAL_WHSE_PALLETS;
	            other.CONFIRMED_FREIGHT_RATE = this.CONFIRMED_FREIGHT_RATE;
	            other.CONFIRMED_FREIGHT_RATE_TYPE = this.CONFIRMED_FREIGHT_RATE_TYPE;
	            other.CONFIRMED_UNLOADING_CHARGE = this.CONFIRMED_UNLOADING_CHARGE;
	            other.CONFIRMED_UNLOADING_CHRG_TYPE = this.CONFIRMED_UNLOADING_CHRG_TYPE;
	            other.CONFIRMED_PICKUP_ALLOW_RATE = this.CONFIRMED_PICKUP_ALLOW_RATE;
	            other.CONFIRMED_PICKUP_ALLOW_TYPE = this.CONFIRMED_PICKUP_ALLOW_TYPE;
	            other.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET = this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET;
	            other.CONFIRMED_PICKUP_ALLOW_TO_BRACKET = this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET;
	            other.CONFIRMED_TOTAL_LINES = this.CONFIRMED_TOTAL_LINES;
	            other.CONFIRMED_TOTA_CASES = this.CONFIRMED_TOTA_CASES;
	            other.CONFIMRED_TOTAL_CUBE = this.CONFIMRED_TOTAL_CUBE;
	            other.CONFIRMED_TOTAL_NET_WGT = this.CONFIRMED_TOTAL_NET_WGT;
	            other.CONFIRMED_TOTAL_GROSS_WGT = this.CONFIRMED_TOTAL_GROSS_WGT;
	            other.CONFIRMED_TOTAL_VENDOR_PALLETS = this.CONFIRMED_TOTAL_VENDOR_PALLETS;
	            other.CONFIRMED_TOTAL_VENDOR_UNITS = this.CONFIRMED_TOTAL_VENDOR_UNITS;
	            other.CONFIRMED_TOTAL_FOB_COST = this.CONFIRMED_TOTAL_FOB_COST;
	            other.CONFIRMED_TOTAL_FREIGHT_COST = this.CONFIRMED_TOTAL_FREIGHT_COST;
	            other.CONFIRMED_TOTAL_AP_COST = this.CONFIRMED_TOTAL_AP_COST;
	            other.CONFIRMED_TOTAL_PICKUP_ALLOW = this.CONFIRMED_TOTAL_PICKUP_ALLOW;
	            other.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE = this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE;
	            other.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE = this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_MERCH_ALLOW_CHARGE = this.CONFIRMED_MERCH_ALLOW_CHARGE;
	            other.CONFIRMED_FREIGHT_ALLOW_CHARGE = this.CONFIRMED_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_TOTAL_UNLOADING_CHARGE = this.CONFIRMED_TOTAL_UNLOADING_CHARGE;
	            other.CONFIRMED_TOTAL_BRACKET_DIFF = this.CONFIRMED_TOTAL_BRACKET_DIFF;
	            other.CONFIRMED_TOTAL_WHSE_PALLETS = this.CONFIRMED_TOTAL_WHSE_PALLETS;
	            other.CONFIRMED_USER = this.CONFIRMED_USER;
	            other.VENDOR_CONF_NO = this.VENDOR_CONF_NO;
	            other.VENDOR_CONF_METHOD = this.VENDOR_CONF_METHOD;
	            other.TOTAL_RECVD_LINES = this.TOTAL_RECVD_LINES;
	            other.TOTAL_RECVD_CASES = this.TOTAL_RECVD_CASES;
	            other.TOTAL_RECVD_CUBE = this.TOTAL_RECVD_CUBE;
	            other.TOTAL_RECVD_NET_WGT = this.TOTAL_RECVD_NET_WGT;
	            other.TOTAL_RECVD_GROSS_WGT = this.TOTAL_RECVD_GROSS_WGT;
	            other.TOTAL_RECVD_VENDOR_PALLETS = this.TOTAL_RECVD_VENDOR_PALLETS;
	            other.TOTAL_RECVD_WHSE_PALLETS = this.TOTAL_RECVD_WHSE_PALLETS;
	            other.TOTAL_RECVD_VENDOR_UNITS = this.TOTAL_RECVD_VENDOR_UNITS;
	            other.TOTAL_RECVD_FOB_COST = this.TOTAL_RECVD_FOB_COST;
	            other.TOTAL_RECVD_FREIGHT_COST = this.TOTAL_RECVD_FREIGHT_COST;
	            other.TOTAL_RECVD_AP_COST = this.TOTAL_RECVD_AP_COST;
	            other.TOTAL_RECVD_BRACKET_DIFF = this.TOTAL_RECVD_BRACKET_DIFF;
	            other.TOTAL_RECVD_PICKUP_ALLOW = this.TOTAL_RECVD_PICKUP_ALLOW;
	            other.TOTAL_RECVD_UNLOADING_CHARGE = this.TOTAL_RECVD_UNLOADING_CHARGE;
	            other.MERCH_PROFORMA_STATUS = this.MERCH_PROFORMA_STATUS;
	            other.MERCH_PROFORMA_NET_AMT = this.MERCH_PROFORMA_NET_AMT;
	            other.UNMATCHED_MERCH_PROFROMA_NET_AMT = this.UNMATCHED_MERCH_PROFROMA_NET_AMT;
	            other.MERCH_AMT_TO_BE_VOUCH = this.MERCH_AMT_TO_BE_VOUCH;
	            other.MERCH_MATCHED_STATUS = this.MERCH_MATCHED_STATUS;
	            other.MERCH_VOUCH_STATUS = this.MERCH_VOUCH_STATUS;
	            other.MERCH_PAID_STATUS = this.MERCH_PAID_STATUS;
	            other.MERCH_PRICE_DIFF_HEADER_STATUS = this.MERCH_PRICE_DIFF_HEADER_STATUS;
	            other.MERCH_PRICE_DIFF_ERROR_LINE_COUNT = this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT;
	            other.MERCH_QTY_DIFF_HEADER_STATUS = this.MERCH_QTY_DIFF_HEADER_STATUS;
	            other.MERCH_QTY_DIFF_ERROR_LINE_COUNT = this.MERCH_QTY_DIFF_ERROR_LINE_COUNT;
	            other.MERCH_PAYMENT_DUE_DATE = this.MERCH_PAYMENT_DUE_DATE;
	            other.MERCH_CASH_DISC = this.MERCH_CASH_DISC;
	            other.MERCH_VOUCH_AMT = this.MERCH_VOUCH_AMT;
	            other.MERCH_ROUNDING_VAR = this.MERCH_ROUNDING_VAR;
	            other.MERCH_VENDOR_INTERCOM_BILLED_FLAG = this.MERCH_VENDOR_INTERCOM_BILLED_FLAG;
	            other.MERCH_VAR_AMT = this.MERCH_VAR_AMT;
	            other.MERCH_FREIGHT_AMT = this.MERCH_FREIGHT_AMT;
	            other.FREIGHT_PROFORMA_NET_AMT = this.FREIGHT_PROFORMA_NET_AMT;
	            other.UNMATCHED_FREIGHT_PROFORMA_NET_AMT = this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT;
	            other.FREIGHT_AMT_TO_BE_VOUCH = this.FREIGHT_AMT_TO_BE_VOUCH;
	            other.FREIGHT_MATCHED_STATUS = this.FREIGHT_MATCHED_STATUS;
	            other.FREIGHT_VOUCH_STATUS = this.FREIGHT_VOUCH_STATUS;
	            other.FREIGHT_PAID_STATUS = this.FREIGHT_PAID_STATUS;
	            other.FREIGHT_DIFF_HEADER_STATUS = this.FREIGHT_DIFF_HEADER_STATUS;
	            other.FREIGHT_PAYMENT_DUE_DATE = this.FREIGHT_PAYMENT_DUE_DATE;
	            other.FREIGHT_CLAIM_STATUS = this.FREIGHT_CLAIM_STATUS;
	            other.FREIGHT_CASH_DISC = this.FREIGHT_CASH_DISC;
	            other.FREIGHT_VARIANCE_AMT = this.FREIGHT_VARIANCE_AMT;
	            other.FREIGHT_VOUCH_AMT = this.FREIGHT_VOUCH_AMT;
	            other.FREIGHT_INV_NO = this.FREIGHT_INV_NO;
	            other.FREIGHT_INV_DATE = this.FREIGHT_INV_DATE;
	            other.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG = this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG;
	            other.TOTAL_VENDOR_SHORT_QTY = this.TOTAL_VENDOR_SHORT_QTY;
	            other.TOTAL_CARRIER_SHORT_QTY = this.TOTAL_CARRIER_SHORT_QTY;
	            other.TOTAL_DAMAGED_ACCEPTED_QTY = this.TOTAL_DAMAGED_ACCEPTED_QTY;
	            other.FREIGHT_PAID_AMOUNT = this.FREIGHT_PAID_AMOUNT;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.CUST_ORDER_NO = this.CUST_ORDER_NO;
	            other.SHIP_FROM_NAME = this.SHIP_FROM_NAME;
	            other.SHIPPING_ADDRESS_ID = this.SHIPPING_ADDRESS_ID;
	            other.RESERVED_RE_RECOMMEND_FLAG = this.RESERVED_RE_RECOMMEND_FLAG;
	            other.RECOMMENDED_ORDER_FLAG = this.RECOMMENDED_ORDER_FLAG;
	            other.FAILED_SCORECARD_FLAG = this.FAILED_SCORECARD_FLAG;
	            other.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG = this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG;
	            other.PRICE_BRACKET_SOURCE_CODE = this.PRICE_BRACKET_SOURCE_CODE;
	            other.SHORT_PERCENT_TO_BACKORDER = this.SHORT_PERCENT_TO_BACKORDER;
	            other.SECONDARY_PO_TYPE = this.SECONDARY_PO_TYPE;
	            other.TRANSMIT_FLAG = this.TRANSMIT_FLAG;
	            other.TRANSMIT_TIMESTAMP = this.TRANSMIT_TIMESTAMP;
	            other.PO_ERROR_IND = this.PO_ERROR_IND;
	            other.STOCK_IND = this.STOCK_IND;
	            other.PO_CLOSE_TIME = this.PO_CLOSE_TIME;
	            other.REPLENISHMENT_SYSTEM = this.REPLENISHMENT_SYSTEM;
	            other.SHIPMENT_NOTICE_NO = this.SHIPMENT_NOTICE_NO;
	            other.FREIGHT_PROFORMA_STATUS = this.FREIGHT_PROFORMA_STATUS;
	            other.SHIPMENT_ID = this.SHIPMENT_ID;
	            other.FREIGHT_PROCESS_FLAG = this.FREIGHT_PROCESS_FLAG;
	            other.ORIG_PURCHASE_ORDER_NO = this.ORIG_PURCHASE_ORDER_NO;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.V3PF_SVOP = this.V3PF_SVOP;
	            other.CONFERENCE_TYPE = this.CONFERENCE_TYPE;
	            other.NEXT_CONF_RECVD_FLAG = this.NEXT_CONF_RECVD_FLAG;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.PICKUP_ALLOWANCE_OVERRIDE_FLAG = this.PICKUP_ALLOWANCE_OVERRIDE_FLAG;
	            
	}

	public void copyKeysDataTo(PURCHASE_ORDER_HEADER_2_UPDATEStruct other) {

		other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.SITE_ID = this.SITE_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.SITE_ID = readString(dis);
					
					this.SMS_CONFIRMED_DATE = readDate(dis);
					
					this.VENDOR_CONFIRMED_SHIP_DATE = readDate(dis);
					
					this.SCHEDULED_PO_RECEIPT_TIMESTAMP = readDate(dis);
					
					this.ORIG_PICKUP_ALLOW_TYPE = readString(dis);
					
						this.PICKUP_ALLOW_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE = readString(dis);
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.FREIGHT_ROUNDING_VARIANCE = (BigDecimal) dis.readObject();
					
					this.SHIP_WITH_NEXT_ORDER_IND = readString(dis);
					
					this.CUST_REFERENCE_ORDER_NO = readString(dis);
					
					this.OUTSIDE_WHSE_ID = readString(dis);
					
						this.RECOMMENDED_ORDER_SEQ_NO = (BigDecimal) dis.readObject();
					
						this.SYSCO_BRACKET_NO = (BigDecimal) dis.readObject();
					
					this.BUYER_NO = readString(dis);
					
					this.ORDER_GROUP = readString(dis);
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_IN_USE_FLAG = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.DEMAND_STATUS = readString(dis);
					
					this.BACKORDER_FLAG = readString(dis);
					
					this.PROC_BILLED_VENDOR_BILLED_FLAG = readString(dis);
					
					this.FREIGHT_INTER_COMPANY_STMT_FLAG = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.CONF_RECVD_FLAG = readString(dis);
					
					this.WHSE_STATUS = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.PRINT_PRICE_ON_PO_FLAG = readString(dis);
					
					this.UPDATE_LEAD_TIME_FLAG = readString(dis);
					
					this.PRICE_CHANGE_FLAG = readString(dis);
					
					this.CARRIER_ID = readString(dis);
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.PROFORMA_INPROCESS_FLAG = readString(dis);
					
					this.TRANSMIT_TO = readString(dis);
					
					this.RETRANSMIT_TO_VENDOR_FLAG = readString(dis);
					
					this.JOB_NO = readString(dis);
					
					this.PAY_TO_VENDOR_NO = readString(dis);
					
					this.FREIGHT_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.FREIGHT_VENDOR_TERMS = readString(dis);
					
					this.CONFIRMED_TERMS = readString(dis);
					
					this.CONFIRMED_FREIGHT_VENDOR_TERMS = readString(dis);
					
					this.TERMS_OVERRIDE_FLAG = readString(dis);
					
					this.PO_PLACED_WITH = readString(dis);
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_VENDOR_CONF_RECEIPT = readDate(dis);
					
					this.BUSINESS_DATE_SHIP_PICKUP = readDate(dis);
					
					this.CALENDAR_DATE_SHIP_PICKUP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
					this.CALENDAR_ORDER_DATE = readDate(dis);
					
					this.BUSINESS_DATE_PO_NEEDED = readDate(dis);
					
					this.CALENDAR_DATE_PO_NEEDED = readDate(dis);
					
					this.PO_TRANSMISSION_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_DATE_PO_ACCEPTED = readDate(dis);
					
					this.CALENDAR_DATE_PO_ACCEPTED = readDate(dis);
					
					this.BUSINESS_DATE_ACTUAL_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_ACTUAL_RECEIPT = readDate(dis);
					
					this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE = readDate(dis);
					
					this.CALENDAR_VENDOR_CONF_DATE = readDate(dis);
					
						this.TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.TOTAL_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_NET_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOW_RATE = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOW_TO_BRACKET = (BigDecimal) dis.readObject();
					
						this.WHSE_UNLOAD_CHARGE = (BigDecimal) dis.readObject();
					
					this.WHSE_UNLOAD_CHARGE_TYPE = readString(dis);
					
						this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.TOTAL_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_RATE_TYPE = readString(dis);
					
						this.CONFIRMED_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UNLOADING_CHRG_TYPE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_RATE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTA_CASES = (BigDecimal) dis.readObject();
					
						this.CONFIMRED_TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_NET_WGT = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_BRACKET_DIFF = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_USER = readString(dis);
					
					this.VENDOR_CONF_NO = readString(dis);
					
					this.VENDOR_CONF_METHOD = readString(dis);
					
						this.TOTAL_RECVD_LINES = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_NET_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_BRACKET_DIFF = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.UNMATCHED_MERCH_PROFROMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_AMT_TO_BE_VOUCH = (BigDecimal) dis.readObject();
					
					this.MERCH_MATCHED_STATUS = readString(dis);
					
					this.MERCH_VOUCH_STATUS = readString(dis);
					
					this.MERCH_PAID_STATUS = readString(dis);
					
					this.MERCH_PRICE_DIFF_HEADER_STATUS = readString(dis);
					
						this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT = (BigDecimal) dis.readObject();
					
					this.MERCH_QTY_DIFF_HEADER_STATUS = readString(dis);
					
						this.MERCH_QTY_DIFF_ERROR_LINE_COUNT = (BigDecimal) dis.readObject();
					
					this.MERCH_PAYMENT_DUE_DATE = readDate(dis);
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.MERCH_VOUCH_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_ROUNDING_VAR = (BigDecimal) dis.readObject();
					
					this.MERCH_VENDOR_INTERCOM_BILLED_FLAG = readString(dis);
					
						this.MERCH_VAR_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_FREIGHT_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_AMT_TO_BE_VOUCH = (BigDecimal) dis.readObject();
					
					this.FREIGHT_MATCHED_STATUS = readString(dis);
					
					this.FREIGHT_VOUCH_STATUS = readString(dis);
					
					this.FREIGHT_PAID_STATUS = readString(dis);
					
					this.FREIGHT_DIFF_HEADER_STATUS = readString(dis);
					
					this.FREIGHT_PAYMENT_DUE_DATE = readDate(dis);
					
					this.FREIGHT_CLAIM_STATUS = readString(dis);
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_VARIANCE_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_VOUCH_AMT = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
					this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG = readString(dis);
					
						this.TOTAL_VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.TOTAL_CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.TOTAL_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.FREIGHT_PAID_AMOUNT = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.SHIP_FROM_NAME = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.RESERVED_RE_RECOMMEND_FLAG = readString(dis);
					
					this.RECOMMENDED_ORDER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG = readString(dis);
					
					this.PRICE_BRACKET_SOURCE_CODE = readString(dis);
					
						this.SHORT_PERCENT_TO_BACKORDER = (BigDecimal) dis.readObject();
					
					this.SECONDARY_PO_TYPE = readString(dis);
					
					this.TRANSMIT_FLAG = readString(dis);
					
					this.TRANSMIT_TIMESTAMP = readDate(dis);
					
					this.PO_ERROR_IND = readString(dis);
					
					this.STOCK_IND = readString(dis);
					
					this.PO_CLOSE_TIME = readDate(dis);
					
					this.REPLENISHMENT_SYSTEM = readString(dis);
					
					this.SHIPMENT_NOTICE_NO = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.SHIPMENT_ID = readString(dis);
					
					this.FREIGHT_PROCESS_FLAG = readString(dis);
					
					this.ORIG_PURCHASE_ORDER_NO = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V3PF_SVOP = readString(dis);
					
					this.CONFERENCE_TYPE = readString(dis);
					
					this.NEXT_CONF_RECVD_FLAG = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.PICKUP_ALLOWANCE_OVERRIDE_FLAG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.SITE_ID = readString(dis);
					
					this.SMS_CONFIRMED_DATE = readDate(dis);
					
					this.VENDOR_CONFIRMED_SHIP_DATE = readDate(dis);
					
					this.SCHEDULED_PO_RECEIPT_TIMESTAMP = readDate(dis);
					
					this.ORIG_PICKUP_ALLOW_TYPE = readString(dis);
					
						this.PICKUP_ALLOW_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE = readString(dis);
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.FREIGHT_ROUNDING_VARIANCE = (BigDecimal) dis.readObject();
					
					this.SHIP_WITH_NEXT_ORDER_IND = readString(dis);
					
					this.CUST_REFERENCE_ORDER_NO = readString(dis);
					
					this.OUTSIDE_WHSE_ID = readString(dis);
					
						this.RECOMMENDED_ORDER_SEQ_NO = (BigDecimal) dis.readObject();
					
						this.SYSCO_BRACKET_NO = (BigDecimal) dis.readObject();
					
					this.BUYER_NO = readString(dis);
					
					this.ORDER_GROUP = readString(dis);
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_IN_USE_FLAG = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.DEMAND_STATUS = readString(dis);
					
					this.BACKORDER_FLAG = readString(dis);
					
					this.PROC_BILLED_VENDOR_BILLED_FLAG = readString(dis);
					
					this.FREIGHT_INTER_COMPANY_STMT_FLAG = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.CONF_RECVD_FLAG = readString(dis);
					
					this.WHSE_STATUS = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.PRINT_PRICE_ON_PO_FLAG = readString(dis);
					
					this.UPDATE_LEAD_TIME_FLAG = readString(dis);
					
					this.PRICE_CHANGE_FLAG = readString(dis);
					
					this.CARRIER_ID = readString(dis);
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.PROFORMA_INPROCESS_FLAG = readString(dis);
					
					this.TRANSMIT_TO = readString(dis);
					
					this.RETRANSMIT_TO_VENDOR_FLAG = readString(dis);
					
					this.JOB_NO = readString(dis);
					
					this.PAY_TO_VENDOR_NO = readString(dis);
					
					this.FREIGHT_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.FREIGHT_VENDOR_TERMS = readString(dis);
					
					this.CONFIRMED_TERMS = readString(dis);
					
					this.CONFIRMED_FREIGHT_VENDOR_TERMS = readString(dis);
					
					this.TERMS_OVERRIDE_FLAG = readString(dis);
					
					this.PO_PLACED_WITH = readString(dis);
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_VENDOR_CONF_RECEIPT = readDate(dis);
					
					this.BUSINESS_DATE_SHIP_PICKUP = readDate(dis);
					
					this.CALENDAR_DATE_SHIP_PICKUP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
					this.CALENDAR_ORDER_DATE = readDate(dis);
					
					this.BUSINESS_DATE_PO_NEEDED = readDate(dis);
					
					this.CALENDAR_DATE_PO_NEEDED = readDate(dis);
					
					this.PO_TRANSMISSION_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_DATE_PO_ACCEPTED = readDate(dis);
					
					this.CALENDAR_DATE_PO_ACCEPTED = readDate(dis);
					
					this.BUSINESS_DATE_ACTUAL_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_ACTUAL_RECEIPT = readDate(dis);
					
					this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE = readDate(dis);
					
					this.CALENDAR_VENDOR_CONF_DATE = readDate(dis);
					
						this.TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.TOTAL_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_NET_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOW_RATE = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOW_TO_BRACKET = (BigDecimal) dis.readObject();
					
						this.WHSE_UNLOAD_CHARGE = (BigDecimal) dis.readObject();
					
					this.WHSE_UNLOAD_CHARGE_TYPE = readString(dis);
					
						this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.TOTAL_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_RATE_TYPE = readString(dis);
					
						this.CONFIRMED_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UNLOADING_CHRG_TYPE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_RATE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTA_CASES = (BigDecimal) dis.readObject();
					
						this.CONFIMRED_TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_NET_WGT = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_BRACKET_DIFF = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_USER = readString(dis);
					
					this.VENDOR_CONF_NO = readString(dis);
					
					this.VENDOR_CONF_METHOD = readString(dis);
					
						this.TOTAL_RECVD_LINES = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_NET_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_BRACKET_DIFF = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.UNMATCHED_MERCH_PROFROMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_AMT_TO_BE_VOUCH = (BigDecimal) dis.readObject();
					
					this.MERCH_MATCHED_STATUS = readString(dis);
					
					this.MERCH_VOUCH_STATUS = readString(dis);
					
					this.MERCH_PAID_STATUS = readString(dis);
					
					this.MERCH_PRICE_DIFF_HEADER_STATUS = readString(dis);
					
						this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT = (BigDecimal) dis.readObject();
					
					this.MERCH_QTY_DIFF_HEADER_STATUS = readString(dis);
					
						this.MERCH_QTY_DIFF_ERROR_LINE_COUNT = (BigDecimal) dis.readObject();
					
					this.MERCH_PAYMENT_DUE_DATE = readDate(dis);
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.MERCH_VOUCH_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_ROUNDING_VAR = (BigDecimal) dis.readObject();
					
					this.MERCH_VENDOR_INTERCOM_BILLED_FLAG = readString(dis);
					
						this.MERCH_VAR_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_FREIGHT_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_AMT_TO_BE_VOUCH = (BigDecimal) dis.readObject();
					
					this.FREIGHT_MATCHED_STATUS = readString(dis);
					
					this.FREIGHT_VOUCH_STATUS = readString(dis);
					
					this.FREIGHT_PAID_STATUS = readString(dis);
					
					this.FREIGHT_DIFF_HEADER_STATUS = readString(dis);
					
					this.FREIGHT_PAYMENT_DUE_DATE = readDate(dis);
					
					this.FREIGHT_CLAIM_STATUS = readString(dis);
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_VARIANCE_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_VOUCH_AMT = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
					this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG = readString(dis);
					
						this.TOTAL_VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.TOTAL_CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.TOTAL_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.FREIGHT_PAID_AMOUNT = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.SHIP_FROM_NAME = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.RESERVED_RE_RECOMMEND_FLAG = readString(dis);
					
					this.RECOMMENDED_ORDER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG = readString(dis);
					
					this.PRICE_BRACKET_SOURCE_CODE = readString(dis);
					
						this.SHORT_PERCENT_TO_BACKORDER = (BigDecimal) dis.readObject();
					
					this.SECONDARY_PO_TYPE = readString(dis);
					
					this.TRANSMIT_FLAG = readString(dis);
					
					this.TRANSMIT_TIMESTAMP = readDate(dis);
					
					this.PO_ERROR_IND = readString(dis);
					
					this.STOCK_IND = readString(dis);
					
					this.PO_CLOSE_TIME = readDate(dis);
					
					this.REPLENISHMENT_SYSTEM = readString(dis);
					
					this.SHIPMENT_NOTICE_NO = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.SHIPMENT_ID = readString(dis);
					
					this.FREIGHT_PROCESS_FLAG = readString(dis);
					
					this.ORIG_PURCHASE_ORDER_NO = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V3PF_SVOP = readString(dis);
					
					this.CONFERENCE_TYPE = readString(dis);
					
					this.NEXT_CONF_RECVD_FLAG = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.PICKUP_ALLOWANCE_OVERRIDE_FLAG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.SITE_ID,dos);
					
					// java.util.Date
				
						writeDate(this.SMS_CONFIRMED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.VENDOR_CONFIRMED_SHIP_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SCHEDULED_PO_RECEIPT_TIMESTAMP,dos);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOW_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_ROUNDING_VARIANCE);
					
					// String
				
						writeString(this.SHIP_WITH_NEXT_ORDER_IND,dos);
					
					// String
				
						writeString(this.CUST_REFERENCE_ORDER_NO,dos);
					
					// String
				
						writeString(this.OUTSIDE_WHSE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECOMMENDED_ORDER_SEQ_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SYSCO_BRACKET_NO);
					
					// String
				
						writeString(this.BUYER_NO,dos);
					
					// String
				
						writeString(this.ORDER_GROUP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_IN_USE_FLAG,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.DEMAND_STATUS,dos);
					
					// String
				
						writeString(this.BACKORDER_FLAG,dos);
					
					// String
				
						writeString(this.PROC_BILLED_VENDOR_BILLED_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_INTER_COMPANY_STMT_FLAG,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.CONF_RECVD_FLAG,dos);
					
					// String
				
						writeString(this.WHSE_STATUS,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.PRINT_PRICE_ON_PO_FLAG,dos);
					
					// String
				
						writeString(this.UPDATE_LEAD_TIME_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.CARRIER_ID,dos);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.PROFORMA_INPROCESS_FLAG,dos);
					
					// String
				
						writeString(this.TRANSMIT_TO,dos);
					
					// String
				
						writeString(this.RETRANSMIT_TO_VENDOR_FLAG,dos);
					
					// String
				
						writeString(this.JOB_NO,dos);
					
					// String
				
						writeString(this.PAY_TO_VENDOR_NO,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.CONFIRMED_TERMS,dos);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.TERMS_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.PO_PLACED_WITH,dos);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_VENDOR_CONF_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_SHIP_PICKUP,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SHIP_PICKUP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_PO_NEEDED,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_PO_NEEDED,dos);
					
					// java.util.Date
				
						writeDate(this.PO_TRANSMISSION_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_PO_ACCEPTED,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_PO_ACCEPTED,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ACTUAL_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ACTUAL_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_VENDOR_CONF_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOW_RATE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOW_TO_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.WHSE_UNLOAD_CHARGE);
					
					// String
				
						writeString(this.WHSE_UNLOAD_CHARGE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_WHSE_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_RATE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.CONFIRMED_UNLOADING_CHRG_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTA_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIMRED_TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_UNLOADING_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_BRACKET_DIFF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_WHSE_PALLETS);
					
					// String
				
						writeString(this.CONFIRMED_USER,dos);
					
					// String
				
						writeString(this.VENDOR_CONF_NO,dos);
					
					// String
				
						writeString(this.VENDOR_CONF_METHOD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_WHSE_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_BRACKET_DIFF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNMATCHED_MERCH_PROFROMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_AMT_TO_BE_VOUCH);
					
					// String
				
						writeString(this.MERCH_MATCHED_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_VOUCH_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PAID_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_HEADER_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_HEADER_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_DIFF_ERROR_LINE_COUNT);
					
					// java.util.Date
				
						writeDate(this.MERCH_PAYMENT_DUE_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_VOUCH_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_ROUNDING_VAR);
					
					// String
				
						writeString(this.MERCH_VENDOR_INTERCOM_BILLED_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_VAR_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_FREIGHT_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_AMT_TO_BE_VOUCH);
					
					// String
				
						writeString(this.FREIGHT_MATCHED_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_VOUCH_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_PAID_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_DIFF_HEADER_STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_PAYMENT_DUE_DATE,dos);
					
					// String
				
						writeString(this.FREIGHT_CLAIM_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_VARIANCE_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_VOUCH_AMT);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_PAID_AMOUNT);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// String
				
						writeString(this.SHIP_FROM_NAME,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.RESERVED_RE_RECOMMEND_FLAG,dos);
					
					// String
				
						writeString(this.RECOMMENDED_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_BRACKET_SOURCE_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHORT_PERCENT_TO_BACKORDER);
					
					// String
				
						writeString(this.SECONDARY_PO_TYPE,dos);
					
					// String
				
						writeString(this.TRANSMIT_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.TRANSMIT_TIMESTAMP,dos);
					
					// String
				
						writeString(this.PO_ERROR_IND,dos);
					
					// String
				
						writeString(this.STOCK_IND,dos);
					
					// java.util.Date
				
						writeDate(this.PO_CLOSE_TIME,dos);
					
					// String
				
						writeString(this.REPLENISHMENT_SYSTEM,dos);
					
					// String
				
						writeString(this.SHIPMENT_NOTICE_NO,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.SHIPMENT_ID,dos);
					
					// String
				
						writeString(this.FREIGHT_PROCESS_FLAG,dos);
					
					// String
				
						writeString(this.ORIG_PURCHASE_ORDER_NO,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V3PF_SVOP,dos);
					
					// String
				
						writeString(this.CONFERENCE_TYPE,dos);
					
					// String
				
						writeString(this.NEXT_CONF_RECVD_FLAG,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_OVERRIDE_FLAG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.SITE_ID,dos);
					
					// java.util.Date
				
						writeDate(this.SMS_CONFIRMED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.VENDOR_CONFIRMED_SHIP_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SCHEDULED_PO_RECEIPT_TIMESTAMP,dos);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOW_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_ROUNDING_VARIANCE);
					
					// String
				
						writeString(this.SHIP_WITH_NEXT_ORDER_IND,dos);
					
					// String
				
						writeString(this.CUST_REFERENCE_ORDER_NO,dos);
					
					// String
				
						writeString(this.OUTSIDE_WHSE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECOMMENDED_ORDER_SEQ_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SYSCO_BRACKET_NO);
					
					// String
				
						writeString(this.BUYER_NO,dos);
					
					// String
				
						writeString(this.ORDER_GROUP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_IN_USE_FLAG,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.DEMAND_STATUS,dos);
					
					// String
				
						writeString(this.BACKORDER_FLAG,dos);
					
					// String
				
						writeString(this.PROC_BILLED_VENDOR_BILLED_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_INTER_COMPANY_STMT_FLAG,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.CONF_RECVD_FLAG,dos);
					
					// String
				
						writeString(this.WHSE_STATUS,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.PRINT_PRICE_ON_PO_FLAG,dos);
					
					// String
				
						writeString(this.UPDATE_LEAD_TIME_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.CARRIER_ID,dos);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.PROFORMA_INPROCESS_FLAG,dos);
					
					// String
				
						writeString(this.TRANSMIT_TO,dos);
					
					// String
				
						writeString(this.RETRANSMIT_TO_VENDOR_FLAG,dos);
					
					// String
				
						writeString(this.JOB_NO,dos);
					
					// String
				
						writeString(this.PAY_TO_VENDOR_NO,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.CONFIRMED_TERMS,dos);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.TERMS_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.PO_PLACED_WITH,dos);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_VENDOR_CONF_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_SHIP_PICKUP,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SHIP_PICKUP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_PO_NEEDED,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_PO_NEEDED,dos);
					
					// java.util.Date
				
						writeDate(this.PO_TRANSMISSION_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_PO_ACCEPTED,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_PO_ACCEPTED,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ACTUAL_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ACTUAL_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_VENDOR_CONF_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOW_RATE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOW_TO_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.WHSE_UNLOAD_CHARGE);
					
					// String
				
						writeString(this.WHSE_UNLOAD_CHARGE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_WHSE_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_RATE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.CONFIRMED_UNLOADING_CHRG_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTA_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIMRED_TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_UNLOADING_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_BRACKET_DIFF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_WHSE_PALLETS);
					
					// String
				
						writeString(this.CONFIRMED_USER,dos);
					
					// String
				
						writeString(this.VENDOR_CONF_NO,dos);
					
					// String
				
						writeString(this.VENDOR_CONF_METHOD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_WHSE_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_BRACKET_DIFF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNMATCHED_MERCH_PROFROMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_AMT_TO_BE_VOUCH);
					
					// String
				
						writeString(this.MERCH_MATCHED_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_VOUCH_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PAID_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_HEADER_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_HEADER_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_DIFF_ERROR_LINE_COUNT);
					
					// java.util.Date
				
						writeDate(this.MERCH_PAYMENT_DUE_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_VOUCH_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_ROUNDING_VAR);
					
					// String
				
						writeString(this.MERCH_VENDOR_INTERCOM_BILLED_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_VAR_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_FREIGHT_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_AMT_TO_BE_VOUCH);
					
					// String
				
						writeString(this.FREIGHT_MATCHED_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_VOUCH_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_PAID_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_DIFF_HEADER_STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_PAYMENT_DUE_DATE,dos);
					
					// String
				
						writeString(this.FREIGHT_CLAIM_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_VARIANCE_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_VOUCH_AMT);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_PAID_AMOUNT);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// String
				
						writeString(this.SHIP_FROM_NAME,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.RESERVED_RE_RECOMMEND_FLAG,dos);
					
					// String
				
						writeString(this.RECOMMENDED_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_BRACKET_SOURCE_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHORT_PERCENT_TO_BACKORDER);
					
					// String
				
						writeString(this.SECONDARY_PO_TYPE,dos);
					
					// String
				
						writeString(this.TRANSMIT_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.TRANSMIT_TIMESTAMP,dos);
					
					// String
				
						writeString(this.PO_ERROR_IND,dos);
					
					// String
				
						writeString(this.STOCK_IND,dos);
					
					// java.util.Date
				
						writeDate(this.PO_CLOSE_TIME,dos);
					
					// String
				
						writeString(this.REPLENISHMENT_SYSTEM,dos);
					
					// String
				
						writeString(this.SHIPMENT_NOTICE_NO,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.SHIPMENT_ID,dos);
					
					// String
				
						writeString(this.FREIGHT_PROCESS_FLAG,dos);
					
					// String
				
						writeString(this.ORIG_PURCHASE_ORDER_NO,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V3PF_SVOP,dos);
					
					// String
				
						writeString(this.CONFERENCE_TYPE,dos);
					
					// String
				
						writeString(this.NEXT_CONF_RECVD_FLAG,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_OVERRIDE_FLAG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",SITE_ID="+SITE_ID);
		sb.append(",SMS_CONFIRMED_DATE="+String.valueOf(SMS_CONFIRMED_DATE));
		sb.append(",VENDOR_CONFIRMED_SHIP_DATE="+String.valueOf(VENDOR_CONFIRMED_SHIP_DATE));
		sb.append(",SCHEDULED_PO_RECEIPT_TIMESTAMP="+String.valueOf(SCHEDULED_PO_RECEIPT_TIMESTAMP));
		sb.append(",ORIG_PICKUP_ALLOW_TYPE="+ORIG_PICKUP_ALLOW_TYPE);
		sb.append(",PICKUP_ALLOW_FROM_BRACKET="+String.valueOf(PICKUP_ALLOW_FROM_BRACKET));
		sb.append(",ORIG_FREIGHT_RATE="+String.valueOf(ORIG_FREIGHT_RATE));
		sb.append(",ORIG_FREIGHT_TYPE="+ORIG_FREIGHT_TYPE);
		sb.append(",ORIG_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_MERCH_ALLOW_CHARGE));
		sb.append(",ORIG_FREIGHT_ALLOW_CHARGE="+String.valueOf(ORIG_FREIGHT_ALLOW_CHARGE));
		sb.append(",FREIGHT_ROUNDING_VARIANCE="+String.valueOf(FREIGHT_ROUNDING_VARIANCE));
		sb.append(",SHIP_WITH_NEXT_ORDER_IND="+SHIP_WITH_NEXT_ORDER_IND);
		sb.append(",CUST_REFERENCE_ORDER_NO="+CUST_REFERENCE_ORDER_NO);
		sb.append(",OUTSIDE_WHSE_ID="+OUTSIDE_WHSE_ID);
		sb.append(",RECOMMENDED_ORDER_SEQ_NO="+String.valueOf(RECOMMENDED_ORDER_SEQ_NO));
		sb.append(",SYSCO_BRACKET_NO="+String.valueOf(SYSCO_BRACKET_NO));
		sb.append(",BUYER_NO="+BUYER_NO);
		sb.append(",ORDER_GROUP="+ORDER_GROUP);
		sb.append(",BUYING_GROUP="+String.valueOf(BUYING_GROUP));
		sb.append(",PO_PRIMARY_STATUS="+PO_PRIMARY_STATUS);
		sb.append(",PO_SECONDARY_STATUS="+PO_SECONDARY_STATUS);
		sb.append(",PO_IN_USE_FLAG="+PO_IN_USE_FLAG);
		sb.append(",WHSE_CHANGE_CODE="+WHSE_CHANGE_CODE);
		sb.append(",PO_VALID_PRICING_FLAG="+PO_VALID_PRICING_FLAG);
		sb.append(",PO_TYPE="+PO_TYPE);
		sb.append(",DEMAND_STATUS="+DEMAND_STATUS);
		sb.append(",BACKORDER_FLAG="+BACKORDER_FLAG);
		sb.append(",PROC_BILLED_VENDOR_BILLED_FLAG="+PROC_BILLED_VENDOR_BILLED_FLAG);
		sb.append(",FREIGHT_INTER_COMPANY_STMT_FLAG="+FREIGHT_INTER_COMPANY_STMT_FLAG);
		sb.append(",CONF_STATUS="+CONF_STATUS);
		sb.append(",PO_VALID_PRICING_APPROVAL="+PO_VALID_PRICING_APPROVAL);
		sb.append(",CONF_RECVD_FLAG="+CONF_RECVD_FLAG);
		sb.append(",WHSE_STATUS="+WHSE_STATUS);
		sb.append(",PO_CHANGED_FLAG="+PO_CHANGED_FLAG);
		sb.append(",PRINT_PRICE_ON_PO_FLAG="+PRINT_PRICE_ON_PO_FLAG);
		sb.append(",UPDATE_LEAD_TIME_FLAG="+UPDATE_LEAD_TIME_FLAG);
		sb.append(",PRICE_CHANGE_FLAG="+PRICE_CHANGE_FLAG);
		sb.append(",CARRIER_ID="+CARRIER_ID);
		sb.append(",REVISED_PROFORMA_FLAG="+REVISED_PROFORMA_FLAG);
		sb.append(",PROFORMA_INPROCESS_FLAG="+PROFORMA_INPROCESS_FLAG);
		sb.append(",TRANSMIT_TO="+TRANSMIT_TO);
		sb.append(",RETRANSMIT_TO_VENDOR_FLAG="+RETRANSMIT_TO_VENDOR_FLAG);
		sb.append(",JOB_NO="+JOB_NO);
		sb.append(",PAY_TO_VENDOR_NO="+PAY_TO_VENDOR_NO);
		sb.append(",FREIGHT_VENDOR="+FREIGHT_VENDOR);
		sb.append(",VENDOR_TERMS="+VENDOR_TERMS);
		sb.append(",FREIGHT_VENDOR_TERMS="+FREIGHT_VENDOR_TERMS);
		sb.append(",CONFIRMED_TERMS="+CONFIRMED_TERMS);
		sb.append(",CONFIRMED_FREIGHT_VENDOR_TERMS="+CONFIRMED_FREIGHT_VENDOR_TERMS);
		sb.append(",TERMS_OVERRIDE_FLAG="+TERMS_OVERRIDE_FLAG);
		sb.append(",PO_PLACED_WITH="+PO_PLACED_WITH);
		sb.append(",LOAD_CTRL_NO="+LOAD_CTRL_NO);
		sb.append(",BUSINESS_DATE_ANTICIPATED_RECEIPT="+String.valueOf(BUSINESS_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_DATE_ANTICIPATED_RECEIPT="+String.valueOf(CALENDAR_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_VENDOR_CONF_RECEIPT="+String.valueOf(CALENDAR_VENDOR_CONF_RECEIPT));
		sb.append(",BUSINESS_DATE_SHIP_PICKUP="+String.valueOf(BUSINESS_DATE_SHIP_PICKUP));
		sb.append(",CALENDAR_DATE_SHIP_PICKUP="+String.valueOf(CALENDAR_DATE_SHIP_PICKUP));
		sb.append(",BUSINESS_ORDER_DATE="+String.valueOf(BUSINESS_ORDER_DATE));
		sb.append(",CALENDAR_ORDER_DATE="+String.valueOf(CALENDAR_ORDER_DATE));
		sb.append(",BUSINESS_DATE_PO_NEEDED="+String.valueOf(BUSINESS_DATE_PO_NEEDED));
		sb.append(",CALENDAR_DATE_PO_NEEDED="+String.valueOf(CALENDAR_DATE_PO_NEEDED));
		sb.append(",PO_TRANSMISSION_TIMESTAMP="+String.valueOf(PO_TRANSMISSION_TIMESTAMP));
		sb.append(",BUSINESS_DATE_PO_ACCEPTED="+String.valueOf(BUSINESS_DATE_PO_ACCEPTED));
		sb.append(",CALENDAR_DATE_PO_ACCEPTED="+String.valueOf(CALENDAR_DATE_PO_ACCEPTED));
		sb.append(",BUSINESS_DATE_ACTUAL_RECEIPT="+String.valueOf(BUSINESS_DATE_ACTUAL_RECEIPT));
		sb.append(",CALENDAR_DATE_ACTUAL_RECEIPT="+String.valueOf(CALENDAR_DATE_ACTUAL_RECEIPT));
		sb.append(",CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE="+String.valueOf(CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE));
		sb.append(",CALENDAR_VENDOR_CONF_DATE="+String.valueOf(CALENDAR_VENDOR_CONF_DATE));
		sb.append(",TOTAL_LINES="+String.valueOf(TOTAL_LINES));
		sb.append(",TOTAL_CASES="+String.valueOf(TOTAL_CASES));
		sb.append(",TOTAL_CUBE="+String.valueOf(TOTAL_CUBE));
		sb.append(",TOTAL_NET_WGT="+String.valueOf(TOTAL_NET_WGT));
		sb.append(",TOTAL_GROSS_WGT="+String.valueOf(TOTAL_GROSS_WGT));
		sb.append(",TOTAL_VENDOR_PALLETS="+String.valueOf(TOTAL_VENDOR_PALLETS));
		sb.append(",TOTAL_VENDOR_UNITS="+String.valueOf(TOTAL_VENDOR_UNITS));
		sb.append(",TOTAL_FOB_COST="+String.valueOf(TOTAL_FOB_COST));
		sb.append(",TOTAL_FREIGHT_COST="+String.valueOf(TOTAL_FREIGHT_COST));
		sb.append(",TOTAL_AP_COST="+String.valueOf(TOTAL_AP_COST));
		sb.append(",TOTAL_PICKUP_ALLOW="+String.valueOf(TOTAL_PICKUP_ALLOW));
		sb.append(",TOTAL_PICKUP_ALLOW_RATE="+String.valueOf(TOTAL_PICKUP_ALLOW_RATE));
		sb.append(",PICKUP_ALLOW_TO_BRACKET="+String.valueOf(PICKUP_ALLOW_TO_BRACKET));
		sb.append(",WHSE_UNLOAD_CHARGE="+String.valueOf(WHSE_UNLOAD_CHARGE));
		sb.append(",WHSE_UNLOAD_CHARGE_TYPE="+WHSE_UNLOAD_CHARGE_TYPE);
		sb.append(",ORIG_NON_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_NON_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",TOTAL_WHSE_PALLETS="+String.valueOf(TOTAL_WHSE_PALLETS));
		sb.append(",CONFIRMED_FREIGHT_RATE="+String.valueOf(CONFIRMED_FREIGHT_RATE));
		sb.append(",CONFIRMED_FREIGHT_RATE_TYPE="+CONFIRMED_FREIGHT_RATE_TYPE);
		sb.append(",CONFIRMED_UNLOADING_CHARGE="+String.valueOf(CONFIRMED_UNLOADING_CHARGE));
		sb.append(",CONFIRMED_UNLOADING_CHRG_TYPE="+CONFIRMED_UNLOADING_CHRG_TYPE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_RATE="+String.valueOf(CONFIRMED_PICKUP_ALLOW_RATE));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TYPE="+CONFIRMED_PICKUP_ALLOW_TYPE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_FROM_BRACKET="+String.valueOf(CONFIRMED_PICKUP_ALLOW_FROM_BRACKET));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TO_BRACKET="+String.valueOf(CONFIRMED_PICKUP_ALLOW_TO_BRACKET));
		sb.append(",CONFIRMED_TOTAL_LINES="+String.valueOf(CONFIRMED_TOTAL_LINES));
		sb.append(",CONFIRMED_TOTA_CASES="+String.valueOf(CONFIRMED_TOTA_CASES));
		sb.append(",CONFIMRED_TOTAL_CUBE="+String.valueOf(CONFIMRED_TOTAL_CUBE));
		sb.append(",CONFIRMED_TOTAL_NET_WGT="+String.valueOf(CONFIRMED_TOTAL_NET_WGT));
		sb.append(",CONFIRMED_TOTAL_GROSS_WGT="+String.valueOf(CONFIRMED_TOTAL_GROSS_WGT));
		sb.append(",CONFIRMED_TOTAL_VENDOR_PALLETS="+String.valueOf(CONFIRMED_TOTAL_VENDOR_PALLETS));
		sb.append(",CONFIRMED_TOTAL_VENDOR_UNITS="+String.valueOf(CONFIRMED_TOTAL_VENDOR_UNITS));
		sb.append(",CONFIRMED_TOTAL_FOB_COST="+String.valueOf(CONFIRMED_TOTAL_FOB_COST));
		sb.append(",CONFIRMED_TOTAL_FREIGHT_COST="+String.valueOf(CONFIRMED_TOTAL_FREIGHT_COST));
		sb.append(",CONFIRMED_TOTAL_AP_COST="+String.valueOf(CONFIRMED_TOTAL_AP_COST));
		sb.append(",CONFIRMED_TOTAL_PICKUP_ALLOW="+String.valueOf(CONFIRMED_TOTAL_PICKUP_ALLOW));
		sb.append(",CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_MERCH_ALLOW_CHARGE="+String.valueOf(CONFIRMED_MERCH_ALLOW_CHARGE));
		sb.append(",CONFIRMED_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONFIRMED_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_TOTAL_UNLOADING_CHARGE="+String.valueOf(CONFIRMED_TOTAL_UNLOADING_CHARGE));
		sb.append(",CONFIRMED_TOTAL_BRACKET_DIFF="+String.valueOf(CONFIRMED_TOTAL_BRACKET_DIFF));
		sb.append(",CONFIRMED_TOTAL_WHSE_PALLETS="+String.valueOf(CONFIRMED_TOTAL_WHSE_PALLETS));
		sb.append(",CONFIRMED_USER="+CONFIRMED_USER);
		sb.append(",VENDOR_CONF_NO="+VENDOR_CONF_NO);
		sb.append(",VENDOR_CONF_METHOD="+VENDOR_CONF_METHOD);
		sb.append(",TOTAL_RECVD_LINES="+String.valueOf(TOTAL_RECVD_LINES));
		sb.append(",TOTAL_RECVD_CASES="+String.valueOf(TOTAL_RECVD_CASES));
		sb.append(",TOTAL_RECVD_CUBE="+String.valueOf(TOTAL_RECVD_CUBE));
		sb.append(",TOTAL_RECVD_NET_WGT="+String.valueOf(TOTAL_RECVD_NET_WGT));
		sb.append(",TOTAL_RECVD_GROSS_WGT="+String.valueOf(TOTAL_RECVD_GROSS_WGT));
		sb.append(",TOTAL_RECVD_VENDOR_PALLETS="+String.valueOf(TOTAL_RECVD_VENDOR_PALLETS));
		sb.append(",TOTAL_RECVD_WHSE_PALLETS="+String.valueOf(TOTAL_RECVD_WHSE_PALLETS));
		sb.append(",TOTAL_RECVD_VENDOR_UNITS="+String.valueOf(TOTAL_RECVD_VENDOR_UNITS));
		sb.append(",TOTAL_RECVD_FOB_COST="+String.valueOf(TOTAL_RECVD_FOB_COST));
		sb.append(",TOTAL_RECVD_FREIGHT_COST="+String.valueOf(TOTAL_RECVD_FREIGHT_COST));
		sb.append(",TOTAL_RECVD_AP_COST="+String.valueOf(TOTAL_RECVD_AP_COST));
		sb.append(",TOTAL_RECVD_BRACKET_DIFF="+String.valueOf(TOTAL_RECVD_BRACKET_DIFF));
		sb.append(",TOTAL_RECVD_PICKUP_ALLOW="+String.valueOf(TOTAL_RECVD_PICKUP_ALLOW));
		sb.append(",TOTAL_RECVD_UNLOADING_CHARGE="+String.valueOf(TOTAL_RECVD_UNLOADING_CHARGE));
		sb.append(",MERCH_PROFORMA_STATUS="+MERCH_PROFORMA_STATUS);
		sb.append(",MERCH_PROFORMA_NET_AMT="+String.valueOf(MERCH_PROFORMA_NET_AMT));
		sb.append(",UNMATCHED_MERCH_PROFROMA_NET_AMT="+String.valueOf(UNMATCHED_MERCH_PROFROMA_NET_AMT));
		sb.append(",MERCH_AMT_TO_BE_VOUCH="+String.valueOf(MERCH_AMT_TO_BE_VOUCH));
		sb.append(",MERCH_MATCHED_STATUS="+MERCH_MATCHED_STATUS);
		sb.append(",MERCH_VOUCH_STATUS="+MERCH_VOUCH_STATUS);
		sb.append(",MERCH_PAID_STATUS="+MERCH_PAID_STATUS);
		sb.append(",MERCH_PRICE_DIFF_HEADER_STATUS="+MERCH_PRICE_DIFF_HEADER_STATUS);
		sb.append(",MERCH_PRICE_DIFF_ERROR_LINE_COUNT="+String.valueOf(MERCH_PRICE_DIFF_ERROR_LINE_COUNT));
		sb.append(",MERCH_QTY_DIFF_HEADER_STATUS="+MERCH_QTY_DIFF_HEADER_STATUS);
		sb.append(",MERCH_QTY_DIFF_ERROR_LINE_COUNT="+String.valueOf(MERCH_QTY_DIFF_ERROR_LINE_COUNT));
		sb.append(",MERCH_PAYMENT_DUE_DATE="+String.valueOf(MERCH_PAYMENT_DUE_DATE));
		sb.append(",MERCH_CASH_DISC="+String.valueOf(MERCH_CASH_DISC));
		sb.append(",MERCH_VOUCH_AMT="+String.valueOf(MERCH_VOUCH_AMT));
		sb.append(",MERCH_ROUNDING_VAR="+String.valueOf(MERCH_ROUNDING_VAR));
		sb.append(",MERCH_VENDOR_INTERCOM_BILLED_FLAG="+MERCH_VENDOR_INTERCOM_BILLED_FLAG);
		sb.append(",MERCH_VAR_AMT="+String.valueOf(MERCH_VAR_AMT));
		sb.append(",MERCH_FREIGHT_AMT="+String.valueOf(MERCH_FREIGHT_AMT));
		sb.append(",FREIGHT_PROFORMA_NET_AMT="+String.valueOf(FREIGHT_PROFORMA_NET_AMT));
		sb.append(",UNMATCHED_FREIGHT_PROFORMA_NET_AMT="+String.valueOf(UNMATCHED_FREIGHT_PROFORMA_NET_AMT));
		sb.append(",FREIGHT_AMT_TO_BE_VOUCH="+String.valueOf(FREIGHT_AMT_TO_BE_VOUCH));
		sb.append(",FREIGHT_MATCHED_STATUS="+FREIGHT_MATCHED_STATUS);
		sb.append(",FREIGHT_VOUCH_STATUS="+FREIGHT_VOUCH_STATUS);
		sb.append(",FREIGHT_PAID_STATUS="+FREIGHT_PAID_STATUS);
		sb.append(",FREIGHT_DIFF_HEADER_STATUS="+FREIGHT_DIFF_HEADER_STATUS);
		sb.append(",FREIGHT_PAYMENT_DUE_DATE="+String.valueOf(FREIGHT_PAYMENT_DUE_DATE));
		sb.append(",FREIGHT_CLAIM_STATUS="+FREIGHT_CLAIM_STATUS);
		sb.append(",FREIGHT_CASH_DISC="+String.valueOf(FREIGHT_CASH_DISC));
		sb.append(",FREIGHT_VARIANCE_AMT="+String.valueOf(FREIGHT_VARIANCE_AMT));
		sb.append(",FREIGHT_VOUCH_AMT="+String.valueOf(FREIGHT_VOUCH_AMT));
		sb.append(",FREIGHT_INV_NO="+FREIGHT_INV_NO);
		sb.append(",FREIGHT_INV_DATE="+String.valueOf(FREIGHT_INV_DATE));
		sb.append(",FREIGHT_VENDOR_INTERCOM_BILLED_FLAG="+FREIGHT_VENDOR_INTERCOM_BILLED_FLAG);
		sb.append(",TOTAL_VENDOR_SHORT_QTY="+String.valueOf(TOTAL_VENDOR_SHORT_QTY));
		sb.append(",TOTAL_CARRIER_SHORT_QTY="+String.valueOf(TOTAL_CARRIER_SHORT_QTY));
		sb.append(",TOTAL_DAMAGED_ACCEPTED_QTY="+String.valueOf(TOTAL_DAMAGED_ACCEPTED_QTY));
		sb.append(",FREIGHT_PAID_AMOUNT="+String.valueOf(FREIGHT_PAID_AMOUNT));
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",CUST_ORDER_NO="+String.valueOf(CUST_ORDER_NO));
		sb.append(",SHIP_FROM_NAME="+SHIP_FROM_NAME);
		sb.append(",SHIPPING_ADDRESS_ID="+SHIPPING_ADDRESS_ID);
		sb.append(",RESERVED_RE_RECOMMEND_FLAG="+RESERVED_RE_RECOMMEND_FLAG);
		sb.append(",RECOMMENDED_ORDER_FLAG="+RECOMMENDED_ORDER_FLAG);
		sb.append(",FAILED_SCORECARD_FLAG="+FAILED_SCORECARD_FLAG);
		sb.append(",VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG="+VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG);
		sb.append(",PRICE_BRACKET_SOURCE_CODE="+PRICE_BRACKET_SOURCE_CODE);
		sb.append(",SHORT_PERCENT_TO_BACKORDER="+String.valueOf(SHORT_PERCENT_TO_BACKORDER));
		sb.append(",SECONDARY_PO_TYPE="+SECONDARY_PO_TYPE);
		sb.append(",TRANSMIT_FLAG="+TRANSMIT_FLAG);
		sb.append(",TRANSMIT_TIMESTAMP="+String.valueOf(TRANSMIT_TIMESTAMP));
		sb.append(",PO_ERROR_IND="+PO_ERROR_IND);
		sb.append(",STOCK_IND="+STOCK_IND);
		sb.append(",PO_CLOSE_TIME="+String.valueOf(PO_CLOSE_TIME));
		sb.append(",REPLENISHMENT_SYSTEM="+REPLENISHMENT_SYSTEM);
		sb.append(",SHIPMENT_NOTICE_NO="+SHIPMENT_NOTICE_NO);
		sb.append(",FREIGHT_PROFORMA_STATUS="+FREIGHT_PROFORMA_STATUS);
		sb.append(",SHIPMENT_ID="+SHIPMENT_ID);
		sb.append(",FREIGHT_PROCESS_FLAG="+FREIGHT_PROCESS_FLAG);
		sb.append(",ORIG_PURCHASE_ORDER_NO="+ORIG_PURCHASE_ORDER_NO);
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",V3PF_SVOP="+V3PF_SVOP);
		sb.append(",CONFERENCE_TYPE="+CONFERENCE_TYPE);
		sb.append(",NEXT_CONF_RECVD_FLAG="+NEXT_CONF_RECVD_FLAG);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",PICKUP_ALLOWANCE_OVERRIDE_FLAG="+PICKUP_ALLOWANCE_OVERRIDE_FLAG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(PURCHASE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PURCHASE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(SMS_CONFIRMED_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SMS_CONFIRMED_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_CONFIRMED_SHIP_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_CONFIRMED_SHIP_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(SCHEDULED_PO_RECEIPT_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SCHEDULED_PO_RECEIPT_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_PICKUP_ALLOW_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_PICKUP_ALLOW_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(PICKUP_ALLOW_FROM_BRACKET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PICKUP_ALLOW_FROM_BRACKET);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_FREIGHT_RATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_FREIGHT_RATE);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_FREIGHT_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_FREIGHT_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_MERCH_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_MERCH_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_FREIGHT_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_FREIGHT_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_ROUNDING_VARIANCE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_ROUNDING_VARIANCE);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_WITH_NEXT_ORDER_IND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_WITH_NEXT_ORDER_IND);
            			}
            		
        			sb.append("|");
        		
        				if(CUST_REFERENCE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUST_REFERENCE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(OUTSIDE_WHSE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OUTSIDE_WHSE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(RECOMMENDED_ORDER_SEQ_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECOMMENDED_ORDER_SEQ_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SYSCO_BRACKET_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SYSCO_BRACKET_NO);
            			}
            		
        			sb.append("|");
        		
        				if(BUYER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUYER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_GROUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_GROUP);
            			}
            		
        			sb.append("|");
        		
        				if(BUYING_GROUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUYING_GROUP);
            			}
            		
        			sb.append("|");
        		
        				if(PO_PRIMARY_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_PRIMARY_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PO_SECONDARY_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_SECONDARY_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PO_IN_USE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_IN_USE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(WHSE_CHANGE_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WHSE_CHANGE_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(PO_VALID_PRICING_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_VALID_PRICING_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PO_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(DEMAND_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEMAND_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(BACKORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BACKORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PROC_BILLED_VENDOR_BILLED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PROC_BILLED_VENDOR_BILLED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_INTER_COMPANY_STMT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_INTER_COMPANY_STMT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CONF_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONF_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PO_VALID_PRICING_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_VALID_PRICING_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(CONF_RECVD_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONF_RECVD_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(WHSE_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WHSE_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PO_CHANGED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_CHANGED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PRINT_PRICE_ON_PO_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRINT_PRICE_ON_PO_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATE_LEAD_TIME_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATE_LEAD_TIME_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_CHANGE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_CHANGE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CARRIER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CARRIER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(REVISED_PROFORMA_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REVISED_PROFORMA_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PROFORMA_INPROCESS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PROFORMA_INPROCESS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TRANSMIT_TO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TRANSMIT_TO);
            			}
            		
        			sb.append("|");
        		
        				if(RETRANSMIT_TO_VENDOR_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RETRANSMIT_TO_VENDOR_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(JOB_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOB_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PAY_TO_VENDOR_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PAY_TO_VENDOR_NO);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VENDOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VENDOR);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VENDOR_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VENDOR_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_FREIGHT_VENDOR_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_FREIGHT_VENDOR_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(TERMS_OVERRIDE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TERMS_OVERRIDE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PO_PLACED_WITH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_PLACED_WITH);
            			}
            		
        			sb.append("|");
        		
        				if(LOAD_CTRL_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOAD_CTRL_NO);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_ANTICIPATED_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_ANTICIPATED_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_ANTICIPATED_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_ANTICIPATED_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_VENDOR_CONF_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_VENDOR_CONF_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_SHIP_PICKUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_SHIP_PICKUP);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_SHIP_PICKUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_SHIP_PICKUP);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_ORDER_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_ORDER_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_ORDER_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_ORDER_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_PO_NEEDED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_PO_NEEDED);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_PO_NEEDED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_PO_NEEDED);
            			}
            		
        			sb.append("|");
        		
        				if(PO_TRANSMISSION_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_TRANSMISSION_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_PO_ACCEPTED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_PO_ACCEPTED);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_PO_ACCEPTED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_PO_ACCEPTED);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_ACTUAL_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_ACTUAL_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_ACTUAL_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_ACTUAL_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_VENDOR_CONF_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_VENDOR_CONF_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_LINES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_LINES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_NET_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_NET_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_GROSS_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_GROSS_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_VENDOR_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_VENDOR_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_VENDOR_UNITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_VENDOR_UNITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_FOB_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_FOB_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_FREIGHT_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_FREIGHT_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_AP_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_AP_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_PICKUP_ALLOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_PICKUP_ALLOW);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_PICKUP_ALLOW_RATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_PICKUP_ALLOW_RATE);
            			}
            		
        			sb.append("|");
        		
        				if(PICKUP_ALLOW_TO_BRACKET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PICKUP_ALLOW_TO_BRACKET);
            			}
            		
        			sb.append("|");
        		
        				if(WHSE_UNLOAD_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WHSE_UNLOAD_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(WHSE_UNLOAD_CHARGE_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WHSE_UNLOAD_CHARGE_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_NON_DIST_MERCH_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_NON_DIST_MERCH_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_WHSE_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_WHSE_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_FREIGHT_RATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_FREIGHT_RATE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_FREIGHT_RATE_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_FREIGHT_RATE_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_UNLOADING_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_UNLOADING_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_UNLOADING_CHRG_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_UNLOADING_CHRG_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_PICKUP_ALLOW_RATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_PICKUP_ALLOW_RATE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_PICKUP_ALLOW_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_PICKUP_ALLOW_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_PICKUP_ALLOW_FROM_BRACKET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_PICKUP_ALLOW_FROM_BRACKET);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_PICKUP_ALLOW_TO_BRACKET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_PICKUP_ALLOW_TO_BRACKET);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_LINES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_LINES);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTA_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTA_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIMRED_TOTAL_CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIMRED_TOTAL_CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_NET_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_NET_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_GROSS_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_GROSS_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_VENDOR_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_VENDOR_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_VENDOR_UNITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_VENDOR_UNITS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_FOB_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_FOB_COST);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_FREIGHT_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_FREIGHT_COST);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_AP_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_AP_COST);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_PICKUP_ALLOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_PICKUP_ALLOW);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_MERCH_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_MERCH_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_FREIGHT_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_FREIGHT_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_UNLOADING_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_UNLOADING_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_BRACKET_DIFF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_BRACKET_DIFF);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_WHSE_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_WHSE_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_USER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_USER);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_CONF_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_CONF_NO);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_CONF_METHOD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_CONF_METHOD);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_LINES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_LINES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_NET_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_NET_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_GROSS_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_GROSS_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_VENDOR_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_VENDOR_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_WHSE_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_WHSE_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_VENDOR_UNITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_VENDOR_UNITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_FOB_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_FOB_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_FREIGHT_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_FREIGHT_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_AP_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_AP_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_BRACKET_DIFF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_BRACKET_DIFF);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_PICKUP_ALLOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_PICKUP_ALLOW);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_UNLOADING_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_UNLOADING_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PROFORMA_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PROFORMA_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PROFORMA_NET_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PROFORMA_NET_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(UNMATCHED_MERCH_PROFROMA_NET_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UNMATCHED_MERCH_PROFROMA_NET_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_AMT_TO_BE_VOUCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_AMT_TO_BE_VOUCH);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_MATCHED_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_MATCHED_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_VOUCH_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_VOUCH_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PAID_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PAID_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PRICE_DIFF_HEADER_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PRICE_DIFF_HEADER_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PRICE_DIFF_ERROR_LINE_COUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PRICE_DIFF_ERROR_LINE_COUNT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_QTY_DIFF_HEADER_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_QTY_DIFF_HEADER_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_QTY_DIFF_ERROR_LINE_COUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_QTY_DIFF_ERROR_LINE_COUNT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PAYMENT_DUE_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PAYMENT_DUE_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_CASH_DISC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_CASH_DISC);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_VOUCH_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_VOUCH_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_ROUNDING_VAR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_ROUNDING_VAR);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_VENDOR_INTERCOM_BILLED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_VENDOR_INTERCOM_BILLED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_VAR_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_VAR_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_FREIGHT_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_FREIGHT_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PROFORMA_NET_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PROFORMA_NET_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(UNMATCHED_FREIGHT_PROFORMA_NET_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UNMATCHED_FREIGHT_PROFORMA_NET_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_AMT_TO_BE_VOUCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_AMT_TO_BE_VOUCH);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_MATCHED_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_MATCHED_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VOUCH_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VOUCH_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PAID_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PAID_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_DIFF_HEADER_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_DIFF_HEADER_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PAYMENT_DUE_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PAYMENT_DUE_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_CLAIM_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_CLAIM_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_CASH_DISC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_CASH_DISC);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VARIANCE_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VARIANCE_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VOUCH_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VOUCH_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_INV_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_INV_NO);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_INV_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_INV_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VENDOR_INTERCOM_BILLED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VENDOR_INTERCOM_BILLED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_VENDOR_SHORT_QTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_VENDOR_SHORT_QTY);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_CARRIER_SHORT_QTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_CARRIER_SHORT_QTY);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_DAMAGED_ACCEPTED_QTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_DAMAGED_ACCEPTED_QTY);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PAID_AMOUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PAID_AMOUNT);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_TO_CUST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_TO_CUST);
            			}
            		
        			sb.append("|");
        		
        				if(CUST_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUST_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_FROM_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_FROM_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPPING_ADDRESS_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPPING_ADDRESS_ID);
            			}
            		
        			sb.append("|");
        		
        				if(RESERVED_RE_RECOMMEND_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESERVED_RE_RECOMMEND_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(RECOMMENDED_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECOMMENDED_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(FAILED_SCORECARD_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FAILED_SCORECARD_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_BRACKET_SOURCE_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_BRACKET_SOURCE_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(SHORT_PERCENT_TO_BACKORDER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHORT_PERCENT_TO_BACKORDER);
            			}
            		
        			sb.append("|");
        		
        				if(SECONDARY_PO_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SECONDARY_PO_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(TRANSMIT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TRANSMIT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TRANSMIT_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TRANSMIT_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(PO_ERROR_IND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_ERROR_IND);
            			}
            		
        			sb.append("|");
        		
        				if(STOCK_IND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOCK_IND);
            			}
            		
        			sb.append("|");
        		
        				if(PO_CLOSE_TIME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_CLOSE_TIME);
            			}
            		
        			sb.append("|");
        		
        				if(REPLENISHMENT_SYSTEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REPLENISHMENT_SYSTEM);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPMENT_NOTICE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPMENT_NOTICE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PROFORMA_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PROFORMA_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPMENT_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPMENT_ID);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PROCESS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PROCESS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_PURCHASE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_PURCHASE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(IS_ACTIVE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_ACTIVE);
            			}
            		
        			sb.append("|");
        		
        				if(V3PF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PF_SVOP);
            			}
            		
        			sb.append("|");
        		
        				if(CONFERENCE_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFERENCE_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(NEXT_CONF_RECVD_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NEXT_CONF_RECVD_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_PROGRAM_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_PROGRAM_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(IS_DELETED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_DELETED);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(PICKUP_ALLOWANCE_OVERRIDE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PICKUP_ALLOWANCE_OVERRIDE_FLAG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(PURCHASE_ORDER_HEADER_2_UPDATEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];

	
			    public String V3PO;

				public String getV3PO () {
					return this.V3PO;
				}
				
			    public String V3OWID;

				public String getV3OWID () {
					return this.V3OWID;
				}
				
			    public String V3ARCO;

				public String getV3ARCO () {
					return this.V3ARCO;
				}
				
			    public BigDecimal V3ROSQ;

				public BigDecimal getV3ROSQ () {
					return this.V3ROSQ;
				}
				
			    public BigDecimal V3SBNO;

				public BigDecimal getV3SBNO () {
					return this.V3SBNO;
				}
				
			    public String V3BUYR;

				public String getV3BUYR () {
					return this.V3BUYR;
				}
				
			    public String V3OCNB;

				public String getV3OCNB () {
					return this.V3OCNB;
				}
				
			    public String V3OFCI;

				public String getV3OFCI () {
					return this.V3OFCI;
				}
				
			    public BigDecimal V3BYGP;

				public BigDecimal getV3BYGP () {
					return this.V3BYGP;
				}
				
			    public String V3POST;

				public String getV3POST () {
					return this.V3POST;
				}
				
			    public String V3POSS;

				public String getV3POSS () {
					return this.V3POSS;
				}
				
			    public String V3INUS;

				public String getV3INUS () {
					return this.V3INUS;
				}
				
			    public String V3WCCD;

				public String getV3WCCD () {
					return this.V3WCCD;
				}
				
			    public String V3VLPF;

				public String getV3VLPF () {
					return this.V3VLPF;
				}
				
			    public String V3POTP;

				public String getV3POTP () {
					return this.V3POTP;
				}
				
			    public String V3DMST;

				public String getV3DMST () {
					return this.V3DMST;
				}
				
			    public String V3BORF;

				public String getV3BORF () {
					return this.V3BORF;
				}
				
			    public String V3PBVB;

				public String getV3PBVB () {
					return this.V3PBVB;
				}
				
			    public String V3FICS;

				public String getV3FICS () {
					return this.V3FICS;
				}
				
			    public String V3SCRF;

				public String getV3SCRF () {
					return this.V3SCRF;
				}
				
			    public String V3CFST;

				public String getV3CFST () {
					return this.V3CFST;
				}
				
			    public String V3VLPA;

				public String getV3VLPA () {
					return this.V3VLPA;
				}
				
			    public String V3CFRF;

				public String getV3CFRF () {
					return this.V3CFRF;
				}
				
			    public String V3WHST;

				public String getV3WHST () {
					return this.V3WHST;
				}
				
			    public String V3POCH;

				public String getV3POCH () {
					return this.V3POCH;
				}
				
			    public String V3PPOP;

				public String getV3PPOP () {
					return this.V3PPOP;
				}
				
			    public String V3UPLT;

				public String getV3UPLT () {
					return this.V3UPLT;
				}
				
			    public String V3PCFL;

				public String getV3PCFL () {
					return this.V3PCFL;
				}
				
			    public String V3PAOF;

				public String getV3PAOF () {
					return this.V3PAOF;
				}
				
			    public String V3FROF;

				public String getV3FROF () {
					return this.V3FROF;
				}
				
			    public String V3CFTP;

				public String getV3CFTP () {
					return this.V3CFTP;
				}
				
			    public String V3CARI;

				public String getV3CARI () {
					return this.V3CARI;
				}
				
			    public String V3RPFF;

				public String getV3RPFF () {
					return this.V3RPFF;
				}
				
			    public String V3PFIP;

				public String getV3PFIP () {
					return this.V3PFIP;
				}
				
			    public String V3TRMT;

				public String getV3TRMT () {
					return this.V3TRMT;
				}
				
			    public String V3RTVF;

				public String getV3RTVF () {
					return this.V3RTVF;
				}
				
			    public String V3WHDR;

				public String getV3WHDR () {
					return this.V3WHDR;
				}
				
			    public String V3JBNO;

				public String getV3JBNO () {
					return this.V3JBNO;
				}
				
			    public String V3PVND;

				public String getV3PVND () {
					return this.V3PVND;
				}
				
			    public String V3VNBR;

				public String getV3VNBR () {
					return this.V3VNBR;
				}
				
			    public BigDecimal V3ADCD;

				public BigDecimal getV3ADCD () {
					return this.V3ADCD;
				}
				
			    public String V3PFRV;

				public String getV3PFRV () {
					return this.V3PFRV;
				}
				
			    public String V3TERM;

				public String getV3TERM () {
					return this.V3TERM;
				}
				
			    public String V3FTRM;

				public String getV3FTRM () {
					return this.V3FTRM;
				}
				
			    public String V3CNFT;

				public String getV3CNFT () {
					return this.V3CNFT;
				}
				
			    public String V3CFVT;

				public String getV3CFVT () {
					return this.V3CFVT;
				}
				
			    public String V3TMOV;

				public String getV3TMOV () {
					return this.V3TMOV;
				}
				
			    public String V3POPW;

				public String getV3POPW () {
					return this.V3POPW;
				}
				
			    public String V3LCN;

				public String getV3LCN () {
					return this.V3LCN;
				}
				
			    public String V3PO1;

				public String getV3PO1 () {
					return this.V3PO1;
				}
				
			    public BigDecimal V3ARDE;

				public BigDecimal getV3ARDE () {
					return this.V3ARDE;
				}
				
			    public BigDecimal V3ARBD;

				public BigDecimal getV3ARBD () {
					return this.V3ARBD;
				}
				
			    public BigDecimal V3PCRD;

				public BigDecimal getV3PCRD () {
					return this.V3PCRD;
				}
				
			    public BigDecimal V3OCDT;

				public BigDecimal getV3OCDT () {
					return this.V3OCDT;
				}
				
			    public BigDecimal V3PCSD;

				public BigDecimal getV3PCSD () {
					return this.V3PCSD;
				}
				
			    public BigDecimal V3PSRD;

				public BigDecimal getV3PSRD () {
					return this.V3PSRD;
				}
				
			    public BigDecimal V3PSRT;

				public BigDecimal getV3PSRT () {
					return this.V3PSRT;
				}
				
			    public BigDecimal V3SHDT;

				public BigDecimal getV3SHDT () {
					return this.V3SHDT;
				}
				
			    public BigDecimal V3CSPD;

				public BigDecimal getV3CSPD () {
					return this.V3CSPD;
				}
				
			    public BigDecimal V3ORDT;

				public BigDecimal getV3ORDT () {
					return this.V3ORDT;
				}
				
			    public BigDecimal V3CLOD;

				public BigDecimal getV3CLOD () {
					return this.V3CLOD;
				}
				
			    public BigDecimal V3NDDT;

				public BigDecimal getV3NDDT () {
					return this.V3NDDT;
				}
				
			    public BigDecimal V3CLDN;

				public BigDecimal getV3CLDN () {
					return this.V3CLDN;
				}
				
			    public BigDecimal V3TRDT;

				public BigDecimal getV3TRDT () {
					return this.V3TRDT;
				}
				
			    public BigDecimal V3TRTM;

				public BigDecimal getV3TRTM () {
					return this.V3TRTM;
				}
				
			    public BigDecimal V3PDTA;

				public BigDecimal getV3PDTA () {
					return this.V3PDTA;
				}
				
			    public BigDecimal V3CPAD;

				public BigDecimal getV3CPAD () {
					return this.V3CPAD;
				}
				
			    public BigDecimal V3PDTR;

				public BigDecimal getV3PDTR () {
					return this.V3PDTR;
				}
				
			    public BigDecimal V3CLRD;

				public BigDecimal getV3CLRD () {
					return this.V3CLRD;
				}
				
			    public BigDecimal V3POLC;

				public BigDecimal getV3POLC () {
					return this.V3POLC;
				}
				
			    public BigDecimal V3POCD;

				public BigDecimal getV3POCD () {
					return this.V3POCD;
				}
				
			    public BigDecimal V3TTL1;

				public BigDecimal getV3TTL1 () {
					return this.V3TTL1;
				}
				
			    public BigDecimal V3CSTT;

				public BigDecimal getV3CSTT () {
					return this.V3CSTT;
				}
				
			    public BigDecimal V3TTOC;

				public BigDecimal getV3TTOC () {
					return this.V3TTOC;
				}
				
			    public BigDecimal V3TOCK;

				public BigDecimal getV3TOCK () {
					return this.V3TOCK;
				}
				
			    public BigDecimal V3TTNW;

				public BigDecimal getV3TTNW () {
					return this.V3TTNW;
				}
				
			    public BigDecimal V3TNWK;

				public BigDecimal getV3TNWK () {
					return this.V3TNWK;
				}
				
			    public BigDecimal V3TTGW;

				public BigDecimal getV3TTGW () {
					return this.V3TTGW;
				}
				
			    public BigDecimal V3TGWK;

				public BigDecimal getV3TGWK () {
					return this.V3TGWK;
				}
				
			    public BigDecimal V3TTPL;

				public BigDecimal getV3TTPL () {
					return this.V3TTPL;
				}
				
			    public BigDecimal V3TTVU;

				public BigDecimal getV3TTVU () {
					return this.V3TTVU;
				}
				
			    public BigDecimal V3TTFB;

				public BigDecimal getV3TTFB () {
					return this.V3TTFB;
				}
				
			    public BigDecimal V3TTFR;

				public BigDecimal getV3TTFR () {
					return this.V3TTFR;
				}
				
			    public BigDecimal V3TTAP;

				public BigDecimal getV3TTAP () {
					return this.V3TTAP;
				}
				
			    public BigDecimal V3TTPU;

				public BigDecimal getV3TTPU () {
					return this.V3TTPU;
				}
				
			    public BigDecimal V3VPUA;

				public BigDecimal getV3VPUA () {
					return this.V3VPUA;
				}
				
			    public String V3PALT;

				public String getV3PALT () {
					return this.V3PALT;
				}
				
			    public BigDecimal V3PUBF;

				public BigDecimal getV3PUBF () {
					return this.V3PUBF;
				}
				
			    public BigDecimal V3PUBT;

				public BigDecimal getV3PUBT () {
					return this.V3PUBT;
				}
				
			    public BigDecimal V3VFRT;

				public BigDecimal getV3VFRT () {
					return this.V3VFRT;
				}
				
			    public String V3FRTP;

				public String getV3FRTP () {
					return this.V3FRTP;
				}
				
			    public BigDecimal V3WULC;

				public BigDecimal getV3WULC () {
					return this.V3WULC;
				}
				
			    public String V3WUCT;

				public String getV3WUCT () {
					return this.V3WUCT;
				}
				
			    public BigDecimal V3NDAC;

				public BigDecimal getV3NDAC () {
					return this.V3NDAC;
				}
				
			    public BigDecimal V3ONAF;

				public BigDecimal getV3ONAF () {
					return this.V3ONAF;
				}
				
			    public BigDecimal V3ACDM;

				public BigDecimal getV3ACDM () {
					return this.V3ACDM;
				}
				
			    public BigDecimal V3ACDF;

				public BigDecimal getV3ACDF () {
					return this.V3ACDF;
				}
				
			    public BigDecimal V3TUCA;

				public BigDecimal getV3TUCA () {
					return this.V3TUCA;
				}
				
			    public BigDecimal V3TTBD;

				public BigDecimal getV3TTBD () {
					return this.V3TTBD;
				}
				
			    public BigDecimal V3TLWP;

				public BigDecimal getV3TLWP () {
					return this.V3TLWP;
				}
				
			    public BigDecimal V3CNFR;

				public BigDecimal getV3CNFR () {
					return this.V3CNFR;
				}
				
			    public String V3CFRT;

				public String getV3CFRT () {
					return this.V3CFRT;
				}
				
			    public BigDecimal V3CULC;

				public BigDecimal getV3CULC () {
					return this.V3CULC;
				}
				
			    public String V3CULT;

				public String getV3CULT () {
					return this.V3CULT;
				}
				
			    public BigDecimal V3CPAL;

				public BigDecimal getV3CPAL () {
					return this.V3CPAL;
				}
				
			    public String V3CPUT;

				public String getV3CPUT () {
					return this.V3CPUT;
				}
				
			    public BigDecimal V3CPFB;

				public BigDecimal getV3CPFB () {
					return this.V3CPFB;
				}
				
			    public BigDecimal V3CPTB;

				public BigDecimal getV3CPTB () {
					return this.V3CPTB;
				}
				
			    public BigDecimal V3CTLN;

				public BigDecimal getV3CTLN () {
					return this.V3CTLN;
				}
				
			    public BigDecimal V3CCTT;

				public BigDecimal getV3CCTT () {
					return this.V3CCTT;
				}
				
			    public BigDecimal V3CTOC;

				public BigDecimal getV3CTOC () {
					return this.V3CTOC;
				}
				
			    public BigDecimal V3CTCK;

				public BigDecimal getV3CTCK () {
					return this.V3CTCK;
				}
				
			    public BigDecimal V3CTNW;

				public BigDecimal getV3CTNW () {
					return this.V3CTNW;
				}
				
			    public BigDecimal V3CTNK;

				public BigDecimal getV3CTNK () {
					return this.V3CTNK;
				}
				
			    public BigDecimal V3CTGW;

				public BigDecimal getV3CTGW () {
					return this.V3CTGW;
				}
				
			    public BigDecimal V3CTGK;

				public BigDecimal getV3CTGK () {
					return this.V3CTGK;
				}
				
			    public BigDecimal V3CTPL;

				public BigDecimal getV3CTPL () {
					return this.V3CTPL;
				}
				
			    public BigDecimal V3CTVU;

				public BigDecimal getV3CTVU () {
					return this.V3CTVU;
				}
				
			    public BigDecimal V3CTBC;

				public BigDecimal getV3CTBC () {
					return this.V3CTBC;
				}
				
			    public BigDecimal V3CTFC;

				public BigDecimal getV3CTFC () {
					return this.V3CTFC;
				}
				
			    public BigDecimal V3CTAC;

				public BigDecimal getV3CTAC () {
					return this.V3CTAC;
				}
				
			    public BigDecimal V3CTPA;

				public BigDecimal getV3CTPA () {
					return this.V3CTPA;
				}
				
			    public BigDecimal V3CNAC;

				public BigDecimal getV3CNAC () {
					return this.V3CNAC;
				}
				
			    public BigDecimal V3CNAF;

				public BigDecimal getV3CNAF () {
					return this.V3CNAF;
				}
				
			    public BigDecimal V3CACM;

				public BigDecimal getV3CACM () {
					return this.V3CACM;
				}
				
			    public BigDecimal V3CACF;

				public BigDecimal getV3CACF () {
					return this.V3CACF;
				}
				
			    public BigDecimal V3CTUC;

				public BigDecimal getV3CTUC () {
					return this.V3CTUC;
				}
				
			    public BigDecimal V3CTBD;

				public BigDecimal getV3CTBD () {
					return this.V3CTBD;
				}
				
			    public BigDecimal V3CTWP;

				public BigDecimal getV3CTWP () {
					return this.V3CTWP;
				}
				
			    public String V3POCB;

				public String getV3POCB () {
					return this.V3POCB;
				}
				
			    public String V3POCN;

				public String getV3POCN () {
					return this.V3POCN;
				}
				
			    public String V3POCM;

				public String getV3POCM () {
					return this.V3POCM;
				}
				
			    public BigDecimal V3TNRL;

				public BigDecimal getV3TNRL () {
					return this.V3TNRL;
				}
				
			    public BigDecimal V3CSTR;

				public BigDecimal getV3CSTR () {
					return this.V3CSTR;
				}
				
			    public BigDecimal V3TRCB;

				public BigDecimal getV3TRCB () {
					return this.V3TRCB;
				}
				
			    public BigDecimal V3TRBK;

				public BigDecimal getV3TRBK () {
					return this.V3TRBK;
				}
				
			    public BigDecimal V3TRNW;

				public BigDecimal getV3TRNW () {
					return this.V3TRNW;
				}
				
			    public BigDecimal V3TRNK;

				public BigDecimal getV3TRNK () {
					return this.V3TRNK;
				}
				
			    public BigDecimal V3TRGW;

				public BigDecimal getV3TRGW () {
					return this.V3TRGW;
				}
				
			    public BigDecimal V3TRGK;

				public BigDecimal getV3TRGK () {
					return this.V3TRGK;
				}
				
			    public BigDecimal V3TRPS;

				public BigDecimal getV3TRPS () {
					return this.V3TRPS;
				}
				
			    public BigDecimal V3TRVP;

				public BigDecimal getV3TRVP () {
					return this.V3TRVP;
				}
				
			    public BigDecimal V3TRVU;

				public BigDecimal getV3TRVU () {
					return this.V3TRVU;
				}
				
			    public BigDecimal V3TRFC;

				public BigDecimal getV3TRFC () {
					return this.V3TRFC;
				}
				
			    public BigDecimal V3TRFR;

				public BigDecimal getV3TRFR () {
					return this.V3TRFR;
				}
				
			    public BigDecimal V3TRDA;

				public BigDecimal getV3TRDA () {
					return this.V3TRDA;
				}
				
			    public BigDecimal V3TRBD;

				public BigDecimal getV3TRBD () {
					return this.V3TRBD;
				}
				
			    public BigDecimal V3TRPA;

				public BigDecimal getV3TRPA () {
					return this.V3TRPA;
				}
				
			    public BigDecimal V3TRUC;

				public BigDecimal getV3TRUC () {
					return this.V3TRUC;
				}
				
			    public String V3PMPS;

				public String getV3PMPS () {
					return this.V3PMPS;
				}
				
			    public BigDecimal V3PFNA;

				public BigDecimal getV3PFNA () {
					return this.V3PFNA;
				}
				
			    public BigDecimal V3UNAM;

				public BigDecimal getV3UNAM () {
					return this.V3UNAM;
				}
				
			    public BigDecimal V3MAVC;

				public BigDecimal getV3MAVC () {
					return this.V3MAVC;
				}
				
			    public String V3MMTS;

				public String getV3MMTS () {
					return this.V3MMTS;
				}
				
			    public String V3MVCS;

				public String getV3MVCS () {
					return this.V3MVCS;
				}
				
			    public String V3MPDS;

				public String getV3MPDS () {
					return this.V3MPDS;
				}
				
			    public String V3MPDH;

				public String getV3MPDH () {
					return this.V3MPDH;
				}
				
			    public BigDecimal V3MPDL;

				public BigDecimal getV3MPDL () {
					return this.V3MPDL;
				}
				
			    public String V3MQDH;

				public String getV3MQDH () {
					return this.V3MQDH;
				}
				
			    public BigDecimal V3MQDL;

				public BigDecimal getV3MQDL () {
					return this.V3MQDL;
				}
				
			    public BigDecimal V3MPDT;

				public BigDecimal getV3MPDT () {
					return this.V3MPDT;
				}
				
			    public BigDecimal V3MCSD;

				public BigDecimal getV3MCSD () {
					return this.V3MCSD;
				}
				
			    public BigDecimal V3MVCA;

				public BigDecimal getV3MVCA () {
					return this.V3MVCA;
				}
				
			    public BigDecimal V3MERV;

				public BigDecimal getV3MERV () {
					return this.V3MERV;
				}
				
			    public String V3MINV;

				public String getV3MINV () {
					return this.V3MINV;
				}
				
			    public BigDecimal V3MIDT;

				public BigDecimal getV3MIDT () {
					return this.V3MIDT;
				}
				
			    public String V3MVIF;

				public String getV3MVIF () {
					return this.V3MVIF;
				}
				
			    public BigDecimal V3MVAR;

				public BigDecimal getV3MVAR () {
					return this.V3MVAR;
				}
				
			    public BigDecimal V3MPDA;

				public BigDecimal getV3MPDA () {
					return this.V3MPDA;
				}
				
			    public String V3PPFS;

				public String getV3PPFS () {
					return this.V3PPFS;
				}
				
			    public BigDecimal V3FPNA;

				public BigDecimal getV3FPNA () {
					return this.V3FPNA;
				}
				
			    public BigDecimal V3UFPA;

				public BigDecimal getV3UFPA () {
					return this.V3UFPA;
				}
				
			    public BigDecimal V3FAVC;

				public BigDecimal getV3FAVC () {
					return this.V3FAVC;
				}
				
			    public String V3FMTS;

				public String getV3FMTS () {
					return this.V3FMTS;
				}
				
			    public String V3FVCS;

				public String getV3FVCS () {
					return this.V3FVCS;
				}
				
			    public String V3FPDS;

				public String getV3FPDS () {
					return this.V3FPDS;
				}
				
			    public String V3FCDH;

				public String getV3FCDH () {
					return this.V3FCDH;
				}
				
			    public BigDecimal V3FCDL;

				public BigDecimal getV3FCDL () {
					return this.V3FCDL;
				}
				
			    public BigDecimal V3FPDT;

				public BigDecimal getV3FPDT () {
					return this.V3FPDT;
				}
				
			    public String V3RSVN;

				public String getV3RSVN () {
					return this.V3RSVN;
				}
				
			    public String V3FTCS;

				public String getV3FTCS () {
					return this.V3FTCS;
				}
				
			    public BigDecimal V3FCAD;

				public BigDecimal getV3FCAD () {
					return this.V3FCAD;
				}
				
			    public BigDecimal V3FVAR;

				public BigDecimal getV3FVAR () {
					return this.V3FVAR;
				}
				
			    public BigDecimal V3FVCH;

				public BigDecimal getV3FVCH () {
					return this.V3FVCH;
				}
				
			    public BigDecimal V3FTRV;

				public BigDecimal getV3FTRV () {
					return this.V3FTRV;
				}
				
			    public String V3FINV;

				public String getV3FINV () {
					return this.V3FINV;
				}
				
			    public BigDecimal V3FIDT;

				public BigDecimal getV3FIDT () {
					return this.V3FIDT;
				}
				
			    public String V3FVIF;

				public String getV3FVIF () {
					return this.V3FVIF;
				}
				
			    public BigDecimal V3TVSQ;

				public BigDecimal getV3TVSQ () {
					return this.V3TVSQ;
				}
				
			    public BigDecimal V3TKSQ;

				public BigDecimal getV3TKSQ () {
					return this.V3TKSQ;
				}
				
			    public BigDecimal V3TDAQ;

				public BigDecimal getV3TDAQ () {
					return this.V3TDAQ;
				}
				
			    public BigDecimal V3NDAF;

				public BigDecimal getV3NDAF () {
					return this.V3NDAF;
				}
				
			    public BigDecimal V3FPDA;

				public BigDecimal getV3FPDA () {
					return this.V3FPDA;
				}
				
			    public String V3CUNO;

				public String getV3CUNO () {
					return this.V3CUNO;
				}
				
			    public BigDecimal V3ORNO;

				public BigDecimal getV3ORNO () {
					return this.V3ORNO;
				}
				
			    public String V3SHNM;

				public String getV3SHNM () {
					return this.V3SHNM;
				}
				
			    public String V3SADD;

				public String getV3SADD () {
					return this.V3SADD;
				}
				
			    public String V3SHNO;

				public String getV3SHNO () {
					return this.V3SHNO;
				}
				
			    public String V3PONU;

				public String getV3PONU () {
					return this.V3PONU;
				}
				
			    public String V3RERF;

				public String getV3RERF () {
					return this.V3RERF;
				}
				
			    public String V3RECO;

				public String getV3RECO () {
					return this.V3RECO;
				}
				
			    public String V3FSCF;

				public String getV3FSCF () {
					return this.V3FSCF;
				}
				
			    public BigDecimal V3POEO;

				public BigDecimal getV3POEO () {
					return this.V3POEO;
				}
				
			    public String V3POVO;

				public String getV3POVO () {
					return this.V3POVO;
				}
				
			    public String V3PBSC;

				public String getV3PBSC () {
					return this.V3PBSC;
				}
				
			    public String V3RECF;

				public String getV3RECF () {
					return this.V3RECF;
				}
				
			    public BigDecimal V3PSTB;

				public BigDecimal getV3PSTB () {
					return this.V3PSTB;
				}
				
			    public String V3TMSN;

				public String getV3TMSN () {
					return this.V3TMSN;
				}
				
			    public String V3XMFL;

				public String getV3XMFL () {
					return this.V3XMFL;
				}
				
			    public BigDecimal V3XMDT;

				public BigDecimal getV3XMDT () {
					return this.V3XMDT;
				}
				
			    public BigDecimal V3XMTM;

				public BigDecimal getV3XMTM () {
					return this.V3XMTM;
				}
				
			    public String V3ERRF;

				public String getV3ERRF () {
					return this.V3ERRF;
				}
				
			    public String V3STKI;

				public String getV3STKI () {
					return this.V3STKI;
				}
				
			    public BigDecimal V3COTM;

				public BigDecimal getV3COTM () {
					return this.V3COTM;
				}
				
			    public String V3RPRC;

				public String getV3RPRC () {
					return this.V3RPRC;
				}
				
			    public String V3FIMI;

				public String getV3FIMI () {
					return this.V3FIMI;
				}
				
			    public BigDecimal V3TXDT;

				public BigDecimal getV3TXDT () {
					return this.V3TXDT;
				}
				
			    public BigDecimal V3TXTM;

				public BigDecimal getV3TXTM () {
					return this.V3TXTM;
				}
				
			    public String V3POIF;

				public String getV3POIF () {
					return this.V3POIF;
				}
				
			    public String V3COD1;

				public String getV3COD1 () {
					return this.V3COD1;
				}
				
			    public String V3SNNO;

				public String getV3SNNO () {
					return this.V3SNNO;
				}
				
			    public String V3SHID;

				public String getV3SHID () {
					return this.V3SHID;
				}
				
			    public String V3FRTI;

				public String getV3FRTI () {
					return this.V3FRTI;
				}
				
			    public String V3OPO;

				public String getV3OPO () {
					return this.V3OPO;
				}
				
			    public BigDecimal V3EADT;

				public BigDecimal getV3EADT () {
					return this.V3EADT;
				}
				
			    public BigDecimal V3EATM;

				public BigDecimal getV3EATM () {
					return this.V3EATM;
				}
				
			    public String V3EAID;

				public String getV3EAID () {
					return this.V3EAID;
				}
				
			    public BigDecimal V3MODT;

				public BigDecimal getV3MODT () {
					return this.V3MODT;
				}
				
			    public BigDecimal V3MOTM;

				public BigDecimal getV3MOTM () {
					return this.V3MOTM;
				}
				
			    public String V3MOID;

				public String getV3MOID () {
					return this.V3MOID;
				}
				
			    public String V3MOPG;

				public String getV3MOPG () {
					return this.V3MOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.V3PO = readString(dis);
					
					this.V3OWID = readString(dis);
					
					this.V3ARCO = readString(dis);
					
						this.V3ROSQ = (BigDecimal) dis.readObject();
					
						this.V3SBNO = (BigDecimal) dis.readObject();
					
					this.V3BUYR = readString(dis);
					
					this.V3OCNB = readString(dis);
					
					this.V3OFCI = readString(dis);
					
						this.V3BYGP = (BigDecimal) dis.readObject();
					
					this.V3POST = readString(dis);
					
					this.V3POSS = readString(dis);
					
					this.V3INUS = readString(dis);
					
					this.V3WCCD = readString(dis);
					
					this.V3VLPF = readString(dis);
					
					this.V3POTP = readString(dis);
					
					this.V3DMST = readString(dis);
					
					this.V3BORF = readString(dis);
					
					this.V3PBVB = readString(dis);
					
					this.V3FICS = readString(dis);
					
					this.V3SCRF = readString(dis);
					
					this.V3CFST = readString(dis);
					
					this.V3VLPA = readString(dis);
					
					this.V3CFRF = readString(dis);
					
					this.V3WHST = readString(dis);
					
					this.V3POCH = readString(dis);
					
					this.V3PPOP = readString(dis);
					
					this.V3UPLT = readString(dis);
					
					this.V3PCFL = readString(dis);
					
					this.V3PAOF = readString(dis);
					
					this.V3FROF = readString(dis);
					
					this.V3CFTP = readString(dis);
					
					this.V3CARI = readString(dis);
					
					this.V3RPFF = readString(dis);
					
					this.V3PFIP = readString(dis);
					
					this.V3TRMT = readString(dis);
					
					this.V3RTVF = readString(dis);
					
					this.V3WHDR = readString(dis);
					
					this.V3JBNO = readString(dis);
					
					this.V3PVND = readString(dis);
					
					this.V3VNBR = readString(dis);
					
						this.V3ADCD = (BigDecimal) dis.readObject();
					
					this.V3PFRV = readString(dis);
					
					this.V3TERM = readString(dis);
					
					this.V3FTRM = readString(dis);
					
					this.V3CNFT = readString(dis);
					
					this.V3CFVT = readString(dis);
					
					this.V3TMOV = readString(dis);
					
					this.V3POPW = readString(dis);
					
					this.V3LCN = readString(dis);
					
					this.V3PO1 = readString(dis);
					
						this.V3ARDE = (BigDecimal) dis.readObject();
					
						this.V3ARBD = (BigDecimal) dis.readObject();
					
						this.V3PCRD = (BigDecimal) dis.readObject();
					
						this.V3OCDT = (BigDecimal) dis.readObject();
					
						this.V3PCSD = (BigDecimal) dis.readObject();
					
						this.V3PSRD = (BigDecimal) dis.readObject();
					
						this.V3PSRT = (BigDecimal) dis.readObject();
					
						this.V3SHDT = (BigDecimal) dis.readObject();
					
						this.V3CSPD = (BigDecimal) dis.readObject();
					
						this.V3ORDT = (BigDecimal) dis.readObject();
					
						this.V3CLOD = (BigDecimal) dis.readObject();
					
						this.V3NDDT = (BigDecimal) dis.readObject();
					
						this.V3CLDN = (BigDecimal) dis.readObject();
					
						this.V3TRDT = (BigDecimal) dis.readObject();
					
						this.V3TRTM = (BigDecimal) dis.readObject();
					
						this.V3PDTA = (BigDecimal) dis.readObject();
					
						this.V3CPAD = (BigDecimal) dis.readObject();
					
						this.V3PDTR = (BigDecimal) dis.readObject();
					
						this.V3CLRD = (BigDecimal) dis.readObject();
					
						this.V3POLC = (BigDecimal) dis.readObject();
					
						this.V3POCD = (BigDecimal) dis.readObject();
					
						this.V3TTL1 = (BigDecimal) dis.readObject();
					
						this.V3CSTT = (BigDecimal) dis.readObject();
					
						this.V3TTOC = (BigDecimal) dis.readObject();
					
						this.V3TOCK = (BigDecimal) dis.readObject();
					
						this.V3TTNW = (BigDecimal) dis.readObject();
					
						this.V3TNWK = (BigDecimal) dis.readObject();
					
						this.V3TTGW = (BigDecimal) dis.readObject();
					
						this.V3TGWK = (BigDecimal) dis.readObject();
					
						this.V3TTPL = (BigDecimal) dis.readObject();
					
						this.V3TTVU = (BigDecimal) dis.readObject();
					
						this.V3TTFB = (BigDecimal) dis.readObject();
					
						this.V3TTFR = (BigDecimal) dis.readObject();
					
						this.V3TTAP = (BigDecimal) dis.readObject();
					
						this.V3TTPU = (BigDecimal) dis.readObject();
					
						this.V3VPUA = (BigDecimal) dis.readObject();
					
					this.V3PALT = readString(dis);
					
						this.V3PUBF = (BigDecimal) dis.readObject();
					
						this.V3PUBT = (BigDecimal) dis.readObject();
					
						this.V3VFRT = (BigDecimal) dis.readObject();
					
					this.V3FRTP = readString(dis);
					
						this.V3WULC = (BigDecimal) dis.readObject();
					
					this.V3WUCT = readString(dis);
					
						this.V3NDAC = (BigDecimal) dis.readObject();
					
						this.V3ONAF = (BigDecimal) dis.readObject();
					
						this.V3ACDM = (BigDecimal) dis.readObject();
					
						this.V3ACDF = (BigDecimal) dis.readObject();
					
						this.V3TUCA = (BigDecimal) dis.readObject();
					
						this.V3TTBD = (BigDecimal) dis.readObject();
					
						this.V3TLWP = (BigDecimal) dis.readObject();
					
						this.V3CNFR = (BigDecimal) dis.readObject();
					
					this.V3CFRT = readString(dis);
					
						this.V3CULC = (BigDecimal) dis.readObject();
					
					this.V3CULT = readString(dis);
					
						this.V3CPAL = (BigDecimal) dis.readObject();
					
					this.V3CPUT = readString(dis);
					
						this.V3CPFB = (BigDecimal) dis.readObject();
					
						this.V3CPTB = (BigDecimal) dis.readObject();
					
						this.V3CTLN = (BigDecimal) dis.readObject();
					
						this.V3CCTT = (BigDecimal) dis.readObject();
					
						this.V3CTOC = (BigDecimal) dis.readObject();
					
						this.V3CTCK = (BigDecimal) dis.readObject();
					
						this.V3CTNW = (BigDecimal) dis.readObject();
					
						this.V3CTNK = (BigDecimal) dis.readObject();
					
						this.V3CTGW = (BigDecimal) dis.readObject();
					
						this.V3CTGK = (BigDecimal) dis.readObject();
					
						this.V3CTPL = (BigDecimal) dis.readObject();
					
						this.V3CTVU = (BigDecimal) dis.readObject();
					
						this.V3CTBC = (BigDecimal) dis.readObject();
					
						this.V3CTFC = (BigDecimal) dis.readObject();
					
						this.V3CTAC = (BigDecimal) dis.readObject();
					
						this.V3CTPA = (BigDecimal) dis.readObject();
					
						this.V3CNAC = (BigDecimal) dis.readObject();
					
						this.V3CNAF = (BigDecimal) dis.readObject();
					
						this.V3CACM = (BigDecimal) dis.readObject();
					
						this.V3CACF = (BigDecimal) dis.readObject();
					
						this.V3CTUC = (BigDecimal) dis.readObject();
					
						this.V3CTBD = (BigDecimal) dis.readObject();
					
						this.V3CTWP = (BigDecimal) dis.readObject();
					
					this.V3POCB = readString(dis);
					
					this.V3POCN = readString(dis);
					
					this.V3POCM = readString(dis);
					
						this.V3TNRL = (BigDecimal) dis.readObject();
					
						this.V3CSTR = (BigDecimal) dis.readObject();
					
						this.V3TRCB = (BigDecimal) dis.readObject();
					
						this.V3TRBK = (BigDecimal) dis.readObject();
					
						this.V3TRNW = (BigDecimal) dis.readObject();
					
						this.V3TRNK = (BigDecimal) dis.readObject();
					
						this.V3TRGW = (BigDecimal) dis.readObject();
					
						this.V3TRGK = (BigDecimal) dis.readObject();
					
						this.V3TRPS = (BigDecimal) dis.readObject();
					
						this.V3TRVP = (BigDecimal) dis.readObject();
					
						this.V3TRVU = (BigDecimal) dis.readObject();
					
						this.V3TRFC = (BigDecimal) dis.readObject();
					
						this.V3TRFR = (BigDecimal) dis.readObject();
					
						this.V3TRDA = (BigDecimal) dis.readObject();
					
						this.V3TRBD = (BigDecimal) dis.readObject();
					
						this.V3TRPA = (BigDecimal) dis.readObject();
					
						this.V3TRUC = (BigDecimal) dis.readObject();
					
					this.V3PMPS = readString(dis);
					
						this.V3PFNA = (BigDecimal) dis.readObject();
					
						this.V3UNAM = (BigDecimal) dis.readObject();
					
						this.V3MAVC = (BigDecimal) dis.readObject();
					
					this.V3MMTS = readString(dis);
					
					this.V3MVCS = readString(dis);
					
					this.V3MPDS = readString(dis);
					
					this.V3MPDH = readString(dis);
					
						this.V3MPDL = (BigDecimal) dis.readObject();
					
					this.V3MQDH = readString(dis);
					
						this.V3MQDL = (BigDecimal) dis.readObject();
					
						this.V3MPDT = (BigDecimal) dis.readObject();
					
						this.V3MCSD = (BigDecimal) dis.readObject();
					
						this.V3MVCA = (BigDecimal) dis.readObject();
					
						this.V3MERV = (BigDecimal) dis.readObject();
					
					this.V3MINV = readString(dis);
					
						this.V3MIDT = (BigDecimal) dis.readObject();
					
					this.V3MVIF = readString(dis);
					
						this.V3MVAR = (BigDecimal) dis.readObject();
					
						this.V3MPDA = (BigDecimal) dis.readObject();
					
					this.V3PPFS = readString(dis);
					
						this.V3FPNA = (BigDecimal) dis.readObject();
					
						this.V3UFPA = (BigDecimal) dis.readObject();
					
						this.V3FAVC = (BigDecimal) dis.readObject();
					
					this.V3FMTS = readString(dis);
					
					this.V3FVCS = readString(dis);
					
					this.V3FPDS = readString(dis);
					
					this.V3FCDH = readString(dis);
					
						this.V3FCDL = (BigDecimal) dis.readObject();
					
						this.V3FPDT = (BigDecimal) dis.readObject();
					
					this.V3RSVN = readString(dis);
					
					this.V3FTCS = readString(dis);
					
						this.V3FCAD = (BigDecimal) dis.readObject();
					
						this.V3FVAR = (BigDecimal) dis.readObject();
					
						this.V3FVCH = (BigDecimal) dis.readObject();
					
						this.V3FTRV = (BigDecimal) dis.readObject();
					
					this.V3FINV = readString(dis);
					
						this.V3FIDT = (BigDecimal) dis.readObject();
					
					this.V3FVIF = readString(dis);
					
						this.V3TVSQ = (BigDecimal) dis.readObject();
					
						this.V3TKSQ = (BigDecimal) dis.readObject();
					
						this.V3TDAQ = (BigDecimal) dis.readObject();
					
						this.V3NDAF = (BigDecimal) dis.readObject();
					
						this.V3FPDA = (BigDecimal) dis.readObject();
					
					this.V3CUNO = readString(dis);
					
						this.V3ORNO = (BigDecimal) dis.readObject();
					
					this.V3SHNM = readString(dis);
					
					this.V3SADD = readString(dis);
					
					this.V3SHNO = readString(dis);
					
					this.V3PONU = readString(dis);
					
					this.V3RERF = readString(dis);
					
					this.V3RECO = readString(dis);
					
					this.V3FSCF = readString(dis);
					
						this.V3POEO = (BigDecimal) dis.readObject();
					
					this.V3POVO = readString(dis);
					
					this.V3PBSC = readString(dis);
					
					this.V3RECF = readString(dis);
					
						this.V3PSTB = (BigDecimal) dis.readObject();
					
					this.V3TMSN = readString(dis);
					
					this.V3XMFL = readString(dis);
					
						this.V3XMDT = (BigDecimal) dis.readObject();
					
						this.V3XMTM = (BigDecimal) dis.readObject();
					
					this.V3ERRF = readString(dis);
					
					this.V3STKI = readString(dis);
					
						this.V3COTM = (BigDecimal) dis.readObject();
					
					this.V3RPRC = readString(dis);
					
					this.V3FIMI = readString(dis);
					
						this.V3TXDT = (BigDecimal) dis.readObject();
					
						this.V3TXTM = (BigDecimal) dis.readObject();
					
					this.V3POIF = readString(dis);
					
					this.V3COD1 = readString(dis);
					
					this.V3SNNO = readString(dis);
					
					this.V3SHID = readString(dis);
					
					this.V3FRTI = readString(dis);
					
					this.V3OPO = readString(dis);
					
						this.V3EADT = (BigDecimal) dis.readObject();
					
						this.V3EATM = (BigDecimal) dis.readObject();
					
					this.V3EAID = readString(dis);
					
						this.V3MODT = (BigDecimal) dis.readObject();
					
						this.V3MOTM = (BigDecimal) dis.readObject();
					
					this.V3MOID = readString(dis);
					
					this.V3MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.V3PO = readString(dis);
					
					this.V3OWID = readString(dis);
					
					this.V3ARCO = readString(dis);
					
						this.V3ROSQ = (BigDecimal) dis.readObject();
					
						this.V3SBNO = (BigDecimal) dis.readObject();
					
					this.V3BUYR = readString(dis);
					
					this.V3OCNB = readString(dis);
					
					this.V3OFCI = readString(dis);
					
						this.V3BYGP = (BigDecimal) dis.readObject();
					
					this.V3POST = readString(dis);
					
					this.V3POSS = readString(dis);
					
					this.V3INUS = readString(dis);
					
					this.V3WCCD = readString(dis);
					
					this.V3VLPF = readString(dis);
					
					this.V3POTP = readString(dis);
					
					this.V3DMST = readString(dis);
					
					this.V3BORF = readString(dis);
					
					this.V3PBVB = readString(dis);
					
					this.V3FICS = readString(dis);
					
					this.V3SCRF = readString(dis);
					
					this.V3CFST = readString(dis);
					
					this.V3VLPA = readString(dis);
					
					this.V3CFRF = readString(dis);
					
					this.V3WHST = readString(dis);
					
					this.V3POCH = readString(dis);
					
					this.V3PPOP = readString(dis);
					
					this.V3UPLT = readString(dis);
					
					this.V3PCFL = readString(dis);
					
					this.V3PAOF = readString(dis);
					
					this.V3FROF = readString(dis);
					
					this.V3CFTP = readString(dis);
					
					this.V3CARI = readString(dis);
					
					this.V3RPFF = readString(dis);
					
					this.V3PFIP = readString(dis);
					
					this.V3TRMT = readString(dis);
					
					this.V3RTVF = readString(dis);
					
					this.V3WHDR = readString(dis);
					
					this.V3JBNO = readString(dis);
					
					this.V3PVND = readString(dis);
					
					this.V3VNBR = readString(dis);
					
						this.V3ADCD = (BigDecimal) dis.readObject();
					
					this.V3PFRV = readString(dis);
					
					this.V3TERM = readString(dis);
					
					this.V3FTRM = readString(dis);
					
					this.V3CNFT = readString(dis);
					
					this.V3CFVT = readString(dis);
					
					this.V3TMOV = readString(dis);
					
					this.V3POPW = readString(dis);
					
					this.V3LCN = readString(dis);
					
					this.V3PO1 = readString(dis);
					
						this.V3ARDE = (BigDecimal) dis.readObject();
					
						this.V3ARBD = (BigDecimal) dis.readObject();
					
						this.V3PCRD = (BigDecimal) dis.readObject();
					
						this.V3OCDT = (BigDecimal) dis.readObject();
					
						this.V3PCSD = (BigDecimal) dis.readObject();
					
						this.V3PSRD = (BigDecimal) dis.readObject();
					
						this.V3PSRT = (BigDecimal) dis.readObject();
					
						this.V3SHDT = (BigDecimal) dis.readObject();
					
						this.V3CSPD = (BigDecimal) dis.readObject();
					
						this.V3ORDT = (BigDecimal) dis.readObject();
					
						this.V3CLOD = (BigDecimal) dis.readObject();
					
						this.V3NDDT = (BigDecimal) dis.readObject();
					
						this.V3CLDN = (BigDecimal) dis.readObject();
					
						this.V3TRDT = (BigDecimal) dis.readObject();
					
						this.V3TRTM = (BigDecimal) dis.readObject();
					
						this.V3PDTA = (BigDecimal) dis.readObject();
					
						this.V3CPAD = (BigDecimal) dis.readObject();
					
						this.V3PDTR = (BigDecimal) dis.readObject();
					
						this.V3CLRD = (BigDecimal) dis.readObject();
					
						this.V3POLC = (BigDecimal) dis.readObject();
					
						this.V3POCD = (BigDecimal) dis.readObject();
					
						this.V3TTL1 = (BigDecimal) dis.readObject();
					
						this.V3CSTT = (BigDecimal) dis.readObject();
					
						this.V3TTOC = (BigDecimal) dis.readObject();
					
						this.V3TOCK = (BigDecimal) dis.readObject();
					
						this.V3TTNW = (BigDecimal) dis.readObject();
					
						this.V3TNWK = (BigDecimal) dis.readObject();
					
						this.V3TTGW = (BigDecimal) dis.readObject();
					
						this.V3TGWK = (BigDecimal) dis.readObject();
					
						this.V3TTPL = (BigDecimal) dis.readObject();
					
						this.V3TTVU = (BigDecimal) dis.readObject();
					
						this.V3TTFB = (BigDecimal) dis.readObject();
					
						this.V3TTFR = (BigDecimal) dis.readObject();
					
						this.V3TTAP = (BigDecimal) dis.readObject();
					
						this.V3TTPU = (BigDecimal) dis.readObject();
					
						this.V3VPUA = (BigDecimal) dis.readObject();
					
					this.V3PALT = readString(dis);
					
						this.V3PUBF = (BigDecimal) dis.readObject();
					
						this.V3PUBT = (BigDecimal) dis.readObject();
					
						this.V3VFRT = (BigDecimal) dis.readObject();
					
					this.V3FRTP = readString(dis);
					
						this.V3WULC = (BigDecimal) dis.readObject();
					
					this.V3WUCT = readString(dis);
					
						this.V3NDAC = (BigDecimal) dis.readObject();
					
						this.V3ONAF = (BigDecimal) dis.readObject();
					
						this.V3ACDM = (BigDecimal) dis.readObject();
					
						this.V3ACDF = (BigDecimal) dis.readObject();
					
						this.V3TUCA = (BigDecimal) dis.readObject();
					
						this.V3TTBD = (BigDecimal) dis.readObject();
					
						this.V3TLWP = (BigDecimal) dis.readObject();
					
						this.V3CNFR = (BigDecimal) dis.readObject();
					
					this.V3CFRT = readString(dis);
					
						this.V3CULC = (BigDecimal) dis.readObject();
					
					this.V3CULT = readString(dis);
					
						this.V3CPAL = (BigDecimal) dis.readObject();
					
					this.V3CPUT = readString(dis);
					
						this.V3CPFB = (BigDecimal) dis.readObject();
					
						this.V3CPTB = (BigDecimal) dis.readObject();
					
						this.V3CTLN = (BigDecimal) dis.readObject();
					
						this.V3CCTT = (BigDecimal) dis.readObject();
					
						this.V3CTOC = (BigDecimal) dis.readObject();
					
						this.V3CTCK = (BigDecimal) dis.readObject();
					
						this.V3CTNW = (BigDecimal) dis.readObject();
					
						this.V3CTNK = (BigDecimal) dis.readObject();
					
						this.V3CTGW = (BigDecimal) dis.readObject();
					
						this.V3CTGK = (BigDecimal) dis.readObject();
					
						this.V3CTPL = (BigDecimal) dis.readObject();
					
						this.V3CTVU = (BigDecimal) dis.readObject();
					
						this.V3CTBC = (BigDecimal) dis.readObject();
					
						this.V3CTFC = (BigDecimal) dis.readObject();
					
						this.V3CTAC = (BigDecimal) dis.readObject();
					
						this.V3CTPA = (BigDecimal) dis.readObject();
					
						this.V3CNAC = (BigDecimal) dis.readObject();
					
						this.V3CNAF = (BigDecimal) dis.readObject();
					
						this.V3CACM = (BigDecimal) dis.readObject();
					
						this.V3CACF = (BigDecimal) dis.readObject();
					
						this.V3CTUC = (BigDecimal) dis.readObject();
					
						this.V3CTBD = (BigDecimal) dis.readObject();
					
						this.V3CTWP = (BigDecimal) dis.readObject();
					
					this.V3POCB = readString(dis);
					
					this.V3POCN = readString(dis);
					
					this.V3POCM = readString(dis);
					
						this.V3TNRL = (BigDecimal) dis.readObject();
					
						this.V3CSTR = (BigDecimal) dis.readObject();
					
						this.V3TRCB = (BigDecimal) dis.readObject();
					
						this.V3TRBK = (BigDecimal) dis.readObject();
					
						this.V3TRNW = (BigDecimal) dis.readObject();
					
						this.V3TRNK = (BigDecimal) dis.readObject();
					
						this.V3TRGW = (BigDecimal) dis.readObject();
					
						this.V3TRGK = (BigDecimal) dis.readObject();
					
						this.V3TRPS = (BigDecimal) dis.readObject();
					
						this.V3TRVP = (BigDecimal) dis.readObject();
					
						this.V3TRVU = (BigDecimal) dis.readObject();
					
						this.V3TRFC = (BigDecimal) dis.readObject();
					
						this.V3TRFR = (BigDecimal) dis.readObject();
					
						this.V3TRDA = (BigDecimal) dis.readObject();
					
						this.V3TRBD = (BigDecimal) dis.readObject();
					
						this.V3TRPA = (BigDecimal) dis.readObject();
					
						this.V3TRUC = (BigDecimal) dis.readObject();
					
					this.V3PMPS = readString(dis);
					
						this.V3PFNA = (BigDecimal) dis.readObject();
					
						this.V3UNAM = (BigDecimal) dis.readObject();
					
						this.V3MAVC = (BigDecimal) dis.readObject();
					
					this.V3MMTS = readString(dis);
					
					this.V3MVCS = readString(dis);
					
					this.V3MPDS = readString(dis);
					
					this.V3MPDH = readString(dis);
					
						this.V3MPDL = (BigDecimal) dis.readObject();
					
					this.V3MQDH = readString(dis);
					
						this.V3MQDL = (BigDecimal) dis.readObject();
					
						this.V3MPDT = (BigDecimal) dis.readObject();
					
						this.V3MCSD = (BigDecimal) dis.readObject();
					
						this.V3MVCA = (BigDecimal) dis.readObject();
					
						this.V3MERV = (BigDecimal) dis.readObject();
					
					this.V3MINV = readString(dis);
					
						this.V3MIDT = (BigDecimal) dis.readObject();
					
					this.V3MVIF = readString(dis);
					
						this.V3MVAR = (BigDecimal) dis.readObject();
					
						this.V3MPDA = (BigDecimal) dis.readObject();
					
					this.V3PPFS = readString(dis);
					
						this.V3FPNA = (BigDecimal) dis.readObject();
					
						this.V3UFPA = (BigDecimal) dis.readObject();
					
						this.V3FAVC = (BigDecimal) dis.readObject();
					
					this.V3FMTS = readString(dis);
					
					this.V3FVCS = readString(dis);
					
					this.V3FPDS = readString(dis);
					
					this.V3FCDH = readString(dis);
					
						this.V3FCDL = (BigDecimal) dis.readObject();
					
						this.V3FPDT = (BigDecimal) dis.readObject();
					
					this.V3RSVN = readString(dis);
					
					this.V3FTCS = readString(dis);
					
						this.V3FCAD = (BigDecimal) dis.readObject();
					
						this.V3FVAR = (BigDecimal) dis.readObject();
					
						this.V3FVCH = (BigDecimal) dis.readObject();
					
						this.V3FTRV = (BigDecimal) dis.readObject();
					
					this.V3FINV = readString(dis);
					
						this.V3FIDT = (BigDecimal) dis.readObject();
					
					this.V3FVIF = readString(dis);
					
						this.V3TVSQ = (BigDecimal) dis.readObject();
					
						this.V3TKSQ = (BigDecimal) dis.readObject();
					
						this.V3TDAQ = (BigDecimal) dis.readObject();
					
						this.V3NDAF = (BigDecimal) dis.readObject();
					
						this.V3FPDA = (BigDecimal) dis.readObject();
					
					this.V3CUNO = readString(dis);
					
						this.V3ORNO = (BigDecimal) dis.readObject();
					
					this.V3SHNM = readString(dis);
					
					this.V3SADD = readString(dis);
					
					this.V3SHNO = readString(dis);
					
					this.V3PONU = readString(dis);
					
					this.V3RERF = readString(dis);
					
					this.V3RECO = readString(dis);
					
					this.V3FSCF = readString(dis);
					
						this.V3POEO = (BigDecimal) dis.readObject();
					
					this.V3POVO = readString(dis);
					
					this.V3PBSC = readString(dis);
					
					this.V3RECF = readString(dis);
					
						this.V3PSTB = (BigDecimal) dis.readObject();
					
					this.V3TMSN = readString(dis);
					
					this.V3XMFL = readString(dis);
					
						this.V3XMDT = (BigDecimal) dis.readObject();
					
						this.V3XMTM = (BigDecimal) dis.readObject();
					
					this.V3ERRF = readString(dis);
					
					this.V3STKI = readString(dis);
					
						this.V3COTM = (BigDecimal) dis.readObject();
					
					this.V3RPRC = readString(dis);
					
					this.V3FIMI = readString(dis);
					
						this.V3TXDT = (BigDecimal) dis.readObject();
					
						this.V3TXTM = (BigDecimal) dis.readObject();
					
					this.V3POIF = readString(dis);
					
					this.V3COD1 = readString(dis);
					
					this.V3SNNO = readString(dis);
					
					this.V3SHID = readString(dis);
					
					this.V3FRTI = readString(dis);
					
					this.V3OPO = readString(dis);
					
						this.V3EADT = (BigDecimal) dis.readObject();
					
						this.V3EATM = (BigDecimal) dis.readObject();
					
					this.V3EAID = readString(dis);
					
						this.V3MODT = (BigDecimal) dis.readObject();
					
						this.V3MOTM = (BigDecimal) dis.readObject();
					
					this.V3MOID = readString(dis);
					
					this.V3MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.V3PO,dos);
					
					// String
				
						writeString(this.V3OWID,dos);
					
					// String
				
						writeString(this.V3ARCO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ROSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3SBNO);
					
					// String
				
						writeString(this.V3BUYR,dos);
					
					// String
				
						writeString(this.V3OCNB,dos);
					
					// String
				
						writeString(this.V3OFCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3BYGP);
					
					// String
				
						writeString(this.V3POST,dos);
					
					// String
				
						writeString(this.V3POSS,dos);
					
					// String
				
						writeString(this.V3INUS,dos);
					
					// String
				
						writeString(this.V3WCCD,dos);
					
					// String
				
						writeString(this.V3VLPF,dos);
					
					// String
				
						writeString(this.V3POTP,dos);
					
					// String
				
						writeString(this.V3DMST,dos);
					
					// String
				
						writeString(this.V3BORF,dos);
					
					// String
				
						writeString(this.V3PBVB,dos);
					
					// String
				
						writeString(this.V3FICS,dos);
					
					// String
				
						writeString(this.V3SCRF,dos);
					
					// String
				
						writeString(this.V3CFST,dos);
					
					// String
				
						writeString(this.V3VLPA,dos);
					
					// String
				
						writeString(this.V3CFRF,dos);
					
					// String
				
						writeString(this.V3WHST,dos);
					
					// String
				
						writeString(this.V3POCH,dos);
					
					// String
				
						writeString(this.V3PPOP,dos);
					
					// String
				
						writeString(this.V3UPLT,dos);
					
					// String
				
						writeString(this.V3PCFL,dos);
					
					// String
				
						writeString(this.V3PAOF,dos);
					
					// String
				
						writeString(this.V3FROF,dos);
					
					// String
				
						writeString(this.V3CFTP,dos);
					
					// String
				
						writeString(this.V3CARI,dos);
					
					// String
				
						writeString(this.V3RPFF,dos);
					
					// String
				
						writeString(this.V3PFIP,dos);
					
					// String
				
						writeString(this.V3TRMT,dos);
					
					// String
				
						writeString(this.V3RTVF,dos);
					
					// String
				
						writeString(this.V3WHDR,dos);
					
					// String
				
						writeString(this.V3JBNO,dos);
					
					// String
				
						writeString(this.V3PVND,dos);
					
					// String
				
						writeString(this.V3VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ADCD);
					
					// String
				
						writeString(this.V3PFRV,dos);
					
					// String
				
						writeString(this.V3TERM,dos);
					
					// String
				
						writeString(this.V3FTRM,dos);
					
					// String
				
						writeString(this.V3CNFT,dos);
					
					// String
				
						writeString(this.V3CFVT,dos);
					
					// String
				
						writeString(this.V3TMOV,dos);
					
					// String
				
						writeString(this.V3POPW,dos);
					
					// String
				
						writeString(this.V3LCN,dos);
					
					// String
				
						writeString(this.V3PO1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PCRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3OCDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PCSD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3SHDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLDN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PDTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PDTR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POLC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSTT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TOCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TNWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TGWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTPL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTPU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3VPUA);
					
					// String
				
						writeString(this.V3PALT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PUBF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PUBT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3VFRT);
					
					// String
				
						writeString(this.V3FRTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3WULC);
					
					// String
				
						writeString(this.V3WUCT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ONAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TUCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TLWP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNFR);
					
					// String
				
						writeString(this.V3CFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CULC);
					
					// String
				
						writeString(this.V3CULT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPAL);
					
					// String
				
						writeString(this.V3CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPTB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CCTT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTNK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTGK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTPL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTBC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTUC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTWP);
					
					// String
				
						writeString(this.V3POCB,dos);
					
					// String
				
						writeString(this.V3POCN,dos);
					
					// String
				
						writeString(this.V3POCM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TNRL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSTR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRCB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRBK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRNK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRGK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRPS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRVP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRUC);
					
					// String
				
						writeString(this.V3PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PFNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3UNAM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MAVC);
					
					// String
				
						writeString(this.V3MMTS,dos);
					
					// String
				
						writeString(this.V3MVCS,dos);
					
					// String
				
						writeString(this.V3MPDS,dos);
					
					// String
				
						writeString(this.V3MPDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDL);
					
					// String
				
						writeString(this.V3MQDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MQDL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MCSD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MVCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MERV);
					
					// String
				
						writeString(this.V3MINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MIDT);
					
					// String
				
						writeString(this.V3MVIF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MVAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDA);
					
					// String
				
						writeString(this.V3PPFS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3UFPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FAVC);
					
					// String
				
						writeString(this.V3FMTS,dos);
					
					// String
				
						writeString(this.V3FVCS,dos);
					
					// String
				
						writeString(this.V3FPDS,dos);
					
					// String
				
						writeString(this.V3FCDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FCDL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPDT);
					
					// String
				
						writeString(this.V3RSVN,dos);
					
					// String
				
						writeString(this.V3FTCS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FVAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FVCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FTRV);
					
					// String
				
						writeString(this.V3FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FIDT);
					
					// String
				
						writeString(this.V3FVIF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TVSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TKSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TDAQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPDA);
					
					// String
				
						writeString(this.V3CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ORNO);
					
					// String
				
						writeString(this.V3SHNM,dos);
					
					// String
				
						writeString(this.V3SADD,dos);
					
					// String
				
						writeString(this.V3SHNO,dos);
					
					// String
				
						writeString(this.V3PONU,dos);
					
					// String
				
						writeString(this.V3RERF,dos);
					
					// String
				
						writeString(this.V3RECO,dos);
					
					// String
				
						writeString(this.V3FSCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POEO);
					
					// String
				
						writeString(this.V3POVO,dos);
					
					// String
				
						writeString(this.V3PBSC,dos);
					
					// String
				
						writeString(this.V3RECF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSTB);
					
					// String
				
						writeString(this.V3TMSN,dos);
					
					// String
				
						writeString(this.V3XMFL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3XMDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3XMTM);
					
					// String
				
						writeString(this.V3ERRF,dos);
					
					// String
				
						writeString(this.V3STKI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3COTM);
					
					// String
				
						writeString(this.V3RPRC,dos);
					
					// String
				
						writeString(this.V3FIMI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TXDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TXTM);
					
					// String
				
						writeString(this.V3POIF,dos);
					
					// String
				
						writeString(this.V3COD1,dos);
					
					// String
				
						writeString(this.V3SNNO,dos);
					
					// String
				
						writeString(this.V3SHID,dos);
					
					// String
				
						writeString(this.V3FRTI,dos);
					
					// String
				
						writeString(this.V3OPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3EATM);
					
					// String
				
						writeString(this.V3EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MOTM);
					
					// String
				
						writeString(this.V3MOID,dos);
					
					// String
				
						writeString(this.V3MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.V3PO,dos);
					
					// String
				
						writeString(this.V3OWID,dos);
					
					// String
				
						writeString(this.V3ARCO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ROSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3SBNO);
					
					// String
				
						writeString(this.V3BUYR,dos);
					
					// String
				
						writeString(this.V3OCNB,dos);
					
					// String
				
						writeString(this.V3OFCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3BYGP);
					
					// String
				
						writeString(this.V3POST,dos);
					
					// String
				
						writeString(this.V3POSS,dos);
					
					// String
				
						writeString(this.V3INUS,dos);
					
					// String
				
						writeString(this.V3WCCD,dos);
					
					// String
				
						writeString(this.V3VLPF,dos);
					
					// String
				
						writeString(this.V3POTP,dos);
					
					// String
				
						writeString(this.V3DMST,dos);
					
					// String
				
						writeString(this.V3BORF,dos);
					
					// String
				
						writeString(this.V3PBVB,dos);
					
					// String
				
						writeString(this.V3FICS,dos);
					
					// String
				
						writeString(this.V3SCRF,dos);
					
					// String
				
						writeString(this.V3CFST,dos);
					
					// String
				
						writeString(this.V3VLPA,dos);
					
					// String
				
						writeString(this.V3CFRF,dos);
					
					// String
				
						writeString(this.V3WHST,dos);
					
					// String
				
						writeString(this.V3POCH,dos);
					
					// String
				
						writeString(this.V3PPOP,dos);
					
					// String
				
						writeString(this.V3UPLT,dos);
					
					// String
				
						writeString(this.V3PCFL,dos);
					
					// String
				
						writeString(this.V3PAOF,dos);
					
					// String
				
						writeString(this.V3FROF,dos);
					
					// String
				
						writeString(this.V3CFTP,dos);
					
					// String
				
						writeString(this.V3CARI,dos);
					
					// String
				
						writeString(this.V3RPFF,dos);
					
					// String
				
						writeString(this.V3PFIP,dos);
					
					// String
				
						writeString(this.V3TRMT,dos);
					
					// String
				
						writeString(this.V3RTVF,dos);
					
					// String
				
						writeString(this.V3WHDR,dos);
					
					// String
				
						writeString(this.V3JBNO,dos);
					
					// String
				
						writeString(this.V3PVND,dos);
					
					// String
				
						writeString(this.V3VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ADCD);
					
					// String
				
						writeString(this.V3PFRV,dos);
					
					// String
				
						writeString(this.V3TERM,dos);
					
					// String
				
						writeString(this.V3FTRM,dos);
					
					// String
				
						writeString(this.V3CNFT,dos);
					
					// String
				
						writeString(this.V3CFVT,dos);
					
					// String
				
						writeString(this.V3TMOV,dos);
					
					// String
				
						writeString(this.V3POPW,dos);
					
					// String
				
						writeString(this.V3LCN,dos);
					
					// String
				
						writeString(this.V3PO1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PCRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3OCDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PCSD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3SHDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLDN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PDTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PDTR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POLC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSTT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TOCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TNWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TGWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTPL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTPU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3VPUA);
					
					// String
				
						writeString(this.V3PALT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PUBF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PUBT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3VFRT);
					
					// String
				
						writeString(this.V3FRTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3WULC);
					
					// String
				
						writeString(this.V3WUCT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ONAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TUCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TLWP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNFR);
					
					// String
				
						writeString(this.V3CFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CULC);
					
					// String
				
						writeString(this.V3CULT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPAL);
					
					// String
				
						writeString(this.V3CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPTB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CCTT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTNK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTGK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTPL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTBC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTUC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTWP);
					
					// String
				
						writeString(this.V3POCB,dos);
					
					// String
				
						writeString(this.V3POCN,dos);
					
					// String
				
						writeString(this.V3POCM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TNRL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSTR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRCB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRBK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRNK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRGK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRPS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRVP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRUC);
					
					// String
				
						writeString(this.V3PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PFNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3UNAM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MAVC);
					
					// String
				
						writeString(this.V3MMTS,dos);
					
					// String
				
						writeString(this.V3MVCS,dos);
					
					// String
				
						writeString(this.V3MPDS,dos);
					
					// String
				
						writeString(this.V3MPDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDL);
					
					// String
				
						writeString(this.V3MQDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MQDL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MCSD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MVCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MERV);
					
					// String
				
						writeString(this.V3MINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MIDT);
					
					// String
				
						writeString(this.V3MVIF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MVAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDA);
					
					// String
				
						writeString(this.V3PPFS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3UFPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FAVC);
					
					// String
				
						writeString(this.V3FMTS,dos);
					
					// String
				
						writeString(this.V3FVCS,dos);
					
					// String
				
						writeString(this.V3FPDS,dos);
					
					// String
				
						writeString(this.V3FCDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FCDL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPDT);
					
					// String
				
						writeString(this.V3RSVN,dos);
					
					// String
				
						writeString(this.V3FTCS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FVAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FVCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FTRV);
					
					// String
				
						writeString(this.V3FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FIDT);
					
					// String
				
						writeString(this.V3FVIF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TVSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TKSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TDAQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPDA);
					
					// String
				
						writeString(this.V3CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ORNO);
					
					// String
				
						writeString(this.V3SHNM,dos);
					
					// String
				
						writeString(this.V3SADD,dos);
					
					// String
				
						writeString(this.V3SHNO,dos);
					
					// String
				
						writeString(this.V3PONU,dos);
					
					// String
				
						writeString(this.V3RERF,dos);
					
					// String
				
						writeString(this.V3RECO,dos);
					
					// String
				
						writeString(this.V3FSCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POEO);
					
					// String
				
						writeString(this.V3POVO,dos);
					
					// String
				
						writeString(this.V3PBSC,dos);
					
					// String
				
						writeString(this.V3RECF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSTB);
					
					// String
				
						writeString(this.V3TMSN,dos);
					
					// String
				
						writeString(this.V3XMFL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3XMDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3XMTM);
					
					// String
				
						writeString(this.V3ERRF,dos);
					
					// String
				
						writeString(this.V3STKI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3COTM);
					
					// String
				
						writeString(this.V3RPRC,dos);
					
					// String
				
						writeString(this.V3FIMI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TXDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TXTM);
					
					// String
				
						writeString(this.V3POIF,dos);
					
					// String
				
						writeString(this.V3COD1,dos);
					
					// String
				
						writeString(this.V3SNNO,dos);
					
					// String
				
						writeString(this.V3SHID,dos);
					
					// String
				
						writeString(this.V3FRTI,dos);
					
					// String
				
						writeString(this.V3OPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3EATM);
					
					// String
				
						writeString(this.V3EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MOTM);
					
					// String
				
						writeString(this.V3MOID,dos);
					
					// String
				
						writeString(this.V3MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("V3PO="+V3PO);
		sb.append(",V3OWID="+V3OWID);
		sb.append(",V3ARCO="+V3ARCO);
		sb.append(",V3ROSQ="+String.valueOf(V3ROSQ));
		sb.append(",V3SBNO="+String.valueOf(V3SBNO));
		sb.append(",V3BUYR="+V3BUYR);
		sb.append(",V3OCNB="+V3OCNB);
		sb.append(",V3OFCI="+V3OFCI);
		sb.append(",V3BYGP="+String.valueOf(V3BYGP));
		sb.append(",V3POST="+V3POST);
		sb.append(",V3POSS="+V3POSS);
		sb.append(",V3INUS="+V3INUS);
		sb.append(",V3WCCD="+V3WCCD);
		sb.append(",V3VLPF="+V3VLPF);
		sb.append(",V3POTP="+V3POTP);
		sb.append(",V3DMST="+V3DMST);
		sb.append(",V3BORF="+V3BORF);
		sb.append(",V3PBVB="+V3PBVB);
		sb.append(",V3FICS="+V3FICS);
		sb.append(",V3SCRF="+V3SCRF);
		sb.append(",V3CFST="+V3CFST);
		sb.append(",V3VLPA="+V3VLPA);
		sb.append(",V3CFRF="+V3CFRF);
		sb.append(",V3WHST="+V3WHST);
		sb.append(",V3POCH="+V3POCH);
		sb.append(",V3PPOP="+V3PPOP);
		sb.append(",V3UPLT="+V3UPLT);
		sb.append(",V3PCFL="+V3PCFL);
		sb.append(",V3PAOF="+V3PAOF);
		sb.append(",V3FROF="+V3FROF);
		sb.append(",V3CFTP="+V3CFTP);
		sb.append(",V3CARI="+V3CARI);
		sb.append(",V3RPFF="+V3RPFF);
		sb.append(",V3PFIP="+V3PFIP);
		sb.append(",V3TRMT="+V3TRMT);
		sb.append(",V3RTVF="+V3RTVF);
		sb.append(",V3WHDR="+V3WHDR);
		sb.append(",V3JBNO="+V3JBNO);
		sb.append(",V3PVND="+V3PVND);
		sb.append(",V3VNBR="+V3VNBR);
		sb.append(",V3ADCD="+String.valueOf(V3ADCD));
		sb.append(",V3PFRV="+V3PFRV);
		sb.append(",V3TERM="+V3TERM);
		sb.append(",V3FTRM="+V3FTRM);
		sb.append(",V3CNFT="+V3CNFT);
		sb.append(",V3CFVT="+V3CFVT);
		sb.append(",V3TMOV="+V3TMOV);
		sb.append(",V3POPW="+V3POPW);
		sb.append(",V3LCN="+V3LCN);
		sb.append(",V3PO1="+V3PO1);
		sb.append(",V3ARDE="+String.valueOf(V3ARDE));
		sb.append(",V3ARBD="+String.valueOf(V3ARBD));
		sb.append(",V3PCRD="+String.valueOf(V3PCRD));
		sb.append(",V3OCDT="+String.valueOf(V3OCDT));
		sb.append(",V3PCSD="+String.valueOf(V3PCSD));
		sb.append(",V3PSRD="+String.valueOf(V3PSRD));
		sb.append(",V3PSRT="+String.valueOf(V3PSRT));
		sb.append(",V3SHDT="+String.valueOf(V3SHDT));
		sb.append(",V3CSPD="+String.valueOf(V3CSPD));
		sb.append(",V3ORDT="+String.valueOf(V3ORDT));
		sb.append(",V3CLOD="+String.valueOf(V3CLOD));
		sb.append(",V3NDDT="+String.valueOf(V3NDDT));
		sb.append(",V3CLDN="+String.valueOf(V3CLDN));
		sb.append(",V3TRDT="+String.valueOf(V3TRDT));
		sb.append(",V3TRTM="+String.valueOf(V3TRTM));
		sb.append(",V3PDTA="+String.valueOf(V3PDTA));
		sb.append(",V3CPAD="+String.valueOf(V3CPAD));
		sb.append(",V3PDTR="+String.valueOf(V3PDTR));
		sb.append(",V3CLRD="+String.valueOf(V3CLRD));
		sb.append(",V3POLC="+String.valueOf(V3POLC));
		sb.append(",V3POCD="+String.valueOf(V3POCD));
		sb.append(",V3TTL1="+String.valueOf(V3TTL1));
		sb.append(",V3CSTT="+String.valueOf(V3CSTT));
		sb.append(",V3TTOC="+String.valueOf(V3TTOC));
		sb.append(",V3TOCK="+String.valueOf(V3TOCK));
		sb.append(",V3TTNW="+String.valueOf(V3TTNW));
		sb.append(",V3TNWK="+String.valueOf(V3TNWK));
		sb.append(",V3TTGW="+String.valueOf(V3TTGW));
		sb.append(",V3TGWK="+String.valueOf(V3TGWK));
		sb.append(",V3TTPL="+String.valueOf(V3TTPL));
		sb.append(",V3TTVU="+String.valueOf(V3TTVU));
		sb.append(",V3TTFB="+String.valueOf(V3TTFB));
		sb.append(",V3TTFR="+String.valueOf(V3TTFR));
		sb.append(",V3TTAP="+String.valueOf(V3TTAP));
		sb.append(",V3TTPU="+String.valueOf(V3TTPU));
		sb.append(",V3VPUA="+String.valueOf(V3VPUA));
		sb.append(",V3PALT="+V3PALT);
		sb.append(",V3PUBF="+String.valueOf(V3PUBF));
		sb.append(",V3PUBT="+String.valueOf(V3PUBT));
		sb.append(",V3VFRT="+String.valueOf(V3VFRT));
		sb.append(",V3FRTP="+V3FRTP);
		sb.append(",V3WULC="+String.valueOf(V3WULC));
		sb.append(",V3WUCT="+V3WUCT);
		sb.append(",V3NDAC="+String.valueOf(V3NDAC));
		sb.append(",V3ONAF="+String.valueOf(V3ONAF));
		sb.append(",V3ACDM="+String.valueOf(V3ACDM));
		sb.append(",V3ACDF="+String.valueOf(V3ACDF));
		sb.append(",V3TUCA="+String.valueOf(V3TUCA));
		sb.append(",V3TTBD="+String.valueOf(V3TTBD));
		sb.append(",V3TLWP="+String.valueOf(V3TLWP));
		sb.append(",V3CNFR="+String.valueOf(V3CNFR));
		sb.append(",V3CFRT="+V3CFRT);
		sb.append(",V3CULC="+String.valueOf(V3CULC));
		sb.append(",V3CULT="+V3CULT);
		sb.append(",V3CPAL="+String.valueOf(V3CPAL));
		sb.append(",V3CPUT="+V3CPUT);
		sb.append(",V3CPFB="+String.valueOf(V3CPFB));
		sb.append(",V3CPTB="+String.valueOf(V3CPTB));
		sb.append(",V3CTLN="+String.valueOf(V3CTLN));
		sb.append(",V3CCTT="+String.valueOf(V3CCTT));
		sb.append(",V3CTOC="+String.valueOf(V3CTOC));
		sb.append(",V3CTCK="+String.valueOf(V3CTCK));
		sb.append(",V3CTNW="+String.valueOf(V3CTNW));
		sb.append(",V3CTNK="+String.valueOf(V3CTNK));
		sb.append(",V3CTGW="+String.valueOf(V3CTGW));
		sb.append(",V3CTGK="+String.valueOf(V3CTGK));
		sb.append(",V3CTPL="+String.valueOf(V3CTPL));
		sb.append(",V3CTVU="+String.valueOf(V3CTVU));
		sb.append(",V3CTBC="+String.valueOf(V3CTBC));
		sb.append(",V3CTFC="+String.valueOf(V3CTFC));
		sb.append(",V3CTAC="+String.valueOf(V3CTAC));
		sb.append(",V3CTPA="+String.valueOf(V3CTPA));
		sb.append(",V3CNAC="+String.valueOf(V3CNAC));
		sb.append(",V3CNAF="+String.valueOf(V3CNAF));
		sb.append(",V3CACM="+String.valueOf(V3CACM));
		sb.append(",V3CACF="+String.valueOf(V3CACF));
		sb.append(",V3CTUC="+String.valueOf(V3CTUC));
		sb.append(",V3CTBD="+String.valueOf(V3CTBD));
		sb.append(",V3CTWP="+String.valueOf(V3CTWP));
		sb.append(",V3POCB="+V3POCB);
		sb.append(",V3POCN="+V3POCN);
		sb.append(",V3POCM="+V3POCM);
		sb.append(",V3TNRL="+String.valueOf(V3TNRL));
		sb.append(",V3CSTR="+String.valueOf(V3CSTR));
		sb.append(",V3TRCB="+String.valueOf(V3TRCB));
		sb.append(",V3TRBK="+String.valueOf(V3TRBK));
		sb.append(",V3TRNW="+String.valueOf(V3TRNW));
		sb.append(",V3TRNK="+String.valueOf(V3TRNK));
		sb.append(",V3TRGW="+String.valueOf(V3TRGW));
		sb.append(",V3TRGK="+String.valueOf(V3TRGK));
		sb.append(",V3TRPS="+String.valueOf(V3TRPS));
		sb.append(",V3TRVP="+String.valueOf(V3TRVP));
		sb.append(",V3TRVU="+String.valueOf(V3TRVU));
		sb.append(",V3TRFC="+String.valueOf(V3TRFC));
		sb.append(",V3TRFR="+String.valueOf(V3TRFR));
		sb.append(",V3TRDA="+String.valueOf(V3TRDA));
		sb.append(",V3TRBD="+String.valueOf(V3TRBD));
		sb.append(",V3TRPA="+String.valueOf(V3TRPA));
		sb.append(",V3TRUC="+String.valueOf(V3TRUC));
		sb.append(",V3PMPS="+V3PMPS);
		sb.append(",V3PFNA="+String.valueOf(V3PFNA));
		sb.append(",V3UNAM="+String.valueOf(V3UNAM));
		sb.append(",V3MAVC="+String.valueOf(V3MAVC));
		sb.append(",V3MMTS="+V3MMTS);
		sb.append(",V3MVCS="+V3MVCS);
		sb.append(",V3MPDS="+V3MPDS);
		sb.append(",V3MPDH="+V3MPDH);
		sb.append(",V3MPDL="+String.valueOf(V3MPDL));
		sb.append(",V3MQDH="+V3MQDH);
		sb.append(",V3MQDL="+String.valueOf(V3MQDL));
		sb.append(",V3MPDT="+String.valueOf(V3MPDT));
		sb.append(",V3MCSD="+String.valueOf(V3MCSD));
		sb.append(",V3MVCA="+String.valueOf(V3MVCA));
		sb.append(",V3MERV="+String.valueOf(V3MERV));
		sb.append(",V3MINV="+V3MINV);
		sb.append(",V3MIDT="+String.valueOf(V3MIDT));
		sb.append(",V3MVIF="+V3MVIF);
		sb.append(",V3MVAR="+String.valueOf(V3MVAR));
		sb.append(",V3MPDA="+String.valueOf(V3MPDA));
		sb.append(",V3PPFS="+V3PPFS);
		sb.append(",V3FPNA="+String.valueOf(V3FPNA));
		sb.append(",V3UFPA="+String.valueOf(V3UFPA));
		sb.append(",V3FAVC="+String.valueOf(V3FAVC));
		sb.append(",V3FMTS="+V3FMTS);
		sb.append(",V3FVCS="+V3FVCS);
		sb.append(",V3FPDS="+V3FPDS);
		sb.append(",V3FCDH="+V3FCDH);
		sb.append(",V3FCDL="+String.valueOf(V3FCDL));
		sb.append(",V3FPDT="+String.valueOf(V3FPDT));
		sb.append(",V3RSVN="+V3RSVN);
		sb.append(",V3FTCS="+V3FTCS);
		sb.append(",V3FCAD="+String.valueOf(V3FCAD));
		sb.append(",V3FVAR="+String.valueOf(V3FVAR));
		sb.append(",V3FVCH="+String.valueOf(V3FVCH));
		sb.append(",V3FTRV="+String.valueOf(V3FTRV));
		sb.append(",V3FINV="+V3FINV);
		sb.append(",V3FIDT="+String.valueOf(V3FIDT));
		sb.append(",V3FVIF="+V3FVIF);
		sb.append(",V3TVSQ="+String.valueOf(V3TVSQ));
		sb.append(",V3TKSQ="+String.valueOf(V3TKSQ));
		sb.append(",V3TDAQ="+String.valueOf(V3TDAQ));
		sb.append(",V3NDAF="+String.valueOf(V3NDAF));
		sb.append(",V3FPDA="+String.valueOf(V3FPDA));
		sb.append(",V3CUNO="+V3CUNO);
		sb.append(",V3ORNO="+String.valueOf(V3ORNO));
		sb.append(",V3SHNM="+V3SHNM);
		sb.append(",V3SADD="+V3SADD);
		sb.append(",V3SHNO="+V3SHNO);
		sb.append(",V3PONU="+V3PONU);
		sb.append(",V3RERF="+V3RERF);
		sb.append(",V3RECO="+V3RECO);
		sb.append(",V3FSCF="+V3FSCF);
		sb.append(",V3POEO="+String.valueOf(V3POEO));
		sb.append(",V3POVO="+V3POVO);
		sb.append(",V3PBSC="+V3PBSC);
		sb.append(",V3RECF="+V3RECF);
		sb.append(",V3PSTB="+String.valueOf(V3PSTB));
		sb.append(",V3TMSN="+V3TMSN);
		sb.append(",V3XMFL="+V3XMFL);
		sb.append(",V3XMDT="+String.valueOf(V3XMDT));
		sb.append(",V3XMTM="+String.valueOf(V3XMTM));
		sb.append(",V3ERRF="+V3ERRF);
		sb.append(",V3STKI="+V3STKI);
		sb.append(",V3COTM="+String.valueOf(V3COTM));
		sb.append(",V3RPRC="+V3RPRC);
		sb.append(",V3FIMI="+V3FIMI);
		sb.append(",V3TXDT="+String.valueOf(V3TXDT));
		sb.append(",V3TXTM="+String.valueOf(V3TXTM));
		sb.append(",V3POIF="+V3POIF);
		sb.append(",V3COD1="+V3COD1);
		sb.append(",V3SNNO="+V3SNNO);
		sb.append(",V3SHID="+V3SHID);
		sb.append(",V3FRTI="+V3FRTI);
		sb.append(",V3OPO="+V3OPO);
		sb.append(",V3EADT="+String.valueOf(V3EADT));
		sb.append(",V3EATM="+String.valueOf(V3EATM));
		sb.append(",V3EAID="+V3EAID);
		sb.append(",V3MODT="+String.valueOf(V3MODT));
		sb.append(",V3MOTM="+String.valueOf(V3MOTM));
		sb.append(",V3MOID="+V3MOID);
		sb.append(",V3MOPG="+V3MOPG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(V3PO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PO);
            			}
            		
        			sb.append("|");
        		
        				if(V3OWID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OWID);
            			}
            		
        			sb.append("|");
        		
        				if(V3ARCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ARCO);
            			}
            		
        			sb.append("|");
        		
        				if(V3ROSQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ROSQ);
            			}
            		
        			sb.append("|");
        		
        				if(V3SBNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SBNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3BUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3BUYR);
            			}
            		
        			sb.append("|");
        		
        				if(V3OCNB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OCNB);
            			}
            		
        			sb.append("|");
        		
        				if(V3OFCI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OFCI);
            			}
            		
        			sb.append("|");
        		
        				if(V3BYGP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3BYGP);
            			}
            		
        			sb.append("|");
        		
        				if(V3POST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POST);
            			}
            		
        			sb.append("|");
        		
        				if(V3POSS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POSS);
            			}
            		
        			sb.append("|");
        		
        				if(V3INUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3INUS);
            			}
            		
        			sb.append("|");
        		
        				if(V3WCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WCCD);
            			}
            		
        			sb.append("|");
        		
        				if(V3VLPF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VLPF);
            			}
            		
        			sb.append("|");
        		
        				if(V3POTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POTP);
            			}
            		
        			sb.append("|");
        		
        				if(V3DMST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3DMST);
            			}
            		
        			sb.append("|");
        		
        				if(V3BORF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3BORF);
            			}
            		
        			sb.append("|");
        		
        				if(V3PBVB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PBVB);
            			}
            		
        			sb.append("|");
        		
        				if(V3FICS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FICS);
            			}
            		
        			sb.append("|");
        		
        				if(V3SCRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SCRF);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFST);
            			}
            		
        			sb.append("|");
        		
        				if(V3VLPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VLPA);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFRF);
            			}
            		
        			sb.append("|");
        		
        				if(V3WHST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WHST);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCH);
            			}
            		
        			sb.append("|");
        		
        				if(V3PPOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PPOP);
            			}
            		
        			sb.append("|");
        		
        				if(V3UPLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3UPLT);
            			}
            		
        			sb.append("|");
        		
        				if(V3PCFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PCFL);
            			}
            		
        			sb.append("|");
        		
        				if(V3PAOF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PAOF);
            			}
            		
        			sb.append("|");
        		
        				if(V3FROF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FROF);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFTP);
            			}
            		
        			sb.append("|");
        		
        				if(V3CARI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CARI);
            			}
            		
        			sb.append("|");
        		
        				if(V3RPFF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RPFF);
            			}
            		
        			sb.append("|");
        		
        				if(V3PFIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PFIP);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRMT);
            			}
            		
        			sb.append("|");
        		
        				if(V3RTVF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RTVF);
            			}
            		
        			sb.append("|");
        		
        				if(V3WHDR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WHDR);
            			}
            		
        			sb.append("|");
        		
        				if(V3JBNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3JBNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3PVND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PVND);
            			}
            		
        			sb.append("|");
        		
        				if(V3VNBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VNBR);
            			}
            		
        			sb.append("|");
        		
        				if(V3ADCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ADCD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PFRV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PFRV);
            			}
            		
        			sb.append("|");
        		
        				if(V3TERM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TERM);
            			}
            		
        			sb.append("|");
        		
        				if(V3FTRM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FTRM);
            			}
            		
        			sb.append("|");
        		
        				if(V3CNFT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CNFT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFVT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFVT);
            			}
            		
        			sb.append("|");
        		
        				if(V3TMOV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TMOV);
            			}
            		
        			sb.append("|");
        		
        				if(V3POPW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POPW);
            			}
            		
        			sb.append("|");
        		
        				if(V3LCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3LCN);
            			}
            		
        			sb.append("|");
        		
        				if(V3PO1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PO1);
            			}
            		
        			sb.append("|");
        		
        				if(V3ARDE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ARDE);
            			}
            		
        			sb.append("|");
        		
        				if(V3ARBD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ARBD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PCRD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PCRD);
            			}
            		
        			sb.append("|");
        		
        				if(V3OCDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OCDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3PCSD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PCSD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PSRD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PSRD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PSRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PSRT);
            			}
            		
        			sb.append("|");
        		
        				if(V3SHDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SHDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CSPD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CSPD);
            			}
            		
        			sb.append("|");
        		
        				if(V3ORDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ORDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CLOD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CLOD);
            			}
            		
        			sb.append("|");
        		
        				if(V3NDDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3NDDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CLDN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CLDN);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3PDTA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PDTA);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPAD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PDTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PDTR);
            			}
            		
        			sb.append("|");
        		
        				if(V3CLRD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CLRD);
            			}
            		
        			sb.append("|");
        		
        				if(V3POLC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POLC);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCD);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTL1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTL1);
            			}
            		
        			sb.append("|");
        		
        				if(V3CSTT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CSTT);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTOC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTOC);
            			}
            		
        			sb.append("|");
        		
        				if(V3TOCK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TOCK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTNW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTNW);
            			}
            		
        			sb.append("|");
        		
        				if(V3TNWK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TNWK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTGW);
            			}
            		
        			sb.append("|");
        		
        				if(V3TGWK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TGWK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTPL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTPL);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTVU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTVU);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTFB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTFB);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTFR);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTAP);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTPU);
            			}
            		
        			sb.append("|");
        		
        				if(V3VPUA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VPUA);
            			}
            		
        			sb.append("|");
        		
        				if(V3PALT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PALT);
            			}
            		
        			sb.append("|");
        		
        				if(V3PUBF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PUBF);
            			}
            		
        			sb.append("|");
        		
        				if(V3PUBT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PUBT);
            			}
            		
        			sb.append("|");
        		
        				if(V3VFRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VFRT);
            			}
            		
        			sb.append("|");
        		
        				if(V3FRTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FRTP);
            			}
            		
        			sb.append("|");
        		
        				if(V3WULC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WULC);
            			}
            		
        			sb.append("|");
        		
        				if(V3WUCT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WUCT);
            			}
            		
        			sb.append("|");
        		
        				if(V3NDAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3NDAC);
            			}
            		
        			sb.append("|");
        		
        				if(V3ONAF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ONAF);
            			}
            		
        			sb.append("|");
        		
        				if(V3ACDM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ACDM);
            			}
            		
        			sb.append("|");
        		
        				if(V3ACDF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ACDF);
            			}
            		
        			sb.append("|");
        		
        				if(V3TUCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TUCA);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTBD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTBD);
            			}
            		
        			sb.append("|");
        		
        				if(V3TLWP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TLWP);
            			}
            		
        			sb.append("|");
        		
        				if(V3CNFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CNFR);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFRT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CULC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CULC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CULT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CULT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPAL);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPUT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPUT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPFB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPFB);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPTB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPTB);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTLN);
            			}
            		
        			sb.append("|");
        		
        				if(V3CCTT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CCTT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTOC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTOC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTCK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTCK);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTNW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTNW);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTNK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTNK);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTGW);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTGK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTGK);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTPL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTPL);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTVU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTVU);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTBC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTBC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTFC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTFC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTAC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTPA);
            			}
            		
        			sb.append("|");
        		
        				if(V3CNAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CNAC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CNAF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CNAF);
            			}
            		
        			sb.append("|");
        		
        				if(V3CACM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CACM);
            			}
            		
        			sb.append("|");
        		
        				if(V3CACF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CACF);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTUC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTUC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTBD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTBD);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTWP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTWP);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCB);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCN);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCM);
            			}
            		
        			sb.append("|");
        		
        				if(V3TNRL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TNRL);
            			}
            		
        			sb.append("|");
        		
        				if(V3CSTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CSTR);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRCB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRCB);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRBK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRBK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRNW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRNW);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRNK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRNK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRGW);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRGK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRGK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRPS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRPS);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRVP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRVP);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRVU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRVU);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRFC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRFC);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRFR);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRDA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRDA);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRBD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRBD);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRPA);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRUC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRUC);
            			}
            		
        			sb.append("|");
        		
        				if(V3PMPS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PMPS);
            			}
            		
        			sb.append("|");
        		
        				if(V3PFNA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PFNA);
            			}
            		
        			sb.append("|");
        		
        				if(V3UNAM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3UNAM);
            			}
            		
        			sb.append("|");
        		
        				if(V3MAVC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MAVC);
            			}
            		
        			sb.append("|");
        		
        				if(V3MMTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MMTS);
            			}
            		
        			sb.append("|");
        		
        				if(V3MVCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MVCS);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDS);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDH);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDL);
            			}
            		
        			sb.append("|");
        		
        				if(V3MQDH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MQDH);
            			}
            		
        			sb.append("|");
        		
        				if(V3MQDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MQDL);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3MCSD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MCSD);
            			}
            		
        			sb.append("|");
        		
        				if(V3MVCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MVCA);
            			}
            		
        			sb.append("|");
        		
        				if(V3MERV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MERV);
            			}
            		
        			sb.append("|");
        		
        				if(V3MINV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MINV);
            			}
            		
        			sb.append("|");
        		
        				if(V3MIDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MIDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3MVIF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MVIF);
            			}
            		
        			sb.append("|");
        		
        				if(V3MVAR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MVAR);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDA);
            			}
            		
        			sb.append("|");
        		
        				if(V3PPFS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PPFS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FPNA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FPNA);
            			}
            		
        			sb.append("|");
        		
        				if(V3UFPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3UFPA);
            			}
            		
        			sb.append("|");
        		
        				if(V3FAVC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FAVC);
            			}
            		
        			sb.append("|");
        		
        				if(V3FMTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FMTS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FVCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FVCS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FPDS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FPDS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FCDH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FCDH);
            			}
            		
        			sb.append("|");
        		
        				if(V3FCDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FCDL);
            			}
            		
        			sb.append("|");
        		
        				if(V3FPDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FPDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3RSVN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RSVN);
            			}
            		
        			sb.append("|");
        		
        				if(V3FTCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FTCS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FCAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FCAD);
            			}
            		
        			sb.append("|");
        		
        				if(V3FVAR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FVAR);
            			}
            		
        			sb.append("|");
        		
        				if(V3FVCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FVCH);
            			}
            		
        			sb.append("|");
        		
        				if(V3FTRV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FTRV);
            			}
            		
        			sb.append("|");
        		
        				if(V3FINV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FINV);
            			}
            		
        			sb.append("|");
        		
        				if(V3FIDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FIDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3FVIF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FVIF);
            			}
            		
        			sb.append("|");
        		
        				if(V3TVSQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TVSQ);
            			}
            		
        			sb.append("|");
        		
        				if(V3TKSQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TKSQ);
            			}
            		
        			sb.append("|");
        		
        				if(V3TDAQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TDAQ);
            			}
            		
        			sb.append("|");
        		
        				if(V3NDAF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3NDAF);
            			}
            		
        			sb.append("|");
        		
        				if(V3FPDA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FPDA);
            			}
            		
        			sb.append("|");
        		
        				if(V3CUNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CUNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3ORNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ORNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3SHNM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SHNM);
            			}
            		
        			sb.append("|");
        		
        				if(V3SADD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SADD);
            			}
            		
        			sb.append("|");
        		
        				if(V3SHNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SHNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3PONU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PONU);
            			}
            		
        			sb.append("|");
        		
        				if(V3RERF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RERF);
            			}
            		
        			sb.append("|");
        		
        				if(V3RECO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RECO);
            			}
            		
        			sb.append("|");
        		
        				if(V3FSCF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FSCF);
            			}
            		
        			sb.append("|");
        		
        				if(V3POEO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POEO);
            			}
            		
        			sb.append("|");
        		
        				if(V3POVO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POVO);
            			}
            		
        			sb.append("|");
        		
        				if(V3PBSC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PBSC);
            			}
            		
        			sb.append("|");
        		
        				if(V3RECF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RECF);
            			}
            		
        			sb.append("|");
        		
        				if(V3PSTB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PSTB);
            			}
            		
        			sb.append("|");
        		
        				if(V3TMSN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TMSN);
            			}
            		
        			sb.append("|");
        		
        				if(V3XMFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3XMFL);
            			}
            		
        			sb.append("|");
        		
        				if(V3XMDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3XMDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3XMTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3XMTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3ERRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ERRF);
            			}
            		
        			sb.append("|");
        		
        				if(V3STKI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3STKI);
            			}
            		
        			sb.append("|");
        		
        				if(V3COTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3COTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3RPRC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RPRC);
            			}
            		
        			sb.append("|");
        		
        				if(V3FIMI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FIMI);
            			}
            		
        			sb.append("|");
        		
        				if(V3TXDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TXDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3TXTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TXTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3POIF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POIF);
            			}
            		
        			sb.append("|");
        		
        				if(V3COD1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3COD1);
            			}
            		
        			sb.append("|");
        		
        				if(V3SNNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SNNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3SHID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SHID);
            			}
            		
        			sb.append("|");
        		
        				if(V3FRTI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FRTI);
            			}
            		
        			sb.append("|");
        		
        				if(V3OPO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OPO);
            			}
            		
        			sb.append("|");
        		
        				if(V3EADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3EADT);
            			}
            		
        			sb.append("|");
        		
        				if(V3EATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3EATM);
            			}
            		
        			sb.append("|");
        		
        				if(V3EAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3EAID);
            			}
            		
        			sb.append("|");
        		
        				if(V3MODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MODT);
            			}
            		
        			sb.append("|");
        		
        				if(V3MOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MOTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3MOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MOID);
            			}
            		
        			sb.append("|");
        		
        				if(V3MOPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MOPG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
PURCHASE_ORDER_HEADER_2_UPDATEStruct PURCHASE_ORDER_HEADER_2_UPDATE = new PURCHASE_ORDER_HEADER_2_UPDATEStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PURCHASE_ORDER_HEADER_2_UPDATE");
					}
				
		int tos_count_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_1 = new StringBuilder();
                    log4jParamters_tDBOutput_1.append("Parameters:");
                            log4jParamters_tDBOutput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SCHEMA_DB" + " = " + "context.GIM_Schema_PO");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE" + " = " + "\"PURCHASE_ORDER\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DATA_ACTION" + " = " + "UPDATE");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + (log4jParamters_tDBOutput_1) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_1().limitLog4jByte();
            }





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("PURCHASE_ORDER");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("PURCHASE_ORDER");
}

        int updateKeyCount_tDBOutput_1 = 2;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 203 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_1 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_1 = context.GIM_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection attempts to '")  + (url_tDBOutput_1)  + ("' with the username '")  + (dbUser_tDBOutput_1)  + ("'.") );
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to '")  + (url_tDBOutput_1)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_1.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_1 = 1;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"SMS_CONFIRMED_DATE\" = ?,\"VENDOR_CONFIRMED_SHIP_DATE\" = ?,\"SCHEDULED_PO_RECEIPT_TIMESTAMP\" = ?,\"ORIG_PICKUP_ALLOW_TYPE\" = ?,\"PICKUP_ALLOW_FROM_BRACKET\" = ?,\"ORIG_FREIGHT_RATE\" = ?,\"ORIG_FREIGHT_TYPE\" = ?,\"ORIG_MERCH_ALLOW_CHARGE\" = ?,\"ORIG_FREIGHT_ALLOW_CHARGE\" = ?,\"FREIGHT_ROUNDING_VARIANCE\" = ?,\"SHIP_WITH_NEXT_ORDER_IND\" = ?,\"CUST_REFERENCE_ORDER_NO\" = ?,\"OUTSIDE_WHSE_ID\" = ?,\"RECOMMENDED_ORDER_SEQ_NO\" = ?,\"SYSCO_BRACKET_NO\" = ?,\"BUYER_NO\" = ?,\"ORDER_GROUP\" = ?,\"BUYING_GROUP\" = ?,\"PO_PRIMARY_STATUS\" = ?,\"PO_SECONDARY_STATUS\" = ?,\"PO_IN_USE_FLAG\" = ?,\"WHSE_CHANGE_CODE\" = ?,\"PO_VALID_PRICING_FLAG\" = ?,\"PO_TYPE\" = ?,\"DEMAND_STATUS\" = ?,\"BACKORDER_FLAG\" = ?,\"PROC_BILLED_VENDOR_BILLED_FLAG\" = ?,\"FREIGHT_INTER_COMPANY_STMT_FLAG\" = ?,\"CONF_STATUS\" = ?,\"PO_VALID_PRICING_APPROVAL\" = ?,\"CONF_RECVD_FLAG\" = ?,\"WHSE_STATUS\" = ?,\"PO_CHANGED_FLAG\" = ?,\"PRINT_PRICE_ON_PO_FLAG\" = ?,\"UPDATE_LEAD_TIME_FLAG\" = ?,\"PRICE_CHANGE_FLAG\" = ?,\"CARRIER_ID\" = ?,\"REVISED_PROFORMA_FLAG\" = ?,\"PROFORMA_INPROCESS_FLAG\" = ?,\"TRANSMIT_TO\" = ?,\"RETRANSMIT_TO_VENDOR_FLAG\" = ?,\"JOB_NO\" = ?,\"PAY_TO_VENDOR_NO\" = ?,\"FREIGHT_VENDOR\" = ?,\"VENDOR_TERMS\" = ?,\"FREIGHT_VENDOR_TERMS\" = ?,\"CONFIRMED_TERMS\" = ?,\"CONFIRMED_FREIGHT_VENDOR_TERMS\" = ?,\"TERMS_OVERRIDE_FLAG\" = ?,\"PO_PLACED_WITH\" = ?,\"LOAD_CTRL_NO\" = ?,\"BUSINESS_DATE_ANTICIPATED_RECEIPT\" = ?,\"CALENDAR_DATE_ANTICIPATED_RECEIPT\" = ?,\"CALENDAR_VENDOR_CONF_RECEIPT\" = ?,\"BUSINESS_DATE_SHIP_PICKUP\" = ?,\"CALENDAR_DATE_SHIP_PICKUP\" = ?,\"BUSINESS_ORDER_DATE\" = ?,\"CALENDAR_ORDER_DATE\" = ?,\"BUSINESS_DATE_PO_NEEDED\" = ?,\"CALENDAR_DATE_PO_NEEDED\" = ?,\"PO_TRANSMISSION_TIMESTAMP\" = ?,\"BUSINESS_DATE_PO_ACCEPTED\" = ?,\"CALENDAR_DATE_PO_ACCEPTED\" = ?,\"BUSINESS_DATE_ACTUAL_RECEIPT\" = ?,\"CALENDAR_DATE_ACTUAL_RECEIPT\" = ?,\"CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE\" = ?,\"CALENDAR_VENDOR_CONF_DATE\" = ?,\"TOTAL_LINES\" = ?,\"TOTAL_CASES\" = ?,\"TOTAL_CUBE\" = ?,\"TOTAL_NET_WGT\" = ?,\"TOTAL_GROSS_WGT\" = ?,\"TOTAL_VENDOR_PALLETS\" = ?,\"TOTAL_VENDOR_UNITS\" = ?,\"TOTAL_FOB_COST\" = ?,\"TOTAL_FREIGHT_COST\" = ?,\"TOTAL_AP_COST\" = ?,\"TOTAL_PICKUP_ALLOW\" = ?,\"TOTAL_PICKUP_ALLOW_RATE\" = ?,\"PICKUP_ALLOW_TO_BRACKET\" = ?,\"WHSE_UNLOAD_CHARGE\" = ?,\"WHSE_UNLOAD_CHARGE_TYPE\" = ?,\"ORIG_NON_DIST_MERCH_ALLOW_CHARGE\" = ?,\"TOTAL_WHSE_PALLETS\" = ?,\"CONFIRMED_FREIGHT_RATE\" = ?,\"CONFIRMED_FREIGHT_RATE_TYPE\" = ?,\"CONFIRMED_UNLOADING_CHARGE\" = ?,\"CONFIRMED_UNLOADING_CHRG_TYPE\" = ?,\"CONFIRMED_PICKUP_ALLOW_RATE\" = ?,\"CONFIRMED_PICKUP_ALLOW_TYPE\" = ?,\"CONFIRMED_PICKUP_ALLOW_FROM_BRACKET\" = ?,\"CONFIRMED_PICKUP_ALLOW_TO_BRACKET\" = ?,\"CONFIRMED_TOTAL_LINES\" = ?,\"CONFIRMED_TOTA_CASES\" = ?,\"CONFIMRED_TOTAL_CUBE\" = ?,\"CONFIRMED_TOTAL_NET_WGT\" = ?,\"CONFIRMED_TOTAL_GROSS_WGT\" = ?,\"CONFIRMED_TOTAL_VENDOR_PALLETS\" = ?,\"CONFIRMED_TOTAL_VENDOR_UNITS\" = ?,\"CONFIRMED_TOTAL_FOB_COST\" = ?,\"CONFIRMED_TOTAL_FREIGHT_COST\" = ?,\"CONFIRMED_TOTAL_AP_COST\" = ?,\"CONFIRMED_TOTAL_PICKUP_ALLOW\" = ?,\"CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE\" = ?,\"CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE\" = ?,\"CONFIRMED_MERCH_ALLOW_CHARGE\" = ?,\"CONFIRMED_FREIGHT_ALLOW_CHARGE\" = ?,\"CONFIRMED_TOTAL_UNLOADING_CHARGE\" = ?,\"CONFIRMED_TOTAL_BRACKET_DIFF\" = ?,\"CONFIRMED_TOTAL_WHSE_PALLETS\" = ?,\"CONFIRMED_USER\" = ?,\"VENDOR_CONF_NO\" = ?,\"VENDOR_CONF_METHOD\" = ?,\"TOTAL_RECVD_LINES\" = ?,\"TOTAL_RECVD_CASES\" = ?,\"TOTAL_RECVD_CUBE\" = ?,\"TOTAL_RECVD_NET_WGT\" = ?,\"TOTAL_RECVD_GROSS_WGT\" = ?,\"TOTAL_RECVD_VENDOR_PALLETS\" = ?,\"TOTAL_RECVD_WHSE_PALLETS\" = ?,\"TOTAL_RECVD_VENDOR_UNITS\" = ?,\"TOTAL_RECVD_FOB_COST\" = ?,\"TOTAL_RECVD_FREIGHT_COST\" = ?,\"TOTAL_RECVD_AP_COST\" = ?,\"TOTAL_RECVD_BRACKET_DIFF\" = ?,\"TOTAL_RECVD_PICKUP_ALLOW\" = ?,\"TOTAL_RECVD_UNLOADING_CHARGE\" = ?,\"MERCH_PROFORMA_STATUS\" = ?,\"MERCH_PROFORMA_NET_AMT\" = ?,\"UNMATCHED_MERCH_PROFROMA_NET_AMT\" = ?,\"MERCH_AMT_TO_BE_VOUCH\" = ?,\"MERCH_MATCHED_STATUS\" = ?,\"MERCH_VOUCH_STATUS\" = ?,\"MERCH_PAID_STATUS\" = ?,\"MERCH_PRICE_DIFF_HEADER_STATUS\" = ?,\"MERCH_PRICE_DIFF_ERROR_LINE_COUNT\" = ?,\"MERCH_QTY_DIFF_HEADER_STATUS\" = ?,\"MERCH_QTY_DIFF_ERROR_LINE_COUNT\" = ?,\"MERCH_PAYMENT_DUE_DATE\" = ?,\"MERCH_CASH_DISC\" = ?,\"MERCH_VOUCH_AMT\" = ?,\"MERCH_ROUNDING_VAR\" = ?,\"MERCH_VENDOR_INTERCOM_BILLED_FLAG\" = ?,\"MERCH_VAR_AMT\" = ?,\"MERCH_FREIGHT_AMT\" = ?,\"FREIGHT_PROFORMA_NET_AMT\" = ?,\"UNMATCHED_FREIGHT_PROFORMA_NET_AMT\" = ?,\"FREIGHT_AMT_TO_BE_VOUCH\" = ?,\"FREIGHT_MATCHED_STATUS\" = ?,\"FREIGHT_VOUCH_STATUS\" = ?,\"FREIGHT_PAID_STATUS\" = ?,\"FREIGHT_DIFF_HEADER_STATUS\" = ?,\"FREIGHT_PAYMENT_DUE_DATE\" = ?,\"FREIGHT_CLAIM_STATUS\" = ?,\"FREIGHT_CASH_DISC\" = ?,\"FREIGHT_VARIANCE_AMT\" = ?,\"FREIGHT_VOUCH_AMT\" = ?,\"FREIGHT_INV_NO\" = ?,\"FREIGHT_INV_DATE\" = ?,\"FREIGHT_VENDOR_INTERCOM_BILLED_FLAG\" = ?,\"TOTAL_VENDOR_SHORT_QTY\" = ?,\"TOTAL_CARRIER_SHORT_QTY\" = ?,\"TOTAL_DAMAGED_ACCEPTED_QTY\" = ?,\"FREIGHT_PAID_AMOUNT\" = ?,\"SHIP_TO_CUST\" = ?,\"CUST_ORDER_NO\" = ?,\"SHIP_FROM_NAME\" = ?,\"SHIPPING_ADDRESS_ID\" = ?,\"RESERVED_RE_RECOMMEND_FLAG\" = ?,\"RECOMMENDED_ORDER_FLAG\" = ?,\"FAILED_SCORECARD_FLAG\" = ?,\"VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG\" = ?,\"PRICE_BRACKET_SOURCE_CODE\" = ?,\"SHORT_PERCENT_TO_BACKORDER\" = ?,\"SECONDARY_PO_TYPE\" = ?,\"TRANSMIT_FLAG\" = ?,\"TRANSMIT_TIMESTAMP\" = ?,\"PO_ERROR_IND\" = ?,\"STOCK_IND\" = ?,\"PO_CLOSE_TIME\" = ?,\"REPLENISHMENT_SYSTEM\" = ?,\"SHIPMENT_NOTICE_NO\" = ?,\"FREIGHT_PROFORMA_STATUS\" = ?,\"SHIPMENT_ID\" = ?,\"FREIGHT_PROCESS_FLAG\" = ?,\"ORIG_PURCHASE_ORDER_NO\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"IS_ACTIVE\" = ?,\"V3PF_SVOP\" = ?,\"CONFERENCE_TYPE\" = ?,\"NEXT_CONF_RECVD_FLAG\" = ?,\"UPDATED_USER_ID\" = ?,\"UPDATED_PROGRAM_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"PICKUP_ALLOWANCE_OVERRIDE_FLAG\" = ? WHERE \"PURCHASE_ORDER_NO\" = ? AND \"SITE_ID\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_4 = new StringBuilder();
                    log4jParamters_tMap_4.append("Parameters:");
                            log4jParamters_tMap_4.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + (log4jParamters_tMap_4) );
                    } 
                } 
            new BytesLimit65535_tMap_4().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row1_tMap_4 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	String V3OCDT;
	String V3PCSD;
	String V3ARDE;
	String V3ARBD;
	String V3PCRD;
	String V3SHDT;
	String V3CSPD;
	String V3ORDT;
	String V3CLOD;
	String V3NDDT;
	String V3CLDN;
	String V3PDTA;
	String V3CPAD;
	String V3PDTR;
	String V3CLRD;
	String V3POLC;
	String V3POCD;
	String V3MPDT;
	String V3FPDT;
	String V3FIDT;
	String SCHEDULED_PO_RECEIPT_TIMESTAMP;
	String PO_TRANSMISSION_TIMESTAMP;
	String TRANSMIT_TIMESTAMP;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
	String PO_CLOSE_TIME;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_PURCHASE_ORDER_HEADER_2_UPDATE_tMap_4 = 0;
				
PURCHASE_ORDER_HEADER_2_UPDATEStruct PURCHASE_ORDER_HEADER_2_UPDATE_tmp = new PURCHASE_ORDER_HEADER_2_UPDATEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"IMHAV3PF\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"SELECT    IMHAV3PF.V3PO,    IMHAV3PF.V3OWID,    IMHAV3PF.V3ARCO,    IMHAV3PF.V3ROSQ,    IMHAV3PF.V3SBNO,    IMHAV3PF.V3BUYR,    IMHAV3PF.V3OCNB,    IMHAV3PF.V3OFCI,    IMHAV3PF.V3BYGP,    IMHAV3PF.V3POST,    IMHAV3PF.V3POSS,    IMHAV3PF.V3INUS,    IMHAV3PF.V3WCCD,    IMHAV3PF.V3VLPF,    IMHAV3PF.V3POTP,    IMHAV3PF.V3DMST,    IMHAV3PF.V3BORF,    IMHAV3PF.V3PBVB,    IMHAV3PF.V3FICS,    IMHAV3PF.V3SCRF,    IMHAV3PF.V3CFST,    IMHAV3PF.V3VLPA,    IMHAV3PF.V3CFRF,    IMHAV3PF.V3WHST,    IMHAV3PF.V3POCH,    IMHAV3PF.V3PPOP,    IMHAV3PF.V3UPLT,    IMHAV3PF.V3PCFL,    IMHAV3PF.V3PAOF,    IMHAV3PF.V3FROF,    IMHAV3PF.V3CFTP,    IMHAV3PF.V3CARI,    IMHAV3PF.V3RPFF,    IMHAV3PF.V3PFIP,    IMHAV3PF.V3TRMT,    IMHAV3PF.V3RTVF,    IMHAV3PF.V3WHDR,    IMHAV3PF.V3JBNO,    IMHAV3PF.V3PVND,    IMHAV3PF.V3VNBR,    IMHAV3PF.V3ADCD,    IMHAV3PF.V3PFRV,    IMHAV3PF.V3TERM,    IMHAV3PF.V3FTRM,    IMHAV3PF.V3CNFT,    IMHAV3PF.V3CFVT,    IMHAV3PF.V3TMOV,    IMHAV3PF.V3POPW,    IMHAV3PF.V3LCN,    IMHAV3PF.\\\"V3PO#\\\",    IMHAV3PF.V3ARDE,    IMHAV3PF.V3ARBD,    IMHAV3PF.V3PCRD,    IMHAV3PF.V3OCDT,    IMHAV3PF.V3PCSD,    IMHAV3PF.V3PSRD,    IMHAV3PF.V3PSRT,    IMHAV3PF.V3SHDT,    IMHAV3PF.V3CSPD,    IMHAV3PF.V3ORDT,    IMHAV3PF.V3CLOD,    IMHAV3PF.V3NDDT,    IMHAV3PF.V3CLDN,    IMHAV3PF.V3TRDT,    IMHAV3PF.V3TRTM,    IMHAV3PF.V3PDTA,    IMHAV3PF.V3CPAD,    IMHAV3PF.V3PDTR,    IMHAV3PF.V3CLRD,    IMHAV3PF.V3POLC,    IMHAV3PF.V3POCD,    IMHAV3PF.V3TTL1,    IMHAV3PF.V3CSTT,    IMHAV3PF.V3TTOC,    IMHAV3PF.V3TOCK,    IMHAV3PF.V3TTNW,    IMHAV3PF.V3TNWK,    IMHAV3PF.V3TTGW,    IMHAV3PF.V3TGWK,    IMHAV3PF.V3TTPL,    IMHAV3PF.V3TTVU,    IMHAV3PF.V3TTFB,    IMHAV3PF.V3TTFR,    IMHAV3PF.V3TTAP,    IMHAV3PF.V3TTPU,    IMHAV3PF.V3VPUA,    IMHAV3PF.V3PALT,    IMHAV3PF.V3PUBF,    IMHAV3PF.V3PUBT,    IMHAV3PF.V3VFRT,    IMHAV3PF.V3FRTP,    IMHAV3PF.V3WULC,    IMHAV3PF.V3WUCT,    IMHAV3PF.V3NDAC,    IMHAV3PF.V3ONAF,    IMHAV3PF.V3ACDM,    IMHAV3PF.V3ACDF,    IMHAV3PF.V3TUCA,    IMHAV3PF.V3TTBD,    IMHAV3PF.V3TLWP,    IMHAV3PF.V3CNFR,    IMHAV3PF.V3CFRT,    IMHAV3PF.V3CULC,    IMHAV3PF.V3CULT,    IMHAV3PF.V3CPAL,    IMHAV3PF.V3CPUT,    IMHAV3PF.V3CPFB,    IMHAV3PF.V3CPTB,    IMHAV3PF.V3CTLN,    IMHAV3PF.V3CCTT,    IMHAV3PF.V3CTOC,    IMHAV3PF.V3CTCK,    IMHAV3PF.V3CTNW,    IMHAV3PF.V3CTNK,    IMHAV3PF.V3CTGW,    IMHAV3PF.V3CTGK,    IMHAV3PF.V3CTPL,    IMHAV3PF.V3CTVU,    IMHAV3PF.V3CTBC,    IMHAV3PF.V3CTFC,    IMHAV3PF.V3CTAC,    IMHAV3PF.V3CTPA,    IMHAV3PF.V3CNAC,    IMHAV3PF.V3CNAF,    IMHAV3PF.V3CACM,    IMHAV3PF.V3CACF,    IMHAV3PF.V3CTUC,    IMHAV3PF.V3CTBD,    IMHAV3PF.V3CTWP,    IMHAV3PF.V3POCB,    IMHAV3PF.V3POCN,    IMHAV3PF.V3POCM,    IMHAV3PF.V3TNRL,    IMHAV3PF.V3CSTR,    IMHAV3PF.V3TRCB,    IMHAV3PF.V3TRBK,    IMHAV3PF.V3TRNW,    IMHAV3PF.V3TRNK,    IMHAV3PF.V3TRGW,    IMHAV3PF.V3TRGK,    IMHAV3PF.V3TRPS,    IMHAV3PF.V3TRVP,    IMHAV3PF.V3TRVU,    IMHAV3PF.V3TRFC,    IMHAV3PF.V3TRFR,    IMHAV3PF.V3TRDA,    IMHAV3PF.V3TRBD,    IMHAV3PF.V3TRPA,    IMHAV3PF.V3TRUC,    IMHAV3PF.V3PMPS,    IMHAV3PF.V3PFNA,    IMHAV3PF.V3UNAM,    IMHAV3PF.V3MAVC,    IMHAV3PF.V3MMTS,    IMHAV3PF.V3MVCS,    IMHAV3PF.V3MPDS,    IMHAV3PF.V3MPDH,    IMHAV3PF.V3MPDL,    IMHAV3PF.V3MQDH,    IMHAV3PF.V3MQDL,    IMHAV3PF.V3MPDT,    IMHAV3PF.V3MCSD,    IMHAV3PF.V3MVCA,    IMHAV3PF.V3MERV,    IMHAV3PF.V3MINV,    IMHAV3PF.V3MIDT,    IMHAV3PF.V3MVIF,    IMHAV3PF.V3MVAR,    IMHAV3PF.V3MPDA,    IMHAV3PF.V3PPFS,    IMHAV3PF.V3FPNA,    IMHAV3PF.V3UFPA,    IMHAV3PF.V3FAVC,    IMHAV3PF.V3FMTS,    IMHAV3PF.V3FVCS,    IMHAV3PF.V3FPDS,    IMHAV3PF.V3FCDH,    IMHAV3PF.V3FCDL,    IMHAV3PF.V3FPDT,    IMHAV3PF.V3RSVN,    IMHAV3PF.V3FTCS,    IMHAV3PF.V3FCAD,    IMHAV3PF.V3FVAR,    IMHAV3PF.V3FVCH,    IMHAV3PF.V3FTRV,    IMHAV3PF.V3FINV,    IMHAV3PF.V3FIDT,    IMHAV3PF.V3FVIF,    IMHAV3PF.V3TVSQ,    IMHAV3PF.V3TKSQ,    IMHAV3PF.V3TDAQ,    IMHAV3PF.V3NDAF,    IMHAV3PF.V3FPDA,    IMHAV3PF.V3CUNO,    IMHAV3PF.V3ORNO,    IMHAV3PF.V3SHNM,    IMHAV3PF.V3SADD,    IMHAV3PF.V3SHNO,    IMHAV3PF.V3PONU,    IMHAV3PF.V3RERF,    IMHAV3PF.V3RECO,    IMHAV3PF.V3FSCF,    IMHAV3PF.V3POEO,    IMHAV3PF.V3POVO,    IMHAV3PF.V3PBSC,    IMHAV3PF.V3RECF,    IMHAV3PF.V3PSTB,    IMHAV3PF.V3TMSN,    IMHAV3PF.V3XMFL,    IMHAV3PF.V3XMDT,    IMHAV3PF.V3XMTM,    IMHAV3PF.V3ERRF,    IMHAV3PF.V3STKI,    IMHAV3PF.V3COTM,    IMHAV3PF.V3RPRC,    IMHAV3PF.V3FIMI,    IMHAV3PF.V3TXDT,    IMHAV3PF.V3TXTM,    IMHAV3PF.V3POIF,    IMHAV3PF.V3COD1,    IMHAV3PF.V3SNNO,    IMHAV3PF.V3SHID,    IMHAV3PF.V3FRTI,    IMHAV3PF.V3OPO,    IMHAV3PF.V3EADT,    IMHAV3PF.V3EATM,    IMHAV3PF.V3EAID,    IMHAV3PF.V3MODT,    IMHAV3PF.V3MOTM,    IMHAV3PF.V3MOID,    IMHAV3PF.V3MOPG FROM IMHAV3PF ORDER BY IMHAV3PF.V3EADT DESC\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.SUS_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_1 - Driver ClassName: "+driverClass_tDBInput_1+".");
			
	    		log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '" + dbUser_tDBInput_1 + "'.");
			
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
	    		log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  IMHAV3PF.V3PO, \n  IMHAV3PF.V3OWID, \n  IMHAV3PF.V3ARCO, \n  IMHAV3PF.V3ROSQ, \n  IMHAV3PF.V3SBNO, \n  IMHAV3PF.V3"
+"BUYR, \n  IMHAV3PF.V3OCNB, \n  IMHAV3PF.V3OFCI, \n  IMHAV3PF.V3BYGP, \n  IMHAV3PF.V3POST, \n  IMHAV3PF.V3POSS, \n  IMHAV3PF.V3"
+"INUS, \n  IMHAV3PF.V3WCCD, \n  IMHAV3PF.V3VLPF, \n  IMHAV3PF.V3POTP, \n  IMHAV3PF.V3DMST, \n  IMHAV3PF.V3BORF, \n  IMHAV3PF.V3"
+"PBVB, \n  IMHAV3PF.V3FICS, \n  IMHAV3PF.V3SCRF, \n  IMHAV3PF.V3CFST, \n  IMHAV3PF.V3VLPA, \n  IMHAV3PF.V3CFRF, \n  IMHAV3PF.V3"
+"WHST, \n  IMHAV3PF.V3POCH, \n  IMHAV3PF.V3PPOP, \n  IMHAV3PF.V3UPLT, \n  IMHAV3PF.V3PCFL, \n  IMHAV3PF.V3PAOF, \n  IMHAV3PF.V3"
+"FROF, \n  IMHAV3PF.V3CFTP, \n  IMHAV3PF.V3CARI, \n  IMHAV3PF.V3RPFF, \n  IMHAV3PF.V3PFIP, \n  IMHAV3PF.V3TRMT, \n  IMHAV3PF.V3"
+"RTVF, \n  IMHAV3PF.V3WHDR, \n  IMHAV3PF.V3JBNO, \n  IMHAV3PF.V3PVND, \n  IMHAV3PF.V3VNBR, \n  IMHAV3PF.V3ADCD, \n  IMHAV3PF.V3"
+"PFRV, \n  IMHAV3PF.V3TERM, \n  IMHAV3PF.V3FTRM, \n  IMHAV3PF.V3CNFT, \n  IMHAV3PF.V3CFVT, \n  IMHAV3PF.V3TMOV, \n  IMHAV3PF.V3"
+"POPW, \n  IMHAV3PF.V3LCN, \n  IMHAV3PF.\"V3PO#\", \n  IMHAV3PF.V3ARDE, \n  IMHAV3PF.V3ARBD, \n  IMHAV3PF.V3PCRD, \n  IMHAV3PF."
+"V3OCDT, \n  IMHAV3PF.V3PCSD, \n  IMHAV3PF.V3PSRD, \n  IMHAV3PF.V3PSRT, \n  IMHAV3PF.V3SHDT, \n  IMHAV3PF.V3CSPD, \n  IMHAV3PF."
+"V3ORDT, \n  IMHAV3PF.V3CLOD, \n  IMHAV3PF.V3NDDT, \n  IMHAV3PF.V3CLDN, \n  IMHAV3PF.V3TRDT, \n  IMHAV3PF.V3TRTM, \n  IMHAV3PF."
+"V3PDTA, \n  IMHAV3PF.V3CPAD, \n  IMHAV3PF.V3PDTR, \n  IMHAV3PF.V3CLRD, \n  IMHAV3PF.V3POLC, \n  IMHAV3PF.V3POCD, \n  IMHAV3PF."
+"V3TTL1, \n  IMHAV3PF.V3CSTT, \n  IMHAV3PF.V3TTOC, \n  IMHAV3PF.V3TOCK, \n  IMHAV3PF.V3TTNW, \n  IMHAV3PF.V3TNWK, \n  IMHAV3PF."
+"V3TTGW, \n  IMHAV3PF.V3TGWK, \n  IMHAV3PF.V3TTPL, \n  IMHAV3PF.V3TTVU, \n  IMHAV3PF.V3TTFB, \n  IMHAV3PF.V3TTFR, \n  IMHAV3PF."
+"V3TTAP, \n  IMHAV3PF.V3TTPU, \n  IMHAV3PF.V3VPUA, \n  IMHAV3PF.V3PALT, \n  IMHAV3PF.V3PUBF, \n  IMHAV3PF.V3PUBT, \n  IMHAV3PF."
+"V3VFRT, \n  IMHAV3PF.V3FRTP, \n  IMHAV3PF.V3WULC, \n  IMHAV3PF.V3WUCT, \n  IMHAV3PF.V3NDAC, \n  IMHAV3PF.V3ONAF, \n  IMHAV3PF."
+"V3ACDM, \n  IMHAV3PF.V3ACDF, \n  IMHAV3PF.V3TUCA, \n  IMHAV3PF.V3TTBD, \n  IMHAV3PF.V3TLWP, \n  IMHAV3PF.V3CNFR, \n  IMHAV3PF."
+"V3CFRT, \n  IMHAV3PF.V3CULC, \n  IMHAV3PF.V3CULT, \n  IMHAV3PF.V3CPAL, \n  IMHAV3PF.V3CPUT, \n  IMHAV3PF.V3CPFB, \n  IMHAV3PF."
+"V3CPTB, \n  IMHAV3PF.V3CTLN, \n  IMHAV3PF.V3CCTT, \n  IMHAV3PF.V3CTOC, \n  IMHAV3PF.V3CTCK, \n  IMHAV3PF.V3CTNW, \n  IMHAV3PF."
+"V3CTNK, \n  IMHAV3PF.V3CTGW, \n  IMHAV3PF.V3CTGK, \n  IMHAV3PF.V3CTPL, \n  IMHAV3PF.V3CTVU, \n  IMHAV3PF.V3CTBC, \n  IMHAV3PF."
+"V3CTFC, \n  IMHAV3PF.V3CTAC, \n  IMHAV3PF.V3CTPA, \n  IMHAV3PF.V3CNAC, \n  IMHAV3PF.V3CNAF, \n  IMHAV3PF.V3CACM, \n  IMHAV3PF."
+"V3CACF, \n  IMHAV3PF.V3CTUC, \n  IMHAV3PF.V3CTBD, \n  IMHAV3PF.V3CTWP, \n  IMHAV3PF.V3POCB, \n  IMHAV3PF.V3POCN, \n  IMHAV3PF."
+"V3POCM, \n  IMHAV3PF.V3TNRL, \n  IMHAV3PF.V3CSTR, \n  IMHAV3PF.V3TRCB, \n  IMHAV3PF.V3TRBK, \n  IMHAV3PF.V3TRNW, \n  IMHAV3PF."
+"V3TRNK, \n  IMHAV3PF.V3TRGW, \n  IMHAV3PF.V3TRGK, \n  IMHAV3PF.V3TRPS, \n  IMHAV3PF.V3TRVP, \n  IMHAV3PF.V3TRVU, \n  IMHAV3PF."
+"V3TRFC, \n  IMHAV3PF.V3TRFR, \n  IMHAV3PF.V3TRDA, \n  IMHAV3PF.V3TRBD, \n  IMHAV3PF.V3TRPA, \n  IMHAV3PF.V3TRUC, \n  IMHAV3PF."
+"V3PMPS, \n  IMHAV3PF.V3PFNA, \n  IMHAV3PF.V3UNAM, \n  IMHAV3PF.V3MAVC, \n  IMHAV3PF.V3MMTS, \n  IMHAV3PF.V3MVCS, \n  IMHAV3PF."
+"V3MPDS, \n  IMHAV3PF.V3MPDH, \n  IMHAV3PF.V3MPDL, \n  IMHAV3PF.V3MQDH, \n  IMHAV3PF.V3MQDL, \n  IMHAV3PF.V3MPDT, \n  IMHAV3PF."
+"V3MCSD, \n  IMHAV3PF.V3MVCA, \n  IMHAV3PF.V3MERV, \n  IMHAV3PF.V3MINV, \n  IMHAV3PF.V3MIDT, \n  IMHAV3PF.V3MVIF, \n  IMHAV3PF."
+"V3MVAR, \n  IMHAV3PF.V3MPDA, \n  IMHAV3PF.V3PPFS, \n  IMHAV3PF.V3FPNA, \n  IMHAV3PF.V3UFPA, \n  IMHAV3PF.V3FAVC, \n  IMHAV3PF."
+"V3FMTS, \n  IMHAV3PF.V3FVCS, \n  IMHAV3PF.V3FPDS, \n  IMHAV3PF.V3FCDH, \n  IMHAV3PF.V3FCDL, \n  IMHAV3PF.V3FPDT, \n  IMHAV3PF."
+"V3RSVN, \n  IMHAV3PF.V3FTCS, \n  IMHAV3PF.V3FCAD, \n  IMHAV3PF.V3FVAR, \n  IMHAV3PF.V3FVCH, \n  IMHAV3PF.V3FTRV, \n  IMHAV3PF."
+"V3FINV, \n  IMHAV3PF.V3FIDT, \n  IMHAV3PF.V3FVIF, \n  IMHAV3PF.V3TVSQ, \n  IMHAV3PF.V3TKSQ, \n  IMHAV3PF.V3TDAQ, \n  IMHAV3PF."
+"V3NDAF, \n  IMHAV3PF.V3FPDA, \n  IMHAV3PF.V3CUNO, \n  IMHAV3PF.V3ORNO, \n  IMHAV3PF.V3SHNM, \n  IMHAV3PF.V3SADD, \n  IMHAV3PF."
+"V3SHNO, \n  IMHAV3PF.V3PONU, \n  IMHAV3PF.V3RERF, \n  IMHAV3PF.V3RECO, \n  IMHAV3PF.V3FSCF, \n  IMHAV3PF.V3POEO, \n  IMHAV3PF."
+"V3POVO, \n  IMHAV3PF.V3PBSC, \n  IMHAV3PF.V3RECF, \n  IMHAV3PF.V3PSTB, \n  IMHAV3PF.V3TMSN, \n  IMHAV3PF.V3XMFL, \n  IMHAV3PF."
+"V3XMDT, \n  IMHAV3PF.V3XMTM, \n  IMHAV3PF.V3ERRF, \n  IMHAV3PF.V3STKI, \n  IMHAV3PF.V3COTM, \n  IMHAV3PF.V3RPRC, \n  IMHAV3PF."
+"V3FIMI, \n  IMHAV3PF.V3TXDT, \n  IMHAV3PF.V3TXTM, \n  IMHAV3PF.V3POIF, \n  IMHAV3PF.V3COD1, \n  IMHAV3PF.V3SNNO, \n  IMHAV3PF."
+"V3SHID, \n  IMHAV3PF.V3FRTI, \n  IMHAV3PF.V3OPO, \n  IMHAV3PF.V3EADT, \n  IMHAV3PF.V3EATM, \n  IMHAV3PF.V3EAID, \n  IMHAV3PF.V"
+"3MODT, \n  IMHAV3PF.V3MOTM, \n  IMHAV3PF.V3MOID, \n  IMHAV3PF.V3MOPG\nFROM IMHAV3PF ORDER BY IMHAV3PF.V3EADT DESC";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.V3PO = null;
							} else {
	                         		
        	row1.V3PO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.V3OWID = null;
							} else {
	                         		
        	row1.V3OWID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.V3ARCO = null;
							} else {
	                         		
        	row1.V3ARCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.V3ROSQ = null;
							} else {
		                          
            row1.V3ROSQ = rs_tDBInput_1.getBigDecimal(4);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.V3SBNO = null;
							} else {
		                          
            row1.V3SBNO = rs_tDBInput_1.getBigDecimal(5);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.V3BUYR = null;
							} else {
	                         		
        	row1.V3BUYR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.V3OCNB = null;
							} else {
	                         		
        	row1.V3OCNB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.V3OFCI = null;
							} else {
	                         		
        	row1.V3OFCI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.V3BYGP = null;
							} else {
		                          
            row1.V3BYGP = rs_tDBInput_1.getBigDecimal(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.V3POST = null;
							} else {
	                         		
        	row1.V3POST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.V3POSS = null;
							} else {
	                         		
        	row1.V3POSS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.V3INUS = null;
							} else {
	                         		
        	row1.V3INUS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.V3WCCD = null;
							} else {
	                         		
        	row1.V3WCCD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.V3VLPF = null;
							} else {
	                         		
        	row1.V3VLPF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.V3POTP = null;
							} else {
	                         		
        	row1.V3POTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.V3DMST = null;
							} else {
	                         		
        	row1.V3DMST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.V3BORF = null;
							} else {
	                         		
        	row1.V3BORF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.V3PBVB = null;
							} else {
	                         		
        	row1.V3PBVB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.V3FICS = null;
							} else {
	                         		
        	row1.V3FICS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.V3SCRF = null;
							} else {
	                         		
        	row1.V3SCRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.V3CFST = null;
							} else {
	                         		
        	row1.V3CFST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.V3VLPA = null;
							} else {
	                         		
        	row1.V3VLPA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.V3CFRF = null;
							} else {
	                         		
        	row1.V3CFRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.V3WHST = null;
							} else {
	                         		
        	row1.V3WHST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.V3POCH = null;
							} else {
	                         		
        	row1.V3POCH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.V3PPOP = null;
							} else {
	                         		
        	row1.V3PPOP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.V3UPLT = null;
							} else {
	                         		
        	row1.V3UPLT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.V3PCFL = null;
							} else {
	                         		
        	row1.V3PCFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.V3PAOF = null;
							} else {
	                         		
        	row1.V3PAOF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.V3FROF = null;
							} else {
	                         		
        	row1.V3FROF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.V3CFTP = null;
							} else {
	                         		
        	row1.V3CFTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.V3CARI = null;
							} else {
	                         		
        	row1.V3CARI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.V3RPFF = null;
							} else {
	                         		
        	row1.V3RPFF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.V3PFIP = null;
							} else {
	                         		
        	row1.V3PFIP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.V3TRMT = null;
							} else {
	                         		
        	row1.V3TRMT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.V3RTVF = null;
							} else {
	                         		
        	row1.V3RTVF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.V3WHDR = null;
							} else {
	                         		
        	row1.V3WHDR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.V3JBNO = null;
							} else {
	                         		
        	row1.V3JBNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.V3PVND = null;
							} else {
	                         		
        	row1.V3PVND = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.V3VNBR = null;
							} else {
	                         		
        	row1.V3VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.V3ADCD = null;
							} else {
		                          
            row1.V3ADCD = rs_tDBInput_1.getBigDecimal(41);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.V3PFRV = null;
							} else {
	                         		
        	row1.V3PFRV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.V3TERM = null;
							} else {
	                         		
        	row1.V3TERM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.V3FTRM = null;
							} else {
	                         		
        	row1.V3FTRM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.V3CNFT = null;
							} else {
	                         		
        	row1.V3CNFT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.V3CFVT = null;
							} else {
	                         		
        	row1.V3CFVT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.V3TMOV = null;
							} else {
	                         		
        	row1.V3TMOV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.V3POPW = null;
							} else {
	                         		
        	row1.V3POPW = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.V3LCN = null;
							} else {
	                         		
        	row1.V3LCN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.V3PO1 = null;
							} else {
	                         		
        	row1.V3PO1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.V3ARDE = null;
							} else {
		                          
            row1.V3ARDE = rs_tDBInput_1.getBigDecimal(51);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.V3ARBD = null;
							} else {
		                          
            row1.V3ARBD = rs_tDBInput_1.getBigDecimal(52);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.V3PCRD = null;
							} else {
		                          
            row1.V3PCRD = rs_tDBInput_1.getBigDecimal(53);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.V3OCDT = null;
							} else {
		                          
            row1.V3OCDT = rs_tDBInput_1.getBigDecimal(54);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.V3PCSD = null;
							} else {
		                          
            row1.V3PCSD = rs_tDBInput_1.getBigDecimal(55);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.V3PSRD = null;
							} else {
		                          
            row1.V3PSRD = rs_tDBInput_1.getBigDecimal(56);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.V3PSRT = null;
							} else {
		                          
            row1.V3PSRT = rs_tDBInput_1.getBigDecimal(57);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.V3SHDT = null;
							} else {
		                          
            row1.V3SHDT = rs_tDBInput_1.getBigDecimal(58);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.V3CSPD = null;
							} else {
		                          
            row1.V3CSPD = rs_tDBInput_1.getBigDecimal(59);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.V3ORDT = null;
							} else {
		                          
            row1.V3ORDT = rs_tDBInput_1.getBigDecimal(60);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.V3CLOD = null;
							} else {
		                          
            row1.V3CLOD = rs_tDBInput_1.getBigDecimal(61);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.V3NDDT = null;
							} else {
		                          
            row1.V3NDDT = rs_tDBInput_1.getBigDecimal(62);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.V3CLDN = null;
							} else {
		                          
            row1.V3CLDN = rs_tDBInput_1.getBigDecimal(63);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.V3TRDT = null;
							} else {
		                          
            row1.V3TRDT = rs_tDBInput_1.getBigDecimal(64);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.V3TRTM = null;
							} else {
		                          
            row1.V3TRTM = rs_tDBInput_1.getBigDecimal(65);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.V3PDTA = null;
							} else {
		                          
            row1.V3PDTA = rs_tDBInput_1.getBigDecimal(66);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.V3CPAD = null;
							} else {
		                          
            row1.V3CPAD = rs_tDBInput_1.getBigDecimal(67);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.V3PDTR = null;
							} else {
		                          
            row1.V3PDTR = rs_tDBInput_1.getBigDecimal(68);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.V3CLRD = null;
							} else {
		                          
            row1.V3CLRD = rs_tDBInput_1.getBigDecimal(69);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.V3POLC = null;
							} else {
		                          
            row1.V3POLC = rs_tDBInput_1.getBigDecimal(70);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.V3POCD = null;
							} else {
		                          
            row1.V3POCD = rs_tDBInput_1.getBigDecimal(71);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.V3TTL1 = null;
							} else {
		                          
            row1.V3TTL1 = rs_tDBInput_1.getBigDecimal(72);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.V3CSTT = null;
							} else {
		                          
            row1.V3CSTT = rs_tDBInput_1.getBigDecimal(73);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.V3TTOC = null;
							} else {
		                          
            row1.V3TTOC = rs_tDBInput_1.getBigDecimal(74);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.V3TOCK = null;
							} else {
		                          
            row1.V3TOCK = rs_tDBInput_1.getBigDecimal(75);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.V3TTNW = null;
							} else {
		                          
            row1.V3TTNW = rs_tDBInput_1.getBigDecimal(76);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.V3TNWK = null;
							} else {
		                          
            row1.V3TNWK = rs_tDBInput_1.getBigDecimal(77);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row1.V3TTGW = null;
							} else {
		                          
            row1.V3TTGW = rs_tDBInput_1.getBigDecimal(78);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 79) {
								row1.V3TGWK = null;
							} else {
		                          
            row1.V3TGWK = rs_tDBInput_1.getBigDecimal(79);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 80) {
								row1.V3TTPL = null;
							} else {
		                          
            row1.V3TTPL = rs_tDBInput_1.getBigDecimal(80);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 81) {
								row1.V3TTVU = null;
							} else {
		                          
            row1.V3TTVU = rs_tDBInput_1.getBigDecimal(81);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 82) {
								row1.V3TTFB = null;
							} else {
		                          
            row1.V3TTFB = rs_tDBInput_1.getBigDecimal(82);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 83) {
								row1.V3TTFR = null;
							} else {
		                          
            row1.V3TTFR = rs_tDBInput_1.getBigDecimal(83);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 84) {
								row1.V3TTAP = null;
							} else {
		                          
            row1.V3TTAP = rs_tDBInput_1.getBigDecimal(84);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 85) {
								row1.V3TTPU = null;
							} else {
		                          
            row1.V3TTPU = rs_tDBInput_1.getBigDecimal(85);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 86) {
								row1.V3VPUA = null;
							} else {
		                          
            row1.V3VPUA = rs_tDBInput_1.getBigDecimal(86);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 87) {
								row1.V3PALT = null;
							} else {
	                         		
        	row1.V3PALT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 87, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 88) {
								row1.V3PUBF = null;
							} else {
		                          
            row1.V3PUBF = rs_tDBInput_1.getBigDecimal(88);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 89) {
								row1.V3PUBT = null;
							} else {
		                          
            row1.V3PUBT = rs_tDBInput_1.getBigDecimal(89);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 90) {
								row1.V3VFRT = null;
							} else {
		                          
            row1.V3VFRT = rs_tDBInput_1.getBigDecimal(90);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 91) {
								row1.V3FRTP = null;
							} else {
	                         		
        	row1.V3FRTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 91, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 92) {
								row1.V3WULC = null;
							} else {
		                          
            row1.V3WULC = rs_tDBInput_1.getBigDecimal(92);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 93) {
								row1.V3WUCT = null;
							} else {
	                         		
        	row1.V3WUCT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 93, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 94) {
								row1.V3NDAC = null;
							} else {
		                          
            row1.V3NDAC = rs_tDBInput_1.getBigDecimal(94);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 95) {
								row1.V3ONAF = null;
							} else {
		                          
            row1.V3ONAF = rs_tDBInput_1.getBigDecimal(95);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 96) {
								row1.V3ACDM = null;
							} else {
		                          
            row1.V3ACDM = rs_tDBInput_1.getBigDecimal(96);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 97) {
								row1.V3ACDF = null;
							} else {
		                          
            row1.V3ACDF = rs_tDBInput_1.getBigDecimal(97);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 98) {
								row1.V3TUCA = null;
							} else {
		                          
            row1.V3TUCA = rs_tDBInput_1.getBigDecimal(98);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 99) {
								row1.V3TTBD = null;
							} else {
		                          
            row1.V3TTBD = rs_tDBInput_1.getBigDecimal(99);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 100) {
								row1.V3TLWP = null;
							} else {
		                          
            row1.V3TLWP = rs_tDBInput_1.getBigDecimal(100);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 101) {
								row1.V3CNFR = null;
							} else {
		                          
            row1.V3CNFR = rs_tDBInput_1.getBigDecimal(101);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 102) {
								row1.V3CFRT = null;
							} else {
	                         		
        	row1.V3CFRT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 102, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 103) {
								row1.V3CULC = null;
							} else {
		                          
            row1.V3CULC = rs_tDBInput_1.getBigDecimal(103);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 104) {
								row1.V3CULT = null;
							} else {
	                         		
        	row1.V3CULT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 104, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 105) {
								row1.V3CPAL = null;
							} else {
		                          
            row1.V3CPAL = rs_tDBInput_1.getBigDecimal(105);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 106) {
								row1.V3CPUT = null;
							} else {
	                         		
        	row1.V3CPUT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 106, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 107) {
								row1.V3CPFB = null;
							} else {
		                          
            row1.V3CPFB = rs_tDBInput_1.getBigDecimal(107);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 108) {
								row1.V3CPTB = null;
							} else {
		                          
            row1.V3CPTB = rs_tDBInput_1.getBigDecimal(108);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 109) {
								row1.V3CTLN = null;
							} else {
		                          
            row1.V3CTLN = rs_tDBInput_1.getBigDecimal(109);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 110) {
								row1.V3CCTT = null;
							} else {
		                          
            row1.V3CCTT = rs_tDBInput_1.getBigDecimal(110);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 111) {
								row1.V3CTOC = null;
							} else {
		                          
            row1.V3CTOC = rs_tDBInput_1.getBigDecimal(111);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 112) {
								row1.V3CTCK = null;
							} else {
		                          
            row1.V3CTCK = rs_tDBInput_1.getBigDecimal(112);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 113) {
								row1.V3CTNW = null;
							} else {
		                          
            row1.V3CTNW = rs_tDBInput_1.getBigDecimal(113);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 114) {
								row1.V3CTNK = null;
							} else {
		                          
            row1.V3CTNK = rs_tDBInput_1.getBigDecimal(114);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 115) {
								row1.V3CTGW = null;
							} else {
		                          
            row1.V3CTGW = rs_tDBInput_1.getBigDecimal(115);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 116) {
								row1.V3CTGK = null;
							} else {
		                          
            row1.V3CTGK = rs_tDBInput_1.getBigDecimal(116);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 117) {
								row1.V3CTPL = null;
							} else {
		                          
            row1.V3CTPL = rs_tDBInput_1.getBigDecimal(117);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 118) {
								row1.V3CTVU = null;
							} else {
		                          
            row1.V3CTVU = rs_tDBInput_1.getBigDecimal(118);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 119) {
								row1.V3CTBC = null;
							} else {
		                          
            row1.V3CTBC = rs_tDBInput_1.getBigDecimal(119);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 120) {
								row1.V3CTFC = null;
							} else {
		                          
            row1.V3CTFC = rs_tDBInput_1.getBigDecimal(120);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 121) {
								row1.V3CTAC = null;
							} else {
		                          
            row1.V3CTAC = rs_tDBInput_1.getBigDecimal(121);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 122) {
								row1.V3CTPA = null;
							} else {
		                          
            row1.V3CTPA = rs_tDBInput_1.getBigDecimal(122);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 123) {
								row1.V3CNAC = null;
							} else {
		                          
            row1.V3CNAC = rs_tDBInput_1.getBigDecimal(123);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 124) {
								row1.V3CNAF = null;
							} else {
		                          
            row1.V3CNAF = rs_tDBInput_1.getBigDecimal(124);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 125) {
								row1.V3CACM = null;
							} else {
		                          
            row1.V3CACM = rs_tDBInput_1.getBigDecimal(125);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 126) {
								row1.V3CACF = null;
							} else {
		                          
            row1.V3CACF = rs_tDBInput_1.getBigDecimal(126);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 127) {
								row1.V3CTUC = null;
							} else {
		                          
            row1.V3CTUC = rs_tDBInput_1.getBigDecimal(127);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 128) {
								row1.V3CTBD = null;
							} else {
		                          
            row1.V3CTBD = rs_tDBInput_1.getBigDecimal(128);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 129) {
								row1.V3CTWP = null;
							} else {
		                          
            row1.V3CTWP = rs_tDBInput_1.getBigDecimal(129);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 130) {
								row1.V3POCB = null;
							} else {
	                         		
        	row1.V3POCB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 130, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 131) {
								row1.V3POCN = null;
							} else {
	                         		
        	row1.V3POCN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 131, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 132) {
								row1.V3POCM = null;
							} else {
	                         		
        	row1.V3POCM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 132, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 133) {
								row1.V3TNRL = null;
							} else {
		                          
            row1.V3TNRL = rs_tDBInput_1.getBigDecimal(133);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 134) {
								row1.V3CSTR = null;
							} else {
		                          
            row1.V3CSTR = rs_tDBInput_1.getBigDecimal(134);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 135) {
								row1.V3TRCB = null;
							} else {
		                          
            row1.V3TRCB = rs_tDBInput_1.getBigDecimal(135);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 136) {
								row1.V3TRBK = null;
							} else {
		                          
            row1.V3TRBK = rs_tDBInput_1.getBigDecimal(136);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 137) {
								row1.V3TRNW = null;
							} else {
		                          
            row1.V3TRNW = rs_tDBInput_1.getBigDecimal(137);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 138) {
								row1.V3TRNK = null;
							} else {
		                          
            row1.V3TRNK = rs_tDBInput_1.getBigDecimal(138);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 139) {
								row1.V3TRGW = null;
							} else {
		                          
            row1.V3TRGW = rs_tDBInput_1.getBigDecimal(139);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 140) {
								row1.V3TRGK = null;
							} else {
		                          
            row1.V3TRGK = rs_tDBInput_1.getBigDecimal(140);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 141) {
								row1.V3TRPS = null;
							} else {
		                          
            row1.V3TRPS = rs_tDBInput_1.getBigDecimal(141);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 142) {
								row1.V3TRVP = null;
							} else {
		                          
            row1.V3TRVP = rs_tDBInput_1.getBigDecimal(142);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 143) {
								row1.V3TRVU = null;
							} else {
		                          
            row1.V3TRVU = rs_tDBInput_1.getBigDecimal(143);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 144) {
								row1.V3TRFC = null;
							} else {
		                          
            row1.V3TRFC = rs_tDBInput_1.getBigDecimal(144);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 145) {
								row1.V3TRFR = null;
							} else {
		                          
            row1.V3TRFR = rs_tDBInput_1.getBigDecimal(145);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 146) {
								row1.V3TRDA = null;
							} else {
		                          
            row1.V3TRDA = rs_tDBInput_1.getBigDecimal(146);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 147) {
								row1.V3TRBD = null;
							} else {
		                          
            row1.V3TRBD = rs_tDBInput_1.getBigDecimal(147);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 148) {
								row1.V3TRPA = null;
							} else {
		                          
            row1.V3TRPA = rs_tDBInput_1.getBigDecimal(148);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 149) {
								row1.V3TRUC = null;
							} else {
		                          
            row1.V3TRUC = rs_tDBInput_1.getBigDecimal(149);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 150) {
								row1.V3PMPS = null;
							} else {
	                         		
        	row1.V3PMPS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 150, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 151) {
								row1.V3PFNA = null;
							} else {
		                          
            row1.V3PFNA = rs_tDBInput_1.getBigDecimal(151);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 152) {
								row1.V3UNAM = null;
							} else {
		                          
            row1.V3UNAM = rs_tDBInput_1.getBigDecimal(152);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 153) {
								row1.V3MAVC = null;
							} else {
		                          
            row1.V3MAVC = rs_tDBInput_1.getBigDecimal(153);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 154) {
								row1.V3MMTS = null;
							} else {
	                         		
        	row1.V3MMTS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 154, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 155) {
								row1.V3MVCS = null;
							} else {
	                         		
        	row1.V3MVCS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 155, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 156) {
								row1.V3MPDS = null;
							} else {
	                         		
        	row1.V3MPDS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 156, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 157) {
								row1.V3MPDH = null;
							} else {
	                         		
        	row1.V3MPDH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 157, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 158) {
								row1.V3MPDL = null;
							} else {
		                          
            row1.V3MPDL = rs_tDBInput_1.getBigDecimal(158);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 159) {
								row1.V3MQDH = null;
							} else {
	                         		
        	row1.V3MQDH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 159, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 160) {
								row1.V3MQDL = null;
							} else {
		                          
            row1.V3MQDL = rs_tDBInput_1.getBigDecimal(160);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 161) {
								row1.V3MPDT = null;
							} else {
		                          
            row1.V3MPDT = rs_tDBInput_1.getBigDecimal(161);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 162) {
								row1.V3MCSD = null;
							} else {
		                          
            row1.V3MCSD = rs_tDBInput_1.getBigDecimal(162);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 163) {
								row1.V3MVCA = null;
							} else {
		                          
            row1.V3MVCA = rs_tDBInput_1.getBigDecimal(163);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 164) {
								row1.V3MERV = null;
							} else {
		                          
            row1.V3MERV = rs_tDBInput_1.getBigDecimal(164);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 165) {
								row1.V3MINV = null;
							} else {
	                         		
        	row1.V3MINV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 165, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 166) {
								row1.V3MIDT = null;
							} else {
		                          
            row1.V3MIDT = rs_tDBInput_1.getBigDecimal(166);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 167) {
								row1.V3MVIF = null;
							} else {
	                         		
        	row1.V3MVIF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 167, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 168) {
								row1.V3MVAR = null;
							} else {
		                          
            row1.V3MVAR = rs_tDBInput_1.getBigDecimal(168);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 169) {
								row1.V3MPDA = null;
							} else {
		                          
            row1.V3MPDA = rs_tDBInput_1.getBigDecimal(169);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 170) {
								row1.V3PPFS = null;
							} else {
	                         		
        	row1.V3PPFS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 170, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 171) {
								row1.V3FPNA = null;
							} else {
		                          
            row1.V3FPNA = rs_tDBInput_1.getBigDecimal(171);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 172) {
								row1.V3UFPA = null;
							} else {
		                          
            row1.V3UFPA = rs_tDBInput_1.getBigDecimal(172);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 173) {
								row1.V3FAVC = null;
							} else {
		                          
            row1.V3FAVC = rs_tDBInput_1.getBigDecimal(173);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 174) {
								row1.V3FMTS = null;
							} else {
	                         		
        	row1.V3FMTS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 174, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 175) {
								row1.V3FVCS = null;
							} else {
	                         		
        	row1.V3FVCS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 175, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 176) {
								row1.V3FPDS = null;
							} else {
	                         		
        	row1.V3FPDS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 176, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 177) {
								row1.V3FCDH = null;
							} else {
	                         		
        	row1.V3FCDH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 177, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 178) {
								row1.V3FCDL = null;
							} else {
		                          
            row1.V3FCDL = rs_tDBInput_1.getBigDecimal(178);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 179) {
								row1.V3FPDT = null;
							} else {
		                          
            row1.V3FPDT = rs_tDBInput_1.getBigDecimal(179);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 180) {
								row1.V3RSVN = null;
							} else {
	                         		
        	row1.V3RSVN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 180, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 181) {
								row1.V3FTCS = null;
							} else {
	                         		
        	row1.V3FTCS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 181, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 182) {
								row1.V3FCAD = null;
							} else {
		                          
            row1.V3FCAD = rs_tDBInput_1.getBigDecimal(182);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 183) {
								row1.V3FVAR = null;
							} else {
		                          
            row1.V3FVAR = rs_tDBInput_1.getBigDecimal(183);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 184) {
								row1.V3FVCH = null;
							} else {
		                          
            row1.V3FVCH = rs_tDBInput_1.getBigDecimal(184);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 185) {
								row1.V3FTRV = null;
							} else {
		                          
            row1.V3FTRV = rs_tDBInput_1.getBigDecimal(185);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 186) {
								row1.V3FINV = null;
							} else {
	                         		
        	row1.V3FINV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 186, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 187) {
								row1.V3FIDT = null;
							} else {
		                          
            row1.V3FIDT = rs_tDBInput_1.getBigDecimal(187);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 188) {
								row1.V3FVIF = null;
							} else {
	                         		
        	row1.V3FVIF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 188, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 189) {
								row1.V3TVSQ = null;
							} else {
		                          
            row1.V3TVSQ = rs_tDBInput_1.getBigDecimal(189);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 190) {
								row1.V3TKSQ = null;
							} else {
		                          
            row1.V3TKSQ = rs_tDBInput_1.getBigDecimal(190);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 191) {
								row1.V3TDAQ = null;
							} else {
		                          
            row1.V3TDAQ = rs_tDBInput_1.getBigDecimal(191);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 192) {
								row1.V3NDAF = null;
							} else {
		                          
            row1.V3NDAF = rs_tDBInput_1.getBigDecimal(192);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 193) {
								row1.V3FPDA = null;
							} else {
		                          
            row1.V3FPDA = rs_tDBInput_1.getBigDecimal(193);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 194) {
								row1.V3CUNO = null;
							} else {
	                         		
        	row1.V3CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 194, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 195) {
								row1.V3ORNO = null;
							} else {
		                          
            row1.V3ORNO = rs_tDBInput_1.getBigDecimal(195);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 196) {
								row1.V3SHNM = null;
							} else {
	                         		
        	row1.V3SHNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 196, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 197) {
								row1.V3SADD = null;
							} else {
	                         		
        	row1.V3SADD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 197, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 198) {
								row1.V3SHNO = null;
							} else {
	                         		
        	row1.V3SHNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 198, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 199) {
								row1.V3PONU = null;
							} else {
	                         		
        	row1.V3PONU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 199, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 200) {
								row1.V3RERF = null;
							} else {
	                         		
        	row1.V3RERF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 200, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 201) {
								row1.V3RECO = null;
							} else {
	                         		
        	row1.V3RECO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 201, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 202) {
								row1.V3FSCF = null;
							} else {
	                         		
        	row1.V3FSCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 202, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 203) {
								row1.V3POEO = null;
							} else {
		                          
            row1.V3POEO = rs_tDBInput_1.getBigDecimal(203);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 204) {
								row1.V3POVO = null;
							} else {
	                         		
        	row1.V3POVO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 204, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 205) {
								row1.V3PBSC = null;
							} else {
	                         		
        	row1.V3PBSC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 205, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 206) {
								row1.V3RECF = null;
							} else {
	                         		
        	row1.V3RECF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 206, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 207) {
								row1.V3PSTB = null;
							} else {
		                          
            row1.V3PSTB = rs_tDBInput_1.getBigDecimal(207);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 208) {
								row1.V3TMSN = null;
							} else {
	                         		
        	row1.V3TMSN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 208, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 209) {
								row1.V3XMFL = null;
							} else {
	                         		
        	row1.V3XMFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 209, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 210) {
								row1.V3XMDT = null;
							} else {
		                          
            row1.V3XMDT = rs_tDBInput_1.getBigDecimal(210);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 211) {
								row1.V3XMTM = null;
							} else {
		                          
            row1.V3XMTM = rs_tDBInput_1.getBigDecimal(211);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 212) {
								row1.V3ERRF = null;
							} else {
	                         		
        	row1.V3ERRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 212, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 213) {
								row1.V3STKI = null;
							} else {
	                         		
        	row1.V3STKI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 213, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 214) {
								row1.V3COTM = null;
							} else {
		                          
            row1.V3COTM = rs_tDBInput_1.getBigDecimal(214);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 215) {
								row1.V3RPRC = null;
							} else {
	                         		
        	row1.V3RPRC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 215, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 216) {
								row1.V3FIMI = null;
							} else {
	                         		
        	row1.V3FIMI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 216, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 217) {
								row1.V3TXDT = null;
							} else {
		                          
            row1.V3TXDT = rs_tDBInput_1.getBigDecimal(217);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 218) {
								row1.V3TXTM = null;
							} else {
		                          
            row1.V3TXTM = rs_tDBInput_1.getBigDecimal(218);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 219) {
								row1.V3POIF = null;
							} else {
	                         		
        	row1.V3POIF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 219, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 220) {
								row1.V3COD1 = null;
							} else {
	                         		
        	row1.V3COD1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 220, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 221) {
								row1.V3SNNO = null;
							} else {
	                         		
        	row1.V3SNNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 221, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 222) {
								row1.V3SHID = null;
							} else {
	                         		
        	row1.V3SHID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 222, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 223) {
								row1.V3FRTI = null;
							} else {
	                         		
        	row1.V3FRTI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 223, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 224) {
								row1.V3OPO = null;
							} else {
	                         		
        	row1.V3OPO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 224, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 225) {
								row1.V3EADT = null;
							} else {
		                          
            row1.V3EADT = rs_tDBInput_1.getBigDecimal(225);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 226) {
								row1.V3EATM = null;
							} else {
		                          
            row1.V3EATM = rs_tDBInput_1.getBigDecimal(226);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 227) {
								row1.V3EAID = null;
							} else {
	                         		
        	row1.V3EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 227, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 228) {
								row1.V3MODT = null;
							} else {
		                          
            row1.V3MODT = rs_tDBInput_1.getBigDecimal(228);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 229) {
								row1.V3MOTM = null;
							} else {
		                          
            row1.V3MOTM = rs_tDBInput_1.getBigDecimal(229);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 230) {
								row1.V3MOID = null;
							} else {
	                         		
        	row1.V3MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 230, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 231) {
								row1.V3MOPG = null;
							} else {
	                         		
        	row1.V3MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 231, true);
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.V3OCDT = TimeStampConverting.convertToDate(row1.V3OCDT.toString()) ;
Var.V3PCSD = TimeStampConverting.convertToDate(row1.V3PCSD.toString()) ;
Var.V3ARDE = TimeStampConverting.convertToDate(row1.V3ARDE.toString()) ;
Var.V3ARBD = TimeStampConverting.convertToDate(row1.V3ARBD.toString()) ;
Var.V3PCRD = TimeStampConverting.convertToDate(row1.V3PCRD.toString()) ;
Var.V3SHDT = TimeStampConverting.convertToDate(row1.V3SHDT.toString()) ;
Var.V3CSPD = TimeStampConverting.convertToDate(row1.V3CSPD.toString()) ;
Var.V3ORDT = TimeStampConverting.convertToDate(row1.V3ORDT.toString()) ;
Var.V3CLOD = TimeStampConverting.convertToDate(row1.V3CLOD.toString()) ;
Var.V3NDDT = TimeStampConverting.convertToDate(row1.V3NDDT.toString()) ;
Var.V3CLDN = TimeStampConverting.convertToDate(row1.V3CLDN.toString()) ;
Var.V3PDTA = TimeStampConverting.convertToDate(row1.V3PDTA.toString()) ;
Var.V3CPAD = TimeStampConverting.convertToDate(row1.V3CPAD.toString()) ;
Var.V3PDTR = TimeStampConverting.convertToDate(row1.V3PDTR.toString()) ;
Var.V3CLRD = TimeStampConverting.convertToDate(row1.V3CLRD.toString()) ;
Var.V3POLC = TimeStampConverting.convertToDate(row1.V3POLC.toString()) ;
Var.V3POCD = TimeStampConverting.convertToDate(row1.V3POCD.toString()) ;
Var.V3MPDT = TimeStampConverting.convertToDate(row1.V3MPDT.toString()) ;
Var.V3FPDT = TimeStampConverting.convertToDate(row1.V3FPDT.toString()) ;
Var.V3FIDT = TimeStampConverting.convertToDate(row1.V3FIDT.toString()) ;
Var.SCHEDULED_PO_RECEIPT_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.V3PSRD.toString(),row1.V3PSRT.toString()) ;
Var.PO_TRANSMISSION_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.V3TRDT.toString(),row1.V3TRTM.toString()) ;
Var.TRANSMIT_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.V3XMDT.toString(),row1.V3XMTM.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.V3EADT.toString(),row1.V3EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.V3MODT.toString(),row1.V3MOTM.toString()) ;
Var.PO_CLOSE_TIME = TimeStampConverting.convertToTime(row1.V3COTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PURCHASE_ORDER_HEADER_2_UPDATE = null;


// # Output table : 'PURCHASE_ORDER_HEADER_2_UPDATE'
count_PURCHASE_ORDER_HEADER_2_UPDATE_tMap_4++;

PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PURCHASE_ORDER_NO = row1.V3PO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SITE_ID = context.opco;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SMS_CONFIRMED_DATE = Var.V3OCDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3OCDT):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.VENDOR_CONFIRMED_SHIP_DATE = Var.V3PCSD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3PCSD):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SCHEDULED_PO_RECEIPT_TIMESTAMP = Var.SCHEDULED_PO_RECEIPT_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.SCHEDULED_PO_RECEIPT_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.ORIG_PICKUP_ALLOW_TYPE = row1.V3PALT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PICKUP_ALLOW_FROM_BRACKET = row1.V3PUBF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.ORIG_FREIGHT_RATE = row1.V3VFRT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.ORIG_FREIGHT_TYPE = row1.V3FRTP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.ORIG_MERCH_ALLOW_CHARGE = row1.V3ACDM;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.ORIG_FREIGHT_ALLOW_CHARGE = row1.V3ACDF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_ROUNDING_VARIANCE = row1.V3FTRV;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SHIP_WITH_NEXT_ORDER_IND = row1.V3SHNO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CUST_REFERENCE_ORDER_NO = row1.V3PONU;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.OUTSIDE_WHSE_ID = row1.V3OWID;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.RECOMMENDED_ORDER_SEQ_NO = row1.V3ROSQ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SYSCO_BRACKET_NO = row1.V3SBNO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BUYER_NO = row1.V3BUYR;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.ORDER_GROUP = row1.V3OFCI;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BUYING_GROUP = row1.V3BYGP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_PRIMARY_STATUS = row1.V3POST;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_SECONDARY_STATUS = row1.V3POSS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_IN_USE_FLAG = row1.V3INUS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.WHSE_CHANGE_CODE = row1.V3WCCD;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_VALID_PRICING_FLAG = row1.V3VLPF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_TYPE = row1.V3POTP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.DEMAND_STATUS = row1.V3DMST;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BACKORDER_FLAG = row1.V3BORF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PROC_BILLED_VENDOR_BILLED_FLAG = row1.V3PBVB;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_INTER_COMPANY_STMT_FLAG = row1.V3FICS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONF_STATUS = row1.V3CFST;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_VALID_PRICING_APPROVAL = row1.V3VLPA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONF_RECVD_FLAG = row1.V3CFRF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.WHSE_STATUS = row1.V3WHST;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_CHANGED_FLAG = row1.V3POCH;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PRINT_PRICE_ON_PO_FLAG = row1.V3PPOP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.UPDATE_LEAD_TIME_FLAG = row1.V3UPLT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PRICE_CHANGE_FLAG = row1.V3PCFL;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CARRIER_ID = row1.V3CARI;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.REVISED_PROFORMA_FLAG = row1.V3RPFF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PROFORMA_INPROCESS_FLAG = row1.V3PFIP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TRANSMIT_TO = row1.V3TRMT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.RETRANSMIT_TO_VENDOR_FLAG = row1.V3RTVF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.JOB_NO = row1.V3JBNO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PAY_TO_VENDOR_NO = row1.V3PVND;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_VENDOR = row1.V3PFRV;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.VENDOR_TERMS = row1.V3TERM;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_VENDOR_TERMS = row1.V3FTRM;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TERMS = row1.V3CNFT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_FREIGHT_VENDOR_TERMS = row1.V3CFVT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TERMS_OVERRIDE_FLAG = row1.V3TMOV;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_PLACED_WITH = row1.V3POPW;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.LOAD_CTRL_NO = row1.V3LCN;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BUSINESS_DATE_ANTICIPATED_RECEIPT = Var.V3ARDE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3ARDE):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_DATE_ANTICIPATED_RECEIPT = Var.V3ARBD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3ARBD):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_VENDOR_CONF_RECEIPT = Var.V3PCRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3PCRD):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BUSINESS_DATE_SHIP_PICKUP = Var.V3SHDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3SHDT):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_DATE_SHIP_PICKUP = Var.V3CSPD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CSPD):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BUSINESS_ORDER_DATE = Var.V3ORDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3ORDT):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_ORDER_DATE = Var.V3CLOD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CLOD):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BUSINESS_DATE_PO_NEEDED = Var.V3NDDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3NDDT):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_DATE_PO_NEEDED = Var.V3CLDN!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CLDN):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_TRANSMISSION_TIMESTAMP = Var.PO_TRANSMISSION_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.PO_TRANSMISSION_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BUSINESS_DATE_PO_ACCEPTED = Var.V3PDTA!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3PDTA):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_DATE_PO_ACCEPTED = Var.V3CPAD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CPAD):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.BUSINESS_DATE_ACTUAL_RECEIPT = Var.V3PDTR!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3PDTR):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_DATE_ACTUAL_RECEIPT = Var.V3CLRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CLRD):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE = Var.V3POLC!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3POLC):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CALENDAR_VENDOR_CONF_DATE = Var.V3POCD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3POCD):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_LINES = row1.V3TTL1;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_CASES = row1.V3CSTT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_CUBE = row1.V3TTOC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_NET_WGT = row1.V3TTNW;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_GROSS_WGT = row1.V3TTGW;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_VENDOR_PALLETS = row1.V3TTPL;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_VENDOR_UNITS = row1.V3TTVU;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_FOB_COST = row1.V3TTFB;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_FREIGHT_COST = row1.V3TTFR;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_AP_COST = row1.V3TTAP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_PICKUP_ALLOW = row1.V3TTPU;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_PICKUP_ALLOW_RATE = row1.V3VPUA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PICKUP_ALLOW_TO_BRACKET = row1.V3PUBT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.WHSE_UNLOAD_CHARGE = row1.V3WULC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.WHSE_UNLOAD_CHARGE_TYPE = row1.V3WUCT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.ORIG_NON_DIST_MERCH_ALLOW_CHARGE = row1.V3NDAC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_WHSE_PALLETS = row1.V3TLWP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_FREIGHT_RATE = row1.V3CNFR;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_FREIGHT_RATE_TYPE = row1.V3CFRT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_UNLOADING_CHARGE = row1.V3CULC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_UNLOADING_CHRG_TYPE = row1.V3CULT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_PICKUP_ALLOW_RATE = row1.V3CPAL;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_PICKUP_ALLOW_TYPE = row1.V3CPUT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET = row1.V3CPFB;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_PICKUP_ALLOW_TO_BRACKET = row1.V3CPTB;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_LINES = row1.V3CTLN;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTA_CASES = row1.V3CCTT;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIMRED_TOTAL_CUBE = row1.V3CTOC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_NET_WGT = row1.V3CTNW;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_GROSS_WGT = row1.V3CTGW;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_VENDOR_PALLETS = row1.V3CTPL;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_VENDOR_UNITS = row1.V3CTVU;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_FOB_COST = row1.V3CTBC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_FREIGHT_COST = row1.V3CTFC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_AP_COST = row1.V3CTAC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_PICKUP_ALLOW = row1.V3CTPA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE = row1.V3CNAC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE = row1.V3CNAF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_MERCH_ALLOW_CHARGE = row1.V3CACM;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_FREIGHT_ALLOW_CHARGE = row1.V3CACF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_UNLOADING_CHARGE = row1.V3CTUC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_BRACKET_DIFF = row1.V3CTBD;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_TOTAL_WHSE_PALLETS = row1.V3CTWP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFIRMED_USER = row1.V3POCB;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.VENDOR_CONF_NO = row1.V3POCN;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.VENDOR_CONF_METHOD = row1.V3POCM;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_LINES = row1.V3TNRL;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_CASES = row1.V3CSTR;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_CUBE = row1.V3TRCB;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_NET_WGT = row1.V3TRNW;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_GROSS_WGT = row1.V3TRGW;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_VENDOR_PALLETS = row1.V3TRPS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_WHSE_PALLETS = row1.V3TRVP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_VENDOR_UNITS = row1.V3TRVU;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_FOB_COST = row1.V3TRFC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_FREIGHT_COST = row1.V3TRFR;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_AP_COST = row1.V3TRDA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_BRACKET_DIFF = row1.V3TRBD;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_PICKUP_ALLOW = row1.V3TRPA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_RECVD_UNLOADING_CHARGE = row1.V3TRUC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_PROFORMA_STATUS = row1.V3PMPS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_PROFORMA_NET_AMT = row1.V3PFNA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.UNMATCHED_MERCH_PROFROMA_NET_AMT = row1.V3UNAM;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_AMT_TO_BE_VOUCH = row1.V3MAVC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_MATCHED_STATUS = row1.V3MMTS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_VOUCH_STATUS = row1.V3MVCS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_PAID_STATUS = row1.V3MPDS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_PRICE_DIFF_HEADER_STATUS = row1.V3MPDH;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_PRICE_DIFF_ERROR_LINE_COUNT = row1.V3MPDL;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_QTY_DIFF_HEADER_STATUS = row1.V3MQDH;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_QTY_DIFF_ERROR_LINE_COUNT = row1.V3MQDL;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_PAYMENT_DUE_DATE = Var.V3MPDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3MPDT):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_CASH_DISC = row1.V3MCSD;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_VOUCH_AMT = row1.V3MVCA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_ROUNDING_VAR = row1.V3MERV;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_VENDOR_INTERCOM_BILLED_FLAG = row1.V3MVIF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_VAR_AMT = row1.V3MVAR;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.MERCH_FREIGHT_AMT = row1.V3MPDA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_PROFORMA_NET_AMT = row1.V3FPNA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.UNMATCHED_FREIGHT_PROFORMA_NET_AMT = row1.V3UFPA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_AMT_TO_BE_VOUCH = row1.V3FAVC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_MATCHED_STATUS = row1.V3FMTS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_VOUCH_STATUS = row1.V3FVCS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_PAID_STATUS = row1.V3FPDS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_DIFF_HEADER_STATUS = row1.V3FCDH;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_PAYMENT_DUE_DATE = Var.V3FPDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3FPDT):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_CLAIM_STATUS = row1.V3FTCS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_CASH_DISC = row1.V3FCAD;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_VARIANCE_AMT = row1.V3FVAR;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_VOUCH_AMT = row1.V3FVCH;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_INV_NO = row1.V3FINV;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_INV_DATE = Var.V3FIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3FIDT):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG = row1.V3FVIF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_VENDOR_SHORT_QTY = row1.V3TVSQ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_CARRIER_SHORT_QTY = row1.V3TKSQ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TOTAL_DAMAGED_ACCEPTED_QTY = row1.V3TDAQ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_PAID_AMOUNT = row1.V3FPDA;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SHIP_TO_CUST = row1.V3CUNO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CUST_ORDER_NO = row1.V3ORNO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SHIP_FROM_NAME = row1.V3SHNM;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SHIPPING_ADDRESS_ID = row1.V3SADD;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.RESERVED_RE_RECOMMEND_FLAG = row1.V3RERF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.RECOMMENDED_ORDER_FLAG = row1.V3RECO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FAILED_SCORECARD_FLAG = row1.V3FSCF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG = row1.V3POVO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PRICE_BRACKET_SOURCE_CODE = row1.V3PBSC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SHORT_PERCENT_TO_BACKORDER = row1.V3PSTB;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SECONDARY_PO_TYPE = row1.V3TMSN;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TRANSMIT_FLAG = row1.V3XMFL;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.TRANSMIT_TIMESTAMP = Var.TRANSMIT_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.TRANSMIT_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_ERROR_IND = row1.V3ERRF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.STOCK_IND = row1.V3STKI;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PO_CLOSE_TIME = Var.PO_CLOSE_TIME!=""? TalendDate.parseDate("HH:mm:ss",Var.PO_CLOSE_TIME):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.REPLENISHMENT_SYSTEM = row1.V3RPRC;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SHIPMENT_NOTICE_NO = row1.V3SNNO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_PROFORMA_STATUS = row1.V3PPFS;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.SHIPMENT_ID = row1.V3SHID;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.FREIGHT_PROCESS_FLAG = row1.V3FRTI;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.ORIG_PURCHASE_ORDER_NO = row1.V3OPO;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CREATED_USER_ID = row1.V3EAID;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.IS_ACTIVE = true;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.V3PF_SVOP = context.svop;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CONFERENCE_TYPE = row1.V3CFTP;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.NEXT_CONF_RECVD_FLAG = row1.V3SCRF;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.UPDATED_USER_ID = row1.V3MOID;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.UPDATED_PROGRAM_ID = row1.V3MOPG;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.IS_DELETED = false;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CREATED_ORIGIN = "SUS";
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.UPDATED_ORIGIN = "SUS";
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_HEADER_2_UPDATE_tmp.PICKUP_ALLOWANCE_OVERRIDE_FLAG = row1.V3PAOF;
PURCHASE_ORDER_HEADER_2_UPDATE = PURCHASE_ORDER_HEADER_2_UPDATE_tmp;
log.debug("tMap_4 - Outputting the record " + count_PURCHASE_ORDER_HEADER_2_UPDATE_tMap_4 + " of the output table 'PURCHASE_ORDER_HEADER_2_UPDATE'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "PURCHASE_ORDER_HEADER_2_UPDATE"
if(PURCHASE_ORDER_HEADER_2_UPDATE != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PURCHASE_ORDER_HEADER_2_UPDATE"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("PURCHASE_ORDER_HEADER_2_UPDATE - " + (PURCHASE_ORDER_HEADER_2_UPDATE==null? "": PURCHASE_ORDER_HEADER_2_UPDATE.toLogString()));
    			}
    		



        whetherReject_tDBOutput_1 = false;
                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SMS_CONFIRMED_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(1, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.SMS_CONFIRMED_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_CONFIRMED_SHIP_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_CONFIRMED_SHIP_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SCHEDULED_PO_RECEIPT_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.SCHEDULED_PO_RECEIPT_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_PICKUP_ALLOW_TYPE == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_PICKUP_ALLOW_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(5, PURCHASE_ORDER_HEADER_2_UPDATE.PICKUP_ALLOW_FROM_BRACKET);

                    pstmt_tDBOutput_1.setBigDecimal(6, PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_FREIGHT_RATE);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_FREIGHT_TYPE == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_FREIGHT_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(8, PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(9, PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(10, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_ROUNDING_VARIANCE);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SHIP_WITH_NEXT_ORDER_IND == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, PURCHASE_ORDER_HEADER_2_UPDATE.SHIP_WITH_NEXT_ORDER_IND);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CUST_REFERENCE_ORDER_NO == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, PURCHASE_ORDER_HEADER_2_UPDATE.CUST_REFERENCE_ORDER_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.OUTSIDE_WHSE_ID == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, PURCHASE_ORDER_HEADER_2_UPDATE.OUTSIDE_WHSE_ID);
}

                    pstmt_tDBOutput_1.setBigDecimal(14, PURCHASE_ORDER_HEADER_2_UPDATE.RECOMMENDED_ORDER_SEQ_NO);

                    pstmt_tDBOutput_1.setBigDecimal(15, PURCHASE_ORDER_HEADER_2_UPDATE.SYSCO_BRACKET_NO);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.BUYER_NO == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, PURCHASE_ORDER_HEADER_2_UPDATE.BUYER_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.ORDER_GROUP == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, PURCHASE_ORDER_HEADER_2_UPDATE.ORDER_GROUP);
}

                    pstmt_tDBOutput_1.setBigDecimal(18, PURCHASE_ORDER_HEADER_2_UPDATE.BUYING_GROUP);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_PRIMARY_STATUS == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, PURCHASE_ORDER_HEADER_2_UPDATE.PO_PRIMARY_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_SECONDARY_STATUS == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, PURCHASE_ORDER_HEADER_2_UPDATE.PO_SECONDARY_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_IN_USE_FLAG == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, PURCHASE_ORDER_HEADER_2_UPDATE.PO_IN_USE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.WHSE_CHANGE_CODE == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, PURCHASE_ORDER_HEADER_2_UPDATE.WHSE_CHANGE_CODE);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_VALID_PRICING_FLAG == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, PURCHASE_ORDER_HEADER_2_UPDATE.PO_VALID_PRICING_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_TYPE == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(24, PURCHASE_ORDER_HEADER_2_UPDATE.PO_TYPE);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.DEMAND_STATUS == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, PURCHASE_ORDER_HEADER_2_UPDATE.DEMAND_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.BACKORDER_FLAG == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, PURCHASE_ORDER_HEADER_2_UPDATE.BACKORDER_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PROC_BILLED_VENDOR_BILLED_FLAG == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, PURCHASE_ORDER_HEADER_2_UPDATE.PROC_BILLED_VENDOR_BILLED_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_INTER_COMPANY_STMT_FLAG == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_INTER_COMPANY_STMT_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONF_STATUS == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, PURCHASE_ORDER_HEADER_2_UPDATE.CONF_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_VALID_PRICING_APPROVAL == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(30, PURCHASE_ORDER_HEADER_2_UPDATE.PO_VALID_PRICING_APPROVAL);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONF_RECVD_FLAG == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(31, PURCHASE_ORDER_HEADER_2_UPDATE.CONF_RECVD_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.WHSE_STATUS == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, PURCHASE_ORDER_HEADER_2_UPDATE.WHSE_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_CHANGED_FLAG == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, PURCHASE_ORDER_HEADER_2_UPDATE.PO_CHANGED_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PRINT_PRICE_ON_PO_FLAG == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, PURCHASE_ORDER_HEADER_2_UPDATE.PRINT_PRICE_ON_PO_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.UPDATE_LEAD_TIME_FLAG == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, PURCHASE_ORDER_HEADER_2_UPDATE.UPDATE_LEAD_TIME_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PRICE_CHANGE_FLAG == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, PURCHASE_ORDER_HEADER_2_UPDATE.PRICE_CHANGE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CARRIER_ID == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(37, PURCHASE_ORDER_HEADER_2_UPDATE.CARRIER_ID);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.REVISED_PROFORMA_FLAG == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, PURCHASE_ORDER_HEADER_2_UPDATE.REVISED_PROFORMA_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PROFORMA_INPROCESS_FLAG == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, PURCHASE_ORDER_HEADER_2_UPDATE.PROFORMA_INPROCESS_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.TRANSMIT_TO == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, PURCHASE_ORDER_HEADER_2_UPDATE.TRANSMIT_TO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.RETRANSMIT_TO_VENDOR_FLAG == null) {
pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(41, PURCHASE_ORDER_HEADER_2_UPDATE.RETRANSMIT_TO_VENDOR_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.JOB_NO == null) {
pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(42, PURCHASE_ORDER_HEADER_2_UPDATE.JOB_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PAY_TO_VENDOR_NO == null) {
pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(43, PURCHASE_ORDER_HEADER_2_UPDATE.PAY_TO_VENDOR_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VENDOR == null) {
pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(44, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VENDOR);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_TERMS == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VENDOR_TERMS == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TERMS == null) {
pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(47, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TERMS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_FREIGHT_VENDOR_TERMS == null) {
pstmt_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(48, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_FREIGHT_VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.TERMS_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(49, PURCHASE_ORDER_HEADER_2_UPDATE.TERMS_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_PLACED_WITH == null) {
pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(50, PURCHASE_ORDER_HEADER_2_UPDATE.PO_PLACED_WITH);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.LOAD_CTRL_NO == null) {
pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(51, PURCHASE_ORDER_HEADER_2_UPDATE.LOAD_CTRL_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_1.setTimestamp(52, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(52, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_1.setTimestamp(53, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(53, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_VENDOR_CONF_RECEIPT != null) {
pstmt_tDBOutput_1.setTimestamp(54, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_VENDOR_CONF_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(54, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_SHIP_PICKUP != null) {
pstmt_tDBOutput_1.setTimestamp(55, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_SHIP_PICKUP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(55, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_SHIP_PICKUP != null) {
pstmt_tDBOutput_1.setTimestamp(56, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_SHIP_PICKUP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(56, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_ORDER_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(57, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(57, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_ORDER_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(58, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(58, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_PO_NEEDED != null) {
pstmt_tDBOutput_1.setTimestamp(59, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_PO_NEEDED.getTime()));
} else {
pstmt_tDBOutput_1.setNull(59, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_PO_NEEDED != null) {
pstmt_tDBOutput_1.setTimestamp(60, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_PO_NEEDED.getTime()));
} else {
pstmt_tDBOutput_1.setNull(60, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_TRANSMISSION_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(61, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.PO_TRANSMISSION_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(61, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_PO_ACCEPTED != null) {
pstmt_tDBOutput_1.setTimestamp(62, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_PO_ACCEPTED.getTime()));
} else {
pstmt_tDBOutput_1.setNull(62, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_PO_ACCEPTED != null) {
pstmt_tDBOutput_1.setTimestamp(63, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_PO_ACCEPTED.getTime()));
} else {
pstmt_tDBOutput_1.setNull(63, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_ACTUAL_RECEIPT != null) {
pstmt_tDBOutput_1.setTimestamp(64, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.BUSINESS_DATE_ACTUAL_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(64, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_ACTUAL_RECEIPT != null) {
pstmt_tDBOutput_1.setTimestamp(65, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_DATE_ACTUAL_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(65, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(66, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(66, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_VENDOR_CONF_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(67, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CALENDAR_VENDOR_CONF_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(67, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_1.setBigDecimal(68, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_LINES);

                    pstmt_tDBOutput_1.setBigDecimal(69, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_CASES);

                    pstmt_tDBOutput_1.setBigDecimal(70, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_CUBE);

                    pstmt_tDBOutput_1.setBigDecimal(71, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_NET_WGT);

                    pstmt_tDBOutput_1.setBigDecimal(72, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_GROSS_WGT);

                    pstmt_tDBOutput_1.setBigDecimal(73, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_VENDOR_PALLETS);

                    pstmt_tDBOutput_1.setBigDecimal(74, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_VENDOR_UNITS);

                    pstmt_tDBOutput_1.setBigDecimal(75, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_FOB_COST);

                    pstmt_tDBOutput_1.setBigDecimal(76, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_FREIGHT_COST);

                    pstmt_tDBOutput_1.setBigDecimal(77, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_AP_COST);

                    pstmt_tDBOutput_1.setBigDecimal(78, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_PICKUP_ALLOW);

                    pstmt_tDBOutput_1.setBigDecimal(79, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_PICKUP_ALLOW_RATE);

                    pstmt_tDBOutput_1.setBigDecimal(80, PURCHASE_ORDER_HEADER_2_UPDATE.PICKUP_ALLOW_TO_BRACKET);

                    pstmt_tDBOutput_1.setBigDecimal(81, PURCHASE_ORDER_HEADER_2_UPDATE.WHSE_UNLOAD_CHARGE);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.WHSE_UNLOAD_CHARGE_TYPE == null) {
pstmt_tDBOutput_1.setNull(82, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(82, PURCHASE_ORDER_HEADER_2_UPDATE.WHSE_UNLOAD_CHARGE_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(83, PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_NON_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(84, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_WHSE_PALLETS);

                    pstmt_tDBOutput_1.setBigDecimal(85, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_FREIGHT_RATE);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_FREIGHT_RATE_TYPE == null) {
pstmt_tDBOutput_1.setNull(86, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(86, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_FREIGHT_RATE_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(87, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_UNLOADING_CHARGE);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_UNLOADING_CHRG_TYPE == null) {
pstmt_tDBOutput_1.setNull(88, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(88, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_UNLOADING_CHRG_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(89, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_PICKUP_ALLOW_RATE);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_PICKUP_ALLOW_TYPE == null) {
pstmt_tDBOutput_1.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(90, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_PICKUP_ALLOW_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(91, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET);

                    pstmt_tDBOutput_1.setBigDecimal(92, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_PICKUP_ALLOW_TO_BRACKET);

                    pstmt_tDBOutput_1.setBigDecimal(93, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_LINES);

                    pstmt_tDBOutput_1.setBigDecimal(94, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTA_CASES);

                    pstmt_tDBOutput_1.setBigDecimal(95, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIMRED_TOTAL_CUBE);

                    pstmt_tDBOutput_1.setBigDecimal(96, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_NET_WGT);

                    pstmt_tDBOutput_1.setBigDecimal(97, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_GROSS_WGT);

                    pstmt_tDBOutput_1.setBigDecimal(98, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_VENDOR_PALLETS);

                    pstmt_tDBOutput_1.setBigDecimal(99, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_VENDOR_UNITS);

                    pstmt_tDBOutput_1.setBigDecimal(100, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_FOB_COST);

                    pstmt_tDBOutput_1.setBigDecimal(101, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_FREIGHT_COST);

                    pstmt_tDBOutput_1.setBigDecimal(102, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_AP_COST);

                    pstmt_tDBOutput_1.setBigDecimal(103, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_PICKUP_ALLOW);

                    pstmt_tDBOutput_1.setBigDecimal(104, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(105, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(106, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(107, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(108, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_UNLOADING_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(109, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_BRACKET_DIFF);

                    pstmt_tDBOutput_1.setBigDecimal(110, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_TOTAL_WHSE_PALLETS);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_USER == null) {
pstmt_tDBOutput_1.setNull(111, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(111, PURCHASE_ORDER_HEADER_2_UPDATE.CONFIRMED_USER);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_CONF_NO == null) {
pstmt_tDBOutput_1.setNull(112, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(112, PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_CONF_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_CONF_METHOD == null) {
pstmt_tDBOutput_1.setNull(113, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(113, PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_CONF_METHOD);
}

                    pstmt_tDBOutput_1.setBigDecimal(114, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_LINES);

                    pstmt_tDBOutput_1.setBigDecimal(115, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_CASES);

                    pstmt_tDBOutput_1.setBigDecimal(116, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_CUBE);

                    pstmt_tDBOutput_1.setBigDecimal(117, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_NET_WGT);

                    pstmt_tDBOutput_1.setBigDecimal(118, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_GROSS_WGT);

                    pstmt_tDBOutput_1.setBigDecimal(119, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_VENDOR_PALLETS);

                    pstmt_tDBOutput_1.setBigDecimal(120, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_WHSE_PALLETS);

                    pstmt_tDBOutput_1.setBigDecimal(121, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_VENDOR_UNITS);

                    pstmt_tDBOutput_1.setBigDecimal(122, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_FOB_COST);

                    pstmt_tDBOutput_1.setBigDecimal(123, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_FREIGHT_COST);

                    pstmt_tDBOutput_1.setBigDecimal(124, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_AP_COST);

                    pstmt_tDBOutput_1.setBigDecimal(125, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_BRACKET_DIFF);

                    pstmt_tDBOutput_1.setBigDecimal(126, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_PICKUP_ALLOW);

                    pstmt_tDBOutput_1.setBigDecimal(127, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_RECVD_UNLOADING_CHARGE);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PROFORMA_STATUS == null) {
pstmt_tDBOutput_1.setNull(128, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(128, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PROFORMA_STATUS);
}

                    pstmt_tDBOutput_1.setBigDecimal(129, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PROFORMA_NET_AMT);

                    pstmt_tDBOutput_1.setBigDecimal(130, PURCHASE_ORDER_HEADER_2_UPDATE.UNMATCHED_MERCH_PROFROMA_NET_AMT);

                    pstmt_tDBOutput_1.setBigDecimal(131, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_AMT_TO_BE_VOUCH);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_MATCHED_STATUS == null) {
pstmt_tDBOutput_1.setNull(132, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(132, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_MATCHED_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_VOUCH_STATUS == null) {
pstmt_tDBOutput_1.setNull(133, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(133, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_VOUCH_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PAID_STATUS == null) {
pstmt_tDBOutput_1.setNull(134, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(134, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PAID_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PRICE_DIFF_HEADER_STATUS == null) {
pstmt_tDBOutput_1.setNull(135, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(135, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PRICE_DIFF_HEADER_STATUS);
}

                    pstmt_tDBOutput_1.setBigDecimal(136, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PRICE_DIFF_ERROR_LINE_COUNT);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_QTY_DIFF_HEADER_STATUS == null) {
pstmt_tDBOutput_1.setNull(137, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(137, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_QTY_DIFF_HEADER_STATUS);
}

                    pstmt_tDBOutput_1.setBigDecimal(138, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_QTY_DIFF_ERROR_LINE_COUNT);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PAYMENT_DUE_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(139, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_PAYMENT_DUE_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(139, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_1.setBigDecimal(140, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_CASH_DISC);

                    pstmt_tDBOutput_1.setBigDecimal(141, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_VOUCH_AMT);

                    pstmt_tDBOutput_1.setBigDecimal(142, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_ROUNDING_VAR);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_VENDOR_INTERCOM_BILLED_FLAG == null) {
pstmt_tDBOutput_1.setNull(143, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(143, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_VENDOR_INTERCOM_BILLED_FLAG);
}

                    pstmt_tDBOutput_1.setBigDecimal(144, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_VAR_AMT);

                    pstmt_tDBOutput_1.setBigDecimal(145, PURCHASE_ORDER_HEADER_2_UPDATE.MERCH_FREIGHT_AMT);

                    pstmt_tDBOutput_1.setBigDecimal(146, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PROFORMA_NET_AMT);

                    pstmt_tDBOutput_1.setBigDecimal(147, PURCHASE_ORDER_HEADER_2_UPDATE.UNMATCHED_FREIGHT_PROFORMA_NET_AMT);

                    pstmt_tDBOutput_1.setBigDecimal(148, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_AMT_TO_BE_VOUCH);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_MATCHED_STATUS == null) {
pstmt_tDBOutput_1.setNull(149, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(149, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_MATCHED_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VOUCH_STATUS == null) {
pstmt_tDBOutput_1.setNull(150, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(150, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VOUCH_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PAID_STATUS == null) {
pstmt_tDBOutput_1.setNull(151, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(151, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PAID_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_DIFF_HEADER_STATUS == null) {
pstmt_tDBOutput_1.setNull(152, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(152, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_DIFF_HEADER_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PAYMENT_DUE_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(153, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PAYMENT_DUE_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(153, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_CLAIM_STATUS == null) {
pstmt_tDBOutput_1.setNull(154, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(154, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_CLAIM_STATUS);
}

                    pstmt_tDBOutput_1.setBigDecimal(155, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_CASH_DISC);

                    pstmt_tDBOutput_1.setBigDecimal(156, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VARIANCE_AMT);

                    pstmt_tDBOutput_1.setBigDecimal(157, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VOUCH_AMT);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_INV_NO == null) {
pstmt_tDBOutput_1.setNull(158, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(158, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_INV_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_INV_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(159, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(159, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG == null) {
pstmt_tDBOutput_1.setNull(160, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(160, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG);
}

                    pstmt_tDBOutput_1.setBigDecimal(161, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_VENDOR_SHORT_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(162, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(163, PURCHASE_ORDER_HEADER_2_UPDATE.TOTAL_DAMAGED_ACCEPTED_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(164, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PAID_AMOUNT);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SHIP_TO_CUST == null) {
pstmt_tDBOutput_1.setNull(165, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(165, PURCHASE_ORDER_HEADER_2_UPDATE.SHIP_TO_CUST);
}

                    pstmt_tDBOutput_1.setBigDecimal(166, PURCHASE_ORDER_HEADER_2_UPDATE.CUST_ORDER_NO);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SHIP_FROM_NAME == null) {
pstmt_tDBOutput_1.setNull(167, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(167, PURCHASE_ORDER_HEADER_2_UPDATE.SHIP_FROM_NAME);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SHIPPING_ADDRESS_ID == null) {
pstmt_tDBOutput_1.setNull(168, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(168, PURCHASE_ORDER_HEADER_2_UPDATE.SHIPPING_ADDRESS_ID);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.RESERVED_RE_RECOMMEND_FLAG == null) {
pstmt_tDBOutput_1.setNull(169, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(169, PURCHASE_ORDER_HEADER_2_UPDATE.RESERVED_RE_RECOMMEND_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.RECOMMENDED_ORDER_FLAG == null) {
pstmt_tDBOutput_1.setNull(170, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(170, PURCHASE_ORDER_HEADER_2_UPDATE.RECOMMENDED_ORDER_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FAILED_SCORECARD_FLAG == null) {
pstmt_tDBOutput_1.setNull(171, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(171, PURCHASE_ORDER_HEADER_2_UPDATE.FAILED_SCORECARD_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_1.setNull(172, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(172, PURCHASE_ORDER_HEADER_2_UPDATE.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PRICE_BRACKET_SOURCE_CODE == null) {
pstmt_tDBOutput_1.setNull(173, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(173, PURCHASE_ORDER_HEADER_2_UPDATE.PRICE_BRACKET_SOURCE_CODE);
}

                    pstmt_tDBOutput_1.setBigDecimal(174, PURCHASE_ORDER_HEADER_2_UPDATE.SHORT_PERCENT_TO_BACKORDER);

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SECONDARY_PO_TYPE == null) {
pstmt_tDBOutput_1.setNull(175, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(175, PURCHASE_ORDER_HEADER_2_UPDATE.SECONDARY_PO_TYPE);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.TRANSMIT_FLAG == null) {
pstmt_tDBOutput_1.setNull(176, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(176, PURCHASE_ORDER_HEADER_2_UPDATE.TRANSMIT_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.TRANSMIT_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(177, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.TRANSMIT_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(177, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_ERROR_IND == null) {
pstmt_tDBOutput_1.setNull(178, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(178, PURCHASE_ORDER_HEADER_2_UPDATE.PO_ERROR_IND);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.STOCK_IND == null) {
pstmt_tDBOutput_1.setNull(179, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(179, PURCHASE_ORDER_HEADER_2_UPDATE.STOCK_IND);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PO_CLOSE_TIME != null) {
pstmt_tDBOutput_1.setTimestamp(180, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.PO_CLOSE_TIME.getTime()));
} else {
pstmt_tDBOutput_1.setNull(180, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.REPLENISHMENT_SYSTEM == null) {
pstmt_tDBOutput_1.setNull(181, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(181, PURCHASE_ORDER_HEADER_2_UPDATE.REPLENISHMENT_SYSTEM);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SHIPMENT_NOTICE_NO == null) {
pstmt_tDBOutput_1.setNull(182, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(182, PURCHASE_ORDER_HEADER_2_UPDATE.SHIPMENT_NOTICE_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PROFORMA_STATUS == null) {
pstmt_tDBOutput_1.setNull(183, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(183, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PROFORMA_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SHIPMENT_ID == null) {
pstmt_tDBOutput_1.setNull(184, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(184, PURCHASE_ORDER_HEADER_2_UPDATE.SHIPMENT_ID);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PROCESS_FLAG == null) {
pstmt_tDBOutput_1.setNull(185, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(185, PURCHASE_ORDER_HEADER_2_UPDATE.FREIGHT_PROCESS_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_1.setNull(186, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(186, PURCHASE_ORDER_HEADER_2_UPDATE.ORIG_PURCHASE_ORDER_NO);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(187, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(187, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CREATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(188, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(188, PURCHASE_ORDER_HEADER_2_UPDATE.CREATED_USER_ID);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.IS_ACTIVE == null) {
pstmt_tDBOutput_1.setNull(189, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(189, PURCHASE_ORDER_HEADER_2_UPDATE.IS_ACTIVE);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.V3PF_SVOP == null) {
pstmt_tDBOutput_1.setNull(190, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(190, PURCHASE_ORDER_HEADER_2_UPDATE.V3PF_SVOP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CONFERENCE_TYPE == null) {
pstmt_tDBOutput_1.setNull(191, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(191, PURCHASE_ORDER_HEADER_2_UPDATE.CONFERENCE_TYPE);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.NEXT_CONF_RECVD_FLAG == null) {
pstmt_tDBOutput_1.setNull(192, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(192, PURCHASE_ORDER_HEADER_2_UPDATE.NEXT_CONF_RECVD_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(193, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(193, PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_USER_ID);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_1.setNull(194, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(194, PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_PROGRAM_ID);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(195, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(195, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.IS_DELETED == null) {
pstmt_tDBOutput_1.setNull(196, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(196, PURCHASE_ORDER_HEADER_2_UPDATE.IS_DELETED);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CREATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(197, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(197, PURCHASE_ORDER_HEADER_2_UPDATE.CREATED_ORIGIN);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(198, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(198, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(199, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(199, PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_ORIGIN);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(200, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2_UPDATE.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(200, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PICKUP_ALLOWANCE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_1.setNull(201, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(201, PURCHASE_ORDER_HEADER_2_UPDATE.PICKUP_ALLOWANCE_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2_UPDATE.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_1.setNull(202 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(202 + count_tDBOutput_1, PURCHASE_ORDER_HEADER_2_UPDATE.PURCHASE_ORDER_NO);
}


                    if(PURCHASE_ORDER_HEADER_2_UPDATE.SITE_ID == null) {
pstmt_tDBOutput_1.setNull(203 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(203 + count_tDBOutput_1, PURCHASE_ORDER_HEADER_2_UPDATE.SITE_ID);
}


    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Adding the record ")  + (nb_line_tDBOutput_1)  + (" to the ")  + ("UPDATE")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
            	    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
			    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "PURCHASE_ORDER_HEADER_2_UPDATE"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
	    		log.debug("tDBInput_1 - Closing the connection to the database.");
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_1", end_Hash.get("tDBInput_1")-start_Hash.get("tDBInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_4 - Written records count in the table 'PURCHASE_ORDER_HEADER_2_UPDATE': " + count_PURCHASE_ORDER_HEADER_2_UPDATE_tMap_4 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Done.") );

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("UPDATE")  + (" batch.") );
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("UPDATE")  + (" batch execution has succeeded.") );
				}
		    	
		    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
			}
			conn_tDBOutput_1.commit();
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_1 = 0;
			}
			commitCounter_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_1 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Has ")  + ("updated")  + (" ")  + (nb_line_update_tDBOutput_1)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PURCHASE_ORDER_HEADER_2_UPDATE");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Done.") );

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_1", end_Hash.get("tDBOutput_1")-start_Hash.get("tDBOutput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_1.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
            log.error("tDBOutput_1 - "  + (errorMessage_tDBOutput_1) );
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Starting the Migrating Data from IMHAV3PF to PURCHASE_ORDER_HEADER...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class PURCHASE_ORDER_HEADER_2Struct implements routines.system.IPersistableRow<PURCHASE_ORDER_HEADER_2Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ORDER_CTRL_NO;

				public String getORDER_CTRL_NO () {
					return this.ORDER_CTRL_NO;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String SHIPPING_POINT_SHIP_FROM;

				public String getSHIPPING_POINT_SHIP_FROM () {
					return this.SHIPPING_POINT_SHIP_FROM;
				}
				
			    public java.util.Date SMS_CONFIRMED_DATE;

				public java.util.Date getSMS_CONFIRMED_DATE () {
					return this.SMS_CONFIRMED_DATE;
				}
				
			    public java.util.Date VENDOR_CONFIRMED_SHIP_DATE;

				public java.util.Date getVENDOR_CONFIRMED_SHIP_DATE () {
					return this.VENDOR_CONFIRMED_SHIP_DATE;
				}
				
			    public java.util.Date SCHEDULED_PO_RECEIPT_TIMESTAMP;

				public java.util.Date getSCHEDULED_PO_RECEIPT_TIMESTAMP () {
					return this.SCHEDULED_PO_RECEIPT_TIMESTAMP;
				}
				
			    public String ORIG_PICKUP_ALLOW_TYPE;

				public String getORIG_PICKUP_ALLOW_TYPE () {
					return this.ORIG_PICKUP_ALLOW_TYPE;
				}
				
			    public BigDecimal PICKUP_ALLOW_FROM_BRACKET;

				public BigDecimal getPICKUP_ALLOW_FROM_BRACKET () {
					return this.PICKUP_ALLOW_FROM_BRACKET;
				}
				
			    public BigDecimal ORIG_FREIGHT_RATE;

				public BigDecimal getORIG_FREIGHT_RATE () {
					return this.ORIG_FREIGHT_RATE;
				}
				
			    public String ORIG_FREIGHT_TYPE;

				public String getORIG_FREIGHT_TYPE () {
					return this.ORIG_FREIGHT_TYPE;
				}
				
			    public BigDecimal ORIG_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_MERCH_ALLOW_CHARGE () {
					return this.ORIG_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal ORIG_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getORIG_FREIGHT_ALLOW_CHARGE () {
					return this.ORIG_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal FREIGHT_ROUNDING_VARIANCE;

				public BigDecimal getFREIGHT_ROUNDING_VARIANCE () {
					return this.FREIGHT_ROUNDING_VARIANCE;
				}
				
			    public String SHIP_WITH_NEXT_ORDER_IND;

				public String getSHIP_WITH_NEXT_ORDER_IND () {
					return this.SHIP_WITH_NEXT_ORDER_IND;
				}
				
			    public String CUST_REFERENCE_ORDER_NO;

				public String getCUST_REFERENCE_ORDER_NO () {
					return this.CUST_REFERENCE_ORDER_NO;
				}
				
			    public String OUTSIDE_WHSE_ID;

				public String getOUTSIDE_WHSE_ID () {
					return this.OUTSIDE_WHSE_ID;
				}
				
			    public BigDecimal RECOMMENDED_ORDER_SEQ_NO;

				public BigDecimal getRECOMMENDED_ORDER_SEQ_NO () {
					return this.RECOMMENDED_ORDER_SEQ_NO;
				}
				
			    public BigDecimal SYSCO_BRACKET_NO;

				public BigDecimal getSYSCO_BRACKET_NO () {
					return this.SYSCO_BRACKET_NO;
				}
				
			    public String BUYER_NO;

				public String getBUYER_NO () {
					return this.BUYER_NO;
				}
				
			    public String ORDER_GROUP;

				public String getORDER_GROUP () {
					return this.ORDER_GROUP;
				}
				
			    public BigDecimal BUYING_GROUP;

				public BigDecimal getBUYING_GROUP () {
					return this.BUYING_GROUP;
				}
				
			    public String PO_PRIMARY_STATUS;

				public String getPO_PRIMARY_STATUS () {
					return this.PO_PRIMARY_STATUS;
				}
				
			    public String PO_SECONDARY_STATUS;

				public String getPO_SECONDARY_STATUS () {
					return this.PO_SECONDARY_STATUS;
				}
				
			    public String PO_IN_USE_FLAG;

				public String getPO_IN_USE_FLAG () {
					return this.PO_IN_USE_FLAG;
				}
				
			    public String WHSE_CHANGE_CODE;

				public String getWHSE_CHANGE_CODE () {
					return this.WHSE_CHANGE_CODE;
				}
				
			    public String PO_VALID_PRICING_FLAG;

				public String getPO_VALID_PRICING_FLAG () {
					return this.PO_VALID_PRICING_FLAG;
				}
				
			    public String PO_TYPE;

				public String getPO_TYPE () {
					return this.PO_TYPE;
				}
				
			    public String DEMAND_STATUS;

				public String getDEMAND_STATUS () {
					return this.DEMAND_STATUS;
				}
				
			    public String BACKORDER_FLAG;

				public String getBACKORDER_FLAG () {
					return this.BACKORDER_FLAG;
				}
				
			    public String PROC_BILLED_VENDOR_BILLED_FLAG;

				public String getPROC_BILLED_VENDOR_BILLED_FLAG () {
					return this.PROC_BILLED_VENDOR_BILLED_FLAG;
				}
				
			    public String FREIGHT_INTER_COMPANY_STMT_FLAG;

				public String getFREIGHT_INTER_COMPANY_STMT_FLAG () {
					return this.FREIGHT_INTER_COMPANY_STMT_FLAG;
				}
				
			    public String CONF_STATUS;

				public String getCONF_STATUS () {
					return this.CONF_STATUS;
				}
				
			    public String PO_VALID_PRICING_APPROVAL;

				public String getPO_VALID_PRICING_APPROVAL () {
					return this.PO_VALID_PRICING_APPROVAL;
				}
				
			    public String CONF_RECVD_FLAG;

				public String getCONF_RECVD_FLAG () {
					return this.CONF_RECVD_FLAG;
				}
				
			    public String WHSE_STATUS;

				public String getWHSE_STATUS () {
					return this.WHSE_STATUS;
				}
				
			    public String PO_CHANGED_FLAG;

				public String getPO_CHANGED_FLAG () {
					return this.PO_CHANGED_FLAG;
				}
				
			    public String PRINT_PRICE_ON_PO_FLAG;

				public String getPRINT_PRICE_ON_PO_FLAG () {
					return this.PRINT_PRICE_ON_PO_FLAG;
				}
				
			    public String UPDATE_LEAD_TIME_FLAG;

				public String getUPDATE_LEAD_TIME_FLAG () {
					return this.UPDATE_LEAD_TIME_FLAG;
				}
				
			    public String PRICE_CHANGE_FLAG;

				public String getPRICE_CHANGE_FLAG () {
					return this.PRICE_CHANGE_FLAG;
				}
				
			    public String CARRIER_ID;

				public String getCARRIER_ID () {
					return this.CARRIER_ID;
				}
				
			    public String REVISED_PROFORMA_FLAG;

				public String getREVISED_PROFORMA_FLAG () {
					return this.REVISED_PROFORMA_FLAG;
				}
				
			    public String PROFORMA_INPROCESS_FLAG;

				public String getPROFORMA_INPROCESS_FLAG () {
					return this.PROFORMA_INPROCESS_FLAG;
				}
				
			    public String TRANSMIT_TO;

				public String getTRANSMIT_TO () {
					return this.TRANSMIT_TO;
				}
				
			    public String RETRANSMIT_TO_VENDOR_FLAG;

				public String getRETRANSMIT_TO_VENDOR_FLAG () {
					return this.RETRANSMIT_TO_VENDOR_FLAG;
				}
				
			    public String JOB_NO;

				public String getJOB_NO () {
					return this.JOB_NO;
				}
				
			    public String PAY_TO_VENDOR_NO;

				public String getPAY_TO_VENDOR_NO () {
					return this.PAY_TO_VENDOR_NO;
				}
				
			    public String FREIGHT_VENDOR;

				public String getFREIGHT_VENDOR () {
					return this.FREIGHT_VENDOR;
				}
				
			    public String VENDOR_TERMS;

				public String getVENDOR_TERMS () {
					return this.VENDOR_TERMS;
				}
				
			    public String FREIGHT_VENDOR_TERMS;

				public String getFREIGHT_VENDOR_TERMS () {
					return this.FREIGHT_VENDOR_TERMS;
				}
				
			    public String CONFIRMED_TERMS;

				public String getCONFIRMED_TERMS () {
					return this.CONFIRMED_TERMS;
				}
				
			    public String CONFIRMED_FREIGHT_VENDOR_TERMS;

				public String getCONFIRMED_FREIGHT_VENDOR_TERMS () {
					return this.CONFIRMED_FREIGHT_VENDOR_TERMS;
				}
				
			    public String TERMS_OVERRIDE_FLAG;

				public String getTERMS_OVERRIDE_FLAG () {
					return this.TERMS_OVERRIDE_FLAG;
				}
				
			    public String PO_PLACED_WITH;

				public String getPO_PLACED_WITH () {
					return this.PO_PLACED_WITH;
				}
				
			    public String LOAD_CTRL_NO;

				public String getLOAD_CTRL_NO () {
					return this.LOAD_CTRL_NO;
				}
				
			    public java.util.Date BUSINESS_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ANTICIPATED_RECEIPT () {
					return this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ANTICIPATED_RECEIPT () {
					return this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_VENDOR_CONF_RECEIPT;

				public java.util.Date getCALENDAR_VENDOR_CONF_RECEIPT () {
					return this.CALENDAR_VENDOR_CONF_RECEIPT;
				}
				
			    public java.util.Date BUSINESS_DATE_SHIP_PICKUP;

				public java.util.Date getBUSINESS_DATE_SHIP_PICKUP () {
					return this.BUSINESS_DATE_SHIP_PICKUP;
				}
				
			    public java.util.Date CALENDAR_DATE_SHIP_PICKUP;

				public java.util.Date getCALENDAR_DATE_SHIP_PICKUP () {
					return this.CALENDAR_DATE_SHIP_PICKUP;
				}
				
			    public java.util.Date BUSINESS_ORDER_DATE;

				public java.util.Date getBUSINESS_ORDER_DATE () {
					return this.BUSINESS_ORDER_DATE;
				}
				
			    public java.util.Date CALENDAR_ORDER_DATE;

				public java.util.Date getCALENDAR_ORDER_DATE () {
					return this.CALENDAR_ORDER_DATE;
				}
				
			    public java.util.Date BUSINESS_DATE_PO_NEEDED;

				public java.util.Date getBUSINESS_DATE_PO_NEEDED () {
					return this.BUSINESS_DATE_PO_NEEDED;
				}
				
			    public java.util.Date CALENDAR_DATE_PO_NEEDED;

				public java.util.Date getCALENDAR_DATE_PO_NEEDED () {
					return this.CALENDAR_DATE_PO_NEEDED;
				}
				
			    public java.util.Date PO_TRANSMISSION_TIMESTAMP;

				public java.util.Date getPO_TRANSMISSION_TIMESTAMP () {
					return this.PO_TRANSMISSION_TIMESTAMP;
				}
				
			    public java.util.Date BUSINESS_DATE_PO_ACCEPTED;

				public java.util.Date getBUSINESS_DATE_PO_ACCEPTED () {
					return this.BUSINESS_DATE_PO_ACCEPTED;
				}
				
			    public java.util.Date CALENDAR_DATE_PO_ACCEPTED;

				public java.util.Date getCALENDAR_DATE_PO_ACCEPTED () {
					return this.CALENDAR_DATE_PO_ACCEPTED;
				}
				
			    public java.util.Date BUSINESS_DATE_ACTUAL_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ACTUAL_RECEIPT () {
					return this.BUSINESS_DATE_ACTUAL_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_ACTUAL_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ACTUAL_RECEIPT () {
					return this.CALENDAR_DATE_ACTUAL_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE;

				public java.util.Date getCALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE () {
					return this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE;
				}
				
			    public java.util.Date CALENDAR_VENDOR_CONF_DATE;

				public java.util.Date getCALENDAR_VENDOR_CONF_DATE () {
					return this.CALENDAR_VENDOR_CONF_DATE;
				}
				
			    public BigDecimal TOTAL_LINES;

				public BigDecimal getTOTAL_LINES () {
					return this.TOTAL_LINES;
				}
				
			    public BigDecimal TOTAL_CASES;

				public BigDecimal getTOTAL_CASES () {
					return this.TOTAL_CASES;
				}
				
			    public BigDecimal TOTAL_CUBE;

				public BigDecimal getTOTAL_CUBE () {
					return this.TOTAL_CUBE;
				}
				
			    public BigDecimal TOTAL_NET_WGT;

				public BigDecimal getTOTAL_NET_WGT () {
					return this.TOTAL_NET_WGT;
				}
				
			    public BigDecimal TOTAL_GROSS_WGT;

				public BigDecimal getTOTAL_GROSS_WGT () {
					return this.TOTAL_GROSS_WGT;
				}
				
			    public BigDecimal TOTAL_VENDOR_PALLETS;

				public BigDecimal getTOTAL_VENDOR_PALLETS () {
					return this.TOTAL_VENDOR_PALLETS;
				}
				
			    public BigDecimal TOTAL_VENDOR_UNITS;

				public BigDecimal getTOTAL_VENDOR_UNITS () {
					return this.TOTAL_VENDOR_UNITS;
				}
				
			    public BigDecimal TOTAL_FOB_COST;

				public BigDecimal getTOTAL_FOB_COST () {
					return this.TOTAL_FOB_COST;
				}
				
			    public BigDecimal TOTAL_FREIGHT_COST;

				public BigDecimal getTOTAL_FREIGHT_COST () {
					return this.TOTAL_FREIGHT_COST;
				}
				
			    public BigDecimal TOTAL_AP_COST;

				public BigDecimal getTOTAL_AP_COST () {
					return this.TOTAL_AP_COST;
				}
				
			    public BigDecimal TOTAL_PICKUP_ALLOW;

				public BigDecimal getTOTAL_PICKUP_ALLOW () {
					return this.TOTAL_PICKUP_ALLOW;
				}
				
			    public BigDecimal TOTAL_PICKUP_ALLOW_RATE;

				public BigDecimal getTOTAL_PICKUP_ALLOW_RATE () {
					return this.TOTAL_PICKUP_ALLOW_RATE;
				}
				
			    public BigDecimal PICKUP_ALLOW_TO_BRACKET;

				public BigDecimal getPICKUP_ALLOW_TO_BRACKET () {
					return this.PICKUP_ALLOW_TO_BRACKET;
				}
				
			    public BigDecimal WHSE_UNLOAD_CHARGE;

				public BigDecimal getWHSE_UNLOAD_CHARGE () {
					return this.WHSE_UNLOAD_CHARGE;
				}
				
			    public String WHSE_UNLOAD_CHARGE_TYPE;

				public String getWHSE_UNLOAD_CHARGE_TYPE () {
					return this.WHSE_UNLOAD_CHARGE_TYPE;
				}
				
			    public BigDecimal ORIG_NON_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_NON_DIST_MERCH_ALLOW_CHARGE () {
					return this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal TOTAL_WHSE_PALLETS;

				public BigDecimal getTOTAL_WHSE_PALLETS () {
					return this.TOTAL_WHSE_PALLETS;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_RATE;

				public BigDecimal getCONFIRMED_FREIGHT_RATE () {
					return this.CONFIRMED_FREIGHT_RATE;
				}
				
			    public String CONFIRMED_FREIGHT_RATE_TYPE;

				public String getCONFIRMED_FREIGHT_RATE_TYPE () {
					return this.CONFIRMED_FREIGHT_RATE_TYPE;
				}
				
			    public BigDecimal CONFIRMED_UNLOADING_CHARGE;

				public BigDecimal getCONFIRMED_UNLOADING_CHARGE () {
					return this.CONFIRMED_UNLOADING_CHARGE;
				}
				
			    public String CONFIRMED_UNLOADING_CHRG_TYPE;

				public String getCONFIRMED_UNLOADING_CHRG_TYPE () {
					return this.CONFIRMED_UNLOADING_CHRG_TYPE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_RATE;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_RATE () {
					return this.CONFIRMED_PICKUP_ALLOW_RATE;
				}
				
			    public String CONFIRMED_PICKUP_ALLOW_TYPE;

				public String getCONFIRMED_PICKUP_ALLOW_TYPE () {
					return this.CONFIRMED_PICKUP_ALLOW_TYPE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_FROM_BRACKET;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_FROM_BRACKET () {
					return this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_TO_BRACKET;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_TO_BRACKET () {
					return this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_LINES;

				public BigDecimal getCONFIRMED_TOTAL_LINES () {
					return this.CONFIRMED_TOTAL_LINES;
				}
				
			    public BigDecimal CONFIRMED_TOTA_CASES;

				public BigDecimal getCONFIRMED_TOTA_CASES () {
					return this.CONFIRMED_TOTA_CASES;
				}
				
			    public BigDecimal CONFIMRED_TOTAL_CUBE;

				public BigDecimal getCONFIMRED_TOTAL_CUBE () {
					return this.CONFIMRED_TOTAL_CUBE;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_NET_WGT;

				public BigDecimal getCONFIRMED_TOTAL_NET_WGT () {
					return this.CONFIRMED_TOTAL_NET_WGT;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_GROSS_WGT;

				public BigDecimal getCONFIRMED_TOTAL_GROSS_WGT () {
					return this.CONFIRMED_TOTAL_GROSS_WGT;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_VENDOR_PALLETS;

				public BigDecimal getCONFIRMED_TOTAL_VENDOR_PALLETS () {
					return this.CONFIRMED_TOTAL_VENDOR_PALLETS;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_VENDOR_UNITS;

				public BigDecimal getCONFIRMED_TOTAL_VENDOR_UNITS () {
					return this.CONFIRMED_TOTAL_VENDOR_UNITS;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_FOB_COST;

				public BigDecimal getCONFIRMED_TOTAL_FOB_COST () {
					return this.CONFIRMED_TOTAL_FOB_COST;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_FREIGHT_COST;

				public BigDecimal getCONFIRMED_TOTAL_FREIGHT_COST () {
					return this.CONFIRMED_TOTAL_FREIGHT_COST;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_AP_COST;

				public BigDecimal getCONFIRMED_TOTAL_AP_COST () {
					return this.CONFIRMED_TOTAL_AP_COST;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_PICKUP_ALLOW;

				public BigDecimal getCONFIRMED_TOTAL_PICKUP_ALLOW () {
					return this.CONFIRMED_TOTAL_PICKUP_ALLOW;
				}
				
			    public BigDecimal CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE () {
					return this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE () {
					return this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONFIRMED_MERCH_ALLOW_CHARGE () {
					return this.CONFIRMED_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONFIRMED_FREIGHT_ALLOW_CHARGE () {
					return this.CONFIRMED_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_UNLOADING_CHARGE;

				public BigDecimal getCONFIRMED_TOTAL_UNLOADING_CHARGE () {
					return this.CONFIRMED_TOTAL_UNLOADING_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_BRACKET_DIFF;

				public BigDecimal getCONFIRMED_TOTAL_BRACKET_DIFF () {
					return this.CONFIRMED_TOTAL_BRACKET_DIFF;
				}
				
			    public BigDecimal CONFIRMED_TOTAL_WHSE_PALLETS;

				public BigDecimal getCONFIRMED_TOTAL_WHSE_PALLETS () {
					return this.CONFIRMED_TOTAL_WHSE_PALLETS;
				}
				
			    public String CONFIRMED_USER;

				public String getCONFIRMED_USER () {
					return this.CONFIRMED_USER;
				}
				
			    public String VENDOR_CONF_NO;

				public String getVENDOR_CONF_NO () {
					return this.VENDOR_CONF_NO;
				}
				
			    public String VENDOR_CONF_METHOD;

				public String getVENDOR_CONF_METHOD () {
					return this.VENDOR_CONF_METHOD;
				}
				
			    public BigDecimal TOTAL_RECVD_LINES;

				public BigDecimal getTOTAL_RECVD_LINES () {
					return this.TOTAL_RECVD_LINES;
				}
				
			    public BigDecimal TOTAL_RECVD_CASES;

				public BigDecimal getTOTAL_RECVD_CASES () {
					return this.TOTAL_RECVD_CASES;
				}
				
			    public BigDecimal TOTAL_RECVD_CUBE;

				public BigDecimal getTOTAL_RECVD_CUBE () {
					return this.TOTAL_RECVD_CUBE;
				}
				
			    public BigDecimal TOTAL_RECVD_NET_WGT;

				public BigDecimal getTOTAL_RECVD_NET_WGT () {
					return this.TOTAL_RECVD_NET_WGT;
				}
				
			    public BigDecimal TOTAL_RECVD_GROSS_WGT;

				public BigDecimal getTOTAL_RECVD_GROSS_WGT () {
					return this.TOTAL_RECVD_GROSS_WGT;
				}
				
			    public BigDecimal TOTAL_RECVD_VENDOR_PALLETS;

				public BigDecimal getTOTAL_RECVD_VENDOR_PALLETS () {
					return this.TOTAL_RECVD_VENDOR_PALLETS;
				}
				
			    public BigDecimal TOTAL_RECVD_WHSE_PALLETS;

				public BigDecimal getTOTAL_RECVD_WHSE_PALLETS () {
					return this.TOTAL_RECVD_WHSE_PALLETS;
				}
				
			    public BigDecimal TOTAL_RECVD_VENDOR_UNITS;

				public BigDecimal getTOTAL_RECVD_VENDOR_UNITS () {
					return this.TOTAL_RECVD_VENDOR_UNITS;
				}
				
			    public BigDecimal TOTAL_RECVD_FOB_COST;

				public BigDecimal getTOTAL_RECVD_FOB_COST () {
					return this.TOTAL_RECVD_FOB_COST;
				}
				
			    public BigDecimal TOTAL_RECVD_FREIGHT_COST;

				public BigDecimal getTOTAL_RECVD_FREIGHT_COST () {
					return this.TOTAL_RECVD_FREIGHT_COST;
				}
				
			    public BigDecimal TOTAL_RECVD_AP_COST;

				public BigDecimal getTOTAL_RECVD_AP_COST () {
					return this.TOTAL_RECVD_AP_COST;
				}
				
			    public BigDecimal TOTAL_RECVD_BRACKET_DIFF;

				public BigDecimal getTOTAL_RECVD_BRACKET_DIFF () {
					return this.TOTAL_RECVD_BRACKET_DIFF;
				}
				
			    public BigDecimal TOTAL_RECVD_PICKUP_ALLOW;

				public BigDecimal getTOTAL_RECVD_PICKUP_ALLOW () {
					return this.TOTAL_RECVD_PICKUP_ALLOW;
				}
				
			    public BigDecimal TOTAL_RECVD_UNLOADING_CHARGE;

				public BigDecimal getTOTAL_RECVD_UNLOADING_CHARGE () {
					return this.TOTAL_RECVD_UNLOADING_CHARGE;
				}
				
			    public String MERCH_PROFORMA_STATUS;

				public String getMERCH_PROFORMA_STATUS () {
					return this.MERCH_PROFORMA_STATUS;
				}
				
			    public BigDecimal MERCH_PROFORMA_NET_AMT;

				public BigDecimal getMERCH_PROFORMA_NET_AMT () {
					return this.MERCH_PROFORMA_NET_AMT;
				}
				
			    public BigDecimal UNMATCHED_MERCH_PROFROMA_NET_AMT;

				public BigDecimal getUNMATCHED_MERCH_PROFROMA_NET_AMT () {
					return this.UNMATCHED_MERCH_PROFROMA_NET_AMT;
				}
				
			    public BigDecimal MERCH_AMT_TO_BE_VOUCH;

				public BigDecimal getMERCH_AMT_TO_BE_VOUCH () {
					return this.MERCH_AMT_TO_BE_VOUCH;
				}
				
			    public String MERCH_MATCHED_STATUS;

				public String getMERCH_MATCHED_STATUS () {
					return this.MERCH_MATCHED_STATUS;
				}
				
			    public String MERCH_VOUCH_STATUS;

				public String getMERCH_VOUCH_STATUS () {
					return this.MERCH_VOUCH_STATUS;
				}
				
			    public String MERCH_PAID_STATUS;

				public String getMERCH_PAID_STATUS () {
					return this.MERCH_PAID_STATUS;
				}
				
			    public String MERCH_PRICE_DIFF_HEADER_STATUS;

				public String getMERCH_PRICE_DIFF_HEADER_STATUS () {
					return this.MERCH_PRICE_DIFF_HEADER_STATUS;
				}
				
			    public BigDecimal MERCH_PRICE_DIFF_ERROR_LINE_COUNT;

				public BigDecimal getMERCH_PRICE_DIFF_ERROR_LINE_COUNT () {
					return this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT;
				}
				
			    public String MERCH_QTY_DIFF_HEADER_STATUS;

				public String getMERCH_QTY_DIFF_HEADER_STATUS () {
					return this.MERCH_QTY_DIFF_HEADER_STATUS;
				}
				
			    public BigDecimal MERCH_QTY_DIFF_ERROR_LINE_COUNT;

				public BigDecimal getMERCH_QTY_DIFF_ERROR_LINE_COUNT () {
					return this.MERCH_QTY_DIFF_ERROR_LINE_COUNT;
				}
				
			    public java.util.Date MERCH_PAYMENT_DUE_DATE;

				public java.util.Date getMERCH_PAYMENT_DUE_DATE () {
					return this.MERCH_PAYMENT_DUE_DATE;
				}
				
			    public BigDecimal MERCH_CASH_DISC;

				public BigDecimal getMERCH_CASH_DISC () {
					return this.MERCH_CASH_DISC;
				}
				
			    public BigDecimal MERCH_VOUCH_AMT;

				public BigDecimal getMERCH_VOUCH_AMT () {
					return this.MERCH_VOUCH_AMT;
				}
				
			    public BigDecimal MERCH_ROUNDING_VAR;

				public BigDecimal getMERCH_ROUNDING_VAR () {
					return this.MERCH_ROUNDING_VAR;
				}
				
			    public String MERCH_INV_NO;

				public String getMERCH_INV_NO () {
					return this.MERCH_INV_NO;
				}
				
			    public java.util.Date MERCH_INV_DATE;

				public java.util.Date getMERCH_INV_DATE () {
					return this.MERCH_INV_DATE;
				}
				
			    public String MERCH_VENDOR_INTERCOM_BILLED_FLAG;

				public String getMERCH_VENDOR_INTERCOM_BILLED_FLAG () {
					return this.MERCH_VENDOR_INTERCOM_BILLED_FLAG;
				}
				
			    public BigDecimal MERCH_VAR_AMT;

				public BigDecimal getMERCH_VAR_AMT () {
					return this.MERCH_VAR_AMT;
				}
				
			    public BigDecimal MERCH_FREIGHT_AMT;

				public BigDecimal getMERCH_FREIGHT_AMT () {
					return this.MERCH_FREIGHT_AMT;
				}
				
			    public BigDecimal FREIGHT_PROFORMA_NET_AMT;

				public BigDecimal getFREIGHT_PROFORMA_NET_AMT () {
					return this.FREIGHT_PROFORMA_NET_AMT;
				}
				
			    public BigDecimal UNMATCHED_FREIGHT_PROFORMA_NET_AMT;

				public BigDecimal getUNMATCHED_FREIGHT_PROFORMA_NET_AMT () {
					return this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT;
				}
				
			    public BigDecimal FREIGHT_AMT_TO_BE_VOUCH;

				public BigDecimal getFREIGHT_AMT_TO_BE_VOUCH () {
					return this.FREIGHT_AMT_TO_BE_VOUCH;
				}
				
			    public String FREIGHT_MATCHED_STATUS;

				public String getFREIGHT_MATCHED_STATUS () {
					return this.FREIGHT_MATCHED_STATUS;
				}
				
			    public String FREIGHT_VOUCH_STATUS;

				public String getFREIGHT_VOUCH_STATUS () {
					return this.FREIGHT_VOUCH_STATUS;
				}
				
			    public String FREIGHT_PAID_STATUS;

				public String getFREIGHT_PAID_STATUS () {
					return this.FREIGHT_PAID_STATUS;
				}
				
			    public String FREIGHT_DIFF_HEADER_STATUS;

				public String getFREIGHT_DIFF_HEADER_STATUS () {
					return this.FREIGHT_DIFF_HEADER_STATUS;
				}
				
			    public java.util.Date FREIGHT_PAYMENT_DUE_DATE;

				public java.util.Date getFREIGHT_PAYMENT_DUE_DATE () {
					return this.FREIGHT_PAYMENT_DUE_DATE;
				}
				
			    public String FREIGHT_CLAIM_STATUS;

				public String getFREIGHT_CLAIM_STATUS () {
					return this.FREIGHT_CLAIM_STATUS;
				}
				
			    public BigDecimal FREIGHT_CASH_DISC;

				public BigDecimal getFREIGHT_CASH_DISC () {
					return this.FREIGHT_CASH_DISC;
				}
				
			    public BigDecimal FREIGHT_VARIANCE_AMT;

				public BigDecimal getFREIGHT_VARIANCE_AMT () {
					return this.FREIGHT_VARIANCE_AMT;
				}
				
			    public BigDecimal FREIGHT_VOUCH_AMT;

				public BigDecimal getFREIGHT_VOUCH_AMT () {
					return this.FREIGHT_VOUCH_AMT;
				}
				
			    public String FREIGHT_INV_NO;

				public String getFREIGHT_INV_NO () {
					return this.FREIGHT_INV_NO;
				}
				
			    public java.util.Date FREIGHT_INV_DATE;

				public java.util.Date getFREIGHT_INV_DATE () {
					return this.FREIGHT_INV_DATE;
				}
				
			    public String FREIGHT_VENDOR_INTERCOM_BILLED_FLAG;

				public String getFREIGHT_VENDOR_INTERCOM_BILLED_FLAG () {
					return this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG;
				}
				
			    public BigDecimal TOTAL_VENDOR_SHORT_QTY;

				public BigDecimal getTOTAL_VENDOR_SHORT_QTY () {
					return this.TOTAL_VENDOR_SHORT_QTY;
				}
				
			    public BigDecimal TOTAL_CARRIER_SHORT_QTY;

				public BigDecimal getTOTAL_CARRIER_SHORT_QTY () {
					return this.TOTAL_CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal TOTAL_DAMAGED_ACCEPTED_QTY;

				public BigDecimal getTOTAL_DAMAGED_ACCEPTED_QTY () {
					return this.TOTAL_DAMAGED_ACCEPTED_QTY;
				}
				
			    public BigDecimal FREIGHT_PAID_AMOUNT;

				public BigDecimal getFREIGHT_PAID_AMOUNT () {
					return this.FREIGHT_PAID_AMOUNT;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public BigDecimal CUST_ORDER_NO;

				public BigDecimal getCUST_ORDER_NO () {
					return this.CUST_ORDER_NO;
				}
				
			    public String SHIP_FROM_NAME;

				public String getSHIP_FROM_NAME () {
					return this.SHIP_FROM_NAME;
				}
				
			    public String SHIPPING_ADDRESS_ID;

				public String getSHIPPING_ADDRESS_ID () {
					return this.SHIPPING_ADDRESS_ID;
				}
				
			    public String RESERVED_RE_RECOMMEND_FLAG;

				public String getRESERVED_RE_RECOMMEND_FLAG () {
					return this.RESERVED_RE_RECOMMEND_FLAG;
				}
				
			    public String RECOMMENDED_ORDER_FLAG;

				public String getRECOMMENDED_ORDER_FLAG () {
					return this.RECOMMENDED_ORDER_FLAG;
				}
				
			    public String FAILED_SCORECARD_FLAG;

				public String getFAILED_SCORECARD_FLAG () {
					return this.FAILED_SCORECARD_FLAG;
				}
				
			    public String VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG;

				public String getVENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG () {
					return this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG;
				}
				
			    public String PRICE_BRACKET_SOURCE_CODE;

				public String getPRICE_BRACKET_SOURCE_CODE () {
					return this.PRICE_BRACKET_SOURCE_CODE;
				}
				
			    public BigDecimal SHORT_PERCENT_TO_BACKORDER;

				public BigDecimal getSHORT_PERCENT_TO_BACKORDER () {
					return this.SHORT_PERCENT_TO_BACKORDER;
				}
				
			    public String SECONDARY_PO_TYPE;

				public String getSECONDARY_PO_TYPE () {
					return this.SECONDARY_PO_TYPE;
				}
				
			    public String TRANSMIT_FLAG;

				public String getTRANSMIT_FLAG () {
					return this.TRANSMIT_FLAG;
				}
				
			    public java.util.Date TRANSMIT_TIMESTAMP;

				public java.util.Date getTRANSMIT_TIMESTAMP () {
					return this.TRANSMIT_TIMESTAMP;
				}
				
			    public String PO_ERROR_IND;

				public String getPO_ERROR_IND () {
					return this.PO_ERROR_IND;
				}
				
			    public String STOCK_IND;

				public String getSTOCK_IND () {
					return this.STOCK_IND;
				}
				
			    public java.util.Date PO_CLOSE_TIME;

				public java.util.Date getPO_CLOSE_TIME () {
					return this.PO_CLOSE_TIME;
				}
				
			    public String REPLENISHMENT_SYSTEM;

				public String getREPLENISHMENT_SYSTEM () {
					return this.REPLENISHMENT_SYSTEM;
				}
				
			    public String SHIPMENT_NOTICE_NO;

				public String getSHIPMENT_NOTICE_NO () {
					return this.SHIPMENT_NOTICE_NO;
				}
				
			    public String FREIGHT_PROFORMA_STATUS;

				public String getFREIGHT_PROFORMA_STATUS () {
					return this.FREIGHT_PROFORMA_STATUS;
				}
				
			    public String SHIPMENT_ID;

				public String getSHIPMENT_ID () {
					return this.SHIPMENT_ID;
				}
				
			    public String FREIGHT_PROCESS_FLAG;

				public String getFREIGHT_PROCESS_FLAG () {
					return this.FREIGHT_PROCESS_FLAG;
				}
				
			    public String ORIG_PURCHASE_ORDER_NO;

				public String getORIG_PURCHASE_ORDER_NO () {
					return this.ORIG_PURCHASE_ORDER_NO;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String V3PF_SVOP;

				public String getV3PF_SVOP () {
					return this.V3PF_SVOP;
				}
				
			    public String CONFERENCE_TYPE;

				public String getCONFERENCE_TYPE () {
					return this.CONFERENCE_TYPE;
				}
				
			    public String NEXT_CONF_RECVD_FLAG;

				public String getNEXT_CONF_RECVD_FLAG () {
					return this.NEXT_CONF_RECVD_FLAG;
				}
				
			    public String VENDOR;

				public String getVENDOR () {
					return this.VENDOR;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public String PICKUP_ALLOWANCE_OVERRIDE_FLAG;

				public String getPICKUP_ALLOWANCE_OVERRIDE_FLAG () {
					return this.PICKUP_ALLOWANCE_OVERRIDE_FLAG;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ORDER_CTRL_NO == null) ? 0 : this.ORDER_CTRL_NO.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PURCHASE_ORDER_HEADER_2Struct other = (PURCHASE_ORDER_HEADER_2Struct) obj;
		
						if (this.ORDER_CTRL_NO == null) {
							if (other.ORDER_CTRL_NO != null)
								return false;
						
						} else if (!this.ORDER_CTRL_NO.equals(other.ORDER_CTRL_NO))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PURCHASE_ORDER_HEADER_2Struct other) {

		other.ORDER_CTRL_NO = this.ORDER_CTRL_NO;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.SITE_ID = this.SITE_ID;
	            other.SHIPPING_POINT_SHIP_FROM = this.SHIPPING_POINT_SHIP_FROM;
	            other.SMS_CONFIRMED_DATE = this.SMS_CONFIRMED_DATE;
	            other.VENDOR_CONFIRMED_SHIP_DATE = this.VENDOR_CONFIRMED_SHIP_DATE;
	            other.SCHEDULED_PO_RECEIPT_TIMESTAMP = this.SCHEDULED_PO_RECEIPT_TIMESTAMP;
	            other.ORIG_PICKUP_ALLOW_TYPE = this.ORIG_PICKUP_ALLOW_TYPE;
	            other.PICKUP_ALLOW_FROM_BRACKET = this.PICKUP_ALLOW_FROM_BRACKET;
	            other.ORIG_FREIGHT_RATE = this.ORIG_FREIGHT_RATE;
	            other.ORIG_FREIGHT_TYPE = this.ORIG_FREIGHT_TYPE;
	            other.ORIG_MERCH_ALLOW_CHARGE = this.ORIG_MERCH_ALLOW_CHARGE;
	            other.ORIG_FREIGHT_ALLOW_CHARGE = this.ORIG_FREIGHT_ALLOW_CHARGE;
	            other.FREIGHT_ROUNDING_VARIANCE = this.FREIGHT_ROUNDING_VARIANCE;
	            other.SHIP_WITH_NEXT_ORDER_IND = this.SHIP_WITH_NEXT_ORDER_IND;
	            other.CUST_REFERENCE_ORDER_NO = this.CUST_REFERENCE_ORDER_NO;
	            other.OUTSIDE_WHSE_ID = this.OUTSIDE_WHSE_ID;
	            other.RECOMMENDED_ORDER_SEQ_NO = this.RECOMMENDED_ORDER_SEQ_NO;
	            other.SYSCO_BRACKET_NO = this.SYSCO_BRACKET_NO;
	            other.BUYER_NO = this.BUYER_NO;
	            other.ORDER_GROUP = this.ORDER_GROUP;
	            other.BUYING_GROUP = this.BUYING_GROUP;
	            other.PO_PRIMARY_STATUS = this.PO_PRIMARY_STATUS;
	            other.PO_SECONDARY_STATUS = this.PO_SECONDARY_STATUS;
	            other.PO_IN_USE_FLAG = this.PO_IN_USE_FLAG;
	            other.WHSE_CHANGE_CODE = this.WHSE_CHANGE_CODE;
	            other.PO_VALID_PRICING_FLAG = this.PO_VALID_PRICING_FLAG;
	            other.PO_TYPE = this.PO_TYPE;
	            other.DEMAND_STATUS = this.DEMAND_STATUS;
	            other.BACKORDER_FLAG = this.BACKORDER_FLAG;
	            other.PROC_BILLED_VENDOR_BILLED_FLAG = this.PROC_BILLED_VENDOR_BILLED_FLAG;
	            other.FREIGHT_INTER_COMPANY_STMT_FLAG = this.FREIGHT_INTER_COMPANY_STMT_FLAG;
	            other.CONF_STATUS = this.CONF_STATUS;
	            other.PO_VALID_PRICING_APPROVAL = this.PO_VALID_PRICING_APPROVAL;
	            other.CONF_RECVD_FLAG = this.CONF_RECVD_FLAG;
	            other.WHSE_STATUS = this.WHSE_STATUS;
	            other.PO_CHANGED_FLAG = this.PO_CHANGED_FLAG;
	            other.PRINT_PRICE_ON_PO_FLAG = this.PRINT_PRICE_ON_PO_FLAG;
	            other.UPDATE_LEAD_TIME_FLAG = this.UPDATE_LEAD_TIME_FLAG;
	            other.PRICE_CHANGE_FLAG = this.PRICE_CHANGE_FLAG;
	            other.CARRIER_ID = this.CARRIER_ID;
	            other.REVISED_PROFORMA_FLAG = this.REVISED_PROFORMA_FLAG;
	            other.PROFORMA_INPROCESS_FLAG = this.PROFORMA_INPROCESS_FLAG;
	            other.TRANSMIT_TO = this.TRANSMIT_TO;
	            other.RETRANSMIT_TO_VENDOR_FLAG = this.RETRANSMIT_TO_VENDOR_FLAG;
	            other.JOB_NO = this.JOB_NO;
	            other.PAY_TO_VENDOR_NO = this.PAY_TO_VENDOR_NO;
	            other.FREIGHT_VENDOR = this.FREIGHT_VENDOR;
	            other.VENDOR_TERMS = this.VENDOR_TERMS;
	            other.FREIGHT_VENDOR_TERMS = this.FREIGHT_VENDOR_TERMS;
	            other.CONFIRMED_TERMS = this.CONFIRMED_TERMS;
	            other.CONFIRMED_FREIGHT_VENDOR_TERMS = this.CONFIRMED_FREIGHT_VENDOR_TERMS;
	            other.TERMS_OVERRIDE_FLAG = this.TERMS_OVERRIDE_FLAG;
	            other.PO_PLACED_WITH = this.PO_PLACED_WITH;
	            other.LOAD_CTRL_NO = this.LOAD_CTRL_NO;
	            other.BUSINESS_DATE_ANTICIPATED_RECEIPT = this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_DATE_ANTICIPATED_RECEIPT = this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_VENDOR_CONF_RECEIPT = this.CALENDAR_VENDOR_CONF_RECEIPT;
	            other.BUSINESS_DATE_SHIP_PICKUP = this.BUSINESS_DATE_SHIP_PICKUP;
	            other.CALENDAR_DATE_SHIP_PICKUP = this.CALENDAR_DATE_SHIP_PICKUP;
	            other.BUSINESS_ORDER_DATE = this.BUSINESS_ORDER_DATE;
	            other.CALENDAR_ORDER_DATE = this.CALENDAR_ORDER_DATE;
	            other.BUSINESS_DATE_PO_NEEDED = this.BUSINESS_DATE_PO_NEEDED;
	            other.CALENDAR_DATE_PO_NEEDED = this.CALENDAR_DATE_PO_NEEDED;
	            other.PO_TRANSMISSION_TIMESTAMP = this.PO_TRANSMISSION_TIMESTAMP;
	            other.BUSINESS_DATE_PO_ACCEPTED = this.BUSINESS_DATE_PO_ACCEPTED;
	            other.CALENDAR_DATE_PO_ACCEPTED = this.CALENDAR_DATE_PO_ACCEPTED;
	            other.BUSINESS_DATE_ACTUAL_RECEIPT = this.BUSINESS_DATE_ACTUAL_RECEIPT;
	            other.CALENDAR_DATE_ACTUAL_RECEIPT = this.CALENDAR_DATE_ACTUAL_RECEIPT;
	            other.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE = this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE;
	            other.CALENDAR_VENDOR_CONF_DATE = this.CALENDAR_VENDOR_CONF_DATE;
	            other.TOTAL_LINES = this.TOTAL_LINES;
	            other.TOTAL_CASES = this.TOTAL_CASES;
	            other.TOTAL_CUBE = this.TOTAL_CUBE;
	            other.TOTAL_NET_WGT = this.TOTAL_NET_WGT;
	            other.TOTAL_GROSS_WGT = this.TOTAL_GROSS_WGT;
	            other.TOTAL_VENDOR_PALLETS = this.TOTAL_VENDOR_PALLETS;
	            other.TOTAL_VENDOR_UNITS = this.TOTAL_VENDOR_UNITS;
	            other.TOTAL_FOB_COST = this.TOTAL_FOB_COST;
	            other.TOTAL_FREIGHT_COST = this.TOTAL_FREIGHT_COST;
	            other.TOTAL_AP_COST = this.TOTAL_AP_COST;
	            other.TOTAL_PICKUP_ALLOW = this.TOTAL_PICKUP_ALLOW;
	            other.TOTAL_PICKUP_ALLOW_RATE = this.TOTAL_PICKUP_ALLOW_RATE;
	            other.PICKUP_ALLOW_TO_BRACKET = this.PICKUP_ALLOW_TO_BRACKET;
	            other.WHSE_UNLOAD_CHARGE = this.WHSE_UNLOAD_CHARGE;
	            other.WHSE_UNLOAD_CHARGE_TYPE = this.WHSE_UNLOAD_CHARGE_TYPE;
	            other.ORIG_NON_DIST_MERCH_ALLOW_CHARGE = this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE;
	            other.TOTAL_WHSE_PALLETS = this.TOTAL_WHSE_PALLETS;
	            other.CONFIRMED_FREIGHT_RATE = this.CONFIRMED_FREIGHT_RATE;
	            other.CONFIRMED_FREIGHT_RATE_TYPE = this.CONFIRMED_FREIGHT_RATE_TYPE;
	            other.CONFIRMED_UNLOADING_CHARGE = this.CONFIRMED_UNLOADING_CHARGE;
	            other.CONFIRMED_UNLOADING_CHRG_TYPE = this.CONFIRMED_UNLOADING_CHRG_TYPE;
	            other.CONFIRMED_PICKUP_ALLOW_RATE = this.CONFIRMED_PICKUP_ALLOW_RATE;
	            other.CONFIRMED_PICKUP_ALLOW_TYPE = this.CONFIRMED_PICKUP_ALLOW_TYPE;
	            other.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET = this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET;
	            other.CONFIRMED_PICKUP_ALLOW_TO_BRACKET = this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET;
	            other.CONFIRMED_TOTAL_LINES = this.CONFIRMED_TOTAL_LINES;
	            other.CONFIRMED_TOTA_CASES = this.CONFIRMED_TOTA_CASES;
	            other.CONFIMRED_TOTAL_CUBE = this.CONFIMRED_TOTAL_CUBE;
	            other.CONFIRMED_TOTAL_NET_WGT = this.CONFIRMED_TOTAL_NET_WGT;
	            other.CONFIRMED_TOTAL_GROSS_WGT = this.CONFIRMED_TOTAL_GROSS_WGT;
	            other.CONFIRMED_TOTAL_VENDOR_PALLETS = this.CONFIRMED_TOTAL_VENDOR_PALLETS;
	            other.CONFIRMED_TOTAL_VENDOR_UNITS = this.CONFIRMED_TOTAL_VENDOR_UNITS;
	            other.CONFIRMED_TOTAL_FOB_COST = this.CONFIRMED_TOTAL_FOB_COST;
	            other.CONFIRMED_TOTAL_FREIGHT_COST = this.CONFIRMED_TOTAL_FREIGHT_COST;
	            other.CONFIRMED_TOTAL_AP_COST = this.CONFIRMED_TOTAL_AP_COST;
	            other.CONFIRMED_TOTAL_PICKUP_ALLOW = this.CONFIRMED_TOTAL_PICKUP_ALLOW;
	            other.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE = this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE;
	            other.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE = this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_MERCH_ALLOW_CHARGE = this.CONFIRMED_MERCH_ALLOW_CHARGE;
	            other.CONFIRMED_FREIGHT_ALLOW_CHARGE = this.CONFIRMED_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_TOTAL_UNLOADING_CHARGE = this.CONFIRMED_TOTAL_UNLOADING_CHARGE;
	            other.CONFIRMED_TOTAL_BRACKET_DIFF = this.CONFIRMED_TOTAL_BRACKET_DIFF;
	            other.CONFIRMED_TOTAL_WHSE_PALLETS = this.CONFIRMED_TOTAL_WHSE_PALLETS;
	            other.CONFIRMED_USER = this.CONFIRMED_USER;
	            other.VENDOR_CONF_NO = this.VENDOR_CONF_NO;
	            other.VENDOR_CONF_METHOD = this.VENDOR_CONF_METHOD;
	            other.TOTAL_RECVD_LINES = this.TOTAL_RECVD_LINES;
	            other.TOTAL_RECVD_CASES = this.TOTAL_RECVD_CASES;
	            other.TOTAL_RECVD_CUBE = this.TOTAL_RECVD_CUBE;
	            other.TOTAL_RECVD_NET_WGT = this.TOTAL_RECVD_NET_WGT;
	            other.TOTAL_RECVD_GROSS_WGT = this.TOTAL_RECVD_GROSS_WGT;
	            other.TOTAL_RECVD_VENDOR_PALLETS = this.TOTAL_RECVD_VENDOR_PALLETS;
	            other.TOTAL_RECVD_WHSE_PALLETS = this.TOTAL_RECVD_WHSE_PALLETS;
	            other.TOTAL_RECVD_VENDOR_UNITS = this.TOTAL_RECVD_VENDOR_UNITS;
	            other.TOTAL_RECVD_FOB_COST = this.TOTAL_RECVD_FOB_COST;
	            other.TOTAL_RECVD_FREIGHT_COST = this.TOTAL_RECVD_FREIGHT_COST;
	            other.TOTAL_RECVD_AP_COST = this.TOTAL_RECVD_AP_COST;
	            other.TOTAL_RECVD_BRACKET_DIFF = this.TOTAL_RECVD_BRACKET_DIFF;
	            other.TOTAL_RECVD_PICKUP_ALLOW = this.TOTAL_RECVD_PICKUP_ALLOW;
	            other.TOTAL_RECVD_UNLOADING_CHARGE = this.TOTAL_RECVD_UNLOADING_CHARGE;
	            other.MERCH_PROFORMA_STATUS = this.MERCH_PROFORMA_STATUS;
	            other.MERCH_PROFORMA_NET_AMT = this.MERCH_PROFORMA_NET_AMT;
	            other.UNMATCHED_MERCH_PROFROMA_NET_AMT = this.UNMATCHED_MERCH_PROFROMA_NET_AMT;
	            other.MERCH_AMT_TO_BE_VOUCH = this.MERCH_AMT_TO_BE_VOUCH;
	            other.MERCH_MATCHED_STATUS = this.MERCH_MATCHED_STATUS;
	            other.MERCH_VOUCH_STATUS = this.MERCH_VOUCH_STATUS;
	            other.MERCH_PAID_STATUS = this.MERCH_PAID_STATUS;
	            other.MERCH_PRICE_DIFF_HEADER_STATUS = this.MERCH_PRICE_DIFF_HEADER_STATUS;
	            other.MERCH_PRICE_DIFF_ERROR_LINE_COUNT = this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT;
	            other.MERCH_QTY_DIFF_HEADER_STATUS = this.MERCH_QTY_DIFF_HEADER_STATUS;
	            other.MERCH_QTY_DIFF_ERROR_LINE_COUNT = this.MERCH_QTY_DIFF_ERROR_LINE_COUNT;
	            other.MERCH_PAYMENT_DUE_DATE = this.MERCH_PAYMENT_DUE_DATE;
	            other.MERCH_CASH_DISC = this.MERCH_CASH_DISC;
	            other.MERCH_VOUCH_AMT = this.MERCH_VOUCH_AMT;
	            other.MERCH_ROUNDING_VAR = this.MERCH_ROUNDING_VAR;
	            other.MERCH_INV_NO = this.MERCH_INV_NO;
	            other.MERCH_INV_DATE = this.MERCH_INV_DATE;
	            other.MERCH_VENDOR_INTERCOM_BILLED_FLAG = this.MERCH_VENDOR_INTERCOM_BILLED_FLAG;
	            other.MERCH_VAR_AMT = this.MERCH_VAR_AMT;
	            other.MERCH_FREIGHT_AMT = this.MERCH_FREIGHT_AMT;
	            other.FREIGHT_PROFORMA_NET_AMT = this.FREIGHT_PROFORMA_NET_AMT;
	            other.UNMATCHED_FREIGHT_PROFORMA_NET_AMT = this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT;
	            other.FREIGHT_AMT_TO_BE_VOUCH = this.FREIGHT_AMT_TO_BE_VOUCH;
	            other.FREIGHT_MATCHED_STATUS = this.FREIGHT_MATCHED_STATUS;
	            other.FREIGHT_VOUCH_STATUS = this.FREIGHT_VOUCH_STATUS;
	            other.FREIGHT_PAID_STATUS = this.FREIGHT_PAID_STATUS;
	            other.FREIGHT_DIFF_HEADER_STATUS = this.FREIGHT_DIFF_HEADER_STATUS;
	            other.FREIGHT_PAYMENT_DUE_DATE = this.FREIGHT_PAYMENT_DUE_DATE;
	            other.FREIGHT_CLAIM_STATUS = this.FREIGHT_CLAIM_STATUS;
	            other.FREIGHT_CASH_DISC = this.FREIGHT_CASH_DISC;
	            other.FREIGHT_VARIANCE_AMT = this.FREIGHT_VARIANCE_AMT;
	            other.FREIGHT_VOUCH_AMT = this.FREIGHT_VOUCH_AMT;
	            other.FREIGHT_INV_NO = this.FREIGHT_INV_NO;
	            other.FREIGHT_INV_DATE = this.FREIGHT_INV_DATE;
	            other.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG = this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG;
	            other.TOTAL_VENDOR_SHORT_QTY = this.TOTAL_VENDOR_SHORT_QTY;
	            other.TOTAL_CARRIER_SHORT_QTY = this.TOTAL_CARRIER_SHORT_QTY;
	            other.TOTAL_DAMAGED_ACCEPTED_QTY = this.TOTAL_DAMAGED_ACCEPTED_QTY;
	            other.FREIGHT_PAID_AMOUNT = this.FREIGHT_PAID_AMOUNT;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.CUST_ORDER_NO = this.CUST_ORDER_NO;
	            other.SHIP_FROM_NAME = this.SHIP_FROM_NAME;
	            other.SHIPPING_ADDRESS_ID = this.SHIPPING_ADDRESS_ID;
	            other.RESERVED_RE_RECOMMEND_FLAG = this.RESERVED_RE_RECOMMEND_FLAG;
	            other.RECOMMENDED_ORDER_FLAG = this.RECOMMENDED_ORDER_FLAG;
	            other.FAILED_SCORECARD_FLAG = this.FAILED_SCORECARD_FLAG;
	            other.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG = this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG;
	            other.PRICE_BRACKET_SOURCE_CODE = this.PRICE_BRACKET_SOURCE_CODE;
	            other.SHORT_PERCENT_TO_BACKORDER = this.SHORT_PERCENT_TO_BACKORDER;
	            other.SECONDARY_PO_TYPE = this.SECONDARY_PO_TYPE;
	            other.TRANSMIT_FLAG = this.TRANSMIT_FLAG;
	            other.TRANSMIT_TIMESTAMP = this.TRANSMIT_TIMESTAMP;
	            other.PO_ERROR_IND = this.PO_ERROR_IND;
	            other.STOCK_IND = this.STOCK_IND;
	            other.PO_CLOSE_TIME = this.PO_CLOSE_TIME;
	            other.REPLENISHMENT_SYSTEM = this.REPLENISHMENT_SYSTEM;
	            other.SHIPMENT_NOTICE_NO = this.SHIPMENT_NOTICE_NO;
	            other.FREIGHT_PROFORMA_STATUS = this.FREIGHT_PROFORMA_STATUS;
	            other.SHIPMENT_ID = this.SHIPMENT_ID;
	            other.FREIGHT_PROCESS_FLAG = this.FREIGHT_PROCESS_FLAG;
	            other.ORIG_PURCHASE_ORDER_NO = this.ORIG_PURCHASE_ORDER_NO;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.V3PF_SVOP = this.V3PF_SVOP;
	            other.CONFERENCE_TYPE = this.CONFERENCE_TYPE;
	            other.NEXT_CONF_RECVD_FLAG = this.NEXT_CONF_RECVD_FLAG;
	            other.VENDOR = this.VENDOR;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.PICKUP_ALLOWANCE_OVERRIDE_FLAG = this.PICKUP_ALLOWANCE_OVERRIDE_FLAG;
	            
	}

	public void copyKeysDataTo(PURCHASE_ORDER_HEADER_2Struct other) {

		other.ORDER_CTRL_NO = this.ORDER_CTRL_NO;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.SITE_ID = this.SITE_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.ORDER_CTRL_NO = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.SITE_ID = readString(dis);
					
					this.SHIPPING_POINT_SHIP_FROM = readString(dis);
					
					this.SMS_CONFIRMED_DATE = readDate(dis);
					
					this.VENDOR_CONFIRMED_SHIP_DATE = readDate(dis);
					
					this.SCHEDULED_PO_RECEIPT_TIMESTAMP = readDate(dis);
					
					this.ORIG_PICKUP_ALLOW_TYPE = readString(dis);
					
						this.PICKUP_ALLOW_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE = readString(dis);
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.FREIGHT_ROUNDING_VARIANCE = (BigDecimal) dis.readObject();
					
					this.SHIP_WITH_NEXT_ORDER_IND = readString(dis);
					
					this.CUST_REFERENCE_ORDER_NO = readString(dis);
					
					this.OUTSIDE_WHSE_ID = readString(dis);
					
						this.RECOMMENDED_ORDER_SEQ_NO = (BigDecimal) dis.readObject();
					
						this.SYSCO_BRACKET_NO = (BigDecimal) dis.readObject();
					
					this.BUYER_NO = readString(dis);
					
					this.ORDER_GROUP = readString(dis);
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_IN_USE_FLAG = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.DEMAND_STATUS = readString(dis);
					
					this.BACKORDER_FLAG = readString(dis);
					
					this.PROC_BILLED_VENDOR_BILLED_FLAG = readString(dis);
					
					this.FREIGHT_INTER_COMPANY_STMT_FLAG = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.CONF_RECVD_FLAG = readString(dis);
					
					this.WHSE_STATUS = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.PRINT_PRICE_ON_PO_FLAG = readString(dis);
					
					this.UPDATE_LEAD_TIME_FLAG = readString(dis);
					
					this.PRICE_CHANGE_FLAG = readString(dis);
					
					this.CARRIER_ID = readString(dis);
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.PROFORMA_INPROCESS_FLAG = readString(dis);
					
					this.TRANSMIT_TO = readString(dis);
					
					this.RETRANSMIT_TO_VENDOR_FLAG = readString(dis);
					
					this.JOB_NO = readString(dis);
					
					this.PAY_TO_VENDOR_NO = readString(dis);
					
					this.FREIGHT_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.FREIGHT_VENDOR_TERMS = readString(dis);
					
					this.CONFIRMED_TERMS = readString(dis);
					
					this.CONFIRMED_FREIGHT_VENDOR_TERMS = readString(dis);
					
					this.TERMS_OVERRIDE_FLAG = readString(dis);
					
					this.PO_PLACED_WITH = readString(dis);
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_VENDOR_CONF_RECEIPT = readDate(dis);
					
					this.BUSINESS_DATE_SHIP_PICKUP = readDate(dis);
					
					this.CALENDAR_DATE_SHIP_PICKUP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
					this.CALENDAR_ORDER_DATE = readDate(dis);
					
					this.BUSINESS_DATE_PO_NEEDED = readDate(dis);
					
					this.CALENDAR_DATE_PO_NEEDED = readDate(dis);
					
					this.PO_TRANSMISSION_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_DATE_PO_ACCEPTED = readDate(dis);
					
					this.CALENDAR_DATE_PO_ACCEPTED = readDate(dis);
					
					this.BUSINESS_DATE_ACTUAL_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_ACTUAL_RECEIPT = readDate(dis);
					
					this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE = readDate(dis);
					
					this.CALENDAR_VENDOR_CONF_DATE = readDate(dis);
					
						this.TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.TOTAL_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_NET_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOW_RATE = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOW_TO_BRACKET = (BigDecimal) dis.readObject();
					
						this.WHSE_UNLOAD_CHARGE = (BigDecimal) dis.readObject();
					
					this.WHSE_UNLOAD_CHARGE_TYPE = readString(dis);
					
						this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.TOTAL_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_RATE_TYPE = readString(dis);
					
						this.CONFIRMED_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UNLOADING_CHRG_TYPE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_RATE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTA_CASES = (BigDecimal) dis.readObject();
					
						this.CONFIMRED_TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_NET_WGT = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_BRACKET_DIFF = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_USER = readString(dis);
					
					this.VENDOR_CONF_NO = readString(dis);
					
					this.VENDOR_CONF_METHOD = readString(dis);
					
						this.TOTAL_RECVD_LINES = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_NET_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_BRACKET_DIFF = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.UNMATCHED_MERCH_PROFROMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_AMT_TO_BE_VOUCH = (BigDecimal) dis.readObject();
					
					this.MERCH_MATCHED_STATUS = readString(dis);
					
					this.MERCH_VOUCH_STATUS = readString(dis);
					
					this.MERCH_PAID_STATUS = readString(dis);
					
					this.MERCH_PRICE_DIFF_HEADER_STATUS = readString(dis);
					
						this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT = (BigDecimal) dis.readObject();
					
					this.MERCH_QTY_DIFF_HEADER_STATUS = readString(dis);
					
						this.MERCH_QTY_DIFF_ERROR_LINE_COUNT = (BigDecimal) dis.readObject();
					
					this.MERCH_PAYMENT_DUE_DATE = readDate(dis);
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.MERCH_VOUCH_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_ROUNDING_VAR = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_VENDOR_INTERCOM_BILLED_FLAG = readString(dis);
					
						this.MERCH_VAR_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_FREIGHT_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_AMT_TO_BE_VOUCH = (BigDecimal) dis.readObject();
					
					this.FREIGHT_MATCHED_STATUS = readString(dis);
					
					this.FREIGHT_VOUCH_STATUS = readString(dis);
					
					this.FREIGHT_PAID_STATUS = readString(dis);
					
					this.FREIGHT_DIFF_HEADER_STATUS = readString(dis);
					
					this.FREIGHT_PAYMENT_DUE_DATE = readDate(dis);
					
					this.FREIGHT_CLAIM_STATUS = readString(dis);
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_VARIANCE_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_VOUCH_AMT = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
					this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG = readString(dis);
					
						this.TOTAL_VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.TOTAL_CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.TOTAL_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.FREIGHT_PAID_AMOUNT = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.SHIP_FROM_NAME = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.RESERVED_RE_RECOMMEND_FLAG = readString(dis);
					
					this.RECOMMENDED_ORDER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG = readString(dis);
					
					this.PRICE_BRACKET_SOURCE_CODE = readString(dis);
					
						this.SHORT_PERCENT_TO_BACKORDER = (BigDecimal) dis.readObject();
					
					this.SECONDARY_PO_TYPE = readString(dis);
					
					this.TRANSMIT_FLAG = readString(dis);
					
					this.TRANSMIT_TIMESTAMP = readDate(dis);
					
					this.PO_ERROR_IND = readString(dis);
					
					this.STOCK_IND = readString(dis);
					
					this.PO_CLOSE_TIME = readDate(dis);
					
					this.REPLENISHMENT_SYSTEM = readString(dis);
					
					this.SHIPMENT_NOTICE_NO = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.SHIPMENT_ID = readString(dis);
					
					this.FREIGHT_PROCESS_FLAG = readString(dis);
					
					this.ORIG_PURCHASE_ORDER_NO = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V3PF_SVOP = readString(dis);
					
					this.CONFERENCE_TYPE = readString(dis);
					
					this.NEXT_CONF_RECVD_FLAG = readString(dis);
					
					this.VENDOR = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.PICKUP_ALLOWANCE_OVERRIDE_FLAG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.ORDER_CTRL_NO = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.SITE_ID = readString(dis);
					
					this.SHIPPING_POINT_SHIP_FROM = readString(dis);
					
					this.SMS_CONFIRMED_DATE = readDate(dis);
					
					this.VENDOR_CONFIRMED_SHIP_DATE = readDate(dis);
					
					this.SCHEDULED_PO_RECEIPT_TIMESTAMP = readDate(dis);
					
					this.ORIG_PICKUP_ALLOW_TYPE = readString(dis);
					
						this.PICKUP_ALLOW_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE = readString(dis);
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.FREIGHT_ROUNDING_VARIANCE = (BigDecimal) dis.readObject();
					
					this.SHIP_WITH_NEXT_ORDER_IND = readString(dis);
					
					this.CUST_REFERENCE_ORDER_NO = readString(dis);
					
					this.OUTSIDE_WHSE_ID = readString(dis);
					
						this.RECOMMENDED_ORDER_SEQ_NO = (BigDecimal) dis.readObject();
					
						this.SYSCO_BRACKET_NO = (BigDecimal) dis.readObject();
					
					this.BUYER_NO = readString(dis);
					
					this.ORDER_GROUP = readString(dis);
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_IN_USE_FLAG = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.DEMAND_STATUS = readString(dis);
					
					this.BACKORDER_FLAG = readString(dis);
					
					this.PROC_BILLED_VENDOR_BILLED_FLAG = readString(dis);
					
					this.FREIGHT_INTER_COMPANY_STMT_FLAG = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.CONF_RECVD_FLAG = readString(dis);
					
					this.WHSE_STATUS = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.PRINT_PRICE_ON_PO_FLAG = readString(dis);
					
					this.UPDATE_LEAD_TIME_FLAG = readString(dis);
					
					this.PRICE_CHANGE_FLAG = readString(dis);
					
					this.CARRIER_ID = readString(dis);
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.PROFORMA_INPROCESS_FLAG = readString(dis);
					
					this.TRANSMIT_TO = readString(dis);
					
					this.RETRANSMIT_TO_VENDOR_FLAG = readString(dis);
					
					this.JOB_NO = readString(dis);
					
					this.PAY_TO_VENDOR_NO = readString(dis);
					
					this.FREIGHT_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.FREIGHT_VENDOR_TERMS = readString(dis);
					
					this.CONFIRMED_TERMS = readString(dis);
					
					this.CONFIRMED_FREIGHT_VENDOR_TERMS = readString(dis);
					
					this.TERMS_OVERRIDE_FLAG = readString(dis);
					
					this.PO_PLACED_WITH = readString(dis);
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_VENDOR_CONF_RECEIPT = readDate(dis);
					
					this.BUSINESS_DATE_SHIP_PICKUP = readDate(dis);
					
					this.CALENDAR_DATE_SHIP_PICKUP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
					this.CALENDAR_ORDER_DATE = readDate(dis);
					
					this.BUSINESS_DATE_PO_NEEDED = readDate(dis);
					
					this.CALENDAR_DATE_PO_NEEDED = readDate(dis);
					
					this.PO_TRANSMISSION_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_DATE_PO_ACCEPTED = readDate(dis);
					
					this.CALENDAR_DATE_PO_ACCEPTED = readDate(dis);
					
					this.BUSINESS_DATE_ACTUAL_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_ACTUAL_RECEIPT = readDate(dis);
					
					this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE = readDate(dis);
					
					this.CALENDAR_VENDOR_CONF_DATE = readDate(dis);
					
						this.TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.TOTAL_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_NET_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOW_RATE = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOW_TO_BRACKET = (BigDecimal) dis.readObject();
					
						this.WHSE_UNLOAD_CHARGE = (BigDecimal) dis.readObject();
					
					this.WHSE_UNLOAD_CHARGE_TYPE = readString(dis);
					
						this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.TOTAL_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_RATE_TYPE = readString(dis);
					
						this.CONFIRMED_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UNLOADING_CHRG_TYPE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_RATE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_LINES = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTA_CASES = (BigDecimal) dis.readObject();
					
						this.CONFIMRED_TOTAL_CUBE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_NET_WGT = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_BRACKET_DIFF = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_TOTAL_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_USER = readString(dis);
					
					this.VENDOR_CONF_NO = readString(dis);
					
					this.VENDOR_CONF_METHOD = readString(dis);
					
						this.TOTAL_RECVD_LINES = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_CASES = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_CUBE = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_NET_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_GROSS_WGT = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_VENDOR_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_WHSE_PALLETS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_VENDOR_UNITS = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_BRACKET_DIFF = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_PICKUP_ALLOW = (BigDecimal) dis.readObject();
					
						this.TOTAL_RECVD_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.UNMATCHED_MERCH_PROFROMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_AMT_TO_BE_VOUCH = (BigDecimal) dis.readObject();
					
					this.MERCH_MATCHED_STATUS = readString(dis);
					
					this.MERCH_VOUCH_STATUS = readString(dis);
					
					this.MERCH_PAID_STATUS = readString(dis);
					
					this.MERCH_PRICE_DIFF_HEADER_STATUS = readString(dis);
					
						this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT = (BigDecimal) dis.readObject();
					
					this.MERCH_QTY_DIFF_HEADER_STATUS = readString(dis);
					
						this.MERCH_QTY_DIFF_ERROR_LINE_COUNT = (BigDecimal) dis.readObject();
					
					this.MERCH_PAYMENT_DUE_DATE = readDate(dis);
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.MERCH_VOUCH_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_ROUNDING_VAR = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_VENDOR_INTERCOM_BILLED_FLAG = readString(dis);
					
						this.MERCH_VAR_AMT = (BigDecimal) dis.readObject();
					
						this.MERCH_FREIGHT_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_AMT_TO_BE_VOUCH = (BigDecimal) dis.readObject();
					
					this.FREIGHT_MATCHED_STATUS = readString(dis);
					
					this.FREIGHT_VOUCH_STATUS = readString(dis);
					
					this.FREIGHT_PAID_STATUS = readString(dis);
					
					this.FREIGHT_DIFF_HEADER_STATUS = readString(dis);
					
					this.FREIGHT_PAYMENT_DUE_DATE = readDate(dis);
					
					this.FREIGHT_CLAIM_STATUS = readString(dis);
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_VARIANCE_AMT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_VOUCH_AMT = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
					this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG = readString(dis);
					
						this.TOTAL_VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.TOTAL_CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.TOTAL_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.FREIGHT_PAID_AMOUNT = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.SHIP_FROM_NAME = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.RESERVED_RE_RECOMMEND_FLAG = readString(dis);
					
					this.RECOMMENDED_ORDER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG = readString(dis);
					
					this.PRICE_BRACKET_SOURCE_CODE = readString(dis);
					
						this.SHORT_PERCENT_TO_BACKORDER = (BigDecimal) dis.readObject();
					
					this.SECONDARY_PO_TYPE = readString(dis);
					
					this.TRANSMIT_FLAG = readString(dis);
					
					this.TRANSMIT_TIMESTAMP = readDate(dis);
					
					this.PO_ERROR_IND = readString(dis);
					
					this.STOCK_IND = readString(dis);
					
					this.PO_CLOSE_TIME = readDate(dis);
					
					this.REPLENISHMENT_SYSTEM = readString(dis);
					
					this.SHIPMENT_NOTICE_NO = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.SHIPMENT_ID = readString(dis);
					
					this.FREIGHT_PROCESS_FLAG = readString(dis);
					
					this.ORIG_PURCHASE_ORDER_NO = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V3PF_SVOP = readString(dis);
					
					this.CONFERENCE_TYPE = readString(dis);
					
					this.NEXT_CONF_RECVD_FLAG = readString(dis);
					
					this.VENDOR = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.PICKUP_ALLOWANCE_OVERRIDE_FLAG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ORDER_CTRL_NO,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.SHIPPING_POINT_SHIP_FROM,dos);
					
					// java.util.Date
				
						writeDate(this.SMS_CONFIRMED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.VENDOR_CONFIRMED_SHIP_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SCHEDULED_PO_RECEIPT_TIMESTAMP,dos);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOW_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_ROUNDING_VARIANCE);
					
					// String
				
						writeString(this.SHIP_WITH_NEXT_ORDER_IND,dos);
					
					// String
				
						writeString(this.CUST_REFERENCE_ORDER_NO,dos);
					
					// String
				
						writeString(this.OUTSIDE_WHSE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECOMMENDED_ORDER_SEQ_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SYSCO_BRACKET_NO);
					
					// String
				
						writeString(this.BUYER_NO,dos);
					
					// String
				
						writeString(this.ORDER_GROUP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_IN_USE_FLAG,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.DEMAND_STATUS,dos);
					
					// String
				
						writeString(this.BACKORDER_FLAG,dos);
					
					// String
				
						writeString(this.PROC_BILLED_VENDOR_BILLED_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_INTER_COMPANY_STMT_FLAG,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.CONF_RECVD_FLAG,dos);
					
					// String
				
						writeString(this.WHSE_STATUS,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.PRINT_PRICE_ON_PO_FLAG,dos);
					
					// String
				
						writeString(this.UPDATE_LEAD_TIME_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.CARRIER_ID,dos);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.PROFORMA_INPROCESS_FLAG,dos);
					
					// String
				
						writeString(this.TRANSMIT_TO,dos);
					
					// String
				
						writeString(this.RETRANSMIT_TO_VENDOR_FLAG,dos);
					
					// String
				
						writeString(this.JOB_NO,dos);
					
					// String
				
						writeString(this.PAY_TO_VENDOR_NO,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.CONFIRMED_TERMS,dos);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.TERMS_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.PO_PLACED_WITH,dos);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_VENDOR_CONF_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_SHIP_PICKUP,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SHIP_PICKUP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_PO_NEEDED,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_PO_NEEDED,dos);
					
					// java.util.Date
				
						writeDate(this.PO_TRANSMISSION_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_PO_ACCEPTED,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_PO_ACCEPTED,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ACTUAL_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ACTUAL_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_VENDOR_CONF_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOW_RATE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOW_TO_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.WHSE_UNLOAD_CHARGE);
					
					// String
				
						writeString(this.WHSE_UNLOAD_CHARGE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_WHSE_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_RATE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.CONFIRMED_UNLOADING_CHRG_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTA_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIMRED_TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_UNLOADING_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_BRACKET_DIFF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_WHSE_PALLETS);
					
					// String
				
						writeString(this.CONFIRMED_USER,dos);
					
					// String
				
						writeString(this.VENDOR_CONF_NO,dos);
					
					// String
				
						writeString(this.VENDOR_CONF_METHOD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_WHSE_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_BRACKET_DIFF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNMATCHED_MERCH_PROFROMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_AMT_TO_BE_VOUCH);
					
					// String
				
						writeString(this.MERCH_MATCHED_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_VOUCH_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PAID_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_HEADER_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_HEADER_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_DIFF_ERROR_LINE_COUNT);
					
					// java.util.Date
				
						writeDate(this.MERCH_PAYMENT_DUE_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_VOUCH_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_ROUNDING_VAR);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_VENDOR_INTERCOM_BILLED_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_VAR_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_FREIGHT_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_AMT_TO_BE_VOUCH);
					
					// String
				
						writeString(this.FREIGHT_MATCHED_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_VOUCH_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_PAID_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_DIFF_HEADER_STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_PAYMENT_DUE_DATE,dos);
					
					// String
				
						writeString(this.FREIGHT_CLAIM_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_VARIANCE_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_VOUCH_AMT);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_PAID_AMOUNT);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// String
				
						writeString(this.SHIP_FROM_NAME,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.RESERVED_RE_RECOMMEND_FLAG,dos);
					
					// String
				
						writeString(this.RECOMMENDED_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_BRACKET_SOURCE_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHORT_PERCENT_TO_BACKORDER);
					
					// String
				
						writeString(this.SECONDARY_PO_TYPE,dos);
					
					// String
				
						writeString(this.TRANSMIT_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.TRANSMIT_TIMESTAMP,dos);
					
					// String
				
						writeString(this.PO_ERROR_IND,dos);
					
					// String
				
						writeString(this.STOCK_IND,dos);
					
					// java.util.Date
				
						writeDate(this.PO_CLOSE_TIME,dos);
					
					// String
				
						writeString(this.REPLENISHMENT_SYSTEM,dos);
					
					// String
				
						writeString(this.SHIPMENT_NOTICE_NO,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.SHIPMENT_ID,dos);
					
					// String
				
						writeString(this.FREIGHT_PROCESS_FLAG,dos);
					
					// String
				
						writeString(this.ORIG_PURCHASE_ORDER_NO,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V3PF_SVOP,dos);
					
					// String
				
						writeString(this.CONFERENCE_TYPE,dos);
					
					// String
				
						writeString(this.NEXT_CONF_RECVD_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_OVERRIDE_FLAG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ORDER_CTRL_NO,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.SHIPPING_POINT_SHIP_FROM,dos);
					
					// java.util.Date
				
						writeDate(this.SMS_CONFIRMED_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.VENDOR_CONFIRMED_SHIP_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.SCHEDULED_PO_RECEIPT_TIMESTAMP,dos);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOW_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_ROUNDING_VARIANCE);
					
					// String
				
						writeString(this.SHIP_WITH_NEXT_ORDER_IND,dos);
					
					// String
				
						writeString(this.CUST_REFERENCE_ORDER_NO,dos);
					
					// String
				
						writeString(this.OUTSIDE_WHSE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECOMMENDED_ORDER_SEQ_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SYSCO_BRACKET_NO);
					
					// String
				
						writeString(this.BUYER_NO,dos);
					
					// String
				
						writeString(this.ORDER_GROUP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_IN_USE_FLAG,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.DEMAND_STATUS,dos);
					
					// String
				
						writeString(this.BACKORDER_FLAG,dos);
					
					// String
				
						writeString(this.PROC_BILLED_VENDOR_BILLED_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_INTER_COMPANY_STMT_FLAG,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.CONF_RECVD_FLAG,dos);
					
					// String
				
						writeString(this.WHSE_STATUS,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.PRINT_PRICE_ON_PO_FLAG,dos);
					
					// String
				
						writeString(this.UPDATE_LEAD_TIME_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.CARRIER_ID,dos);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.PROFORMA_INPROCESS_FLAG,dos);
					
					// String
				
						writeString(this.TRANSMIT_TO,dos);
					
					// String
				
						writeString(this.RETRANSMIT_TO_VENDOR_FLAG,dos);
					
					// String
				
						writeString(this.JOB_NO,dos);
					
					// String
				
						writeString(this.PAY_TO_VENDOR_NO,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.CONFIRMED_TERMS,dos);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.TERMS_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.PO_PLACED_WITH,dos);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_VENDOR_CONF_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_SHIP_PICKUP,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SHIP_PICKUP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_ORDER_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_PO_NEEDED,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_PO_NEEDED,dos);
					
					// java.util.Date
				
						writeDate(this.PO_TRANSMISSION_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_PO_ACCEPTED,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_PO_ACCEPTED,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ACTUAL_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ACTUAL_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_VENDOR_CONF_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOW_RATE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOW_TO_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.WHSE_UNLOAD_CHARGE);
					
					// String
				
						writeString(this.WHSE_UNLOAD_CHARGE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_NON_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_WHSE_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_RATE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.CONFIRMED_UNLOADING_CHRG_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_TO_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTA_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIMRED_TOTAL_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_UNLOADING_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_BRACKET_DIFF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_TOTAL_WHSE_PALLETS);
					
					// String
				
						writeString(this.CONFIRMED_USER,dos);
					
					// String
				
						writeString(this.VENDOR_CONF_NO,dos);
					
					// String
				
						writeString(this.VENDOR_CONF_METHOD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_LINES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_CASES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_CUBE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_NET_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_GROSS_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_VENDOR_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_WHSE_PALLETS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_VENDOR_UNITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_BRACKET_DIFF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_PICKUP_ALLOW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_RECVD_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNMATCHED_MERCH_PROFROMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_AMT_TO_BE_VOUCH);
					
					// String
				
						writeString(this.MERCH_MATCHED_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_VOUCH_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PAID_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_HEADER_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_PRICE_DIFF_ERROR_LINE_COUNT);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_HEADER_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_DIFF_ERROR_LINE_COUNT);
					
					// java.util.Date
				
						writeDate(this.MERCH_PAYMENT_DUE_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_VOUCH_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_ROUNDING_VAR);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_VENDOR_INTERCOM_BILLED_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_VAR_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_FREIGHT_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNMATCHED_FREIGHT_PROFORMA_NET_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_AMT_TO_BE_VOUCH);
					
					// String
				
						writeString(this.FREIGHT_MATCHED_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_VOUCH_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_PAID_STATUS,dos);
					
					// String
				
						writeString(this.FREIGHT_DIFF_HEADER_STATUS,dos);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_PAYMENT_DUE_DATE,dos);
					
					// String
				
						writeString(this.FREIGHT_CLAIM_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_VARIANCE_AMT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_VOUCH_AMT);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_VENDOR_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_PAID_AMOUNT);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// String
				
						writeString(this.SHIP_FROM_NAME,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.RESERVED_RE_RECOMMEND_FLAG,dos);
					
					// String
				
						writeString(this.RECOMMENDED_ORDER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_BRACKET_SOURCE_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHORT_PERCENT_TO_BACKORDER);
					
					// String
				
						writeString(this.SECONDARY_PO_TYPE,dos);
					
					// String
				
						writeString(this.TRANSMIT_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.TRANSMIT_TIMESTAMP,dos);
					
					// String
				
						writeString(this.PO_ERROR_IND,dos);
					
					// String
				
						writeString(this.STOCK_IND,dos);
					
					// java.util.Date
				
						writeDate(this.PO_CLOSE_TIME,dos);
					
					// String
				
						writeString(this.REPLENISHMENT_SYSTEM,dos);
					
					// String
				
						writeString(this.SHIPMENT_NOTICE_NO,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.SHIPMENT_ID,dos);
					
					// String
				
						writeString(this.FREIGHT_PROCESS_FLAG,dos);
					
					// String
				
						writeString(this.ORIG_PURCHASE_ORDER_NO,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V3PF_SVOP,dos);
					
					// String
				
						writeString(this.CONFERENCE_TYPE,dos);
					
					// String
				
						writeString(this.NEXT_CONF_RECVD_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_OVERRIDE_FLAG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORDER_CTRL_NO="+ORDER_CTRL_NO);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",SITE_ID="+SITE_ID);
		sb.append(",SHIPPING_POINT_SHIP_FROM="+SHIPPING_POINT_SHIP_FROM);
		sb.append(",SMS_CONFIRMED_DATE="+String.valueOf(SMS_CONFIRMED_DATE));
		sb.append(",VENDOR_CONFIRMED_SHIP_DATE="+String.valueOf(VENDOR_CONFIRMED_SHIP_DATE));
		sb.append(",SCHEDULED_PO_RECEIPT_TIMESTAMP="+String.valueOf(SCHEDULED_PO_RECEIPT_TIMESTAMP));
		sb.append(",ORIG_PICKUP_ALLOW_TYPE="+ORIG_PICKUP_ALLOW_TYPE);
		sb.append(",PICKUP_ALLOW_FROM_BRACKET="+String.valueOf(PICKUP_ALLOW_FROM_BRACKET));
		sb.append(",ORIG_FREIGHT_RATE="+String.valueOf(ORIG_FREIGHT_RATE));
		sb.append(",ORIG_FREIGHT_TYPE="+ORIG_FREIGHT_TYPE);
		sb.append(",ORIG_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_MERCH_ALLOW_CHARGE));
		sb.append(",ORIG_FREIGHT_ALLOW_CHARGE="+String.valueOf(ORIG_FREIGHT_ALLOW_CHARGE));
		sb.append(",FREIGHT_ROUNDING_VARIANCE="+String.valueOf(FREIGHT_ROUNDING_VARIANCE));
		sb.append(",SHIP_WITH_NEXT_ORDER_IND="+SHIP_WITH_NEXT_ORDER_IND);
		sb.append(",CUST_REFERENCE_ORDER_NO="+CUST_REFERENCE_ORDER_NO);
		sb.append(",OUTSIDE_WHSE_ID="+OUTSIDE_WHSE_ID);
		sb.append(",RECOMMENDED_ORDER_SEQ_NO="+String.valueOf(RECOMMENDED_ORDER_SEQ_NO));
		sb.append(",SYSCO_BRACKET_NO="+String.valueOf(SYSCO_BRACKET_NO));
		sb.append(",BUYER_NO="+BUYER_NO);
		sb.append(",ORDER_GROUP="+ORDER_GROUP);
		sb.append(",BUYING_GROUP="+String.valueOf(BUYING_GROUP));
		sb.append(",PO_PRIMARY_STATUS="+PO_PRIMARY_STATUS);
		sb.append(",PO_SECONDARY_STATUS="+PO_SECONDARY_STATUS);
		sb.append(",PO_IN_USE_FLAG="+PO_IN_USE_FLAG);
		sb.append(",WHSE_CHANGE_CODE="+WHSE_CHANGE_CODE);
		sb.append(",PO_VALID_PRICING_FLAG="+PO_VALID_PRICING_FLAG);
		sb.append(",PO_TYPE="+PO_TYPE);
		sb.append(",DEMAND_STATUS="+DEMAND_STATUS);
		sb.append(",BACKORDER_FLAG="+BACKORDER_FLAG);
		sb.append(",PROC_BILLED_VENDOR_BILLED_FLAG="+PROC_BILLED_VENDOR_BILLED_FLAG);
		sb.append(",FREIGHT_INTER_COMPANY_STMT_FLAG="+FREIGHT_INTER_COMPANY_STMT_FLAG);
		sb.append(",CONF_STATUS="+CONF_STATUS);
		sb.append(",PO_VALID_PRICING_APPROVAL="+PO_VALID_PRICING_APPROVAL);
		sb.append(",CONF_RECVD_FLAG="+CONF_RECVD_FLAG);
		sb.append(",WHSE_STATUS="+WHSE_STATUS);
		sb.append(",PO_CHANGED_FLAG="+PO_CHANGED_FLAG);
		sb.append(",PRINT_PRICE_ON_PO_FLAG="+PRINT_PRICE_ON_PO_FLAG);
		sb.append(",UPDATE_LEAD_TIME_FLAG="+UPDATE_LEAD_TIME_FLAG);
		sb.append(",PRICE_CHANGE_FLAG="+PRICE_CHANGE_FLAG);
		sb.append(",CARRIER_ID="+CARRIER_ID);
		sb.append(",REVISED_PROFORMA_FLAG="+REVISED_PROFORMA_FLAG);
		sb.append(",PROFORMA_INPROCESS_FLAG="+PROFORMA_INPROCESS_FLAG);
		sb.append(",TRANSMIT_TO="+TRANSMIT_TO);
		sb.append(",RETRANSMIT_TO_VENDOR_FLAG="+RETRANSMIT_TO_VENDOR_FLAG);
		sb.append(",JOB_NO="+JOB_NO);
		sb.append(",PAY_TO_VENDOR_NO="+PAY_TO_VENDOR_NO);
		sb.append(",FREIGHT_VENDOR="+FREIGHT_VENDOR);
		sb.append(",VENDOR_TERMS="+VENDOR_TERMS);
		sb.append(",FREIGHT_VENDOR_TERMS="+FREIGHT_VENDOR_TERMS);
		sb.append(",CONFIRMED_TERMS="+CONFIRMED_TERMS);
		sb.append(",CONFIRMED_FREIGHT_VENDOR_TERMS="+CONFIRMED_FREIGHT_VENDOR_TERMS);
		sb.append(",TERMS_OVERRIDE_FLAG="+TERMS_OVERRIDE_FLAG);
		sb.append(",PO_PLACED_WITH="+PO_PLACED_WITH);
		sb.append(",LOAD_CTRL_NO="+LOAD_CTRL_NO);
		sb.append(",BUSINESS_DATE_ANTICIPATED_RECEIPT="+String.valueOf(BUSINESS_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_DATE_ANTICIPATED_RECEIPT="+String.valueOf(CALENDAR_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_VENDOR_CONF_RECEIPT="+String.valueOf(CALENDAR_VENDOR_CONF_RECEIPT));
		sb.append(",BUSINESS_DATE_SHIP_PICKUP="+String.valueOf(BUSINESS_DATE_SHIP_PICKUP));
		sb.append(",CALENDAR_DATE_SHIP_PICKUP="+String.valueOf(CALENDAR_DATE_SHIP_PICKUP));
		sb.append(",BUSINESS_ORDER_DATE="+String.valueOf(BUSINESS_ORDER_DATE));
		sb.append(",CALENDAR_ORDER_DATE="+String.valueOf(CALENDAR_ORDER_DATE));
		sb.append(",BUSINESS_DATE_PO_NEEDED="+String.valueOf(BUSINESS_DATE_PO_NEEDED));
		sb.append(",CALENDAR_DATE_PO_NEEDED="+String.valueOf(CALENDAR_DATE_PO_NEEDED));
		sb.append(",PO_TRANSMISSION_TIMESTAMP="+String.valueOf(PO_TRANSMISSION_TIMESTAMP));
		sb.append(",BUSINESS_DATE_PO_ACCEPTED="+String.valueOf(BUSINESS_DATE_PO_ACCEPTED));
		sb.append(",CALENDAR_DATE_PO_ACCEPTED="+String.valueOf(CALENDAR_DATE_PO_ACCEPTED));
		sb.append(",BUSINESS_DATE_ACTUAL_RECEIPT="+String.valueOf(BUSINESS_DATE_ACTUAL_RECEIPT));
		sb.append(",CALENDAR_DATE_ACTUAL_RECEIPT="+String.valueOf(CALENDAR_DATE_ACTUAL_RECEIPT));
		sb.append(",CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE="+String.valueOf(CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE));
		sb.append(",CALENDAR_VENDOR_CONF_DATE="+String.valueOf(CALENDAR_VENDOR_CONF_DATE));
		sb.append(",TOTAL_LINES="+String.valueOf(TOTAL_LINES));
		sb.append(",TOTAL_CASES="+String.valueOf(TOTAL_CASES));
		sb.append(",TOTAL_CUBE="+String.valueOf(TOTAL_CUBE));
		sb.append(",TOTAL_NET_WGT="+String.valueOf(TOTAL_NET_WGT));
		sb.append(",TOTAL_GROSS_WGT="+String.valueOf(TOTAL_GROSS_WGT));
		sb.append(",TOTAL_VENDOR_PALLETS="+String.valueOf(TOTAL_VENDOR_PALLETS));
		sb.append(",TOTAL_VENDOR_UNITS="+String.valueOf(TOTAL_VENDOR_UNITS));
		sb.append(",TOTAL_FOB_COST="+String.valueOf(TOTAL_FOB_COST));
		sb.append(",TOTAL_FREIGHT_COST="+String.valueOf(TOTAL_FREIGHT_COST));
		sb.append(",TOTAL_AP_COST="+String.valueOf(TOTAL_AP_COST));
		sb.append(",TOTAL_PICKUP_ALLOW="+String.valueOf(TOTAL_PICKUP_ALLOW));
		sb.append(",TOTAL_PICKUP_ALLOW_RATE="+String.valueOf(TOTAL_PICKUP_ALLOW_RATE));
		sb.append(",PICKUP_ALLOW_TO_BRACKET="+String.valueOf(PICKUP_ALLOW_TO_BRACKET));
		sb.append(",WHSE_UNLOAD_CHARGE="+String.valueOf(WHSE_UNLOAD_CHARGE));
		sb.append(",WHSE_UNLOAD_CHARGE_TYPE="+WHSE_UNLOAD_CHARGE_TYPE);
		sb.append(",ORIG_NON_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_NON_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",TOTAL_WHSE_PALLETS="+String.valueOf(TOTAL_WHSE_PALLETS));
		sb.append(",CONFIRMED_FREIGHT_RATE="+String.valueOf(CONFIRMED_FREIGHT_RATE));
		sb.append(",CONFIRMED_FREIGHT_RATE_TYPE="+CONFIRMED_FREIGHT_RATE_TYPE);
		sb.append(",CONFIRMED_UNLOADING_CHARGE="+String.valueOf(CONFIRMED_UNLOADING_CHARGE));
		sb.append(",CONFIRMED_UNLOADING_CHRG_TYPE="+CONFIRMED_UNLOADING_CHRG_TYPE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_RATE="+String.valueOf(CONFIRMED_PICKUP_ALLOW_RATE));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TYPE="+CONFIRMED_PICKUP_ALLOW_TYPE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_FROM_BRACKET="+String.valueOf(CONFIRMED_PICKUP_ALLOW_FROM_BRACKET));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TO_BRACKET="+String.valueOf(CONFIRMED_PICKUP_ALLOW_TO_BRACKET));
		sb.append(",CONFIRMED_TOTAL_LINES="+String.valueOf(CONFIRMED_TOTAL_LINES));
		sb.append(",CONFIRMED_TOTA_CASES="+String.valueOf(CONFIRMED_TOTA_CASES));
		sb.append(",CONFIMRED_TOTAL_CUBE="+String.valueOf(CONFIMRED_TOTAL_CUBE));
		sb.append(",CONFIRMED_TOTAL_NET_WGT="+String.valueOf(CONFIRMED_TOTAL_NET_WGT));
		sb.append(",CONFIRMED_TOTAL_GROSS_WGT="+String.valueOf(CONFIRMED_TOTAL_GROSS_WGT));
		sb.append(",CONFIRMED_TOTAL_VENDOR_PALLETS="+String.valueOf(CONFIRMED_TOTAL_VENDOR_PALLETS));
		sb.append(",CONFIRMED_TOTAL_VENDOR_UNITS="+String.valueOf(CONFIRMED_TOTAL_VENDOR_UNITS));
		sb.append(",CONFIRMED_TOTAL_FOB_COST="+String.valueOf(CONFIRMED_TOTAL_FOB_COST));
		sb.append(",CONFIRMED_TOTAL_FREIGHT_COST="+String.valueOf(CONFIRMED_TOTAL_FREIGHT_COST));
		sb.append(",CONFIRMED_TOTAL_AP_COST="+String.valueOf(CONFIRMED_TOTAL_AP_COST));
		sb.append(",CONFIRMED_TOTAL_PICKUP_ALLOW="+String.valueOf(CONFIRMED_TOTAL_PICKUP_ALLOW));
		sb.append(",CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_MERCH_ALLOW_CHARGE="+String.valueOf(CONFIRMED_MERCH_ALLOW_CHARGE));
		sb.append(",CONFIRMED_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONFIRMED_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_TOTAL_UNLOADING_CHARGE="+String.valueOf(CONFIRMED_TOTAL_UNLOADING_CHARGE));
		sb.append(",CONFIRMED_TOTAL_BRACKET_DIFF="+String.valueOf(CONFIRMED_TOTAL_BRACKET_DIFF));
		sb.append(",CONFIRMED_TOTAL_WHSE_PALLETS="+String.valueOf(CONFIRMED_TOTAL_WHSE_PALLETS));
		sb.append(",CONFIRMED_USER="+CONFIRMED_USER);
		sb.append(",VENDOR_CONF_NO="+VENDOR_CONF_NO);
		sb.append(",VENDOR_CONF_METHOD="+VENDOR_CONF_METHOD);
		sb.append(",TOTAL_RECVD_LINES="+String.valueOf(TOTAL_RECVD_LINES));
		sb.append(",TOTAL_RECVD_CASES="+String.valueOf(TOTAL_RECVD_CASES));
		sb.append(",TOTAL_RECVD_CUBE="+String.valueOf(TOTAL_RECVD_CUBE));
		sb.append(",TOTAL_RECVD_NET_WGT="+String.valueOf(TOTAL_RECVD_NET_WGT));
		sb.append(",TOTAL_RECVD_GROSS_WGT="+String.valueOf(TOTAL_RECVD_GROSS_WGT));
		sb.append(",TOTAL_RECVD_VENDOR_PALLETS="+String.valueOf(TOTAL_RECVD_VENDOR_PALLETS));
		sb.append(",TOTAL_RECVD_WHSE_PALLETS="+String.valueOf(TOTAL_RECVD_WHSE_PALLETS));
		sb.append(",TOTAL_RECVD_VENDOR_UNITS="+String.valueOf(TOTAL_RECVD_VENDOR_UNITS));
		sb.append(",TOTAL_RECVD_FOB_COST="+String.valueOf(TOTAL_RECVD_FOB_COST));
		sb.append(",TOTAL_RECVD_FREIGHT_COST="+String.valueOf(TOTAL_RECVD_FREIGHT_COST));
		sb.append(",TOTAL_RECVD_AP_COST="+String.valueOf(TOTAL_RECVD_AP_COST));
		sb.append(",TOTAL_RECVD_BRACKET_DIFF="+String.valueOf(TOTAL_RECVD_BRACKET_DIFF));
		sb.append(",TOTAL_RECVD_PICKUP_ALLOW="+String.valueOf(TOTAL_RECVD_PICKUP_ALLOW));
		sb.append(",TOTAL_RECVD_UNLOADING_CHARGE="+String.valueOf(TOTAL_RECVD_UNLOADING_CHARGE));
		sb.append(",MERCH_PROFORMA_STATUS="+MERCH_PROFORMA_STATUS);
		sb.append(",MERCH_PROFORMA_NET_AMT="+String.valueOf(MERCH_PROFORMA_NET_AMT));
		sb.append(",UNMATCHED_MERCH_PROFROMA_NET_AMT="+String.valueOf(UNMATCHED_MERCH_PROFROMA_NET_AMT));
		sb.append(",MERCH_AMT_TO_BE_VOUCH="+String.valueOf(MERCH_AMT_TO_BE_VOUCH));
		sb.append(",MERCH_MATCHED_STATUS="+MERCH_MATCHED_STATUS);
		sb.append(",MERCH_VOUCH_STATUS="+MERCH_VOUCH_STATUS);
		sb.append(",MERCH_PAID_STATUS="+MERCH_PAID_STATUS);
		sb.append(",MERCH_PRICE_DIFF_HEADER_STATUS="+MERCH_PRICE_DIFF_HEADER_STATUS);
		sb.append(",MERCH_PRICE_DIFF_ERROR_LINE_COUNT="+String.valueOf(MERCH_PRICE_DIFF_ERROR_LINE_COUNT));
		sb.append(",MERCH_QTY_DIFF_HEADER_STATUS="+MERCH_QTY_DIFF_HEADER_STATUS);
		sb.append(",MERCH_QTY_DIFF_ERROR_LINE_COUNT="+String.valueOf(MERCH_QTY_DIFF_ERROR_LINE_COUNT));
		sb.append(",MERCH_PAYMENT_DUE_DATE="+String.valueOf(MERCH_PAYMENT_DUE_DATE));
		sb.append(",MERCH_CASH_DISC="+String.valueOf(MERCH_CASH_DISC));
		sb.append(",MERCH_VOUCH_AMT="+String.valueOf(MERCH_VOUCH_AMT));
		sb.append(",MERCH_ROUNDING_VAR="+String.valueOf(MERCH_ROUNDING_VAR));
		sb.append(",MERCH_INV_NO="+MERCH_INV_NO);
		sb.append(",MERCH_INV_DATE="+String.valueOf(MERCH_INV_DATE));
		sb.append(",MERCH_VENDOR_INTERCOM_BILLED_FLAG="+MERCH_VENDOR_INTERCOM_BILLED_FLAG);
		sb.append(",MERCH_VAR_AMT="+String.valueOf(MERCH_VAR_AMT));
		sb.append(",MERCH_FREIGHT_AMT="+String.valueOf(MERCH_FREIGHT_AMT));
		sb.append(",FREIGHT_PROFORMA_NET_AMT="+String.valueOf(FREIGHT_PROFORMA_NET_AMT));
		sb.append(",UNMATCHED_FREIGHT_PROFORMA_NET_AMT="+String.valueOf(UNMATCHED_FREIGHT_PROFORMA_NET_AMT));
		sb.append(",FREIGHT_AMT_TO_BE_VOUCH="+String.valueOf(FREIGHT_AMT_TO_BE_VOUCH));
		sb.append(",FREIGHT_MATCHED_STATUS="+FREIGHT_MATCHED_STATUS);
		sb.append(",FREIGHT_VOUCH_STATUS="+FREIGHT_VOUCH_STATUS);
		sb.append(",FREIGHT_PAID_STATUS="+FREIGHT_PAID_STATUS);
		sb.append(",FREIGHT_DIFF_HEADER_STATUS="+FREIGHT_DIFF_HEADER_STATUS);
		sb.append(",FREIGHT_PAYMENT_DUE_DATE="+String.valueOf(FREIGHT_PAYMENT_DUE_DATE));
		sb.append(",FREIGHT_CLAIM_STATUS="+FREIGHT_CLAIM_STATUS);
		sb.append(",FREIGHT_CASH_DISC="+String.valueOf(FREIGHT_CASH_DISC));
		sb.append(",FREIGHT_VARIANCE_AMT="+String.valueOf(FREIGHT_VARIANCE_AMT));
		sb.append(",FREIGHT_VOUCH_AMT="+String.valueOf(FREIGHT_VOUCH_AMT));
		sb.append(",FREIGHT_INV_NO="+FREIGHT_INV_NO);
		sb.append(",FREIGHT_INV_DATE="+String.valueOf(FREIGHT_INV_DATE));
		sb.append(",FREIGHT_VENDOR_INTERCOM_BILLED_FLAG="+FREIGHT_VENDOR_INTERCOM_BILLED_FLAG);
		sb.append(",TOTAL_VENDOR_SHORT_QTY="+String.valueOf(TOTAL_VENDOR_SHORT_QTY));
		sb.append(",TOTAL_CARRIER_SHORT_QTY="+String.valueOf(TOTAL_CARRIER_SHORT_QTY));
		sb.append(",TOTAL_DAMAGED_ACCEPTED_QTY="+String.valueOf(TOTAL_DAMAGED_ACCEPTED_QTY));
		sb.append(",FREIGHT_PAID_AMOUNT="+String.valueOf(FREIGHT_PAID_AMOUNT));
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",CUST_ORDER_NO="+String.valueOf(CUST_ORDER_NO));
		sb.append(",SHIP_FROM_NAME="+SHIP_FROM_NAME);
		sb.append(",SHIPPING_ADDRESS_ID="+SHIPPING_ADDRESS_ID);
		sb.append(",RESERVED_RE_RECOMMEND_FLAG="+RESERVED_RE_RECOMMEND_FLAG);
		sb.append(",RECOMMENDED_ORDER_FLAG="+RECOMMENDED_ORDER_FLAG);
		sb.append(",FAILED_SCORECARD_FLAG="+FAILED_SCORECARD_FLAG);
		sb.append(",VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG="+VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG);
		sb.append(",PRICE_BRACKET_SOURCE_CODE="+PRICE_BRACKET_SOURCE_CODE);
		sb.append(",SHORT_PERCENT_TO_BACKORDER="+String.valueOf(SHORT_PERCENT_TO_BACKORDER));
		sb.append(",SECONDARY_PO_TYPE="+SECONDARY_PO_TYPE);
		sb.append(",TRANSMIT_FLAG="+TRANSMIT_FLAG);
		sb.append(",TRANSMIT_TIMESTAMP="+String.valueOf(TRANSMIT_TIMESTAMP));
		sb.append(",PO_ERROR_IND="+PO_ERROR_IND);
		sb.append(",STOCK_IND="+STOCK_IND);
		sb.append(",PO_CLOSE_TIME="+String.valueOf(PO_CLOSE_TIME));
		sb.append(",REPLENISHMENT_SYSTEM="+REPLENISHMENT_SYSTEM);
		sb.append(",SHIPMENT_NOTICE_NO="+SHIPMENT_NOTICE_NO);
		sb.append(",FREIGHT_PROFORMA_STATUS="+FREIGHT_PROFORMA_STATUS);
		sb.append(",SHIPMENT_ID="+SHIPMENT_ID);
		sb.append(",FREIGHT_PROCESS_FLAG="+FREIGHT_PROCESS_FLAG);
		sb.append(",ORIG_PURCHASE_ORDER_NO="+ORIG_PURCHASE_ORDER_NO);
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",V3PF_SVOP="+V3PF_SVOP);
		sb.append(",CONFERENCE_TYPE="+CONFERENCE_TYPE);
		sb.append(",NEXT_CONF_RECVD_FLAG="+NEXT_CONF_RECVD_FLAG);
		sb.append(",VENDOR="+VENDOR);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",PICKUP_ALLOWANCE_OVERRIDE_FLAG="+PICKUP_ALLOWANCE_OVERRIDE_FLAG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(ORDER_CTRL_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_CTRL_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PURCHASE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PURCHASE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPPING_POINT_SHIP_FROM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPPING_POINT_SHIP_FROM);
            			}
            		
        			sb.append("|");
        		
        				if(SMS_CONFIRMED_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SMS_CONFIRMED_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_CONFIRMED_SHIP_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_CONFIRMED_SHIP_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(SCHEDULED_PO_RECEIPT_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SCHEDULED_PO_RECEIPT_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_PICKUP_ALLOW_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_PICKUP_ALLOW_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(PICKUP_ALLOW_FROM_BRACKET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PICKUP_ALLOW_FROM_BRACKET);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_FREIGHT_RATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_FREIGHT_RATE);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_FREIGHT_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_FREIGHT_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_MERCH_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_MERCH_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_FREIGHT_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_FREIGHT_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_ROUNDING_VARIANCE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_ROUNDING_VARIANCE);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_WITH_NEXT_ORDER_IND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_WITH_NEXT_ORDER_IND);
            			}
            		
        			sb.append("|");
        		
        				if(CUST_REFERENCE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUST_REFERENCE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(OUTSIDE_WHSE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OUTSIDE_WHSE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(RECOMMENDED_ORDER_SEQ_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECOMMENDED_ORDER_SEQ_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SYSCO_BRACKET_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SYSCO_BRACKET_NO);
            			}
            		
        			sb.append("|");
        		
        				if(BUYER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUYER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_GROUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_GROUP);
            			}
            		
        			sb.append("|");
        		
        				if(BUYING_GROUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUYING_GROUP);
            			}
            		
        			sb.append("|");
        		
        				if(PO_PRIMARY_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_PRIMARY_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PO_SECONDARY_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_SECONDARY_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PO_IN_USE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_IN_USE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(WHSE_CHANGE_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WHSE_CHANGE_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(PO_VALID_PRICING_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_VALID_PRICING_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PO_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(DEMAND_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEMAND_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(BACKORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BACKORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PROC_BILLED_VENDOR_BILLED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PROC_BILLED_VENDOR_BILLED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_INTER_COMPANY_STMT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_INTER_COMPANY_STMT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CONF_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONF_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PO_VALID_PRICING_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_VALID_PRICING_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(CONF_RECVD_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONF_RECVD_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(WHSE_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WHSE_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PO_CHANGED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_CHANGED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PRINT_PRICE_ON_PO_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRINT_PRICE_ON_PO_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATE_LEAD_TIME_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATE_LEAD_TIME_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_CHANGE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_CHANGE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CARRIER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CARRIER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(REVISED_PROFORMA_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REVISED_PROFORMA_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PROFORMA_INPROCESS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PROFORMA_INPROCESS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TRANSMIT_TO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TRANSMIT_TO);
            			}
            		
        			sb.append("|");
        		
        				if(RETRANSMIT_TO_VENDOR_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RETRANSMIT_TO_VENDOR_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(JOB_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOB_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PAY_TO_VENDOR_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PAY_TO_VENDOR_NO);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VENDOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VENDOR);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VENDOR_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VENDOR_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_FREIGHT_VENDOR_TERMS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_FREIGHT_VENDOR_TERMS);
            			}
            		
        			sb.append("|");
        		
        				if(TERMS_OVERRIDE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TERMS_OVERRIDE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PO_PLACED_WITH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_PLACED_WITH);
            			}
            		
        			sb.append("|");
        		
        				if(LOAD_CTRL_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOAD_CTRL_NO);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_ANTICIPATED_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_ANTICIPATED_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_ANTICIPATED_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_ANTICIPATED_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_VENDOR_CONF_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_VENDOR_CONF_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_SHIP_PICKUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_SHIP_PICKUP);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_SHIP_PICKUP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_SHIP_PICKUP);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_ORDER_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_ORDER_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_ORDER_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_ORDER_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_PO_NEEDED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_PO_NEEDED);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_PO_NEEDED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_PO_NEEDED);
            			}
            		
        			sb.append("|");
        		
        				if(PO_TRANSMISSION_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_TRANSMISSION_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_PO_ACCEPTED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_PO_ACCEPTED);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_PO_ACCEPTED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_PO_ACCEPTED);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_DATE_ACTUAL_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_DATE_ACTUAL_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_DATE_ACTUAL_RECEIPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_DATE_ACTUAL_RECEIPT);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(CALENDAR_VENDOR_CONF_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CALENDAR_VENDOR_CONF_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_LINES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_LINES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_NET_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_NET_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_GROSS_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_GROSS_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_VENDOR_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_VENDOR_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_VENDOR_UNITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_VENDOR_UNITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_FOB_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_FOB_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_FREIGHT_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_FREIGHT_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_AP_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_AP_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_PICKUP_ALLOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_PICKUP_ALLOW);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_PICKUP_ALLOW_RATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_PICKUP_ALLOW_RATE);
            			}
            		
        			sb.append("|");
        		
        				if(PICKUP_ALLOW_TO_BRACKET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PICKUP_ALLOW_TO_BRACKET);
            			}
            		
        			sb.append("|");
        		
        				if(WHSE_UNLOAD_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WHSE_UNLOAD_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(WHSE_UNLOAD_CHARGE_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(WHSE_UNLOAD_CHARGE_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_NON_DIST_MERCH_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_NON_DIST_MERCH_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_WHSE_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_WHSE_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_FREIGHT_RATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_FREIGHT_RATE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_FREIGHT_RATE_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_FREIGHT_RATE_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_UNLOADING_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_UNLOADING_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_UNLOADING_CHRG_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_UNLOADING_CHRG_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_PICKUP_ALLOW_RATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_PICKUP_ALLOW_RATE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_PICKUP_ALLOW_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_PICKUP_ALLOW_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_PICKUP_ALLOW_FROM_BRACKET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_PICKUP_ALLOW_FROM_BRACKET);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_PICKUP_ALLOW_TO_BRACKET == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_PICKUP_ALLOW_TO_BRACKET);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_LINES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_LINES);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTA_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTA_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIMRED_TOTAL_CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIMRED_TOTAL_CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_NET_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_NET_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_GROSS_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_GROSS_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_VENDOR_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_VENDOR_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_VENDOR_UNITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_VENDOR_UNITS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_FOB_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_FOB_COST);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_FREIGHT_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_FREIGHT_COST);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_AP_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_AP_COST);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_PICKUP_ALLOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_PICKUP_ALLOW);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_MERCH_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_MERCH_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_FREIGHT_ALLOW_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_FREIGHT_ALLOW_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_UNLOADING_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_UNLOADING_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_BRACKET_DIFF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_BRACKET_DIFF);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_TOTAL_WHSE_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_TOTAL_WHSE_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(CONFIRMED_USER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFIRMED_USER);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_CONF_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_CONF_NO);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_CONF_METHOD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_CONF_METHOD);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_LINES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_LINES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_CASES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_CASES);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_CUBE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_CUBE);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_NET_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_NET_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_GROSS_WGT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_GROSS_WGT);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_VENDOR_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_VENDOR_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_WHSE_PALLETS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_WHSE_PALLETS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_VENDOR_UNITS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_VENDOR_UNITS);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_FOB_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_FOB_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_FREIGHT_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_FREIGHT_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_AP_COST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_AP_COST);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_BRACKET_DIFF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_BRACKET_DIFF);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_PICKUP_ALLOW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_PICKUP_ALLOW);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_RECVD_UNLOADING_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_RECVD_UNLOADING_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PROFORMA_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PROFORMA_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PROFORMA_NET_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PROFORMA_NET_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(UNMATCHED_MERCH_PROFROMA_NET_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UNMATCHED_MERCH_PROFROMA_NET_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_AMT_TO_BE_VOUCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_AMT_TO_BE_VOUCH);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_MATCHED_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_MATCHED_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_VOUCH_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_VOUCH_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PAID_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PAID_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PRICE_DIFF_HEADER_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PRICE_DIFF_HEADER_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PRICE_DIFF_ERROR_LINE_COUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PRICE_DIFF_ERROR_LINE_COUNT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_QTY_DIFF_HEADER_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_QTY_DIFF_HEADER_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_QTY_DIFF_ERROR_LINE_COUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_QTY_DIFF_ERROR_LINE_COUNT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_PAYMENT_DUE_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_PAYMENT_DUE_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_CASH_DISC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_CASH_DISC);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_VOUCH_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_VOUCH_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_ROUNDING_VAR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_ROUNDING_VAR);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_INV_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_INV_NO);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_INV_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_INV_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_VENDOR_INTERCOM_BILLED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_VENDOR_INTERCOM_BILLED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_VAR_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_VAR_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(MERCH_FREIGHT_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MERCH_FREIGHT_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PROFORMA_NET_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PROFORMA_NET_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(UNMATCHED_FREIGHT_PROFORMA_NET_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UNMATCHED_FREIGHT_PROFORMA_NET_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_AMT_TO_BE_VOUCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_AMT_TO_BE_VOUCH);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_MATCHED_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_MATCHED_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VOUCH_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VOUCH_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PAID_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PAID_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_DIFF_HEADER_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_DIFF_HEADER_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PAYMENT_DUE_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PAYMENT_DUE_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_CLAIM_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_CLAIM_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_CASH_DISC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_CASH_DISC);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VARIANCE_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VARIANCE_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VOUCH_AMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VOUCH_AMT);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_INV_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_INV_NO);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_INV_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_INV_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_VENDOR_INTERCOM_BILLED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_VENDOR_INTERCOM_BILLED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_VENDOR_SHORT_QTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_VENDOR_SHORT_QTY);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_CARRIER_SHORT_QTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_CARRIER_SHORT_QTY);
            			}
            		
        			sb.append("|");
        		
        				if(TOTAL_DAMAGED_ACCEPTED_QTY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TOTAL_DAMAGED_ACCEPTED_QTY);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PAID_AMOUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PAID_AMOUNT);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_TO_CUST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_TO_CUST);
            			}
            		
        			sb.append("|");
        		
        				if(CUST_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUST_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_FROM_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_FROM_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPPING_ADDRESS_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPPING_ADDRESS_ID);
            			}
            		
        			sb.append("|");
        		
        				if(RESERVED_RE_RECOMMEND_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESERVED_RE_RECOMMEND_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(RECOMMENDED_ORDER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECOMMENDED_ORDER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(FAILED_SCORECARD_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FAILED_SCORECARD_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_BRACKET_SOURCE_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_BRACKET_SOURCE_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(SHORT_PERCENT_TO_BACKORDER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHORT_PERCENT_TO_BACKORDER);
            			}
            		
        			sb.append("|");
        		
        				if(SECONDARY_PO_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SECONDARY_PO_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(TRANSMIT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TRANSMIT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TRANSMIT_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TRANSMIT_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(PO_ERROR_IND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_ERROR_IND);
            			}
            		
        			sb.append("|");
        		
        				if(STOCK_IND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOCK_IND);
            			}
            		
        			sb.append("|");
        		
        				if(PO_CLOSE_TIME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_CLOSE_TIME);
            			}
            		
        			sb.append("|");
        		
        				if(REPLENISHMENT_SYSTEM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REPLENISHMENT_SYSTEM);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPMENT_NOTICE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPMENT_NOTICE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PROFORMA_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PROFORMA_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPMENT_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPMENT_ID);
            			}
            		
        			sb.append("|");
        		
        				if(FREIGHT_PROCESS_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREIGHT_PROCESS_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ORIG_PURCHASE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORIG_PURCHASE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(IS_ACTIVE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_ACTIVE);
            			}
            		
        			sb.append("|");
        		
        				if(V3PF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PF_SVOP);
            			}
            		
        			sb.append("|");
        		
        				if(CONFERENCE_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CONFERENCE_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(NEXT_CONF_RECVD_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NEXT_CONF_RECVD_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_PROGRAM_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_PROGRAM_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(IS_DELETED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IS_DELETED);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(PICKUP_ALLOWANCE_OVERRIDE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PICKUP_ALLOWANCE_OVERRIDE_FLAG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(PURCHASE_ORDER_HEADER_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ORDER_CTRL_NO, other.ORDER_CTRL_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[0];

	
			    public String V3PO;

				public String getV3PO () {
					return this.V3PO;
				}
				
			    public String V3OWID;

				public String getV3OWID () {
					return this.V3OWID;
				}
				
			    public String V3ARCO;

				public String getV3ARCO () {
					return this.V3ARCO;
				}
				
			    public BigDecimal V3ROSQ;

				public BigDecimal getV3ROSQ () {
					return this.V3ROSQ;
				}
				
			    public BigDecimal V3SBNO;

				public BigDecimal getV3SBNO () {
					return this.V3SBNO;
				}
				
			    public String V3BUYR;

				public String getV3BUYR () {
					return this.V3BUYR;
				}
				
			    public String V3OCNB;

				public String getV3OCNB () {
					return this.V3OCNB;
				}
				
			    public String V3OFCI;

				public String getV3OFCI () {
					return this.V3OFCI;
				}
				
			    public BigDecimal V3BYGP;

				public BigDecimal getV3BYGP () {
					return this.V3BYGP;
				}
				
			    public String V3POST;

				public String getV3POST () {
					return this.V3POST;
				}
				
			    public String V3POSS;

				public String getV3POSS () {
					return this.V3POSS;
				}
				
			    public String V3INUS;

				public String getV3INUS () {
					return this.V3INUS;
				}
				
			    public String V3WCCD;

				public String getV3WCCD () {
					return this.V3WCCD;
				}
				
			    public String V3VLPF;

				public String getV3VLPF () {
					return this.V3VLPF;
				}
				
			    public String V3POTP;

				public String getV3POTP () {
					return this.V3POTP;
				}
				
			    public String V3DMST;

				public String getV3DMST () {
					return this.V3DMST;
				}
				
			    public String V3BORF;

				public String getV3BORF () {
					return this.V3BORF;
				}
				
			    public String V3PBVB;

				public String getV3PBVB () {
					return this.V3PBVB;
				}
				
			    public String V3FICS;

				public String getV3FICS () {
					return this.V3FICS;
				}
				
			    public String V3SCRF;

				public String getV3SCRF () {
					return this.V3SCRF;
				}
				
			    public String V3CFST;

				public String getV3CFST () {
					return this.V3CFST;
				}
				
			    public String V3VLPA;

				public String getV3VLPA () {
					return this.V3VLPA;
				}
				
			    public String V3CFRF;

				public String getV3CFRF () {
					return this.V3CFRF;
				}
				
			    public String V3WHST;

				public String getV3WHST () {
					return this.V3WHST;
				}
				
			    public String V3POCH;

				public String getV3POCH () {
					return this.V3POCH;
				}
				
			    public String V3PPOP;

				public String getV3PPOP () {
					return this.V3PPOP;
				}
				
			    public String V3UPLT;

				public String getV3UPLT () {
					return this.V3UPLT;
				}
				
			    public String V3PCFL;

				public String getV3PCFL () {
					return this.V3PCFL;
				}
				
			    public String V3PAOF;

				public String getV3PAOF () {
					return this.V3PAOF;
				}
				
			    public String V3FROF;

				public String getV3FROF () {
					return this.V3FROF;
				}
				
			    public String V3CFTP;

				public String getV3CFTP () {
					return this.V3CFTP;
				}
				
			    public String V3CARI;

				public String getV3CARI () {
					return this.V3CARI;
				}
				
			    public String V3RPFF;

				public String getV3RPFF () {
					return this.V3RPFF;
				}
				
			    public String V3PFIP;

				public String getV3PFIP () {
					return this.V3PFIP;
				}
				
			    public String V3TRMT;

				public String getV3TRMT () {
					return this.V3TRMT;
				}
				
			    public String V3RTVF;

				public String getV3RTVF () {
					return this.V3RTVF;
				}
				
			    public String V3WHDR;

				public String getV3WHDR () {
					return this.V3WHDR;
				}
				
			    public String V3JBNO;

				public String getV3JBNO () {
					return this.V3JBNO;
				}
				
			    public String V3PVND;

				public String getV3PVND () {
					return this.V3PVND;
				}
				
			    public String V3VNBR;

				public String getV3VNBR () {
					return this.V3VNBR;
				}
				
			    public BigDecimal V3ADCD;

				public BigDecimal getV3ADCD () {
					return this.V3ADCD;
				}
				
			    public String V3PFRV;

				public String getV3PFRV () {
					return this.V3PFRV;
				}
				
			    public String V3TERM;

				public String getV3TERM () {
					return this.V3TERM;
				}
				
			    public String V3FTRM;

				public String getV3FTRM () {
					return this.V3FTRM;
				}
				
			    public String V3CNFT;

				public String getV3CNFT () {
					return this.V3CNFT;
				}
				
			    public String V3CFVT;

				public String getV3CFVT () {
					return this.V3CFVT;
				}
				
			    public String V3TMOV;

				public String getV3TMOV () {
					return this.V3TMOV;
				}
				
			    public String V3POPW;

				public String getV3POPW () {
					return this.V3POPW;
				}
				
			    public String V3LCN;

				public String getV3LCN () {
					return this.V3LCN;
				}
				
			    public String V3PO1;

				public String getV3PO1 () {
					return this.V3PO1;
				}
				
			    public BigDecimal V3ARDE;

				public BigDecimal getV3ARDE () {
					return this.V3ARDE;
				}
				
			    public BigDecimal V3ARBD;

				public BigDecimal getV3ARBD () {
					return this.V3ARBD;
				}
				
			    public BigDecimal V3PCRD;

				public BigDecimal getV3PCRD () {
					return this.V3PCRD;
				}
				
			    public BigDecimal V3OCDT;

				public BigDecimal getV3OCDT () {
					return this.V3OCDT;
				}
				
			    public BigDecimal V3PCSD;

				public BigDecimal getV3PCSD () {
					return this.V3PCSD;
				}
				
			    public BigDecimal V3PSRD;

				public BigDecimal getV3PSRD () {
					return this.V3PSRD;
				}
				
			    public BigDecimal V3PSRT;

				public BigDecimal getV3PSRT () {
					return this.V3PSRT;
				}
				
			    public BigDecimal V3SHDT;

				public BigDecimal getV3SHDT () {
					return this.V3SHDT;
				}
				
			    public BigDecimal V3CSPD;

				public BigDecimal getV3CSPD () {
					return this.V3CSPD;
				}
				
			    public BigDecimal V3ORDT;

				public BigDecimal getV3ORDT () {
					return this.V3ORDT;
				}
				
			    public BigDecimal V3CLOD;

				public BigDecimal getV3CLOD () {
					return this.V3CLOD;
				}
				
			    public BigDecimal V3NDDT;

				public BigDecimal getV3NDDT () {
					return this.V3NDDT;
				}
				
			    public BigDecimal V3CLDN;

				public BigDecimal getV3CLDN () {
					return this.V3CLDN;
				}
				
			    public BigDecimal V3TRDT;

				public BigDecimal getV3TRDT () {
					return this.V3TRDT;
				}
				
			    public BigDecimal V3TRTM;

				public BigDecimal getV3TRTM () {
					return this.V3TRTM;
				}
				
			    public BigDecimal V3PDTA;

				public BigDecimal getV3PDTA () {
					return this.V3PDTA;
				}
				
			    public BigDecimal V3CPAD;

				public BigDecimal getV3CPAD () {
					return this.V3CPAD;
				}
				
			    public BigDecimal V3PDTR;

				public BigDecimal getV3PDTR () {
					return this.V3PDTR;
				}
				
			    public BigDecimal V3CLRD;

				public BigDecimal getV3CLRD () {
					return this.V3CLRD;
				}
				
			    public BigDecimal V3POLC;

				public BigDecimal getV3POLC () {
					return this.V3POLC;
				}
				
			    public BigDecimal V3POCD;

				public BigDecimal getV3POCD () {
					return this.V3POCD;
				}
				
			    public BigDecimal V3TTL1;

				public BigDecimal getV3TTL1 () {
					return this.V3TTL1;
				}
				
			    public BigDecimal V3CSTT;

				public BigDecimal getV3CSTT () {
					return this.V3CSTT;
				}
				
			    public BigDecimal V3TTOC;

				public BigDecimal getV3TTOC () {
					return this.V3TTOC;
				}
				
			    public BigDecimal V3TOCK;

				public BigDecimal getV3TOCK () {
					return this.V3TOCK;
				}
				
			    public BigDecimal V3TTNW;

				public BigDecimal getV3TTNW () {
					return this.V3TTNW;
				}
				
			    public BigDecimal V3TNWK;

				public BigDecimal getV3TNWK () {
					return this.V3TNWK;
				}
				
			    public BigDecimal V3TTGW;

				public BigDecimal getV3TTGW () {
					return this.V3TTGW;
				}
				
			    public BigDecimal V3TGWK;

				public BigDecimal getV3TGWK () {
					return this.V3TGWK;
				}
				
			    public BigDecimal V3TTPL;

				public BigDecimal getV3TTPL () {
					return this.V3TTPL;
				}
				
			    public BigDecimal V3TTVU;

				public BigDecimal getV3TTVU () {
					return this.V3TTVU;
				}
				
			    public BigDecimal V3TTFB;

				public BigDecimal getV3TTFB () {
					return this.V3TTFB;
				}
				
			    public BigDecimal V3TTFR;

				public BigDecimal getV3TTFR () {
					return this.V3TTFR;
				}
				
			    public BigDecimal V3TTAP;

				public BigDecimal getV3TTAP () {
					return this.V3TTAP;
				}
				
			    public BigDecimal V3TTPU;

				public BigDecimal getV3TTPU () {
					return this.V3TTPU;
				}
				
			    public BigDecimal V3VPUA;

				public BigDecimal getV3VPUA () {
					return this.V3VPUA;
				}
				
			    public String V3PALT;

				public String getV3PALT () {
					return this.V3PALT;
				}
				
			    public BigDecimal V3PUBF;

				public BigDecimal getV3PUBF () {
					return this.V3PUBF;
				}
				
			    public BigDecimal V3PUBT;

				public BigDecimal getV3PUBT () {
					return this.V3PUBT;
				}
				
			    public BigDecimal V3VFRT;

				public BigDecimal getV3VFRT () {
					return this.V3VFRT;
				}
				
			    public String V3FRTP;

				public String getV3FRTP () {
					return this.V3FRTP;
				}
				
			    public BigDecimal V3WULC;

				public BigDecimal getV3WULC () {
					return this.V3WULC;
				}
				
			    public String V3WUCT;

				public String getV3WUCT () {
					return this.V3WUCT;
				}
				
			    public BigDecimal V3NDAC;

				public BigDecimal getV3NDAC () {
					return this.V3NDAC;
				}
				
			    public BigDecimal V3ONAF;

				public BigDecimal getV3ONAF () {
					return this.V3ONAF;
				}
				
			    public BigDecimal V3ACDM;

				public BigDecimal getV3ACDM () {
					return this.V3ACDM;
				}
				
			    public BigDecimal V3ACDF;

				public BigDecimal getV3ACDF () {
					return this.V3ACDF;
				}
				
			    public BigDecimal V3TUCA;

				public BigDecimal getV3TUCA () {
					return this.V3TUCA;
				}
				
			    public BigDecimal V3TTBD;

				public BigDecimal getV3TTBD () {
					return this.V3TTBD;
				}
				
			    public BigDecimal V3TLWP;

				public BigDecimal getV3TLWP () {
					return this.V3TLWP;
				}
				
			    public BigDecimal V3CNFR;

				public BigDecimal getV3CNFR () {
					return this.V3CNFR;
				}
				
			    public String V3CFRT;

				public String getV3CFRT () {
					return this.V3CFRT;
				}
				
			    public BigDecimal V3CULC;

				public BigDecimal getV3CULC () {
					return this.V3CULC;
				}
				
			    public String V3CULT;

				public String getV3CULT () {
					return this.V3CULT;
				}
				
			    public BigDecimal V3CPAL;

				public BigDecimal getV3CPAL () {
					return this.V3CPAL;
				}
				
			    public String V3CPUT;

				public String getV3CPUT () {
					return this.V3CPUT;
				}
				
			    public BigDecimal V3CPFB;

				public BigDecimal getV3CPFB () {
					return this.V3CPFB;
				}
				
			    public BigDecimal V3CPTB;

				public BigDecimal getV3CPTB () {
					return this.V3CPTB;
				}
				
			    public BigDecimal V3CTLN;

				public BigDecimal getV3CTLN () {
					return this.V3CTLN;
				}
				
			    public BigDecimal V3CCTT;

				public BigDecimal getV3CCTT () {
					return this.V3CCTT;
				}
				
			    public BigDecimal V3CTOC;

				public BigDecimal getV3CTOC () {
					return this.V3CTOC;
				}
				
			    public BigDecimal V3CTCK;

				public BigDecimal getV3CTCK () {
					return this.V3CTCK;
				}
				
			    public BigDecimal V3CTNW;

				public BigDecimal getV3CTNW () {
					return this.V3CTNW;
				}
				
			    public BigDecimal V3CTNK;

				public BigDecimal getV3CTNK () {
					return this.V3CTNK;
				}
				
			    public BigDecimal V3CTGW;

				public BigDecimal getV3CTGW () {
					return this.V3CTGW;
				}
				
			    public BigDecimal V3CTGK;

				public BigDecimal getV3CTGK () {
					return this.V3CTGK;
				}
				
			    public BigDecimal V3CTPL;

				public BigDecimal getV3CTPL () {
					return this.V3CTPL;
				}
				
			    public BigDecimal V3CTVU;

				public BigDecimal getV3CTVU () {
					return this.V3CTVU;
				}
				
			    public BigDecimal V3CTBC;

				public BigDecimal getV3CTBC () {
					return this.V3CTBC;
				}
				
			    public BigDecimal V3CTFC;

				public BigDecimal getV3CTFC () {
					return this.V3CTFC;
				}
				
			    public BigDecimal V3CTAC;

				public BigDecimal getV3CTAC () {
					return this.V3CTAC;
				}
				
			    public BigDecimal V3CTPA;

				public BigDecimal getV3CTPA () {
					return this.V3CTPA;
				}
				
			    public BigDecimal V3CNAC;

				public BigDecimal getV3CNAC () {
					return this.V3CNAC;
				}
				
			    public BigDecimal V3CNAF;

				public BigDecimal getV3CNAF () {
					return this.V3CNAF;
				}
				
			    public BigDecimal V3CACM;

				public BigDecimal getV3CACM () {
					return this.V3CACM;
				}
				
			    public BigDecimal V3CACF;

				public BigDecimal getV3CACF () {
					return this.V3CACF;
				}
				
			    public BigDecimal V3CTUC;

				public BigDecimal getV3CTUC () {
					return this.V3CTUC;
				}
				
			    public BigDecimal V3CTBD;

				public BigDecimal getV3CTBD () {
					return this.V3CTBD;
				}
				
			    public BigDecimal V3CTWP;

				public BigDecimal getV3CTWP () {
					return this.V3CTWP;
				}
				
			    public String V3POCB;

				public String getV3POCB () {
					return this.V3POCB;
				}
				
			    public String V3POCN;

				public String getV3POCN () {
					return this.V3POCN;
				}
				
			    public String V3POCM;

				public String getV3POCM () {
					return this.V3POCM;
				}
				
			    public BigDecimal V3TNRL;

				public BigDecimal getV3TNRL () {
					return this.V3TNRL;
				}
				
			    public BigDecimal V3CSTR;

				public BigDecimal getV3CSTR () {
					return this.V3CSTR;
				}
				
			    public BigDecimal V3TRCB;

				public BigDecimal getV3TRCB () {
					return this.V3TRCB;
				}
				
			    public BigDecimal V3TRBK;

				public BigDecimal getV3TRBK () {
					return this.V3TRBK;
				}
				
			    public BigDecimal V3TRNW;

				public BigDecimal getV3TRNW () {
					return this.V3TRNW;
				}
				
			    public BigDecimal V3TRNK;

				public BigDecimal getV3TRNK () {
					return this.V3TRNK;
				}
				
			    public BigDecimal V3TRGW;

				public BigDecimal getV3TRGW () {
					return this.V3TRGW;
				}
				
			    public BigDecimal V3TRGK;

				public BigDecimal getV3TRGK () {
					return this.V3TRGK;
				}
				
			    public BigDecimal V3TRPS;

				public BigDecimal getV3TRPS () {
					return this.V3TRPS;
				}
				
			    public BigDecimal V3TRVP;

				public BigDecimal getV3TRVP () {
					return this.V3TRVP;
				}
				
			    public BigDecimal V3TRVU;

				public BigDecimal getV3TRVU () {
					return this.V3TRVU;
				}
				
			    public BigDecimal V3TRFC;

				public BigDecimal getV3TRFC () {
					return this.V3TRFC;
				}
				
			    public BigDecimal V3TRFR;

				public BigDecimal getV3TRFR () {
					return this.V3TRFR;
				}
				
			    public BigDecimal V3TRDA;

				public BigDecimal getV3TRDA () {
					return this.V3TRDA;
				}
				
			    public BigDecimal V3TRBD;

				public BigDecimal getV3TRBD () {
					return this.V3TRBD;
				}
				
			    public BigDecimal V3TRPA;

				public BigDecimal getV3TRPA () {
					return this.V3TRPA;
				}
				
			    public BigDecimal V3TRUC;

				public BigDecimal getV3TRUC () {
					return this.V3TRUC;
				}
				
			    public String V3PMPS;

				public String getV3PMPS () {
					return this.V3PMPS;
				}
				
			    public BigDecimal V3PFNA;

				public BigDecimal getV3PFNA () {
					return this.V3PFNA;
				}
				
			    public BigDecimal V3UNAM;

				public BigDecimal getV3UNAM () {
					return this.V3UNAM;
				}
				
			    public BigDecimal V3MAVC;

				public BigDecimal getV3MAVC () {
					return this.V3MAVC;
				}
				
			    public String V3MMTS;

				public String getV3MMTS () {
					return this.V3MMTS;
				}
				
			    public String V3MVCS;

				public String getV3MVCS () {
					return this.V3MVCS;
				}
				
			    public String V3MPDS;

				public String getV3MPDS () {
					return this.V3MPDS;
				}
				
			    public String V3MPDH;

				public String getV3MPDH () {
					return this.V3MPDH;
				}
				
			    public BigDecimal V3MPDL;

				public BigDecimal getV3MPDL () {
					return this.V3MPDL;
				}
				
			    public String V3MQDH;

				public String getV3MQDH () {
					return this.V3MQDH;
				}
				
			    public BigDecimal V3MQDL;

				public BigDecimal getV3MQDL () {
					return this.V3MQDL;
				}
				
			    public BigDecimal V3MPDT;

				public BigDecimal getV3MPDT () {
					return this.V3MPDT;
				}
				
			    public BigDecimal V3MCSD;

				public BigDecimal getV3MCSD () {
					return this.V3MCSD;
				}
				
			    public BigDecimal V3MVCA;

				public BigDecimal getV3MVCA () {
					return this.V3MVCA;
				}
				
			    public BigDecimal V3MERV;

				public BigDecimal getV3MERV () {
					return this.V3MERV;
				}
				
			    public String V3MINV;

				public String getV3MINV () {
					return this.V3MINV;
				}
				
			    public BigDecimal V3MIDT;

				public BigDecimal getV3MIDT () {
					return this.V3MIDT;
				}
				
			    public String V3MVIF;

				public String getV3MVIF () {
					return this.V3MVIF;
				}
				
			    public BigDecimal V3MVAR;

				public BigDecimal getV3MVAR () {
					return this.V3MVAR;
				}
				
			    public BigDecimal V3MPDA;

				public BigDecimal getV3MPDA () {
					return this.V3MPDA;
				}
				
			    public String V3PPFS;

				public String getV3PPFS () {
					return this.V3PPFS;
				}
				
			    public BigDecimal V3FPNA;

				public BigDecimal getV3FPNA () {
					return this.V3FPNA;
				}
				
			    public BigDecimal V3UFPA;

				public BigDecimal getV3UFPA () {
					return this.V3UFPA;
				}
				
			    public BigDecimal V3FAVC;

				public BigDecimal getV3FAVC () {
					return this.V3FAVC;
				}
				
			    public String V3FMTS;

				public String getV3FMTS () {
					return this.V3FMTS;
				}
				
			    public String V3FVCS;

				public String getV3FVCS () {
					return this.V3FVCS;
				}
				
			    public String V3FPDS;

				public String getV3FPDS () {
					return this.V3FPDS;
				}
				
			    public String V3FCDH;

				public String getV3FCDH () {
					return this.V3FCDH;
				}
				
			    public BigDecimal V3FCDL;

				public BigDecimal getV3FCDL () {
					return this.V3FCDL;
				}
				
			    public BigDecimal V3FPDT;

				public BigDecimal getV3FPDT () {
					return this.V3FPDT;
				}
				
			    public String V3RSVN;

				public String getV3RSVN () {
					return this.V3RSVN;
				}
				
			    public String V3FTCS;

				public String getV3FTCS () {
					return this.V3FTCS;
				}
				
			    public BigDecimal V3FCAD;

				public BigDecimal getV3FCAD () {
					return this.V3FCAD;
				}
				
			    public BigDecimal V3FVAR;

				public BigDecimal getV3FVAR () {
					return this.V3FVAR;
				}
				
			    public BigDecimal V3FVCH;

				public BigDecimal getV3FVCH () {
					return this.V3FVCH;
				}
				
			    public BigDecimal V3FTRV;

				public BigDecimal getV3FTRV () {
					return this.V3FTRV;
				}
				
			    public String V3FINV;

				public String getV3FINV () {
					return this.V3FINV;
				}
				
			    public BigDecimal V3FIDT;

				public BigDecimal getV3FIDT () {
					return this.V3FIDT;
				}
				
			    public String V3FVIF;

				public String getV3FVIF () {
					return this.V3FVIF;
				}
				
			    public BigDecimal V3TVSQ;

				public BigDecimal getV3TVSQ () {
					return this.V3TVSQ;
				}
				
			    public BigDecimal V3TKSQ;

				public BigDecimal getV3TKSQ () {
					return this.V3TKSQ;
				}
				
			    public BigDecimal V3TDAQ;

				public BigDecimal getV3TDAQ () {
					return this.V3TDAQ;
				}
				
			    public BigDecimal V3NDAF;

				public BigDecimal getV3NDAF () {
					return this.V3NDAF;
				}
				
			    public BigDecimal V3FPDA;

				public BigDecimal getV3FPDA () {
					return this.V3FPDA;
				}
				
			    public String V3CUNO;

				public String getV3CUNO () {
					return this.V3CUNO;
				}
				
			    public BigDecimal V3ORNO;

				public BigDecimal getV3ORNO () {
					return this.V3ORNO;
				}
				
			    public String V3SHNM;

				public String getV3SHNM () {
					return this.V3SHNM;
				}
				
			    public String V3SADD;

				public String getV3SADD () {
					return this.V3SADD;
				}
				
			    public String V3SHNO;

				public String getV3SHNO () {
					return this.V3SHNO;
				}
				
			    public String V3PONU;

				public String getV3PONU () {
					return this.V3PONU;
				}
				
			    public String V3RERF;

				public String getV3RERF () {
					return this.V3RERF;
				}
				
			    public String V3RECO;

				public String getV3RECO () {
					return this.V3RECO;
				}
				
			    public String V3FSCF;

				public String getV3FSCF () {
					return this.V3FSCF;
				}
				
			    public BigDecimal V3POEO;

				public BigDecimal getV3POEO () {
					return this.V3POEO;
				}
				
			    public String V3POVO;

				public String getV3POVO () {
					return this.V3POVO;
				}
				
			    public String V3PBSC;

				public String getV3PBSC () {
					return this.V3PBSC;
				}
				
			    public String V3RECF;

				public String getV3RECF () {
					return this.V3RECF;
				}
				
			    public BigDecimal V3PSTB;

				public BigDecimal getV3PSTB () {
					return this.V3PSTB;
				}
				
			    public String V3TMSN;

				public String getV3TMSN () {
					return this.V3TMSN;
				}
				
			    public String V3XMFL;

				public String getV3XMFL () {
					return this.V3XMFL;
				}
				
			    public BigDecimal V3XMDT;

				public BigDecimal getV3XMDT () {
					return this.V3XMDT;
				}
				
			    public BigDecimal V3XMTM;

				public BigDecimal getV3XMTM () {
					return this.V3XMTM;
				}
				
			    public String V3ERRF;

				public String getV3ERRF () {
					return this.V3ERRF;
				}
				
			    public String V3STKI;

				public String getV3STKI () {
					return this.V3STKI;
				}
				
			    public BigDecimal V3COTM;

				public BigDecimal getV3COTM () {
					return this.V3COTM;
				}
				
			    public String V3RPRC;

				public String getV3RPRC () {
					return this.V3RPRC;
				}
				
			    public String V3FIMI;

				public String getV3FIMI () {
					return this.V3FIMI;
				}
				
			    public BigDecimal V3TXDT;

				public BigDecimal getV3TXDT () {
					return this.V3TXDT;
				}
				
			    public BigDecimal V3TXTM;

				public BigDecimal getV3TXTM () {
					return this.V3TXTM;
				}
				
			    public String V3POIF;

				public String getV3POIF () {
					return this.V3POIF;
				}
				
			    public String V3COD1;

				public String getV3COD1 () {
					return this.V3COD1;
				}
				
			    public String V3SNNO;

				public String getV3SNNO () {
					return this.V3SNNO;
				}
				
			    public String V3SHID;

				public String getV3SHID () {
					return this.V3SHID;
				}
				
			    public String V3FRTI;

				public String getV3FRTI () {
					return this.V3FRTI;
				}
				
			    public String V3OPO;

				public String getV3OPO () {
					return this.V3OPO;
				}
				
			    public BigDecimal V3EADT;

				public BigDecimal getV3EADT () {
					return this.V3EADT;
				}
				
			    public BigDecimal V3EATM;

				public BigDecimal getV3EATM () {
					return this.V3EATM;
				}
				
			    public String V3EAID;

				public String getV3EAID () {
					return this.V3EAID;
				}
				
			    public BigDecimal V3MODT;

				public BigDecimal getV3MODT () {
					return this.V3MODT;
				}
				
			    public BigDecimal V3MOTM;

				public BigDecimal getV3MOTM () {
					return this.V3MOTM;
				}
				
			    public String V3MOID;

				public String getV3MOID () {
					return this.V3MOID;
				}
				
			    public String V3MOPG;

				public String getV3MOPG () {
					return this.V3MOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Header_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.V3PO = readString(dis);
					
					this.V3OWID = readString(dis);
					
					this.V3ARCO = readString(dis);
					
						this.V3ROSQ = (BigDecimal) dis.readObject();
					
						this.V3SBNO = (BigDecimal) dis.readObject();
					
					this.V3BUYR = readString(dis);
					
					this.V3OCNB = readString(dis);
					
					this.V3OFCI = readString(dis);
					
						this.V3BYGP = (BigDecimal) dis.readObject();
					
					this.V3POST = readString(dis);
					
					this.V3POSS = readString(dis);
					
					this.V3INUS = readString(dis);
					
					this.V3WCCD = readString(dis);
					
					this.V3VLPF = readString(dis);
					
					this.V3POTP = readString(dis);
					
					this.V3DMST = readString(dis);
					
					this.V3BORF = readString(dis);
					
					this.V3PBVB = readString(dis);
					
					this.V3FICS = readString(dis);
					
					this.V3SCRF = readString(dis);
					
					this.V3CFST = readString(dis);
					
					this.V3VLPA = readString(dis);
					
					this.V3CFRF = readString(dis);
					
					this.V3WHST = readString(dis);
					
					this.V3POCH = readString(dis);
					
					this.V3PPOP = readString(dis);
					
					this.V3UPLT = readString(dis);
					
					this.V3PCFL = readString(dis);
					
					this.V3PAOF = readString(dis);
					
					this.V3FROF = readString(dis);
					
					this.V3CFTP = readString(dis);
					
					this.V3CARI = readString(dis);
					
					this.V3RPFF = readString(dis);
					
					this.V3PFIP = readString(dis);
					
					this.V3TRMT = readString(dis);
					
					this.V3RTVF = readString(dis);
					
					this.V3WHDR = readString(dis);
					
					this.V3JBNO = readString(dis);
					
					this.V3PVND = readString(dis);
					
					this.V3VNBR = readString(dis);
					
						this.V3ADCD = (BigDecimal) dis.readObject();
					
					this.V3PFRV = readString(dis);
					
					this.V3TERM = readString(dis);
					
					this.V3FTRM = readString(dis);
					
					this.V3CNFT = readString(dis);
					
					this.V3CFVT = readString(dis);
					
					this.V3TMOV = readString(dis);
					
					this.V3POPW = readString(dis);
					
					this.V3LCN = readString(dis);
					
					this.V3PO1 = readString(dis);
					
						this.V3ARDE = (BigDecimal) dis.readObject();
					
						this.V3ARBD = (BigDecimal) dis.readObject();
					
						this.V3PCRD = (BigDecimal) dis.readObject();
					
						this.V3OCDT = (BigDecimal) dis.readObject();
					
						this.V3PCSD = (BigDecimal) dis.readObject();
					
						this.V3PSRD = (BigDecimal) dis.readObject();
					
						this.V3PSRT = (BigDecimal) dis.readObject();
					
						this.V3SHDT = (BigDecimal) dis.readObject();
					
						this.V3CSPD = (BigDecimal) dis.readObject();
					
						this.V3ORDT = (BigDecimal) dis.readObject();
					
						this.V3CLOD = (BigDecimal) dis.readObject();
					
						this.V3NDDT = (BigDecimal) dis.readObject();
					
						this.V3CLDN = (BigDecimal) dis.readObject();
					
						this.V3TRDT = (BigDecimal) dis.readObject();
					
						this.V3TRTM = (BigDecimal) dis.readObject();
					
						this.V3PDTA = (BigDecimal) dis.readObject();
					
						this.V3CPAD = (BigDecimal) dis.readObject();
					
						this.V3PDTR = (BigDecimal) dis.readObject();
					
						this.V3CLRD = (BigDecimal) dis.readObject();
					
						this.V3POLC = (BigDecimal) dis.readObject();
					
						this.V3POCD = (BigDecimal) dis.readObject();
					
						this.V3TTL1 = (BigDecimal) dis.readObject();
					
						this.V3CSTT = (BigDecimal) dis.readObject();
					
						this.V3TTOC = (BigDecimal) dis.readObject();
					
						this.V3TOCK = (BigDecimal) dis.readObject();
					
						this.V3TTNW = (BigDecimal) dis.readObject();
					
						this.V3TNWK = (BigDecimal) dis.readObject();
					
						this.V3TTGW = (BigDecimal) dis.readObject();
					
						this.V3TGWK = (BigDecimal) dis.readObject();
					
						this.V3TTPL = (BigDecimal) dis.readObject();
					
						this.V3TTVU = (BigDecimal) dis.readObject();
					
						this.V3TTFB = (BigDecimal) dis.readObject();
					
						this.V3TTFR = (BigDecimal) dis.readObject();
					
						this.V3TTAP = (BigDecimal) dis.readObject();
					
						this.V3TTPU = (BigDecimal) dis.readObject();
					
						this.V3VPUA = (BigDecimal) dis.readObject();
					
					this.V3PALT = readString(dis);
					
						this.V3PUBF = (BigDecimal) dis.readObject();
					
						this.V3PUBT = (BigDecimal) dis.readObject();
					
						this.V3VFRT = (BigDecimal) dis.readObject();
					
					this.V3FRTP = readString(dis);
					
						this.V3WULC = (BigDecimal) dis.readObject();
					
					this.V3WUCT = readString(dis);
					
						this.V3NDAC = (BigDecimal) dis.readObject();
					
						this.V3ONAF = (BigDecimal) dis.readObject();
					
						this.V3ACDM = (BigDecimal) dis.readObject();
					
						this.V3ACDF = (BigDecimal) dis.readObject();
					
						this.V3TUCA = (BigDecimal) dis.readObject();
					
						this.V3TTBD = (BigDecimal) dis.readObject();
					
						this.V3TLWP = (BigDecimal) dis.readObject();
					
						this.V3CNFR = (BigDecimal) dis.readObject();
					
					this.V3CFRT = readString(dis);
					
						this.V3CULC = (BigDecimal) dis.readObject();
					
					this.V3CULT = readString(dis);
					
						this.V3CPAL = (BigDecimal) dis.readObject();
					
					this.V3CPUT = readString(dis);
					
						this.V3CPFB = (BigDecimal) dis.readObject();
					
						this.V3CPTB = (BigDecimal) dis.readObject();
					
						this.V3CTLN = (BigDecimal) dis.readObject();
					
						this.V3CCTT = (BigDecimal) dis.readObject();
					
						this.V3CTOC = (BigDecimal) dis.readObject();
					
						this.V3CTCK = (BigDecimal) dis.readObject();
					
						this.V3CTNW = (BigDecimal) dis.readObject();
					
						this.V3CTNK = (BigDecimal) dis.readObject();
					
						this.V3CTGW = (BigDecimal) dis.readObject();
					
						this.V3CTGK = (BigDecimal) dis.readObject();
					
						this.V3CTPL = (BigDecimal) dis.readObject();
					
						this.V3CTVU = (BigDecimal) dis.readObject();
					
						this.V3CTBC = (BigDecimal) dis.readObject();
					
						this.V3CTFC = (BigDecimal) dis.readObject();
					
						this.V3CTAC = (BigDecimal) dis.readObject();
					
						this.V3CTPA = (BigDecimal) dis.readObject();
					
						this.V3CNAC = (BigDecimal) dis.readObject();
					
						this.V3CNAF = (BigDecimal) dis.readObject();
					
						this.V3CACM = (BigDecimal) dis.readObject();
					
						this.V3CACF = (BigDecimal) dis.readObject();
					
						this.V3CTUC = (BigDecimal) dis.readObject();
					
						this.V3CTBD = (BigDecimal) dis.readObject();
					
						this.V3CTWP = (BigDecimal) dis.readObject();
					
					this.V3POCB = readString(dis);
					
					this.V3POCN = readString(dis);
					
					this.V3POCM = readString(dis);
					
						this.V3TNRL = (BigDecimal) dis.readObject();
					
						this.V3CSTR = (BigDecimal) dis.readObject();
					
						this.V3TRCB = (BigDecimal) dis.readObject();
					
						this.V3TRBK = (BigDecimal) dis.readObject();
					
						this.V3TRNW = (BigDecimal) dis.readObject();
					
						this.V3TRNK = (BigDecimal) dis.readObject();
					
						this.V3TRGW = (BigDecimal) dis.readObject();
					
						this.V3TRGK = (BigDecimal) dis.readObject();
					
						this.V3TRPS = (BigDecimal) dis.readObject();
					
						this.V3TRVP = (BigDecimal) dis.readObject();
					
						this.V3TRVU = (BigDecimal) dis.readObject();
					
						this.V3TRFC = (BigDecimal) dis.readObject();
					
						this.V3TRFR = (BigDecimal) dis.readObject();
					
						this.V3TRDA = (BigDecimal) dis.readObject();
					
						this.V3TRBD = (BigDecimal) dis.readObject();
					
						this.V3TRPA = (BigDecimal) dis.readObject();
					
						this.V3TRUC = (BigDecimal) dis.readObject();
					
					this.V3PMPS = readString(dis);
					
						this.V3PFNA = (BigDecimal) dis.readObject();
					
						this.V3UNAM = (BigDecimal) dis.readObject();
					
						this.V3MAVC = (BigDecimal) dis.readObject();
					
					this.V3MMTS = readString(dis);
					
					this.V3MVCS = readString(dis);
					
					this.V3MPDS = readString(dis);
					
					this.V3MPDH = readString(dis);
					
						this.V3MPDL = (BigDecimal) dis.readObject();
					
					this.V3MQDH = readString(dis);
					
						this.V3MQDL = (BigDecimal) dis.readObject();
					
						this.V3MPDT = (BigDecimal) dis.readObject();
					
						this.V3MCSD = (BigDecimal) dis.readObject();
					
						this.V3MVCA = (BigDecimal) dis.readObject();
					
						this.V3MERV = (BigDecimal) dis.readObject();
					
					this.V3MINV = readString(dis);
					
						this.V3MIDT = (BigDecimal) dis.readObject();
					
					this.V3MVIF = readString(dis);
					
						this.V3MVAR = (BigDecimal) dis.readObject();
					
						this.V3MPDA = (BigDecimal) dis.readObject();
					
					this.V3PPFS = readString(dis);
					
						this.V3FPNA = (BigDecimal) dis.readObject();
					
						this.V3UFPA = (BigDecimal) dis.readObject();
					
						this.V3FAVC = (BigDecimal) dis.readObject();
					
					this.V3FMTS = readString(dis);
					
					this.V3FVCS = readString(dis);
					
					this.V3FPDS = readString(dis);
					
					this.V3FCDH = readString(dis);
					
						this.V3FCDL = (BigDecimal) dis.readObject();
					
						this.V3FPDT = (BigDecimal) dis.readObject();
					
					this.V3RSVN = readString(dis);
					
					this.V3FTCS = readString(dis);
					
						this.V3FCAD = (BigDecimal) dis.readObject();
					
						this.V3FVAR = (BigDecimal) dis.readObject();
					
						this.V3FVCH = (BigDecimal) dis.readObject();
					
						this.V3FTRV = (BigDecimal) dis.readObject();
					
					this.V3FINV = readString(dis);
					
						this.V3FIDT = (BigDecimal) dis.readObject();
					
					this.V3FVIF = readString(dis);
					
						this.V3TVSQ = (BigDecimal) dis.readObject();
					
						this.V3TKSQ = (BigDecimal) dis.readObject();
					
						this.V3TDAQ = (BigDecimal) dis.readObject();
					
						this.V3NDAF = (BigDecimal) dis.readObject();
					
						this.V3FPDA = (BigDecimal) dis.readObject();
					
					this.V3CUNO = readString(dis);
					
						this.V3ORNO = (BigDecimal) dis.readObject();
					
					this.V3SHNM = readString(dis);
					
					this.V3SADD = readString(dis);
					
					this.V3SHNO = readString(dis);
					
					this.V3PONU = readString(dis);
					
					this.V3RERF = readString(dis);
					
					this.V3RECO = readString(dis);
					
					this.V3FSCF = readString(dis);
					
						this.V3POEO = (BigDecimal) dis.readObject();
					
					this.V3POVO = readString(dis);
					
					this.V3PBSC = readString(dis);
					
					this.V3RECF = readString(dis);
					
						this.V3PSTB = (BigDecimal) dis.readObject();
					
					this.V3TMSN = readString(dis);
					
					this.V3XMFL = readString(dis);
					
						this.V3XMDT = (BigDecimal) dis.readObject();
					
						this.V3XMTM = (BigDecimal) dis.readObject();
					
					this.V3ERRF = readString(dis);
					
					this.V3STKI = readString(dis);
					
						this.V3COTM = (BigDecimal) dis.readObject();
					
					this.V3RPRC = readString(dis);
					
					this.V3FIMI = readString(dis);
					
						this.V3TXDT = (BigDecimal) dis.readObject();
					
						this.V3TXTM = (BigDecimal) dis.readObject();
					
					this.V3POIF = readString(dis);
					
					this.V3COD1 = readString(dis);
					
					this.V3SNNO = readString(dis);
					
					this.V3SHID = readString(dis);
					
					this.V3FRTI = readString(dis);
					
					this.V3OPO = readString(dis);
					
						this.V3EADT = (BigDecimal) dis.readObject();
					
						this.V3EATM = (BigDecimal) dis.readObject();
					
					this.V3EAID = readString(dis);
					
						this.V3MODT = (BigDecimal) dis.readObject();
					
						this.V3MOTM = (BigDecimal) dis.readObject();
					
					this.V3MOID = readString(dis);
					
					this.V3MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Header_Inbound) {

        	try {

        		int length = 0;
		
					this.V3PO = readString(dis);
					
					this.V3OWID = readString(dis);
					
					this.V3ARCO = readString(dis);
					
						this.V3ROSQ = (BigDecimal) dis.readObject();
					
						this.V3SBNO = (BigDecimal) dis.readObject();
					
					this.V3BUYR = readString(dis);
					
					this.V3OCNB = readString(dis);
					
					this.V3OFCI = readString(dis);
					
						this.V3BYGP = (BigDecimal) dis.readObject();
					
					this.V3POST = readString(dis);
					
					this.V3POSS = readString(dis);
					
					this.V3INUS = readString(dis);
					
					this.V3WCCD = readString(dis);
					
					this.V3VLPF = readString(dis);
					
					this.V3POTP = readString(dis);
					
					this.V3DMST = readString(dis);
					
					this.V3BORF = readString(dis);
					
					this.V3PBVB = readString(dis);
					
					this.V3FICS = readString(dis);
					
					this.V3SCRF = readString(dis);
					
					this.V3CFST = readString(dis);
					
					this.V3VLPA = readString(dis);
					
					this.V3CFRF = readString(dis);
					
					this.V3WHST = readString(dis);
					
					this.V3POCH = readString(dis);
					
					this.V3PPOP = readString(dis);
					
					this.V3UPLT = readString(dis);
					
					this.V3PCFL = readString(dis);
					
					this.V3PAOF = readString(dis);
					
					this.V3FROF = readString(dis);
					
					this.V3CFTP = readString(dis);
					
					this.V3CARI = readString(dis);
					
					this.V3RPFF = readString(dis);
					
					this.V3PFIP = readString(dis);
					
					this.V3TRMT = readString(dis);
					
					this.V3RTVF = readString(dis);
					
					this.V3WHDR = readString(dis);
					
					this.V3JBNO = readString(dis);
					
					this.V3PVND = readString(dis);
					
					this.V3VNBR = readString(dis);
					
						this.V3ADCD = (BigDecimal) dis.readObject();
					
					this.V3PFRV = readString(dis);
					
					this.V3TERM = readString(dis);
					
					this.V3FTRM = readString(dis);
					
					this.V3CNFT = readString(dis);
					
					this.V3CFVT = readString(dis);
					
					this.V3TMOV = readString(dis);
					
					this.V3POPW = readString(dis);
					
					this.V3LCN = readString(dis);
					
					this.V3PO1 = readString(dis);
					
						this.V3ARDE = (BigDecimal) dis.readObject();
					
						this.V3ARBD = (BigDecimal) dis.readObject();
					
						this.V3PCRD = (BigDecimal) dis.readObject();
					
						this.V3OCDT = (BigDecimal) dis.readObject();
					
						this.V3PCSD = (BigDecimal) dis.readObject();
					
						this.V3PSRD = (BigDecimal) dis.readObject();
					
						this.V3PSRT = (BigDecimal) dis.readObject();
					
						this.V3SHDT = (BigDecimal) dis.readObject();
					
						this.V3CSPD = (BigDecimal) dis.readObject();
					
						this.V3ORDT = (BigDecimal) dis.readObject();
					
						this.V3CLOD = (BigDecimal) dis.readObject();
					
						this.V3NDDT = (BigDecimal) dis.readObject();
					
						this.V3CLDN = (BigDecimal) dis.readObject();
					
						this.V3TRDT = (BigDecimal) dis.readObject();
					
						this.V3TRTM = (BigDecimal) dis.readObject();
					
						this.V3PDTA = (BigDecimal) dis.readObject();
					
						this.V3CPAD = (BigDecimal) dis.readObject();
					
						this.V3PDTR = (BigDecimal) dis.readObject();
					
						this.V3CLRD = (BigDecimal) dis.readObject();
					
						this.V3POLC = (BigDecimal) dis.readObject();
					
						this.V3POCD = (BigDecimal) dis.readObject();
					
						this.V3TTL1 = (BigDecimal) dis.readObject();
					
						this.V3CSTT = (BigDecimal) dis.readObject();
					
						this.V3TTOC = (BigDecimal) dis.readObject();
					
						this.V3TOCK = (BigDecimal) dis.readObject();
					
						this.V3TTNW = (BigDecimal) dis.readObject();
					
						this.V3TNWK = (BigDecimal) dis.readObject();
					
						this.V3TTGW = (BigDecimal) dis.readObject();
					
						this.V3TGWK = (BigDecimal) dis.readObject();
					
						this.V3TTPL = (BigDecimal) dis.readObject();
					
						this.V3TTVU = (BigDecimal) dis.readObject();
					
						this.V3TTFB = (BigDecimal) dis.readObject();
					
						this.V3TTFR = (BigDecimal) dis.readObject();
					
						this.V3TTAP = (BigDecimal) dis.readObject();
					
						this.V3TTPU = (BigDecimal) dis.readObject();
					
						this.V3VPUA = (BigDecimal) dis.readObject();
					
					this.V3PALT = readString(dis);
					
						this.V3PUBF = (BigDecimal) dis.readObject();
					
						this.V3PUBT = (BigDecimal) dis.readObject();
					
						this.V3VFRT = (BigDecimal) dis.readObject();
					
					this.V3FRTP = readString(dis);
					
						this.V3WULC = (BigDecimal) dis.readObject();
					
					this.V3WUCT = readString(dis);
					
						this.V3NDAC = (BigDecimal) dis.readObject();
					
						this.V3ONAF = (BigDecimal) dis.readObject();
					
						this.V3ACDM = (BigDecimal) dis.readObject();
					
						this.V3ACDF = (BigDecimal) dis.readObject();
					
						this.V3TUCA = (BigDecimal) dis.readObject();
					
						this.V3TTBD = (BigDecimal) dis.readObject();
					
						this.V3TLWP = (BigDecimal) dis.readObject();
					
						this.V3CNFR = (BigDecimal) dis.readObject();
					
					this.V3CFRT = readString(dis);
					
						this.V3CULC = (BigDecimal) dis.readObject();
					
					this.V3CULT = readString(dis);
					
						this.V3CPAL = (BigDecimal) dis.readObject();
					
					this.V3CPUT = readString(dis);
					
						this.V3CPFB = (BigDecimal) dis.readObject();
					
						this.V3CPTB = (BigDecimal) dis.readObject();
					
						this.V3CTLN = (BigDecimal) dis.readObject();
					
						this.V3CCTT = (BigDecimal) dis.readObject();
					
						this.V3CTOC = (BigDecimal) dis.readObject();
					
						this.V3CTCK = (BigDecimal) dis.readObject();
					
						this.V3CTNW = (BigDecimal) dis.readObject();
					
						this.V3CTNK = (BigDecimal) dis.readObject();
					
						this.V3CTGW = (BigDecimal) dis.readObject();
					
						this.V3CTGK = (BigDecimal) dis.readObject();
					
						this.V3CTPL = (BigDecimal) dis.readObject();
					
						this.V3CTVU = (BigDecimal) dis.readObject();
					
						this.V3CTBC = (BigDecimal) dis.readObject();
					
						this.V3CTFC = (BigDecimal) dis.readObject();
					
						this.V3CTAC = (BigDecimal) dis.readObject();
					
						this.V3CTPA = (BigDecimal) dis.readObject();
					
						this.V3CNAC = (BigDecimal) dis.readObject();
					
						this.V3CNAF = (BigDecimal) dis.readObject();
					
						this.V3CACM = (BigDecimal) dis.readObject();
					
						this.V3CACF = (BigDecimal) dis.readObject();
					
						this.V3CTUC = (BigDecimal) dis.readObject();
					
						this.V3CTBD = (BigDecimal) dis.readObject();
					
						this.V3CTWP = (BigDecimal) dis.readObject();
					
					this.V3POCB = readString(dis);
					
					this.V3POCN = readString(dis);
					
					this.V3POCM = readString(dis);
					
						this.V3TNRL = (BigDecimal) dis.readObject();
					
						this.V3CSTR = (BigDecimal) dis.readObject();
					
						this.V3TRCB = (BigDecimal) dis.readObject();
					
						this.V3TRBK = (BigDecimal) dis.readObject();
					
						this.V3TRNW = (BigDecimal) dis.readObject();
					
						this.V3TRNK = (BigDecimal) dis.readObject();
					
						this.V3TRGW = (BigDecimal) dis.readObject();
					
						this.V3TRGK = (BigDecimal) dis.readObject();
					
						this.V3TRPS = (BigDecimal) dis.readObject();
					
						this.V3TRVP = (BigDecimal) dis.readObject();
					
						this.V3TRVU = (BigDecimal) dis.readObject();
					
						this.V3TRFC = (BigDecimal) dis.readObject();
					
						this.V3TRFR = (BigDecimal) dis.readObject();
					
						this.V3TRDA = (BigDecimal) dis.readObject();
					
						this.V3TRBD = (BigDecimal) dis.readObject();
					
						this.V3TRPA = (BigDecimal) dis.readObject();
					
						this.V3TRUC = (BigDecimal) dis.readObject();
					
					this.V3PMPS = readString(dis);
					
						this.V3PFNA = (BigDecimal) dis.readObject();
					
						this.V3UNAM = (BigDecimal) dis.readObject();
					
						this.V3MAVC = (BigDecimal) dis.readObject();
					
					this.V3MMTS = readString(dis);
					
					this.V3MVCS = readString(dis);
					
					this.V3MPDS = readString(dis);
					
					this.V3MPDH = readString(dis);
					
						this.V3MPDL = (BigDecimal) dis.readObject();
					
					this.V3MQDH = readString(dis);
					
						this.V3MQDL = (BigDecimal) dis.readObject();
					
						this.V3MPDT = (BigDecimal) dis.readObject();
					
						this.V3MCSD = (BigDecimal) dis.readObject();
					
						this.V3MVCA = (BigDecimal) dis.readObject();
					
						this.V3MERV = (BigDecimal) dis.readObject();
					
					this.V3MINV = readString(dis);
					
						this.V3MIDT = (BigDecimal) dis.readObject();
					
					this.V3MVIF = readString(dis);
					
						this.V3MVAR = (BigDecimal) dis.readObject();
					
						this.V3MPDA = (BigDecimal) dis.readObject();
					
					this.V3PPFS = readString(dis);
					
						this.V3FPNA = (BigDecimal) dis.readObject();
					
						this.V3UFPA = (BigDecimal) dis.readObject();
					
						this.V3FAVC = (BigDecimal) dis.readObject();
					
					this.V3FMTS = readString(dis);
					
					this.V3FVCS = readString(dis);
					
					this.V3FPDS = readString(dis);
					
					this.V3FCDH = readString(dis);
					
						this.V3FCDL = (BigDecimal) dis.readObject();
					
						this.V3FPDT = (BigDecimal) dis.readObject();
					
					this.V3RSVN = readString(dis);
					
					this.V3FTCS = readString(dis);
					
						this.V3FCAD = (BigDecimal) dis.readObject();
					
						this.V3FVAR = (BigDecimal) dis.readObject();
					
						this.V3FVCH = (BigDecimal) dis.readObject();
					
						this.V3FTRV = (BigDecimal) dis.readObject();
					
					this.V3FINV = readString(dis);
					
						this.V3FIDT = (BigDecimal) dis.readObject();
					
					this.V3FVIF = readString(dis);
					
						this.V3TVSQ = (BigDecimal) dis.readObject();
					
						this.V3TKSQ = (BigDecimal) dis.readObject();
					
						this.V3TDAQ = (BigDecimal) dis.readObject();
					
						this.V3NDAF = (BigDecimal) dis.readObject();
					
						this.V3FPDA = (BigDecimal) dis.readObject();
					
					this.V3CUNO = readString(dis);
					
						this.V3ORNO = (BigDecimal) dis.readObject();
					
					this.V3SHNM = readString(dis);
					
					this.V3SADD = readString(dis);
					
					this.V3SHNO = readString(dis);
					
					this.V3PONU = readString(dis);
					
					this.V3RERF = readString(dis);
					
					this.V3RECO = readString(dis);
					
					this.V3FSCF = readString(dis);
					
						this.V3POEO = (BigDecimal) dis.readObject();
					
					this.V3POVO = readString(dis);
					
					this.V3PBSC = readString(dis);
					
					this.V3RECF = readString(dis);
					
						this.V3PSTB = (BigDecimal) dis.readObject();
					
					this.V3TMSN = readString(dis);
					
					this.V3XMFL = readString(dis);
					
						this.V3XMDT = (BigDecimal) dis.readObject();
					
						this.V3XMTM = (BigDecimal) dis.readObject();
					
					this.V3ERRF = readString(dis);
					
					this.V3STKI = readString(dis);
					
						this.V3COTM = (BigDecimal) dis.readObject();
					
					this.V3RPRC = readString(dis);
					
					this.V3FIMI = readString(dis);
					
						this.V3TXDT = (BigDecimal) dis.readObject();
					
						this.V3TXTM = (BigDecimal) dis.readObject();
					
					this.V3POIF = readString(dis);
					
					this.V3COD1 = readString(dis);
					
					this.V3SNNO = readString(dis);
					
					this.V3SHID = readString(dis);
					
					this.V3FRTI = readString(dis);
					
					this.V3OPO = readString(dis);
					
						this.V3EADT = (BigDecimal) dis.readObject();
					
						this.V3EATM = (BigDecimal) dis.readObject();
					
					this.V3EAID = readString(dis);
					
						this.V3MODT = (BigDecimal) dis.readObject();
					
						this.V3MOTM = (BigDecimal) dis.readObject();
					
					this.V3MOID = readString(dis);
					
					this.V3MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.V3PO,dos);
					
					// String
				
						writeString(this.V3OWID,dos);
					
					// String
				
						writeString(this.V3ARCO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ROSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3SBNO);
					
					// String
				
						writeString(this.V3BUYR,dos);
					
					// String
				
						writeString(this.V3OCNB,dos);
					
					// String
				
						writeString(this.V3OFCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3BYGP);
					
					// String
				
						writeString(this.V3POST,dos);
					
					// String
				
						writeString(this.V3POSS,dos);
					
					// String
				
						writeString(this.V3INUS,dos);
					
					// String
				
						writeString(this.V3WCCD,dos);
					
					// String
				
						writeString(this.V3VLPF,dos);
					
					// String
				
						writeString(this.V3POTP,dos);
					
					// String
				
						writeString(this.V3DMST,dos);
					
					// String
				
						writeString(this.V3BORF,dos);
					
					// String
				
						writeString(this.V3PBVB,dos);
					
					// String
				
						writeString(this.V3FICS,dos);
					
					// String
				
						writeString(this.V3SCRF,dos);
					
					// String
				
						writeString(this.V3CFST,dos);
					
					// String
				
						writeString(this.V3VLPA,dos);
					
					// String
				
						writeString(this.V3CFRF,dos);
					
					// String
				
						writeString(this.V3WHST,dos);
					
					// String
				
						writeString(this.V3POCH,dos);
					
					// String
				
						writeString(this.V3PPOP,dos);
					
					// String
				
						writeString(this.V3UPLT,dos);
					
					// String
				
						writeString(this.V3PCFL,dos);
					
					// String
				
						writeString(this.V3PAOF,dos);
					
					// String
				
						writeString(this.V3FROF,dos);
					
					// String
				
						writeString(this.V3CFTP,dos);
					
					// String
				
						writeString(this.V3CARI,dos);
					
					// String
				
						writeString(this.V3RPFF,dos);
					
					// String
				
						writeString(this.V3PFIP,dos);
					
					// String
				
						writeString(this.V3TRMT,dos);
					
					// String
				
						writeString(this.V3RTVF,dos);
					
					// String
				
						writeString(this.V3WHDR,dos);
					
					// String
				
						writeString(this.V3JBNO,dos);
					
					// String
				
						writeString(this.V3PVND,dos);
					
					// String
				
						writeString(this.V3VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ADCD);
					
					// String
				
						writeString(this.V3PFRV,dos);
					
					// String
				
						writeString(this.V3TERM,dos);
					
					// String
				
						writeString(this.V3FTRM,dos);
					
					// String
				
						writeString(this.V3CNFT,dos);
					
					// String
				
						writeString(this.V3CFVT,dos);
					
					// String
				
						writeString(this.V3TMOV,dos);
					
					// String
				
						writeString(this.V3POPW,dos);
					
					// String
				
						writeString(this.V3LCN,dos);
					
					// String
				
						writeString(this.V3PO1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PCRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3OCDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PCSD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3SHDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLDN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PDTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PDTR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POLC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSTT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TOCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TNWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TGWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTPL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTPU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3VPUA);
					
					// String
				
						writeString(this.V3PALT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PUBF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PUBT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3VFRT);
					
					// String
				
						writeString(this.V3FRTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3WULC);
					
					// String
				
						writeString(this.V3WUCT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ONAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TUCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TLWP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNFR);
					
					// String
				
						writeString(this.V3CFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CULC);
					
					// String
				
						writeString(this.V3CULT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPAL);
					
					// String
				
						writeString(this.V3CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPTB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CCTT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTNK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTGK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTPL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTBC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTUC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTWP);
					
					// String
				
						writeString(this.V3POCB,dos);
					
					// String
				
						writeString(this.V3POCN,dos);
					
					// String
				
						writeString(this.V3POCM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TNRL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSTR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRCB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRBK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRNK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRGK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRPS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRVP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRUC);
					
					// String
				
						writeString(this.V3PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PFNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3UNAM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MAVC);
					
					// String
				
						writeString(this.V3MMTS,dos);
					
					// String
				
						writeString(this.V3MVCS,dos);
					
					// String
				
						writeString(this.V3MPDS,dos);
					
					// String
				
						writeString(this.V3MPDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDL);
					
					// String
				
						writeString(this.V3MQDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MQDL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MCSD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MVCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MERV);
					
					// String
				
						writeString(this.V3MINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MIDT);
					
					// String
				
						writeString(this.V3MVIF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MVAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDA);
					
					// String
				
						writeString(this.V3PPFS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3UFPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FAVC);
					
					// String
				
						writeString(this.V3FMTS,dos);
					
					// String
				
						writeString(this.V3FVCS,dos);
					
					// String
				
						writeString(this.V3FPDS,dos);
					
					// String
				
						writeString(this.V3FCDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FCDL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPDT);
					
					// String
				
						writeString(this.V3RSVN,dos);
					
					// String
				
						writeString(this.V3FTCS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FVAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FVCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FTRV);
					
					// String
				
						writeString(this.V3FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FIDT);
					
					// String
				
						writeString(this.V3FVIF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TVSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TKSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TDAQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPDA);
					
					// String
				
						writeString(this.V3CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ORNO);
					
					// String
				
						writeString(this.V3SHNM,dos);
					
					// String
				
						writeString(this.V3SADD,dos);
					
					// String
				
						writeString(this.V3SHNO,dos);
					
					// String
				
						writeString(this.V3PONU,dos);
					
					// String
				
						writeString(this.V3RERF,dos);
					
					// String
				
						writeString(this.V3RECO,dos);
					
					// String
				
						writeString(this.V3FSCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POEO);
					
					// String
				
						writeString(this.V3POVO,dos);
					
					// String
				
						writeString(this.V3PBSC,dos);
					
					// String
				
						writeString(this.V3RECF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSTB);
					
					// String
				
						writeString(this.V3TMSN,dos);
					
					// String
				
						writeString(this.V3XMFL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3XMDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3XMTM);
					
					// String
				
						writeString(this.V3ERRF,dos);
					
					// String
				
						writeString(this.V3STKI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3COTM);
					
					// String
				
						writeString(this.V3RPRC,dos);
					
					// String
				
						writeString(this.V3FIMI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TXDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TXTM);
					
					// String
				
						writeString(this.V3POIF,dos);
					
					// String
				
						writeString(this.V3COD1,dos);
					
					// String
				
						writeString(this.V3SNNO,dos);
					
					// String
				
						writeString(this.V3SHID,dos);
					
					// String
				
						writeString(this.V3FRTI,dos);
					
					// String
				
						writeString(this.V3OPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3EATM);
					
					// String
				
						writeString(this.V3EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MOTM);
					
					// String
				
						writeString(this.V3MOID,dos);
					
					// String
				
						writeString(this.V3MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.V3PO,dos);
					
					// String
				
						writeString(this.V3OWID,dos);
					
					// String
				
						writeString(this.V3ARCO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ROSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3SBNO);
					
					// String
				
						writeString(this.V3BUYR,dos);
					
					// String
				
						writeString(this.V3OCNB,dos);
					
					// String
				
						writeString(this.V3OFCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3BYGP);
					
					// String
				
						writeString(this.V3POST,dos);
					
					// String
				
						writeString(this.V3POSS,dos);
					
					// String
				
						writeString(this.V3INUS,dos);
					
					// String
				
						writeString(this.V3WCCD,dos);
					
					// String
				
						writeString(this.V3VLPF,dos);
					
					// String
				
						writeString(this.V3POTP,dos);
					
					// String
				
						writeString(this.V3DMST,dos);
					
					// String
				
						writeString(this.V3BORF,dos);
					
					// String
				
						writeString(this.V3PBVB,dos);
					
					// String
				
						writeString(this.V3FICS,dos);
					
					// String
				
						writeString(this.V3SCRF,dos);
					
					// String
				
						writeString(this.V3CFST,dos);
					
					// String
				
						writeString(this.V3VLPA,dos);
					
					// String
				
						writeString(this.V3CFRF,dos);
					
					// String
				
						writeString(this.V3WHST,dos);
					
					// String
				
						writeString(this.V3POCH,dos);
					
					// String
				
						writeString(this.V3PPOP,dos);
					
					// String
				
						writeString(this.V3UPLT,dos);
					
					// String
				
						writeString(this.V3PCFL,dos);
					
					// String
				
						writeString(this.V3PAOF,dos);
					
					// String
				
						writeString(this.V3FROF,dos);
					
					// String
				
						writeString(this.V3CFTP,dos);
					
					// String
				
						writeString(this.V3CARI,dos);
					
					// String
				
						writeString(this.V3RPFF,dos);
					
					// String
				
						writeString(this.V3PFIP,dos);
					
					// String
				
						writeString(this.V3TRMT,dos);
					
					// String
				
						writeString(this.V3RTVF,dos);
					
					// String
				
						writeString(this.V3WHDR,dos);
					
					// String
				
						writeString(this.V3JBNO,dos);
					
					// String
				
						writeString(this.V3PVND,dos);
					
					// String
				
						writeString(this.V3VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ADCD);
					
					// String
				
						writeString(this.V3PFRV,dos);
					
					// String
				
						writeString(this.V3TERM,dos);
					
					// String
				
						writeString(this.V3FTRM,dos);
					
					// String
				
						writeString(this.V3CNFT,dos);
					
					// String
				
						writeString(this.V3CFVT,dos);
					
					// String
				
						writeString(this.V3TMOV,dos);
					
					// String
				
						writeString(this.V3POPW,dos);
					
					// String
				
						writeString(this.V3LCN,dos);
					
					// String
				
						writeString(this.V3PO1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PCRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3OCDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PCSD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSRT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3SHDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSPD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLDN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PDTA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PDTR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CLRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POLC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTL1);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSTT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TOCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TNWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TGWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTPL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTPU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3VPUA);
					
					// String
				
						writeString(this.V3PALT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PUBF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PUBT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3VFRT);
					
					// String
				
						writeString(this.V3FRTP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3WULC);
					
					// String
				
						writeString(this.V3WUCT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ONAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TUCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TLWP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNFR);
					
					// String
				
						writeString(this.V3CFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CULC);
					
					// String
				
						writeString(this.V3CULT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPAL);
					
					// String
				
						writeString(this.V3CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CPTB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTLN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CCTT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTOC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTNK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTGK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTPL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTBC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CNAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTUC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CTWP);
					
					// String
				
						writeString(this.V3POCB,dos);
					
					// String
				
						writeString(this.V3POCN,dos);
					
					// String
				
						writeString(this.V3POCM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TNRL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3CSTR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRCB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRBK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRNW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRNK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRGW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRGK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRPS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRVP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRVU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TRUC);
					
					// String
				
						writeString(this.V3PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PFNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3UNAM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MAVC);
					
					// String
				
						writeString(this.V3MMTS,dos);
					
					// String
				
						writeString(this.V3MVCS,dos);
					
					// String
				
						writeString(this.V3MPDS,dos);
					
					// String
				
						writeString(this.V3MPDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDL);
					
					// String
				
						writeString(this.V3MQDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MQDL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MCSD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MVCA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MERV);
					
					// String
				
						writeString(this.V3MINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MIDT);
					
					// String
				
						writeString(this.V3MVIF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MVAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MPDA);
					
					// String
				
						writeString(this.V3PPFS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3UFPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FAVC);
					
					// String
				
						writeString(this.V3FMTS,dos);
					
					// String
				
						writeString(this.V3FVCS,dos);
					
					// String
				
						writeString(this.V3FPDS,dos);
					
					// String
				
						writeString(this.V3FCDH,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FCDL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPDT);
					
					// String
				
						writeString(this.V3RSVN,dos);
					
					// String
				
						writeString(this.V3FTCS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FVAR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FVCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FTRV);
					
					// String
				
						writeString(this.V3FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FIDT);
					
					// String
				
						writeString(this.V3FVIF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TVSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TKSQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TDAQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3NDAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3FPDA);
					
					// String
				
						writeString(this.V3CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3ORNO);
					
					// String
				
						writeString(this.V3SHNM,dos);
					
					// String
				
						writeString(this.V3SADD,dos);
					
					// String
				
						writeString(this.V3SHNO,dos);
					
					// String
				
						writeString(this.V3PONU,dos);
					
					// String
				
						writeString(this.V3RERF,dos);
					
					// String
				
						writeString(this.V3RECO,dos);
					
					// String
				
						writeString(this.V3FSCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3POEO);
					
					// String
				
						writeString(this.V3POVO,dos);
					
					// String
				
						writeString(this.V3PBSC,dos);
					
					// String
				
						writeString(this.V3RECF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3PSTB);
					
					// String
				
						writeString(this.V3TMSN,dos);
					
					// String
				
						writeString(this.V3XMFL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3XMDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3XMTM);
					
					// String
				
						writeString(this.V3ERRF,dos);
					
					// String
				
						writeString(this.V3STKI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3COTM);
					
					// String
				
						writeString(this.V3RPRC,dos);
					
					// String
				
						writeString(this.V3FIMI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TXDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3TXTM);
					
					// String
				
						writeString(this.V3POIF,dos);
					
					// String
				
						writeString(this.V3COD1,dos);
					
					// String
				
						writeString(this.V3SNNO,dos);
					
					// String
				
						writeString(this.V3SHID,dos);
					
					// String
				
						writeString(this.V3FRTI,dos);
					
					// String
				
						writeString(this.V3OPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3EATM);
					
					// String
				
						writeString(this.V3EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V3MOTM);
					
					// String
				
						writeString(this.V3MOID,dos);
					
					// String
				
						writeString(this.V3MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("V3PO="+V3PO);
		sb.append(",V3OWID="+V3OWID);
		sb.append(",V3ARCO="+V3ARCO);
		sb.append(",V3ROSQ="+String.valueOf(V3ROSQ));
		sb.append(",V3SBNO="+String.valueOf(V3SBNO));
		sb.append(",V3BUYR="+V3BUYR);
		sb.append(",V3OCNB="+V3OCNB);
		sb.append(",V3OFCI="+V3OFCI);
		sb.append(",V3BYGP="+String.valueOf(V3BYGP));
		sb.append(",V3POST="+V3POST);
		sb.append(",V3POSS="+V3POSS);
		sb.append(",V3INUS="+V3INUS);
		sb.append(",V3WCCD="+V3WCCD);
		sb.append(",V3VLPF="+V3VLPF);
		sb.append(",V3POTP="+V3POTP);
		sb.append(",V3DMST="+V3DMST);
		sb.append(",V3BORF="+V3BORF);
		sb.append(",V3PBVB="+V3PBVB);
		sb.append(",V3FICS="+V3FICS);
		sb.append(",V3SCRF="+V3SCRF);
		sb.append(",V3CFST="+V3CFST);
		sb.append(",V3VLPA="+V3VLPA);
		sb.append(",V3CFRF="+V3CFRF);
		sb.append(",V3WHST="+V3WHST);
		sb.append(",V3POCH="+V3POCH);
		sb.append(",V3PPOP="+V3PPOP);
		sb.append(",V3UPLT="+V3UPLT);
		sb.append(",V3PCFL="+V3PCFL);
		sb.append(",V3PAOF="+V3PAOF);
		sb.append(",V3FROF="+V3FROF);
		sb.append(",V3CFTP="+V3CFTP);
		sb.append(",V3CARI="+V3CARI);
		sb.append(",V3RPFF="+V3RPFF);
		sb.append(",V3PFIP="+V3PFIP);
		sb.append(",V3TRMT="+V3TRMT);
		sb.append(",V3RTVF="+V3RTVF);
		sb.append(",V3WHDR="+V3WHDR);
		sb.append(",V3JBNO="+V3JBNO);
		sb.append(",V3PVND="+V3PVND);
		sb.append(",V3VNBR="+V3VNBR);
		sb.append(",V3ADCD="+String.valueOf(V3ADCD));
		sb.append(",V3PFRV="+V3PFRV);
		sb.append(",V3TERM="+V3TERM);
		sb.append(",V3FTRM="+V3FTRM);
		sb.append(",V3CNFT="+V3CNFT);
		sb.append(",V3CFVT="+V3CFVT);
		sb.append(",V3TMOV="+V3TMOV);
		sb.append(",V3POPW="+V3POPW);
		sb.append(",V3LCN="+V3LCN);
		sb.append(",V3PO1="+V3PO1);
		sb.append(",V3ARDE="+String.valueOf(V3ARDE));
		sb.append(",V3ARBD="+String.valueOf(V3ARBD));
		sb.append(",V3PCRD="+String.valueOf(V3PCRD));
		sb.append(",V3OCDT="+String.valueOf(V3OCDT));
		sb.append(",V3PCSD="+String.valueOf(V3PCSD));
		sb.append(",V3PSRD="+String.valueOf(V3PSRD));
		sb.append(",V3PSRT="+String.valueOf(V3PSRT));
		sb.append(",V3SHDT="+String.valueOf(V3SHDT));
		sb.append(",V3CSPD="+String.valueOf(V3CSPD));
		sb.append(",V3ORDT="+String.valueOf(V3ORDT));
		sb.append(",V3CLOD="+String.valueOf(V3CLOD));
		sb.append(",V3NDDT="+String.valueOf(V3NDDT));
		sb.append(",V3CLDN="+String.valueOf(V3CLDN));
		sb.append(",V3TRDT="+String.valueOf(V3TRDT));
		sb.append(",V3TRTM="+String.valueOf(V3TRTM));
		sb.append(",V3PDTA="+String.valueOf(V3PDTA));
		sb.append(",V3CPAD="+String.valueOf(V3CPAD));
		sb.append(",V3PDTR="+String.valueOf(V3PDTR));
		sb.append(",V3CLRD="+String.valueOf(V3CLRD));
		sb.append(",V3POLC="+String.valueOf(V3POLC));
		sb.append(",V3POCD="+String.valueOf(V3POCD));
		sb.append(",V3TTL1="+String.valueOf(V3TTL1));
		sb.append(",V3CSTT="+String.valueOf(V3CSTT));
		sb.append(",V3TTOC="+String.valueOf(V3TTOC));
		sb.append(",V3TOCK="+String.valueOf(V3TOCK));
		sb.append(",V3TTNW="+String.valueOf(V3TTNW));
		sb.append(",V3TNWK="+String.valueOf(V3TNWK));
		sb.append(",V3TTGW="+String.valueOf(V3TTGW));
		sb.append(",V3TGWK="+String.valueOf(V3TGWK));
		sb.append(",V3TTPL="+String.valueOf(V3TTPL));
		sb.append(",V3TTVU="+String.valueOf(V3TTVU));
		sb.append(",V3TTFB="+String.valueOf(V3TTFB));
		sb.append(",V3TTFR="+String.valueOf(V3TTFR));
		sb.append(",V3TTAP="+String.valueOf(V3TTAP));
		sb.append(",V3TTPU="+String.valueOf(V3TTPU));
		sb.append(",V3VPUA="+String.valueOf(V3VPUA));
		sb.append(",V3PALT="+V3PALT);
		sb.append(",V3PUBF="+String.valueOf(V3PUBF));
		sb.append(",V3PUBT="+String.valueOf(V3PUBT));
		sb.append(",V3VFRT="+String.valueOf(V3VFRT));
		sb.append(",V3FRTP="+V3FRTP);
		sb.append(",V3WULC="+String.valueOf(V3WULC));
		sb.append(",V3WUCT="+V3WUCT);
		sb.append(",V3NDAC="+String.valueOf(V3NDAC));
		sb.append(",V3ONAF="+String.valueOf(V3ONAF));
		sb.append(",V3ACDM="+String.valueOf(V3ACDM));
		sb.append(",V3ACDF="+String.valueOf(V3ACDF));
		sb.append(",V3TUCA="+String.valueOf(V3TUCA));
		sb.append(",V3TTBD="+String.valueOf(V3TTBD));
		sb.append(",V3TLWP="+String.valueOf(V3TLWP));
		sb.append(",V3CNFR="+String.valueOf(V3CNFR));
		sb.append(",V3CFRT="+V3CFRT);
		sb.append(",V3CULC="+String.valueOf(V3CULC));
		sb.append(",V3CULT="+V3CULT);
		sb.append(",V3CPAL="+String.valueOf(V3CPAL));
		sb.append(",V3CPUT="+V3CPUT);
		sb.append(",V3CPFB="+String.valueOf(V3CPFB));
		sb.append(",V3CPTB="+String.valueOf(V3CPTB));
		sb.append(",V3CTLN="+String.valueOf(V3CTLN));
		sb.append(",V3CCTT="+String.valueOf(V3CCTT));
		sb.append(",V3CTOC="+String.valueOf(V3CTOC));
		sb.append(",V3CTCK="+String.valueOf(V3CTCK));
		sb.append(",V3CTNW="+String.valueOf(V3CTNW));
		sb.append(",V3CTNK="+String.valueOf(V3CTNK));
		sb.append(",V3CTGW="+String.valueOf(V3CTGW));
		sb.append(",V3CTGK="+String.valueOf(V3CTGK));
		sb.append(",V3CTPL="+String.valueOf(V3CTPL));
		sb.append(",V3CTVU="+String.valueOf(V3CTVU));
		sb.append(",V3CTBC="+String.valueOf(V3CTBC));
		sb.append(",V3CTFC="+String.valueOf(V3CTFC));
		sb.append(",V3CTAC="+String.valueOf(V3CTAC));
		sb.append(",V3CTPA="+String.valueOf(V3CTPA));
		sb.append(",V3CNAC="+String.valueOf(V3CNAC));
		sb.append(",V3CNAF="+String.valueOf(V3CNAF));
		sb.append(",V3CACM="+String.valueOf(V3CACM));
		sb.append(",V3CACF="+String.valueOf(V3CACF));
		sb.append(",V3CTUC="+String.valueOf(V3CTUC));
		sb.append(",V3CTBD="+String.valueOf(V3CTBD));
		sb.append(",V3CTWP="+String.valueOf(V3CTWP));
		sb.append(",V3POCB="+V3POCB);
		sb.append(",V3POCN="+V3POCN);
		sb.append(",V3POCM="+V3POCM);
		sb.append(",V3TNRL="+String.valueOf(V3TNRL));
		sb.append(",V3CSTR="+String.valueOf(V3CSTR));
		sb.append(",V3TRCB="+String.valueOf(V3TRCB));
		sb.append(",V3TRBK="+String.valueOf(V3TRBK));
		sb.append(",V3TRNW="+String.valueOf(V3TRNW));
		sb.append(",V3TRNK="+String.valueOf(V3TRNK));
		sb.append(",V3TRGW="+String.valueOf(V3TRGW));
		sb.append(",V3TRGK="+String.valueOf(V3TRGK));
		sb.append(",V3TRPS="+String.valueOf(V3TRPS));
		sb.append(",V3TRVP="+String.valueOf(V3TRVP));
		sb.append(",V3TRVU="+String.valueOf(V3TRVU));
		sb.append(",V3TRFC="+String.valueOf(V3TRFC));
		sb.append(",V3TRFR="+String.valueOf(V3TRFR));
		sb.append(",V3TRDA="+String.valueOf(V3TRDA));
		sb.append(",V3TRBD="+String.valueOf(V3TRBD));
		sb.append(",V3TRPA="+String.valueOf(V3TRPA));
		sb.append(",V3TRUC="+String.valueOf(V3TRUC));
		sb.append(",V3PMPS="+V3PMPS);
		sb.append(",V3PFNA="+String.valueOf(V3PFNA));
		sb.append(",V3UNAM="+String.valueOf(V3UNAM));
		sb.append(",V3MAVC="+String.valueOf(V3MAVC));
		sb.append(",V3MMTS="+V3MMTS);
		sb.append(",V3MVCS="+V3MVCS);
		sb.append(",V3MPDS="+V3MPDS);
		sb.append(",V3MPDH="+V3MPDH);
		sb.append(",V3MPDL="+String.valueOf(V3MPDL));
		sb.append(",V3MQDH="+V3MQDH);
		sb.append(",V3MQDL="+String.valueOf(V3MQDL));
		sb.append(",V3MPDT="+String.valueOf(V3MPDT));
		sb.append(",V3MCSD="+String.valueOf(V3MCSD));
		sb.append(",V3MVCA="+String.valueOf(V3MVCA));
		sb.append(",V3MERV="+String.valueOf(V3MERV));
		sb.append(",V3MINV="+V3MINV);
		sb.append(",V3MIDT="+String.valueOf(V3MIDT));
		sb.append(",V3MVIF="+V3MVIF);
		sb.append(",V3MVAR="+String.valueOf(V3MVAR));
		sb.append(",V3MPDA="+String.valueOf(V3MPDA));
		sb.append(",V3PPFS="+V3PPFS);
		sb.append(",V3FPNA="+String.valueOf(V3FPNA));
		sb.append(",V3UFPA="+String.valueOf(V3UFPA));
		sb.append(",V3FAVC="+String.valueOf(V3FAVC));
		sb.append(",V3FMTS="+V3FMTS);
		sb.append(",V3FVCS="+V3FVCS);
		sb.append(",V3FPDS="+V3FPDS);
		sb.append(",V3FCDH="+V3FCDH);
		sb.append(",V3FCDL="+String.valueOf(V3FCDL));
		sb.append(",V3FPDT="+String.valueOf(V3FPDT));
		sb.append(",V3RSVN="+V3RSVN);
		sb.append(",V3FTCS="+V3FTCS);
		sb.append(",V3FCAD="+String.valueOf(V3FCAD));
		sb.append(",V3FVAR="+String.valueOf(V3FVAR));
		sb.append(",V3FVCH="+String.valueOf(V3FVCH));
		sb.append(",V3FTRV="+String.valueOf(V3FTRV));
		sb.append(",V3FINV="+V3FINV);
		sb.append(",V3FIDT="+String.valueOf(V3FIDT));
		sb.append(",V3FVIF="+V3FVIF);
		sb.append(",V3TVSQ="+String.valueOf(V3TVSQ));
		sb.append(",V3TKSQ="+String.valueOf(V3TKSQ));
		sb.append(",V3TDAQ="+String.valueOf(V3TDAQ));
		sb.append(",V3NDAF="+String.valueOf(V3NDAF));
		sb.append(",V3FPDA="+String.valueOf(V3FPDA));
		sb.append(",V3CUNO="+V3CUNO);
		sb.append(",V3ORNO="+String.valueOf(V3ORNO));
		sb.append(",V3SHNM="+V3SHNM);
		sb.append(",V3SADD="+V3SADD);
		sb.append(",V3SHNO="+V3SHNO);
		sb.append(",V3PONU="+V3PONU);
		sb.append(",V3RERF="+V3RERF);
		sb.append(",V3RECO="+V3RECO);
		sb.append(",V3FSCF="+V3FSCF);
		sb.append(",V3POEO="+String.valueOf(V3POEO));
		sb.append(",V3POVO="+V3POVO);
		sb.append(",V3PBSC="+V3PBSC);
		sb.append(",V3RECF="+V3RECF);
		sb.append(",V3PSTB="+String.valueOf(V3PSTB));
		sb.append(",V3TMSN="+V3TMSN);
		sb.append(",V3XMFL="+V3XMFL);
		sb.append(",V3XMDT="+String.valueOf(V3XMDT));
		sb.append(",V3XMTM="+String.valueOf(V3XMTM));
		sb.append(",V3ERRF="+V3ERRF);
		sb.append(",V3STKI="+V3STKI);
		sb.append(",V3COTM="+String.valueOf(V3COTM));
		sb.append(",V3RPRC="+V3RPRC);
		sb.append(",V3FIMI="+V3FIMI);
		sb.append(",V3TXDT="+String.valueOf(V3TXDT));
		sb.append(",V3TXTM="+String.valueOf(V3TXTM));
		sb.append(",V3POIF="+V3POIF);
		sb.append(",V3COD1="+V3COD1);
		sb.append(",V3SNNO="+V3SNNO);
		sb.append(",V3SHID="+V3SHID);
		sb.append(",V3FRTI="+V3FRTI);
		sb.append(",V3OPO="+V3OPO);
		sb.append(",V3EADT="+String.valueOf(V3EADT));
		sb.append(",V3EATM="+String.valueOf(V3EATM));
		sb.append(",V3EAID="+V3EAID);
		sb.append(",V3MODT="+String.valueOf(V3MODT));
		sb.append(",V3MOTM="+String.valueOf(V3MOTM));
		sb.append(",V3MOID="+V3MOID);
		sb.append(",V3MOPG="+V3MOPG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(V3PO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PO);
            			}
            		
        			sb.append("|");
        		
        				if(V3OWID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OWID);
            			}
            		
        			sb.append("|");
        		
        				if(V3ARCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ARCO);
            			}
            		
        			sb.append("|");
        		
        				if(V3ROSQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ROSQ);
            			}
            		
        			sb.append("|");
        		
        				if(V3SBNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SBNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3BUYR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3BUYR);
            			}
            		
        			sb.append("|");
        		
        				if(V3OCNB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OCNB);
            			}
            		
        			sb.append("|");
        		
        				if(V3OFCI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OFCI);
            			}
            		
        			sb.append("|");
        		
        				if(V3BYGP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3BYGP);
            			}
            		
        			sb.append("|");
        		
        				if(V3POST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POST);
            			}
            		
        			sb.append("|");
        		
        				if(V3POSS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POSS);
            			}
            		
        			sb.append("|");
        		
        				if(V3INUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3INUS);
            			}
            		
        			sb.append("|");
        		
        				if(V3WCCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WCCD);
            			}
            		
        			sb.append("|");
        		
        				if(V3VLPF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VLPF);
            			}
            		
        			sb.append("|");
        		
        				if(V3POTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POTP);
            			}
            		
        			sb.append("|");
        		
        				if(V3DMST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3DMST);
            			}
            		
        			sb.append("|");
        		
        				if(V3BORF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3BORF);
            			}
            		
        			sb.append("|");
        		
        				if(V3PBVB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PBVB);
            			}
            		
        			sb.append("|");
        		
        				if(V3FICS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FICS);
            			}
            		
        			sb.append("|");
        		
        				if(V3SCRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SCRF);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFST);
            			}
            		
        			sb.append("|");
        		
        				if(V3VLPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VLPA);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFRF);
            			}
            		
        			sb.append("|");
        		
        				if(V3WHST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WHST);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCH);
            			}
            		
        			sb.append("|");
        		
        				if(V3PPOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PPOP);
            			}
            		
        			sb.append("|");
        		
        				if(V3UPLT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3UPLT);
            			}
            		
        			sb.append("|");
        		
        				if(V3PCFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PCFL);
            			}
            		
        			sb.append("|");
        		
        				if(V3PAOF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PAOF);
            			}
            		
        			sb.append("|");
        		
        				if(V3FROF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FROF);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFTP);
            			}
            		
        			sb.append("|");
        		
        				if(V3CARI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CARI);
            			}
            		
        			sb.append("|");
        		
        				if(V3RPFF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RPFF);
            			}
            		
        			sb.append("|");
        		
        				if(V3PFIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PFIP);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRMT);
            			}
            		
        			sb.append("|");
        		
        				if(V3RTVF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RTVF);
            			}
            		
        			sb.append("|");
        		
        				if(V3WHDR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WHDR);
            			}
            		
        			sb.append("|");
        		
        				if(V3JBNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3JBNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3PVND == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PVND);
            			}
            		
        			sb.append("|");
        		
        				if(V3VNBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VNBR);
            			}
            		
        			sb.append("|");
        		
        				if(V3ADCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ADCD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PFRV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PFRV);
            			}
            		
        			sb.append("|");
        		
        				if(V3TERM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TERM);
            			}
            		
        			sb.append("|");
        		
        				if(V3FTRM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FTRM);
            			}
            		
        			sb.append("|");
        		
        				if(V3CNFT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CNFT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFVT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFVT);
            			}
            		
        			sb.append("|");
        		
        				if(V3TMOV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TMOV);
            			}
            		
        			sb.append("|");
        		
        				if(V3POPW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POPW);
            			}
            		
        			sb.append("|");
        		
        				if(V3LCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3LCN);
            			}
            		
        			sb.append("|");
        		
        				if(V3PO1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PO1);
            			}
            		
        			sb.append("|");
        		
        				if(V3ARDE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ARDE);
            			}
            		
        			sb.append("|");
        		
        				if(V3ARBD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ARBD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PCRD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PCRD);
            			}
            		
        			sb.append("|");
        		
        				if(V3OCDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OCDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3PCSD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PCSD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PSRD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PSRD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PSRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PSRT);
            			}
            		
        			sb.append("|");
        		
        				if(V3SHDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SHDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CSPD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CSPD);
            			}
            		
        			sb.append("|");
        		
        				if(V3ORDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ORDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CLOD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CLOD);
            			}
            		
        			sb.append("|");
        		
        				if(V3NDDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3NDDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CLDN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CLDN);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3PDTA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PDTA);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPAD);
            			}
            		
        			sb.append("|");
        		
        				if(V3PDTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PDTR);
            			}
            		
        			sb.append("|");
        		
        				if(V3CLRD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CLRD);
            			}
            		
        			sb.append("|");
        		
        				if(V3POLC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POLC);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCD);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTL1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTL1);
            			}
            		
        			sb.append("|");
        		
        				if(V3CSTT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CSTT);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTOC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTOC);
            			}
            		
        			sb.append("|");
        		
        				if(V3TOCK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TOCK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTNW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTNW);
            			}
            		
        			sb.append("|");
        		
        				if(V3TNWK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TNWK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTGW);
            			}
            		
        			sb.append("|");
        		
        				if(V3TGWK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TGWK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTPL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTPL);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTVU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTVU);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTFB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTFB);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTFR);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTAP);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTPU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTPU);
            			}
            		
        			sb.append("|");
        		
        				if(V3VPUA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VPUA);
            			}
            		
        			sb.append("|");
        		
        				if(V3PALT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PALT);
            			}
            		
        			sb.append("|");
        		
        				if(V3PUBF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PUBF);
            			}
            		
        			sb.append("|");
        		
        				if(V3PUBT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PUBT);
            			}
            		
        			sb.append("|");
        		
        				if(V3VFRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3VFRT);
            			}
            		
        			sb.append("|");
        		
        				if(V3FRTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FRTP);
            			}
            		
        			sb.append("|");
        		
        				if(V3WULC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WULC);
            			}
            		
        			sb.append("|");
        		
        				if(V3WUCT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3WUCT);
            			}
            		
        			sb.append("|");
        		
        				if(V3NDAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3NDAC);
            			}
            		
        			sb.append("|");
        		
        				if(V3ONAF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ONAF);
            			}
            		
        			sb.append("|");
        		
        				if(V3ACDM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ACDM);
            			}
            		
        			sb.append("|");
        		
        				if(V3ACDF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ACDF);
            			}
            		
        			sb.append("|");
        		
        				if(V3TUCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TUCA);
            			}
            		
        			sb.append("|");
        		
        				if(V3TTBD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TTBD);
            			}
            		
        			sb.append("|");
        		
        				if(V3TLWP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TLWP);
            			}
            		
        			sb.append("|");
        		
        				if(V3CNFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CNFR);
            			}
            		
        			sb.append("|");
        		
        				if(V3CFRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CFRT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CULC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CULC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CULT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CULT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPAL);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPUT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPUT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPFB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPFB);
            			}
            		
        			sb.append("|");
        		
        				if(V3CPTB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CPTB);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTLN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTLN);
            			}
            		
        			sb.append("|");
        		
        				if(V3CCTT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CCTT);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTOC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTOC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTCK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTCK);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTNW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTNW);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTNK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTNK);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTGW);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTGK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTGK);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTPL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTPL);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTVU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTVU);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTBC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTBC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTFC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTFC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTAC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTPA);
            			}
            		
        			sb.append("|");
        		
        				if(V3CNAC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CNAC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CNAF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CNAF);
            			}
            		
        			sb.append("|");
        		
        				if(V3CACM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CACM);
            			}
            		
        			sb.append("|");
        		
        				if(V3CACF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CACF);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTUC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTUC);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTBD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTBD);
            			}
            		
        			sb.append("|");
        		
        				if(V3CTWP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CTWP);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCB);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCN);
            			}
            		
        			sb.append("|");
        		
        				if(V3POCM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POCM);
            			}
            		
        			sb.append("|");
        		
        				if(V3TNRL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TNRL);
            			}
            		
        			sb.append("|");
        		
        				if(V3CSTR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CSTR);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRCB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRCB);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRBK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRBK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRNW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRNW);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRNK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRNK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRGW == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRGW);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRGK == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRGK);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRPS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRPS);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRVP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRVP);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRVU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRVU);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRFC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRFC);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRFR);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRDA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRDA);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRBD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRBD);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRPA);
            			}
            		
        			sb.append("|");
        		
        				if(V3TRUC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TRUC);
            			}
            		
        			sb.append("|");
        		
        				if(V3PMPS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PMPS);
            			}
            		
        			sb.append("|");
        		
        				if(V3PFNA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PFNA);
            			}
            		
        			sb.append("|");
        		
        				if(V3UNAM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3UNAM);
            			}
            		
        			sb.append("|");
        		
        				if(V3MAVC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MAVC);
            			}
            		
        			sb.append("|");
        		
        				if(V3MMTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MMTS);
            			}
            		
        			sb.append("|");
        		
        				if(V3MVCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MVCS);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDS);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDH);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDL);
            			}
            		
        			sb.append("|");
        		
        				if(V3MQDH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MQDH);
            			}
            		
        			sb.append("|");
        		
        				if(V3MQDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MQDL);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3MCSD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MCSD);
            			}
            		
        			sb.append("|");
        		
        				if(V3MVCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MVCA);
            			}
            		
        			sb.append("|");
        		
        				if(V3MERV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MERV);
            			}
            		
        			sb.append("|");
        		
        				if(V3MINV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MINV);
            			}
            		
        			sb.append("|");
        		
        				if(V3MIDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MIDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3MVIF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MVIF);
            			}
            		
        			sb.append("|");
        		
        				if(V3MVAR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MVAR);
            			}
            		
        			sb.append("|");
        		
        				if(V3MPDA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MPDA);
            			}
            		
        			sb.append("|");
        		
        				if(V3PPFS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PPFS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FPNA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FPNA);
            			}
            		
        			sb.append("|");
        		
        				if(V3UFPA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3UFPA);
            			}
            		
        			sb.append("|");
        		
        				if(V3FAVC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FAVC);
            			}
            		
        			sb.append("|");
        		
        				if(V3FMTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FMTS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FVCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FVCS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FPDS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FPDS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FCDH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FCDH);
            			}
            		
        			sb.append("|");
        		
        				if(V3FCDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FCDL);
            			}
            		
        			sb.append("|");
        		
        				if(V3FPDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FPDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3RSVN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RSVN);
            			}
            		
        			sb.append("|");
        		
        				if(V3FTCS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FTCS);
            			}
            		
        			sb.append("|");
        		
        				if(V3FCAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FCAD);
            			}
            		
        			sb.append("|");
        		
        				if(V3FVAR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FVAR);
            			}
            		
        			sb.append("|");
        		
        				if(V3FVCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FVCH);
            			}
            		
        			sb.append("|");
        		
        				if(V3FTRV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FTRV);
            			}
            		
        			sb.append("|");
        		
        				if(V3FINV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FINV);
            			}
            		
        			sb.append("|");
        		
        				if(V3FIDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FIDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3FVIF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FVIF);
            			}
            		
        			sb.append("|");
        		
        				if(V3TVSQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TVSQ);
            			}
            		
        			sb.append("|");
        		
        				if(V3TKSQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TKSQ);
            			}
            		
        			sb.append("|");
        		
        				if(V3TDAQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TDAQ);
            			}
            		
        			sb.append("|");
        		
        				if(V3NDAF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3NDAF);
            			}
            		
        			sb.append("|");
        		
        				if(V3FPDA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FPDA);
            			}
            		
        			sb.append("|");
        		
        				if(V3CUNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3CUNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3ORNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ORNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3SHNM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SHNM);
            			}
            		
        			sb.append("|");
        		
        				if(V3SADD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SADD);
            			}
            		
        			sb.append("|");
        		
        				if(V3SHNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SHNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3PONU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PONU);
            			}
            		
        			sb.append("|");
        		
        				if(V3RERF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RERF);
            			}
            		
        			sb.append("|");
        		
        				if(V3RECO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RECO);
            			}
            		
        			sb.append("|");
        		
        				if(V3FSCF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FSCF);
            			}
            		
        			sb.append("|");
        		
        				if(V3POEO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POEO);
            			}
            		
        			sb.append("|");
        		
        				if(V3POVO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POVO);
            			}
            		
        			sb.append("|");
        		
        				if(V3PBSC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PBSC);
            			}
            		
        			sb.append("|");
        		
        				if(V3RECF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RECF);
            			}
            		
        			sb.append("|");
        		
        				if(V3PSTB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3PSTB);
            			}
            		
        			sb.append("|");
        		
        				if(V3TMSN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TMSN);
            			}
            		
        			sb.append("|");
        		
        				if(V3XMFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3XMFL);
            			}
            		
        			sb.append("|");
        		
        				if(V3XMDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3XMDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3XMTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3XMTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3ERRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3ERRF);
            			}
            		
        			sb.append("|");
        		
        				if(V3STKI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3STKI);
            			}
            		
        			sb.append("|");
        		
        				if(V3COTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3COTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3RPRC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3RPRC);
            			}
            		
        			sb.append("|");
        		
        				if(V3FIMI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FIMI);
            			}
            		
        			sb.append("|");
        		
        				if(V3TXDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TXDT);
            			}
            		
        			sb.append("|");
        		
        				if(V3TXTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3TXTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3POIF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3POIF);
            			}
            		
        			sb.append("|");
        		
        				if(V3COD1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3COD1);
            			}
            		
        			sb.append("|");
        		
        				if(V3SNNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SNNO);
            			}
            		
        			sb.append("|");
        		
        				if(V3SHID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3SHID);
            			}
            		
        			sb.append("|");
        		
        				if(V3FRTI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3FRTI);
            			}
            		
        			sb.append("|");
        		
        				if(V3OPO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3OPO);
            			}
            		
        			sb.append("|");
        		
        				if(V3EADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3EADT);
            			}
            		
        			sb.append("|");
        		
        				if(V3EATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3EATM);
            			}
            		
        			sb.append("|");
        		
        				if(V3EAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3EAID);
            			}
            		
        			sb.append("|");
        		
        				if(V3MODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MODT);
            			}
            		
        			sb.append("|");
        		
        				if(V3MOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MOTM);
            			}
            		
        			sb.append("|");
        		
        				if(V3MOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MOID);
            			}
            		
        			sb.append("|");
        		
        				if(V3MOPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(V3MOPG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
PURCHASE_ORDER_HEADER_2Struct PURCHASE_ORDER_HEADER_2 = new PURCHASE_ORDER_HEADER_2Struct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PURCHASE_ORDER_HEADER_2");
					}
				
		int tos_count_tDBOutput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_2 = new StringBuilder();
                    log4jParamters_tDBOutput_2.append("Parameters:");
                            log4jParamters_tDBOutput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SCHEMA_DB" + " = " + "context.GIM_Schema_PO");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("TABLE" + " = " + "\"PURCHASE_ORDER\"");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_2.append(" | ");
                            log4jParamters_tDBOutput_2.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + (log4jParamters_tDBOutput_2) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_2().limitLog4jByte();
            }





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("PURCHASE_ORDER");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("PURCHASE_ORDER");
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_2 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_2 = context.GIM_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection attempts to '")  + (url_tDBOutput_2)  + ("' with the username '")  + (dbUser_tDBOutput_2)  + ("'.") );
    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to '")  + (url_tDBOutput_2)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 1;
        int commitCounter_tDBOutput_2 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_2.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_2 = 1;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"ORDER_CTRL_NO\",\"PURCHASE_ORDER_NO\",\"SITE_ID\",\"SHIPPING_POINT_SHIP_FROM\",\"SMS_CONFIRMED_DATE\",\"VENDOR_CONFIRMED_SHIP_DATE\",\"SCHEDULED_PO_RECEIPT_TIMESTAMP\",\"ORIG_PICKUP_ALLOW_TYPE\",\"PICKUP_ALLOW_FROM_BRACKET\",\"ORIG_FREIGHT_RATE\",\"ORIG_FREIGHT_TYPE\",\"ORIG_MERCH_ALLOW_CHARGE\",\"ORIG_FREIGHT_ALLOW_CHARGE\",\"FREIGHT_ROUNDING_VARIANCE\",\"SHIP_WITH_NEXT_ORDER_IND\",\"CUST_REFERENCE_ORDER_NO\",\"OUTSIDE_WHSE_ID\",\"RECOMMENDED_ORDER_SEQ_NO\",\"SYSCO_BRACKET_NO\",\"BUYER_NO\",\"ORDER_GROUP\",\"BUYING_GROUP\",\"PO_PRIMARY_STATUS\",\"PO_SECONDARY_STATUS\",\"PO_IN_USE_FLAG\",\"WHSE_CHANGE_CODE\",\"PO_VALID_PRICING_FLAG\",\"PO_TYPE\",\"DEMAND_STATUS\",\"BACKORDER_FLAG\",\"PROC_BILLED_VENDOR_BILLED_FLAG\",\"FREIGHT_INTER_COMPANY_STMT_FLAG\",\"CONF_STATUS\",\"PO_VALID_PRICING_APPROVAL\",\"CONF_RECVD_FLAG\",\"WHSE_STATUS\",\"PO_CHANGED_FLAG\",\"PRINT_PRICE_ON_PO_FLAG\",\"UPDATE_LEAD_TIME_FLAG\",\"PRICE_CHANGE_FLAG\",\"CARRIER_ID\",\"REVISED_PROFORMA_FLAG\",\"PROFORMA_INPROCESS_FLAG\",\"TRANSMIT_TO\",\"RETRANSMIT_TO_VENDOR_FLAG\",\"JOB_NO\",\"PAY_TO_VENDOR_NO\",\"FREIGHT_VENDOR\",\"VENDOR_TERMS\",\"FREIGHT_VENDOR_TERMS\",\"CONFIRMED_TERMS\",\"CONFIRMED_FREIGHT_VENDOR_TERMS\",\"TERMS_OVERRIDE_FLAG\",\"PO_PLACED_WITH\",\"LOAD_CTRL_NO\",\"BUSINESS_DATE_ANTICIPATED_RECEIPT\",\"CALENDAR_DATE_ANTICIPATED_RECEIPT\",\"CALENDAR_VENDOR_CONF_RECEIPT\",\"BUSINESS_DATE_SHIP_PICKUP\",\"CALENDAR_DATE_SHIP_PICKUP\",\"BUSINESS_ORDER_DATE\",\"CALENDAR_ORDER_DATE\",\"BUSINESS_DATE_PO_NEEDED\",\"CALENDAR_DATE_PO_NEEDED\",\"PO_TRANSMISSION_TIMESTAMP\",\"BUSINESS_DATE_PO_ACCEPTED\",\"CALENDAR_DATE_PO_ACCEPTED\",\"BUSINESS_DATE_ACTUAL_RECEIPT\",\"CALENDAR_DATE_ACTUAL_RECEIPT\",\"CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE\",\"CALENDAR_VENDOR_CONF_DATE\",\"TOTAL_LINES\",\"TOTAL_CASES\",\"TOTAL_CUBE\",\"TOTAL_NET_WGT\",\"TOTAL_GROSS_WGT\",\"TOTAL_VENDOR_PALLETS\",\"TOTAL_VENDOR_UNITS\",\"TOTAL_FOB_COST\",\"TOTAL_FREIGHT_COST\",\"TOTAL_AP_COST\",\"TOTAL_PICKUP_ALLOW\",\"TOTAL_PICKUP_ALLOW_RATE\",\"PICKUP_ALLOW_TO_BRACKET\",\"WHSE_UNLOAD_CHARGE\",\"WHSE_UNLOAD_CHARGE_TYPE\",\"ORIG_NON_DIST_MERCH_ALLOW_CHARGE\",\"TOTAL_WHSE_PALLETS\",\"CONFIRMED_FREIGHT_RATE\",\"CONFIRMED_FREIGHT_RATE_TYPE\",\"CONFIRMED_UNLOADING_CHARGE\",\"CONFIRMED_UNLOADING_CHRG_TYPE\",\"CONFIRMED_PICKUP_ALLOW_RATE\",\"CONFIRMED_PICKUP_ALLOW_TYPE\",\"CONFIRMED_PICKUP_ALLOW_FROM_BRACKET\",\"CONFIRMED_PICKUP_ALLOW_TO_BRACKET\",\"CONFIRMED_TOTAL_LINES\",\"CONFIRMED_TOTA_CASES\",\"CONFIMRED_TOTAL_CUBE\",\"CONFIRMED_TOTAL_NET_WGT\",\"CONFIRMED_TOTAL_GROSS_WGT\",\"CONFIRMED_TOTAL_VENDOR_PALLETS\",\"CONFIRMED_TOTAL_VENDOR_UNITS\",\"CONFIRMED_TOTAL_FOB_COST\",\"CONFIRMED_TOTAL_FREIGHT_COST\",\"CONFIRMED_TOTAL_AP_COST\",\"CONFIRMED_TOTAL_PICKUP_ALLOW\",\"CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE\",\"CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE\",\"CONFIRMED_MERCH_ALLOW_CHARGE\",\"CONFIRMED_FREIGHT_ALLOW_CHARGE\",\"CONFIRMED_TOTAL_UNLOADING_CHARGE\",\"CONFIRMED_TOTAL_BRACKET_DIFF\",\"CONFIRMED_TOTAL_WHSE_PALLETS\",\"CONFIRMED_USER\",\"VENDOR_CONF_NO\",\"VENDOR_CONF_METHOD\",\"TOTAL_RECVD_LINES\",\"TOTAL_RECVD_CASES\",\"TOTAL_RECVD_CUBE\",\"TOTAL_RECVD_NET_WGT\",\"TOTAL_RECVD_GROSS_WGT\",\"TOTAL_RECVD_VENDOR_PALLETS\",\"TOTAL_RECVD_WHSE_PALLETS\",\"TOTAL_RECVD_VENDOR_UNITS\",\"TOTAL_RECVD_FOB_COST\",\"TOTAL_RECVD_FREIGHT_COST\",\"TOTAL_RECVD_AP_COST\",\"TOTAL_RECVD_BRACKET_DIFF\",\"TOTAL_RECVD_PICKUP_ALLOW\",\"TOTAL_RECVD_UNLOADING_CHARGE\",\"MERCH_PROFORMA_STATUS\",\"MERCH_PROFORMA_NET_AMT\",\"UNMATCHED_MERCH_PROFROMA_NET_AMT\",\"MERCH_AMT_TO_BE_VOUCH\",\"MERCH_MATCHED_STATUS\",\"MERCH_VOUCH_STATUS\",\"MERCH_PAID_STATUS\",\"MERCH_PRICE_DIFF_HEADER_STATUS\",\"MERCH_PRICE_DIFF_ERROR_LINE_COUNT\",\"MERCH_QTY_DIFF_HEADER_STATUS\",\"MERCH_QTY_DIFF_ERROR_LINE_COUNT\",\"MERCH_PAYMENT_DUE_DATE\",\"MERCH_CASH_DISC\",\"MERCH_VOUCH_AMT\",\"MERCH_ROUNDING_VAR\",\"MERCH_INV_NO\",\"MERCH_INV_DATE\",\"MERCH_VENDOR_INTERCOM_BILLED_FLAG\",\"MERCH_VAR_AMT\",\"MERCH_FREIGHT_AMT\",\"FREIGHT_PROFORMA_NET_AMT\",\"UNMATCHED_FREIGHT_PROFORMA_NET_AMT\",\"FREIGHT_AMT_TO_BE_VOUCH\",\"FREIGHT_MATCHED_STATUS\",\"FREIGHT_VOUCH_STATUS\",\"FREIGHT_PAID_STATUS\",\"FREIGHT_DIFF_HEADER_STATUS\",\"FREIGHT_PAYMENT_DUE_DATE\",\"FREIGHT_CLAIM_STATUS\",\"FREIGHT_CASH_DISC\",\"FREIGHT_VARIANCE_AMT\",\"FREIGHT_VOUCH_AMT\",\"FREIGHT_INV_NO\",\"FREIGHT_INV_DATE\",\"FREIGHT_VENDOR_INTERCOM_BILLED_FLAG\",\"TOTAL_VENDOR_SHORT_QTY\",\"TOTAL_CARRIER_SHORT_QTY\",\"TOTAL_DAMAGED_ACCEPTED_QTY\",\"FREIGHT_PAID_AMOUNT\",\"SHIP_TO_CUST\",\"CUST_ORDER_NO\",\"SHIP_FROM_NAME\",\"SHIPPING_ADDRESS_ID\",\"RESERVED_RE_RECOMMEND_FLAG\",\"RECOMMENDED_ORDER_FLAG\",\"FAILED_SCORECARD_FLAG\",\"VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG\",\"PRICE_BRACKET_SOURCE_CODE\",\"SHORT_PERCENT_TO_BACKORDER\",\"SECONDARY_PO_TYPE\",\"TRANSMIT_FLAG\",\"TRANSMIT_TIMESTAMP\",\"PO_ERROR_IND\",\"STOCK_IND\",\"PO_CLOSE_TIME\",\"REPLENISHMENT_SYSTEM\",\"SHIPMENT_NOTICE_NO\",\"FREIGHT_PROFORMA_STATUS\",\"SHIPMENT_ID\",\"FREIGHT_PROCESS_FLAG\",\"ORIG_PURCHASE_ORDER_NO\",\"CREATED_TIMESTAMP\",\"CREATED_USER_ID\",\"IS_ACTIVE\",\"V3PF_SVOP\",\"CONFERENCE_TYPE\",\"NEXT_CONF_RECVD_FLAG\",\"VENDOR\",\"UPDATED_USER_ID\",\"UPDATED_PROGRAM_ID\",\"UPDATED_TIMESTAMP\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\",\"PICKUP_ALLOWANCE_OVERRIDE_FLAG\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_5 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_5{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_5 = new StringBuilder();
                    log4jParamters_tMap_5.append("Parameters:");
                            log4jParamters_tMap_5.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_5.append(" | ");
                            log4jParamters_tMap_5.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_5.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + (log4jParamters_tMap_5) );
                    } 
                } 
            new BytesLimit65535_tMap_5().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row2_tMap_5 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String V3OCDT;
	String V3PCSD;
	String V3ARDE;
	String V3ARBD;
	String V3PCRD;
	String V3SHDT;
	String V3CSPD;
	String V3ORDT;
	String V3CLOD;
	String V3NDDT;
	String V3CLDN;
	String V3PDTA;
	String V3CPAD;
	String V3PDTR;
	String V3CLRD;
	String V3POLC;
	String V3POCD;
	String V3MPDT;
	String V3MIDT;
	String V3FPDT;
	String V3FIDT;
	String SCHEDULED_PO_RECEIPT_TIMESTAMP;
	String PO_TRANSMISSION_TIMESTAMP;
	String TRANSMIT_TIMESTAMP;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
	String PO_CLOSE_TIME;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_PURCHASE_ORDER_HEADER_2_tMap_5 = 0;
				
PURCHASE_ORDER_HEADER_2Struct PURCHASE_ORDER_HEADER_2_tmp = new PURCHASE_ORDER_HEADER_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_2 = new StringBuilder();
                    log4jParamters_tDBInput_2.append("Parameters:");
                            log4jParamters_tDBInput_2.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TABLE" + " = " + "\"IMHAV3PF\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("QUERY" + " = " + "\"SELECT    IMHAV3PF.V3PO,    IMHAV3PF.V3OWID,    IMHAV3PF.V3ARCO,    IMHAV3PF.V3ROSQ,    IMHAV3PF.V3SBNO,    IMHAV3PF.V3BUYR,    IMHAV3PF.V3OCNB,    IMHAV3PF.V3OFCI,    IMHAV3PF.V3BYGP,    IMHAV3PF.V3POST,    IMHAV3PF.V3POSS,    IMHAV3PF.V3INUS,    IMHAV3PF.V3WCCD,    IMHAV3PF.V3VLPF,    IMHAV3PF.V3POTP,    IMHAV3PF.V3DMST,    IMHAV3PF.V3BORF,    IMHAV3PF.V3PBVB,    IMHAV3PF.V3FICS,    IMHAV3PF.V3SCRF,    IMHAV3PF.V3CFST,    IMHAV3PF.V3VLPA,    IMHAV3PF.V3CFRF,    IMHAV3PF.V3WHST,    IMHAV3PF.V3POCH,    IMHAV3PF.V3PPOP,    IMHAV3PF.V3UPLT,    IMHAV3PF.V3PCFL,    IMHAV3PF.V3PAOF,    IMHAV3PF.V3FROF,    IMHAV3PF.V3CFTP,    IMHAV3PF.V3CARI,    IMHAV3PF.V3RPFF,    IMHAV3PF.V3PFIP,    IMHAV3PF.V3TRMT,    IMHAV3PF.V3RTVF,    IMHAV3PF.V3WHDR,    IMHAV3PF.V3JBNO,    IMHAV3PF.V3PVND,    IMHAV3PF.V3VNBR,    IMHAV3PF.V3ADCD,    IMHAV3PF.V3PFRV,    IMHAV3PF.V3TERM,    IMHAV3PF.V3FTRM,    IMHAV3PF.V3CNFT,    IMHAV3PF.V3CFVT,    IMHAV3PF.V3TMOV,    IMHAV3PF.V3POPW,    IMHAV3PF.V3LCN,    IMHAV3PF.\\\"V3PO#\\\",    IMHAV3PF.V3ARDE,    IMHAV3PF.V3ARBD,    IMHAV3PF.V3PCRD,    IMHAV3PF.V3OCDT,    IMHAV3PF.V3PCSD,    IMHAV3PF.V3PSRD,    IMHAV3PF.V3PSRT,    IMHAV3PF.V3SHDT,    IMHAV3PF.V3CSPD,    IMHAV3PF.V3ORDT,    IMHAV3PF.V3CLOD,    IMHAV3PF.V3NDDT,    IMHAV3PF.V3CLDN,    IMHAV3PF.V3TRDT,    IMHAV3PF.V3TRTM,    IMHAV3PF.V3PDTA,    IMHAV3PF.V3CPAD,    IMHAV3PF.V3PDTR,    IMHAV3PF.V3CLRD,    IMHAV3PF.V3POLC,    IMHAV3PF.V3POCD,    IMHAV3PF.V3TTL1,    IMHAV3PF.V3CSTT,    IMHAV3PF.V3TTOC,    IMHAV3PF.V3TOCK,    IMHAV3PF.V3TTNW,    IMHAV3PF.V3TNWK,    IMHAV3PF.V3TTGW,    IMHAV3PF.V3TGWK,    IMHAV3PF.V3TTPL,    IMHAV3PF.V3TTVU,    IMHAV3PF.V3TTFB,    IMHAV3PF.V3TTFR,    IMHAV3PF.V3TTAP,    IMHAV3PF.V3TTPU,    IMHAV3PF.V3VPUA,    IMHAV3PF.V3PALT,    IMHAV3PF.V3PUBF,    IMHAV3PF.V3PUBT,    IMHAV3PF.V3VFRT,    IMHAV3PF.V3FRTP,    IMHAV3PF.V3WULC,    IMHAV3PF.V3WUCT,    IMHAV3PF.V3NDAC,    IMHAV3PF.V3ONAF,    IMHAV3PF.V3ACDM,    IMHAV3PF.V3ACDF,    IMHAV3PF.V3TUCA,    IMHAV3PF.V3TTBD,    IMHAV3PF.V3TLWP,    IMHAV3PF.V3CNFR,    IMHAV3PF.V3CFRT,    IMHAV3PF.V3CULC,    IMHAV3PF.V3CULT,    IMHAV3PF.V3CPAL,    IMHAV3PF.V3CPUT,    IMHAV3PF.V3CPFB,    IMHAV3PF.V3CPTB,    IMHAV3PF.V3CTLN,    IMHAV3PF.V3CCTT,    IMHAV3PF.V3CTOC,    IMHAV3PF.V3CTCK,    IMHAV3PF.V3CTNW,    IMHAV3PF.V3CTNK,    IMHAV3PF.V3CTGW,    IMHAV3PF.V3CTGK,    IMHAV3PF.V3CTPL,    IMHAV3PF.V3CTVU,    IMHAV3PF.V3CTBC,    IMHAV3PF.V3CTFC,    IMHAV3PF.V3CTAC,    IMHAV3PF.V3CTPA,    IMHAV3PF.V3CNAC,    IMHAV3PF.V3CNAF,    IMHAV3PF.V3CACM,    IMHAV3PF.V3CACF,    IMHAV3PF.V3CTUC,    IMHAV3PF.V3CTBD,    IMHAV3PF.V3CTWP,    IMHAV3PF.V3POCB,    IMHAV3PF.V3POCN,    IMHAV3PF.V3POCM,    IMHAV3PF.V3TNRL,    IMHAV3PF.V3CSTR,    IMHAV3PF.V3TRCB,    IMHAV3PF.V3TRBK,    IMHAV3PF.V3TRNW,    IMHAV3PF.V3TRNK,    IMHAV3PF.V3TRGW,    IMHAV3PF.V3TRGK,    IMHAV3PF.V3TRPS,    IMHAV3PF.V3TRVP,    IMHAV3PF.V3TRVU,    IMHAV3PF.V3TRFC,    IMHAV3PF.V3TRFR,    IMHAV3PF.V3TRDA,    IMHAV3PF.V3TRBD,    IMHAV3PF.V3TRPA,    IMHAV3PF.V3TRUC,    IMHAV3PF.V3PMPS,    IMHAV3PF.V3PFNA,    IMHAV3PF.V3UNAM,    IMHAV3PF.V3MAVC,    IMHAV3PF.V3MMTS,    IMHAV3PF.V3MVCS,    IMHAV3PF.V3MPDS,    IMHAV3PF.V3MPDH,    IMHAV3PF.V3MPDL,    IMHAV3PF.V3MQDH,    IMHAV3PF.V3MQDL,    IMHAV3PF.V3MPDT,    IMHAV3PF.V3MCSD,    IMHAV3PF.V3MVCA,    IMHAV3PF.V3MERV,    IMHAV3PF.V3MINV,    IMHAV3PF.V3MIDT,    IMHAV3PF.V3MVIF,    IMHAV3PF.V3MVAR,    IMHAV3PF.V3MPDA,    IMHAV3PF.V3PPFS,    IMHAV3PF.V3FPNA,    IMHAV3PF.V3UFPA,    IMHAV3PF.V3FAVC,    IMHAV3PF.V3FMTS,    IMHAV3PF.V3FVCS,    IMHAV3PF.V3FPDS,    IMHAV3PF.V3FCDH,    IMHAV3PF.V3FCDL,    IMHAV3PF.V3FPDT,    IMHAV3PF.V3RSVN,    IMHAV3PF.V3FTCS,    IMHAV3PF.V3FCAD,    IMHAV3PF.V3FVAR,    IMHAV3PF.V3FVCH,    IMHAV3PF.V3FTRV,    IMHAV3PF.V3FINV,    IMHAV3PF.V3FIDT,    IMHAV3PF.V3FVIF,    IMHAV3PF.V3TVSQ,    IMHAV3PF.V3TKSQ,    IMHAV3PF.V3TDAQ,    IMHAV3PF.V3NDAF,    IMHAV3PF.V3FPDA,    IMHAV3PF.V3CUNO,    IMHAV3PF.V3ORNO,    IMHAV3PF.V3SHNM,    IMHAV3PF.V3SADD,    IMHAV3PF.V3SHNO,    IMHAV3PF.V3PONU,    IMHAV3PF.V3RERF,    IMHAV3PF.V3RECO,    IMHAV3PF.V3FSCF,    IMHAV3PF.V3POEO,    IMHAV3PF.V3POVO,    IMHAV3PF.V3PBSC,    IMHAV3PF.V3RECF,    IMHAV3PF.V3PSTB,    IMHAV3PF.V3TMSN,    IMHAV3PF.V3XMFL,    IMHAV3PF.V3XMDT,    IMHAV3PF.V3XMTM,    IMHAV3PF.V3ERRF,    IMHAV3PF.V3STKI,    IMHAV3PF.V3COTM,    IMHAV3PF.V3RPRC,    IMHAV3PF.V3FIMI,    IMHAV3PF.V3TXDT,    IMHAV3PF.V3TXTM,    IMHAV3PF.V3POIF,    IMHAV3PF.V3COD1,    IMHAV3PF.V3SNNO,    IMHAV3PF.V3SHID,    IMHAV3PF.V3FRTI,    IMHAV3PF.V3OPO,    IMHAV3PF.V3EADT,    IMHAV3PF.V3EATM,    IMHAV3PF.V3EAID,    IMHAV3PF.V3MODT,    IMHAV3PF.V3MOTM,    IMHAV3PF.V3MOID,    IMHAV3PF.V3MOPG FROM IMHAV3PF ORDER BY IMHAV3PF.V3EADT DESC\"");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_2.append(" | ");
                            log4jParamters_tDBInput_2.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + (log4jParamters_tDBInput_2) );
                    } 
                } 
            new BytesLimit65535_tDBInput_2().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.SUS_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				  
				String url_tDBInput_2 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_2 - Driver ClassName: "+driverClass_tDBInput_2+".");
			
	    		log.debug("tDBInput_2 - Connection attempt to '" + url_tDBInput_2 + "' with the username '" + dbUser_tDBInput_2 + "'.");
			
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
	    		log.debug("tDBInput_2 - Connection to '" + url_tDBInput_2 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  IMHAV3PF.V3PO, \n  IMHAV3PF.V3OWID, \n  IMHAV3PF.V3ARCO, \n  IMHAV3PF.V3ROSQ, \n  IMHAV3PF.V3SBNO, \n  IMHAV3PF.V3"
+"BUYR, \n  IMHAV3PF.V3OCNB, \n  IMHAV3PF.V3OFCI, \n  IMHAV3PF.V3BYGP, \n  IMHAV3PF.V3POST, \n  IMHAV3PF.V3POSS, \n  IMHAV3PF.V3"
+"INUS, \n  IMHAV3PF.V3WCCD, \n  IMHAV3PF.V3VLPF, \n  IMHAV3PF.V3POTP, \n  IMHAV3PF.V3DMST, \n  IMHAV3PF.V3BORF, \n  IMHAV3PF.V3"
+"PBVB, \n  IMHAV3PF.V3FICS, \n  IMHAV3PF.V3SCRF, \n  IMHAV3PF.V3CFST, \n  IMHAV3PF.V3VLPA, \n  IMHAV3PF.V3CFRF, \n  IMHAV3PF.V3"
+"WHST, \n  IMHAV3PF.V3POCH, \n  IMHAV3PF.V3PPOP, \n  IMHAV3PF.V3UPLT, \n  IMHAV3PF.V3PCFL, \n  IMHAV3PF.V3PAOF, \n  IMHAV3PF.V3"
+"FROF, \n  IMHAV3PF.V3CFTP, \n  IMHAV3PF.V3CARI, \n  IMHAV3PF.V3RPFF, \n  IMHAV3PF.V3PFIP, \n  IMHAV3PF.V3TRMT, \n  IMHAV3PF.V3"
+"RTVF, \n  IMHAV3PF.V3WHDR, \n  IMHAV3PF.V3JBNO, \n  IMHAV3PF.V3PVND, \n  IMHAV3PF.V3VNBR, \n  IMHAV3PF.V3ADCD, \n  IMHAV3PF.V3"
+"PFRV, \n  IMHAV3PF.V3TERM, \n  IMHAV3PF.V3FTRM, \n  IMHAV3PF.V3CNFT, \n  IMHAV3PF.V3CFVT, \n  IMHAV3PF.V3TMOV, \n  IMHAV3PF.V3"
+"POPW, \n  IMHAV3PF.V3LCN, \n  IMHAV3PF.\"V3PO#\", \n  IMHAV3PF.V3ARDE, \n  IMHAV3PF.V3ARBD, \n  IMHAV3PF.V3PCRD, \n  IMHAV3PF."
+"V3OCDT, \n  IMHAV3PF.V3PCSD, \n  IMHAV3PF.V3PSRD, \n  IMHAV3PF.V3PSRT, \n  IMHAV3PF.V3SHDT, \n  IMHAV3PF.V3CSPD, \n  IMHAV3PF."
+"V3ORDT, \n  IMHAV3PF.V3CLOD, \n  IMHAV3PF.V3NDDT, \n  IMHAV3PF.V3CLDN, \n  IMHAV3PF.V3TRDT, \n  IMHAV3PF.V3TRTM, \n  IMHAV3PF."
+"V3PDTA, \n  IMHAV3PF.V3CPAD, \n  IMHAV3PF.V3PDTR, \n  IMHAV3PF.V3CLRD, \n  IMHAV3PF.V3POLC, \n  IMHAV3PF.V3POCD, \n  IMHAV3PF."
+"V3TTL1, \n  IMHAV3PF.V3CSTT, \n  IMHAV3PF.V3TTOC, \n  IMHAV3PF.V3TOCK, \n  IMHAV3PF.V3TTNW, \n  IMHAV3PF.V3TNWK, \n  IMHAV3PF."
+"V3TTGW, \n  IMHAV3PF.V3TGWK, \n  IMHAV3PF.V3TTPL, \n  IMHAV3PF.V3TTVU, \n  IMHAV3PF.V3TTFB, \n  IMHAV3PF.V3TTFR, \n  IMHAV3PF."
+"V3TTAP, \n  IMHAV3PF.V3TTPU, \n  IMHAV3PF.V3VPUA, \n  IMHAV3PF.V3PALT, \n  IMHAV3PF.V3PUBF, \n  IMHAV3PF.V3PUBT, \n  IMHAV3PF."
+"V3VFRT, \n  IMHAV3PF.V3FRTP, \n  IMHAV3PF.V3WULC, \n  IMHAV3PF.V3WUCT, \n  IMHAV3PF.V3NDAC, \n  IMHAV3PF.V3ONAF, \n  IMHAV3PF."
+"V3ACDM, \n  IMHAV3PF.V3ACDF, \n  IMHAV3PF.V3TUCA, \n  IMHAV3PF.V3TTBD, \n  IMHAV3PF.V3TLWP, \n  IMHAV3PF.V3CNFR, \n  IMHAV3PF."
+"V3CFRT, \n  IMHAV3PF.V3CULC, \n  IMHAV3PF.V3CULT, \n  IMHAV3PF.V3CPAL, \n  IMHAV3PF.V3CPUT, \n  IMHAV3PF.V3CPFB, \n  IMHAV3PF."
+"V3CPTB, \n  IMHAV3PF.V3CTLN, \n  IMHAV3PF.V3CCTT, \n  IMHAV3PF.V3CTOC, \n  IMHAV3PF.V3CTCK, \n  IMHAV3PF.V3CTNW, \n  IMHAV3PF."
+"V3CTNK, \n  IMHAV3PF.V3CTGW, \n  IMHAV3PF.V3CTGK, \n  IMHAV3PF.V3CTPL, \n  IMHAV3PF.V3CTVU, \n  IMHAV3PF.V3CTBC, \n  IMHAV3PF."
+"V3CTFC, \n  IMHAV3PF.V3CTAC, \n  IMHAV3PF.V3CTPA, \n  IMHAV3PF.V3CNAC, \n  IMHAV3PF.V3CNAF, \n  IMHAV3PF.V3CACM, \n  IMHAV3PF."
+"V3CACF, \n  IMHAV3PF.V3CTUC, \n  IMHAV3PF.V3CTBD, \n  IMHAV3PF.V3CTWP, \n  IMHAV3PF.V3POCB, \n  IMHAV3PF.V3POCN, \n  IMHAV3PF."
+"V3POCM, \n  IMHAV3PF.V3TNRL, \n  IMHAV3PF.V3CSTR, \n  IMHAV3PF.V3TRCB, \n  IMHAV3PF.V3TRBK, \n  IMHAV3PF.V3TRNW, \n  IMHAV3PF."
+"V3TRNK, \n  IMHAV3PF.V3TRGW, \n  IMHAV3PF.V3TRGK, \n  IMHAV3PF.V3TRPS, \n  IMHAV3PF.V3TRVP, \n  IMHAV3PF.V3TRVU, \n  IMHAV3PF."
+"V3TRFC, \n  IMHAV3PF.V3TRFR, \n  IMHAV3PF.V3TRDA, \n  IMHAV3PF.V3TRBD, \n  IMHAV3PF.V3TRPA, \n  IMHAV3PF.V3TRUC, \n  IMHAV3PF."
+"V3PMPS, \n  IMHAV3PF.V3PFNA, \n  IMHAV3PF.V3UNAM, \n  IMHAV3PF.V3MAVC, \n  IMHAV3PF.V3MMTS, \n  IMHAV3PF.V3MVCS, \n  IMHAV3PF."
+"V3MPDS, \n  IMHAV3PF.V3MPDH, \n  IMHAV3PF.V3MPDL, \n  IMHAV3PF.V3MQDH, \n  IMHAV3PF.V3MQDL, \n  IMHAV3PF.V3MPDT, \n  IMHAV3PF."
+"V3MCSD, \n  IMHAV3PF.V3MVCA, \n  IMHAV3PF.V3MERV, \n  IMHAV3PF.V3MINV, \n  IMHAV3PF.V3MIDT, \n  IMHAV3PF.V3MVIF, \n  IMHAV3PF."
+"V3MVAR, \n  IMHAV3PF.V3MPDA, \n  IMHAV3PF.V3PPFS, \n  IMHAV3PF.V3FPNA, \n  IMHAV3PF.V3UFPA, \n  IMHAV3PF.V3FAVC, \n  IMHAV3PF."
+"V3FMTS, \n  IMHAV3PF.V3FVCS, \n  IMHAV3PF.V3FPDS, \n  IMHAV3PF.V3FCDH, \n  IMHAV3PF.V3FCDL, \n  IMHAV3PF.V3FPDT, \n  IMHAV3PF."
+"V3RSVN, \n  IMHAV3PF.V3FTCS, \n  IMHAV3PF.V3FCAD, \n  IMHAV3PF.V3FVAR, \n  IMHAV3PF.V3FVCH, \n  IMHAV3PF.V3FTRV, \n  IMHAV3PF."
+"V3FINV, \n  IMHAV3PF.V3FIDT, \n  IMHAV3PF.V3FVIF, \n  IMHAV3PF.V3TVSQ, \n  IMHAV3PF.V3TKSQ, \n  IMHAV3PF.V3TDAQ, \n  IMHAV3PF."
+"V3NDAF, \n  IMHAV3PF.V3FPDA, \n  IMHAV3PF.V3CUNO, \n  IMHAV3PF.V3ORNO, \n  IMHAV3PF.V3SHNM, \n  IMHAV3PF.V3SADD, \n  IMHAV3PF."
+"V3SHNO, \n  IMHAV3PF.V3PONU, \n  IMHAV3PF.V3RERF, \n  IMHAV3PF.V3RECO, \n  IMHAV3PF.V3FSCF, \n  IMHAV3PF.V3POEO, \n  IMHAV3PF."
+"V3POVO, \n  IMHAV3PF.V3PBSC, \n  IMHAV3PF.V3RECF, \n  IMHAV3PF.V3PSTB, \n  IMHAV3PF.V3TMSN, \n  IMHAV3PF.V3XMFL, \n  IMHAV3PF."
+"V3XMDT, \n  IMHAV3PF.V3XMTM, \n  IMHAV3PF.V3ERRF, \n  IMHAV3PF.V3STKI, \n  IMHAV3PF.V3COTM, \n  IMHAV3PF.V3RPRC, \n  IMHAV3PF."
+"V3FIMI, \n  IMHAV3PF.V3TXDT, \n  IMHAV3PF.V3TXTM, \n  IMHAV3PF.V3POIF, \n  IMHAV3PF.V3COD1, \n  IMHAV3PF.V3SNNO, \n  IMHAV3PF."
+"V3SHID, \n  IMHAV3PF.V3FRTI, \n  IMHAV3PF.V3OPO, \n  IMHAV3PF.V3EADT, \n  IMHAV3PF.V3EATM, \n  IMHAV3PF.V3EAID, \n  IMHAV3PF.V"
+"3MODT, \n  IMHAV3PF.V3MOTM, \n  IMHAV3PF.V3MOID, \n  IMHAV3PF.V3MOPG\nFROM IMHAV3PF ORDER BY IMHAV3PF.V3EADT DESC";
		    
	    		log.debug("tDBInput_2 - Executing the query: '" + dbquery_tDBInput_2 + "'.");
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    	log.debug("tDBInput_2 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.V3PO = null;
							} else {
	                         		
        	row2.V3PO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.V3OWID = null;
							} else {
	                         		
        	row2.V3OWID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.V3ARCO = null;
							} else {
	                         		
        	row2.V3ARCO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.V3ROSQ = null;
							} else {
		                          
            row2.V3ROSQ = rs_tDBInput_2.getBigDecimal(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.V3SBNO = null;
							} else {
		                          
            row2.V3SBNO = rs_tDBInput_2.getBigDecimal(5);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.V3BUYR = null;
							} else {
	                         		
        	row2.V3BUYR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.V3OCNB = null;
							} else {
	                         		
        	row2.V3OCNB = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.V3OFCI = null;
							} else {
	                         		
        	row2.V3OFCI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.V3BYGP = null;
							} else {
		                          
            row2.V3BYGP = rs_tDBInput_2.getBigDecimal(9);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.V3POST = null;
							} else {
	                         		
        	row2.V3POST = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.V3POSS = null;
							} else {
	                         		
        	row2.V3POSS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.V3INUS = null;
							} else {
	                         		
        	row2.V3INUS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.V3WCCD = null;
							} else {
	                         		
        	row2.V3WCCD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2.V3VLPF = null;
							} else {
	                         		
        	row2.V3VLPF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.V3POTP = null;
							} else {
	                         		
        	row2.V3POTP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2.V3DMST = null;
							} else {
	                         		
        	row2.V3DMST = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.V3BORF = null;
							} else {
	                         		
        	row2.V3BORF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row2.V3PBVB = null;
							} else {
	                         		
        	row2.V3PBVB = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row2.V3FICS = null;
							} else {
	                         		
        	row2.V3FICS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row2.V3SCRF = null;
							} else {
	                         		
        	row2.V3SCRF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row2.V3CFST = null;
							} else {
	                         		
        	row2.V3CFST = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row2.V3VLPA = null;
							} else {
	                         		
        	row2.V3VLPA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row2.V3CFRF = null;
							} else {
	                         		
        	row2.V3CFRF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row2.V3WHST = null;
							} else {
	                         		
        	row2.V3WHST = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								row2.V3POCH = null;
							} else {
	                         		
        	row2.V3POCH = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								row2.V3PPOP = null;
							} else {
	                         		
        	row2.V3PPOP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								row2.V3UPLT = null;
							} else {
	                         		
        	row2.V3UPLT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								row2.V3PCFL = null;
							} else {
	                         		
        	row2.V3PCFL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 28, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								row2.V3PAOF = null;
							} else {
	                         		
        	row2.V3PAOF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 30) {
								row2.V3FROF = null;
							} else {
	                         		
        	row2.V3FROF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 30, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 31) {
								row2.V3CFTP = null;
							} else {
	                         		
        	row2.V3CFTP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 31, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 32) {
								row2.V3CARI = null;
							} else {
	                         		
        	row2.V3CARI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 32, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 33) {
								row2.V3RPFF = null;
							} else {
	                         		
        	row2.V3RPFF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 33, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 34) {
								row2.V3PFIP = null;
							} else {
	                         		
        	row2.V3PFIP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 34, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 35) {
								row2.V3TRMT = null;
							} else {
	                         		
        	row2.V3TRMT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 35, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 36) {
								row2.V3RTVF = null;
							} else {
	                         		
        	row2.V3RTVF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 36, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 37) {
								row2.V3WHDR = null;
							} else {
	                         		
        	row2.V3WHDR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 37, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 38) {
								row2.V3JBNO = null;
							} else {
	                         		
        	row2.V3JBNO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 38, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 39) {
								row2.V3PVND = null;
							} else {
	                         		
        	row2.V3PVND = routines.system.JDBCUtil.getString(rs_tDBInput_2, 39, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 40) {
								row2.V3VNBR = null;
							} else {
	                         		
        	row2.V3VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 40, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 41) {
								row2.V3ADCD = null;
							} else {
		                          
            row2.V3ADCD = rs_tDBInput_2.getBigDecimal(41);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 42) {
								row2.V3PFRV = null;
							} else {
	                         		
        	row2.V3PFRV = routines.system.JDBCUtil.getString(rs_tDBInput_2, 42, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 43) {
								row2.V3TERM = null;
							} else {
	                         		
        	row2.V3TERM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 43, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 44) {
								row2.V3FTRM = null;
							} else {
	                         		
        	row2.V3FTRM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 44, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 45) {
								row2.V3CNFT = null;
							} else {
	                         		
        	row2.V3CNFT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 45, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 46) {
								row2.V3CFVT = null;
							} else {
	                         		
        	row2.V3CFVT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 46, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 47) {
								row2.V3TMOV = null;
							} else {
	                         		
        	row2.V3TMOV = routines.system.JDBCUtil.getString(rs_tDBInput_2, 47, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 48) {
								row2.V3POPW = null;
							} else {
	                         		
        	row2.V3POPW = routines.system.JDBCUtil.getString(rs_tDBInput_2, 48, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 49) {
								row2.V3LCN = null;
							} else {
	                         		
        	row2.V3LCN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 49, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 50) {
								row2.V3PO1 = null;
							} else {
	                         		
        	row2.V3PO1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 50, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 51) {
								row2.V3ARDE = null;
							} else {
		                          
            row2.V3ARDE = rs_tDBInput_2.getBigDecimal(51);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 52) {
								row2.V3ARBD = null;
							} else {
		                          
            row2.V3ARBD = rs_tDBInput_2.getBigDecimal(52);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 53) {
								row2.V3PCRD = null;
							} else {
		                          
            row2.V3PCRD = rs_tDBInput_2.getBigDecimal(53);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 54) {
								row2.V3OCDT = null;
							} else {
		                          
            row2.V3OCDT = rs_tDBInput_2.getBigDecimal(54);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 55) {
								row2.V3PCSD = null;
							} else {
		                          
            row2.V3PCSD = rs_tDBInput_2.getBigDecimal(55);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 56) {
								row2.V3PSRD = null;
							} else {
		                          
            row2.V3PSRD = rs_tDBInput_2.getBigDecimal(56);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 57) {
								row2.V3PSRT = null;
							} else {
		                          
            row2.V3PSRT = rs_tDBInput_2.getBigDecimal(57);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 58) {
								row2.V3SHDT = null;
							} else {
		                          
            row2.V3SHDT = rs_tDBInput_2.getBigDecimal(58);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 59) {
								row2.V3CSPD = null;
							} else {
		                          
            row2.V3CSPD = rs_tDBInput_2.getBigDecimal(59);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 60) {
								row2.V3ORDT = null;
							} else {
		                          
            row2.V3ORDT = rs_tDBInput_2.getBigDecimal(60);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 61) {
								row2.V3CLOD = null;
							} else {
		                          
            row2.V3CLOD = rs_tDBInput_2.getBigDecimal(61);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 62) {
								row2.V3NDDT = null;
							} else {
		                          
            row2.V3NDDT = rs_tDBInput_2.getBigDecimal(62);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 63) {
								row2.V3CLDN = null;
							} else {
		                          
            row2.V3CLDN = rs_tDBInput_2.getBigDecimal(63);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 64) {
								row2.V3TRDT = null;
							} else {
		                          
            row2.V3TRDT = rs_tDBInput_2.getBigDecimal(64);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 65) {
								row2.V3TRTM = null;
							} else {
		                          
            row2.V3TRTM = rs_tDBInput_2.getBigDecimal(65);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 66) {
								row2.V3PDTA = null;
							} else {
		                          
            row2.V3PDTA = rs_tDBInput_2.getBigDecimal(66);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 67) {
								row2.V3CPAD = null;
							} else {
		                          
            row2.V3CPAD = rs_tDBInput_2.getBigDecimal(67);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 68) {
								row2.V3PDTR = null;
							} else {
		                          
            row2.V3PDTR = rs_tDBInput_2.getBigDecimal(68);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 69) {
								row2.V3CLRD = null;
							} else {
		                          
            row2.V3CLRD = rs_tDBInput_2.getBigDecimal(69);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 70) {
								row2.V3POLC = null;
							} else {
		                          
            row2.V3POLC = rs_tDBInput_2.getBigDecimal(70);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 71) {
								row2.V3POCD = null;
							} else {
		                          
            row2.V3POCD = rs_tDBInput_2.getBigDecimal(71);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 72) {
								row2.V3TTL1 = null;
							} else {
		                          
            row2.V3TTL1 = rs_tDBInput_2.getBigDecimal(72);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 73) {
								row2.V3CSTT = null;
							} else {
		                          
            row2.V3CSTT = rs_tDBInput_2.getBigDecimal(73);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 74) {
								row2.V3TTOC = null;
							} else {
		                          
            row2.V3TTOC = rs_tDBInput_2.getBigDecimal(74);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 75) {
								row2.V3TOCK = null;
							} else {
		                          
            row2.V3TOCK = rs_tDBInput_2.getBigDecimal(75);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 76) {
								row2.V3TTNW = null;
							} else {
		                          
            row2.V3TTNW = rs_tDBInput_2.getBigDecimal(76);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 77) {
								row2.V3TNWK = null;
							} else {
		                          
            row2.V3TNWK = rs_tDBInput_2.getBigDecimal(77);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 78) {
								row2.V3TTGW = null;
							} else {
		                          
            row2.V3TTGW = rs_tDBInput_2.getBigDecimal(78);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 79) {
								row2.V3TGWK = null;
							} else {
		                          
            row2.V3TGWK = rs_tDBInput_2.getBigDecimal(79);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 80) {
								row2.V3TTPL = null;
							} else {
		                          
            row2.V3TTPL = rs_tDBInput_2.getBigDecimal(80);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 81) {
								row2.V3TTVU = null;
							} else {
		                          
            row2.V3TTVU = rs_tDBInput_2.getBigDecimal(81);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 82) {
								row2.V3TTFB = null;
							} else {
		                          
            row2.V3TTFB = rs_tDBInput_2.getBigDecimal(82);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 83) {
								row2.V3TTFR = null;
							} else {
		                          
            row2.V3TTFR = rs_tDBInput_2.getBigDecimal(83);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 84) {
								row2.V3TTAP = null;
							} else {
		                          
            row2.V3TTAP = rs_tDBInput_2.getBigDecimal(84);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 85) {
								row2.V3TTPU = null;
							} else {
		                          
            row2.V3TTPU = rs_tDBInput_2.getBigDecimal(85);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 86) {
								row2.V3VPUA = null;
							} else {
		                          
            row2.V3VPUA = rs_tDBInput_2.getBigDecimal(86);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 87) {
								row2.V3PALT = null;
							} else {
	                         		
        	row2.V3PALT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 87, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 88) {
								row2.V3PUBF = null;
							} else {
		                          
            row2.V3PUBF = rs_tDBInput_2.getBigDecimal(88);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 89) {
								row2.V3PUBT = null;
							} else {
		                          
            row2.V3PUBT = rs_tDBInput_2.getBigDecimal(89);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 90) {
								row2.V3VFRT = null;
							} else {
		                          
            row2.V3VFRT = rs_tDBInput_2.getBigDecimal(90);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 91) {
								row2.V3FRTP = null;
							} else {
	                         		
        	row2.V3FRTP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 91, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 92) {
								row2.V3WULC = null;
							} else {
		                          
            row2.V3WULC = rs_tDBInput_2.getBigDecimal(92);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 93) {
								row2.V3WUCT = null;
							} else {
	                         		
        	row2.V3WUCT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 93, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 94) {
								row2.V3NDAC = null;
							} else {
		                          
            row2.V3NDAC = rs_tDBInput_2.getBigDecimal(94);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 95) {
								row2.V3ONAF = null;
							} else {
		                          
            row2.V3ONAF = rs_tDBInput_2.getBigDecimal(95);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 96) {
								row2.V3ACDM = null;
							} else {
		                          
            row2.V3ACDM = rs_tDBInput_2.getBigDecimal(96);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 97) {
								row2.V3ACDF = null;
							} else {
		                          
            row2.V3ACDF = rs_tDBInput_2.getBigDecimal(97);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 98) {
								row2.V3TUCA = null;
							} else {
		                          
            row2.V3TUCA = rs_tDBInput_2.getBigDecimal(98);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 99) {
								row2.V3TTBD = null;
							} else {
		                          
            row2.V3TTBD = rs_tDBInput_2.getBigDecimal(99);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 100) {
								row2.V3TLWP = null;
							} else {
		                          
            row2.V3TLWP = rs_tDBInput_2.getBigDecimal(100);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 101) {
								row2.V3CNFR = null;
							} else {
		                          
            row2.V3CNFR = rs_tDBInput_2.getBigDecimal(101);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 102) {
								row2.V3CFRT = null;
							} else {
	                         		
        	row2.V3CFRT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 102, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 103) {
								row2.V3CULC = null;
							} else {
		                          
            row2.V3CULC = rs_tDBInput_2.getBigDecimal(103);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 104) {
								row2.V3CULT = null;
							} else {
	                         		
        	row2.V3CULT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 104, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 105) {
								row2.V3CPAL = null;
							} else {
		                          
            row2.V3CPAL = rs_tDBInput_2.getBigDecimal(105);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 106) {
								row2.V3CPUT = null;
							} else {
	                         		
        	row2.V3CPUT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 106, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 107) {
								row2.V3CPFB = null;
							} else {
		                          
            row2.V3CPFB = rs_tDBInput_2.getBigDecimal(107);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 108) {
								row2.V3CPTB = null;
							} else {
		                          
            row2.V3CPTB = rs_tDBInput_2.getBigDecimal(108);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 109) {
								row2.V3CTLN = null;
							} else {
		                          
            row2.V3CTLN = rs_tDBInput_2.getBigDecimal(109);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 110) {
								row2.V3CCTT = null;
							} else {
		                          
            row2.V3CCTT = rs_tDBInput_2.getBigDecimal(110);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 111) {
								row2.V3CTOC = null;
							} else {
		                          
            row2.V3CTOC = rs_tDBInput_2.getBigDecimal(111);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 112) {
								row2.V3CTCK = null;
							} else {
		                          
            row2.V3CTCK = rs_tDBInput_2.getBigDecimal(112);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 113) {
								row2.V3CTNW = null;
							} else {
		                          
            row2.V3CTNW = rs_tDBInput_2.getBigDecimal(113);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 114) {
								row2.V3CTNK = null;
							} else {
		                          
            row2.V3CTNK = rs_tDBInput_2.getBigDecimal(114);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 115) {
								row2.V3CTGW = null;
							} else {
		                          
            row2.V3CTGW = rs_tDBInput_2.getBigDecimal(115);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 116) {
								row2.V3CTGK = null;
							} else {
		                          
            row2.V3CTGK = rs_tDBInput_2.getBigDecimal(116);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 117) {
								row2.V3CTPL = null;
							} else {
		                          
            row2.V3CTPL = rs_tDBInput_2.getBigDecimal(117);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 118) {
								row2.V3CTVU = null;
							} else {
		                          
            row2.V3CTVU = rs_tDBInput_2.getBigDecimal(118);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 119) {
								row2.V3CTBC = null;
							} else {
		                          
            row2.V3CTBC = rs_tDBInput_2.getBigDecimal(119);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 120) {
								row2.V3CTFC = null;
							} else {
		                          
            row2.V3CTFC = rs_tDBInput_2.getBigDecimal(120);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 121) {
								row2.V3CTAC = null;
							} else {
		                          
            row2.V3CTAC = rs_tDBInput_2.getBigDecimal(121);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 122) {
								row2.V3CTPA = null;
							} else {
		                          
            row2.V3CTPA = rs_tDBInput_2.getBigDecimal(122);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 123) {
								row2.V3CNAC = null;
							} else {
		                          
            row2.V3CNAC = rs_tDBInput_2.getBigDecimal(123);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 124) {
								row2.V3CNAF = null;
							} else {
		                          
            row2.V3CNAF = rs_tDBInput_2.getBigDecimal(124);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 125) {
								row2.V3CACM = null;
							} else {
		                          
            row2.V3CACM = rs_tDBInput_2.getBigDecimal(125);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 126) {
								row2.V3CACF = null;
							} else {
		                          
            row2.V3CACF = rs_tDBInput_2.getBigDecimal(126);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 127) {
								row2.V3CTUC = null;
							} else {
		                          
            row2.V3CTUC = rs_tDBInput_2.getBigDecimal(127);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 128) {
								row2.V3CTBD = null;
							} else {
		                          
            row2.V3CTBD = rs_tDBInput_2.getBigDecimal(128);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 129) {
								row2.V3CTWP = null;
							} else {
		                          
            row2.V3CTWP = rs_tDBInput_2.getBigDecimal(129);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 130) {
								row2.V3POCB = null;
							} else {
	                         		
        	row2.V3POCB = routines.system.JDBCUtil.getString(rs_tDBInput_2, 130, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 131) {
								row2.V3POCN = null;
							} else {
	                         		
        	row2.V3POCN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 131, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 132) {
								row2.V3POCM = null;
							} else {
	                         		
        	row2.V3POCM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 132, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 133) {
								row2.V3TNRL = null;
							} else {
		                          
            row2.V3TNRL = rs_tDBInput_2.getBigDecimal(133);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 134) {
								row2.V3CSTR = null;
							} else {
		                          
            row2.V3CSTR = rs_tDBInput_2.getBigDecimal(134);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 135) {
								row2.V3TRCB = null;
							} else {
		                          
            row2.V3TRCB = rs_tDBInput_2.getBigDecimal(135);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 136) {
								row2.V3TRBK = null;
							} else {
		                          
            row2.V3TRBK = rs_tDBInput_2.getBigDecimal(136);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 137) {
								row2.V3TRNW = null;
							} else {
		                          
            row2.V3TRNW = rs_tDBInput_2.getBigDecimal(137);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 138) {
								row2.V3TRNK = null;
							} else {
		                          
            row2.V3TRNK = rs_tDBInput_2.getBigDecimal(138);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 139) {
								row2.V3TRGW = null;
							} else {
		                          
            row2.V3TRGW = rs_tDBInput_2.getBigDecimal(139);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 140) {
								row2.V3TRGK = null;
							} else {
		                          
            row2.V3TRGK = rs_tDBInput_2.getBigDecimal(140);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 141) {
								row2.V3TRPS = null;
							} else {
		                          
            row2.V3TRPS = rs_tDBInput_2.getBigDecimal(141);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 142) {
								row2.V3TRVP = null;
							} else {
		                          
            row2.V3TRVP = rs_tDBInput_2.getBigDecimal(142);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 143) {
								row2.V3TRVU = null;
							} else {
		                          
            row2.V3TRVU = rs_tDBInput_2.getBigDecimal(143);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 144) {
								row2.V3TRFC = null;
							} else {
		                          
            row2.V3TRFC = rs_tDBInput_2.getBigDecimal(144);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 145) {
								row2.V3TRFR = null;
							} else {
		                          
            row2.V3TRFR = rs_tDBInput_2.getBigDecimal(145);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 146) {
								row2.V3TRDA = null;
							} else {
		                          
            row2.V3TRDA = rs_tDBInput_2.getBigDecimal(146);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 147) {
								row2.V3TRBD = null;
							} else {
		                          
            row2.V3TRBD = rs_tDBInput_2.getBigDecimal(147);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 148) {
								row2.V3TRPA = null;
							} else {
		                          
            row2.V3TRPA = rs_tDBInput_2.getBigDecimal(148);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 149) {
								row2.V3TRUC = null;
							} else {
		                          
            row2.V3TRUC = rs_tDBInput_2.getBigDecimal(149);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 150) {
								row2.V3PMPS = null;
							} else {
	                         		
        	row2.V3PMPS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 150, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 151) {
								row2.V3PFNA = null;
							} else {
		                          
            row2.V3PFNA = rs_tDBInput_2.getBigDecimal(151);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 152) {
								row2.V3UNAM = null;
							} else {
		                          
            row2.V3UNAM = rs_tDBInput_2.getBigDecimal(152);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 153) {
								row2.V3MAVC = null;
							} else {
		                          
            row2.V3MAVC = rs_tDBInput_2.getBigDecimal(153);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 154) {
								row2.V3MMTS = null;
							} else {
	                         		
        	row2.V3MMTS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 154, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 155) {
								row2.V3MVCS = null;
							} else {
	                         		
        	row2.V3MVCS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 155, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 156) {
								row2.V3MPDS = null;
							} else {
	                         		
        	row2.V3MPDS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 156, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 157) {
								row2.V3MPDH = null;
							} else {
	                         		
        	row2.V3MPDH = routines.system.JDBCUtil.getString(rs_tDBInput_2, 157, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 158) {
								row2.V3MPDL = null;
							} else {
		                          
            row2.V3MPDL = rs_tDBInput_2.getBigDecimal(158);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 159) {
								row2.V3MQDH = null;
							} else {
	                         		
        	row2.V3MQDH = routines.system.JDBCUtil.getString(rs_tDBInput_2, 159, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 160) {
								row2.V3MQDL = null;
							} else {
		                          
            row2.V3MQDL = rs_tDBInput_2.getBigDecimal(160);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 161) {
								row2.V3MPDT = null;
							} else {
		                          
            row2.V3MPDT = rs_tDBInput_2.getBigDecimal(161);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 162) {
								row2.V3MCSD = null;
							} else {
		                          
            row2.V3MCSD = rs_tDBInput_2.getBigDecimal(162);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 163) {
								row2.V3MVCA = null;
							} else {
		                          
            row2.V3MVCA = rs_tDBInput_2.getBigDecimal(163);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 164) {
								row2.V3MERV = null;
							} else {
		                          
            row2.V3MERV = rs_tDBInput_2.getBigDecimal(164);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 165) {
								row2.V3MINV = null;
							} else {
	                         		
        	row2.V3MINV = routines.system.JDBCUtil.getString(rs_tDBInput_2, 165, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 166) {
								row2.V3MIDT = null;
							} else {
		                          
            row2.V3MIDT = rs_tDBInput_2.getBigDecimal(166);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 167) {
								row2.V3MVIF = null;
							} else {
	                         		
        	row2.V3MVIF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 167, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 168) {
								row2.V3MVAR = null;
							} else {
		                          
            row2.V3MVAR = rs_tDBInput_2.getBigDecimal(168);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 169) {
								row2.V3MPDA = null;
							} else {
		                          
            row2.V3MPDA = rs_tDBInput_2.getBigDecimal(169);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 170) {
								row2.V3PPFS = null;
							} else {
	                         		
        	row2.V3PPFS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 170, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 171) {
								row2.V3FPNA = null;
							} else {
		                          
            row2.V3FPNA = rs_tDBInput_2.getBigDecimal(171);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 172) {
								row2.V3UFPA = null;
							} else {
		                          
            row2.V3UFPA = rs_tDBInput_2.getBigDecimal(172);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 173) {
								row2.V3FAVC = null;
							} else {
		                          
            row2.V3FAVC = rs_tDBInput_2.getBigDecimal(173);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 174) {
								row2.V3FMTS = null;
							} else {
	                         		
        	row2.V3FMTS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 174, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 175) {
								row2.V3FVCS = null;
							} else {
	                         		
        	row2.V3FVCS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 175, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 176) {
								row2.V3FPDS = null;
							} else {
	                         		
        	row2.V3FPDS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 176, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 177) {
								row2.V3FCDH = null;
							} else {
	                         		
        	row2.V3FCDH = routines.system.JDBCUtil.getString(rs_tDBInput_2, 177, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 178) {
								row2.V3FCDL = null;
							} else {
		                          
            row2.V3FCDL = rs_tDBInput_2.getBigDecimal(178);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 179) {
								row2.V3FPDT = null;
							} else {
		                          
            row2.V3FPDT = rs_tDBInput_2.getBigDecimal(179);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 180) {
								row2.V3RSVN = null;
							} else {
	                         		
        	row2.V3RSVN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 180, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 181) {
								row2.V3FTCS = null;
							} else {
	                         		
        	row2.V3FTCS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 181, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 182) {
								row2.V3FCAD = null;
							} else {
		                          
            row2.V3FCAD = rs_tDBInput_2.getBigDecimal(182);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 183) {
								row2.V3FVAR = null;
							} else {
		                          
            row2.V3FVAR = rs_tDBInput_2.getBigDecimal(183);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 184) {
								row2.V3FVCH = null;
							} else {
		                          
            row2.V3FVCH = rs_tDBInput_2.getBigDecimal(184);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 185) {
								row2.V3FTRV = null;
							} else {
		                          
            row2.V3FTRV = rs_tDBInput_2.getBigDecimal(185);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 186) {
								row2.V3FINV = null;
							} else {
	                         		
        	row2.V3FINV = routines.system.JDBCUtil.getString(rs_tDBInput_2, 186, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 187) {
								row2.V3FIDT = null;
							} else {
		                          
            row2.V3FIDT = rs_tDBInput_2.getBigDecimal(187);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 188) {
								row2.V3FVIF = null;
							} else {
	                         		
        	row2.V3FVIF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 188, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 189) {
								row2.V3TVSQ = null;
							} else {
		                          
            row2.V3TVSQ = rs_tDBInput_2.getBigDecimal(189);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 190) {
								row2.V3TKSQ = null;
							} else {
		                          
            row2.V3TKSQ = rs_tDBInput_2.getBigDecimal(190);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 191) {
								row2.V3TDAQ = null;
							} else {
		                          
            row2.V3TDAQ = rs_tDBInput_2.getBigDecimal(191);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 192) {
								row2.V3NDAF = null;
							} else {
		                          
            row2.V3NDAF = rs_tDBInput_2.getBigDecimal(192);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 193) {
								row2.V3FPDA = null;
							} else {
		                          
            row2.V3FPDA = rs_tDBInput_2.getBigDecimal(193);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 194) {
								row2.V3CUNO = null;
							} else {
	                         		
        	row2.V3CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 194, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 195) {
								row2.V3ORNO = null;
							} else {
		                          
            row2.V3ORNO = rs_tDBInput_2.getBigDecimal(195);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 196) {
								row2.V3SHNM = null;
							} else {
	                         		
        	row2.V3SHNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 196, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 197) {
								row2.V3SADD = null;
							} else {
	                         		
        	row2.V3SADD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 197, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 198) {
								row2.V3SHNO = null;
							} else {
	                         		
        	row2.V3SHNO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 198, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 199) {
								row2.V3PONU = null;
							} else {
	                         		
        	row2.V3PONU = routines.system.JDBCUtil.getString(rs_tDBInput_2, 199, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 200) {
								row2.V3RERF = null;
							} else {
	                         		
        	row2.V3RERF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 200, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 201) {
								row2.V3RECO = null;
							} else {
	                         		
        	row2.V3RECO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 201, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 202) {
								row2.V3FSCF = null;
							} else {
	                         		
        	row2.V3FSCF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 202, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 203) {
								row2.V3POEO = null;
							} else {
		                          
            row2.V3POEO = rs_tDBInput_2.getBigDecimal(203);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 204) {
								row2.V3POVO = null;
							} else {
	                         		
        	row2.V3POVO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 204, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 205) {
								row2.V3PBSC = null;
							} else {
	                         		
        	row2.V3PBSC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 205, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 206) {
								row2.V3RECF = null;
							} else {
	                         		
        	row2.V3RECF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 206, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 207) {
								row2.V3PSTB = null;
							} else {
		                          
            row2.V3PSTB = rs_tDBInput_2.getBigDecimal(207);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 208) {
								row2.V3TMSN = null;
							} else {
	                         		
        	row2.V3TMSN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 208, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 209) {
								row2.V3XMFL = null;
							} else {
	                         		
        	row2.V3XMFL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 209, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 210) {
								row2.V3XMDT = null;
							} else {
		                          
            row2.V3XMDT = rs_tDBInput_2.getBigDecimal(210);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 211) {
								row2.V3XMTM = null;
							} else {
		                          
            row2.V3XMTM = rs_tDBInput_2.getBigDecimal(211);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 212) {
								row2.V3ERRF = null;
							} else {
	                         		
        	row2.V3ERRF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 212, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 213) {
								row2.V3STKI = null;
							} else {
	                         		
        	row2.V3STKI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 213, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 214) {
								row2.V3COTM = null;
							} else {
		                          
            row2.V3COTM = rs_tDBInput_2.getBigDecimal(214);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 215) {
								row2.V3RPRC = null;
							} else {
	                         		
        	row2.V3RPRC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 215, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 216) {
								row2.V3FIMI = null;
							} else {
	                         		
        	row2.V3FIMI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 216, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 217) {
								row2.V3TXDT = null;
							} else {
		                          
            row2.V3TXDT = rs_tDBInput_2.getBigDecimal(217);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 218) {
								row2.V3TXTM = null;
							} else {
		                          
            row2.V3TXTM = rs_tDBInput_2.getBigDecimal(218);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 219) {
								row2.V3POIF = null;
							} else {
	                         		
        	row2.V3POIF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 219, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 220) {
								row2.V3COD1 = null;
							} else {
	                         		
        	row2.V3COD1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 220, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 221) {
								row2.V3SNNO = null;
							} else {
	                         		
        	row2.V3SNNO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 221, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 222) {
								row2.V3SHID = null;
							} else {
	                         		
        	row2.V3SHID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 222, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 223) {
								row2.V3FRTI = null;
							} else {
	                         		
        	row2.V3FRTI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 223, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 224) {
								row2.V3OPO = null;
							} else {
	                         		
        	row2.V3OPO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 224, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 225) {
								row2.V3EADT = null;
							} else {
		                          
            row2.V3EADT = rs_tDBInput_2.getBigDecimal(225);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 226) {
								row2.V3EATM = null;
							} else {
		                          
            row2.V3EATM = rs_tDBInput_2.getBigDecimal(226);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 227) {
								row2.V3EAID = null;
							} else {
	                         		
        	row2.V3EAID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 227, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 228) {
								row2.V3MODT = null;
							} else {
		                          
            row2.V3MODT = rs_tDBInput_2.getBigDecimal(228);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 229) {
								row2.V3MOTM = null;
							} else {
		                          
            row2.V3MOTM = rs_tDBInput_2.getBigDecimal(229);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 230) {
								row2.V3MOID = null;
							} else {
	                         		
        	row2.V3MOID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 230, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 231) {
								row2.V3MOPG = null;
							} else {
	                         		
        	row2.V3MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 231, true);
		                    }
					
						log.debug("tDBInput_2 - Retrieving the record " + nb_line_tDBInput_2 + ".");
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row2 - " + (row2==null? "": row2.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.V3OCDT = TimeStampConverting.convertToDate(row2.V3OCDT.toString()) ;
Var.V3PCSD = TimeStampConverting.convertToDate(row2.V3PCSD.toString()) ;
Var.V3ARDE = TimeStampConverting.convertToDate(row2.V3ARDE.toString()) ;
Var.V3ARBD = TimeStampConverting.convertToDate(row2.V3ARBD.toString()) ;
Var.V3PCRD = TimeStampConverting.convertToDate(row2.V3PCRD.toString()) ;
Var.V3SHDT = TimeStampConverting.convertToDate(row2.V3SHDT.toString()) ;
Var.V3CSPD = TimeStampConverting.convertToDate(row2.V3CSPD.toString()) ;
Var.V3ORDT = TimeStampConverting.convertToDate(row2.V3ORDT.toString()) ;
Var.V3CLOD = TimeStampConverting.convertToDate(row2.V3CLOD.toString()) ;
Var.V3NDDT = TimeStampConverting.convertToDate(row2.V3NDDT.toString()) ;
Var.V3CLDN = TimeStampConverting.convertToDate(row2.V3CLDN.toString()) ;
Var.V3PDTA = TimeStampConverting.convertToDate(row2.V3PDTA.toString()) ;
Var.V3CPAD = TimeStampConverting.convertToDate(row2.V3CPAD.toString()) ;
Var.V3PDTR = TimeStampConverting.convertToDate(row2.V3PDTR.toString()) ;
Var.V3CLRD = TimeStampConverting.convertToDate(row2.V3CLRD.toString()) ;
Var.V3POLC = TimeStampConverting.convertToDate(row2.V3POLC.toString()) ;
Var.V3POCD = TimeStampConverting.convertToDate(row2.V3POCD.toString()) ;
Var.V3MPDT = TimeStampConverting.convertToDate(row2.V3MPDT.toString()) ;
Var.V3MIDT = TimeStampConverting.convertToDate(row2.V3MIDT.toString()) ;
Var.V3FPDT = TimeStampConverting.convertToDate(row2.V3FPDT.toString()) ;
Var.V3FIDT = TimeStampConverting.convertToDate(row2.V3FIDT.toString()) ;
Var.SCHEDULED_PO_RECEIPT_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row2.V3PSRD.toString(),row2.V3PSRT.toString()) ;
Var.PO_TRANSMISSION_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row2.V3TRDT.toString(),row2.V3TRTM.toString()) ;
Var.TRANSMIT_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row2.V3XMDT.toString(),row2.V3XMTM.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row2.V3EADT.toString(),row2.V3EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row2.V3MODT.toString(),row2.V3MOTM.toString()) ;
Var.PO_CLOSE_TIME = TimeStampConverting.convertToTime(row2.V3COTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PURCHASE_ORDER_HEADER_2 = null;


// # Output table : 'PURCHASE_ORDER_HEADER_2'
count_PURCHASE_ORDER_HEADER_2_tMap_5++;

PURCHASE_ORDER_HEADER_2_tmp.ORDER_CTRL_NO = row2.V3OCNB;
PURCHASE_ORDER_HEADER_2_tmp.PURCHASE_ORDER_NO = row2.V3PO;
PURCHASE_ORDER_HEADER_2_tmp.SITE_ID = context.opco;
PURCHASE_ORDER_HEADER_2_tmp.SHIPPING_POINT_SHIP_FROM = row2.V3ADCD.toString();
PURCHASE_ORDER_HEADER_2_tmp.SMS_CONFIRMED_DATE = Var.V3OCDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3OCDT):null ;
PURCHASE_ORDER_HEADER_2_tmp.VENDOR_CONFIRMED_SHIP_DATE = Var.V3PCSD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3PCSD):null ;
PURCHASE_ORDER_HEADER_2_tmp.SCHEDULED_PO_RECEIPT_TIMESTAMP = Var.SCHEDULED_PO_RECEIPT_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.SCHEDULED_PO_RECEIPT_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_tmp.ORIG_PICKUP_ALLOW_TYPE = row2.V3PALT;
PURCHASE_ORDER_HEADER_2_tmp.PICKUP_ALLOW_FROM_BRACKET = row2.V3PUBF;
PURCHASE_ORDER_HEADER_2_tmp.ORIG_FREIGHT_RATE = row2.V3VFRT;
PURCHASE_ORDER_HEADER_2_tmp.ORIG_FREIGHT_TYPE = row2.V3FRTP;
PURCHASE_ORDER_HEADER_2_tmp.ORIG_MERCH_ALLOW_CHARGE = row2.V3ACDM;
PURCHASE_ORDER_HEADER_2_tmp.ORIG_FREIGHT_ALLOW_CHARGE = row2.V3ACDF;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_ROUNDING_VARIANCE = row2.V3FTRV;
PURCHASE_ORDER_HEADER_2_tmp.SHIP_WITH_NEXT_ORDER_IND = row2.V3SHNO;
PURCHASE_ORDER_HEADER_2_tmp.CUST_REFERENCE_ORDER_NO = row2.V3PONU;
PURCHASE_ORDER_HEADER_2_tmp.OUTSIDE_WHSE_ID = row2.V3OWID;
PURCHASE_ORDER_HEADER_2_tmp.RECOMMENDED_ORDER_SEQ_NO = row2.V3ROSQ;
PURCHASE_ORDER_HEADER_2_tmp.SYSCO_BRACKET_NO = row2.V3SBNO;
PURCHASE_ORDER_HEADER_2_tmp.BUYER_NO = row2.V3BUYR;
PURCHASE_ORDER_HEADER_2_tmp.ORDER_GROUP = row2.V3OFCI;
PURCHASE_ORDER_HEADER_2_tmp.BUYING_GROUP = row2.V3BYGP;
PURCHASE_ORDER_HEADER_2_tmp.PO_PRIMARY_STATUS = row2.V3POST;
PURCHASE_ORDER_HEADER_2_tmp.PO_SECONDARY_STATUS = row2.V3POSS;
PURCHASE_ORDER_HEADER_2_tmp.PO_IN_USE_FLAG = row2.V3INUS;
PURCHASE_ORDER_HEADER_2_tmp.WHSE_CHANGE_CODE = row2.V3WCCD;
PURCHASE_ORDER_HEADER_2_tmp.PO_VALID_PRICING_FLAG = row2.V3VLPF;
PURCHASE_ORDER_HEADER_2_tmp.PO_TYPE = row2.V3POTP;
PURCHASE_ORDER_HEADER_2_tmp.DEMAND_STATUS = row2.V3DMST;
PURCHASE_ORDER_HEADER_2_tmp.BACKORDER_FLAG = row2.V3BORF;
PURCHASE_ORDER_HEADER_2_tmp.PROC_BILLED_VENDOR_BILLED_FLAG = row2.V3PBVB;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_INTER_COMPANY_STMT_FLAG = row2.V3FICS;
PURCHASE_ORDER_HEADER_2_tmp.CONF_STATUS = row2.V3CFST;
PURCHASE_ORDER_HEADER_2_tmp.PO_VALID_PRICING_APPROVAL = row2.V3VLPA;
PURCHASE_ORDER_HEADER_2_tmp.CONF_RECVD_FLAG = row2.V3CFRF;
PURCHASE_ORDER_HEADER_2_tmp.WHSE_STATUS = row2.V3WHST;
PURCHASE_ORDER_HEADER_2_tmp.PO_CHANGED_FLAG = row2.V3POCH;
PURCHASE_ORDER_HEADER_2_tmp.PRINT_PRICE_ON_PO_FLAG = row2.V3PPOP;
PURCHASE_ORDER_HEADER_2_tmp.UPDATE_LEAD_TIME_FLAG = row2.V3UPLT;
PURCHASE_ORDER_HEADER_2_tmp.PRICE_CHANGE_FLAG = row2.V3PCFL;
PURCHASE_ORDER_HEADER_2_tmp.CARRIER_ID = row2.V3CARI;
PURCHASE_ORDER_HEADER_2_tmp.REVISED_PROFORMA_FLAG = row2.V3RPFF;
PURCHASE_ORDER_HEADER_2_tmp.PROFORMA_INPROCESS_FLAG = row2.V3PFIP;
PURCHASE_ORDER_HEADER_2_tmp.TRANSMIT_TO = row2.V3TRMT;
PURCHASE_ORDER_HEADER_2_tmp.RETRANSMIT_TO_VENDOR_FLAG = row2.V3RTVF;
PURCHASE_ORDER_HEADER_2_tmp.JOB_NO = row2.V3JBNO;
PURCHASE_ORDER_HEADER_2_tmp.PAY_TO_VENDOR_NO = row2.V3PVND;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_VENDOR = row2.V3PFRV;
PURCHASE_ORDER_HEADER_2_tmp.VENDOR_TERMS = row2.V3TERM;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_VENDOR_TERMS = row2.V3FTRM;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TERMS = row2.V3CNFT;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_FREIGHT_VENDOR_TERMS = row2.V3CFVT;
PURCHASE_ORDER_HEADER_2_tmp.TERMS_OVERRIDE_FLAG = row2.V3TMOV;
PURCHASE_ORDER_HEADER_2_tmp.PO_PLACED_WITH = row2.V3POPW;
PURCHASE_ORDER_HEADER_2_tmp.LOAD_CTRL_NO = row2.V3LCN;
PURCHASE_ORDER_HEADER_2_tmp.BUSINESS_DATE_ANTICIPATED_RECEIPT = Var.V3ARDE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3ARDE):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_DATE_ANTICIPATED_RECEIPT = Var.V3ARBD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3ARBD):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_VENDOR_CONF_RECEIPT = Var.V3PCRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3PCRD):null ;
PURCHASE_ORDER_HEADER_2_tmp.BUSINESS_DATE_SHIP_PICKUP = Var.V3SHDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3SHDT):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_DATE_SHIP_PICKUP = Var.V3CSPD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CSPD):null ;
PURCHASE_ORDER_HEADER_2_tmp.BUSINESS_ORDER_DATE = Var.V3ORDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3ORDT):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_ORDER_DATE = Var.V3CLOD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CLOD):null ;
PURCHASE_ORDER_HEADER_2_tmp.BUSINESS_DATE_PO_NEEDED = Var.V3NDDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3NDDT):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_DATE_PO_NEEDED = Var.V3CLDN!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CLDN):null ;
PURCHASE_ORDER_HEADER_2_tmp.PO_TRANSMISSION_TIMESTAMP = Var.PO_TRANSMISSION_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.PO_TRANSMISSION_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_tmp.BUSINESS_DATE_PO_ACCEPTED = Var.V3PDTA!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3PDTA):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_DATE_PO_ACCEPTED = Var.V3CPAD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CPAD):null ;
PURCHASE_ORDER_HEADER_2_tmp.BUSINESS_DATE_ACTUAL_RECEIPT = Var.V3PDTR!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3PDTR):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_DATE_ACTUAL_RECEIPT = Var.V3CLRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3CLRD):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE = Var.V3POLC!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3POLC):null ;
PURCHASE_ORDER_HEADER_2_tmp.CALENDAR_VENDOR_CONF_DATE = Var.V3POCD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3POCD):null ;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_LINES = row2.V3TTL1;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_CASES = row2.V3CSTT;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_CUBE = row2.V3TTOC;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_NET_WGT = row2.V3TTNW;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_GROSS_WGT = row2.V3TTGW;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_VENDOR_PALLETS = row2.V3TTPL;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_VENDOR_UNITS = row2.V3TTVU;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_FOB_COST = row2.V3TTFB;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_FREIGHT_COST = row2.V3TTFR;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_AP_COST = row2.V3TTAP;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_PICKUP_ALLOW = row2.V3TTPU;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_PICKUP_ALLOW_RATE = row2.V3VPUA;
PURCHASE_ORDER_HEADER_2_tmp.PICKUP_ALLOW_TO_BRACKET = row2.V3PUBT;
PURCHASE_ORDER_HEADER_2_tmp.WHSE_UNLOAD_CHARGE = row2.V3WULC;
PURCHASE_ORDER_HEADER_2_tmp.WHSE_UNLOAD_CHARGE_TYPE = row2.V3WUCT;
PURCHASE_ORDER_HEADER_2_tmp.ORIG_NON_DIST_MERCH_ALLOW_CHARGE = row2.V3NDAC;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_WHSE_PALLETS = row2.V3TLWP;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_FREIGHT_RATE = row2.V3CNFR;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_FREIGHT_RATE_TYPE = row2.V3CFRT;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_UNLOADING_CHARGE = row2.V3CULC;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_UNLOADING_CHRG_TYPE = row2.V3CULT;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_PICKUP_ALLOW_RATE = row2.V3CPAL;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_PICKUP_ALLOW_TYPE = row2.V3CPUT;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET = row2.V3CPFB;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_PICKUP_ALLOW_TO_BRACKET = row2.V3CPTB;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_LINES = row2.V3CTLN;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTA_CASES = row2.V3CCTT;
PURCHASE_ORDER_HEADER_2_tmp.CONFIMRED_TOTAL_CUBE = row2.V3CTOC;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_NET_WGT = row2.V3CTNW;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_GROSS_WGT = row2.V3CTGW;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_VENDOR_PALLETS = row2.V3CTPL;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_VENDOR_UNITS = row2.V3CTVU;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_FOB_COST = row2.V3CTBC;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_FREIGHT_COST = row2.V3CTFC;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_AP_COST = row2.V3CTAC;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_PICKUP_ALLOW = row2.V3CTPA;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE = row2.V3CNAC;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE = row2.V3CNAF;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_MERCH_ALLOW_CHARGE = row2.V3CACM;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_FREIGHT_ALLOW_CHARGE = row2.V3CACF;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_UNLOADING_CHARGE = row2.V3CTUC;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_BRACKET_DIFF = row2.V3CTBD;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_TOTAL_WHSE_PALLETS = row2.V3CTWP;
PURCHASE_ORDER_HEADER_2_tmp.CONFIRMED_USER = row2.V3POCB;
PURCHASE_ORDER_HEADER_2_tmp.VENDOR_CONF_NO = row2.V3POCN;
PURCHASE_ORDER_HEADER_2_tmp.VENDOR_CONF_METHOD = row2.V3POCM;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_LINES = row2.V3TNRL;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_CASES = row2.V3CSTR;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_CUBE = row2.V3TRCB;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_NET_WGT = row2.V3TRNW;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_GROSS_WGT = row2.V3TRGW;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_VENDOR_PALLETS = row2.V3TRPS;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_WHSE_PALLETS = row2.V3TRVP;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_VENDOR_UNITS = row2.V3TRVU;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_FOB_COST = row2.V3TRFC;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_FREIGHT_COST = row2.V3TRFR;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_AP_COST = row2.V3TRDA;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_BRACKET_DIFF = row2.V3TRBD;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_PICKUP_ALLOW = row2.V3TRPA;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_RECVD_UNLOADING_CHARGE = row2.V3TRUC;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_PROFORMA_STATUS = row2.V3PMPS;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_PROFORMA_NET_AMT = row2.V3PFNA;
PURCHASE_ORDER_HEADER_2_tmp.UNMATCHED_MERCH_PROFROMA_NET_AMT = row2.V3UNAM;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_AMT_TO_BE_VOUCH = row2.V3MAVC;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_MATCHED_STATUS = row2.V3MMTS;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_VOUCH_STATUS = row2.V3MVCS;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_PAID_STATUS = row2.V3MPDS;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_PRICE_DIFF_HEADER_STATUS = row2.V3MPDH;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_PRICE_DIFF_ERROR_LINE_COUNT = row2.V3MPDL;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_QTY_DIFF_HEADER_STATUS = row2.V3MQDH;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_QTY_DIFF_ERROR_LINE_COUNT = row2.V3MQDL;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_PAYMENT_DUE_DATE = Var.V3MPDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3MPDT):null ;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_CASH_DISC = row2.V3MCSD;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_VOUCH_AMT = row2.V3MVCA;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_ROUNDING_VAR = row2.V3MERV;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_INV_NO = row2.V3MINV;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_INV_DATE = Var.V3MIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3MIDT):null ;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_VENDOR_INTERCOM_BILLED_FLAG = row2.V3MVIF;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_VAR_AMT = row2.V3MVAR;
PURCHASE_ORDER_HEADER_2_tmp.MERCH_FREIGHT_AMT = row2.V3MPDA;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_PROFORMA_NET_AMT = row2.V3FPNA;
PURCHASE_ORDER_HEADER_2_tmp.UNMATCHED_FREIGHT_PROFORMA_NET_AMT = row2.V3UFPA;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_AMT_TO_BE_VOUCH = row2.V3FAVC;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_MATCHED_STATUS = row2.V3FMTS;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_VOUCH_STATUS = row2.V3FVCS;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_PAID_STATUS = row2.V3FPDS;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_DIFF_HEADER_STATUS = row2.V3FCDH;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_PAYMENT_DUE_DATE = Var.V3FPDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3FPDT):null ;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_CLAIM_STATUS = row2.V3FTCS;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_CASH_DISC = row2.V3FCAD;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_VARIANCE_AMT = row2.V3FVAR;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_VOUCH_AMT = row2.V3FVCH;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_INV_NO = row2.V3FINV;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_INV_DATE = Var.V3FIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V3FIDT):null ;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG = row2.V3FVIF;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_VENDOR_SHORT_QTY = row2.V3TVSQ;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_CARRIER_SHORT_QTY = row2.V3TKSQ;
PURCHASE_ORDER_HEADER_2_tmp.TOTAL_DAMAGED_ACCEPTED_QTY = row2.V3TDAQ;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_PAID_AMOUNT = row2.V3FPDA;
PURCHASE_ORDER_HEADER_2_tmp.SHIP_TO_CUST = row2.V3CUNO;
PURCHASE_ORDER_HEADER_2_tmp.CUST_ORDER_NO = row2.V3ORNO;
PURCHASE_ORDER_HEADER_2_tmp.SHIP_FROM_NAME = row2.V3SHNM;
PURCHASE_ORDER_HEADER_2_tmp.SHIPPING_ADDRESS_ID = row2.V3SADD;
PURCHASE_ORDER_HEADER_2_tmp.RESERVED_RE_RECOMMEND_FLAG = row2.V3RERF;
PURCHASE_ORDER_HEADER_2_tmp.RECOMMENDED_ORDER_FLAG = row2.V3RECO;
PURCHASE_ORDER_HEADER_2_tmp.FAILED_SCORECARD_FLAG = row2.V3FSCF;
PURCHASE_ORDER_HEADER_2_tmp.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG = row2.V3POVO;
PURCHASE_ORDER_HEADER_2_tmp.PRICE_BRACKET_SOURCE_CODE = row2.V3PBSC;
PURCHASE_ORDER_HEADER_2_tmp.SHORT_PERCENT_TO_BACKORDER = row2.V3PSTB;
PURCHASE_ORDER_HEADER_2_tmp.SECONDARY_PO_TYPE = row2.V3TMSN;
PURCHASE_ORDER_HEADER_2_tmp.TRANSMIT_FLAG = row2.V3XMFL;
PURCHASE_ORDER_HEADER_2_tmp.TRANSMIT_TIMESTAMP = Var.TRANSMIT_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.TRANSMIT_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_tmp.PO_ERROR_IND = row2.V3ERRF;
PURCHASE_ORDER_HEADER_2_tmp.STOCK_IND = row2.V3STKI;
PURCHASE_ORDER_HEADER_2_tmp.PO_CLOSE_TIME = Var.PO_CLOSE_TIME!=""? TalendDate.parseDate("HH:mm:ss",Var.PO_CLOSE_TIME):null ;
PURCHASE_ORDER_HEADER_2_tmp.REPLENISHMENT_SYSTEM = row2.V3RPRC;
PURCHASE_ORDER_HEADER_2_tmp.SHIPMENT_NOTICE_NO = row2.V3SNNO;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_PROFORMA_STATUS = row2.V3PPFS;
PURCHASE_ORDER_HEADER_2_tmp.SHIPMENT_ID = row2.V3SHID;
PURCHASE_ORDER_HEADER_2_tmp.FREIGHT_PROCESS_FLAG = row2.V3FRTI;
PURCHASE_ORDER_HEADER_2_tmp.ORIG_PURCHASE_ORDER_NO = row2.V3OPO;
PURCHASE_ORDER_HEADER_2_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_tmp.CREATED_USER_ID = row2.V3EAID;
PURCHASE_ORDER_HEADER_2_tmp.IS_ACTIVE = true;
PURCHASE_ORDER_HEADER_2_tmp.V3PF_SVOP = context.svop;
PURCHASE_ORDER_HEADER_2_tmp.CONFERENCE_TYPE = row2.V3CFTP;
PURCHASE_ORDER_HEADER_2_tmp.NEXT_CONF_RECVD_FLAG = row2.V3SCRF;
PURCHASE_ORDER_HEADER_2_tmp.VENDOR = row2.V3VNBR;
PURCHASE_ORDER_HEADER_2_tmp.UPDATED_USER_ID = row2.V3MOID;
PURCHASE_ORDER_HEADER_2_tmp.UPDATED_PROGRAM_ID = row2.V3MOPG;
PURCHASE_ORDER_HEADER_2_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PURCHASE_ORDER_HEADER_2_tmp.IS_DELETED = false;
PURCHASE_ORDER_HEADER_2_tmp.CREATED_ORIGIN = "SUS";
PURCHASE_ORDER_HEADER_2_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_HEADER_2_tmp.UPDATED_ORIGIN = "SUS";
PURCHASE_ORDER_HEADER_2_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_HEADER_2_tmp.PICKUP_ALLOWANCE_OVERRIDE_FLAG = row2.V3PAOF;
PURCHASE_ORDER_HEADER_2 = PURCHASE_ORDER_HEADER_2_tmp;
log.debug("tMap_5 - Outputting the record " + count_PURCHASE_ORDER_HEADER_2_tMap_5 + " of the output table 'PURCHASE_ORDER_HEADER_2'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "PURCHASE_ORDER_HEADER_2"
if(PURCHASE_ORDER_HEADER_2 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PURCHASE_ORDER_HEADER_2"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("PURCHASE_ORDER_HEADER_2 - " + (PURCHASE_ORDER_HEADER_2==null? "": PURCHASE_ORDER_HEADER_2.toLogString()));
    			}
    		



        whetherReject_tDBOutput_2 = false;
                    if(PURCHASE_ORDER_HEADER_2.ORDER_CTRL_NO == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, PURCHASE_ORDER_HEADER_2.ORDER_CTRL_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, PURCHASE_ORDER_HEADER_2.PURCHASE_ORDER_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.SITE_ID == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, PURCHASE_ORDER_HEADER_2.SITE_ID);
}

                    if(PURCHASE_ORDER_HEADER_2.SHIPPING_POINT_SHIP_FROM == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, PURCHASE_ORDER_HEADER_2.SHIPPING_POINT_SHIP_FROM);
}

                    if(PURCHASE_ORDER_HEADER_2.SMS_CONFIRMED_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(5, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.SMS_CONFIRMED_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.VENDOR_CONFIRMED_SHIP_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(6, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.VENDOR_CONFIRMED_SHIP_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.SCHEDULED_PO_RECEIPT_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(7, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.SCHEDULED_PO_RECEIPT_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.ORIG_PICKUP_ALLOW_TYPE == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, PURCHASE_ORDER_HEADER_2.ORIG_PICKUP_ALLOW_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(9, PURCHASE_ORDER_HEADER_2.PICKUP_ALLOW_FROM_BRACKET);

                    pstmt_tDBOutput_2.setBigDecimal(10, PURCHASE_ORDER_HEADER_2.ORIG_FREIGHT_RATE);

                    if(PURCHASE_ORDER_HEADER_2.ORIG_FREIGHT_TYPE == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(11, PURCHASE_ORDER_HEADER_2.ORIG_FREIGHT_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(12, PURCHASE_ORDER_HEADER_2.ORIG_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(13, PURCHASE_ORDER_HEADER_2.ORIG_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(14, PURCHASE_ORDER_HEADER_2.FREIGHT_ROUNDING_VARIANCE);

                    if(PURCHASE_ORDER_HEADER_2.SHIP_WITH_NEXT_ORDER_IND == null) {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(15, PURCHASE_ORDER_HEADER_2.SHIP_WITH_NEXT_ORDER_IND);
}

                    if(PURCHASE_ORDER_HEADER_2.CUST_REFERENCE_ORDER_NO == null) {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(16, PURCHASE_ORDER_HEADER_2.CUST_REFERENCE_ORDER_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.OUTSIDE_WHSE_ID == null) {
pstmt_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(17, PURCHASE_ORDER_HEADER_2.OUTSIDE_WHSE_ID);
}

                    pstmt_tDBOutput_2.setBigDecimal(18, PURCHASE_ORDER_HEADER_2.RECOMMENDED_ORDER_SEQ_NO);

                    pstmt_tDBOutput_2.setBigDecimal(19, PURCHASE_ORDER_HEADER_2.SYSCO_BRACKET_NO);

                    if(PURCHASE_ORDER_HEADER_2.BUYER_NO == null) {
pstmt_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(20, PURCHASE_ORDER_HEADER_2.BUYER_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.ORDER_GROUP == null) {
pstmt_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(21, PURCHASE_ORDER_HEADER_2.ORDER_GROUP);
}

                    pstmt_tDBOutput_2.setBigDecimal(22, PURCHASE_ORDER_HEADER_2.BUYING_GROUP);

                    if(PURCHASE_ORDER_HEADER_2.PO_PRIMARY_STATUS == null) {
pstmt_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(23, PURCHASE_ORDER_HEADER_2.PO_PRIMARY_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_SECONDARY_STATUS == null) {
pstmt_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(24, PURCHASE_ORDER_HEADER_2.PO_SECONDARY_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_IN_USE_FLAG == null) {
pstmt_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(25, PURCHASE_ORDER_HEADER_2.PO_IN_USE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.WHSE_CHANGE_CODE == null) {
pstmt_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(26, PURCHASE_ORDER_HEADER_2.WHSE_CHANGE_CODE);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_VALID_PRICING_FLAG == null) {
pstmt_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(27, PURCHASE_ORDER_HEADER_2.PO_VALID_PRICING_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_TYPE == null) {
pstmt_tDBOutput_2.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(28, PURCHASE_ORDER_HEADER_2.PO_TYPE);
}

                    if(PURCHASE_ORDER_HEADER_2.DEMAND_STATUS == null) {
pstmt_tDBOutput_2.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(29, PURCHASE_ORDER_HEADER_2.DEMAND_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.BACKORDER_FLAG == null) {
pstmt_tDBOutput_2.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(30, PURCHASE_ORDER_HEADER_2.BACKORDER_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.PROC_BILLED_VENDOR_BILLED_FLAG == null) {
pstmt_tDBOutput_2.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(31, PURCHASE_ORDER_HEADER_2.PROC_BILLED_VENDOR_BILLED_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_INTER_COMPANY_STMT_FLAG == null) {
pstmt_tDBOutput_2.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(32, PURCHASE_ORDER_HEADER_2.FREIGHT_INTER_COMPANY_STMT_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.CONF_STATUS == null) {
pstmt_tDBOutput_2.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(33, PURCHASE_ORDER_HEADER_2.CONF_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_VALID_PRICING_APPROVAL == null) {
pstmt_tDBOutput_2.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(34, PURCHASE_ORDER_HEADER_2.PO_VALID_PRICING_APPROVAL);
}

                    if(PURCHASE_ORDER_HEADER_2.CONF_RECVD_FLAG == null) {
pstmt_tDBOutput_2.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(35, PURCHASE_ORDER_HEADER_2.CONF_RECVD_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.WHSE_STATUS == null) {
pstmt_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(36, PURCHASE_ORDER_HEADER_2.WHSE_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_CHANGED_FLAG == null) {
pstmt_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(37, PURCHASE_ORDER_HEADER_2.PO_CHANGED_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.PRINT_PRICE_ON_PO_FLAG == null) {
pstmt_tDBOutput_2.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(38, PURCHASE_ORDER_HEADER_2.PRINT_PRICE_ON_PO_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.UPDATE_LEAD_TIME_FLAG == null) {
pstmt_tDBOutput_2.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(39, PURCHASE_ORDER_HEADER_2.UPDATE_LEAD_TIME_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.PRICE_CHANGE_FLAG == null) {
pstmt_tDBOutput_2.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(40, PURCHASE_ORDER_HEADER_2.PRICE_CHANGE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.CARRIER_ID == null) {
pstmt_tDBOutput_2.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(41, PURCHASE_ORDER_HEADER_2.CARRIER_ID);
}

                    if(PURCHASE_ORDER_HEADER_2.REVISED_PROFORMA_FLAG == null) {
pstmt_tDBOutput_2.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(42, PURCHASE_ORDER_HEADER_2.REVISED_PROFORMA_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.PROFORMA_INPROCESS_FLAG == null) {
pstmt_tDBOutput_2.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(43, PURCHASE_ORDER_HEADER_2.PROFORMA_INPROCESS_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.TRANSMIT_TO == null) {
pstmt_tDBOutput_2.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(44, PURCHASE_ORDER_HEADER_2.TRANSMIT_TO);
}

                    if(PURCHASE_ORDER_HEADER_2.RETRANSMIT_TO_VENDOR_FLAG == null) {
pstmt_tDBOutput_2.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(45, PURCHASE_ORDER_HEADER_2.RETRANSMIT_TO_VENDOR_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.JOB_NO == null) {
pstmt_tDBOutput_2.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(46, PURCHASE_ORDER_HEADER_2.JOB_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.PAY_TO_VENDOR_NO == null) {
pstmt_tDBOutput_2.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(47, PURCHASE_ORDER_HEADER_2.PAY_TO_VENDOR_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_VENDOR == null) {
pstmt_tDBOutput_2.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(48, PURCHASE_ORDER_HEADER_2.FREIGHT_VENDOR);
}

                    if(PURCHASE_ORDER_HEADER_2.VENDOR_TERMS == null) {
pstmt_tDBOutput_2.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(49, PURCHASE_ORDER_HEADER_2.VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_VENDOR_TERMS == null) {
pstmt_tDBOutput_2.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(50, PURCHASE_ORDER_HEADER_2.FREIGHT_VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_HEADER_2.CONFIRMED_TERMS == null) {
pstmt_tDBOutput_2.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(51, PURCHASE_ORDER_HEADER_2.CONFIRMED_TERMS);
}

                    if(PURCHASE_ORDER_HEADER_2.CONFIRMED_FREIGHT_VENDOR_TERMS == null) {
pstmt_tDBOutput_2.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(52, PURCHASE_ORDER_HEADER_2.CONFIRMED_FREIGHT_VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_HEADER_2.TERMS_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_2.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(53, PURCHASE_ORDER_HEADER_2.TERMS_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_PLACED_WITH == null) {
pstmt_tDBOutput_2.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(54, PURCHASE_ORDER_HEADER_2.PO_PLACED_WITH);
}

                    if(PURCHASE_ORDER_HEADER_2.LOAD_CTRL_NO == null) {
pstmt_tDBOutput_2.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(55, PURCHASE_ORDER_HEADER_2.LOAD_CTRL_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_2.setTimestamp(56, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(56, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_2.setTimestamp(57, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(57, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_VENDOR_CONF_RECEIPT != null) {
pstmt_tDBOutput_2.setTimestamp(58, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_VENDOR_CONF_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(58, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_SHIP_PICKUP != null) {
pstmt_tDBOutput_2.setTimestamp(59, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_SHIP_PICKUP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(59, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_SHIP_PICKUP != null) {
pstmt_tDBOutput_2.setTimestamp(60, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_SHIP_PICKUP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(60, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.BUSINESS_ORDER_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(61, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.BUSINESS_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(61, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_ORDER_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(62, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(62, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_PO_NEEDED != null) {
pstmt_tDBOutput_2.setTimestamp(63, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_PO_NEEDED.getTime()));
} else {
pstmt_tDBOutput_2.setNull(63, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_PO_NEEDED != null) {
pstmt_tDBOutput_2.setTimestamp(64, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_PO_NEEDED.getTime()));
} else {
pstmt_tDBOutput_2.setNull(64, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_TRANSMISSION_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(65, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.PO_TRANSMISSION_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(65, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_PO_ACCEPTED != null) {
pstmt_tDBOutput_2.setTimestamp(66, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_PO_ACCEPTED.getTime()));
} else {
pstmt_tDBOutput_2.setNull(66, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_PO_ACCEPTED != null) {
pstmt_tDBOutput_2.setTimestamp(67, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_PO_ACCEPTED.getTime()));
} else {
pstmt_tDBOutput_2.setNull(67, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_ACTUAL_RECEIPT != null) {
pstmt_tDBOutput_2.setTimestamp(68, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.BUSINESS_DATE_ACTUAL_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(68, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_ACTUAL_RECEIPT != null) {
pstmt_tDBOutput_2.setTimestamp(69, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_DATE_ACTUAL_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(69, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(70, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_LOGISTICS_CONFIRMED_SHIP_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(70, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CALENDAR_VENDOR_CONF_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(71, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CALENDAR_VENDOR_CONF_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(71, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_2.setBigDecimal(72, PURCHASE_ORDER_HEADER_2.TOTAL_LINES);

                    pstmt_tDBOutput_2.setBigDecimal(73, PURCHASE_ORDER_HEADER_2.TOTAL_CASES);

                    pstmt_tDBOutput_2.setBigDecimal(74, PURCHASE_ORDER_HEADER_2.TOTAL_CUBE);

                    pstmt_tDBOutput_2.setBigDecimal(75, PURCHASE_ORDER_HEADER_2.TOTAL_NET_WGT);

                    pstmt_tDBOutput_2.setBigDecimal(76, PURCHASE_ORDER_HEADER_2.TOTAL_GROSS_WGT);

                    pstmt_tDBOutput_2.setBigDecimal(77, PURCHASE_ORDER_HEADER_2.TOTAL_VENDOR_PALLETS);

                    pstmt_tDBOutput_2.setBigDecimal(78, PURCHASE_ORDER_HEADER_2.TOTAL_VENDOR_UNITS);

                    pstmt_tDBOutput_2.setBigDecimal(79, PURCHASE_ORDER_HEADER_2.TOTAL_FOB_COST);

                    pstmt_tDBOutput_2.setBigDecimal(80, PURCHASE_ORDER_HEADER_2.TOTAL_FREIGHT_COST);

                    pstmt_tDBOutput_2.setBigDecimal(81, PURCHASE_ORDER_HEADER_2.TOTAL_AP_COST);

                    pstmt_tDBOutput_2.setBigDecimal(82, PURCHASE_ORDER_HEADER_2.TOTAL_PICKUP_ALLOW);

                    pstmt_tDBOutput_2.setBigDecimal(83, PURCHASE_ORDER_HEADER_2.TOTAL_PICKUP_ALLOW_RATE);

                    pstmt_tDBOutput_2.setBigDecimal(84, PURCHASE_ORDER_HEADER_2.PICKUP_ALLOW_TO_BRACKET);

                    pstmt_tDBOutput_2.setBigDecimal(85, PURCHASE_ORDER_HEADER_2.WHSE_UNLOAD_CHARGE);

                    if(PURCHASE_ORDER_HEADER_2.WHSE_UNLOAD_CHARGE_TYPE == null) {
pstmt_tDBOutput_2.setNull(86, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(86, PURCHASE_ORDER_HEADER_2.WHSE_UNLOAD_CHARGE_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(87, PURCHASE_ORDER_HEADER_2.ORIG_NON_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(88, PURCHASE_ORDER_HEADER_2.TOTAL_WHSE_PALLETS);

                    pstmt_tDBOutput_2.setBigDecimal(89, PURCHASE_ORDER_HEADER_2.CONFIRMED_FREIGHT_RATE);

                    if(PURCHASE_ORDER_HEADER_2.CONFIRMED_FREIGHT_RATE_TYPE == null) {
pstmt_tDBOutput_2.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(90, PURCHASE_ORDER_HEADER_2.CONFIRMED_FREIGHT_RATE_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(91, PURCHASE_ORDER_HEADER_2.CONFIRMED_UNLOADING_CHARGE);

                    if(PURCHASE_ORDER_HEADER_2.CONFIRMED_UNLOADING_CHRG_TYPE == null) {
pstmt_tDBOutput_2.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(92, PURCHASE_ORDER_HEADER_2.CONFIRMED_UNLOADING_CHRG_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(93, PURCHASE_ORDER_HEADER_2.CONFIRMED_PICKUP_ALLOW_RATE);

                    if(PURCHASE_ORDER_HEADER_2.CONFIRMED_PICKUP_ALLOW_TYPE == null) {
pstmt_tDBOutput_2.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(94, PURCHASE_ORDER_HEADER_2.CONFIRMED_PICKUP_ALLOW_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(95, PURCHASE_ORDER_HEADER_2.CONFIRMED_PICKUP_ALLOW_FROM_BRACKET);

                    pstmt_tDBOutput_2.setBigDecimal(96, PURCHASE_ORDER_HEADER_2.CONFIRMED_PICKUP_ALLOW_TO_BRACKET);

                    pstmt_tDBOutput_2.setBigDecimal(97, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_LINES);

                    pstmt_tDBOutput_2.setBigDecimal(98, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTA_CASES);

                    pstmt_tDBOutput_2.setBigDecimal(99, PURCHASE_ORDER_HEADER_2.CONFIMRED_TOTAL_CUBE);

                    pstmt_tDBOutput_2.setBigDecimal(100, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_NET_WGT);

                    pstmt_tDBOutput_2.setBigDecimal(101, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_GROSS_WGT);

                    pstmt_tDBOutput_2.setBigDecimal(102, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_VENDOR_PALLETS);

                    pstmt_tDBOutput_2.setBigDecimal(103, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_VENDOR_UNITS);

                    pstmt_tDBOutput_2.setBigDecimal(104, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_FOB_COST);

                    pstmt_tDBOutput_2.setBigDecimal(105, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_FREIGHT_COST);

                    pstmt_tDBOutput_2.setBigDecimal(106, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_AP_COST);

                    pstmt_tDBOutput_2.setBigDecimal(107, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_PICKUP_ALLOW);

                    pstmt_tDBOutput_2.setBigDecimal(108, PURCHASE_ORDER_HEADER_2.CONFIRMED_NON_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(109, PURCHASE_ORDER_HEADER_2.CONFIRMED_NON_DIST_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(110, PURCHASE_ORDER_HEADER_2.CONFIRMED_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(111, PURCHASE_ORDER_HEADER_2.CONFIRMED_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(112, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_UNLOADING_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(113, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_BRACKET_DIFF);

                    pstmt_tDBOutput_2.setBigDecimal(114, PURCHASE_ORDER_HEADER_2.CONFIRMED_TOTAL_WHSE_PALLETS);

                    if(PURCHASE_ORDER_HEADER_2.CONFIRMED_USER == null) {
pstmt_tDBOutput_2.setNull(115, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(115, PURCHASE_ORDER_HEADER_2.CONFIRMED_USER);
}

                    if(PURCHASE_ORDER_HEADER_2.VENDOR_CONF_NO == null) {
pstmt_tDBOutput_2.setNull(116, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(116, PURCHASE_ORDER_HEADER_2.VENDOR_CONF_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.VENDOR_CONF_METHOD == null) {
pstmt_tDBOutput_2.setNull(117, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(117, PURCHASE_ORDER_HEADER_2.VENDOR_CONF_METHOD);
}

                    pstmt_tDBOutput_2.setBigDecimal(118, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_LINES);

                    pstmt_tDBOutput_2.setBigDecimal(119, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_CASES);

                    pstmt_tDBOutput_2.setBigDecimal(120, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_CUBE);

                    pstmt_tDBOutput_2.setBigDecimal(121, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_NET_WGT);

                    pstmt_tDBOutput_2.setBigDecimal(122, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_GROSS_WGT);

                    pstmt_tDBOutput_2.setBigDecimal(123, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_VENDOR_PALLETS);

                    pstmt_tDBOutput_2.setBigDecimal(124, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_WHSE_PALLETS);

                    pstmt_tDBOutput_2.setBigDecimal(125, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_VENDOR_UNITS);

                    pstmt_tDBOutput_2.setBigDecimal(126, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_FOB_COST);

                    pstmt_tDBOutput_2.setBigDecimal(127, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_FREIGHT_COST);

                    pstmt_tDBOutput_2.setBigDecimal(128, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_AP_COST);

                    pstmt_tDBOutput_2.setBigDecimal(129, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_BRACKET_DIFF);

                    pstmt_tDBOutput_2.setBigDecimal(130, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_PICKUP_ALLOW);

                    pstmt_tDBOutput_2.setBigDecimal(131, PURCHASE_ORDER_HEADER_2.TOTAL_RECVD_UNLOADING_CHARGE);

                    if(PURCHASE_ORDER_HEADER_2.MERCH_PROFORMA_STATUS == null) {
pstmt_tDBOutput_2.setNull(132, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(132, PURCHASE_ORDER_HEADER_2.MERCH_PROFORMA_STATUS);
}

                    pstmt_tDBOutput_2.setBigDecimal(133, PURCHASE_ORDER_HEADER_2.MERCH_PROFORMA_NET_AMT);

                    pstmt_tDBOutput_2.setBigDecimal(134, PURCHASE_ORDER_HEADER_2.UNMATCHED_MERCH_PROFROMA_NET_AMT);

                    pstmt_tDBOutput_2.setBigDecimal(135, PURCHASE_ORDER_HEADER_2.MERCH_AMT_TO_BE_VOUCH);

                    if(PURCHASE_ORDER_HEADER_2.MERCH_MATCHED_STATUS == null) {
pstmt_tDBOutput_2.setNull(136, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(136, PURCHASE_ORDER_HEADER_2.MERCH_MATCHED_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.MERCH_VOUCH_STATUS == null) {
pstmt_tDBOutput_2.setNull(137, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(137, PURCHASE_ORDER_HEADER_2.MERCH_VOUCH_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.MERCH_PAID_STATUS == null) {
pstmt_tDBOutput_2.setNull(138, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(138, PURCHASE_ORDER_HEADER_2.MERCH_PAID_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.MERCH_PRICE_DIFF_HEADER_STATUS == null) {
pstmt_tDBOutput_2.setNull(139, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(139, PURCHASE_ORDER_HEADER_2.MERCH_PRICE_DIFF_HEADER_STATUS);
}

                    pstmt_tDBOutput_2.setBigDecimal(140, PURCHASE_ORDER_HEADER_2.MERCH_PRICE_DIFF_ERROR_LINE_COUNT);

                    if(PURCHASE_ORDER_HEADER_2.MERCH_QTY_DIFF_HEADER_STATUS == null) {
pstmt_tDBOutput_2.setNull(141, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(141, PURCHASE_ORDER_HEADER_2.MERCH_QTY_DIFF_HEADER_STATUS);
}

                    pstmt_tDBOutput_2.setBigDecimal(142, PURCHASE_ORDER_HEADER_2.MERCH_QTY_DIFF_ERROR_LINE_COUNT);

                    if(PURCHASE_ORDER_HEADER_2.MERCH_PAYMENT_DUE_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(143, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.MERCH_PAYMENT_DUE_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(143, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_2.setBigDecimal(144, PURCHASE_ORDER_HEADER_2.MERCH_CASH_DISC);

                    pstmt_tDBOutput_2.setBigDecimal(145, PURCHASE_ORDER_HEADER_2.MERCH_VOUCH_AMT);

                    pstmt_tDBOutput_2.setBigDecimal(146, PURCHASE_ORDER_HEADER_2.MERCH_ROUNDING_VAR);

                    if(PURCHASE_ORDER_HEADER_2.MERCH_INV_NO == null) {
pstmt_tDBOutput_2.setNull(147, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(147, PURCHASE_ORDER_HEADER_2.MERCH_INV_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.MERCH_INV_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(148, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.MERCH_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(148, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.MERCH_VENDOR_INTERCOM_BILLED_FLAG == null) {
pstmt_tDBOutput_2.setNull(149, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(149, PURCHASE_ORDER_HEADER_2.MERCH_VENDOR_INTERCOM_BILLED_FLAG);
}

                    pstmt_tDBOutput_2.setBigDecimal(150, PURCHASE_ORDER_HEADER_2.MERCH_VAR_AMT);

                    pstmt_tDBOutput_2.setBigDecimal(151, PURCHASE_ORDER_HEADER_2.MERCH_FREIGHT_AMT);

                    pstmt_tDBOutput_2.setBigDecimal(152, PURCHASE_ORDER_HEADER_2.FREIGHT_PROFORMA_NET_AMT);

                    pstmt_tDBOutput_2.setBigDecimal(153, PURCHASE_ORDER_HEADER_2.UNMATCHED_FREIGHT_PROFORMA_NET_AMT);

                    pstmt_tDBOutput_2.setBigDecimal(154, PURCHASE_ORDER_HEADER_2.FREIGHT_AMT_TO_BE_VOUCH);

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_MATCHED_STATUS == null) {
pstmt_tDBOutput_2.setNull(155, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(155, PURCHASE_ORDER_HEADER_2.FREIGHT_MATCHED_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_VOUCH_STATUS == null) {
pstmt_tDBOutput_2.setNull(156, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(156, PURCHASE_ORDER_HEADER_2.FREIGHT_VOUCH_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_PAID_STATUS == null) {
pstmt_tDBOutput_2.setNull(157, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(157, PURCHASE_ORDER_HEADER_2.FREIGHT_PAID_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_DIFF_HEADER_STATUS == null) {
pstmt_tDBOutput_2.setNull(158, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(158, PURCHASE_ORDER_HEADER_2.FREIGHT_DIFF_HEADER_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_PAYMENT_DUE_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(159, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.FREIGHT_PAYMENT_DUE_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(159, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_CLAIM_STATUS == null) {
pstmt_tDBOutput_2.setNull(160, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(160, PURCHASE_ORDER_HEADER_2.FREIGHT_CLAIM_STATUS);
}

                    pstmt_tDBOutput_2.setBigDecimal(161, PURCHASE_ORDER_HEADER_2.FREIGHT_CASH_DISC);

                    pstmt_tDBOutput_2.setBigDecimal(162, PURCHASE_ORDER_HEADER_2.FREIGHT_VARIANCE_AMT);

                    pstmt_tDBOutput_2.setBigDecimal(163, PURCHASE_ORDER_HEADER_2.FREIGHT_VOUCH_AMT);

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_INV_NO == null) {
pstmt_tDBOutput_2.setNull(164, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(164, PURCHASE_ORDER_HEADER_2.FREIGHT_INV_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_INV_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(165, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.FREIGHT_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(165, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG == null) {
pstmt_tDBOutput_2.setNull(166, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(166, PURCHASE_ORDER_HEADER_2.FREIGHT_VENDOR_INTERCOM_BILLED_FLAG);
}

                    pstmt_tDBOutput_2.setBigDecimal(167, PURCHASE_ORDER_HEADER_2.TOTAL_VENDOR_SHORT_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(168, PURCHASE_ORDER_HEADER_2.TOTAL_CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(169, PURCHASE_ORDER_HEADER_2.TOTAL_DAMAGED_ACCEPTED_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(170, PURCHASE_ORDER_HEADER_2.FREIGHT_PAID_AMOUNT);

                    if(PURCHASE_ORDER_HEADER_2.SHIP_TO_CUST == null) {
pstmt_tDBOutput_2.setNull(171, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(171, PURCHASE_ORDER_HEADER_2.SHIP_TO_CUST);
}

                    pstmt_tDBOutput_2.setBigDecimal(172, PURCHASE_ORDER_HEADER_2.CUST_ORDER_NO);

                    if(PURCHASE_ORDER_HEADER_2.SHIP_FROM_NAME == null) {
pstmt_tDBOutput_2.setNull(173, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(173, PURCHASE_ORDER_HEADER_2.SHIP_FROM_NAME);
}

                    if(PURCHASE_ORDER_HEADER_2.SHIPPING_ADDRESS_ID == null) {
pstmt_tDBOutput_2.setNull(174, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(174, PURCHASE_ORDER_HEADER_2.SHIPPING_ADDRESS_ID);
}

                    if(PURCHASE_ORDER_HEADER_2.RESERVED_RE_RECOMMEND_FLAG == null) {
pstmt_tDBOutput_2.setNull(175, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(175, PURCHASE_ORDER_HEADER_2.RESERVED_RE_RECOMMEND_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.RECOMMENDED_ORDER_FLAG == null) {
pstmt_tDBOutput_2.setNull(176, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(176, PURCHASE_ORDER_HEADER_2.RECOMMENDED_ORDER_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.FAILED_SCORECARD_FLAG == null) {
pstmt_tDBOutput_2.setNull(177, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(177, PURCHASE_ORDER_HEADER_2.FAILED_SCORECARD_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_2.setNull(178, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(178, PURCHASE_ORDER_HEADER_2.VENDOR_MAX_DAYS_SUPPLY_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.PRICE_BRACKET_SOURCE_CODE == null) {
pstmt_tDBOutput_2.setNull(179, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(179, PURCHASE_ORDER_HEADER_2.PRICE_BRACKET_SOURCE_CODE);
}

                    pstmt_tDBOutput_2.setBigDecimal(180, PURCHASE_ORDER_HEADER_2.SHORT_PERCENT_TO_BACKORDER);

                    if(PURCHASE_ORDER_HEADER_2.SECONDARY_PO_TYPE == null) {
pstmt_tDBOutput_2.setNull(181, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(181, PURCHASE_ORDER_HEADER_2.SECONDARY_PO_TYPE);
}

                    if(PURCHASE_ORDER_HEADER_2.TRANSMIT_FLAG == null) {
pstmt_tDBOutput_2.setNull(182, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(182, PURCHASE_ORDER_HEADER_2.TRANSMIT_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.TRANSMIT_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(183, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.TRANSMIT_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(183, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_ERROR_IND == null) {
pstmt_tDBOutput_2.setNull(184, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(184, PURCHASE_ORDER_HEADER_2.PO_ERROR_IND);
}

                    if(PURCHASE_ORDER_HEADER_2.STOCK_IND == null) {
pstmt_tDBOutput_2.setNull(185, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(185, PURCHASE_ORDER_HEADER_2.STOCK_IND);
}

                    if(PURCHASE_ORDER_HEADER_2.PO_CLOSE_TIME != null) {
pstmt_tDBOutput_2.setTimestamp(186, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.PO_CLOSE_TIME.getTime()));
} else {
pstmt_tDBOutput_2.setNull(186, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.REPLENISHMENT_SYSTEM == null) {
pstmt_tDBOutput_2.setNull(187, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(187, PURCHASE_ORDER_HEADER_2.REPLENISHMENT_SYSTEM);
}

                    if(PURCHASE_ORDER_HEADER_2.SHIPMENT_NOTICE_NO == null) {
pstmt_tDBOutput_2.setNull(188, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(188, PURCHASE_ORDER_HEADER_2.SHIPMENT_NOTICE_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_PROFORMA_STATUS == null) {
pstmt_tDBOutput_2.setNull(189, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(189, PURCHASE_ORDER_HEADER_2.FREIGHT_PROFORMA_STATUS);
}

                    if(PURCHASE_ORDER_HEADER_2.SHIPMENT_ID == null) {
pstmt_tDBOutput_2.setNull(190, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(190, PURCHASE_ORDER_HEADER_2.SHIPMENT_ID);
}

                    if(PURCHASE_ORDER_HEADER_2.FREIGHT_PROCESS_FLAG == null) {
pstmt_tDBOutput_2.setNull(191, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(191, PURCHASE_ORDER_HEADER_2.FREIGHT_PROCESS_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.ORIG_PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_2.setNull(192, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(192, PURCHASE_ORDER_HEADER_2.ORIG_PURCHASE_ORDER_NO);
}

                    if(PURCHASE_ORDER_HEADER_2.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(193, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(193, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.CREATED_USER_ID == null) {
pstmt_tDBOutput_2.setNull(194, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(194, PURCHASE_ORDER_HEADER_2.CREATED_USER_ID);
}

                    if(PURCHASE_ORDER_HEADER_2.IS_ACTIVE == null) {
pstmt_tDBOutput_2.setNull(195, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_2.setBoolean(195, PURCHASE_ORDER_HEADER_2.IS_ACTIVE);
}

                    if(PURCHASE_ORDER_HEADER_2.V3PF_SVOP == null) {
pstmt_tDBOutput_2.setNull(196, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(196, PURCHASE_ORDER_HEADER_2.V3PF_SVOP);
}

                    if(PURCHASE_ORDER_HEADER_2.CONFERENCE_TYPE == null) {
pstmt_tDBOutput_2.setNull(197, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(197, PURCHASE_ORDER_HEADER_2.CONFERENCE_TYPE);
}

                    if(PURCHASE_ORDER_HEADER_2.NEXT_CONF_RECVD_FLAG == null) {
pstmt_tDBOutput_2.setNull(198, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(198, PURCHASE_ORDER_HEADER_2.NEXT_CONF_RECVD_FLAG);
}

                    if(PURCHASE_ORDER_HEADER_2.VENDOR == null) {
pstmt_tDBOutput_2.setNull(199, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(199, PURCHASE_ORDER_HEADER_2.VENDOR);
}

                    if(PURCHASE_ORDER_HEADER_2.UPDATED_USER_ID == null) {
pstmt_tDBOutput_2.setNull(200, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(200, PURCHASE_ORDER_HEADER_2.UPDATED_USER_ID);
}

                    if(PURCHASE_ORDER_HEADER_2.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_2.setNull(201, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(201, PURCHASE_ORDER_HEADER_2.UPDATED_PROGRAM_ID);
}

                    if(PURCHASE_ORDER_HEADER_2.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(202, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(202, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.IS_DELETED == null) {
pstmt_tDBOutput_2.setNull(203, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_2.setBoolean(203, PURCHASE_ORDER_HEADER_2.IS_DELETED);
}

                    if(PURCHASE_ORDER_HEADER_2.CREATED_ORIGIN == null) {
pstmt_tDBOutput_2.setNull(204, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(204, PURCHASE_ORDER_HEADER_2.CREATED_ORIGIN);
}

                    if(PURCHASE_ORDER_HEADER_2.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(205, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(205, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_2.setNull(206, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(206, PURCHASE_ORDER_HEADER_2.UPDATED_ORIGIN);
}

                    if(PURCHASE_ORDER_HEADER_2.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(207, new java.sql.Timestamp(PURCHASE_ORDER_HEADER_2.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(207, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_HEADER_2.PICKUP_ALLOWANCE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_2.setNull(208, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(208, PURCHASE_ORDER_HEADER_2.PICKUP_ALLOWANCE_OVERRIDE_FLAG);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Adding the record ")  + (nb_line_tDBOutput_2)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_2)  + (" record(s).") );
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "PURCHASE_ORDER_HEADER_2"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
	    		log.debug("tDBInput_2 - Closing the connection to the database.");
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_2 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
	    		log.debug("tDBInput_2 - Retrieved records count: "+nb_line_tDBInput_2 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_2 - "  + ("Done.") );

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_2", end_Hash.get("tDBInput_2")-start_Hash.get("tDBInput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_5 - Written records count in the table 'PURCHASE_ORDER_HEADER_2': " + count_PURCHASE_ORDER_HEADER_2_tMap_5 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_5 - "  + ("Done.") );

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
            log.error("tDBOutput_2 - "  + (errormessage_tDBOutput_2) );
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_2)  + (" record(s).") );
			}
			conn_tDBOutput_2.commit();
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_2 = 0;
			}
			commitCounter_tDBOutput_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_2 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_2)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PURCHASE_ORDER_HEADER_2");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Done.") );

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_2", end_Hash.get("tDBOutput_2")-start_Hash.get("tDBOutput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_2.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_2 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
            log.error("tDBOutput_2 - "  + (errorMessage_tDBOutput_2) );
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Purchase_Order_Header_Inbound Purchase_Order_Header_InboundClass = new Purchase_Order_Header_Inbound();

        int exitCode = Purchase_Order_Header_InboundClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'Purchase_Order_Header_Inbound' - Done.");
	        }

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
    	    }
        	log.info("TalendJob: 'Purchase_Order_Header_Inbound' - Start.");
    	
    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Purchase_Order_Header_Inbound.class.getClassLoader().getResourceAsStream("sus_sli_etl/purchase_order_header_inbound_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Purchase_Order_Header_Inbound.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("opco", "id_String");
                        if(context.getStringValue("opco") == null) {
                            context.opco = null;
                        } else {
                            context.opco=(String) context.getProperty("opco");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("sopco", "id_String");
                        if(context.getStringValue("sopco") == null) {
                            context.sopco = null;
                        } else {
                            context.sopco=(String) context.getProperty("sopco");
                        }
                        context.setContextType("svop", "id_String");
                        if(context.getStringValue("svop") == null) {
                            context.svop = null;
                        } else {
                            context.svop=(String) context.getProperty("svop");
                        }
                        context.setContextType("GIM_AdditionalParams", "id_String");
                        if(context.getStringValue("GIM_AdditionalParams") == null) {
                            context.GIM_AdditionalParams = null;
                        } else {
                            context.GIM_AdditionalParams=(String) context.getProperty("GIM_AdditionalParams");
                        }
                        context.setContextType("GIM_Database", "id_String");
                        if(context.getStringValue("GIM_Database") == null) {
                            context.GIM_Database = null;
                        } else {
                            context.GIM_Database=(String) context.getProperty("GIM_Database");
                        }
                        context.setContextType("GIM_Login", "id_String");
                        if(context.getStringValue("GIM_Login") == null) {
                            context.GIM_Login = null;
                        } else {
                            context.GIM_Login=(String) context.getProperty("GIM_Login");
                        }
                        context.setContextType("GIM_Password", "id_Password");
                        if(context.getStringValue("GIM_Password") == null) {
                            context.GIM_Password = null;
                        } else {
                            String pwd_GIM_Password_value = context.getProperty("GIM_Password");
                            context.GIM_Password = null;
                            if(pwd_GIM_Password_value!=null) {
                                if(context_param.containsKey("GIM_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.GIM_Password = pwd_GIM_Password_value;
                                } else if (!pwd_GIM_Password_value.isEmpty()) {
                                    try {
                                        context.GIM_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_GIM_Password_value);
                                        context.put("GIM_Password",context.GIM_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("GIM_Port", "id_String");
                        if(context.getStringValue("GIM_Port") == null) {
                            context.GIM_Port = null;
                        } else {
                            context.GIM_Port=(String) context.getProperty("GIM_Port");
                        }
                        context.setContextType("GIM_Schema_Demand", "id_String");
                        if(context.getStringValue("GIM_Schema_Demand") == null) {
                            context.GIM_Schema_Demand = null;
                        } else {
                            context.GIM_Schema_Demand=(String) context.getProperty("GIM_Schema_Demand");
                        }
                        context.setContextType("GIM_Schema_Inventory", "id_String");
                        if(context.getStringValue("GIM_Schema_Inventory") == null) {
                            context.GIM_Schema_Inventory = null;
                        } else {
                            context.GIM_Schema_Inventory=(String) context.getProperty("GIM_Schema_Inventory");
                        }
                        context.setContextType("GIM_Schema_Master", "id_String");
                        if(context.getStringValue("GIM_Schema_Master") == null) {
                            context.GIM_Schema_Master = null;
                        } else {
                            context.GIM_Schema_Master=(String) context.getProperty("GIM_Schema_Master");
                        }
                        context.setContextType("GIM_Schema_Migrating_Test", "id_String");
                        if(context.getStringValue("GIM_Schema_Migrating_Test") == null) {
                            context.GIM_Schema_Migrating_Test = null;
                        } else {
                            context.GIM_Schema_Migrating_Test=(String) context.getProperty("GIM_Schema_Migrating_Test");
                        }
                        context.setContextType("GIM_Schema_Order_Processing", "id_String");
                        if(context.getStringValue("GIM_Schema_Order_Processing") == null) {
                            context.GIM_Schema_Order_Processing = null;
                        } else {
                            context.GIM_Schema_Order_Processing=(String) context.getProperty("GIM_Schema_Order_Processing");
                        }
                        context.setContextType("GIM_Schema_PO", "id_String");
                        if(context.getStringValue("GIM_Schema_PO") == null) {
                            context.GIM_Schema_PO = null;
                        } else {
                            context.GIM_Schema_PO=(String) context.getProperty("GIM_Schema_PO");
                        }
                        context.setContextType("GIM_Schema_System", "id_String");
                        if(context.getStringValue("GIM_Schema_System") == null) {
                            context.GIM_Schema_System = null;
                        } else {
                            context.GIM_Schema_System=(String) context.getProperty("GIM_Schema_System");
                        }
                        context.setContextType("GIM_Server", "id_String");
                        if(context.getStringValue("GIM_Server") == null) {
                            context.GIM_Server = null;
                        } else {
                            context.GIM_Server=(String) context.getProperty("GIM_Server");
                        }
                        context.setContextType("SUS_Additional_Params", "id_String");
                        if(context.getStringValue("SUS_Additional_Params") == null) {
                            context.SUS_Additional_Params = null;
                        } else {
                            context.SUS_Additional_Params=(String) context.getProperty("SUS_Additional_Params");
                        }
                        context.setContextType("SUS_Database", "id_String");
                        if(context.getStringValue("SUS_Database") == null) {
                            context.SUS_Database = null;
                        } else {
                            context.SUS_Database=(String) context.getProperty("SUS_Database");
                        }
                        context.setContextType("SUS_Login", "id_String");
                        if(context.getStringValue("SUS_Login") == null) {
                            context.SUS_Login = null;
                        } else {
                            context.SUS_Login=(String) context.getProperty("SUS_Login");
                        }
                        context.setContextType("SUS_Password", "id_Password");
                        if(context.getStringValue("SUS_Password") == null) {
                            context.SUS_Password = null;
                        } else {
                            String pwd_SUS_Password_value = context.getProperty("SUS_Password");
                            context.SUS_Password = null;
                            if(pwd_SUS_Password_value!=null) {
                                if(context_param.containsKey("SUS_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SUS_Password = pwd_SUS_Password_value;
                                } else if (!pwd_SUS_Password_value.isEmpty()) {
                                    try {
                                        context.SUS_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SUS_Password_value);
                                        context.put("SUS_Password",context.SUS_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SUS_Server", "id_String");
                        if(context.getStringValue("SUS_Server") == null) {
                            context.SUS_Server = null;
                        } else {
                            context.SUS_Server=(String) context.getProperty("SUS_Server");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("opco")) {
                context.opco = (String) parentContextMap.get("opco");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("sopco")) {
                context.sopco = (String) parentContextMap.get("sopco");
            }if (parentContextMap.containsKey("svop")) {
                context.svop = (String) parentContextMap.get("svop");
            }if (parentContextMap.containsKey("GIM_AdditionalParams")) {
                context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
            }if (parentContextMap.containsKey("GIM_Database")) {
                context.GIM_Database = (String) parentContextMap.get("GIM_Database");
            }if (parentContextMap.containsKey("GIM_Login")) {
                context.GIM_Login = (String) parentContextMap.get("GIM_Login");
            }if (parentContextMap.containsKey("GIM_Password")) {
                context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
            }if (parentContextMap.containsKey("GIM_Port")) {
                context.GIM_Port = (String) parentContextMap.get("GIM_Port");
            }if (parentContextMap.containsKey("GIM_Schema_Demand")) {
                context.GIM_Schema_Demand = (String) parentContextMap.get("GIM_Schema_Demand");
            }if (parentContextMap.containsKey("GIM_Schema_Inventory")) {
                context.GIM_Schema_Inventory = (String) parentContextMap.get("GIM_Schema_Inventory");
            }if (parentContextMap.containsKey("GIM_Schema_Master")) {
                context.GIM_Schema_Master = (String) parentContextMap.get("GIM_Schema_Master");
            }if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
                context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
            }if (parentContextMap.containsKey("GIM_Schema_Order_Processing")) {
                context.GIM_Schema_Order_Processing = (String) parentContextMap.get("GIM_Schema_Order_Processing");
            }if (parentContextMap.containsKey("GIM_Schema_PO")) {
                context.GIM_Schema_PO = (String) parentContextMap.get("GIM_Schema_PO");
            }if (parentContextMap.containsKey("GIM_Schema_System")) {
                context.GIM_Schema_System = (String) parentContextMap.get("GIM_Schema_System");
            }if (parentContextMap.containsKey("GIM_Server")) {
                context.GIM_Server = (String) parentContextMap.get("GIM_Server");
            }if (parentContextMap.containsKey("SUS_Additional_Params")) {
                context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
            }if (parentContextMap.containsKey("SUS_Database")) {
                context.SUS_Database = (String) parentContextMap.get("SUS_Database");
            }if (parentContextMap.containsKey("SUS_Login")) {
                context.SUS_Login = (String) parentContextMap.get("SUS_Login");
            }if (parentContextMap.containsKey("SUS_Password")) {
                context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
            }if (parentContextMap.containsKey("SUS_Server")) {
                context.SUS_Server = (String) parentContextMap.get("SUS_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("GIM_Password");
			parametersToEncrypt.add("SUS_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Purchase_Order_Header_Inbound");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1201256 characters generated by Talend Open Studio for Data Integration 
 *     on the October 28, 2022 at 10:58:09 AM IST
 ************************************************************************************************/