// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sus_sli_etl.customer_ship_to_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Customer_Ship_To_Inbound Purpose: Migrating data from USCBJOPF to CUSTOMER_SHIP_TO<br>
 * Description: Migrating data from USCBJOPF to CUSTOMER_SHIP_TO <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Customer_Ship_To_Inbound implements TalendJob {
	static {System.setProperty("TalendJob.log", "Customer_Ship_To_Inbound.log");}

	

	
	private static org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(Customer_Ship_To_Inbound.class);
	

protected static void logIgnoredError(String message, Throwable cause) {
       log.error(message, cause);

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(opco != null){
				
					this.setProperty("opco", opco.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(sopco != null){
				
					this.setProperty("sopco", sopco.toString());
				
			}
			
			if(svop != null){
				
					this.setProperty("svop", svop.toString());
				
			}
			
			if(GIM_AdditionalParams != null){
				
					this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());
				
			}
			
			if(GIM_Database != null){
				
					this.setProperty("GIM_Database", GIM_Database.toString());
				
			}
			
			if(GIM_Login != null){
				
					this.setProperty("GIM_Login", GIM_Login.toString());
				
			}
			
			if(GIM_Password != null){
				
					this.setProperty("GIM_Password", GIM_Password.toString());
				
			}
			
			if(GIM_Port != null){
				
					this.setProperty("GIM_Port", GIM_Port.toString());
				
			}
			
			if(GIM_Schema_Migrating_Test != null){
				
					this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());
				
			}
			
			if(GIM_Server != null){
				
					this.setProperty("GIM_Server", GIM_Server.toString());
				
			}
			
			if(SUS_Additional_Params != null){
				
					this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());
				
			}
			
			if(SUS_Database != null){
				
					this.setProperty("SUS_Database", SUS_Database.toString());
				
			}
			
			if(SUS_Login != null){
				
					this.setProperty("SUS_Login", SUS_Login.toString());
				
			}
			
			if(SUS_Password != null){
				
					this.setProperty("SUS_Password", SUS_Password.toString());
				
			}
			
			if(SUS_Server != null){
				
					this.setProperty("SUS_Server", SUS_Server.toString());
				
			}
			
			if(GIM_Schema_Master != null){
				
					this.setProperty("GIM_Schema_Master", GIM_Schema_Master.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String opco;
public String getOpco(){
	return this.opco;
}
public String server;
public String getServer(){
	return this.server;
}
public String sopco;
public String getSopco(){
	return this.sopco;
}
public String svop;
public String getSvop(){
	return this.svop;
}
public String GIM_AdditionalParams;
public String getGIM_AdditionalParams(){
	return this.GIM_AdditionalParams;
}
public String GIM_Database;
public String getGIM_Database(){
	return this.GIM_Database;
}
public String GIM_Login;
public String getGIM_Login(){
	return this.GIM_Login;
}
public java.lang.String GIM_Password;
public java.lang.String getGIM_Password(){
	return this.GIM_Password;
}
public String GIM_Port;
public String getGIM_Port(){
	return this.GIM_Port;
}
public String GIM_Schema_Migrating_Test;
public String getGIM_Schema_Migrating_Test(){
	return this.GIM_Schema_Migrating_Test;
}
public String GIM_Server;
public String getGIM_Server(){
	return this.GIM_Server;
}
public String SUS_Additional_Params;
public String getSUS_Additional_Params(){
	return this.SUS_Additional_Params;
}
public String SUS_Database;
public String getSUS_Database(){
	return this.SUS_Database;
}
public String SUS_Login;
public String getSUS_Login(){
	return this.SUS_Login;
}
public java.lang.String SUS_Password;
public java.lang.String getSUS_Password(){
	return this.SUS_Password;
}
public String SUS_Server;
public String getSUS_Server(){
	return this.SUS_Server;
}
public String GIM_Schema_Master;
public String getGIM_Schema_Master(){
	return this.GIM_Schema_Master;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Customer_Ship_To_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_PdscoANqEe2mdNKMHGUS9Q", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_PdscoANqEe2mdNKMHGUS9Q", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Customer_Ship_To_Inbound.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Customer_Ship_To_Inbound.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class Main_StatStruct implements routines.system.IPersistableRow<Main_StatStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_StatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message_type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message_type);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(duration == null){
        					sb.append("<null>");
        				}else{
            				sb.append(duration);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
Main_StatStruct Main_Stat = new Main_StatStruct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Stat");
					}
				
		int tos_count_tLogRow_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_2 = new StringBuilder();
                    log4jParamters_tLogRow_2.append("Parameters:");
                            log4jParamters_tLogRow_2.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_2.append(" | ");
                            log4jParamters_tLogRow_2.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + (log4jParamters_tLogRow_2) );
                    } 
                } 
            new BytesLimit65535_tLogRow_2().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[7];

        public void addRow(String[] row) {

            for (int i = 0; i < 7; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 6 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 6 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[6] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"moment","pid","job","origin","message_type","message","duration",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_2{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_2 = new StringBuilder();
                    log4jParamters_tMap_2.append("Parameters:");
                            log4jParamters_tMap_2.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_2.append(" | ");
                            log4jParamters_tMap_2.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_2.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + (log4jParamters_tMap_2) );
                    } 
                } 
            new BytesLimit65535_tMap_2().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row4_tMap_2 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Stat_tMap_2 = 0;
				
Main_StatStruct Main_Stat_tmp = new Main_StatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tStatCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tStatCatcher_1 = new StringBuilder();
                    log4jParamters_tStatCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + (log4jParamters_tStatCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tStatCatcher_1().limitLog4jByte();
            }

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row4.pid = pid;
		row4.root_pid = rootPid;
		row4.father_pid = fatherPid;	
    	row4.project = projectName;
    	row4.job = jobName;
    	row4.context = contextStr;
		row4.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row4.message = scm.getMessage();
		row4.duration = scm.getDuration();
		row4.moment = scm.getMoment();
		row4.message_type = scm.getMessageType();
		row4.job_version = scm.getJobVersion();
		row4.job_repository_id = scm.getJobId();
		row4.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row4 - " + (row4==null? "": row4.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Main_Stat = null;


// # Output table : 'Main_Stat'
count_Main_Stat_tMap_2++;

Main_Stat_tmp.moment = row4.moment;
Main_Stat_tmp.pid = row4.pid;
Main_Stat_tmp.job = row4.job;
Main_Stat_tmp.origin = row4.origin;
Main_Stat_tmp.message_type = row4.message_type;
Main_Stat_tmp.message = row4.message;
Main_Stat_tmp.duration = row4.duration ;
Main_Stat = Main_Stat_tmp;
log.debug("tMap_2 - Outputting the record " + count_Main_Stat_tMap_2 + " of the output table 'Main_Stat'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Main_Stat"
if(Main_Stat != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Stat"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Stat - " + (Main_Stat==null? "": Main_Stat.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[7];
   				
	    		if(Main_Stat.moment != null) { //              
                 row_tLogRow_2[0]=    						
								FormatterUtils.format_Date(Main_Stat.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.pid != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(Main_Stat.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.job != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(Main_Stat.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.origin != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(Main_Stat.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message_type != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(Main_Stat.message_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(Main_Stat.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.duration != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(Main_Stat.duration)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
                	log.info("tLogRow_2 - Content of row "+nb_line_tLogRow_2+": " + TalendString.unionString("|",row_tLogRow_2));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "Main_Stat"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tStatCatcher_1 - "  + ("Done.") );

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_2 - Written records count in the table 'Main_Stat': " + count_Main_Stat_tMap_2 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_2 - "  + ("Done.") );

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);
                if(log.isInfoEnabled())
            log.info("tLogRow_2 - "  + ("Printed row count: ")  + (nb_line_tLogRow_2)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Stat");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_2 - "  + ("Done.") );

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_LogStruct implements routines.system.IPersistableRow<Main_LogStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_LogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(priority == null){
        					sb.append("<null>");
        				}else{
            				sb.append(priority);
            			}
            		
        			sb.append("|");
        		
        				if(type == null){
        					sb.append("<null>");
        				}else{
            				sb.append(type);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(message == null){
        					sb.append("<null>");
        				}else{
            				sb.append(message);
            			}
            		
        			sb.append("|");
        		
        				if(code == null){
        					sb.append("<null>");
        				}else{
            				sb.append(code);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
Main_LogStruct Main_Log = new Main_LogStruct();





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Log");
					}
				
		int tos_count_tLogRow_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_3 = new StringBuilder();
                    log4jParamters_tLogRow_3.append("Parameters:");
                            log4jParamters_tLogRow_3.append("BASIC_MODE" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("TABLE_PRINT" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("FIELDSEPARATOR" + " = " + "\"|\"");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_HEADER" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_UNIQUE_NAME" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_COLNAMES" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("USE_FIXED_LENGTH" + " = " + "false");
                        log4jParamters_tLogRow_3.append(" | ");
                            log4jParamters_tLogRow_3.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + (log4jParamters_tLogRow_3) );
                    } 
                } 
            new BytesLimit65535_tLogRow_3().limitLog4jByte();
            }

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_3{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_3 = new StringBuilder();
                    log4jParamters_tMap_3.append("Parameters:");
                            log4jParamters_tMap_3.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_3.append(" | ");
                            log4jParamters_tMap_3.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_3.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + (log4jParamters_tMap_3) );
                    } 
                } 
            new BytesLimit65535_tMap_3().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row5_tMap_3 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Log_tMap_3 = 0;
				
Main_LogStruct Main_Log_tmp = new Main_LogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogCatcher_1 = new StringBuilder();
                    log4jParamters_tLogCatcher_1.append("Parameters:");
                            log4jParamters_tLogCatcher_1.append("CATCH_JAVA_EXCEPTION" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TDIE" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                            log4jParamters_tLogCatcher_1.append("CATCH_TWARN" + " = " + "true");
                        log4jParamters_tLogCatcher_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + (log4jParamters_tLogCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tLogCatcher_1().limitLog4jByte();
            }

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row5.type = lcm.getType();
		row5.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row5.priority = lcm.getPriority();
		row5.message = lcm.getMessage();
		row5.code = lcm.getCode();
		
		row5.moment = java.util.Calendar.getInstance().getTime();
	
    	row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;
	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row5 - " + (row5==null? "": row5.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Main_Log = null;


// # Output table : 'Main_Log'
count_Main_Log_tMap_3++;

Main_Log_tmp.moment = row5.moment ;
Main_Log_tmp.pid = row5.pid ;
Main_Log_tmp.job = row5.job ;
Main_Log_tmp.type = row5.type ;
Main_Log_tmp.origin = row5.origin ;
Main_Log_tmp.message = row5.message ;
Main_Log = Main_Log_tmp;
log.debug("tMap_3 - Outputting the record " + count_Main_Log_tMap_3 + " of the output table 'Main_Log'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Main_Log"
if(Main_Log != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Log"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Log - " + (Main_Log==null? "": Main_Log.toLogString()));
    			}
    		
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(Main_Log.moment != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
								FormatterUtils.format_Date(Main_Log.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.job != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.type != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.origin != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.message != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    	log.info("tLogRow_3 - Content of row "+(nb_line_tLogRow_3+1)+": " + strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "Main_Log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 
                if(log.isDebugEnabled())
            log.debug("tLogCatcher_1 - "  + ("Done.") );

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_3 - Written records count in the table 'Main_Log': " + count_Main_Log_tMap_3 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_3 - "  + ("Done.") );

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);
                if(log.isInfoEnabled())
            log.info("tLogRow_3 - "  + ("Printed row count: ")  + (nb_line_tLogRow_3)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Log");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_3 - "  + ("Done.") );

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_Flow_MeterStruct implements routines.system.IPersistableRow<Main_Flow_MeterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(Main_Flow_MeterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(moment == null){
        					sb.append("<null>");
        				}else{
            				sb.append(moment);
            			}
            		
        			sb.append("|");
        		
        				if(pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(pid);
            			}
            		
        			sb.append("|");
        		
        				if(father_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(father_pid);
            			}
            		
        			sb.append("|");
        		
        				if(root_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(root_pid);
            			}
            		
        			sb.append("|");
        		
        				if(system_pid == null){
        					sb.append("<null>");
        				}else{
            				sb.append(system_pid);
            			}
            		
        			sb.append("|");
        		
        				if(project == null){
        					sb.append("<null>");
        				}else{
            				sb.append(project);
            			}
            		
        			sb.append("|");
        		
        				if(job == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job);
            			}
            		
        			sb.append("|");
        		
        				if(job_repository_id == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_repository_id);
            			}
            		
        			sb.append("|");
        		
        				if(job_version == null){
        					sb.append("<null>");
        				}else{
            				sb.append(job_version);
            			}
            		
        			sb.append("|");
        		
        				if(context == null){
        					sb.append("<null>");
        				}else{
            				sb.append(context);
            			}
            		
        			sb.append("|");
        		
        				if(origin == null){
        					sb.append("<null>");
        				}else{
            				sb.append(origin);
            			}
            		
        			sb.append("|");
        		
        				if(label == null){
        					sb.append("<null>");
        				}else{
            				sb.append(label);
            			}
            		
        			sb.append("|");
        		
        				if(count == null){
        					sb.append("<null>");
        				}else{
            				sb.append(count);
            			}
            		
        			sb.append("|");
        		
        				if(reference == null){
        					sb.append("<null>");
        				}else{
            				sb.append(reference);
            			}
            		
        			sb.append("|");
        		
        				if(thresholds == null){
        					sb.append("<null>");
        				}else{
            				sb.append(thresholds);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();
Main_Flow_MeterStruct Main_Flow_Meter = new Main_Flow_MeterStruct();





	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Flow_Meter");
					}
				
		int tos_count_tLogRow_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tLogRow_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tLogRow_4 = new StringBuilder();
                    log4jParamters_tLogRow_4.append("Parameters:");
                            log4jParamters_tLogRow_4.append("BASIC_MODE" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("TABLE_PRINT" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("VERTICAL" + " = " + "false");
                        log4jParamters_tLogRow_4.append(" | ");
                            log4jParamters_tLogRow_4.append("PRINT_CONTENT_WITH_LOG4J" + " = " + "true");
                        log4jParamters_tLogRow_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + (log4jParamters_tLogRow_4) );
                    } 
                } 
            new BytesLimit65535_tLogRow_4().limitLog4jByte();
            }

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("tLogRow_4");
        util_tLogRow_4.addRow(new String[]{"moment","pid","job","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tMap_4 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_4{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_4 = new StringBuilder();
                    log4jParamters_tMap_4.append("Parameters:");
                            log4jParamters_tMap_4.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_4.append(" | ");
                            log4jParamters_tMap_4.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_4.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + (log4jParamters_tMap_4) );
                    } 
                } 
            new BytesLimit65535_tMap_4().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row3_0_tMap_4 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_Main_Flow_Meter_tMap_4 = 0;
				
Main_Flow_MeterStruct Main_Flow_Meter_tmp = new Main_Flow_MeterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tFlowMeterCatcher_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tFlowMeterCatcher_1 = new StringBuilder();
                    log4jParamters_tFlowMeterCatcher_1.append("Parameters:");
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + (log4jParamters_tFlowMeterCatcher_1) );
                    } 
                } 
            new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();
            }

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row3_0.pid = pid;
		row3_0.root_pid = rootPid;
		row3_0.father_pid = fatherPid;	
        row3_0.project = projectName;
        row3_0.job = jobName;
        row3_0.context = contextStr;
		row3_0.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row3_0.moment = mcm.getMoment();
		row3_0.job_version = mcm.getJobVersion();
		row3_0.job_repository_id = mcm.getJobId();
		row3_0.system_pid = mcm.getSystemPid();
		row3_0.label = mcm.getLabel();
		row3_0.count = mcm.getCount();
		row3_0.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row3_0.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row3_0 - " + (row3_0==null? "": row3_0.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Main_Flow_Meter = null;


// # Output table : 'Main_Flow_Meter'
count_Main_Flow_Meter_tMap_4++;

Main_Flow_Meter_tmp.moment = row3_0.moment ;
Main_Flow_Meter_tmp.pid = row3_0.pid ;
Main_Flow_Meter_tmp.job = row3_0.job ;
Main_Flow_Meter_tmp.origin = row3_0.origin ;
Main_Flow_Meter_tmp.label = row3_0.label ;
Main_Flow_Meter_tmp.count = row3_0.count ;
Main_Flow_Meter_tmp.reference = row3_0.reference ;
Main_Flow_Meter_tmp.thresholds = row3_0.thresholds ;
Main_Flow_Meter = Main_Flow_Meter_tmp;
log.debug("tMap_4 - Outputting the record " + count_Main_Flow_Meter_tMap_4 + " of the output table 'Main_Flow_Meter'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Main_Flow_Meter"
if(Main_Flow_Meter != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Flow_Meter"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("Main_Flow_Meter - " + (Main_Flow_Meter==null? "": Main_Flow_Meter.toLogString()));
    			}
    		
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[8];
   				
	    		if(Main_Flow_Meter.moment != null) { //              
                 row_tLogRow_4[0]=    						
								FormatterUtils.format_Date(Main_Flow_Meter.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.pid != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(Main_Flow_Meter.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.job != null) { //              
                 row_tLogRow_4[2]=    						    
				                String.valueOf(Main_Flow_Meter.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.origin != null) { //              
                 row_tLogRow_4[3]=    						    
				                String.valueOf(Main_Flow_Meter.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.label != null) { //              
                 row_tLogRow_4[4]=    						    
				                String.valueOf(Main_Flow_Meter.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.count != null) { //              
                 row_tLogRow_4[5]=    						    
				                String.valueOf(Main_Flow_Meter.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.reference != null) { //              
                 row_tLogRow_4[6]=    						    
				                String.valueOf(Main_Flow_Meter.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.thresholds != null) { //              
                 row_tLogRow_4[7]=    						    
				                String.valueOf(Main_Flow_Meter.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
                	log.info("tLogRow_4 - Content of row "+nb_line_tLogRow_4+": " + TalendString.unionString("|",row_tLogRow_4));
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "Main_Flow_Meter"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 
                if(log.isDebugEnabled())
            log.debug("tFlowMeterCatcher_1 - "  + ("Done.") );

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_4 - Written records count in the table 'Main_Flow_Meter': " + count_Main_Flow_Meter_tMap_4 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_4 - "  + ("Done.") );

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);
                if(log.isInfoEnabled())
            log.info("tLogRow_4 - "  + ("Printed row count: ")  + (nb_line_tLogRow_4)  + (".") );

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Flow_Meter");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tLogRow_4 - "  + ("Done.") );

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Starting the Migrating Data from USCBJOPF to CUSTOMER_SHIP_TO...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class CUSTOMER_SHIP_TOStruct implements routines.system.IPersistableRow<CUSTOMER_SHIP_TOStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String AR_COMPANY;

				public String getAR_COMPANY () {
					return this.AR_COMPANY;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public String NATIONAL_ACCOUNT_NO;

				public String getNATIONAL_ACCOUNT_NO () {
					return this.NATIONAL_ACCOUNT_NO;
				}
				
			    public String DELIVERY_CODE;

				public String getDELIVERY_CODE () {
					return this.DELIVERY_CODE;
				}
				
			    public String SHIP_TO_STORE_NO;

				public String getSHIP_TO_STORE_NO () {
					return this.SHIP_TO_STORE_NO;
				}
				
			    public String PALLET_LOAD;

				public String getPALLET_LOAD () {
					return this.PALLET_LOAD;
				}
				
			    public String ORDER_APPROVAL_REQUIRED;

				public String getORDER_APPROVAL_REQUIRED () {
					return this.ORDER_APPROVAL_REQUIRED;
				}
				
			    public String PO_REQUIRED;

				public String getPO_REQUIRED () {
					return this.PO_REQUIRED;
				}
				
			    public String BUSINESS_HOURS_FROM_1;

				public String getBUSINESS_HOURS_FROM_1 () {
					return this.BUSINESS_HOURS_FROM_1;
				}
				
			    public String BUSINESS_HOURS_FROM_AM_PM_1;

				public String getBUSINESS_HOURS_FROM_AM_PM_1 () {
					return this.BUSINESS_HOURS_FROM_AM_PM_1;
				}
				
			    public String BUSINESS_HOURS_TO_1;

				public String getBUSINESS_HOURS_TO_1 () {
					return this.BUSINESS_HOURS_TO_1;
				}
				
			    public String BUSINESS_HOURS_TO_AM_PM_1;

				public String getBUSINESS_HOURS_TO_AM_PM_1 () {
					return this.BUSINESS_HOURS_TO_AM_PM_1;
				}
				
			    public String NO_DELIVERIES_FROM_1;

				public String getNO_DELIVERIES_FROM_1 () {
					return this.NO_DELIVERIES_FROM_1;
				}
				
			    public String NO_DELIVERIES_FROM_AM_PM_1;

				public String getNO_DELIVERIES_FROM_AM_PM_1 () {
					return this.NO_DELIVERIES_FROM_AM_PM_1;
				}
				
			    public String NO_DELIVERIES_TO_1;

				public String getNO_DELIVERIES_TO_1 () {
					return this.NO_DELIVERIES_TO_1;
				}
				
			    public String NO_DELIVERIES_TO_AM_PM_1;

				public String getNO_DELIVERIES_TO_AM_PM_1 () {
					return this.NO_DELIVERIES_TO_AM_PM_1;
				}
				
			    public String NO_DELIVERIES_FROM_2;

				public String getNO_DELIVERIES_FROM_2 () {
					return this.NO_DELIVERIES_FROM_2;
				}
				
			    public String NO_DELIVERIES_FROM_AM_PM_2;

				public String getNO_DELIVERIES_FROM_AM_PM_2 () {
					return this.NO_DELIVERIES_FROM_AM_PM_2;
				}
				
			    public String NO_DELIVERIES_TO_2;

				public String getNO_DELIVERIES_TO_2 () {
					return this.NO_DELIVERIES_TO_2;
				}
				
			    public String NO_DELIVERIES_TO_AM_PM_2;

				public String getNO_DELIVERIES_TO_AM_PM_2 () {
					return this.NO_DELIVERIES_TO_AM_PM_2;
				}
				
			    public String NO_DELIVERIES_FROM_3;

				public String getNO_DELIVERIES_FROM_3 () {
					return this.NO_DELIVERIES_FROM_3;
				}
				
			    public String NO_DELIVERIES_FROM_AM_PM_3;

				public String getNO_DELIVERIES_FROM_AM_PM_3 () {
					return this.NO_DELIVERIES_FROM_AM_PM_3;
				}
				
			    public String NO_DELIVERIES_TO_3;

				public String getNO_DELIVERIES_TO_3 () {
					return this.NO_DELIVERIES_TO_3;
				}
				
			    public String NO_DELIVERIES_TO_AM_PM_3;

				public String getNO_DELIVERIES_TO_AM_PM_3 () {
					return this.NO_DELIVERIES_TO_AM_PM_3;
				}
				
			    public String NO_DELIVERIES_FROM_4;

				public String getNO_DELIVERIES_FROM_4 () {
					return this.NO_DELIVERIES_FROM_4;
				}
				
			    public String NO_DELIVERIES_FROM_AM_PM_4;

				public String getNO_DELIVERIES_FROM_AM_PM_4 () {
					return this.NO_DELIVERIES_FROM_AM_PM_4;
				}
				
			    public String NO_DELIVERIES_TO_4;

				public String getNO_DELIVERIES_TO_4 () {
					return this.NO_DELIVERIES_TO_4;
				}
				
			    public String NO_DELIVERIES_TO_AM_PM_4;

				public String getNO_DELIVERIES_TO_AM_PM_4 () {
					return this.NO_DELIVERIES_TO_AM_PM_4;
				}
				
			    public String SEPARATE_OR_COMBINE_BY_PO;

				public String getSEPARATE_OR_COMBINE_BY_PO () {
					return this.SEPARATE_OR_COMBINE_BY_PO;
				}
				
			    public String PRINT_OR_EDI_STATUS;

				public String getPRINT_OR_EDI_STATUS () {
					return this.PRINT_OR_EDI_STATUS;
				}
				
			    public String SUMMARY_REPORT;

				public String getSUMMARY_REPORT () {
					return this.SUMMARY_REPORT;
				}
				
			    public String EXTERNAL_DESIRED_NO_OF_COPIES;

				public String getEXTERNAL_DESIRED_NO_OF_COPIES () {
					return this.EXTERNAL_DESIRED_NO_OF_COPIES;
				}
				
			    public String SHIPPING_DOCUMENT_OR_INVOICE;

				public String getSHIPPING_DOCUMENT_OR_INVOICE () {
					return this.SHIPPING_DOCUMENT_OR_INVOICE;
				}
				
			    public String INTERNAL_DESIRED_NO_OF_COPIES;

				public String getINTERNAL_DESIRED_NO_OF_COPIES () {
					return this.INTERNAL_DESIRED_NO_OF_COPIES;
				}
				
			    public String RESTOCK_FEE;

				public String getRESTOCK_FEE () {
					return this.RESTOCK_FEE;
				}
				
			    public String ACCOUNT_TYPE;

				public String getACCOUNT_TYPE () {
					return this.ACCOUNT_TYPE;
				}
				
			    public String PREFFERED_DELIVERY_HOURS_FROM_1;

				public String getPREFFERED_DELIVERY_HOURS_FROM_1 () {
					return this.PREFFERED_DELIVERY_HOURS_FROM_1;
				}
				
			    public String PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1;

				public String getPREFFERED_DELIVERY_HOURS_FROM_AM_PM_1 () {
					return this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1;
				}
				
			    public String PREFFERED_DELIVERY_HOURS_TO_1;

				public String getPREFFERED_DELIVERY_HOURS_TO_1 () {
					return this.PREFFERED_DELIVERY_HOURS_TO_1;
				}
				
			    public String PREFFERED_DELIVERY_HOURS_TO_AM_PM_1;

				public String getPREFFERED_DELIVERY_HOURS_TO_AM_PM_1 () {
					return this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1;
				}
				
			    public String PREFFERED_DELIVERY_HOURS_FROM_2;

				public String getPREFFERED_DELIVERY_HOURS_FROM_2 () {
					return this.PREFFERED_DELIVERY_HOURS_FROM_2;
				}
				
			    public String PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2;

				public String getPREFFERED_DELIVERY_HOURS_FROM_AM_PM_2 () {
					return this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2;
				}
				
			    public String PREFFERED_DELIVERY_HOURS_TO_2;

				public String getPREFFERED_DELIVERY_HOURS_TO_2 () {
					return this.PREFFERED_DELIVERY_HOURS_TO_2;
				}
				
			    public String PREFFERED_DELIVERY_HOURS_TO_AM_PM_2;

				public String getPREFFERED_DELIVERY_HOURS_TO_AM_PM_2 () {
					return this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2;
				}
				
			    public String CORPORATE_TYPE_OF_OPERATION;

				public String getCORPORATE_TYPE_OF_OPERATION () {
					return this.CORPORATE_TYPE_OF_OPERATION;
				}
				
			    public String CUISINE;

				public String getCUISINE () {
					return this.CUISINE;
				}
				
			    public String PROFILE_CREATION_DATE;

				public String getPROFILE_CREATION_DATE () {
					return this.PROFILE_CREATION_DATE;
				}
				
			    public String PROFILE_ARCHIVE_DATE;

				public String getPROFILE_ARCHIVE_DATE () {
					return this.PROFILE_ARCHIVE_DATE;
				}
				
			    public String ITEM_OVERRIDE_CHART_ID;

				public String getITEM_OVERRIDE_CHART_ID () {
					return this.ITEM_OVERRIDE_CHART_ID;
				}
				
			    public String DEFAULT_SUBSTITUTE_TYPE;

				public String getDEFAULT_SUBSTITUTE_TYPE () {
					return this.DEFAULT_SUBSTITUTE_TYPE;
				}
				
			    public String DEFAULT_RESTRICT_TYPE;

				public String getDEFAULT_RESTRICT_TYPE () {
					return this.DEFAULT_RESTRICT_TYPE;
				}
				
			    public String RESTRICT_OR_SUB_CHART_ID;

				public String getRESTRICT_OR_SUB_CHART_ID () {
					return this.RESTRICT_OR_SUB_CHART_ID;
				}
				
			    public String FORCED_SUBSTITUTION;

				public String getFORCED_SUBSTITUTION () {
					return this.FORCED_SUBSTITUTION;
				}
				
			    public String DEPARTMENTS_INDICATOR;

				public String getDEPARTMENTS_INDICATOR () {
					return this.DEPARTMENTS_INDICATOR;
				}
				
			    public String PARTIAL_FILL;

				public String getPARTIAL_FILL () {
					return this.PARTIAL_FILL;
				}
				
			    public String NON_PROFIT_FLAG;

				public String getNON_PROFIT_FLAG () {
					return this.NON_PROFIT_FLAG;
				}
				
			    public String MISCELLANEOUS_TAX_EXEMPT;

				public String getMISCELLANEOUS_TAX_EXEMPT () {
					return this.MISCELLANEOUS_TAX_EXEMPT;
				}
				
			    public String OWNER_NAME;

				public String getOWNER_NAME () {
					return this.OWNER_NAME;
				}
				
			    public String TERRITORY_CODE;

				public String getTERRITORY_CODE () {
					return this.TERRITORY_CODE;
				}
				
			    public String MAIL_ADDRESS_1;

				public String getMAIL_ADDRESS_1 () {
					return this.MAIL_ADDRESS_1;
				}
				
			    public String MAIL_ADDRESS_2;

				public String getMAIL_ADDRESS_2 () {
					return this.MAIL_ADDRESS_2;
				}
				
			    public String MAIL_ADDRESS_3;

				public String getMAIL_ADDRESS_3 () {
					return this.MAIL_ADDRESS_3;
				}
				
			    public String MAIL_CITY;

				public String getMAIL_CITY () {
					return this.MAIL_CITY;
				}
				
			    public String MAIL_STATE_CODE;

				public String getMAIL_STATE_CODE () {
					return this.MAIL_STATE_CODE;
				}
				
			    public String MAIL_ZIP_CODE;

				public String getMAIL_ZIP_CODE () {
					return this.MAIL_ZIP_CODE;
				}
				
			    public String COUNTRY_CODE;

				public String getCOUNTRY_CODE () {
					return this.COUNTRY_CODE;
				}
				
			    public String CENSUS_STATE_CODE;

				public String getCENSUS_STATE_CODE () {
					return this.CENSUS_STATE_CODE;
				}
				
			    public String IMMEDIATE_ALLOC_FLAG;

				public String getIMMEDIATE_ALLOC_FLAG () {
					return this.IMMEDIATE_ALLOC_FLAG;
				}
				
			    public String CUSTOMER_SHIP_TO_STATUS;

				public String getCUSTOMER_SHIP_TO_STATUS () {
					return this.CUSTOMER_SHIP_TO_STATUS;
				}
				
			    public String RESTRICTION_CHART_TYPE;

				public String getRESTRICTION_CHART_TYPE () {
					return this.RESTRICTION_CHART_TYPE;
				}
				
			    public String ITEM_OVERRIDE_CHART_TYPE;

				public String getITEM_OVERRIDE_CHART_TYPE () {
					return this.ITEM_OVERRIDE_CHART_TYPE;
				}
				
			    public String RECORD_CHANGE_FLAG;

				public String getRECORD_CHANGE_FLAG () {
					return this.RECORD_CHANGE_FLAG;
				}
				
			    public String ORDERS_PLACED_FLAG;

				public String getORDERS_PLACED_FLAG () {
					return this.ORDERS_PLACED_FLAG;
				}
				
			    public String ASSIGN_CODES_BY_DEPT;

				public String getASSIGN_CODES_BY_DEPT () {
					return this.ASSIGN_CODES_BY_DEPT;
				}
				
			    public String VENDOR_NO;

				public String getVENDOR_NO () {
					return this.VENDOR_NO;
				}
				
			    public String VENDOR_SUFFIX;

				public String getVENDOR_SUFFIX () {
					return this.VENDOR_SUFFIX;
				}
				
			    public String RECORD_TYPE_INDICATOR;

				public String getRECORD_TYPE_INDICATOR () {
					return this.RECORD_TYPE_INDICATOR;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public String CUSTOMER_COMMODITY_CODE;

				public String getCUSTOMER_COMMODITY_CODE () {
					return this.CUSTOMER_COMMODITY_CODE;
				}
				
			    public String PREVIOUS_STATUS;

				public String getPREVIOUS_STATUS () {
					return this.PREVIOUS_STATUS;
				}
				
			    public String PAYMENT_TERMS_CODE;

				public String getPAYMENT_TERMS_CODE () {
					return this.PAYMENT_TERMS_CODE;
				}
				
			    public String PERSONAL_GURANTEE_INDICATOR;

				public String getPERSONAL_GURANTEE_INDICATOR () {
					return this.PERSONAL_GURANTEE_INDICATOR;
				}
				
			    public String PERSONAL_GURANTEE_EXPIRATION_DATE;

				public String getPERSONAL_GURANTEE_EXPIRATION_DATE () {
					return this.PERSONAL_GURANTEE_EXPIRATION_DATE;
				}
				
			    public String PERSONAL_GURANTEE_TASK_INDICATOR;

				public String getPERSONAL_GURANTEE_TASK_INDICATOR () {
					return this.PERSONAL_GURANTEE_TASK_INDICATOR;
				}
				
			    public String SALES_TAX_LAST_REVIEW_DATE;

				public String getSALES_TAX_LAST_REVIEW_DATE () {
					return this.SALES_TAX_LAST_REVIEW_DATE;
				}
				
			    public String SALES_TAX_REVIEW_INDICATOR;

				public String getSALES_TAX_REVIEW_INDICATOR () {
					return this.SALES_TAX_REVIEW_INDICATOR;
				}
				
			    public String LOCAL_TYPE_OF_OPERATION;

				public String getLOCAL_TYPE_OF_OPERATION () {
					return this.LOCAL_TYPE_OF_OPERATION;
				}
				
			    public String PO_NO_EXPIRATION_DATE;

				public String getPO_NO_EXPIRATION_DATE () {
					return this.PO_NO_EXPIRATION_DATE;
				}
				
			    public String PO_NO_TASK_INDICATOR;

				public String getPO_NO_TASK_INDICATOR () {
					return this.PO_NO_TASK_INDICATOR;
				}
				
			    public String AUDIT_SEQUENCE_NO;

				public String getAUDIT_SEQUENCE_NO () {
					return this.AUDIT_SEQUENCE_NO;
				}
				
			    public String SEQUENCE_CHART_IDENTIFIER;

				public String getSEQUENCE_CHART_IDENTIFIER () {
					return this.SEQUENCE_CHART_IDENTIFIER;
				}
				
			    public String STOP_DATE;

				public String getSTOP_DATE () {
					return this.STOP_DATE;
				}
				
			    public String SEQUENCE_CHART_TYPE;

				public String getSEQUENCE_CHART_TYPE () {
					return this.SEQUENCE_CHART_TYPE;
				}
				
			    public String STOP_COUNTER;

				public String getSTOP_COUNTER () {
					return this.STOP_COUNTER;
				}
				
			    public String DEFAULT_PICKING_TIME_ZONE_MONDAY;

				public String getDEFAULT_PICKING_TIME_ZONE_MONDAY () {
					return this.DEFAULT_PICKING_TIME_ZONE_MONDAY;
				}
				
			    public String DEFAULT_PICKING_TIME_ZONE_TUESDAY;

				public String getDEFAULT_PICKING_TIME_ZONE_TUESDAY () {
					return this.DEFAULT_PICKING_TIME_ZONE_TUESDAY;
				}
				
			    public String DEFAULT_PICKING_TIME_ZONE_WEDNESDAY;

				public String getDEFAULT_PICKING_TIME_ZONE_WEDNESDAY () {
					return this.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY;
				}
				
			    public String DEFAULT_PICKING_TIME_ZONE_THURSDAY;

				public String getDEFAULT_PICKING_TIME_ZONE_THURSDAY () {
					return this.DEFAULT_PICKING_TIME_ZONE_THURSDAY;
				}
				
			    public String DEFAULT_PICKING_TIME_ZONE_FRIDAY;

				public String getDEFAULT_PICKING_TIME_ZONE_FRIDAY () {
					return this.DEFAULT_PICKING_TIME_ZONE_FRIDAY;
				}
				
			    public String DEFAULT_PICKING_TIME_ZONE_SATURDAY;

				public String getDEFAULT_PICKING_TIME_ZONE_SATURDAY () {
					return this.DEFAULT_PICKING_TIME_ZONE_SATURDAY;
				}
				
			    public String DEFAULT_PICKING_TIME_ZONE_SUNDAY;

				public String getDEFAULT_PICKING_TIME_ZONE_SUNDAY () {
					return this.DEFAULT_PICKING_TIME_ZONE_SUNDAY;
				}
				
			    public String OTHER_CONTACT_NAME;

				public String getOTHER_CONTACT_NAME () {
					return this.OTHER_CONTACT_NAME;
				}
				
			    public String MAIL_ADDRESS_NAME;

				public String getMAIL_ADDRESS_NAME () {
					return this.MAIL_ADDRESS_NAME;
				}
				
			    public String RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN;

				public String getRESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN () {
					return this.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN;
				}
				
			    public String ITEM_OVERRIDES_CHART_ORIGIN;

				public String getITEM_OVERRIDES_CHART_ORIGIN () {
					return this.ITEM_OVERRIDES_CHART_ORIGIN;
				}
				
			    public String SEQUENCE_CHART_ORIGIN;

				public String getSEQUENCE_CHART_ORIGIN () {
					return this.SEQUENCE_CHART_ORIGIN;
				}
				
			    public String PENDING_TERMS_APPROVAL;

				public String getPENDING_TERMS_APPROVAL () {
					return this.PENDING_TERMS_APPROVAL;
				}
				
			    public String DESIGNATED_DELIVERY_DAYS_1;

				public String getDESIGNATED_DELIVERY_DAYS_1 () {
					return this.DESIGNATED_DELIVERY_DAYS_1;
				}
				
			    public String DESIGNATED_SALESMAN_CALL_DAYS;

				public String getDESIGNATED_SALESMAN_CALL_DAYS () {
					return this.DESIGNATED_SALESMAN_CALL_DAYS;
				}
				
			    public String BUSINESS_HOURS_DAYS_1;

				public String getBUSINESS_HOURS_DAYS_1 () {
					return this.BUSINESS_HOURS_DAYS_1;
				}
				
			    public String BUSINESS_HOURS_DAYS_2;

				public String getBUSINESS_HOURS_DAYS_2 () {
					return this.BUSINESS_HOURS_DAYS_2;
				}
				
			    public String TAX_AUTHORITY_NO;

				public String getTAX_AUTHORITY_NO () {
					return this.TAX_AUTHORITY_NO;
				}
				
			    public String PRICE_RULE_NAME;

				public String getPRICE_RULE_NAME () {
					return this.PRICE_RULE_NAME;
				}
				
			    public String STOP_CODE;

				public String getSTOP_CODE () {
					return this.STOP_CODE;
				}
				
			    public String BUSINESS_HOURS_FROM_2;

				public String getBUSINESS_HOURS_FROM_2 () {
					return this.BUSINESS_HOURS_FROM_2;
				}
				
			    public String BUSINESS_HOURS_FROM_AM_PM_2;

				public String getBUSINESS_HOURS_FROM_AM_PM_2 () {
					return this.BUSINESS_HOURS_FROM_AM_PM_2;
				}
				
			    public String BUSINESS_HOURS_TO_2;

				public String getBUSINESS_HOURS_TO_2 () {
					return this.BUSINESS_HOURS_TO_2;
				}
				
			    public String BUSINESS_HOURS_TO_AM_PM_2;

				public String getBUSINESS_HOURS_TO_AM_PM_2 () {
					return this.BUSINESS_HOURS_TO_AM_PM_2;
				}
				
			    public String TERRITORY_OVERRIDE_FLAG;

				public String getTERRITORY_OVERRIDE_FLAG () {
					return this.TERRITORY_OVERRIDE_FLAG;
				}
				
			    public String TAX_EXEMPT_APPROVAL_PENDING;

				public String getTAX_EXEMPT_APPROVAL_PENDING () {
					return this.TAX_EXEMPT_APPROVAL_PENDING;
				}
				
			    public String RESTOCK_FEE_APPROVAL_PENDING;

				public String getRESTOCK_FEE_APPROVAL_PENDING () {
					return this.RESTOCK_FEE_APPROVAL_PENDING;
				}
				
			    public String CREDIT_STOP_APPROVAL_PENDING;

				public String getCREDIT_STOP_APPROVAL_PENDING () {
					return this.CREDIT_STOP_APPROVAL_PENDING;
				}
				
			    public String ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING;

				public String getALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING () {
					return this.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING;
				}
				
			    public String APPLICATION_RULE_NAME;

				public String getAPPLICATION_RULE_NAME () {
					return this.APPLICATION_RULE_NAME;
				}
				
			    public String SUBSTITUTION_RULE_NAME;

				public String getSUBSTITUTION_RULE_NAME () {
					return this.SUBSTITUTION_RULE_NAME;
				}
				
			    public String MINIMUM_RULE_NAME;

				public String getMINIMUM_RULE_NAME () {
					return this.MINIMUM_RULE_NAME;
				}
				
			    public String MAXIMUM_RULE_NAME;

				public String getMAXIMUM_RULE_NAME () {
					return this.MAXIMUM_RULE_NAME;
				}
				
			    public String COMMISSION_BASE_RULE_NAME;

				public String getCOMMISSION_BASE_RULE_NAME () {
					return this.COMMISSION_BASE_RULE_NAME;
				}
				
			    public String HAND_PRICE_RESTRICTION_RULE_NAME;

				public String getHAND_PRICE_RESTRICTION_RULE_NAME () {
					return this.HAND_PRICE_RESTRICTION_RULE_NAME;
				}
				
			    public BigDecimal ESTIMATED_MARKET_SHARE;

				public BigDecimal getESTIMATED_MARKET_SHARE () {
					return this.ESTIMATED_MARKET_SHARE;
				}
				
			    public BigDecimal ESTIMATED_WEEKLY_MARKET_POTENTIAL;

				public BigDecimal getESTIMATED_WEEKLY_MARKET_POTENTIAL () {
					return this.ESTIMATED_WEEKLY_MARKET_POTENTIAL;
				}
				
			    public String TAX_EXEMPT_EXPIRATION_DATE;

				public String getTAX_EXEMPT_EXPIRATION_DATE () {
					return this.TAX_EXEMPT_EXPIRATION_DATE;
				}
				
			    public String TAX_EXEMPT_FLAG;

				public String getTAX_EXEMPT_FLAG () {
					return this.TAX_EXEMPT_FLAG;
				}
				
			    public String REACTIVATION_APPROVAL_PENDING;

				public String getREACTIVATION_APPROVAL_PENDING () {
					return this.REACTIVATION_APPROVAL_PENDING;
				}
				
			    public String AGING_POLICY_APPROVAL_PENDING;

				public String getAGING_POLICY_APPROVAL_PENDING () {
					return this.AGING_POLICY_APPROVAL_PENDING;
				}
				
			    public String DISCOUNT_GRACE_APPROVAL_PENDING;

				public String getDISCOUNT_GRACE_APPROVAL_PENDING () {
					return this.DISCOUNT_GRACE_APPROVAL_PENDING;
				}
				
			    public String NET_DUE_GRACE_APPROVAL_PENDING;

				public String getNET_DUE_GRACE_APPROVAL_PENDING () {
					return this.NET_DUE_GRACE_APPROVAL_PENDING;
				}
				
			    public String MSP_TARGET_CUSTOMER_SPECIFICATIONS;

				public String getMSP_TARGET_CUSTOMER_SPECIFICATIONS () {
					return this.MSP_TARGET_CUSTOMER_SPECIFICATIONS;
				}
				
			    public String ACTIVE_OR_INACTIVE_APPROVAL_PENDING;

				public String getACTIVE_OR_INACTIVE_APPROVAL_PENDING () {
					return this.ACTIVE_OR_INACTIVE_APPROVAL_PENDING;
				}
				
			    public String CUSTOMER_ENTITY_TYPE;

				public String getCUSTOMER_ENTITY_TYPE () {
					return this.CUSTOMER_ENTITY_TYPE;
				}
				
			    public String STATE;

				public String getSTATE () {
					return this.STATE;
				}
				
			    public String COMMODITY_FLAG;

				public String getCOMMODITY_FLAG () {
					return this.COMMODITY_FLAG;
				}
				
			    public String NO_OF_OPEN_ORDERS;

				public String getNO_OF_OPEN_ORDERS () {
					return this.NO_OF_OPEN_ORDERS;
				}
				
			    public BigDecimal OPEN_ORDER_AMOUNT;

				public BigDecimal getOPEN_ORDER_AMOUNT () {
					return this.OPEN_ORDER_AMOUNT;
				}
				
			    public String KOSHER_CUSTOMER;

				public String getKOSHER_CUSTOMER () {
					return this.KOSHER_CUSTOMER;
				}
				
			    public String LAPTOP_ZID_NO;

				public String getLAPTOP_ZID_NO () {
					return this.LAPTOP_ZID_NO;
				}
				
			    public String SYSCO_SALES_COMPANION;

				public String getSYSCO_SALES_COMPANION () {
					return this.SYSCO_SALES_COMPANION;
				}
				
			    public String OFF_STOP_DATE;

				public String getOFF_STOP_DATE () {
					return this.OFF_STOP_DATE;
				}
				
			    public String LAPTOP_USER_FLAG;

				public String getLAPTOP_USER_FLAG () {
					return this.LAPTOP_USER_FLAG;
				}
				
			    public String THIRD_PARTY_CUSTOMER_FLAG;

				public String getTHIRD_PARTY_CUSTOMER_FLAG () {
					return this.THIRD_PARTY_CUSTOMER_FLAG;
				}
				
			    public String CREDIT_HIERARCHY_MASTER_COMPANY;

				public String getCREDIT_HIERARCHY_MASTER_COMPANY () {
					return this.CREDIT_HIERARCHY_MASTER_COMPANY;
				}
				
			    public String CREDIT_HIERARCHY_MASTER_COMPANY_NO;

				public String getCREDIT_HIERARCHY_MASTER_COMPANY_NO () {
					return this.CREDIT_HIERARCHY_MASTER_COMPANY_NO;
				}
				
			    public String SHIP_AVAILABLE_FLAG;

				public String getSHIP_AVAILABLE_FLAG () {
					return this.SHIP_AVAILABLE_FLAG;
				}
				
			    public String MAPSCO_MAP_CODE;

				public String getMAPSCO_MAP_CODE () {
					return this.MAPSCO_MAP_CODE;
				}
				
			    public String APPLICATION_RULE_DEFAULT_FLAG;

				public String getAPPLICATION_RULE_DEFAULT_FLAG () {
					return this.APPLICATION_RULE_DEFAULT_FLAG;
				}
				
			    public String PRICE_RULE_DEFAULT_FLAG;

				public String getPRICE_RULE_DEFAULT_FLAG () {
					return this.PRICE_RULE_DEFAULT_FLAG;
				}
				
			    public String SUBSTITUTION_RULE_DEFAULT_FLAG;

				public String getSUBSTITUTION_RULE_DEFAULT_FLAG () {
					return this.SUBSTITUTION_RULE_DEFAULT_FLAG;
				}
				
			    public String MINIMUM_RULE_DEFAULT_FLAG;

				public String getMINIMUM_RULE_DEFAULT_FLAG () {
					return this.MINIMUM_RULE_DEFAULT_FLAG;
				}
				
			    public String MAXIMUM_RULE_DEFAULT_FLAG;

				public String getMAXIMUM_RULE_DEFAULT_FLAG () {
					return this.MAXIMUM_RULE_DEFAULT_FLAG;
				}
				
			    public String COMMISSION_BASE_RULE_DEFAULT_FLAG;

				public String getCOMMISSION_BASE_RULE_DEFAULT_FLAG () {
					return this.COMMISSION_BASE_RULE_DEFAULT_FLAG;
				}
				
			    public String HAND_PRICE_RULE_DEFAULT_FLAG;

				public String getHAND_PRICE_RULE_DEFAULT_FLAG () {
					return this.HAND_PRICE_RULE_DEFAULT_FLAG;
				}
				
			    public String DEFAULT_ROUTE_MONDAY;

				public String getDEFAULT_ROUTE_MONDAY () {
					return this.DEFAULT_ROUTE_MONDAY;
				}
				
			    public String DEFAULT_ROUTE_TUESDAY;

				public String getDEFAULT_ROUTE_TUESDAY () {
					return this.DEFAULT_ROUTE_TUESDAY;
				}
				
			    public String DEFAULT_ROUTE_WEDNESDAY;

				public String getDEFAULT_ROUTE_WEDNESDAY () {
					return this.DEFAULT_ROUTE_WEDNESDAY;
				}
				
			    public String DEFAULT_ROUTE_THURSDAY;

				public String getDEFAULT_ROUTE_THURSDAY () {
					return this.DEFAULT_ROUTE_THURSDAY;
				}
				
			    public String DEFAULT_ROUTE_FRIDAY;

				public String getDEFAULT_ROUTE_FRIDAY () {
					return this.DEFAULT_ROUTE_FRIDAY;
				}
				
			    public String DEFAULT_ROUTE_SATURDAY;

				public String getDEFAULT_ROUTE_SATURDAY () {
					return this.DEFAULT_ROUTE_SATURDAY;
				}
				
			    public String LATITUDE_COORDINATES;

				public String getLATITUDE_COORDINATES () {
					return this.LATITUDE_COORDINATES;
				}
				
			    public String LONGITUDE_COORDINATES;

				public String getLONGITUDE_COORDINATES () {
					return this.LONGITUDE_COORDINATES;
				}
				
			    public String FREQUENCY_DOWNLOAD;

				public String getFREQUENCY_DOWNLOAD () {
					return this.FREQUENCY_DOWNLOAD;
				}
				
			    public String FREQUENCY_CODE;

				public String getFREQUENCY_CODE () {
					return this.FREQUENCY_CODE;
				}
				
			    public String LAPTOP_EXCEPTION_LEVEL;

				public String getLAPTOP_EXCEPTION_LEVEL () {
					return this.LAPTOP_EXCEPTION_LEVEL;
				}
				
			    public String THIRD_PARTY_OG_OPTIONS;

				public String getTHIRD_PARTY_OG_OPTIONS () {
					return this.THIRD_PARTY_OG_OPTIONS;
				}
				
			    public String SERVICE_CHARGE;

				public String getSERVICE_CHARGE () {
					return this.SERVICE_CHARGE;
				}
				
			    public String PRIMARY_SHIP_TO;

				public String getPRIMARY_SHIP_TO () {
					return this.PRIMARY_SHIP_TO;
				}
				
			    public String DELIVERY_DIFFICULTY_RATING;

				public String getDELIVERY_DIFFICULTY_RATING () {
					return this.DELIVERY_DIFFICULTY_RATING;
				}
				
			    public String BILL_TO_CORP_PRICING_PARENT_COMPANY;

				public String getBILL_TO_CORP_PRICING_PARENT_COMPANY () {
					return this.BILL_TO_CORP_PRICING_PARENT_COMPANY;
				}
				
			    public String BILL_TO_CORP_PRICING_PARENT;

				public String getBILL_TO_CORP_PRICING_PARENT () {
					return this.BILL_TO_CORP_PRICING_PARENT;
				}
				
			    public String CORP_HIERARCHY_MASTER_COMPANY;

				public String getCORP_HIERARCHY_MASTER_COMPANY () {
					return this.CORP_HIERARCHY_MASTER_COMPANY;
				}
				
			    public String CORP_HIERARCHY_MASTER;

				public String getCORP_HIERARCHY_MASTER () {
					return this.CORP_HIERARCHY_MASTER;
				}
				
			    public String LOCATION_ID;

				public String getLOCATION_ID () {
					return this.LOCATION_ID;
				}
				
			    public String PRICE_RULE_SRC_COMPANY;

				public String getPRICE_RULE_SRC_COMPANY () {
					return this.PRICE_RULE_SRC_COMPANY;
				}
				
			    public String APPLICATION_RULE_SRC_COMPANY;

				public String getAPPLICATION_RULE_SRC_COMPANY () {
					return this.APPLICATION_RULE_SRC_COMPANY;
				}
				
			    public String SUBSTITUTE_RULE_SRC_COMPANY;

				public String getSUBSTITUTE_RULE_SRC_COMPANY () {
					return this.SUBSTITUTE_RULE_SRC_COMPANY;
				}
				
			    public String MINIMUM_RULE_SRC_COMPANY;

				public String getMINIMUM_RULE_SRC_COMPANY () {
					return this.MINIMUM_RULE_SRC_COMPANY;
				}
				
			    public String MAXIMUM_RULE_SRC_COMPANY;

				public String getMAXIMUM_RULE_SRC_COMPANY () {
					return this.MAXIMUM_RULE_SRC_COMPANY;
				}
				
			    public String COMMISSION_BASE_RULE_SRC_COMPANY;

				public String getCOMMISSION_BASE_RULE_SRC_COMPANY () {
					return this.COMMISSION_BASE_RULE_SRC_COMPANY;
				}
				
			    public String HAND_PRICE_REST_RULE_SRC_COMPANY;

				public String getHAND_PRICE_REST_RULE_SRC_COMPANY () {
					return this.HAND_PRICE_REST_RULE_SRC_COMPANY;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public boolean IS_DELETED;

				public boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public String JOPF_SVOP;

				public String getJOPF_SVOP () {
					return this.JOPF_SVOP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.AR_COMPANY == null) ? 0 : this.AR_COMPANY.hashCode());
					
						result = prime * result + ((this.SHIP_TO_CUST == null) ? 0 : this.SHIP_TO_CUST.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CUSTOMER_SHIP_TOStruct other = (CUSTOMER_SHIP_TOStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.AR_COMPANY == null) {
							if (other.AR_COMPANY != null)
								return false;
						
						} else if (!this.AR_COMPANY.equals(other.AR_COMPANY))
						
							return false;
					
						if (this.SHIP_TO_CUST == null) {
							if (other.SHIP_TO_CUST != null)
								return false;
						
						} else if (!this.SHIP_TO_CUST.equals(other.SHIP_TO_CUST))
						
							return false;
					

		return true;
    }

	public void copyDataTo(CUSTOMER_SHIP_TOStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.AR_COMPANY = this.AR_COMPANY;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.NATIONAL_ACCOUNT_NO = this.NATIONAL_ACCOUNT_NO;
	            other.DELIVERY_CODE = this.DELIVERY_CODE;
	            other.SHIP_TO_STORE_NO = this.SHIP_TO_STORE_NO;
	            other.PALLET_LOAD = this.PALLET_LOAD;
	            other.ORDER_APPROVAL_REQUIRED = this.ORDER_APPROVAL_REQUIRED;
	            other.PO_REQUIRED = this.PO_REQUIRED;
	            other.BUSINESS_HOURS_FROM_1 = this.BUSINESS_HOURS_FROM_1;
	            other.BUSINESS_HOURS_FROM_AM_PM_1 = this.BUSINESS_HOURS_FROM_AM_PM_1;
	            other.BUSINESS_HOURS_TO_1 = this.BUSINESS_HOURS_TO_1;
	            other.BUSINESS_HOURS_TO_AM_PM_1 = this.BUSINESS_HOURS_TO_AM_PM_1;
	            other.NO_DELIVERIES_FROM_1 = this.NO_DELIVERIES_FROM_1;
	            other.NO_DELIVERIES_FROM_AM_PM_1 = this.NO_DELIVERIES_FROM_AM_PM_1;
	            other.NO_DELIVERIES_TO_1 = this.NO_DELIVERIES_TO_1;
	            other.NO_DELIVERIES_TO_AM_PM_1 = this.NO_DELIVERIES_TO_AM_PM_1;
	            other.NO_DELIVERIES_FROM_2 = this.NO_DELIVERIES_FROM_2;
	            other.NO_DELIVERIES_FROM_AM_PM_2 = this.NO_DELIVERIES_FROM_AM_PM_2;
	            other.NO_DELIVERIES_TO_2 = this.NO_DELIVERIES_TO_2;
	            other.NO_DELIVERIES_TO_AM_PM_2 = this.NO_DELIVERIES_TO_AM_PM_2;
	            other.NO_DELIVERIES_FROM_3 = this.NO_DELIVERIES_FROM_3;
	            other.NO_DELIVERIES_FROM_AM_PM_3 = this.NO_DELIVERIES_FROM_AM_PM_3;
	            other.NO_DELIVERIES_TO_3 = this.NO_DELIVERIES_TO_3;
	            other.NO_DELIVERIES_TO_AM_PM_3 = this.NO_DELIVERIES_TO_AM_PM_3;
	            other.NO_DELIVERIES_FROM_4 = this.NO_DELIVERIES_FROM_4;
	            other.NO_DELIVERIES_FROM_AM_PM_4 = this.NO_DELIVERIES_FROM_AM_PM_4;
	            other.NO_DELIVERIES_TO_4 = this.NO_DELIVERIES_TO_4;
	            other.NO_DELIVERIES_TO_AM_PM_4 = this.NO_DELIVERIES_TO_AM_PM_4;
	            other.SEPARATE_OR_COMBINE_BY_PO = this.SEPARATE_OR_COMBINE_BY_PO;
	            other.PRINT_OR_EDI_STATUS = this.PRINT_OR_EDI_STATUS;
	            other.SUMMARY_REPORT = this.SUMMARY_REPORT;
	            other.EXTERNAL_DESIRED_NO_OF_COPIES = this.EXTERNAL_DESIRED_NO_OF_COPIES;
	            other.SHIPPING_DOCUMENT_OR_INVOICE = this.SHIPPING_DOCUMENT_OR_INVOICE;
	            other.INTERNAL_DESIRED_NO_OF_COPIES = this.INTERNAL_DESIRED_NO_OF_COPIES;
	            other.RESTOCK_FEE = this.RESTOCK_FEE;
	            other.ACCOUNT_TYPE = this.ACCOUNT_TYPE;
	            other.PREFFERED_DELIVERY_HOURS_FROM_1 = this.PREFFERED_DELIVERY_HOURS_FROM_1;
	            other.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1 = this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1;
	            other.PREFFERED_DELIVERY_HOURS_TO_1 = this.PREFFERED_DELIVERY_HOURS_TO_1;
	            other.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1 = this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1;
	            other.PREFFERED_DELIVERY_HOURS_FROM_2 = this.PREFFERED_DELIVERY_HOURS_FROM_2;
	            other.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2 = this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2;
	            other.PREFFERED_DELIVERY_HOURS_TO_2 = this.PREFFERED_DELIVERY_HOURS_TO_2;
	            other.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2 = this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2;
	            other.CORPORATE_TYPE_OF_OPERATION = this.CORPORATE_TYPE_OF_OPERATION;
	            other.CUISINE = this.CUISINE;
	            other.PROFILE_CREATION_DATE = this.PROFILE_CREATION_DATE;
	            other.PROFILE_ARCHIVE_DATE = this.PROFILE_ARCHIVE_DATE;
	            other.ITEM_OVERRIDE_CHART_ID = this.ITEM_OVERRIDE_CHART_ID;
	            other.DEFAULT_SUBSTITUTE_TYPE = this.DEFAULT_SUBSTITUTE_TYPE;
	            other.DEFAULT_RESTRICT_TYPE = this.DEFAULT_RESTRICT_TYPE;
	            other.RESTRICT_OR_SUB_CHART_ID = this.RESTRICT_OR_SUB_CHART_ID;
	            other.FORCED_SUBSTITUTION = this.FORCED_SUBSTITUTION;
	            other.DEPARTMENTS_INDICATOR = this.DEPARTMENTS_INDICATOR;
	            other.PARTIAL_FILL = this.PARTIAL_FILL;
	            other.NON_PROFIT_FLAG = this.NON_PROFIT_FLAG;
	            other.MISCELLANEOUS_TAX_EXEMPT = this.MISCELLANEOUS_TAX_EXEMPT;
	            other.OWNER_NAME = this.OWNER_NAME;
	            other.TERRITORY_CODE = this.TERRITORY_CODE;
	            other.MAIL_ADDRESS_1 = this.MAIL_ADDRESS_1;
	            other.MAIL_ADDRESS_2 = this.MAIL_ADDRESS_2;
	            other.MAIL_ADDRESS_3 = this.MAIL_ADDRESS_3;
	            other.MAIL_CITY = this.MAIL_CITY;
	            other.MAIL_STATE_CODE = this.MAIL_STATE_CODE;
	            other.MAIL_ZIP_CODE = this.MAIL_ZIP_CODE;
	            other.COUNTRY_CODE = this.COUNTRY_CODE;
	            other.CENSUS_STATE_CODE = this.CENSUS_STATE_CODE;
	            other.IMMEDIATE_ALLOC_FLAG = this.IMMEDIATE_ALLOC_FLAG;
	            other.CUSTOMER_SHIP_TO_STATUS = this.CUSTOMER_SHIP_TO_STATUS;
	            other.RESTRICTION_CHART_TYPE = this.RESTRICTION_CHART_TYPE;
	            other.ITEM_OVERRIDE_CHART_TYPE = this.ITEM_OVERRIDE_CHART_TYPE;
	            other.RECORD_CHANGE_FLAG = this.RECORD_CHANGE_FLAG;
	            other.ORDERS_PLACED_FLAG = this.ORDERS_PLACED_FLAG;
	            other.ASSIGN_CODES_BY_DEPT = this.ASSIGN_CODES_BY_DEPT;
	            other.VENDOR_NO = this.VENDOR_NO;
	            other.VENDOR_SUFFIX = this.VENDOR_SUFFIX;
	            other.RECORD_TYPE_INDICATOR = this.RECORD_TYPE_INDICATOR;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.CUSTOMER_COMMODITY_CODE = this.CUSTOMER_COMMODITY_CODE;
	            other.PREVIOUS_STATUS = this.PREVIOUS_STATUS;
	            other.PAYMENT_TERMS_CODE = this.PAYMENT_TERMS_CODE;
	            other.PERSONAL_GURANTEE_INDICATOR = this.PERSONAL_GURANTEE_INDICATOR;
	            other.PERSONAL_GURANTEE_EXPIRATION_DATE = this.PERSONAL_GURANTEE_EXPIRATION_DATE;
	            other.PERSONAL_GURANTEE_TASK_INDICATOR = this.PERSONAL_GURANTEE_TASK_INDICATOR;
	            other.SALES_TAX_LAST_REVIEW_DATE = this.SALES_TAX_LAST_REVIEW_DATE;
	            other.SALES_TAX_REVIEW_INDICATOR = this.SALES_TAX_REVIEW_INDICATOR;
	            other.LOCAL_TYPE_OF_OPERATION = this.LOCAL_TYPE_OF_OPERATION;
	            other.PO_NO_EXPIRATION_DATE = this.PO_NO_EXPIRATION_DATE;
	            other.PO_NO_TASK_INDICATOR = this.PO_NO_TASK_INDICATOR;
	            other.AUDIT_SEQUENCE_NO = this.AUDIT_SEQUENCE_NO;
	            other.SEQUENCE_CHART_IDENTIFIER = this.SEQUENCE_CHART_IDENTIFIER;
	            other.STOP_DATE = this.STOP_DATE;
	            other.SEQUENCE_CHART_TYPE = this.SEQUENCE_CHART_TYPE;
	            other.STOP_COUNTER = this.STOP_COUNTER;
	            other.DEFAULT_PICKING_TIME_ZONE_MONDAY = this.DEFAULT_PICKING_TIME_ZONE_MONDAY;
	            other.DEFAULT_PICKING_TIME_ZONE_TUESDAY = this.DEFAULT_PICKING_TIME_ZONE_TUESDAY;
	            other.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY = this.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY;
	            other.DEFAULT_PICKING_TIME_ZONE_THURSDAY = this.DEFAULT_PICKING_TIME_ZONE_THURSDAY;
	            other.DEFAULT_PICKING_TIME_ZONE_FRIDAY = this.DEFAULT_PICKING_TIME_ZONE_FRIDAY;
	            other.DEFAULT_PICKING_TIME_ZONE_SATURDAY = this.DEFAULT_PICKING_TIME_ZONE_SATURDAY;
	            other.DEFAULT_PICKING_TIME_ZONE_SUNDAY = this.DEFAULT_PICKING_TIME_ZONE_SUNDAY;
	            other.OTHER_CONTACT_NAME = this.OTHER_CONTACT_NAME;
	            other.MAIL_ADDRESS_NAME = this.MAIL_ADDRESS_NAME;
	            other.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN = this.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN;
	            other.ITEM_OVERRIDES_CHART_ORIGIN = this.ITEM_OVERRIDES_CHART_ORIGIN;
	            other.SEQUENCE_CHART_ORIGIN = this.SEQUENCE_CHART_ORIGIN;
	            other.PENDING_TERMS_APPROVAL = this.PENDING_TERMS_APPROVAL;
	            other.DESIGNATED_DELIVERY_DAYS_1 = this.DESIGNATED_DELIVERY_DAYS_1;
	            other.DESIGNATED_SALESMAN_CALL_DAYS = this.DESIGNATED_SALESMAN_CALL_DAYS;
	            other.BUSINESS_HOURS_DAYS_1 = this.BUSINESS_HOURS_DAYS_1;
	            other.BUSINESS_HOURS_DAYS_2 = this.BUSINESS_HOURS_DAYS_2;
	            other.TAX_AUTHORITY_NO = this.TAX_AUTHORITY_NO;
	            other.PRICE_RULE_NAME = this.PRICE_RULE_NAME;
	            other.STOP_CODE = this.STOP_CODE;
	            other.BUSINESS_HOURS_FROM_2 = this.BUSINESS_HOURS_FROM_2;
	            other.BUSINESS_HOURS_FROM_AM_PM_2 = this.BUSINESS_HOURS_FROM_AM_PM_2;
	            other.BUSINESS_HOURS_TO_2 = this.BUSINESS_HOURS_TO_2;
	            other.BUSINESS_HOURS_TO_AM_PM_2 = this.BUSINESS_HOURS_TO_AM_PM_2;
	            other.TERRITORY_OVERRIDE_FLAG = this.TERRITORY_OVERRIDE_FLAG;
	            other.TAX_EXEMPT_APPROVAL_PENDING = this.TAX_EXEMPT_APPROVAL_PENDING;
	            other.RESTOCK_FEE_APPROVAL_PENDING = this.RESTOCK_FEE_APPROVAL_PENDING;
	            other.CREDIT_STOP_APPROVAL_PENDING = this.CREDIT_STOP_APPROVAL_PENDING;
	            other.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING = this.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING;
	            other.APPLICATION_RULE_NAME = this.APPLICATION_RULE_NAME;
	            other.SUBSTITUTION_RULE_NAME = this.SUBSTITUTION_RULE_NAME;
	            other.MINIMUM_RULE_NAME = this.MINIMUM_RULE_NAME;
	            other.MAXIMUM_RULE_NAME = this.MAXIMUM_RULE_NAME;
	            other.COMMISSION_BASE_RULE_NAME = this.COMMISSION_BASE_RULE_NAME;
	            other.HAND_PRICE_RESTRICTION_RULE_NAME = this.HAND_PRICE_RESTRICTION_RULE_NAME;
	            other.ESTIMATED_MARKET_SHARE = this.ESTIMATED_MARKET_SHARE;
	            other.ESTIMATED_WEEKLY_MARKET_POTENTIAL = this.ESTIMATED_WEEKLY_MARKET_POTENTIAL;
	            other.TAX_EXEMPT_EXPIRATION_DATE = this.TAX_EXEMPT_EXPIRATION_DATE;
	            other.TAX_EXEMPT_FLAG = this.TAX_EXEMPT_FLAG;
	            other.REACTIVATION_APPROVAL_PENDING = this.REACTIVATION_APPROVAL_PENDING;
	            other.AGING_POLICY_APPROVAL_PENDING = this.AGING_POLICY_APPROVAL_PENDING;
	            other.DISCOUNT_GRACE_APPROVAL_PENDING = this.DISCOUNT_GRACE_APPROVAL_PENDING;
	            other.NET_DUE_GRACE_APPROVAL_PENDING = this.NET_DUE_GRACE_APPROVAL_PENDING;
	            other.MSP_TARGET_CUSTOMER_SPECIFICATIONS = this.MSP_TARGET_CUSTOMER_SPECIFICATIONS;
	            other.ACTIVE_OR_INACTIVE_APPROVAL_PENDING = this.ACTIVE_OR_INACTIVE_APPROVAL_PENDING;
	            other.CUSTOMER_ENTITY_TYPE = this.CUSTOMER_ENTITY_TYPE;
	            other.STATE = this.STATE;
	            other.COMMODITY_FLAG = this.COMMODITY_FLAG;
	            other.NO_OF_OPEN_ORDERS = this.NO_OF_OPEN_ORDERS;
	            other.OPEN_ORDER_AMOUNT = this.OPEN_ORDER_AMOUNT;
	            other.KOSHER_CUSTOMER = this.KOSHER_CUSTOMER;
	            other.LAPTOP_ZID_NO = this.LAPTOP_ZID_NO;
	            other.SYSCO_SALES_COMPANION = this.SYSCO_SALES_COMPANION;
	            other.OFF_STOP_DATE = this.OFF_STOP_DATE;
	            other.LAPTOP_USER_FLAG = this.LAPTOP_USER_FLAG;
	            other.THIRD_PARTY_CUSTOMER_FLAG = this.THIRD_PARTY_CUSTOMER_FLAG;
	            other.CREDIT_HIERARCHY_MASTER_COMPANY = this.CREDIT_HIERARCHY_MASTER_COMPANY;
	            other.CREDIT_HIERARCHY_MASTER_COMPANY_NO = this.CREDIT_HIERARCHY_MASTER_COMPANY_NO;
	            other.SHIP_AVAILABLE_FLAG = this.SHIP_AVAILABLE_FLAG;
	            other.MAPSCO_MAP_CODE = this.MAPSCO_MAP_CODE;
	            other.APPLICATION_RULE_DEFAULT_FLAG = this.APPLICATION_RULE_DEFAULT_FLAG;
	            other.PRICE_RULE_DEFAULT_FLAG = this.PRICE_RULE_DEFAULT_FLAG;
	            other.SUBSTITUTION_RULE_DEFAULT_FLAG = this.SUBSTITUTION_RULE_DEFAULT_FLAG;
	            other.MINIMUM_RULE_DEFAULT_FLAG = this.MINIMUM_RULE_DEFAULT_FLAG;
	            other.MAXIMUM_RULE_DEFAULT_FLAG = this.MAXIMUM_RULE_DEFAULT_FLAG;
	            other.COMMISSION_BASE_RULE_DEFAULT_FLAG = this.COMMISSION_BASE_RULE_DEFAULT_FLAG;
	            other.HAND_PRICE_RULE_DEFAULT_FLAG = this.HAND_PRICE_RULE_DEFAULT_FLAG;
	            other.DEFAULT_ROUTE_MONDAY = this.DEFAULT_ROUTE_MONDAY;
	            other.DEFAULT_ROUTE_TUESDAY = this.DEFAULT_ROUTE_TUESDAY;
	            other.DEFAULT_ROUTE_WEDNESDAY = this.DEFAULT_ROUTE_WEDNESDAY;
	            other.DEFAULT_ROUTE_THURSDAY = this.DEFAULT_ROUTE_THURSDAY;
	            other.DEFAULT_ROUTE_FRIDAY = this.DEFAULT_ROUTE_FRIDAY;
	            other.DEFAULT_ROUTE_SATURDAY = this.DEFAULT_ROUTE_SATURDAY;
	            other.LATITUDE_COORDINATES = this.LATITUDE_COORDINATES;
	            other.LONGITUDE_COORDINATES = this.LONGITUDE_COORDINATES;
	            other.FREQUENCY_DOWNLOAD = this.FREQUENCY_DOWNLOAD;
	            other.FREQUENCY_CODE = this.FREQUENCY_CODE;
	            other.LAPTOP_EXCEPTION_LEVEL = this.LAPTOP_EXCEPTION_LEVEL;
	            other.THIRD_PARTY_OG_OPTIONS = this.THIRD_PARTY_OG_OPTIONS;
	            other.SERVICE_CHARGE = this.SERVICE_CHARGE;
	            other.PRIMARY_SHIP_TO = this.PRIMARY_SHIP_TO;
	            other.DELIVERY_DIFFICULTY_RATING = this.DELIVERY_DIFFICULTY_RATING;
	            other.BILL_TO_CORP_PRICING_PARENT_COMPANY = this.BILL_TO_CORP_PRICING_PARENT_COMPANY;
	            other.BILL_TO_CORP_PRICING_PARENT = this.BILL_TO_CORP_PRICING_PARENT;
	            other.CORP_HIERARCHY_MASTER_COMPANY = this.CORP_HIERARCHY_MASTER_COMPANY;
	            other.CORP_HIERARCHY_MASTER = this.CORP_HIERARCHY_MASTER;
	            other.LOCATION_ID = this.LOCATION_ID;
	            other.PRICE_RULE_SRC_COMPANY = this.PRICE_RULE_SRC_COMPANY;
	            other.APPLICATION_RULE_SRC_COMPANY = this.APPLICATION_RULE_SRC_COMPANY;
	            other.SUBSTITUTE_RULE_SRC_COMPANY = this.SUBSTITUTE_RULE_SRC_COMPANY;
	            other.MINIMUM_RULE_SRC_COMPANY = this.MINIMUM_RULE_SRC_COMPANY;
	            other.MAXIMUM_RULE_SRC_COMPANY = this.MAXIMUM_RULE_SRC_COMPANY;
	            other.COMMISSION_BASE_RULE_SRC_COMPANY = this.COMMISSION_BASE_RULE_SRC_COMPANY;
	            other.HAND_PRICE_REST_RULE_SRC_COMPANY = this.HAND_PRICE_REST_RULE_SRC_COMPANY;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.JOPF_SVOP = this.JOPF_SVOP;
	            
	}

	public void copyKeysDataTo(CUSTOMER_SHIP_TOStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.AR_COMPANY = this.AR_COMPANY;
	            	other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.AR_COMPANY = readString(dis);
					
					this.SHIP_TO_CUST = readString(dis);
					
					this.NATIONAL_ACCOUNT_NO = readString(dis);
					
					this.DELIVERY_CODE = readString(dis);
					
					this.SHIP_TO_STORE_NO = readString(dis);
					
					this.PALLET_LOAD = readString(dis);
					
					this.ORDER_APPROVAL_REQUIRED = readString(dis);
					
					this.PO_REQUIRED = readString(dis);
					
					this.BUSINESS_HOURS_FROM_1 = readString(dis);
					
					this.BUSINESS_HOURS_FROM_AM_PM_1 = readString(dis);
					
					this.BUSINESS_HOURS_TO_1 = readString(dis);
					
					this.BUSINESS_HOURS_TO_AM_PM_1 = readString(dis);
					
					this.NO_DELIVERIES_FROM_1 = readString(dis);
					
					this.NO_DELIVERIES_FROM_AM_PM_1 = readString(dis);
					
					this.NO_DELIVERIES_TO_1 = readString(dis);
					
					this.NO_DELIVERIES_TO_AM_PM_1 = readString(dis);
					
					this.NO_DELIVERIES_FROM_2 = readString(dis);
					
					this.NO_DELIVERIES_FROM_AM_PM_2 = readString(dis);
					
					this.NO_DELIVERIES_TO_2 = readString(dis);
					
					this.NO_DELIVERIES_TO_AM_PM_2 = readString(dis);
					
					this.NO_DELIVERIES_FROM_3 = readString(dis);
					
					this.NO_DELIVERIES_FROM_AM_PM_3 = readString(dis);
					
					this.NO_DELIVERIES_TO_3 = readString(dis);
					
					this.NO_DELIVERIES_TO_AM_PM_3 = readString(dis);
					
					this.NO_DELIVERIES_FROM_4 = readString(dis);
					
					this.NO_DELIVERIES_FROM_AM_PM_4 = readString(dis);
					
					this.NO_DELIVERIES_TO_4 = readString(dis);
					
					this.NO_DELIVERIES_TO_AM_PM_4 = readString(dis);
					
					this.SEPARATE_OR_COMBINE_BY_PO = readString(dis);
					
					this.PRINT_OR_EDI_STATUS = readString(dis);
					
					this.SUMMARY_REPORT = readString(dis);
					
					this.EXTERNAL_DESIRED_NO_OF_COPIES = readString(dis);
					
					this.SHIPPING_DOCUMENT_OR_INVOICE = readString(dis);
					
					this.INTERNAL_DESIRED_NO_OF_COPIES = readString(dis);
					
					this.RESTOCK_FEE = readString(dis);
					
					this.ACCOUNT_TYPE = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_FROM_1 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_TO_1 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_FROM_2 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_TO_2 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2 = readString(dis);
					
					this.CORPORATE_TYPE_OF_OPERATION = readString(dis);
					
					this.CUISINE = readString(dis);
					
					this.PROFILE_CREATION_DATE = readString(dis);
					
					this.PROFILE_ARCHIVE_DATE = readString(dis);
					
					this.ITEM_OVERRIDE_CHART_ID = readString(dis);
					
					this.DEFAULT_SUBSTITUTE_TYPE = readString(dis);
					
					this.DEFAULT_RESTRICT_TYPE = readString(dis);
					
					this.RESTRICT_OR_SUB_CHART_ID = readString(dis);
					
					this.FORCED_SUBSTITUTION = readString(dis);
					
					this.DEPARTMENTS_INDICATOR = readString(dis);
					
					this.PARTIAL_FILL = readString(dis);
					
					this.NON_PROFIT_FLAG = readString(dis);
					
					this.MISCELLANEOUS_TAX_EXEMPT = readString(dis);
					
					this.OWNER_NAME = readString(dis);
					
					this.TERRITORY_CODE = readString(dis);
					
					this.MAIL_ADDRESS_1 = readString(dis);
					
					this.MAIL_ADDRESS_2 = readString(dis);
					
					this.MAIL_ADDRESS_3 = readString(dis);
					
					this.MAIL_CITY = readString(dis);
					
					this.MAIL_STATE_CODE = readString(dis);
					
					this.MAIL_ZIP_CODE = readString(dis);
					
					this.COUNTRY_CODE = readString(dis);
					
					this.CENSUS_STATE_CODE = readString(dis);
					
					this.IMMEDIATE_ALLOC_FLAG = readString(dis);
					
					this.CUSTOMER_SHIP_TO_STATUS = readString(dis);
					
					this.RESTRICTION_CHART_TYPE = readString(dis);
					
					this.ITEM_OVERRIDE_CHART_TYPE = readString(dis);
					
					this.RECORD_CHANGE_FLAG = readString(dis);
					
					this.ORDERS_PLACED_FLAG = readString(dis);
					
					this.ASSIGN_CODES_BY_DEPT = readString(dis);
					
					this.VENDOR_NO = readString(dis);
					
					this.VENDOR_SUFFIX = readString(dis);
					
					this.RECORD_TYPE_INDICATOR = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.CUSTOMER_COMMODITY_CODE = readString(dis);
					
					this.PREVIOUS_STATUS = readString(dis);
					
					this.PAYMENT_TERMS_CODE = readString(dis);
					
					this.PERSONAL_GURANTEE_INDICATOR = readString(dis);
					
					this.PERSONAL_GURANTEE_EXPIRATION_DATE = readString(dis);
					
					this.PERSONAL_GURANTEE_TASK_INDICATOR = readString(dis);
					
					this.SALES_TAX_LAST_REVIEW_DATE = readString(dis);
					
					this.SALES_TAX_REVIEW_INDICATOR = readString(dis);
					
					this.LOCAL_TYPE_OF_OPERATION = readString(dis);
					
					this.PO_NO_EXPIRATION_DATE = readString(dis);
					
					this.PO_NO_TASK_INDICATOR = readString(dis);
					
					this.AUDIT_SEQUENCE_NO = readString(dis);
					
					this.SEQUENCE_CHART_IDENTIFIER = readString(dis);
					
					this.STOP_DATE = readString(dis);
					
					this.SEQUENCE_CHART_TYPE = readString(dis);
					
					this.STOP_COUNTER = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_MONDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_TUESDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_THURSDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_FRIDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_SATURDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_SUNDAY = readString(dis);
					
					this.OTHER_CONTACT_NAME = readString(dis);
					
					this.MAIL_ADDRESS_NAME = readString(dis);
					
					this.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN = readString(dis);
					
					this.ITEM_OVERRIDES_CHART_ORIGIN = readString(dis);
					
					this.SEQUENCE_CHART_ORIGIN = readString(dis);
					
					this.PENDING_TERMS_APPROVAL = readString(dis);
					
					this.DESIGNATED_DELIVERY_DAYS_1 = readString(dis);
					
					this.DESIGNATED_SALESMAN_CALL_DAYS = readString(dis);
					
					this.BUSINESS_HOURS_DAYS_1 = readString(dis);
					
					this.BUSINESS_HOURS_DAYS_2 = readString(dis);
					
					this.TAX_AUTHORITY_NO = readString(dis);
					
					this.PRICE_RULE_NAME = readString(dis);
					
					this.STOP_CODE = readString(dis);
					
					this.BUSINESS_HOURS_FROM_2 = readString(dis);
					
					this.BUSINESS_HOURS_FROM_AM_PM_2 = readString(dis);
					
					this.BUSINESS_HOURS_TO_2 = readString(dis);
					
					this.BUSINESS_HOURS_TO_AM_PM_2 = readString(dis);
					
					this.TERRITORY_OVERRIDE_FLAG = readString(dis);
					
					this.TAX_EXEMPT_APPROVAL_PENDING = readString(dis);
					
					this.RESTOCK_FEE_APPROVAL_PENDING = readString(dis);
					
					this.CREDIT_STOP_APPROVAL_PENDING = readString(dis);
					
					this.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING = readString(dis);
					
					this.APPLICATION_RULE_NAME = readString(dis);
					
					this.SUBSTITUTION_RULE_NAME = readString(dis);
					
					this.MINIMUM_RULE_NAME = readString(dis);
					
					this.MAXIMUM_RULE_NAME = readString(dis);
					
					this.COMMISSION_BASE_RULE_NAME = readString(dis);
					
					this.HAND_PRICE_RESTRICTION_RULE_NAME = readString(dis);
					
						this.ESTIMATED_MARKET_SHARE = (BigDecimal) dis.readObject();
					
						this.ESTIMATED_WEEKLY_MARKET_POTENTIAL = (BigDecimal) dis.readObject();
					
					this.TAX_EXEMPT_EXPIRATION_DATE = readString(dis);
					
					this.TAX_EXEMPT_FLAG = readString(dis);
					
					this.REACTIVATION_APPROVAL_PENDING = readString(dis);
					
					this.AGING_POLICY_APPROVAL_PENDING = readString(dis);
					
					this.DISCOUNT_GRACE_APPROVAL_PENDING = readString(dis);
					
					this.NET_DUE_GRACE_APPROVAL_PENDING = readString(dis);
					
					this.MSP_TARGET_CUSTOMER_SPECIFICATIONS = readString(dis);
					
					this.ACTIVE_OR_INACTIVE_APPROVAL_PENDING = readString(dis);
					
					this.CUSTOMER_ENTITY_TYPE = readString(dis);
					
					this.STATE = readString(dis);
					
					this.COMMODITY_FLAG = readString(dis);
					
					this.NO_OF_OPEN_ORDERS = readString(dis);
					
						this.OPEN_ORDER_AMOUNT = (BigDecimal) dis.readObject();
					
					this.KOSHER_CUSTOMER = readString(dis);
					
					this.LAPTOP_ZID_NO = readString(dis);
					
					this.SYSCO_SALES_COMPANION = readString(dis);
					
					this.OFF_STOP_DATE = readString(dis);
					
					this.LAPTOP_USER_FLAG = readString(dis);
					
					this.THIRD_PARTY_CUSTOMER_FLAG = readString(dis);
					
					this.CREDIT_HIERARCHY_MASTER_COMPANY = readString(dis);
					
					this.CREDIT_HIERARCHY_MASTER_COMPANY_NO = readString(dis);
					
					this.SHIP_AVAILABLE_FLAG = readString(dis);
					
					this.MAPSCO_MAP_CODE = readString(dis);
					
					this.APPLICATION_RULE_DEFAULT_FLAG = readString(dis);
					
					this.PRICE_RULE_DEFAULT_FLAG = readString(dis);
					
					this.SUBSTITUTION_RULE_DEFAULT_FLAG = readString(dis);
					
					this.MINIMUM_RULE_DEFAULT_FLAG = readString(dis);
					
					this.MAXIMUM_RULE_DEFAULT_FLAG = readString(dis);
					
					this.COMMISSION_BASE_RULE_DEFAULT_FLAG = readString(dis);
					
					this.HAND_PRICE_RULE_DEFAULT_FLAG = readString(dis);
					
					this.DEFAULT_ROUTE_MONDAY = readString(dis);
					
					this.DEFAULT_ROUTE_TUESDAY = readString(dis);
					
					this.DEFAULT_ROUTE_WEDNESDAY = readString(dis);
					
					this.DEFAULT_ROUTE_THURSDAY = readString(dis);
					
					this.DEFAULT_ROUTE_FRIDAY = readString(dis);
					
					this.DEFAULT_ROUTE_SATURDAY = readString(dis);
					
					this.LATITUDE_COORDINATES = readString(dis);
					
					this.LONGITUDE_COORDINATES = readString(dis);
					
					this.FREQUENCY_DOWNLOAD = readString(dis);
					
					this.FREQUENCY_CODE = readString(dis);
					
					this.LAPTOP_EXCEPTION_LEVEL = readString(dis);
					
					this.THIRD_PARTY_OG_OPTIONS = readString(dis);
					
					this.SERVICE_CHARGE = readString(dis);
					
					this.PRIMARY_SHIP_TO = readString(dis);
					
					this.DELIVERY_DIFFICULTY_RATING = readString(dis);
					
					this.BILL_TO_CORP_PRICING_PARENT_COMPANY = readString(dis);
					
					this.BILL_TO_CORP_PRICING_PARENT = readString(dis);
					
					this.CORP_HIERARCHY_MASTER_COMPANY = readString(dis);
					
					this.CORP_HIERARCHY_MASTER = readString(dis);
					
					this.LOCATION_ID = readString(dis);
					
					this.PRICE_RULE_SRC_COMPANY = readString(dis);
					
					this.APPLICATION_RULE_SRC_COMPANY = readString(dis);
					
					this.SUBSTITUTE_RULE_SRC_COMPANY = readString(dis);
					
					this.MINIMUM_RULE_SRC_COMPANY = readString(dis);
					
					this.MAXIMUM_RULE_SRC_COMPANY = readString(dis);
					
					this.COMMISSION_BASE_RULE_SRC_COMPANY = readString(dis);
					
					this.HAND_PRICE_REST_RULE_SRC_COMPANY = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.JOPF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.AR_COMPANY = readString(dis);
					
					this.SHIP_TO_CUST = readString(dis);
					
					this.NATIONAL_ACCOUNT_NO = readString(dis);
					
					this.DELIVERY_CODE = readString(dis);
					
					this.SHIP_TO_STORE_NO = readString(dis);
					
					this.PALLET_LOAD = readString(dis);
					
					this.ORDER_APPROVAL_REQUIRED = readString(dis);
					
					this.PO_REQUIRED = readString(dis);
					
					this.BUSINESS_HOURS_FROM_1 = readString(dis);
					
					this.BUSINESS_HOURS_FROM_AM_PM_1 = readString(dis);
					
					this.BUSINESS_HOURS_TO_1 = readString(dis);
					
					this.BUSINESS_HOURS_TO_AM_PM_1 = readString(dis);
					
					this.NO_DELIVERIES_FROM_1 = readString(dis);
					
					this.NO_DELIVERIES_FROM_AM_PM_1 = readString(dis);
					
					this.NO_DELIVERIES_TO_1 = readString(dis);
					
					this.NO_DELIVERIES_TO_AM_PM_1 = readString(dis);
					
					this.NO_DELIVERIES_FROM_2 = readString(dis);
					
					this.NO_DELIVERIES_FROM_AM_PM_2 = readString(dis);
					
					this.NO_DELIVERIES_TO_2 = readString(dis);
					
					this.NO_DELIVERIES_TO_AM_PM_2 = readString(dis);
					
					this.NO_DELIVERIES_FROM_3 = readString(dis);
					
					this.NO_DELIVERIES_FROM_AM_PM_3 = readString(dis);
					
					this.NO_DELIVERIES_TO_3 = readString(dis);
					
					this.NO_DELIVERIES_TO_AM_PM_3 = readString(dis);
					
					this.NO_DELIVERIES_FROM_4 = readString(dis);
					
					this.NO_DELIVERIES_FROM_AM_PM_4 = readString(dis);
					
					this.NO_DELIVERIES_TO_4 = readString(dis);
					
					this.NO_DELIVERIES_TO_AM_PM_4 = readString(dis);
					
					this.SEPARATE_OR_COMBINE_BY_PO = readString(dis);
					
					this.PRINT_OR_EDI_STATUS = readString(dis);
					
					this.SUMMARY_REPORT = readString(dis);
					
					this.EXTERNAL_DESIRED_NO_OF_COPIES = readString(dis);
					
					this.SHIPPING_DOCUMENT_OR_INVOICE = readString(dis);
					
					this.INTERNAL_DESIRED_NO_OF_COPIES = readString(dis);
					
					this.RESTOCK_FEE = readString(dis);
					
					this.ACCOUNT_TYPE = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_FROM_1 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_TO_1 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_FROM_2 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_TO_2 = readString(dis);
					
					this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2 = readString(dis);
					
					this.CORPORATE_TYPE_OF_OPERATION = readString(dis);
					
					this.CUISINE = readString(dis);
					
					this.PROFILE_CREATION_DATE = readString(dis);
					
					this.PROFILE_ARCHIVE_DATE = readString(dis);
					
					this.ITEM_OVERRIDE_CHART_ID = readString(dis);
					
					this.DEFAULT_SUBSTITUTE_TYPE = readString(dis);
					
					this.DEFAULT_RESTRICT_TYPE = readString(dis);
					
					this.RESTRICT_OR_SUB_CHART_ID = readString(dis);
					
					this.FORCED_SUBSTITUTION = readString(dis);
					
					this.DEPARTMENTS_INDICATOR = readString(dis);
					
					this.PARTIAL_FILL = readString(dis);
					
					this.NON_PROFIT_FLAG = readString(dis);
					
					this.MISCELLANEOUS_TAX_EXEMPT = readString(dis);
					
					this.OWNER_NAME = readString(dis);
					
					this.TERRITORY_CODE = readString(dis);
					
					this.MAIL_ADDRESS_1 = readString(dis);
					
					this.MAIL_ADDRESS_2 = readString(dis);
					
					this.MAIL_ADDRESS_3 = readString(dis);
					
					this.MAIL_CITY = readString(dis);
					
					this.MAIL_STATE_CODE = readString(dis);
					
					this.MAIL_ZIP_CODE = readString(dis);
					
					this.COUNTRY_CODE = readString(dis);
					
					this.CENSUS_STATE_CODE = readString(dis);
					
					this.IMMEDIATE_ALLOC_FLAG = readString(dis);
					
					this.CUSTOMER_SHIP_TO_STATUS = readString(dis);
					
					this.RESTRICTION_CHART_TYPE = readString(dis);
					
					this.ITEM_OVERRIDE_CHART_TYPE = readString(dis);
					
					this.RECORD_CHANGE_FLAG = readString(dis);
					
					this.ORDERS_PLACED_FLAG = readString(dis);
					
					this.ASSIGN_CODES_BY_DEPT = readString(dis);
					
					this.VENDOR_NO = readString(dis);
					
					this.VENDOR_SUFFIX = readString(dis);
					
					this.RECORD_TYPE_INDICATOR = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.CUSTOMER_COMMODITY_CODE = readString(dis);
					
					this.PREVIOUS_STATUS = readString(dis);
					
					this.PAYMENT_TERMS_CODE = readString(dis);
					
					this.PERSONAL_GURANTEE_INDICATOR = readString(dis);
					
					this.PERSONAL_GURANTEE_EXPIRATION_DATE = readString(dis);
					
					this.PERSONAL_GURANTEE_TASK_INDICATOR = readString(dis);
					
					this.SALES_TAX_LAST_REVIEW_DATE = readString(dis);
					
					this.SALES_TAX_REVIEW_INDICATOR = readString(dis);
					
					this.LOCAL_TYPE_OF_OPERATION = readString(dis);
					
					this.PO_NO_EXPIRATION_DATE = readString(dis);
					
					this.PO_NO_TASK_INDICATOR = readString(dis);
					
					this.AUDIT_SEQUENCE_NO = readString(dis);
					
					this.SEQUENCE_CHART_IDENTIFIER = readString(dis);
					
					this.STOP_DATE = readString(dis);
					
					this.SEQUENCE_CHART_TYPE = readString(dis);
					
					this.STOP_COUNTER = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_MONDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_TUESDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_THURSDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_FRIDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_SATURDAY = readString(dis);
					
					this.DEFAULT_PICKING_TIME_ZONE_SUNDAY = readString(dis);
					
					this.OTHER_CONTACT_NAME = readString(dis);
					
					this.MAIL_ADDRESS_NAME = readString(dis);
					
					this.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN = readString(dis);
					
					this.ITEM_OVERRIDES_CHART_ORIGIN = readString(dis);
					
					this.SEQUENCE_CHART_ORIGIN = readString(dis);
					
					this.PENDING_TERMS_APPROVAL = readString(dis);
					
					this.DESIGNATED_DELIVERY_DAYS_1 = readString(dis);
					
					this.DESIGNATED_SALESMAN_CALL_DAYS = readString(dis);
					
					this.BUSINESS_HOURS_DAYS_1 = readString(dis);
					
					this.BUSINESS_HOURS_DAYS_2 = readString(dis);
					
					this.TAX_AUTHORITY_NO = readString(dis);
					
					this.PRICE_RULE_NAME = readString(dis);
					
					this.STOP_CODE = readString(dis);
					
					this.BUSINESS_HOURS_FROM_2 = readString(dis);
					
					this.BUSINESS_HOURS_FROM_AM_PM_2 = readString(dis);
					
					this.BUSINESS_HOURS_TO_2 = readString(dis);
					
					this.BUSINESS_HOURS_TO_AM_PM_2 = readString(dis);
					
					this.TERRITORY_OVERRIDE_FLAG = readString(dis);
					
					this.TAX_EXEMPT_APPROVAL_PENDING = readString(dis);
					
					this.RESTOCK_FEE_APPROVAL_PENDING = readString(dis);
					
					this.CREDIT_STOP_APPROVAL_PENDING = readString(dis);
					
					this.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING = readString(dis);
					
					this.APPLICATION_RULE_NAME = readString(dis);
					
					this.SUBSTITUTION_RULE_NAME = readString(dis);
					
					this.MINIMUM_RULE_NAME = readString(dis);
					
					this.MAXIMUM_RULE_NAME = readString(dis);
					
					this.COMMISSION_BASE_RULE_NAME = readString(dis);
					
					this.HAND_PRICE_RESTRICTION_RULE_NAME = readString(dis);
					
						this.ESTIMATED_MARKET_SHARE = (BigDecimal) dis.readObject();
					
						this.ESTIMATED_WEEKLY_MARKET_POTENTIAL = (BigDecimal) dis.readObject();
					
					this.TAX_EXEMPT_EXPIRATION_DATE = readString(dis);
					
					this.TAX_EXEMPT_FLAG = readString(dis);
					
					this.REACTIVATION_APPROVAL_PENDING = readString(dis);
					
					this.AGING_POLICY_APPROVAL_PENDING = readString(dis);
					
					this.DISCOUNT_GRACE_APPROVAL_PENDING = readString(dis);
					
					this.NET_DUE_GRACE_APPROVAL_PENDING = readString(dis);
					
					this.MSP_TARGET_CUSTOMER_SPECIFICATIONS = readString(dis);
					
					this.ACTIVE_OR_INACTIVE_APPROVAL_PENDING = readString(dis);
					
					this.CUSTOMER_ENTITY_TYPE = readString(dis);
					
					this.STATE = readString(dis);
					
					this.COMMODITY_FLAG = readString(dis);
					
					this.NO_OF_OPEN_ORDERS = readString(dis);
					
						this.OPEN_ORDER_AMOUNT = (BigDecimal) dis.readObject();
					
					this.KOSHER_CUSTOMER = readString(dis);
					
					this.LAPTOP_ZID_NO = readString(dis);
					
					this.SYSCO_SALES_COMPANION = readString(dis);
					
					this.OFF_STOP_DATE = readString(dis);
					
					this.LAPTOP_USER_FLAG = readString(dis);
					
					this.THIRD_PARTY_CUSTOMER_FLAG = readString(dis);
					
					this.CREDIT_HIERARCHY_MASTER_COMPANY = readString(dis);
					
					this.CREDIT_HIERARCHY_MASTER_COMPANY_NO = readString(dis);
					
					this.SHIP_AVAILABLE_FLAG = readString(dis);
					
					this.MAPSCO_MAP_CODE = readString(dis);
					
					this.APPLICATION_RULE_DEFAULT_FLAG = readString(dis);
					
					this.PRICE_RULE_DEFAULT_FLAG = readString(dis);
					
					this.SUBSTITUTION_RULE_DEFAULT_FLAG = readString(dis);
					
					this.MINIMUM_RULE_DEFAULT_FLAG = readString(dis);
					
					this.MAXIMUM_RULE_DEFAULT_FLAG = readString(dis);
					
					this.COMMISSION_BASE_RULE_DEFAULT_FLAG = readString(dis);
					
					this.HAND_PRICE_RULE_DEFAULT_FLAG = readString(dis);
					
					this.DEFAULT_ROUTE_MONDAY = readString(dis);
					
					this.DEFAULT_ROUTE_TUESDAY = readString(dis);
					
					this.DEFAULT_ROUTE_WEDNESDAY = readString(dis);
					
					this.DEFAULT_ROUTE_THURSDAY = readString(dis);
					
					this.DEFAULT_ROUTE_FRIDAY = readString(dis);
					
					this.DEFAULT_ROUTE_SATURDAY = readString(dis);
					
					this.LATITUDE_COORDINATES = readString(dis);
					
					this.LONGITUDE_COORDINATES = readString(dis);
					
					this.FREQUENCY_DOWNLOAD = readString(dis);
					
					this.FREQUENCY_CODE = readString(dis);
					
					this.LAPTOP_EXCEPTION_LEVEL = readString(dis);
					
					this.THIRD_PARTY_OG_OPTIONS = readString(dis);
					
					this.SERVICE_CHARGE = readString(dis);
					
					this.PRIMARY_SHIP_TO = readString(dis);
					
					this.DELIVERY_DIFFICULTY_RATING = readString(dis);
					
					this.BILL_TO_CORP_PRICING_PARENT_COMPANY = readString(dis);
					
					this.BILL_TO_CORP_PRICING_PARENT = readString(dis);
					
					this.CORP_HIERARCHY_MASTER_COMPANY = readString(dis);
					
					this.CORP_HIERARCHY_MASTER = readString(dis);
					
					this.LOCATION_ID = readString(dis);
					
					this.PRICE_RULE_SRC_COMPANY = readString(dis);
					
					this.APPLICATION_RULE_SRC_COMPANY = readString(dis);
					
					this.SUBSTITUTE_RULE_SRC_COMPANY = readString(dis);
					
					this.MINIMUM_RULE_SRC_COMPANY = readString(dis);
					
					this.MAXIMUM_RULE_SRC_COMPANY = readString(dis);
					
					this.COMMISSION_BASE_RULE_SRC_COMPANY = readString(dis);
					
					this.HAND_PRICE_REST_RULE_SRC_COMPANY = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.JOPF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.AR_COMPANY,dos);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// String
				
						writeString(this.NATIONAL_ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.DELIVERY_CODE,dos);
					
					// String
				
						writeString(this.SHIP_TO_STORE_NO,dos);
					
					// String
				
						writeString(this.PALLET_LOAD,dos);
					
					// String
				
						writeString(this.ORDER_APPROVAL_REQUIRED,dos);
					
					// String
				
						writeString(this.PO_REQUIRED,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_FROM_1,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_FROM_AM_PM_1,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_TO_1,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_TO_AM_PM_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_AM_PM_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_AM_PM_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_2,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_AM_PM_2,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_2,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_AM_PM_2,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_3,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_AM_PM_3,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_3,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_AM_PM_3,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_4,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_AM_PM_4,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_4,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_AM_PM_4,dos);
					
					// String
				
						writeString(this.SEPARATE_OR_COMBINE_BY_PO,dos);
					
					// String
				
						writeString(this.PRINT_OR_EDI_STATUS,dos);
					
					// String
				
						writeString(this.SUMMARY_REPORT,dos);
					
					// String
				
						writeString(this.EXTERNAL_DESIRED_NO_OF_COPIES,dos);
					
					// String
				
						writeString(this.SHIPPING_DOCUMENT_OR_INVOICE,dos);
					
					// String
				
						writeString(this.INTERNAL_DESIRED_NO_OF_COPIES,dos);
					
					// String
				
						writeString(this.RESTOCK_FEE,dos);
					
					// String
				
						writeString(this.ACCOUNT_TYPE,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_FROM_1,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_TO_1,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_FROM_2,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_TO_2,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2,dos);
					
					// String
				
						writeString(this.CORPORATE_TYPE_OF_OPERATION,dos);
					
					// String
				
						writeString(this.CUISINE,dos);
					
					// String
				
						writeString(this.PROFILE_CREATION_DATE,dos);
					
					// String
				
						writeString(this.PROFILE_ARCHIVE_DATE,dos);
					
					// String
				
						writeString(this.ITEM_OVERRIDE_CHART_ID,dos);
					
					// String
				
						writeString(this.DEFAULT_SUBSTITUTE_TYPE,dos);
					
					// String
				
						writeString(this.DEFAULT_RESTRICT_TYPE,dos);
					
					// String
				
						writeString(this.RESTRICT_OR_SUB_CHART_ID,dos);
					
					// String
				
						writeString(this.FORCED_SUBSTITUTION,dos);
					
					// String
				
						writeString(this.DEPARTMENTS_INDICATOR,dos);
					
					// String
				
						writeString(this.PARTIAL_FILL,dos);
					
					// String
				
						writeString(this.NON_PROFIT_FLAG,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_TAX_EXEMPT,dos);
					
					// String
				
						writeString(this.OWNER_NAME,dos);
					
					// String
				
						writeString(this.TERRITORY_CODE,dos);
					
					// String
				
						writeString(this.MAIL_ADDRESS_1,dos);
					
					// String
				
						writeString(this.MAIL_ADDRESS_2,dos);
					
					// String
				
						writeString(this.MAIL_ADDRESS_3,dos);
					
					// String
				
						writeString(this.MAIL_CITY,dos);
					
					// String
				
						writeString(this.MAIL_STATE_CODE,dos);
					
					// String
				
						writeString(this.MAIL_ZIP_CODE,dos);
					
					// String
				
						writeString(this.COUNTRY_CODE,dos);
					
					// String
				
						writeString(this.CENSUS_STATE_CODE,dos);
					
					// String
				
						writeString(this.IMMEDIATE_ALLOC_FLAG,dos);
					
					// String
				
						writeString(this.CUSTOMER_SHIP_TO_STATUS,dos);
					
					// String
				
						writeString(this.RESTRICTION_CHART_TYPE,dos);
					
					// String
				
						writeString(this.ITEM_OVERRIDE_CHART_TYPE,dos);
					
					// String
				
						writeString(this.RECORD_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.ORDERS_PLACED_FLAG,dos);
					
					// String
				
						writeString(this.ASSIGN_CODES_BY_DEPT,dos);
					
					// String
				
						writeString(this.VENDOR_NO,dos);
					
					// String
				
						writeString(this.VENDOR_SUFFIX,dos);
					
					// String
				
						writeString(this.RECORD_TYPE_INDICATOR,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.CUSTOMER_COMMODITY_CODE,dos);
					
					// String
				
						writeString(this.PREVIOUS_STATUS,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_CODE,dos);
					
					// String
				
						writeString(this.PERSONAL_GURANTEE_INDICATOR,dos);
					
					// String
				
						writeString(this.PERSONAL_GURANTEE_EXPIRATION_DATE,dos);
					
					// String
				
						writeString(this.PERSONAL_GURANTEE_TASK_INDICATOR,dos);
					
					// String
				
						writeString(this.SALES_TAX_LAST_REVIEW_DATE,dos);
					
					// String
				
						writeString(this.SALES_TAX_REVIEW_INDICATOR,dos);
					
					// String
				
						writeString(this.LOCAL_TYPE_OF_OPERATION,dos);
					
					// String
				
						writeString(this.PO_NO_EXPIRATION_DATE,dos);
					
					// String
				
						writeString(this.PO_NO_TASK_INDICATOR,dos);
					
					// String
				
						writeString(this.AUDIT_SEQUENCE_NO,dos);
					
					// String
				
						writeString(this.SEQUENCE_CHART_IDENTIFIER,dos);
					
					// String
				
						writeString(this.STOP_DATE,dos);
					
					// String
				
						writeString(this.SEQUENCE_CHART_TYPE,dos);
					
					// String
				
						writeString(this.STOP_COUNTER,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_MONDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_TUESDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_THURSDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_FRIDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_SATURDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_SUNDAY,dos);
					
					// String
				
						writeString(this.OTHER_CONTACT_NAME,dos);
					
					// String
				
						writeString(this.MAIL_ADDRESS_NAME,dos);
					
					// String
				
						writeString(this.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN,dos);
					
					// String
				
						writeString(this.ITEM_OVERRIDES_CHART_ORIGIN,dos);
					
					// String
				
						writeString(this.SEQUENCE_CHART_ORIGIN,dos);
					
					// String
				
						writeString(this.PENDING_TERMS_APPROVAL,dos);
					
					// String
				
						writeString(this.DESIGNATED_DELIVERY_DAYS_1,dos);
					
					// String
				
						writeString(this.DESIGNATED_SALESMAN_CALL_DAYS,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_DAYS_1,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_DAYS_2,dos);
					
					// String
				
						writeString(this.TAX_AUTHORITY_NO,dos);
					
					// String
				
						writeString(this.PRICE_RULE_NAME,dos);
					
					// String
				
						writeString(this.STOP_CODE,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_FROM_2,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_FROM_AM_PM_2,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_TO_2,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_TO_AM_PM_2,dos);
					
					// String
				
						writeString(this.TERRITORY_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.TAX_EXEMPT_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.RESTOCK_FEE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.CREDIT_STOP_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.APPLICATION_RULE_NAME,dos);
					
					// String
				
						writeString(this.SUBSTITUTION_RULE_NAME,dos);
					
					// String
				
						writeString(this.MINIMUM_RULE_NAME,dos);
					
					// String
				
						writeString(this.MAXIMUM_RULE_NAME,dos);
					
					// String
				
						writeString(this.COMMISSION_BASE_RULE_NAME,dos);
					
					// String
				
						writeString(this.HAND_PRICE_RESTRICTION_RULE_NAME,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTIMATED_MARKET_SHARE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTIMATED_WEEKLY_MARKET_POTENTIAL);
					
					// String
				
						writeString(this.TAX_EXEMPT_EXPIRATION_DATE,dos);
					
					// String
				
						writeString(this.TAX_EXEMPT_FLAG,dos);
					
					// String
				
						writeString(this.REACTIVATION_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.AGING_POLICY_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.NET_DUE_GRACE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.MSP_TARGET_CUSTOMER_SPECIFICATIONS,dos);
					
					// String
				
						writeString(this.ACTIVE_OR_INACTIVE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.CUSTOMER_ENTITY_TYPE,dos);
					
					// String
				
						writeString(this.STATE,dos);
					
					// String
				
						writeString(this.COMMODITY_FLAG,dos);
					
					// String
				
						writeString(this.NO_OF_OPEN_ORDERS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OPEN_ORDER_AMOUNT);
					
					// String
				
						writeString(this.KOSHER_CUSTOMER,dos);
					
					// String
				
						writeString(this.LAPTOP_ZID_NO,dos);
					
					// String
				
						writeString(this.SYSCO_SALES_COMPANION,dos);
					
					// String
				
						writeString(this.OFF_STOP_DATE,dos);
					
					// String
				
						writeString(this.LAPTOP_USER_FLAG,dos);
					
					// String
				
						writeString(this.THIRD_PARTY_CUSTOMER_FLAG,dos);
					
					// String
				
						writeString(this.CREDIT_HIERARCHY_MASTER_COMPANY,dos);
					
					// String
				
						writeString(this.CREDIT_HIERARCHY_MASTER_COMPANY_NO,dos);
					
					// String
				
						writeString(this.SHIP_AVAILABLE_FLAG,dos);
					
					// String
				
						writeString(this.MAPSCO_MAP_CODE,dos);
					
					// String
				
						writeString(this.APPLICATION_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.SUBSTITUTION_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.MINIMUM_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.MAXIMUM_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.COMMISSION_BASE_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.HAND_PRICE_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_MONDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_TUESDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_WEDNESDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_THURSDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_FRIDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_SATURDAY,dos);
					
					// String
				
						writeString(this.LATITUDE_COORDINATES,dos);
					
					// String
				
						writeString(this.LONGITUDE_COORDINATES,dos);
					
					// String
				
						writeString(this.FREQUENCY_DOWNLOAD,dos);
					
					// String
				
						writeString(this.FREQUENCY_CODE,dos);
					
					// String
				
						writeString(this.LAPTOP_EXCEPTION_LEVEL,dos);
					
					// String
				
						writeString(this.THIRD_PARTY_OG_OPTIONS,dos);
					
					// String
				
						writeString(this.SERVICE_CHARGE,dos);
					
					// String
				
						writeString(this.PRIMARY_SHIP_TO,dos);
					
					// String
				
						writeString(this.DELIVERY_DIFFICULTY_RATING,dos);
					
					// String
				
						writeString(this.BILL_TO_CORP_PRICING_PARENT_COMPANY,dos);
					
					// String
				
						writeString(this.BILL_TO_CORP_PRICING_PARENT,dos);
					
					// String
				
						writeString(this.CORP_HIERARCHY_MASTER_COMPANY,dos);
					
					// String
				
						writeString(this.CORP_HIERARCHY_MASTER,dos);
					
					// String
				
						writeString(this.LOCATION_ID,dos);
					
					// String
				
						writeString(this.PRICE_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.APPLICATION_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.SUBSTITUTE_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.MINIMUM_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.MAXIMUM_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.COMMISSION_BASE_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.HAND_PRICE_REST_RULE_SRC_COMPANY,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.JOPF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.AR_COMPANY,dos);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// String
				
						writeString(this.NATIONAL_ACCOUNT_NO,dos);
					
					// String
				
						writeString(this.DELIVERY_CODE,dos);
					
					// String
				
						writeString(this.SHIP_TO_STORE_NO,dos);
					
					// String
				
						writeString(this.PALLET_LOAD,dos);
					
					// String
				
						writeString(this.ORDER_APPROVAL_REQUIRED,dos);
					
					// String
				
						writeString(this.PO_REQUIRED,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_FROM_1,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_FROM_AM_PM_1,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_TO_1,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_TO_AM_PM_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_AM_PM_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_AM_PM_1,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_2,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_AM_PM_2,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_2,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_AM_PM_2,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_3,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_AM_PM_3,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_3,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_AM_PM_3,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_4,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_FROM_AM_PM_4,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_4,dos);
					
					// String
				
						writeString(this.NO_DELIVERIES_TO_AM_PM_4,dos);
					
					// String
				
						writeString(this.SEPARATE_OR_COMBINE_BY_PO,dos);
					
					// String
				
						writeString(this.PRINT_OR_EDI_STATUS,dos);
					
					// String
				
						writeString(this.SUMMARY_REPORT,dos);
					
					// String
				
						writeString(this.EXTERNAL_DESIRED_NO_OF_COPIES,dos);
					
					// String
				
						writeString(this.SHIPPING_DOCUMENT_OR_INVOICE,dos);
					
					// String
				
						writeString(this.INTERNAL_DESIRED_NO_OF_COPIES,dos);
					
					// String
				
						writeString(this.RESTOCK_FEE,dos);
					
					// String
				
						writeString(this.ACCOUNT_TYPE,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_FROM_1,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_TO_1,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_FROM_2,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_TO_2,dos);
					
					// String
				
						writeString(this.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2,dos);
					
					// String
				
						writeString(this.CORPORATE_TYPE_OF_OPERATION,dos);
					
					// String
				
						writeString(this.CUISINE,dos);
					
					// String
				
						writeString(this.PROFILE_CREATION_DATE,dos);
					
					// String
				
						writeString(this.PROFILE_ARCHIVE_DATE,dos);
					
					// String
				
						writeString(this.ITEM_OVERRIDE_CHART_ID,dos);
					
					// String
				
						writeString(this.DEFAULT_SUBSTITUTE_TYPE,dos);
					
					// String
				
						writeString(this.DEFAULT_RESTRICT_TYPE,dos);
					
					// String
				
						writeString(this.RESTRICT_OR_SUB_CHART_ID,dos);
					
					// String
				
						writeString(this.FORCED_SUBSTITUTION,dos);
					
					// String
				
						writeString(this.DEPARTMENTS_INDICATOR,dos);
					
					// String
				
						writeString(this.PARTIAL_FILL,dos);
					
					// String
				
						writeString(this.NON_PROFIT_FLAG,dos);
					
					// String
				
						writeString(this.MISCELLANEOUS_TAX_EXEMPT,dos);
					
					// String
				
						writeString(this.OWNER_NAME,dos);
					
					// String
				
						writeString(this.TERRITORY_CODE,dos);
					
					// String
				
						writeString(this.MAIL_ADDRESS_1,dos);
					
					// String
				
						writeString(this.MAIL_ADDRESS_2,dos);
					
					// String
				
						writeString(this.MAIL_ADDRESS_3,dos);
					
					// String
				
						writeString(this.MAIL_CITY,dos);
					
					// String
				
						writeString(this.MAIL_STATE_CODE,dos);
					
					// String
				
						writeString(this.MAIL_ZIP_CODE,dos);
					
					// String
				
						writeString(this.COUNTRY_CODE,dos);
					
					// String
				
						writeString(this.CENSUS_STATE_CODE,dos);
					
					// String
				
						writeString(this.IMMEDIATE_ALLOC_FLAG,dos);
					
					// String
				
						writeString(this.CUSTOMER_SHIP_TO_STATUS,dos);
					
					// String
				
						writeString(this.RESTRICTION_CHART_TYPE,dos);
					
					// String
				
						writeString(this.ITEM_OVERRIDE_CHART_TYPE,dos);
					
					// String
				
						writeString(this.RECORD_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.ORDERS_PLACED_FLAG,dos);
					
					// String
				
						writeString(this.ASSIGN_CODES_BY_DEPT,dos);
					
					// String
				
						writeString(this.VENDOR_NO,dos);
					
					// String
				
						writeString(this.VENDOR_SUFFIX,dos);
					
					// String
				
						writeString(this.RECORD_TYPE_INDICATOR,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.CUSTOMER_COMMODITY_CODE,dos);
					
					// String
				
						writeString(this.PREVIOUS_STATUS,dos);
					
					// String
				
						writeString(this.PAYMENT_TERMS_CODE,dos);
					
					// String
				
						writeString(this.PERSONAL_GURANTEE_INDICATOR,dos);
					
					// String
				
						writeString(this.PERSONAL_GURANTEE_EXPIRATION_DATE,dos);
					
					// String
				
						writeString(this.PERSONAL_GURANTEE_TASK_INDICATOR,dos);
					
					// String
				
						writeString(this.SALES_TAX_LAST_REVIEW_DATE,dos);
					
					// String
				
						writeString(this.SALES_TAX_REVIEW_INDICATOR,dos);
					
					// String
				
						writeString(this.LOCAL_TYPE_OF_OPERATION,dos);
					
					// String
				
						writeString(this.PO_NO_EXPIRATION_DATE,dos);
					
					// String
				
						writeString(this.PO_NO_TASK_INDICATOR,dos);
					
					// String
				
						writeString(this.AUDIT_SEQUENCE_NO,dos);
					
					// String
				
						writeString(this.SEQUENCE_CHART_IDENTIFIER,dos);
					
					// String
				
						writeString(this.STOP_DATE,dos);
					
					// String
				
						writeString(this.SEQUENCE_CHART_TYPE,dos);
					
					// String
				
						writeString(this.STOP_COUNTER,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_MONDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_TUESDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_THURSDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_FRIDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_SATURDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_PICKING_TIME_ZONE_SUNDAY,dos);
					
					// String
				
						writeString(this.OTHER_CONTACT_NAME,dos);
					
					// String
				
						writeString(this.MAIL_ADDRESS_NAME,dos);
					
					// String
				
						writeString(this.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN,dos);
					
					// String
				
						writeString(this.ITEM_OVERRIDES_CHART_ORIGIN,dos);
					
					// String
				
						writeString(this.SEQUENCE_CHART_ORIGIN,dos);
					
					// String
				
						writeString(this.PENDING_TERMS_APPROVAL,dos);
					
					// String
				
						writeString(this.DESIGNATED_DELIVERY_DAYS_1,dos);
					
					// String
				
						writeString(this.DESIGNATED_SALESMAN_CALL_DAYS,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_DAYS_1,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_DAYS_2,dos);
					
					// String
				
						writeString(this.TAX_AUTHORITY_NO,dos);
					
					// String
				
						writeString(this.PRICE_RULE_NAME,dos);
					
					// String
				
						writeString(this.STOP_CODE,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_FROM_2,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_FROM_AM_PM_2,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_TO_2,dos);
					
					// String
				
						writeString(this.BUSINESS_HOURS_TO_AM_PM_2,dos);
					
					// String
				
						writeString(this.TERRITORY_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.TAX_EXEMPT_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.RESTOCK_FEE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.CREDIT_STOP_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.APPLICATION_RULE_NAME,dos);
					
					// String
				
						writeString(this.SUBSTITUTION_RULE_NAME,dos);
					
					// String
				
						writeString(this.MINIMUM_RULE_NAME,dos);
					
					// String
				
						writeString(this.MAXIMUM_RULE_NAME,dos);
					
					// String
				
						writeString(this.COMMISSION_BASE_RULE_NAME,dos);
					
					// String
				
						writeString(this.HAND_PRICE_RESTRICTION_RULE_NAME,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTIMATED_MARKET_SHARE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTIMATED_WEEKLY_MARKET_POTENTIAL);
					
					// String
				
						writeString(this.TAX_EXEMPT_EXPIRATION_DATE,dos);
					
					// String
				
						writeString(this.TAX_EXEMPT_FLAG,dos);
					
					// String
				
						writeString(this.REACTIVATION_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.AGING_POLICY_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.DISCOUNT_GRACE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.NET_DUE_GRACE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.MSP_TARGET_CUSTOMER_SPECIFICATIONS,dos);
					
					// String
				
						writeString(this.ACTIVE_OR_INACTIVE_APPROVAL_PENDING,dos);
					
					// String
				
						writeString(this.CUSTOMER_ENTITY_TYPE,dos);
					
					// String
				
						writeString(this.STATE,dos);
					
					// String
				
						writeString(this.COMMODITY_FLAG,dos);
					
					// String
				
						writeString(this.NO_OF_OPEN_ORDERS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OPEN_ORDER_AMOUNT);
					
					// String
				
						writeString(this.KOSHER_CUSTOMER,dos);
					
					// String
				
						writeString(this.LAPTOP_ZID_NO,dos);
					
					// String
				
						writeString(this.SYSCO_SALES_COMPANION,dos);
					
					// String
				
						writeString(this.OFF_STOP_DATE,dos);
					
					// String
				
						writeString(this.LAPTOP_USER_FLAG,dos);
					
					// String
				
						writeString(this.THIRD_PARTY_CUSTOMER_FLAG,dos);
					
					// String
				
						writeString(this.CREDIT_HIERARCHY_MASTER_COMPANY,dos);
					
					// String
				
						writeString(this.CREDIT_HIERARCHY_MASTER_COMPANY_NO,dos);
					
					// String
				
						writeString(this.SHIP_AVAILABLE_FLAG,dos);
					
					// String
				
						writeString(this.MAPSCO_MAP_CODE,dos);
					
					// String
				
						writeString(this.APPLICATION_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.SUBSTITUTION_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.MINIMUM_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.MAXIMUM_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.COMMISSION_BASE_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.HAND_PRICE_RULE_DEFAULT_FLAG,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_MONDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_TUESDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_WEDNESDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_THURSDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_FRIDAY,dos);
					
					// String
				
						writeString(this.DEFAULT_ROUTE_SATURDAY,dos);
					
					// String
				
						writeString(this.LATITUDE_COORDINATES,dos);
					
					// String
				
						writeString(this.LONGITUDE_COORDINATES,dos);
					
					// String
				
						writeString(this.FREQUENCY_DOWNLOAD,dos);
					
					// String
				
						writeString(this.FREQUENCY_CODE,dos);
					
					// String
				
						writeString(this.LAPTOP_EXCEPTION_LEVEL,dos);
					
					// String
				
						writeString(this.THIRD_PARTY_OG_OPTIONS,dos);
					
					// String
				
						writeString(this.SERVICE_CHARGE,dos);
					
					// String
				
						writeString(this.PRIMARY_SHIP_TO,dos);
					
					// String
				
						writeString(this.DELIVERY_DIFFICULTY_RATING,dos);
					
					// String
				
						writeString(this.BILL_TO_CORP_PRICING_PARENT_COMPANY,dos);
					
					// String
				
						writeString(this.BILL_TO_CORP_PRICING_PARENT,dos);
					
					// String
				
						writeString(this.CORP_HIERARCHY_MASTER_COMPANY,dos);
					
					// String
				
						writeString(this.CORP_HIERARCHY_MASTER,dos);
					
					// String
				
						writeString(this.LOCATION_ID,dos);
					
					// String
				
						writeString(this.PRICE_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.APPLICATION_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.SUBSTITUTE_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.MINIMUM_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.MAXIMUM_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.COMMISSION_BASE_RULE_SRC_COMPANY,dos);
					
					// String
				
						writeString(this.HAND_PRICE_REST_RULE_SRC_COMPANY,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.JOPF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",AR_COMPANY="+AR_COMPANY);
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",NATIONAL_ACCOUNT_NO="+NATIONAL_ACCOUNT_NO);
		sb.append(",DELIVERY_CODE="+DELIVERY_CODE);
		sb.append(",SHIP_TO_STORE_NO="+SHIP_TO_STORE_NO);
		sb.append(",PALLET_LOAD="+PALLET_LOAD);
		sb.append(",ORDER_APPROVAL_REQUIRED="+ORDER_APPROVAL_REQUIRED);
		sb.append(",PO_REQUIRED="+PO_REQUIRED);
		sb.append(",BUSINESS_HOURS_FROM_1="+BUSINESS_HOURS_FROM_1);
		sb.append(",BUSINESS_HOURS_FROM_AM_PM_1="+BUSINESS_HOURS_FROM_AM_PM_1);
		sb.append(",BUSINESS_HOURS_TO_1="+BUSINESS_HOURS_TO_1);
		sb.append(",BUSINESS_HOURS_TO_AM_PM_1="+BUSINESS_HOURS_TO_AM_PM_1);
		sb.append(",NO_DELIVERIES_FROM_1="+NO_DELIVERIES_FROM_1);
		sb.append(",NO_DELIVERIES_FROM_AM_PM_1="+NO_DELIVERIES_FROM_AM_PM_1);
		sb.append(",NO_DELIVERIES_TO_1="+NO_DELIVERIES_TO_1);
		sb.append(",NO_DELIVERIES_TO_AM_PM_1="+NO_DELIVERIES_TO_AM_PM_1);
		sb.append(",NO_DELIVERIES_FROM_2="+NO_DELIVERIES_FROM_2);
		sb.append(",NO_DELIVERIES_FROM_AM_PM_2="+NO_DELIVERIES_FROM_AM_PM_2);
		sb.append(",NO_DELIVERIES_TO_2="+NO_DELIVERIES_TO_2);
		sb.append(",NO_DELIVERIES_TO_AM_PM_2="+NO_DELIVERIES_TO_AM_PM_2);
		sb.append(",NO_DELIVERIES_FROM_3="+NO_DELIVERIES_FROM_3);
		sb.append(",NO_DELIVERIES_FROM_AM_PM_3="+NO_DELIVERIES_FROM_AM_PM_3);
		sb.append(",NO_DELIVERIES_TO_3="+NO_DELIVERIES_TO_3);
		sb.append(",NO_DELIVERIES_TO_AM_PM_3="+NO_DELIVERIES_TO_AM_PM_3);
		sb.append(",NO_DELIVERIES_FROM_4="+NO_DELIVERIES_FROM_4);
		sb.append(",NO_DELIVERIES_FROM_AM_PM_4="+NO_DELIVERIES_FROM_AM_PM_4);
		sb.append(",NO_DELIVERIES_TO_4="+NO_DELIVERIES_TO_4);
		sb.append(",NO_DELIVERIES_TO_AM_PM_4="+NO_DELIVERIES_TO_AM_PM_4);
		sb.append(",SEPARATE_OR_COMBINE_BY_PO="+SEPARATE_OR_COMBINE_BY_PO);
		sb.append(",PRINT_OR_EDI_STATUS="+PRINT_OR_EDI_STATUS);
		sb.append(",SUMMARY_REPORT="+SUMMARY_REPORT);
		sb.append(",EXTERNAL_DESIRED_NO_OF_COPIES="+EXTERNAL_DESIRED_NO_OF_COPIES);
		sb.append(",SHIPPING_DOCUMENT_OR_INVOICE="+SHIPPING_DOCUMENT_OR_INVOICE);
		sb.append(",INTERNAL_DESIRED_NO_OF_COPIES="+INTERNAL_DESIRED_NO_OF_COPIES);
		sb.append(",RESTOCK_FEE="+RESTOCK_FEE);
		sb.append(",ACCOUNT_TYPE="+ACCOUNT_TYPE);
		sb.append(",PREFFERED_DELIVERY_HOURS_FROM_1="+PREFFERED_DELIVERY_HOURS_FROM_1);
		sb.append(",PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1="+PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1);
		sb.append(",PREFFERED_DELIVERY_HOURS_TO_1="+PREFFERED_DELIVERY_HOURS_TO_1);
		sb.append(",PREFFERED_DELIVERY_HOURS_TO_AM_PM_1="+PREFFERED_DELIVERY_HOURS_TO_AM_PM_1);
		sb.append(",PREFFERED_DELIVERY_HOURS_FROM_2="+PREFFERED_DELIVERY_HOURS_FROM_2);
		sb.append(",PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2="+PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2);
		sb.append(",PREFFERED_DELIVERY_HOURS_TO_2="+PREFFERED_DELIVERY_HOURS_TO_2);
		sb.append(",PREFFERED_DELIVERY_HOURS_TO_AM_PM_2="+PREFFERED_DELIVERY_HOURS_TO_AM_PM_2);
		sb.append(",CORPORATE_TYPE_OF_OPERATION="+CORPORATE_TYPE_OF_OPERATION);
		sb.append(",CUISINE="+CUISINE);
		sb.append(",PROFILE_CREATION_DATE="+PROFILE_CREATION_DATE);
		sb.append(",PROFILE_ARCHIVE_DATE="+PROFILE_ARCHIVE_DATE);
		sb.append(",ITEM_OVERRIDE_CHART_ID="+ITEM_OVERRIDE_CHART_ID);
		sb.append(",DEFAULT_SUBSTITUTE_TYPE="+DEFAULT_SUBSTITUTE_TYPE);
		sb.append(",DEFAULT_RESTRICT_TYPE="+DEFAULT_RESTRICT_TYPE);
		sb.append(",RESTRICT_OR_SUB_CHART_ID="+RESTRICT_OR_SUB_CHART_ID);
		sb.append(",FORCED_SUBSTITUTION="+FORCED_SUBSTITUTION);
		sb.append(",DEPARTMENTS_INDICATOR="+DEPARTMENTS_INDICATOR);
		sb.append(",PARTIAL_FILL="+PARTIAL_FILL);
		sb.append(",NON_PROFIT_FLAG="+NON_PROFIT_FLAG);
		sb.append(",MISCELLANEOUS_TAX_EXEMPT="+MISCELLANEOUS_TAX_EXEMPT);
		sb.append(",OWNER_NAME="+OWNER_NAME);
		sb.append(",TERRITORY_CODE="+TERRITORY_CODE);
		sb.append(",MAIL_ADDRESS_1="+MAIL_ADDRESS_1);
		sb.append(",MAIL_ADDRESS_2="+MAIL_ADDRESS_2);
		sb.append(",MAIL_ADDRESS_3="+MAIL_ADDRESS_3);
		sb.append(",MAIL_CITY="+MAIL_CITY);
		sb.append(",MAIL_STATE_CODE="+MAIL_STATE_CODE);
		sb.append(",MAIL_ZIP_CODE="+MAIL_ZIP_CODE);
		sb.append(",COUNTRY_CODE="+COUNTRY_CODE);
		sb.append(",CENSUS_STATE_CODE="+CENSUS_STATE_CODE);
		sb.append(",IMMEDIATE_ALLOC_FLAG="+IMMEDIATE_ALLOC_FLAG);
		sb.append(",CUSTOMER_SHIP_TO_STATUS="+CUSTOMER_SHIP_TO_STATUS);
		sb.append(",RESTRICTION_CHART_TYPE="+RESTRICTION_CHART_TYPE);
		sb.append(",ITEM_OVERRIDE_CHART_TYPE="+ITEM_OVERRIDE_CHART_TYPE);
		sb.append(",RECORD_CHANGE_FLAG="+RECORD_CHANGE_FLAG);
		sb.append(",ORDERS_PLACED_FLAG="+ORDERS_PLACED_FLAG);
		sb.append(",ASSIGN_CODES_BY_DEPT="+ASSIGN_CODES_BY_DEPT);
		sb.append(",VENDOR_NO="+VENDOR_NO);
		sb.append(",VENDOR_SUFFIX="+VENDOR_SUFFIX);
		sb.append(",RECORD_TYPE_INDICATOR="+RECORD_TYPE_INDICATOR);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",CUSTOMER_COMMODITY_CODE="+CUSTOMER_COMMODITY_CODE);
		sb.append(",PREVIOUS_STATUS="+PREVIOUS_STATUS);
		sb.append(",PAYMENT_TERMS_CODE="+PAYMENT_TERMS_CODE);
		sb.append(",PERSONAL_GURANTEE_INDICATOR="+PERSONAL_GURANTEE_INDICATOR);
		sb.append(",PERSONAL_GURANTEE_EXPIRATION_DATE="+PERSONAL_GURANTEE_EXPIRATION_DATE);
		sb.append(",PERSONAL_GURANTEE_TASK_INDICATOR="+PERSONAL_GURANTEE_TASK_INDICATOR);
		sb.append(",SALES_TAX_LAST_REVIEW_DATE="+SALES_TAX_LAST_REVIEW_DATE);
		sb.append(",SALES_TAX_REVIEW_INDICATOR="+SALES_TAX_REVIEW_INDICATOR);
		sb.append(",LOCAL_TYPE_OF_OPERATION="+LOCAL_TYPE_OF_OPERATION);
		sb.append(",PO_NO_EXPIRATION_DATE="+PO_NO_EXPIRATION_DATE);
		sb.append(",PO_NO_TASK_INDICATOR="+PO_NO_TASK_INDICATOR);
		sb.append(",AUDIT_SEQUENCE_NO="+AUDIT_SEQUENCE_NO);
		sb.append(",SEQUENCE_CHART_IDENTIFIER="+SEQUENCE_CHART_IDENTIFIER);
		sb.append(",STOP_DATE="+STOP_DATE);
		sb.append(",SEQUENCE_CHART_TYPE="+SEQUENCE_CHART_TYPE);
		sb.append(",STOP_COUNTER="+STOP_COUNTER);
		sb.append(",DEFAULT_PICKING_TIME_ZONE_MONDAY="+DEFAULT_PICKING_TIME_ZONE_MONDAY);
		sb.append(",DEFAULT_PICKING_TIME_ZONE_TUESDAY="+DEFAULT_PICKING_TIME_ZONE_TUESDAY);
		sb.append(",DEFAULT_PICKING_TIME_ZONE_WEDNESDAY="+DEFAULT_PICKING_TIME_ZONE_WEDNESDAY);
		sb.append(",DEFAULT_PICKING_TIME_ZONE_THURSDAY="+DEFAULT_PICKING_TIME_ZONE_THURSDAY);
		sb.append(",DEFAULT_PICKING_TIME_ZONE_FRIDAY="+DEFAULT_PICKING_TIME_ZONE_FRIDAY);
		sb.append(",DEFAULT_PICKING_TIME_ZONE_SATURDAY="+DEFAULT_PICKING_TIME_ZONE_SATURDAY);
		sb.append(",DEFAULT_PICKING_TIME_ZONE_SUNDAY="+DEFAULT_PICKING_TIME_ZONE_SUNDAY);
		sb.append(",OTHER_CONTACT_NAME="+OTHER_CONTACT_NAME);
		sb.append(",MAIL_ADDRESS_NAME="+MAIL_ADDRESS_NAME);
		sb.append(",RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN="+RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN);
		sb.append(",ITEM_OVERRIDES_CHART_ORIGIN="+ITEM_OVERRIDES_CHART_ORIGIN);
		sb.append(",SEQUENCE_CHART_ORIGIN="+SEQUENCE_CHART_ORIGIN);
		sb.append(",PENDING_TERMS_APPROVAL="+PENDING_TERMS_APPROVAL);
		sb.append(",DESIGNATED_DELIVERY_DAYS_1="+DESIGNATED_DELIVERY_DAYS_1);
		sb.append(",DESIGNATED_SALESMAN_CALL_DAYS="+DESIGNATED_SALESMAN_CALL_DAYS);
		sb.append(",BUSINESS_HOURS_DAYS_1="+BUSINESS_HOURS_DAYS_1);
		sb.append(",BUSINESS_HOURS_DAYS_2="+BUSINESS_HOURS_DAYS_2);
		sb.append(",TAX_AUTHORITY_NO="+TAX_AUTHORITY_NO);
		sb.append(",PRICE_RULE_NAME="+PRICE_RULE_NAME);
		sb.append(",STOP_CODE="+STOP_CODE);
		sb.append(",BUSINESS_HOURS_FROM_2="+BUSINESS_HOURS_FROM_2);
		sb.append(",BUSINESS_HOURS_FROM_AM_PM_2="+BUSINESS_HOURS_FROM_AM_PM_2);
		sb.append(",BUSINESS_HOURS_TO_2="+BUSINESS_HOURS_TO_2);
		sb.append(",BUSINESS_HOURS_TO_AM_PM_2="+BUSINESS_HOURS_TO_AM_PM_2);
		sb.append(",TERRITORY_OVERRIDE_FLAG="+TERRITORY_OVERRIDE_FLAG);
		sb.append(",TAX_EXEMPT_APPROVAL_PENDING="+TAX_EXEMPT_APPROVAL_PENDING);
		sb.append(",RESTOCK_FEE_APPROVAL_PENDING="+RESTOCK_FEE_APPROVAL_PENDING);
		sb.append(",CREDIT_STOP_APPROVAL_PENDING="+CREDIT_STOP_APPROVAL_PENDING);
		sb.append(",ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING="+ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING);
		sb.append(",APPLICATION_RULE_NAME="+APPLICATION_RULE_NAME);
		sb.append(",SUBSTITUTION_RULE_NAME="+SUBSTITUTION_RULE_NAME);
		sb.append(",MINIMUM_RULE_NAME="+MINIMUM_RULE_NAME);
		sb.append(",MAXIMUM_RULE_NAME="+MAXIMUM_RULE_NAME);
		sb.append(",COMMISSION_BASE_RULE_NAME="+COMMISSION_BASE_RULE_NAME);
		sb.append(",HAND_PRICE_RESTRICTION_RULE_NAME="+HAND_PRICE_RESTRICTION_RULE_NAME);
		sb.append(",ESTIMATED_MARKET_SHARE="+String.valueOf(ESTIMATED_MARKET_SHARE));
		sb.append(",ESTIMATED_WEEKLY_MARKET_POTENTIAL="+String.valueOf(ESTIMATED_WEEKLY_MARKET_POTENTIAL));
		sb.append(",TAX_EXEMPT_EXPIRATION_DATE="+TAX_EXEMPT_EXPIRATION_DATE);
		sb.append(",TAX_EXEMPT_FLAG="+TAX_EXEMPT_FLAG);
		sb.append(",REACTIVATION_APPROVAL_PENDING="+REACTIVATION_APPROVAL_PENDING);
		sb.append(",AGING_POLICY_APPROVAL_PENDING="+AGING_POLICY_APPROVAL_PENDING);
		sb.append(",DISCOUNT_GRACE_APPROVAL_PENDING="+DISCOUNT_GRACE_APPROVAL_PENDING);
		sb.append(",NET_DUE_GRACE_APPROVAL_PENDING="+NET_DUE_GRACE_APPROVAL_PENDING);
		sb.append(",MSP_TARGET_CUSTOMER_SPECIFICATIONS="+MSP_TARGET_CUSTOMER_SPECIFICATIONS);
		sb.append(",ACTIVE_OR_INACTIVE_APPROVAL_PENDING="+ACTIVE_OR_INACTIVE_APPROVAL_PENDING);
		sb.append(",CUSTOMER_ENTITY_TYPE="+CUSTOMER_ENTITY_TYPE);
		sb.append(",STATE="+STATE);
		sb.append(",COMMODITY_FLAG="+COMMODITY_FLAG);
		sb.append(",NO_OF_OPEN_ORDERS="+NO_OF_OPEN_ORDERS);
		sb.append(",OPEN_ORDER_AMOUNT="+String.valueOf(OPEN_ORDER_AMOUNT));
		sb.append(",KOSHER_CUSTOMER="+KOSHER_CUSTOMER);
		sb.append(",LAPTOP_ZID_NO="+LAPTOP_ZID_NO);
		sb.append(",SYSCO_SALES_COMPANION="+SYSCO_SALES_COMPANION);
		sb.append(",OFF_STOP_DATE="+OFF_STOP_DATE);
		sb.append(",LAPTOP_USER_FLAG="+LAPTOP_USER_FLAG);
		sb.append(",THIRD_PARTY_CUSTOMER_FLAG="+THIRD_PARTY_CUSTOMER_FLAG);
		sb.append(",CREDIT_HIERARCHY_MASTER_COMPANY="+CREDIT_HIERARCHY_MASTER_COMPANY);
		sb.append(",CREDIT_HIERARCHY_MASTER_COMPANY_NO="+CREDIT_HIERARCHY_MASTER_COMPANY_NO);
		sb.append(",SHIP_AVAILABLE_FLAG="+SHIP_AVAILABLE_FLAG);
		sb.append(",MAPSCO_MAP_CODE="+MAPSCO_MAP_CODE);
		sb.append(",APPLICATION_RULE_DEFAULT_FLAG="+APPLICATION_RULE_DEFAULT_FLAG);
		sb.append(",PRICE_RULE_DEFAULT_FLAG="+PRICE_RULE_DEFAULT_FLAG);
		sb.append(",SUBSTITUTION_RULE_DEFAULT_FLAG="+SUBSTITUTION_RULE_DEFAULT_FLAG);
		sb.append(",MINIMUM_RULE_DEFAULT_FLAG="+MINIMUM_RULE_DEFAULT_FLAG);
		sb.append(",MAXIMUM_RULE_DEFAULT_FLAG="+MAXIMUM_RULE_DEFAULT_FLAG);
		sb.append(",COMMISSION_BASE_RULE_DEFAULT_FLAG="+COMMISSION_BASE_RULE_DEFAULT_FLAG);
		sb.append(",HAND_PRICE_RULE_DEFAULT_FLAG="+HAND_PRICE_RULE_DEFAULT_FLAG);
		sb.append(",DEFAULT_ROUTE_MONDAY="+DEFAULT_ROUTE_MONDAY);
		sb.append(",DEFAULT_ROUTE_TUESDAY="+DEFAULT_ROUTE_TUESDAY);
		sb.append(",DEFAULT_ROUTE_WEDNESDAY="+DEFAULT_ROUTE_WEDNESDAY);
		sb.append(",DEFAULT_ROUTE_THURSDAY="+DEFAULT_ROUTE_THURSDAY);
		sb.append(",DEFAULT_ROUTE_FRIDAY="+DEFAULT_ROUTE_FRIDAY);
		sb.append(",DEFAULT_ROUTE_SATURDAY="+DEFAULT_ROUTE_SATURDAY);
		sb.append(",LATITUDE_COORDINATES="+LATITUDE_COORDINATES);
		sb.append(",LONGITUDE_COORDINATES="+LONGITUDE_COORDINATES);
		sb.append(",FREQUENCY_DOWNLOAD="+FREQUENCY_DOWNLOAD);
		sb.append(",FREQUENCY_CODE="+FREQUENCY_CODE);
		sb.append(",LAPTOP_EXCEPTION_LEVEL="+LAPTOP_EXCEPTION_LEVEL);
		sb.append(",THIRD_PARTY_OG_OPTIONS="+THIRD_PARTY_OG_OPTIONS);
		sb.append(",SERVICE_CHARGE="+SERVICE_CHARGE);
		sb.append(",PRIMARY_SHIP_TO="+PRIMARY_SHIP_TO);
		sb.append(",DELIVERY_DIFFICULTY_RATING="+DELIVERY_DIFFICULTY_RATING);
		sb.append(",BILL_TO_CORP_PRICING_PARENT_COMPANY="+BILL_TO_CORP_PRICING_PARENT_COMPANY);
		sb.append(",BILL_TO_CORP_PRICING_PARENT="+BILL_TO_CORP_PRICING_PARENT);
		sb.append(",CORP_HIERARCHY_MASTER_COMPANY="+CORP_HIERARCHY_MASTER_COMPANY);
		sb.append(",CORP_HIERARCHY_MASTER="+CORP_HIERARCHY_MASTER);
		sb.append(",LOCATION_ID="+LOCATION_ID);
		sb.append(",PRICE_RULE_SRC_COMPANY="+PRICE_RULE_SRC_COMPANY);
		sb.append(",APPLICATION_RULE_SRC_COMPANY="+APPLICATION_RULE_SRC_COMPANY);
		sb.append(",SUBSTITUTE_RULE_SRC_COMPANY="+SUBSTITUTE_RULE_SRC_COMPANY);
		sb.append(",MINIMUM_RULE_SRC_COMPANY="+MINIMUM_RULE_SRC_COMPANY);
		sb.append(",MAXIMUM_RULE_SRC_COMPANY="+MAXIMUM_RULE_SRC_COMPANY);
		sb.append(",COMMISSION_BASE_RULE_SRC_COMPANY="+COMMISSION_BASE_RULE_SRC_COMPANY);
		sb.append(",HAND_PRICE_REST_RULE_SRC_COMPANY="+HAND_PRICE_REST_RULE_SRC_COMPANY);
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",JOPF_SVOP="+JOPF_SVOP);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(SITE_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SITE_ID);
            			}
            		
        			sb.append("|");
        		
        				if(AR_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AR_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_TO_CUST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_TO_CUST);
            			}
            		
        			sb.append("|");
        		
        				if(NATIONAL_ACCOUNT_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NATIONAL_ACCOUNT_NO);
            			}
            		
        			sb.append("|");
        		
        				if(DELIVERY_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DELIVERY_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_TO_STORE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_TO_STORE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PALLET_LOAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PALLET_LOAD);
            			}
            		
        			sb.append("|");
        		
        				if(ORDER_APPROVAL_REQUIRED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDER_APPROVAL_REQUIRED);
            			}
            		
        			sb.append("|");
        		
        				if(PO_REQUIRED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_REQUIRED);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_FROM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_FROM_1);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_FROM_AM_PM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_FROM_AM_PM_1);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_TO_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_TO_1);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_TO_AM_PM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_TO_AM_PM_1);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_FROM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_FROM_1);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_FROM_AM_PM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_FROM_AM_PM_1);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_TO_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_TO_1);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_TO_AM_PM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_TO_AM_PM_1);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_FROM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_FROM_2);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_FROM_AM_PM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_FROM_AM_PM_2);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_TO_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_TO_2);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_TO_AM_PM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_TO_AM_PM_2);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_FROM_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_FROM_3);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_FROM_AM_PM_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_FROM_AM_PM_3);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_TO_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_TO_3);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_TO_AM_PM_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_TO_AM_PM_3);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_FROM_4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_FROM_4);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_FROM_AM_PM_4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_FROM_AM_PM_4);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_TO_4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_TO_4);
            			}
            		
        			sb.append("|");
        		
        				if(NO_DELIVERIES_TO_AM_PM_4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_DELIVERIES_TO_AM_PM_4);
            			}
            		
        			sb.append("|");
        		
        				if(SEPARATE_OR_COMBINE_BY_PO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEPARATE_OR_COMBINE_BY_PO);
            			}
            		
        			sb.append("|");
        		
        				if(PRINT_OR_EDI_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRINT_OR_EDI_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(SUMMARY_REPORT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SUMMARY_REPORT);
            			}
            		
        			sb.append("|");
        		
        				if(EXTERNAL_DESIRED_NO_OF_COPIES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(EXTERNAL_DESIRED_NO_OF_COPIES);
            			}
            		
        			sb.append("|");
        		
        				if(SHIPPING_DOCUMENT_OR_INVOICE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIPPING_DOCUMENT_OR_INVOICE);
            			}
            		
        			sb.append("|");
        		
        				if(INTERNAL_DESIRED_NO_OF_COPIES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(INTERNAL_DESIRED_NO_OF_COPIES);
            			}
            		
        			sb.append("|");
        		
        				if(RESTOCK_FEE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESTOCK_FEE);
            			}
            		
        			sb.append("|");
        		
        				if(ACCOUNT_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACCOUNT_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(PREFFERED_DELIVERY_HOURS_FROM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREFFERED_DELIVERY_HOURS_FROM_1);
            			}
            		
        			sb.append("|");
        		
        				if(PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1);
            			}
            		
        			sb.append("|");
        		
        				if(PREFFERED_DELIVERY_HOURS_TO_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREFFERED_DELIVERY_HOURS_TO_1);
            			}
            		
        			sb.append("|");
        		
        				if(PREFFERED_DELIVERY_HOURS_TO_AM_PM_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREFFERED_DELIVERY_HOURS_TO_AM_PM_1);
            			}
            		
        			sb.append("|");
        		
        				if(PREFFERED_DELIVERY_HOURS_FROM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREFFERED_DELIVERY_HOURS_FROM_2);
            			}
            		
        			sb.append("|");
        		
        				if(PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2);
            			}
            		
        			sb.append("|");
        		
        				if(PREFFERED_DELIVERY_HOURS_TO_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREFFERED_DELIVERY_HOURS_TO_2);
            			}
            		
        			sb.append("|");
        		
        				if(PREFFERED_DELIVERY_HOURS_TO_AM_PM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREFFERED_DELIVERY_HOURS_TO_AM_PM_2);
            			}
            		
        			sb.append("|");
        		
        				if(CORPORATE_TYPE_OF_OPERATION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CORPORATE_TYPE_OF_OPERATION);
            			}
            		
        			sb.append("|");
        		
        				if(CUISINE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUISINE);
            			}
            		
        			sb.append("|");
        		
        				if(PROFILE_CREATION_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PROFILE_CREATION_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(PROFILE_ARCHIVE_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PROFILE_ARCHIVE_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_OVERRIDE_CHART_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_OVERRIDE_CHART_ID);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_SUBSTITUTE_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_SUBSTITUTE_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_RESTRICT_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_RESTRICT_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(RESTRICT_OR_SUB_CHART_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESTRICT_OR_SUB_CHART_ID);
            			}
            		
        			sb.append("|");
        		
        				if(FORCED_SUBSTITUTION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FORCED_SUBSTITUTION);
            			}
            		
        			sb.append("|");
        		
        				if(DEPARTMENTS_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEPARTMENTS_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(PARTIAL_FILL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PARTIAL_FILL);
            			}
            		
        			sb.append("|");
        		
        				if(NON_PROFIT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NON_PROFIT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(MISCELLANEOUS_TAX_EXEMPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MISCELLANEOUS_TAX_EXEMPT);
            			}
            		
        			sb.append("|");
        		
        				if(OWNER_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OWNER_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(TERRITORY_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TERRITORY_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(MAIL_ADDRESS_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAIL_ADDRESS_1);
            			}
            		
        			sb.append("|");
        		
        				if(MAIL_ADDRESS_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAIL_ADDRESS_2);
            			}
            		
        			sb.append("|");
        		
        				if(MAIL_ADDRESS_3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAIL_ADDRESS_3);
            			}
            		
        			sb.append("|");
        		
        				if(MAIL_CITY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAIL_CITY);
            			}
            		
        			sb.append("|");
        		
        				if(MAIL_STATE_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAIL_STATE_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(MAIL_ZIP_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAIL_ZIP_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(COUNTRY_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COUNTRY_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(CENSUS_STATE_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CENSUS_STATE_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(IMMEDIATE_ALLOC_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(IMMEDIATE_ALLOC_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CUSTOMER_SHIP_TO_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUSTOMER_SHIP_TO_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(RESTRICTION_CHART_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESTRICTION_CHART_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_OVERRIDE_CHART_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_OVERRIDE_CHART_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(RECORD_CHANGE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECORD_CHANGE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ORDERS_PLACED_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ORDERS_PLACED_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(ASSIGN_CODES_BY_DEPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ASSIGN_CODES_BY_DEPT);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_NO);
            			}
            		
        			sb.append("|");
        		
        				if(VENDOR_SUFFIX == null){
        					sb.append("<null>");
        				}else{
            				sb.append(VENDOR_SUFFIX);
            			}
            		
        			sb.append("|");
        		
        				if(RECORD_TYPE_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RECORD_TYPE_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(PURCHASE_ORDER_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PURCHASE_ORDER_NO);
            			}
            		
        			sb.append("|");
        		
        				if(CUSTOMER_COMMODITY_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUSTOMER_COMMODITY_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(PREVIOUS_STATUS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PREVIOUS_STATUS);
            			}
            		
        			sb.append("|");
        		
        				if(PAYMENT_TERMS_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PAYMENT_TERMS_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(PERSONAL_GURANTEE_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PERSONAL_GURANTEE_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(PERSONAL_GURANTEE_EXPIRATION_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PERSONAL_GURANTEE_EXPIRATION_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(PERSONAL_GURANTEE_TASK_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PERSONAL_GURANTEE_TASK_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(SALES_TAX_LAST_REVIEW_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SALES_TAX_LAST_REVIEW_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(SALES_TAX_REVIEW_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SALES_TAX_REVIEW_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(LOCAL_TYPE_OF_OPERATION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOCAL_TYPE_OF_OPERATION);
            			}
            		
        			sb.append("|");
        		
        				if(PO_NO_EXPIRATION_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_NO_EXPIRATION_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(PO_NO_TASK_INDICATOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PO_NO_TASK_INDICATOR);
            			}
            		
        			sb.append("|");
        		
        				if(AUDIT_SEQUENCE_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AUDIT_SEQUENCE_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SEQUENCE_CHART_IDENTIFIER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEQUENCE_CHART_IDENTIFIER);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(SEQUENCE_CHART_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEQUENCE_CHART_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_COUNTER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_COUNTER);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_PICKING_TIME_ZONE_MONDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_PICKING_TIME_ZONE_MONDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_PICKING_TIME_ZONE_TUESDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_PICKING_TIME_ZONE_TUESDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_PICKING_TIME_ZONE_WEDNESDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_PICKING_TIME_ZONE_WEDNESDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_PICKING_TIME_ZONE_THURSDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_PICKING_TIME_ZONE_THURSDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_PICKING_TIME_ZONE_FRIDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_PICKING_TIME_ZONE_FRIDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_PICKING_TIME_ZONE_SATURDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_PICKING_TIME_ZONE_SATURDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_PICKING_TIME_ZONE_SUNDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_PICKING_TIME_ZONE_SUNDAY);
            			}
            		
        			sb.append("|");
        		
        				if(OTHER_CONTACT_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OTHER_CONTACT_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(MAIL_ADDRESS_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAIL_ADDRESS_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(ITEM_OVERRIDES_CHART_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ITEM_OVERRIDES_CHART_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(SEQUENCE_CHART_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SEQUENCE_CHART_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(PENDING_TERMS_APPROVAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PENDING_TERMS_APPROVAL);
            			}
            		
        			sb.append("|");
        		
        				if(DESIGNATED_DELIVERY_DAYS_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DESIGNATED_DELIVERY_DAYS_1);
            			}
            		
        			sb.append("|");
        		
        				if(DESIGNATED_SALESMAN_CALL_DAYS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DESIGNATED_SALESMAN_CALL_DAYS);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_DAYS_1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_DAYS_1);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_DAYS_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_DAYS_2);
            			}
            		
        			sb.append("|");
        		
        				if(TAX_AUTHORITY_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TAX_AUTHORITY_NO);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_RULE_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_RULE_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(STOP_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STOP_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_FROM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_FROM_2);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_FROM_AM_PM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_FROM_AM_PM_2);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_TO_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_TO_2);
            			}
            		
        			sb.append("|");
        		
        				if(BUSINESS_HOURS_TO_AM_PM_2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BUSINESS_HOURS_TO_AM_PM_2);
            			}
            		
        			sb.append("|");
        		
        				if(TERRITORY_OVERRIDE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TERRITORY_OVERRIDE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(TAX_EXEMPT_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TAX_EXEMPT_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(RESTOCK_FEE_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(RESTOCK_FEE_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(CREDIT_STOP_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREDIT_STOP_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(APPLICATION_RULE_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPLICATION_RULE_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(SUBSTITUTION_RULE_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SUBSTITUTION_RULE_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(MINIMUM_RULE_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MINIMUM_RULE_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(MAXIMUM_RULE_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAXIMUM_RULE_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(COMMISSION_BASE_RULE_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COMMISSION_BASE_RULE_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(HAND_PRICE_RESTRICTION_RULE_NAME == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HAND_PRICE_RESTRICTION_RULE_NAME);
            			}
            		
        			sb.append("|");
        		
        				if(ESTIMATED_MARKET_SHARE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ESTIMATED_MARKET_SHARE);
            			}
            		
        			sb.append("|");
        		
        				if(ESTIMATED_WEEKLY_MARKET_POTENTIAL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ESTIMATED_WEEKLY_MARKET_POTENTIAL);
            			}
            		
        			sb.append("|");
        		
        				if(TAX_EXEMPT_EXPIRATION_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TAX_EXEMPT_EXPIRATION_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(TAX_EXEMPT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(TAX_EXEMPT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(REACTIVATION_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(REACTIVATION_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(AGING_POLICY_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(AGING_POLICY_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(DISCOUNT_GRACE_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DISCOUNT_GRACE_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(NET_DUE_GRACE_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NET_DUE_GRACE_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(MSP_TARGET_CUSTOMER_SPECIFICATIONS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MSP_TARGET_CUSTOMER_SPECIFICATIONS);
            			}
            		
        			sb.append("|");
        		
        				if(ACTIVE_OR_INACTIVE_APPROVAL_PENDING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(ACTIVE_OR_INACTIVE_APPROVAL_PENDING);
            			}
            		
        			sb.append("|");
        		
        				if(CUSTOMER_ENTITY_TYPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CUSTOMER_ENTITY_TYPE);
            			}
            		
        			sb.append("|");
        		
        				if(STATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(STATE);
            			}
            		
        			sb.append("|");
        		
        				if(COMMODITY_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COMMODITY_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(NO_OF_OPEN_ORDERS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(NO_OF_OPEN_ORDERS);
            			}
            		
        			sb.append("|");
        		
        				if(OPEN_ORDER_AMOUNT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OPEN_ORDER_AMOUNT);
            			}
            		
        			sb.append("|");
        		
        				if(KOSHER_CUSTOMER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(KOSHER_CUSTOMER);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_ZID_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_ZID_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SYSCO_SALES_COMPANION == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SYSCO_SALES_COMPANION);
            			}
            		
        			sb.append("|");
        		
        				if(OFF_STOP_DATE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(OFF_STOP_DATE);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_USER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_USER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(THIRD_PARTY_CUSTOMER_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(THIRD_PARTY_CUSTOMER_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(CREDIT_HIERARCHY_MASTER_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREDIT_HIERARCHY_MASTER_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(CREDIT_HIERARCHY_MASTER_COMPANY_NO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREDIT_HIERARCHY_MASTER_COMPANY_NO);
            			}
            		
        			sb.append("|");
        		
        				if(SHIP_AVAILABLE_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SHIP_AVAILABLE_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(MAPSCO_MAP_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAPSCO_MAP_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(APPLICATION_RULE_DEFAULT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPLICATION_RULE_DEFAULT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_RULE_DEFAULT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_RULE_DEFAULT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(SUBSTITUTION_RULE_DEFAULT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SUBSTITUTION_RULE_DEFAULT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(MINIMUM_RULE_DEFAULT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MINIMUM_RULE_DEFAULT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(MAXIMUM_RULE_DEFAULT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAXIMUM_RULE_DEFAULT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(COMMISSION_BASE_RULE_DEFAULT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COMMISSION_BASE_RULE_DEFAULT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(HAND_PRICE_RULE_DEFAULT_FLAG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HAND_PRICE_RULE_DEFAULT_FLAG);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_ROUTE_MONDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_ROUTE_MONDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_ROUTE_TUESDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_ROUTE_TUESDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_ROUTE_WEDNESDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_ROUTE_WEDNESDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_ROUTE_THURSDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_ROUTE_THURSDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_ROUTE_FRIDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_ROUTE_FRIDAY);
            			}
            		
        			sb.append("|");
        		
        				if(DEFAULT_ROUTE_SATURDAY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DEFAULT_ROUTE_SATURDAY);
            			}
            		
        			sb.append("|");
        		
        				if(LATITUDE_COORDINATES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LATITUDE_COORDINATES);
            			}
            		
        			sb.append("|");
        		
        				if(LONGITUDE_COORDINATES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LONGITUDE_COORDINATES);
            			}
            		
        			sb.append("|");
        		
        				if(FREQUENCY_DOWNLOAD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREQUENCY_DOWNLOAD);
            			}
            		
        			sb.append("|");
        		
        				if(FREQUENCY_CODE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(FREQUENCY_CODE);
            			}
            		
        			sb.append("|");
        		
        				if(LAPTOP_EXCEPTION_LEVEL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LAPTOP_EXCEPTION_LEVEL);
            			}
            		
        			sb.append("|");
        		
        				if(THIRD_PARTY_OG_OPTIONS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(THIRD_PARTY_OG_OPTIONS);
            			}
            		
        			sb.append("|");
        		
        				if(SERVICE_CHARGE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SERVICE_CHARGE);
            			}
            		
        			sb.append("|");
        		
        				if(PRIMARY_SHIP_TO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRIMARY_SHIP_TO);
            			}
            		
        			sb.append("|");
        		
        				if(DELIVERY_DIFFICULTY_RATING == null){
        					sb.append("<null>");
        				}else{
            				sb.append(DELIVERY_DIFFICULTY_RATING);
            			}
            		
        			sb.append("|");
        		
        				if(BILL_TO_CORP_PRICING_PARENT_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BILL_TO_CORP_PRICING_PARENT_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(BILL_TO_CORP_PRICING_PARENT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(BILL_TO_CORP_PRICING_PARENT);
            			}
            		
        			sb.append("|");
        		
        				if(CORP_HIERARCHY_MASTER_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CORP_HIERARCHY_MASTER_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(CORP_HIERARCHY_MASTER == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CORP_HIERARCHY_MASTER);
            			}
            		
        			sb.append("|");
        		
        				if(LOCATION_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(LOCATION_ID);
            			}
            		
        			sb.append("|");
        		
        				if(PRICE_RULE_SRC_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(PRICE_RULE_SRC_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(APPLICATION_RULE_SRC_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(APPLICATION_RULE_SRC_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(SUBSTITUTE_RULE_SRC_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(SUBSTITUTE_RULE_SRC_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(MINIMUM_RULE_SRC_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MINIMUM_RULE_SRC_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(MAXIMUM_RULE_SRC_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(MAXIMUM_RULE_SRC_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(COMMISSION_BASE_RULE_SRC_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(COMMISSION_BASE_RULE_SRC_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(HAND_PRICE_REST_RULE_SRC_COMPANY == null){
        					sb.append("<null>");
        				}else{
            				sb.append(HAND_PRICE_REST_RULE_SRC_COMPANY);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_USER_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_USER_ID);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_PROGRAM_ID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_PROGRAM_ID);
            			}
            		
        			sb.append("|");
        		
        				sb.append(IS_DELETED);
        			
        			sb.append("|");
        		
        				if(CREATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(CREATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(CREATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN);
            			}
            		
        			sb.append("|");
        		
        				if(UPDATED_ORIGIN_TIMESTAMP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(UPDATED_ORIGIN_TIMESTAMP);
            			}
            		
        			sb.append("|");
        		
        				if(JOPF_SVOP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPF_SVOP);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(CUSTOMER_SHIP_TOStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.AR_COMPANY, other.AR_COMPANY);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SHIP_TO_CUST, other.SHIP_TO_CUST);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[0];

	
			    public String JOARCO;

				public String getJOARCO () {
					return this.JOARCO;
				}
				
			    public String JOCUNO;

				public String getJOCUNO () {
					return this.JOCUNO;
				}
				
			    public String JONANO;

				public String getJONANO () {
					return this.JONANO;
				}
				
			    public String JODELC;

				public String getJODELC () {
					return this.JODELC;
				}
				
			    public String JOSTNU;

				public String getJOSTNU () {
					return this.JOSTNU;
				}
				
			    public String JOPLSZ;

				public String getJOPLSZ () {
					return this.JOPLSZ;
				}
				
			    public String JOORAP;

				public String getJOORAP () {
					return this.JOORAP;
				}
				
			    public String JOPORQ;

				public String getJOPORQ () {
					return this.JOPORQ;
				}
				
			    public String JOBHFR;

				public String getJOBHFR () {
					return this.JOBHFR;
				}
				
			    public String JOAPBF;

				public String getJOAPBF () {
					return this.JOAPBF;
				}
				
			    public String JOBHTO;

				public String getJOBHTO () {
					return this.JOBHTO;
				}
				
			    public String JOAPBT;

				public String getJOAPBT () {
					return this.JOAPBT;
				}
				
			    public String JODHF1;

				public String getJODHF1 () {
					return this.JODHF1;
				}
				
			    public String JOAPF1;

				public String getJOAPF1 () {
					return this.JOAPF1;
				}
				
			    public String JODHT1;

				public String getJODHT1 () {
					return this.JODHT1;
				}
				
			    public String JOAPT1;

				public String getJOAPT1 () {
					return this.JOAPT1;
				}
				
			    public String JODHF2;

				public String getJODHF2 () {
					return this.JODHF2;
				}
				
			    public String JOAPF2;

				public String getJOAPF2 () {
					return this.JOAPF2;
				}
				
			    public String JODHT2;

				public String getJODHT2 () {
					return this.JODHT2;
				}
				
			    public String JOAPT2;

				public String getJOAPT2 () {
					return this.JOAPT2;
				}
				
			    public String JODHF3;

				public String getJODHF3 () {
					return this.JODHF3;
				}
				
			    public String JOAPF3;

				public String getJOAPF3 () {
					return this.JOAPF3;
				}
				
			    public String JODHT3;

				public String getJODHT3 () {
					return this.JODHT3;
				}
				
			    public String JOAPT3;

				public String getJOAPT3 () {
					return this.JOAPT3;
				}
				
			    public String JODHF4;

				public String getJODHF4 () {
					return this.JODHF4;
				}
				
			    public String JOAPF4;

				public String getJOAPF4 () {
					return this.JOAPF4;
				}
				
			    public String JODHT4;

				public String getJODHT4 () {
					return this.JODHT4;
				}
				
			    public String JOAPT4;

				public String getJOAPT4 () {
					return this.JOAPT4;
				}
				
			    public String JOINSC;

				public String getJOINSC () {
					return this.JOINSC;
				}
				
			    public String JOINPE;

				public String getJOINPE () {
					return this.JOINPE;
				}
				
			    public String JOINSU;

				public String getJOINSU () {
					return this.JOINSU;
				}
				
			    public String JOINNE;

				public String getJOINNE () {
					return this.JOINNE;
				}
				
			    public String JOINSI;

				public String getJOINSI () {
					return this.JOINSI;
				}
				
			    public String JOINNI;

				public String getJOINNI () {
					return this.JOINNI;
				}
				
			    public String JORFEE;

				public String getJORFEE () {
					return this.JORFEE;
				}
				
			    public String JOACCP;

				public String getJOACCP () {
					return this.JOACCP;
				}
				
			    public String JOPDF1;

				public String getJOPDF1 () {
					return this.JOPDF1;
				}
				
			    public String JOPFF1;

				public String getJOPFF1 () {
					return this.JOPFF1;
				}
				
			    public String JOPDT1;

				public String getJOPDT1 () {
					return this.JOPDT1;
				}
				
			    public String JOPFT1;

				public String getJOPFT1 () {
					return this.JOPFT1;
				}
				
			    public String JOPDF2;

				public String getJOPDF2 () {
					return this.JOPDF2;
				}
				
			    public String JOPFF2;

				public String getJOPFF2 () {
					return this.JOPFF2;
				}
				
			    public String JOPDT2;

				public String getJOPDT2 () {
					return this.JOPDT2;
				}
				
			    public String JOPFT2;

				public String getJOPFT2 () {
					return this.JOPFT2;
				}
				
			    public String JOOPTP;

				public String getJOOPTP () {
					return this.JOOPTP;
				}
				
			    public String JOCUIS;

				public String getJOCUIS () {
					return this.JOCUIS;
				}
				
			    public String JOCRDT;

				public String getJOCRDT () {
					return this.JOCRDT;
				}
				
			    public String JOARDT;

				public String getJOARDT () {
					return this.JOARDT;
				}
				
			    public String JOIOCH;

				public String getJOIOCH () {
					return this.JOIOCH;
				}
				
			    public String JODSUB;

				public String getJODSUB () {
					return this.JODSUB;
				}
				
			    public String JODRTF;

				public String getJODRTF () {
					return this.JODRTF;
				}
				
			    public String JORSID;

				public String getJORSID () {
					return this.JORSID;
				}
				
			    public String JOFSUB;

				public String getJOFSUB () {
					return this.JOFSUB;
				}
				
			    public String JODPMT;

				public String getJODPMT () {
					return this.JODPMT;
				}
				
			    public String JOPARF;

				public String getJOPARF () {
					return this.JOPARF;
				}
				
			    public String JONPRF;

				public String getJONPRF () {
					return this.JONPRF;
				}
				
			    public String JOTXEX;

				public String getJOTXEX () {
					return this.JOTXEX;
				}
				
			    public String JOOWNR;

				public String getJOOWNR () {
					return this.JOOWNR;
				}
				
			    public String JOMACO;

				public String getJOMACO () {
					return this.JOMACO;
				}
				
			    public String JOMAD1;

				public String getJOMAD1 () {
					return this.JOMAD1;
				}
				
			    public String JOMAD2;

				public String getJOMAD2 () {
					return this.JOMAD2;
				}
				
			    public String JOMAD3;

				public String getJOMAD3 () {
					return this.JOMAD3;
				}
				
			    public String JOMCIT;

				public String getJOMCIT () {
					return this.JOMCIT;
				}
				
			    public String JOMSTA;

				public String getJOMSTA () {
					return this.JOMSTA;
				}
				
			    public String JOMZIP;

				public String getJOMZIP () {
					return this.JOMZIP;
				}
				
			    public String JOCY03;

				public String getJOCY03 () {
					return this.JOCY03;
				}
				
			    public String JOCSTA;

				public String getJOCSTA () {
					return this.JOCSTA;
				}
				
			    public String JOIALL;

				public String getJOIALL () {
					return this.JOIALL;
				}
				
			    public String JOSHST;

				public String getJOSHST () {
					return this.JOSHST;
				}
				
			    public String JORSCT;

				public String getJORSCT () {
					return this.JORSCT;
				}
				
			    public String JOIOCT;

				public String getJOIOCT () {
					return this.JOIOCT;
				}
				
			    public String JOCGFL;

				public String getJOCGFL () {
					return this.JOCGFL;
				}
				
			    public String JOORPF;

				public String getJOORPF () {
					return this.JOORPF;
				}
				
			    public String JOGLDC;

				public String getJOGLDC () {
					return this.JOGLDC;
				}
				
			    public String JOVNBR;

				public String getJOVNBR () {
					return this.JOVNBR;
				}
				
			    public String JOADCD;

				public String getJOADCD () {
					return this.JOADCD;
				}
				
			    public String JOBTRT;

				public String getJOBTRT () {
					return this.JOBTRT;
				}
				
			    public String JOAXZP;

				public String getJOAXZP () {
					return this.JOAXZP;
				}
				
			    public String JOPONU;

				public String getJOPONU () {
					return this.JOPONU;
				}
				
			    public String JOCMCD;

				public String getJOCMCD () {
					return this.JOCMCD;
				}
				
			    public String JOPVST;

				public String getJOPVST () {
					return this.JOPVST;
				}
				
			    public String JOPMTC;

				public String getJOPMTC () {
					return this.JOPMTC;
				}
				
			    public String JOPGIN;

				public String getJOPGIN () {
					return this.JOPGIN;
				}
				
			    public String JOPGED;

				public String getJOPGED () {
					return this.JOPGED;
				}
				
			    public String JOPGTI;

				public String getJOPGTI () {
					return this.JOPGTI;
				}
				
			    public String JOSTNR;

				public String getJOSTNR () {
					return this.JOSTNR;
				}
				
			    public String JOSTIN;

				public String getJOSTIN () {
					return this.JOSTIN;
				}
				
			    public String JOLOPT;

				public String getJOLOPT () {
					return this.JOLOPT;
				}
				
			    public String JOPONE;

				public String getJOPONE () {
					return this.JOPONE;
				}
				
			    public String JOPOTI;

				public String getJOPOTI () {
					return this.JOPOTI;
				}
				
			    public String JOAUSQ;

				public String getJOAUSQ () {
					return this.JOAUSQ;
				}
				
			    public String JOSCHT;

				public String getJOSCHT () {
					return this.JOSCHT;
				}
				
			    public String JOSTDT;

				public String getJOSTDT () {
					return this.JOSTDT;
				}
				
			    public String JOSCTP;

				public String getJOSCTP () {
					return this.JOSCTP;
				}
				
			    public String JOSTCT;

				public String getJOSTCT () {
					return this.JOSTCT;
				}
				
			    public String JODPZ1;

				public String getJODPZ1 () {
					return this.JODPZ1;
				}
				
			    public String JODPZ2;

				public String getJODPZ2 () {
					return this.JODPZ2;
				}
				
			    public String JODPZ3;

				public String getJODPZ3 () {
					return this.JODPZ3;
				}
				
			    public String JODPZ4;

				public String getJODPZ4 () {
					return this.JODPZ4;
				}
				
			    public String JODPZ5;

				public String getJODPZ5 () {
					return this.JODPZ5;
				}
				
			    public String JODPZ6;

				public String getJODPZ6 () {
					return this.JODPZ6;
				}
				
			    public String JODPZ7;

				public String getJODPZ7 () {
					return this.JODPZ7;
				}
				
			    public String JOOTCN;

				public String getJOOTCN () {
					return this.JOOTCN;
				}
				
			    public String JOMADN;

				public String getJOMADN () {
					return this.JOMADN;
				}
				
			    public String JORCOR;

				public String getJORCOR () {
					return this.JORCOR;
				}
				
			    public String JOICOR;

				public String getJOICOR () {
					return this.JOICOR;
				}
				
			    public String JOSCOR;

				public String getJOSCOR () {
					return this.JOSCOR;
				}
				
			    public String JOPTAP;

				public String getJOPTAP () {
					return this.JOPTAP;
				}
				
			    public String JODSDL;

				public String getJODSDL () {
					return this.JODSDL;
				}
				
			    public String JODDL2;

				public String getJODDL2 () {
					return this.JODDL2;
				}
				
			    public String JODSSC;

				public String getJODSSC () {
					return this.JODSSC;
				}
				
			    public String JOBHD1;

				public String getJOBHD1 () {
					return this.JOBHD1;
				}
				
			    public String JOBHD2;

				public String getJOBHD2 () {
					return this.JOBHD2;
				}
				
			    public String JOTXEN;

				public String getJOTXEN () {
					return this.JOTXEN;
				}
				
			    public String JOPRNM;

				public String getJOPRNM () {
					return this.JOPRNM;
				}
				
			    public String JOSTCD;

				public String getJOSTCD () {
					return this.JOSTCD;
				}
				
			    public String JOBHF2;

				public String getJOBHF2 () {
					return this.JOBHF2;
				}
				
			    public String JOAPB2;

				public String getJOAPB2 () {
					return this.JOAPB2;
				}
				
			    public String JOBHT2;

				public String getJOBHT2 () {
					return this.JOBHT2;
				}
				
			    public String JOAPH2;

				public String getJOAPH2 () {
					return this.JOAPH2;
				}
				
			    public String JOTORD;

				public String getJOTORD () {
					return this.JOTORD;
				}
				
			    public String JOTXAP;

				public String getJOTXAP () {
					return this.JOTXAP;
				}
				
			    public String JORSAP;

				public String getJORSAP () {
					return this.JORSAP;
				}
				
			    public String JOCSAP;

				public String getJOCSAP () {
					return this.JOCSAP;
				}
				
			    public String JOAIAP;

				public String getJOAIAP () {
					return this.JOAIAP;
				}
				
			    public String JOALNM;

				public String getJOALNM () {
					return this.JOALNM;
				}
				
			    public String JOSRNM;

				public String getJOSRNM () {
					return this.JOSRNM;
				}
				
			    public String JOMNRN;

				public String getJOMNRN () {
					return this.JOMNRN;
				}
				
			    public String JOMXRN;

				public String getJOMXRN () {
					return this.JOMXRN;
				}
				
			    public String JOCBNM;

				public String getJOCBNM () {
					return this.JOCBNM;
				}
				
			    public String JOHPNM;

				public String getJOHPNM () {
					return this.JOHPNM;
				}
				
			    public String JOOPSC;

				public String getJOOPSC () {
					return this.JOOPSC;
				}
				
			    public String JOOPSP;

				public String getJOOPSP () {
					return this.JOOPSP;
				}
				
			    public BigDecimal JOMSES;

				public BigDecimal getJOMSES () {
					return this.JOMSES;
				}
				
			    public BigDecimal JOMPES;

				public BigDecimal getJOMPES () {
					return this.JOMPES;
				}
				
			    public String JOEMDT;

				public String getJOEMDT () {
					return this.JOEMDT;
				}
				
			    public String JOEXMT;

				public String getJOEXMT () {
					return this.JOEXMT;
				}
				
			    public String JOREAP;

				public String getJOREAP () {
					return this.JOREAP;
				}
				
			    public String JOAGAP;

				public String getJOAGAP () {
					return this.JOAGAP;
				}
				
			    public String JODSAP;

				public String getJODSAP () {
					return this.JODSAP;
				}
				
			    public String JONTAP;

				public String getJONTAP () {
					return this.JONTAP;
				}
				
			    public String JOMSTS;

				public String getJOMSTS () {
					return this.JOMSTS;
				}
				
			    public String JOAAPP;

				public String getJOAAPP () {
					return this.JOAAPP;
				}
				
			    public String JOCENT;

				public String getJOCENT () {
					return this.JOCENT;
				}
				
			    public String JOSTAE;

				public String getJOSTAE () {
					return this.JOSTAE;
				}
				
			    public String JOCOMF;

				public String getJOCOMF () {
					return this.JOCOMF;
				}
				
			    public String JONOPO;

				public String getJONOPO () {
					return this.JONOPO;
				}
				
			    public BigDecimal JOOPOA;

				public BigDecimal getJOOPOA () {
					return this.JOOPOA;
				}
				
			    public String JOKOCU;

				public String getJOKOCU () {
					return this.JOKOCU;
				}
				
			    public String JOLTCN;

				public String getJOLTCN () {
					return this.JOLTCN;
				}
				
			    public String JOLTZN;

				public String getJOLTZN () {
					return this.JOLTZN;
				}
				
			    public String JOSSCP;

				public String getJOSSCP () {
					return this.JOSSCP;
				}
				
			    public String JOOSDT;

				public String getJOOSDT () {
					return this.JOOSDT;
				}
				
			    public String JOLTUF;

				public String getJOLTUF () {
					return this.JOLTUF;
				}
				
			    public String JOTPCF;

				public String getJOTPCF () {
					return this.JOTPCF;
				}
				
			    public String JOSCCC;

				public String getJOSCCC () {
					return this.JOSCCC;
				}
				
			    public String JOSMCO;

				public String getJOSMCO () {
					return this.JOSMCO;
				}
				
			    public String JOSUHM;

				public String getJOSUHM () {
					return this.JOSUHM;
				}
				
			    public String JOHMCO;

				public String getJOHMCO () {
					return this.JOHMCO;
				}
				
			    public String JOLOHM;

				public String getJOLOHM () {
					return this.JOLOHM;
				}
				
			    public String JOSIAV;

				public String getJOSIAV () {
					return this.JOSIAV;
				}
				
			    public String JOMAPC;

				public String getJOMAPC () {
					return this.JOMAPC;
				}
				
			    public String JOARLF;

				public String getJOARLF () {
					return this.JOARLF;
				}
				
			    public String JOPRLF;

				public String getJOPRLF () {
					return this.JOPRLF;
				}
				
			    public String JOSRLF;

				public String getJOSRLF () {
					return this.JOSRLF;
				}
				
			    public String JOMIRF;

				public String getJOMIRF () {
					return this.JOMIRF;
				}
				
			    public String JOMARF;

				public String getJOMARF () {
					return this.JOMARF;
				}
				
			    public String JOCBRF;

				public String getJOCBRF () {
					return this.JOCBRF;
				}
				
			    public String JOHPCF;

				public String getJOHPCF () {
					return this.JOHPCF;
				}
				
			    public String JOOPSF;

				public String getJOOPSF () {
					return this.JOOPSF;
				}
				
			    public String JOOPDF;

				public String getJOOPDF () {
					return this.JOOPDF;
				}
				
			    public String JODFR7;

				public String getJODFR7 () {
					return this.JODFR7;
				}
				
			    public String JODFR1;

				public String getJODFR1 () {
					return this.JODFR1;
				}
				
			    public String JODFR2;

				public String getJODFR2 () {
					return this.JODFR2;
				}
				
			    public String JODFR3;

				public String getJODFR3 () {
					return this.JODFR3;
				}
				
			    public String JODFR4;

				public String getJODFR4 () {
					return this.JODFR4;
				}
				
			    public String JODFR5;

				public String getJODFR5 () {
					return this.JODFR5;
				}
				
			    public String JODFR6;

				public String getJODFR6 () {
					return this.JODFR6;
				}
				
			    public String JODFS7;

				public String getJODFS7 () {
					return this.JODFS7;
				}
				
			    public String JODFS1;

				public String getJODFS1 () {
					return this.JODFS1;
				}
				
			    public String JODFS2;

				public String getJODFS2 () {
					return this.JODFS2;
				}
				
			    public String JODFS3;

				public String getJODFS3 () {
					return this.JODFS3;
				}
				
			    public String JODFS4;

				public String getJODFS4 () {
					return this.JODFS4;
				}
				
			    public String JODFS5;

				public String getJODFS5 () {
					return this.JODFS5;
				}
				
			    public String JODFS6;

				public String getJODFS6 () {
					return this.JODFS6;
				}
				
			    public String JOLTCO;

				public String getJOLTCO () {
					return this.JOLTCO;
				}
				
			    public String JOLNCO;

				public String getJOLNCO () {
					return this.JOLNCO;
				}
				
			    public String JOLTDR;

				public String getJOLTDR () {
					return this.JOLTDR;
				}
				
			    public String JOLNDR;

				public String getJOLNDR () {
					return this.JOLNDR;
				}
				
			    public String JOFRDL;

				public String getJOFRDL () {
					return this.JOFRDL;
				}
				
			    public String JOFRCD;

				public String getJOFRCD () {
					return this.JOFRCD;
				}
				
			    public String JOLTEX;

				public String getJOLTEX () {
					return this.JOLTEX;
				}
				
			    public String JOOGSN;

				public String getJOOGSN () {
					return this.JOOGSN;
				}
				
			    public String JOSCHG;

				public String getJOSCHG () {
					return this.JOSCHG;
				}
				
			    public String JOPICU;

				public String getJOPICU () {
					return this.JOPICU;
				}
				
			    public String JODDRT;

				public String getJODDRT () {
					return this.JODDRT;
				}
				
			    public String JOCRPM;

				public String getJOCRPM () {
					return this.JOCRPM;
				}
				
			    public String JOCRPN;

				public String getJOCRPN () {
					return this.JOCRPN;
				}
				
			    public String JOCPPC;

				public String getJOCPPC () {
					return this.JOCPPC;
				}
				
			    public String JOCPRN;

				public String getJOCPRN () {
					return this.JOCPRN;
				}
				
			    public String JOCHMC;

				public String getJOCHMC () {
					return this.JOCHMC;
				}
				
			    public String JOCRHM;

				public String getJOCRHM () {
					return this.JOCRHM;
				}
				
			    public String JOLOCA;

				public String getJOLOCA () {
					return this.JOLOCA;
				}
				
			    public String JORCSR;

				public String getJORCSR () {
					return this.JORCSR;
				}
				
			    public String JOICSR;

				public String getJOICSR () {
					return this.JOICSR;
				}
				
			    public String JOSCSR;

				public String getJOSCSR () {
					return this.JOSCSR;
				}
				
			    public String JOPCSR;

				public String getJOPCSR () {
					return this.JOPCSR;
				}
				
			    public String JOARSR;

				public String getJOARSR () {
					return this.JOARSR;
				}
				
			    public String JOSBSR;

				public String getJOSBSR () {
					return this.JOSBSR;
				}
				
			    public String JOMNSR;

				public String getJOMNSR () {
					return this.JOMNSR;
				}
				
			    public String JOMXSR;

				public String getJOMXSR () {
					return this.JOMXSR;
				}
				
			    public String JOCMSR;

				public String getJOCMSR () {
					return this.JOCMSR;
				}
				
			    public String JOHPSR;

				public String getJOHPSR () {
					return this.JOHPSR;
				}
				
			    public String JOLAQF;

				public String getJOLAQF () {
					return this.JOLAQF;
				}
				
			    public BigDecimal JOEADT;

				public BigDecimal getJOEADT () {
					return this.JOEADT;
				}
				
			    public BigDecimal JOEATM;

				public BigDecimal getJOEATM () {
					return this.JOEATM;
				}
				
			    public String JOEAID;

				public String getJOEAID () {
					return this.JOEAID;
				}
				
			    public BigDecimal JOMODT;

				public BigDecimal getJOMODT () {
					return this.JOMODT;
				}
				
			    public BigDecimal JOMOTM;

				public BigDecimal getJOMOTM () {
					return this.JOMOTM;
				}
				
			    public String JOMOID;

				public String getJOMOID () {
					return this.JOMOID;
				}
				
			    public String JOMOPG;

				public String getJOMOPG () {
					return this.JOMOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Customer_Ship_To_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.JOARCO = readString(dis);
					
					this.JOCUNO = readString(dis);
					
					this.JONANO = readString(dis);
					
					this.JODELC = readString(dis);
					
					this.JOSTNU = readString(dis);
					
					this.JOPLSZ = readString(dis);
					
					this.JOORAP = readString(dis);
					
					this.JOPORQ = readString(dis);
					
					this.JOBHFR = readString(dis);
					
					this.JOAPBF = readString(dis);
					
					this.JOBHTO = readString(dis);
					
					this.JOAPBT = readString(dis);
					
					this.JODHF1 = readString(dis);
					
					this.JOAPF1 = readString(dis);
					
					this.JODHT1 = readString(dis);
					
					this.JOAPT1 = readString(dis);
					
					this.JODHF2 = readString(dis);
					
					this.JOAPF2 = readString(dis);
					
					this.JODHT2 = readString(dis);
					
					this.JOAPT2 = readString(dis);
					
					this.JODHF3 = readString(dis);
					
					this.JOAPF3 = readString(dis);
					
					this.JODHT3 = readString(dis);
					
					this.JOAPT3 = readString(dis);
					
					this.JODHF4 = readString(dis);
					
					this.JOAPF4 = readString(dis);
					
					this.JODHT4 = readString(dis);
					
					this.JOAPT4 = readString(dis);
					
					this.JOINSC = readString(dis);
					
					this.JOINPE = readString(dis);
					
					this.JOINSU = readString(dis);
					
					this.JOINNE = readString(dis);
					
					this.JOINSI = readString(dis);
					
					this.JOINNI = readString(dis);
					
					this.JORFEE = readString(dis);
					
					this.JOACCP = readString(dis);
					
					this.JOPDF1 = readString(dis);
					
					this.JOPFF1 = readString(dis);
					
					this.JOPDT1 = readString(dis);
					
					this.JOPFT1 = readString(dis);
					
					this.JOPDF2 = readString(dis);
					
					this.JOPFF2 = readString(dis);
					
					this.JOPDT2 = readString(dis);
					
					this.JOPFT2 = readString(dis);
					
					this.JOOPTP = readString(dis);
					
					this.JOCUIS = readString(dis);
					
					this.JOCRDT = readString(dis);
					
					this.JOARDT = readString(dis);
					
					this.JOIOCH = readString(dis);
					
					this.JODSUB = readString(dis);
					
					this.JODRTF = readString(dis);
					
					this.JORSID = readString(dis);
					
					this.JOFSUB = readString(dis);
					
					this.JODPMT = readString(dis);
					
					this.JOPARF = readString(dis);
					
					this.JONPRF = readString(dis);
					
					this.JOTXEX = readString(dis);
					
					this.JOOWNR = readString(dis);
					
					this.JOMACO = readString(dis);
					
					this.JOMAD1 = readString(dis);
					
					this.JOMAD2 = readString(dis);
					
					this.JOMAD3 = readString(dis);
					
					this.JOMCIT = readString(dis);
					
					this.JOMSTA = readString(dis);
					
					this.JOMZIP = readString(dis);
					
					this.JOCY03 = readString(dis);
					
					this.JOCSTA = readString(dis);
					
					this.JOIALL = readString(dis);
					
					this.JOSHST = readString(dis);
					
					this.JORSCT = readString(dis);
					
					this.JOIOCT = readString(dis);
					
					this.JOCGFL = readString(dis);
					
					this.JOORPF = readString(dis);
					
					this.JOGLDC = readString(dis);
					
					this.JOVNBR = readString(dis);
					
					this.JOADCD = readString(dis);
					
					this.JOBTRT = readString(dis);
					
					this.JOAXZP = readString(dis);
					
					this.JOPONU = readString(dis);
					
					this.JOCMCD = readString(dis);
					
					this.JOPVST = readString(dis);
					
					this.JOPMTC = readString(dis);
					
					this.JOPGIN = readString(dis);
					
					this.JOPGED = readString(dis);
					
					this.JOPGTI = readString(dis);
					
					this.JOSTNR = readString(dis);
					
					this.JOSTIN = readString(dis);
					
					this.JOLOPT = readString(dis);
					
					this.JOPONE = readString(dis);
					
					this.JOPOTI = readString(dis);
					
					this.JOAUSQ = readString(dis);
					
					this.JOSCHT = readString(dis);
					
					this.JOSTDT = readString(dis);
					
					this.JOSCTP = readString(dis);
					
					this.JOSTCT = readString(dis);
					
					this.JODPZ1 = readString(dis);
					
					this.JODPZ2 = readString(dis);
					
					this.JODPZ3 = readString(dis);
					
					this.JODPZ4 = readString(dis);
					
					this.JODPZ5 = readString(dis);
					
					this.JODPZ6 = readString(dis);
					
					this.JODPZ7 = readString(dis);
					
					this.JOOTCN = readString(dis);
					
					this.JOMADN = readString(dis);
					
					this.JORCOR = readString(dis);
					
					this.JOICOR = readString(dis);
					
					this.JOSCOR = readString(dis);
					
					this.JOPTAP = readString(dis);
					
					this.JODSDL = readString(dis);
					
					this.JODDL2 = readString(dis);
					
					this.JODSSC = readString(dis);
					
					this.JOBHD1 = readString(dis);
					
					this.JOBHD2 = readString(dis);
					
					this.JOTXEN = readString(dis);
					
					this.JOPRNM = readString(dis);
					
					this.JOSTCD = readString(dis);
					
					this.JOBHF2 = readString(dis);
					
					this.JOAPB2 = readString(dis);
					
					this.JOBHT2 = readString(dis);
					
					this.JOAPH2 = readString(dis);
					
					this.JOTORD = readString(dis);
					
					this.JOTXAP = readString(dis);
					
					this.JORSAP = readString(dis);
					
					this.JOCSAP = readString(dis);
					
					this.JOAIAP = readString(dis);
					
					this.JOALNM = readString(dis);
					
					this.JOSRNM = readString(dis);
					
					this.JOMNRN = readString(dis);
					
					this.JOMXRN = readString(dis);
					
					this.JOCBNM = readString(dis);
					
					this.JOHPNM = readString(dis);
					
					this.JOOPSC = readString(dis);
					
					this.JOOPSP = readString(dis);
					
						this.JOMSES = (BigDecimal) dis.readObject();
					
						this.JOMPES = (BigDecimal) dis.readObject();
					
					this.JOEMDT = readString(dis);
					
					this.JOEXMT = readString(dis);
					
					this.JOREAP = readString(dis);
					
					this.JOAGAP = readString(dis);
					
					this.JODSAP = readString(dis);
					
					this.JONTAP = readString(dis);
					
					this.JOMSTS = readString(dis);
					
					this.JOAAPP = readString(dis);
					
					this.JOCENT = readString(dis);
					
					this.JOSTAE = readString(dis);
					
					this.JOCOMF = readString(dis);
					
					this.JONOPO = readString(dis);
					
						this.JOOPOA = (BigDecimal) dis.readObject();
					
					this.JOKOCU = readString(dis);
					
					this.JOLTCN = readString(dis);
					
					this.JOLTZN = readString(dis);
					
					this.JOSSCP = readString(dis);
					
					this.JOOSDT = readString(dis);
					
					this.JOLTUF = readString(dis);
					
					this.JOTPCF = readString(dis);
					
					this.JOSCCC = readString(dis);
					
					this.JOSMCO = readString(dis);
					
					this.JOSUHM = readString(dis);
					
					this.JOHMCO = readString(dis);
					
					this.JOLOHM = readString(dis);
					
					this.JOSIAV = readString(dis);
					
					this.JOMAPC = readString(dis);
					
					this.JOARLF = readString(dis);
					
					this.JOPRLF = readString(dis);
					
					this.JOSRLF = readString(dis);
					
					this.JOMIRF = readString(dis);
					
					this.JOMARF = readString(dis);
					
					this.JOCBRF = readString(dis);
					
					this.JOHPCF = readString(dis);
					
					this.JOOPSF = readString(dis);
					
					this.JOOPDF = readString(dis);
					
					this.JODFR7 = readString(dis);
					
					this.JODFR1 = readString(dis);
					
					this.JODFR2 = readString(dis);
					
					this.JODFR3 = readString(dis);
					
					this.JODFR4 = readString(dis);
					
					this.JODFR5 = readString(dis);
					
					this.JODFR6 = readString(dis);
					
					this.JODFS7 = readString(dis);
					
					this.JODFS1 = readString(dis);
					
					this.JODFS2 = readString(dis);
					
					this.JODFS3 = readString(dis);
					
					this.JODFS4 = readString(dis);
					
					this.JODFS5 = readString(dis);
					
					this.JODFS6 = readString(dis);
					
					this.JOLTCO = readString(dis);
					
					this.JOLNCO = readString(dis);
					
					this.JOLTDR = readString(dis);
					
					this.JOLNDR = readString(dis);
					
					this.JOFRDL = readString(dis);
					
					this.JOFRCD = readString(dis);
					
					this.JOLTEX = readString(dis);
					
					this.JOOGSN = readString(dis);
					
					this.JOSCHG = readString(dis);
					
					this.JOPICU = readString(dis);
					
					this.JODDRT = readString(dis);
					
					this.JOCRPM = readString(dis);
					
					this.JOCRPN = readString(dis);
					
					this.JOCPPC = readString(dis);
					
					this.JOCPRN = readString(dis);
					
					this.JOCHMC = readString(dis);
					
					this.JOCRHM = readString(dis);
					
					this.JOLOCA = readString(dis);
					
					this.JORCSR = readString(dis);
					
					this.JOICSR = readString(dis);
					
					this.JOSCSR = readString(dis);
					
					this.JOPCSR = readString(dis);
					
					this.JOARSR = readString(dis);
					
					this.JOSBSR = readString(dis);
					
					this.JOMNSR = readString(dis);
					
					this.JOMXSR = readString(dis);
					
					this.JOCMSR = readString(dis);
					
					this.JOHPSR = readString(dis);
					
					this.JOLAQF = readString(dis);
					
						this.JOEADT = (BigDecimal) dis.readObject();
					
						this.JOEATM = (BigDecimal) dis.readObject();
					
					this.JOEAID = readString(dis);
					
						this.JOMODT = (BigDecimal) dis.readObject();
					
						this.JOMOTM = (BigDecimal) dis.readObject();
					
					this.JOMOID = readString(dis);
					
					this.JOMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Customer_Ship_To_Inbound) {

        	try {

        		int length = 0;
		
					this.JOARCO = readString(dis);
					
					this.JOCUNO = readString(dis);
					
					this.JONANO = readString(dis);
					
					this.JODELC = readString(dis);
					
					this.JOSTNU = readString(dis);
					
					this.JOPLSZ = readString(dis);
					
					this.JOORAP = readString(dis);
					
					this.JOPORQ = readString(dis);
					
					this.JOBHFR = readString(dis);
					
					this.JOAPBF = readString(dis);
					
					this.JOBHTO = readString(dis);
					
					this.JOAPBT = readString(dis);
					
					this.JODHF1 = readString(dis);
					
					this.JOAPF1 = readString(dis);
					
					this.JODHT1 = readString(dis);
					
					this.JOAPT1 = readString(dis);
					
					this.JODHF2 = readString(dis);
					
					this.JOAPF2 = readString(dis);
					
					this.JODHT2 = readString(dis);
					
					this.JOAPT2 = readString(dis);
					
					this.JODHF3 = readString(dis);
					
					this.JOAPF3 = readString(dis);
					
					this.JODHT3 = readString(dis);
					
					this.JOAPT3 = readString(dis);
					
					this.JODHF4 = readString(dis);
					
					this.JOAPF4 = readString(dis);
					
					this.JODHT4 = readString(dis);
					
					this.JOAPT4 = readString(dis);
					
					this.JOINSC = readString(dis);
					
					this.JOINPE = readString(dis);
					
					this.JOINSU = readString(dis);
					
					this.JOINNE = readString(dis);
					
					this.JOINSI = readString(dis);
					
					this.JOINNI = readString(dis);
					
					this.JORFEE = readString(dis);
					
					this.JOACCP = readString(dis);
					
					this.JOPDF1 = readString(dis);
					
					this.JOPFF1 = readString(dis);
					
					this.JOPDT1 = readString(dis);
					
					this.JOPFT1 = readString(dis);
					
					this.JOPDF2 = readString(dis);
					
					this.JOPFF2 = readString(dis);
					
					this.JOPDT2 = readString(dis);
					
					this.JOPFT2 = readString(dis);
					
					this.JOOPTP = readString(dis);
					
					this.JOCUIS = readString(dis);
					
					this.JOCRDT = readString(dis);
					
					this.JOARDT = readString(dis);
					
					this.JOIOCH = readString(dis);
					
					this.JODSUB = readString(dis);
					
					this.JODRTF = readString(dis);
					
					this.JORSID = readString(dis);
					
					this.JOFSUB = readString(dis);
					
					this.JODPMT = readString(dis);
					
					this.JOPARF = readString(dis);
					
					this.JONPRF = readString(dis);
					
					this.JOTXEX = readString(dis);
					
					this.JOOWNR = readString(dis);
					
					this.JOMACO = readString(dis);
					
					this.JOMAD1 = readString(dis);
					
					this.JOMAD2 = readString(dis);
					
					this.JOMAD3 = readString(dis);
					
					this.JOMCIT = readString(dis);
					
					this.JOMSTA = readString(dis);
					
					this.JOMZIP = readString(dis);
					
					this.JOCY03 = readString(dis);
					
					this.JOCSTA = readString(dis);
					
					this.JOIALL = readString(dis);
					
					this.JOSHST = readString(dis);
					
					this.JORSCT = readString(dis);
					
					this.JOIOCT = readString(dis);
					
					this.JOCGFL = readString(dis);
					
					this.JOORPF = readString(dis);
					
					this.JOGLDC = readString(dis);
					
					this.JOVNBR = readString(dis);
					
					this.JOADCD = readString(dis);
					
					this.JOBTRT = readString(dis);
					
					this.JOAXZP = readString(dis);
					
					this.JOPONU = readString(dis);
					
					this.JOCMCD = readString(dis);
					
					this.JOPVST = readString(dis);
					
					this.JOPMTC = readString(dis);
					
					this.JOPGIN = readString(dis);
					
					this.JOPGED = readString(dis);
					
					this.JOPGTI = readString(dis);
					
					this.JOSTNR = readString(dis);
					
					this.JOSTIN = readString(dis);
					
					this.JOLOPT = readString(dis);
					
					this.JOPONE = readString(dis);
					
					this.JOPOTI = readString(dis);
					
					this.JOAUSQ = readString(dis);
					
					this.JOSCHT = readString(dis);
					
					this.JOSTDT = readString(dis);
					
					this.JOSCTP = readString(dis);
					
					this.JOSTCT = readString(dis);
					
					this.JODPZ1 = readString(dis);
					
					this.JODPZ2 = readString(dis);
					
					this.JODPZ3 = readString(dis);
					
					this.JODPZ4 = readString(dis);
					
					this.JODPZ5 = readString(dis);
					
					this.JODPZ6 = readString(dis);
					
					this.JODPZ7 = readString(dis);
					
					this.JOOTCN = readString(dis);
					
					this.JOMADN = readString(dis);
					
					this.JORCOR = readString(dis);
					
					this.JOICOR = readString(dis);
					
					this.JOSCOR = readString(dis);
					
					this.JOPTAP = readString(dis);
					
					this.JODSDL = readString(dis);
					
					this.JODDL2 = readString(dis);
					
					this.JODSSC = readString(dis);
					
					this.JOBHD1 = readString(dis);
					
					this.JOBHD2 = readString(dis);
					
					this.JOTXEN = readString(dis);
					
					this.JOPRNM = readString(dis);
					
					this.JOSTCD = readString(dis);
					
					this.JOBHF2 = readString(dis);
					
					this.JOAPB2 = readString(dis);
					
					this.JOBHT2 = readString(dis);
					
					this.JOAPH2 = readString(dis);
					
					this.JOTORD = readString(dis);
					
					this.JOTXAP = readString(dis);
					
					this.JORSAP = readString(dis);
					
					this.JOCSAP = readString(dis);
					
					this.JOAIAP = readString(dis);
					
					this.JOALNM = readString(dis);
					
					this.JOSRNM = readString(dis);
					
					this.JOMNRN = readString(dis);
					
					this.JOMXRN = readString(dis);
					
					this.JOCBNM = readString(dis);
					
					this.JOHPNM = readString(dis);
					
					this.JOOPSC = readString(dis);
					
					this.JOOPSP = readString(dis);
					
						this.JOMSES = (BigDecimal) dis.readObject();
					
						this.JOMPES = (BigDecimal) dis.readObject();
					
					this.JOEMDT = readString(dis);
					
					this.JOEXMT = readString(dis);
					
					this.JOREAP = readString(dis);
					
					this.JOAGAP = readString(dis);
					
					this.JODSAP = readString(dis);
					
					this.JONTAP = readString(dis);
					
					this.JOMSTS = readString(dis);
					
					this.JOAAPP = readString(dis);
					
					this.JOCENT = readString(dis);
					
					this.JOSTAE = readString(dis);
					
					this.JOCOMF = readString(dis);
					
					this.JONOPO = readString(dis);
					
						this.JOOPOA = (BigDecimal) dis.readObject();
					
					this.JOKOCU = readString(dis);
					
					this.JOLTCN = readString(dis);
					
					this.JOLTZN = readString(dis);
					
					this.JOSSCP = readString(dis);
					
					this.JOOSDT = readString(dis);
					
					this.JOLTUF = readString(dis);
					
					this.JOTPCF = readString(dis);
					
					this.JOSCCC = readString(dis);
					
					this.JOSMCO = readString(dis);
					
					this.JOSUHM = readString(dis);
					
					this.JOHMCO = readString(dis);
					
					this.JOLOHM = readString(dis);
					
					this.JOSIAV = readString(dis);
					
					this.JOMAPC = readString(dis);
					
					this.JOARLF = readString(dis);
					
					this.JOPRLF = readString(dis);
					
					this.JOSRLF = readString(dis);
					
					this.JOMIRF = readString(dis);
					
					this.JOMARF = readString(dis);
					
					this.JOCBRF = readString(dis);
					
					this.JOHPCF = readString(dis);
					
					this.JOOPSF = readString(dis);
					
					this.JOOPDF = readString(dis);
					
					this.JODFR7 = readString(dis);
					
					this.JODFR1 = readString(dis);
					
					this.JODFR2 = readString(dis);
					
					this.JODFR3 = readString(dis);
					
					this.JODFR4 = readString(dis);
					
					this.JODFR5 = readString(dis);
					
					this.JODFR6 = readString(dis);
					
					this.JODFS7 = readString(dis);
					
					this.JODFS1 = readString(dis);
					
					this.JODFS2 = readString(dis);
					
					this.JODFS3 = readString(dis);
					
					this.JODFS4 = readString(dis);
					
					this.JODFS5 = readString(dis);
					
					this.JODFS6 = readString(dis);
					
					this.JOLTCO = readString(dis);
					
					this.JOLNCO = readString(dis);
					
					this.JOLTDR = readString(dis);
					
					this.JOLNDR = readString(dis);
					
					this.JOFRDL = readString(dis);
					
					this.JOFRCD = readString(dis);
					
					this.JOLTEX = readString(dis);
					
					this.JOOGSN = readString(dis);
					
					this.JOSCHG = readString(dis);
					
					this.JOPICU = readString(dis);
					
					this.JODDRT = readString(dis);
					
					this.JOCRPM = readString(dis);
					
					this.JOCRPN = readString(dis);
					
					this.JOCPPC = readString(dis);
					
					this.JOCPRN = readString(dis);
					
					this.JOCHMC = readString(dis);
					
					this.JOCRHM = readString(dis);
					
					this.JOLOCA = readString(dis);
					
					this.JORCSR = readString(dis);
					
					this.JOICSR = readString(dis);
					
					this.JOSCSR = readString(dis);
					
					this.JOPCSR = readString(dis);
					
					this.JOARSR = readString(dis);
					
					this.JOSBSR = readString(dis);
					
					this.JOMNSR = readString(dis);
					
					this.JOMXSR = readString(dis);
					
					this.JOCMSR = readString(dis);
					
					this.JOHPSR = readString(dis);
					
					this.JOLAQF = readString(dis);
					
						this.JOEADT = (BigDecimal) dis.readObject();
					
						this.JOEATM = (BigDecimal) dis.readObject();
					
					this.JOEAID = readString(dis);
					
						this.JOMODT = (BigDecimal) dis.readObject();
					
						this.JOMOTM = (BigDecimal) dis.readObject();
					
					this.JOMOID = readString(dis);
					
					this.JOMOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.JOARCO,dos);
					
					// String
				
						writeString(this.JOCUNO,dos);
					
					// String
				
						writeString(this.JONANO,dos);
					
					// String
				
						writeString(this.JODELC,dos);
					
					// String
				
						writeString(this.JOSTNU,dos);
					
					// String
				
						writeString(this.JOPLSZ,dos);
					
					// String
				
						writeString(this.JOORAP,dos);
					
					// String
				
						writeString(this.JOPORQ,dos);
					
					// String
				
						writeString(this.JOBHFR,dos);
					
					// String
				
						writeString(this.JOAPBF,dos);
					
					// String
				
						writeString(this.JOBHTO,dos);
					
					// String
				
						writeString(this.JOAPBT,dos);
					
					// String
				
						writeString(this.JODHF1,dos);
					
					// String
				
						writeString(this.JOAPF1,dos);
					
					// String
				
						writeString(this.JODHT1,dos);
					
					// String
				
						writeString(this.JOAPT1,dos);
					
					// String
				
						writeString(this.JODHF2,dos);
					
					// String
				
						writeString(this.JOAPF2,dos);
					
					// String
				
						writeString(this.JODHT2,dos);
					
					// String
				
						writeString(this.JOAPT2,dos);
					
					// String
				
						writeString(this.JODHF3,dos);
					
					// String
				
						writeString(this.JOAPF3,dos);
					
					// String
				
						writeString(this.JODHT3,dos);
					
					// String
				
						writeString(this.JOAPT3,dos);
					
					// String
				
						writeString(this.JODHF4,dos);
					
					// String
				
						writeString(this.JOAPF4,dos);
					
					// String
				
						writeString(this.JODHT4,dos);
					
					// String
				
						writeString(this.JOAPT4,dos);
					
					// String
				
						writeString(this.JOINSC,dos);
					
					// String
				
						writeString(this.JOINPE,dos);
					
					// String
				
						writeString(this.JOINSU,dos);
					
					// String
				
						writeString(this.JOINNE,dos);
					
					// String
				
						writeString(this.JOINSI,dos);
					
					// String
				
						writeString(this.JOINNI,dos);
					
					// String
				
						writeString(this.JORFEE,dos);
					
					// String
				
						writeString(this.JOACCP,dos);
					
					// String
				
						writeString(this.JOPDF1,dos);
					
					// String
				
						writeString(this.JOPFF1,dos);
					
					// String
				
						writeString(this.JOPDT1,dos);
					
					// String
				
						writeString(this.JOPFT1,dos);
					
					// String
				
						writeString(this.JOPDF2,dos);
					
					// String
				
						writeString(this.JOPFF2,dos);
					
					// String
				
						writeString(this.JOPDT2,dos);
					
					// String
				
						writeString(this.JOPFT2,dos);
					
					// String
				
						writeString(this.JOOPTP,dos);
					
					// String
				
						writeString(this.JOCUIS,dos);
					
					// String
				
						writeString(this.JOCRDT,dos);
					
					// String
				
						writeString(this.JOARDT,dos);
					
					// String
				
						writeString(this.JOIOCH,dos);
					
					// String
				
						writeString(this.JODSUB,dos);
					
					// String
				
						writeString(this.JODRTF,dos);
					
					// String
				
						writeString(this.JORSID,dos);
					
					// String
				
						writeString(this.JOFSUB,dos);
					
					// String
				
						writeString(this.JODPMT,dos);
					
					// String
				
						writeString(this.JOPARF,dos);
					
					// String
				
						writeString(this.JONPRF,dos);
					
					// String
				
						writeString(this.JOTXEX,dos);
					
					// String
				
						writeString(this.JOOWNR,dos);
					
					// String
				
						writeString(this.JOMACO,dos);
					
					// String
				
						writeString(this.JOMAD1,dos);
					
					// String
				
						writeString(this.JOMAD2,dos);
					
					// String
				
						writeString(this.JOMAD3,dos);
					
					// String
				
						writeString(this.JOMCIT,dos);
					
					// String
				
						writeString(this.JOMSTA,dos);
					
					// String
				
						writeString(this.JOMZIP,dos);
					
					// String
				
						writeString(this.JOCY03,dos);
					
					// String
				
						writeString(this.JOCSTA,dos);
					
					// String
				
						writeString(this.JOIALL,dos);
					
					// String
				
						writeString(this.JOSHST,dos);
					
					// String
				
						writeString(this.JORSCT,dos);
					
					// String
				
						writeString(this.JOIOCT,dos);
					
					// String
				
						writeString(this.JOCGFL,dos);
					
					// String
				
						writeString(this.JOORPF,dos);
					
					// String
				
						writeString(this.JOGLDC,dos);
					
					// String
				
						writeString(this.JOVNBR,dos);
					
					// String
				
						writeString(this.JOADCD,dos);
					
					// String
				
						writeString(this.JOBTRT,dos);
					
					// String
				
						writeString(this.JOAXZP,dos);
					
					// String
				
						writeString(this.JOPONU,dos);
					
					// String
				
						writeString(this.JOCMCD,dos);
					
					// String
				
						writeString(this.JOPVST,dos);
					
					// String
				
						writeString(this.JOPMTC,dos);
					
					// String
				
						writeString(this.JOPGIN,dos);
					
					// String
				
						writeString(this.JOPGED,dos);
					
					// String
				
						writeString(this.JOPGTI,dos);
					
					// String
				
						writeString(this.JOSTNR,dos);
					
					// String
				
						writeString(this.JOSTIN,dos);
					
					// String
				
						writeString(this.JOLOPT,dos);
					
					// String
				
						writeString(this.JOPONE,dos);
					
					// String
				
						writeString(this.JOPOTI,dos);
					
					// String
				
						writeString(this.JOAUSQ,dos);
					
					// String
				
						writeString(this.JOSCHT,dos);
					
					// String
				
						writeString(this.JOSTDT,dos);
					
					// String
				
						writeString(this.JOSCTP,dos);
					
					// String
				
						writeString(this.JOSTCT,dos);
					
					// String
				
						writeString(this.JODPZ1,dos);
					
					// String
				
						writeString(this.JODPZ2,dos);
					
					// String
				
						writeString(this.JODPZ3,dos);
					
					// String
				
						writeString(this.JODPZ4,dos);
					
					// String
				
						writeString(this.JODPZ5,dos);
					
					// String
				
						writeString(this.JODPZ6,dos);
					
					// String
				
						writeString(this.JODPZ7,dos);
					
					// String
				
						writeString(this.JOOTCN,dos);
					
					// String
				
						writeString(this.JOMADN,dos);
					
					// String
				
						writeString(this.JORCOR,dos);
					
					// String
				
						writeString(this.JOICOR,dos);
					
					// String
				
						writeString(this.JOSCOR,dos);
					
					// String
				
						writeString(this.JOPTAP,dos);
					
					// String
				
						writeString(this.JODSDL,dos);
					
					// String
				
						writeString(this.JODDL2,dos);
					
					// String
				
						writeString(this.JODSSC,dos);
					
					// String
				
						writeString(this.JOBHD1,dos);
					
					// String
				
						writeString(this.JOBHD2,dos);
					
					// String
				
						writeString(this.JOTXEN,dos);
					
					// String
				
						writeString(this.JOPRNM,dos);
					
					// String
				
						writeString(this.JOSTCD,dos);
					
					// String
				
						writeString(this.JOBHF2,dos);
					
					// String
				
						writeString(this.JOAPB2,dos);
					
					// String
				
						writeString(this.JOBHT2,dos);
					
					// String
				
						writeString(this.JOAPH2,dos);
					
					// String
				
						writeString(this.JOTORD,dos);
					
					// String
				
						writeString(this.JOTXAP,dos);
					
					// String
				
						writeString(this.JORSAP,dos);
					
					// String
				
						writeString(this.JOCSAP,dos);
					
					// String
				
						writeString(this.JOAIAP,dos);
					
					// String
				
						writeString(this.JOALNM,dos);
					
					// String
				
						writeString(this.JOSRNM,dos);
					
					// String
				
						writeString(this.JOMNRN,dos);
					
					// String
				
						writeString(this.JOMXRN,dos);
					
					// String
				
						writeString(this.JOCBNM,dos);
					
					// String
				
						writeString(this.JOHPNM,dos);
					
					// String
				
						writeString(this.JOOPSC,dos);
					
					// String
				
						writeString(this.JOOPSP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOMSES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOMPES);
					
					// String
				
						writeString(this.JOEMDT,dos);
					
					// String
				
						writeString(this.JOEXMT,dos);
					
					// String
				
						writeString(this.JOREAP,dos);
					
					// String
				
						writeString(this.JOAGAP,dos);
					
					// String
				
						writeString(this.JODSAP,dos);
					
					// String
				
						writeString(this.JONTAP,dos);
					
					// String
				
						writeString(this.JOMSTS,dos);
					
					// String
				
						writeString(this.JOAAPP,dos);
					
					// String
				
						writeString(this.JOCENT,dos);
					
					// String
				
						writeString(this.JOSTAE,dos);
					
					// String
				
						writeString(this.JOCOMF,dos);
					
					// String
				
						writeString(this.JONOPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOOPOA);
					
					// String
				
						writeString(this.JOKOCU,dos);
					
					// String
				
						writeString(this.JOLTCN,dos);
					
					// String
				
						writeString(this.JOLTZN,dos);
					
					// String
				
						writeString(this.JOSSCP,dos);
					
					// String
				
						writeString(this.JOOSDT,dos);
					
					// String
				
						writeString(this.JOLTUF,dos);
					
					// String
				
						writeString(this.JOTPCF,dos);
					
					// String
				
						writeString(this.JOSCCC,dos);
					
					// String
				
						writeString(this.JOSMCO,dos);
					
					// String
				
						writeString(this.JOSUHM,dos);
					
					// String
				
						writeString(this.JOHMCO,dos);
					
					// String
				
						writeString(this.JOLOHM,dos);
					
					// String
				
						writeString(this.JOSIAV,dos);
					
					// String
				
						writeString(this.JOMAPC,dos);
					
					// String
				
						writeString(this.JOARLF,dos);
					
					// String
				
						writeString(this.JOPRLF,dos);
					
					// String
				
						writeString(this.JOSRLF,dos);
					
					// String
				
						writeString(this.JOMIRF,dos);
					
					// String
				
						writeString(this.JOMARF,dos);
					
					// String
				
						writeString(this.JOCBRF,dos);
					
					// String
				
						writeString(this.JOHPCF,dos);
					
					// String
				
						writeString(this.JOOPSF,dos);
					
					// String
				
						writeString(this.JOOPDF,dos);
					
					// String
				
						writeString(this.JODFR7,dos);
					
					// String
				
						writeString(this.JODFR1,dos);
					
					// String
				
						writeString(this.JODFR2,dos);
					
					// String
				
						writeString(this.JODFR3,dos);
					
					// String
				
						writeString(this.JODFR4,dos);
					
					// String
				
						writeString(this.JODFR5,dos);
					
					// String
				
						writeString(this.JODFR6,dos);
					
					// String
				
						writeString(this.JODFS7,dos);
					
					// String
				
						writeString(this.JODFS1,dos);
					
					// String
				
						writeString(this.JODFS2,dos);
					
					// String
				
						writeString(this.JODFS3,dos);
					
					// String
				
						writeString(this.JODFS4,dos);
					
					// String
				
						writeString(this.JODFS5,dos);
					
					// String
				
						writeString(this.JODFS6,dos);
					
					// String
				
						writeString(this.JOLTCO,dos);
					
					// String
				
						writeString(this.JOLNCO,dos);
					
					// String
				
						writeString(this.JOLTDR,dos);
					
					// String
				
						writeString(this.JOLNDR,dos);
					
					// String
				
						writeString(this.JOFRDL,dos);
					
					// String
				
						writeString(this.JOFRCD,dos);
					
					// String
				
						writeString(this.JOLTEX,dos);
					
					// String
				
						writeString(this.JOOGSN,dos);
					
					// String
				
						writeString(this.JOSCHG,dos);
					
					// String
				
						writeString(this.JOPICU,dos);
					
					// String
				
						writeString(this.JODDRT,dos);
					
					// String
				
						writeString(this.JOCRPM,dos);
					
					// String
				
						writeString(this.JOCRPN,dos);
					
					// String
				
						writeString(this.JOCPPC,dos);
					
					// String
				
						writeString(this.JOCPRN,dos);
					
					// String
				
						writeString(this.JOCHMC,dos);
					
					// String
				
						writeString(this.JOCRHM,dos);
					
					// String
				
						writeString(this.JOLOCA,dos);
					
					// String
				
						writeString(this.JORCSR,dos);
					
					// String
				
						writeString(this.JOICSR,dos);
					
					// String
				
						writeString(this.JOSCSR,dos);
					
					// String
				
						writeString(this.JOPCSR,dos);
					
					// String
				
						writeString(this.JOARSR,dos);
					
					// String
				
						writeString(this.JOSBSR,dos);
					
					// String
				
						writeString(this.JOMNSR,dos);
					
					// String
				
						writeString(this.JOMXSR,dos);
					
					// String
				
						writeString(this.JOCMSR,dos);
					
					// String
				
						writeString(this.JOHPSR,dos);
					
					// String
				
						writeString(this.JOLAQF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOEADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOEATM);
					
					// String
				
						writeString(this.JOEAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOMOTM);
					
					// String
				
						writeString(this.JOMOID,dos);
					
					// String
				
						writeString(this.JOMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.JOARCO,dos);
					
					// String
				
						writeString(this.JOCUNO,dos);
					
					// String
				
						writeString(this.JONANO,dos);
					
					// String
				
						writeString(this.JODELC,dos);
					
					// String
				
						writeString(this.JOSTNU,dos);
					
					// String
				
						writeString(this.JOPLSZ,dos);
					
					// String
				
						writeString(this.JOORAP,dos);
					
					// String
				
						writeString(this.JOPORQ,dos);
					
					// String
				
						writeString(this.JOBHFR,dos);
					
					// String
				
						writeString(this.JOAPBF,dos);
					
					// String
				
						writeString(this.JOBHTO,dos);
					
					// String
				
						writeString(this.JOAPBT,dos);
					
					// String
				
						writeString(this.JODHF1,dos);
					
					// String
				
						writeString(this.JOAPF1,dos);
					
					// String
				
						writeString(this.JODHT1,dos);
					
					// String
				
						writeString(this.JOAPT1,dos);
					
					// String
				
						writeString(this.JODHF2,dos);
					
					// String
				
						writeString(this.JOAPF2,dos);
					
					// String
				
						writeString(this.JODHT2,dos);
					
					// String
				
						writeString(this.JOAPT2,dos);
					
					// String
				
						writeString(this.JODHF3,dos);
					
					// String
				
						writeString(this.JOAPF3,dos);
					
					// String
				
						writeString(this.JODHT3,dos);
					
					// String
				
						writeString(this.JOAPT3,dos);
					
					// String
				
						writeString(this.JODHF4,dos);
					
					// String
				
						writeString(this.JOAPF4,dos);
					
					// String
				
						writeString(this.JODHT4,dos);
					
					// String
				
						writeString(this.JOAPT4,dos);
					
					// String
				
						writeString(this.JOINSC,dos);
					
					// String
				
						writeString(this.JOINPE,dos);
					
					// String
				
						writeString(this.JOINSU,dos);
					
					// String
				
						writeString(this.JOINNE,dos);
					
					// String
				
						writeString(this.JOINSI,dos);
					
					// String
				
						writeString(this.JOINNI,dos);
					
					// String
				
						writeString(this.JORFEE,dos);
					
					// String
				
						writeString(this.JOACCP,dos);
					
					// String
				
						writeString(this.JOPDF1,dos);
					
					// String
				
						writeString(this.JOPFF1,dos);
					
					// String
				
						writeString(this.JOPDT1,dos);
					
					// String
				
						writeString(this.JOPFT1,dos);
					
					// String
				
						writeString(this.JOPDF2,dos);
					
					// String
				
						writeString(this.JOPFF2,dos);
					
					// String
				
						writeString(this.JOPDT2,dos);
					
					// String
				
						writeString(this.JOPFT2,dos);
					
					// String
				
						writeString(this.JOOPTP,dos);
					
					// String
				
						writeString(this.JOCUIS,dos);
					
					// String
				
						writeString(this.JOCRDT,dos);
					
					// String
				
						writeString(this.JOARDT,dos);
					
					// String
				
						writeString(this.JOIOCH,dos);
					
					// String
				
						writeString(this.JODSUB,dos);
					
					// String
				
						writeString(this.JODRTF,dos);
					
					// String
				
						writeString(this.JORSID,dos);
					
					// String
				
						writeString(this.JOFSUB,dos);
					
					// String
				
						writeString(this.JODPMT,dos);
					
					// String
				
						writeString(this.JOPARF,dos);
					
					// String
				
						writeString(this.JONPRF,dos);
					
					// String
				
						writeString(this.JOTXEX,dos);
					
					// String
				
						writeString(this.JOOWNR,dos);
					
					// String
				
						writeString(this.JOMACO,dos);
					
					// String
				
						writeString(this.JOMAD1,dos);
					
					// String
				
						writeString(this.JOMAD2,dos);
					
					// String
				
						writeString(this.JOMAD3,dos);
					
					// String
				
						writeString(this.JOMCIT,dos);
					
					// String
				
						writeString(this.JOMSTA,dos);
					
					// String
				
						writeString(this.JOMZIP,dos);
					
					// String
				
						writeString(this.JOCY03,dos);
					
					// String
				
						writeString(this.JOCSTA,dos);
					
					// String
				
						writeString(this.JOIALL,dos);
					
					// String
				
						writeString(this.JOSHST,dos);
					
					// String
				
						writeString(this.JORSCT,dos);
					
					// String
				
						writeString(this.JOIOCT,dos);
					
					// String
				
						writeString(this.JOCGFL,dos);
					
					// String
				
						writeString(this.JOORPF,dos);
					
					// String
				
						writeString(this.JOGLDC,dos);
					
					// String
				
						writeString(this.JOVNBR,dos);
					
					// String
				
						writeString(this.JOADCD,dos);
					
					// String
				
						writeString(this.JOBTRT,dos);
					
					// String
				
						writeString(this.JOAXZP,dos);
					
					// String
				
						writeString(this.JOPONU,dos);
					
					// String
				
						writeString(this.JOCMCD,dos);
					
					// String
				
						writeString(this.JOPVST,dos);
					
					// String
				
						writeString(this.JOPMTC,dos);
					
					// String
				
						writeString(this.JOPGIN,dos);
					
					// String
				
						writeString(this.JOPGED,dos);
					
					// String
				
						writeString(this.JOPGTI,dos);
					
					// String
				
						writeString(this.JOSTNR,dos);
					
					// String
				
						writeString(this.JOSTIN,dos);
					
					// String
				
						writeString(this.JOLOPT,dos);
					
					// String
				
						writeString(this.JOPONE,dos);
					
					// String
				
						writeString(this.JOPOTI,dos);
					
					// String
				
						writeString(this.JOAUSQ,dos);
					
					// String
				
						writeString(this.JOSCHT,dos);
					
					// String
				
						writeString(this.JOSTDT,dos);
					
					// String
				
						writeString(this.JOSCTP,dos);
					
					// String
				
						writeString(this.JOSTCT,dos);
					
					// String
				
						writeString(this.JODPZ1,dos);
					
					// String
				
						writeString(this.JODPZ2,dos);
					
					// String
				
						writeString(this.JODPZ3,dos);
					
					// String
				
						writeString(this.JODPZ4,dos);
					
					// String
				
						writeString(this.JODPZ5,dos);
					
					// String
				
						writeString(this.JODPZ6,dos);
					
					// String
				
						writeString(this.JODPZ7,dos);
					
					// String
				
						writeString(this.JOOTCN,dos);
					
					// String
				
						writeString(this.JOMADN,dos);
					
					// String
				
						writeString(this.JORCOR,dos);
					
					// String
				
						writeString(this.JOICOR,dos);
					
					// String
				
						writeString(this.JOSCOR,dos);
					
					// String
				
						writeString(this.JOPTAP,dos);
					
					// String
				
						writeString(this.JODSDL,dos);
					
					// String
				
						writeString(this.JODDL2,dos);
					
					// String
				
						writeString(this.JODSSC,dos);
					
					// String
				
						writeString(this.JOBHD1,dos);
					
					// String
				
						writeString(this.JOBHD2,dos);
					
					// String
				
						writeString(this.JOTXEN,dos);
					
					// String
				
						writeString(this.JOPRNM,dos);
					
					// String
				
						writeString(this.JOSTCD,dos);
					
					// String
				
						writeString(this.JOBHF2,dos);
					
					// String
				
						writeString(this.JOAPB2,dos);
					
					// String
				
						writeString(this.JOBHT2,dos);
					
					// String
				
						writeString(this.JOAPH2,dos);
					
					// String
				
						writeString(this.JOTORD,dos);
					
					// String
				
						writeString(this.JOTXAP,dos);
					
					// String
				
						writeString(this.JORSAP,dos);
					
					// String
				
						writeString(this.JOCSAP,dos);
					
					// String
				
						writeString(this.JOAIAP,dos);
					
					// String
				
						writeString(this.JOALNM,dos);
					
					// String
				
						writeString(this.JOSRNM,dos);
					
					// String
				
						writeString(this.JOMNRN,dos);
					
					// String
				
						writeString(this.JOMXRN,dos);
					
					// String
				
						writeString(this.JOCBNM,dos);
					
					// String
				
						writeString(this.JOHPNM,dos);
					
					// String
				
						writeString(this.JOOPSC,dos);
					
					// String
				
						writeString(this.JOOPSP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOMSES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOMPES);
					
					// String
				
						writeString(this.JOEMDT,dos);
					
					// String
				
						writeString(this.JOEXMT,dos);
					
					// String
				
						writeString(this.JOREAP,dos);
					
					// String
				
						writeString(this.JOAGAP,dos);
					
					// String
				
						writeString(this.JODSAP,dos);
					
					// String
				
						writeString(this.JONTAP,dos);
					
					// String
				
						writeString(this.JOMSTS,dos);
					
					// String
				
						writeString(this.JOAAPP,dos);
					
					// String
				
						writeString(this.JOCENT,dos);
					
					// String
				
						writeString(this.JOSTAE,dos);
					
					// String
				
						writeString(this.JOCOMF,dos);
					
					// String
				
						writeString(this.JONOPO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOOPOA);
					
					// String
				
						writeString(this.JOKOCU,dos);
					
					// String
				
						writeString(this.JOLTCN,dos);
					
					// String
				
						writeString(this.JOLTZN,dos);
					
					// String
				
						writeString(this.JOSSCP,dos);
					
					// String
				
						writeString(this.JOOSDT,dos);
					
					// String
				
						writeString(this.JOLTUF,dos);
					
					// String
				
						writeString(this.JOTPCF,dos);
					
					// String
				
						writeString(this.JOSCCC,dos);
					
					// String
				
						writeString(this.JOSMCO,dos);
					
					// String
				
						writeString(this.JOSUHM,dos);
					
					// String
				
						writeString(this.JOHMCO,dos);
					
					// String
				
						writeString(this.JOLOHM,dos);
					
					// String
				
						writeString(this.JOSIAV,dos);
					
					// String
				
						writeString(this.JOMAPC,dos);
					
					// String
				
						writeString(this.JOARLF,dos);
					
					// String
				
						writeString(this.JOPRLF,dos);
					
					// String
				
						writeString(this.JOSRLF,dos);
					
					// String
				
						writeString(this.JOMIRF,dos);
					
					// String
				
						writeString(this.JOMARF,dos);
					
					// String
				
						writeString(this.JOCBRF,dos);
					
					// String
				
						writeString(this.JOHPCF,dos);
					
					// String
				
						writeString(this.JOOPSF,dos);
					
					// String
				
						writeString(this.JOOPDF,dos);
					
					// String
				
						writeString(this.JODFR7,dos);
					
					// String
				
						writeString(this.JODFR1,dos);
					
					// String
				
						writeString(this.JODFR2,dos);
					
					// String
				
						writeString(this.JODFR3,dos);
					
					// String
				
						writeString(this.JODFR4,dos);
					
					// String
				
						writeString(this.JODFR5,dos);
					
					// String
				
						writeString(this.JODFR6,dos);
					
					// String
				
						writeString(this.JODFS7,dos);
					
					// String
				
						writeString(this.JODFS1,dos);
					
					// String
				
						writeString(this.JODFS2,dos);
					
					// String
				
						writeString(this.JODFS3,dos);
					
					// String
				
						writeString(this.JODFS4,dos);
					
					// String
				
						writeString(this.JODFS5,dos);
					
					// String
				
						writeString(this.JODFS6,dos);
					
					// String
				
						writeString(this.JOLTCO,dos);
					
					// String
				
						writeString(this.JOLNCO,dos);
					
					// String
				
						writeString(this.JOLTDR,dos);
					
					// String
				
						writeString(this.JOLNDR,dos);
					
					// String
				
						writeString(this.JOFRDL,dos);
					
					// String
				
						writeString(this.JOFRCD,dos);
					
					// String
				
						writeString(this.JOLTEX,dos);
					
					// String
				
						writeString(this.JOOGSN,dos);
					
					// String
				
						writeString(this.JOSCHG,dos);
					
					// String
				
						writeString(this.JOPICU,dos);
					
					// String
				
						writeString(this.JODDRT,dos);
					
					// String
				
						writeString(this.JOCRPM,dos);
					
					// String
				
						writeString(this.JOCRPN,dos);
					
					// String
				
						writeString(this.JOCPPC,dos);
					
					// String
				
						writeString(this.JOCPRN,dos);
					
					// String
				
						writeString(this.JOCHMC,dos);
					
					// String
				
						writeString(this.JOCRHM,dos);
					
					// String
				
						writeString(this.JOLOCA,dos);
					
					// String
				
						writeString(this.JORCSR,dos);
					
					// String
				
						writeString(this.JOICSR,dos);
					
					// String
				
						writeString(this.JOSCSR,dos);
					
					// String
				
						writeString(this.JOPCSR,dos);
					
					// String
				
						writeString(this.JOARSR,dos);
					
					// String
				
						writeString(this.JOSBSR,dos);
					
					// String
				
						writeString(this.JOMNSR,dos);
					
					// String
				
						writeString(this.JOMXSR,dos);
					
					// String
				
						writeString(this.JOCMSR,dos);
					
					// String
				
						writeString(this.JOHPSR,dos);
					
					// String
				
						writeString(this.JOLAQF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOEADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOEATM);
					
					// String
				
						writeString(this.JOEAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOMODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOMOTM);
					
					// String
				
						writeString(this.JOMOID,dos);
					
					// String
				
						writeString(this.JOMOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("JOARCO="+JOARCO);
		sb.append(",JOCUNO="+JOCUNO);
		sb.append(",JONANO="+JONANO);
		sb.append(",JODELC="+JODELC);
		sb.append(",JOSTNU="+JOSTNU);
		sb.append(",JOPLSZ="+JOPLSZ);
		sb.append(",JOORAP="+JOORAP);
		sb.append(",JOPORQ="+JOPORQ);
		sb.append(",JOBHFR="+JOBHFR);
		sb.append(",JOAPBF="+JOAPBF);
		sb.append(",JOBHTO="+JOBHTO);
		sb.append(",JOAPBT="+JOAPBT);
		sb.append(",JODHF1="+JODHF1);
		sb.append(",JOAPF1="+JOAPF1);
		sb.append(",JODHT1="+JODHT1);
		sb.append(",JOAPT1="+JOAPT1);
		sb.append(",JODHF2="+JODHF2);
		sb.append(",JOAPF2="+JOAPF2);
		sb.append(",JODHT2="+JODHT2);
		sb.append(",JOAPT2="+JOAPT2);
		sb.append(",JODHF3="+JODHF3);
		sb.append(",JOAPF3="+JOAPF3);
		sb.append(",JODHT3="+JODHT3);
		sb.append(",JOAPT3="+JOAPT3);
		sb.append(",JODHF4="+JODHF4);
		sb.append(",JOAPF4="+JOAPF4);
		sb.append(",JODHT4="+JODHT4);
		sb.append(",JOAPT4="+JOAPT4);
		sb.append(",JOINSC="+JOINSC);
		sb.append(",JOINPE="+JOINPE);
		sb.append(",JOINSU="+JOINSU);
		sb.append(",JOINNE="+JOINNE);
		sb.append(",JOINSI="+JOINSI);
		sb.append(",JOINNI="+JOINNI);
		sb.append(",JORFEE="+JORFEE);
		sb.append(",JOACCP="+JOACCP);
		sb.append(",JOPDF1="+JOPDF1);
		sb.append(",JOPFF1="+JOPFF1);
		sb.append(",JOPDT1="+JOPDT1);
		sb.append(",JOPFT1="+JOPFT1);
		sb.append(",JOPDF2="+JOPDF2);
		sb.append(",JOPFF2="+JOPFF2);
		sb.append(",JOPDT2="+JOPDT2);
		sb.append(",JOPFT2="+JOPFT2);
		sb.append(",JOOPTP="+JOOPTP);
		sb.append(",JOCUIS="+JOCUIS);
		sb.append(",JOCRDT="+JOCRDT);
		sb.append(",JOARDT="+JOARDT);
		sb.append(",JOIOCH="+JOIOCH);
		sb.append(",JODSUB="+JODSUB);
		sb.append(",JODRTF="+JODRTF);
		sb.append(",JORSID="+JORSID);
		sb.append(",JOFSUB="+JOFSUB);
		sb.append(",JODPMT="+JODPMT);
		sb.append(",JOPARF="+JOPARF);
		sb.append(",JONPRF="+JONPRF);
		sb.append(",JOTXEX="+JOTXEX);
		sb.append(",JOOWNR="+JOOWNR);
		sb.append(",JOMACO="+JOMACO);
		sb.append(",JOMAD1="+JOMAD1);
		sb.append(",JOMAD2="+JOMAD2);
		sb.append(",JOMAD3="+JOMAD3);
		sb.append(",JOMCIT="+JOMCIT);
		sb.append(",JOMSTA="+JOMSTA);
		sb.append(",JOMZIP="+JOMZIP);
		sb.append(",JOCY03="+JOCY03);
		sb.append(",JOCSTA="+JOCSTA);
		sb.append(",JOIALL="+JOIALL);
		sb.append(",JOSHST="+JOSHST);
		sb.append(",JORSCT="+JORSCT);
		sb.append(",JOIOCT="+JOIOCT);
		sb.append(",JOCGFL="+JOCGFL);
		sb.append(",JOORPF="+JOORPF);
		sb.append(",JOGLDC="+JOGLDC);
		sb.append(",JOVNBR="+JOVNBR);
		sb.append(",JOADCD="+JOADCD);
		sb.append(",JOBTRT="+JOBTRT);
		sb.append(",JOAXZP="+JOAXZP);
		sb.append(",JOPONU="+JOPONU);
		sb.append(",JOCMCD="+JOCMCD);
		sb.append(",JOPVST="+JOPVST);
		sb.append(",JOPMTC="+JOPMTC);
		sb.append(",JOPGIN="+JOPGIN);
		sb.append(",JOPGED="+JOPGED);
		sb.append(",JOPGTI="+JOPGTI);
		sb.append(",JOSTNR="+JOSTNR);
		sb.append(",JOSTIN="+JOSTIN);
		sb.append(",JOLOPT="+JOLOPT);
		sb.append(",JOPONE="+JOPONE);
		sb.append(",JOPOTI="+JOPOTI);
		sb.append(",JOAUSQ="+JOAUSQ);
		sb.append(",JOSCHT="+JOSCHT);
		sb.append(",JOSTDT="+JOSTDT);
		sb.append(",JOSCTP="+JOSCTP);
		sb.append(",JOSTCT="+JOSTCT);
		sb.append(",JODPZ1="+JODPZ1);
		sb.append(",JODPZ2="+JODPZ2);
		sb.append(",JODPZ3="+JODPZ3);
		sb.append(",JODPZ4="+JODPZ4);
		sb.append(",JODPZ5="+JODPZ5);
		sb.append(",JODPZ6="+JODPZ6);
		sb.append(",JODPZ7="+JODPZ7);
		sb.append(",JOOTCN="+JOOTCN);
		sb.append(",JOMADN="+JOMADN);
		sb.append(",JORCOR="+JORCOR);
		sb.append(",JOICOR="+JOICOR);
		sb.append(",JOSCOR="+JOSCOR);
		sb.append(",JOPTAP="+JOPTAP);
		sb.append(",JODSDL="+JODSDL);
		sb.append(",JODDL2="+JODDL2);
		sb.append(",JODSSC="+JODSSC);
		sb.append(",JOBHD1="+JOBHD1);
		sb.append(",JOBHD2="+JOBHD2);
		sb.append(",JOTXEN="+JOTXEN);
		sb.append(",JOPRNM="+JOPRNM);
		sb.append(",JOSTCD="+JOSTCD);
		sb.append(",JOBHF2="+JOBHF2);
		sb.append(",JOAPB2="+JOAPB2);
		sb.append(",JOBHT2="+JOBHT2);
		sb.append(",JOAPH2="+JOAPH2);
		sb.append(",JOTORD="+JOTORD);
		sb.append(",JOTXAP="+JOTXAP);
		sb.append(",JORSAP="+JORSAP);
		sb.append(",JOCSAP="+JOCSAP);
		sb.append(",JOAIAP="+JOAIAP);
		sb.append(",JOALNM="+JOALNM);
		sb.append(",JOSRNM="+JOSRNM);
		sb.append(",JOMNRN="+JOMNRN);
		sb.append(",JOMXRN="+JOMXRN);
		sb.append(",JOCBNM="+JOCBNM);
		sb.append(",JOHPNM="+JOHPNM);
		sb.append(",JOOPSC="+JOOPSC);
		sb.append(",JOOPSP="+JOOPSP);
		sb.append(",JOMSES="+String.valueOf(JOMSES));
		sb.append(",JOMPES="+String.valueOf(JOMPES));
		sb.append(",JOEMDT="+JOEMDT);
		sb.append(",JOEXMT="+JOEXMT);
		sb.append(",JOREAP="+JOREAP);
		sb.append(",JOAGAP="+JOAGAP);
		sb.append(",JODSAP="+JODSAP);
		sb.append(",JONTAP="+JONTAP);
		sb.append(",JOMSTS="+JOMSTS);
		sb.append(",JOAAPP="+JOAAPP);
		sb.append(",JOCENT="+JOCENT);
		sb.append(",JOSTAE="+JOSTAE);
		sb.append(",JOCOMF="+JOCOMF);
		sb.append(",JONOPO="+JONOPO);
		sb.append(",JOOPOA="+String.valueOf(JOOPOA));
		sb.append(",JOKOCU="+JOKOCU);
		sb.append(",JOLTCN="+JOLTCN);
		sb.append(",JOLTZN="+JOLTZN);
		sb.append(",JOSSCP="+JOSSCP);
		sb.append(",JOOSDT="+JOOSDT);
		sb.append(",JOLTUF="+JOLTUF);
		sb.append(",JOTPCF="+JOTPCF);
		sb.append(",JOSCCC="+JOSCCC);
		sb.append(",JOSMCO="+JOSMCO);
		sb.append(",JOSUHM="+JOSUHM);
		sb.append(",JOHMCO="+JOHMCO);
		sb.append(",JOLOHM="+JOLOHM);
		sb.append(",JOSIAV="+JOSIAV);
		sb.append(",JOMAPC="+JOMAPC);
		sb.append(",JOARLF="+JOARLF);
		sb.append(",JOPRLF="+JOPRLF);
		sb.append(",JOSRLF="+JOSRLF);
		sb.append(",JOMIRF="+JOMIRF);
		sb.append(",JOMARF="+JOMARF);
		sb.append(",JOCBRF="+JOCBRF);
		sb.append(",JOHPCF="+JOHPCF);
		sb.append(",JOOPSF="+JOOPSF);
		sb.append(",JOOPDF="+JOOPDF);
		sb.append(",JODFR7="+JODFR7);
		sb.append(",JODFR1="+JODFR1);
		sb.append(",JODFR2="+JODFR2);
		sb.append(",JODFR3="+JODFR3);
		sb.append(",JODFR4="+JODFR4);
		sb.append(",JODFR5="+JODFR5);
		sb.append(",JODFR6="+JODFR6);
		sb.append(",JODFS7="+JODFS7);
		sb.append(",JODFS1="+JODFS1);
		sb.append(",JODFS2="+JODFS2);
		sb.append(",JODFS3="+JODFS3);
		sb.append(",JODFS4="+JODFS4);
		sb.append(",JODFS5="+JODFS5);
		sb.append(",JODFS6="+JODFS6);
		sb.append(",JOLTCO="+JOLTCO);
		sb.append(",JOLNCO="+JOLNCO);
		sb.append(",JOLTDR="+JOLTDR);
		sb.append(",JOLNDR="+JOLNDR);
		sb.append(",JOFRDL="+JOFRDL);
		sb.append(",JOFRCD="+JOFRCD);
		sb.append(",JOLTEX="+JOLTEX);
		sb.append(",JOOGSN="+JOOGSN);
		sb.append(",JOSCHG="+JOSCHG);
		sb.append(",JOPICU="+JOPICU);
		sb.append(",JODDRT="+JODDRT);
		sb.append(",JOCRPM="+JOCRPM);
		sb.append(",JOCRPN="+JOCRPN);
		sb.append(",JOCPPC="+JOCPPC);
		sb.append(",JOCPRN="+JOCPRN);
		sb.append(",JOCHMC="+JOCHMC);
		sb.append(",JOCRHM="+JOCRHM);
		sb.append(",JOLOCA="+JOLOCA);
		sb.append(",JORCSR="+JORCSR);
		sb.append(",JOICSR="+JOICSR);
		sb.append(",JOSCSR="+JOSCSR);
		sb.append(",JOPCSR="+JOPCSR);
		sb.append(",JOARSR="+JOARSR);
		sb.append(",JOSBSR="+JOSBSR);
		sb.append(",JOMNSR="+JOMNSR);
		sb.append(",JOMXSR="+JOMXSR);
		sb.append(",JOCMSR="+JOCMSR);
		sb.append(",JOHPSR="+JOHPSR);
		sb.append(",JOLAQF="+JOLAQF);
		sb.append(",JOEADT="+String.valueOf(JOEADT));
		sb.append(",JOEATM="+String.valueOf(JOEATM));
		sb.append(",JOEAID="+JOEAID);
		sb.append(",JOMODT="+String.valueOf(JOMODT));
		sb.append(",JOMOTM="+String.valueOf(JOMOTM));
		sb.append(",JOMOID="+JOMOID);
		sb.append(",JOMOPG="+JOMOPG);
	    sb.append("]");

	    return sb.toString();
    }
        public String toLogString(){
        	StringBuilder sb = new StringBuilder();
        	
        				if(JOARCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOARCO);
            			}
            		
        			sb.append("|");
        		
        				if(JOCUNO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCUNO);
            			}
            		
        			sb.append("|");
        		
        				if(JONANO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JONANO);
            			}
            		
        			sb.append("|");
        		
        				if(JODELC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODELC);
            			}
            		
        			sb.append("|");
        		
        				if(JOSTNU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSTNU);
            			}
            		
        			sb.append("|");
        		
        				if(JOPLSZ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPLSZ);
            			}
            		
        			sb.append("|");
        		
        				if(JOORAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOORAP);
            			}
            		
        			sb.append("|");
        		
        				if(JOPORQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPORQ);
            			}
            		
        			sb.append("|");
        		
        				if(JOBHFR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOBHFR);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPBF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPBF);
            			}
            		
        			sb.append("|");
        		
        				if(JOBHTO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOBHTO);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPBT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPBT);
            			}
            		
        			sb.append("|");
        		
        				if(JODHF1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODHF1);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPF1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPF1);
            			}
            		
        			sb.append("|");
        		
        				if(JODHT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODHT1);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPT1);
            			}
            		
        			sb.append("|");
        		
        				if(JODHF2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODHF2);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPF2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPF2);
            			}
            		
        			sb.append("|");
        		
        				if(JODHT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODHT2);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPT2);
            			}
            		
        			sb.append("|");
        		
        				if(JODHF3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODHF3);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPF3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPF3);
            			}
            		
        			sb.append("|");
        		
        				if(JODHT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODHT3);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPT3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPT3);
            			}
            		
        			sb.append("|");
        		
        				if(JODHF4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODHF4);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPF4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPF4);
            			}
            		
        			sb.append("|");
        		
        				if(JODHT4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODHT4);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPT4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPT4);
            			}
            		
        			sb.append("|");
        		
        				if(JOINSC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOINSC);
            			}
            		
        			sb.append("|");
        		
        				if(JOINPE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOINPE);
            			}
            		
        			sb.append("|");
        		
        				if(JOINSU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOINSU);
            			}
            		
        			sb.append("|");
        		
        				if(JOINNE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOINNE);
            			}
            		
        			sb.append("|");
        		
        				if(JOINSI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOINSI);
            			}
            		
        			sb.append("|");
        		
        				if(JOINNI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOINNI);
            			}
            		
        			sb.append("|");
        		
        				if(JORFEE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JORFEE);
            			}
            		
        			sb.append("|");
        		
        				if(JOACCP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOACCP);
            			}
            		
        			sb.append("|");
        		
        				if(JOPDF1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPDF1);
            			}
            		
        			sb.append("|");
        		
        				if(JOPFF1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPFF1);
            			}
            		
        			sb.append("|");
        		
        				if(JOPDT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPDT1);
            			}
            		
        			sb.append("|");
        		
        				if(JOPFT1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPFT1);
            			}
            		
        			sb.append("|");
        		
        				if(JOPDF2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPDF2);
            			}
            		
        			sb.append("|");
        		
        				if(JOPFF2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPFF2);
            			}
            		
        			sb.append("|");
        		
        				if(JOPDT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPDT2);
            			}
            		
        			sb.append("|");
        		
        				if(JOPFT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPFT2);
            			}
            		
        			sb.append("|");
        		
        				if(JOOPTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOPTP);
            			}
            		
        			sb.append("|");
        		
        				if(JOCUIS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCUIS);
            			}
            		
        			sb.append("|");
        		
        				if(JOCRDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCRDT);
            			}
            		
        			sb.append("|");
        		
        				if(JOARDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOARDT);
            			}
            		
        			sb.append("|");
        		
        				if(JOIOCH == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOIOCH);
            			}
            		
        			sb.append("|");
        		
        				if(JODSUB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODSUB);
            			}
            		
        			sb.append("|");
        		
        				if(JODRTF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODRTF);
            			}
            		
        			sb.append("|");
        		
        				if(JORSID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JORSID);
            			}
            		
        			sb.append("|");
        		
        				if(JOFSUB == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOFSUB);
            			}
            		
        			sb.append("|");
        		
        				if(JODPMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODPMT);
            			}
            		
        			sb.append("|");
        		
        				if(JOPARF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPARF);
            			}
            		
        			sb.append("|");
        		
        				if(JONPRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JONPRF);
            			}
            		
        			sb.append("|");
        		
        				if(JOTXEX == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOTXEX);
            			}
            		
        			sb.append("|");
        		
        				if(JOOWNR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOWNR);
            			}
            		
        			sb.append("|");
        		
        				if(JOMACO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMACO);
            			}
            		
        			sb.append("|");
        		
        				if(JOMAD1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMAD1);
            			}
            		
        			sb.append("|");
        		
        				if(JOMAD2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMAD2);
            			}
            		
        			sb.append("|");
        		
        				if(JOMAD3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMAD3);
            			}
            		
        			sb.append("|");
        		
        				if(JOMCIT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMCIT);
            			}
            		
        			sb.append("|");
        		
        				if(JOMSTA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMSTA);
            			}
            		
        			sb.append("|");
        		
        				if(JOMZIP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMZIP);
            			}
            		
        			sb.append("|");
        		
        				if(JOCY03 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCY03);
            			}
            		
        			sb.append("|");
        		
        				if(JOCSTA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCSTA);
            			}
            		
        			sb.append("|");
        		
        				if(JOIALL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOIALL);
            			}
            		
        			sb.append("|");
        		
        				if(JOSHST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSHST);
            			}
            		
        			sb.append("|");
        		
        				if(JORSCT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JORSCT);
            			}
            		
        			sb.append("|");
        		
        				if(JOIOCT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOIOCT);
            			}
            		
        			sb.append("|");
        		
        				if(JOCGFL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCGFL);
            			}
            		
        			sb.append("|");
        		
        				if(JOORPF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOORPF);
            			}
            		
        			sb.append("|");
        		
        				if(JOGLDC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOGLDC);
            			}
            		
        			sb.append("|");
        		
        				if(JOVNBR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOVNBR);
            			}
            		
        			sb.append("|");
        		
        				if(JOADCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOADCD);
            			}
            		
        			sb.append("|");
        		
        				if(JOBTRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOBTRT);
            			}
            		
        			sb.append("|");
        		
        				if(JOAXZP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAXZP);
            			}
            		
        			sb.append("|");
        		
        				if(JOPONU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPONU);
            			}
            		
        			sb.append("|");
        		
        				if(JOCMCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCMCD);
            			}
            		
        			sb.append("|");
        		
        				if(JOPVST == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPVST);
            			}
            		
        			sb.append("|");
        		
        				if(JOPMTC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPMTC);
            			}
            		
        			sb.append("|");
        		
        				if(JOPGIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPGIN);
            			}
            		
        			sb.append("|");
        		
        				if(JOPGED == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPGED);
            			}
            		
        			sb.append("|");
        		
        				if(JOPGTI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPGTI);
            			}
            		
        			sb.append("|");
        		
        				if(JOSTNR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSTNR);
            			}
            		
        			sb.append("|");
        		
        				if(JOSTIN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSTIN);
            			}
            		
        			sb.append("|");
        		
        				if(JOLOPT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLOPT);
            			}
            		
        			sb.append("|");
        		
        				if(JOPONE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPONE);
            			}
            		
        			sb.append("|");
        		
        				if(JOPOTI == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPOTI);
            			}
            		
        			sb.append("|");
        		
        				if(JOAUSQ == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAUSQ);
            			}
            		
        			sb.append("|");
        		
        				if(JOSCHT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSCHT);
            			}
            		
        			sb.append("|");
        		
        				if(JOSTDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSTDT);
            			}
            		
        			sb.append("|");
        		
        				if(JOSCTP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSCTP);
            			}
            		
        			sb.append("|");
        		
        				if(JOSTCT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSTCT);
            			}
            		
        			sb.append("|");
        		
        				if(JODPZ1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODPZ1);
            			}
            		
        			sb.append("|");
        		
        				if(JODPZ2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODPZ2);
            			}
            		
        			sb.append("|");
        		
        				if(JODPZ3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODPZ3);
            			}
            		
        			sb.append("|");
        		
        				if(JODPZ4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODPZ4);
            			}
            		
        			sb.append("|");
        		
        				if(JODPZ5 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODPZ5);
            			}
            		
        			sb.append("|");
        		
        				if(JODPZ6 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODPZ6);
            			}
            		
        			sb.append("|");
        		
        				if(JODPZ7 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODPZ7);
            			}
            		
        			sb.append("|");
        		
        				if(JOOTCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOTCN);
            			}
            		
        			sb.append("|");
        		
        				if(JOMADN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMADN);
            			}
            		
        			sb.append("|");
        		
        				if(JORCOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JORCOR);
            			}
            		
        			sb.append("|");
        		
        				if(JOICOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOICOR);
            			}
            		
        			sb.append("|");
        		
        				if(JOSCOR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSCOR);
            			}
            		
        			sb.append("|");
        		
        				if(JOPTAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPTAP);
            			}
            		
        			sb.append("|");
        		
        				if(JODSDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODSDL);
            			}
            		
        			sb.append("|");
        		
        				if(JODDL2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODDL2);
            			}
            		
        			sb.append("|");
        		
        				if(JODSSC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODSSC);
            			}
            		
        			sb.append("|");
        		
        				if(JOBHD1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOBHD1);
            			}
            		
        			sb.append("|");
        		
        				if(JOBHD2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOBHD2);
            			}
            		
        			sb.append("|");
        		
        				if(JOTXEN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOTXEN);
            			}
            		
        			sb.append("|");
        		
        				if(JOPRNM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPRNM);
            			}
            		
        			sb.append("|");
        		
        				if(JOSTCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSTCD);
            			}
            		
        			sb.append("|");
        		
        				if(JOBHF2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOBHF2);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPB2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPB2);
            			}
            		
        			sb.append("|");
        		
        				if(JOBHT2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOBHT2);
            			}
            		
        			sb.append("|");
        		
        				if(JOAPH2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAPH2);
            			}
            		
        			sb.append("|");
        		
        				if(JOTORD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOTORD);
            			}
            		
        			sb.append("|");
        		
        				if(JOTXAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOTXAP);
            			}
            		
        			sb.append("|");
        		
        				if(JORSAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JORSAP);
            			}
            		
        			sb.append("|");
        		
        				if(JOCSAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCSAP);
            			}
            		
        			sb.append("|");
        		
        				if(JOAIAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAIAP);
            			}
            		
        			sb.append("|");
        		
        				if(JOALNM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOALNM);
            			}
            		
        			sb.append("|");
        		
        				if(JOSRNM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSRNM);
            			}
            		
        			sb.append("|");
        		
        				if(JOMNRN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMNRN);
            			}
            		
        			sb.append("|");
        		
        				if(JOMXRN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMXRN);
            			}
            		
        			sb.append("|");
        		
        				if(JOCBNM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCBNM);
            			}
            		
        			sb.append("|");
        		
        				if(JOHPNM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOHPNM);
            			}
            		
        			sb.append("|");
        		
        				if(JOOPSC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOPSC);
            			}
            		
        			sb.append("|");
        		
        				if(JOOPSP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOPSP);
            			}
            		
        			sb.append("|");
        		
        				if(JOMSES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMSES);
            			}
            		
        			sb.append("|");
        		
        				if(JOMPES == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMPES);
            			}
            		
        			sb.append("|");
        		
        				if(JOEMDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOEMDT);
            			}
            		
        			sb.append("|");
        		
        				if(JOEXMT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOEXMT);
            			}
            		
        			sb.append("|");
        		
        				if(JOREAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOREAP);
            			}
            		
        			sb.append("|");
        		
        				if(JOAGAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAGAP);
            			}
            		
        			sb.append("|");
        		
        				if(JODSAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODSAP);
            			}
            		
        			sb.append("|");
        		
        				if(JONTAP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JONTAP);
            			}
            		
        			sb.append("|");
        		
        				if(JOMSTS == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMSTS);
            			}
            		
        			sb.append("|");
        		
        				if(JOAAPP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOAAPP);
            			}
            		
        			sb.append("|");
        		
        				if(JOCENT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCENT);
            			}
            		
        			sb.append("|");
        		
        				if(JOSTAE == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSTAE);
            			}
            		
        			sb.append("|");
        		
        				if(JOCOMF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCOMF);
            			}
            		
        			sb.append("|");
        		
        				if(JONOPO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JONOPO);
            			}
            		
        			sb.append("|");
        		
        				if(JOOPOA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOPOA);
            			}
            		
        			sb.append("|");
        		
        				if(JOKOCU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOKOCU);
            			}
            		
        			sb.append("|");
        		
        				if(JOLTCN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLTCN);
            			}
            		
        			sb.append("|");
        		
        				if(JOLTZN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLTZN);
            			}
            		
        			sb.append("|");
        		
        				if(JOSSCP == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSSCP);
            			}
            		
        			sb.append("|");
        		
        				if(JOOSDT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOSDT);
            			}
            		
        			sb.append("|");
        		
        				if(JOLTUF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLTUF);
            			}
            		
        			sb.append("|");
        		
        				if(JOTPCF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOTPCF);
            			}
            		
        			sb.append("|");
        		
        				if(JOSCCC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSCCC);
            			}
            		
        			sb.append("|");
        		
        				if(JOSMCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSMCO);
            			}
            		
        			sb.append("|");
        		
        				if(JOSUHM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSUHM);
            			}
            		
        			sb.append("|");
        		
        				if(JOHMCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOHMCO);
            			}
            		
        			sb.append("|");
        		
        				if(JOLOHM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLOHM);
            			}
            		
        			sb.append("|");
        		
        				if(JOSIAV == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSIAV);
            			}
            		
        			sb.append("|");
        		
        				if(JOMAPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMAPC);
            			}
            		
        			sb.append("|");
        		
        				if(JOARLF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOARLF);
            			}
            		
        			sb.append("|");
        		
        				if(JOPRLF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPRLF);
            			}
            		
        			sb.append("|");
        		
        				if(JOSRLF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSRLF);
            			}
            		
        			sb.append("|");
        		
        				if(JOMIRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMIRF);
            			}
            		
        			sb.append("|");
        		
        				if(JOMARF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMARF);
            			}
            		
        			sb.append("|");
        		
        				if(JOCBRF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCBRF);
            			}
            		
        			sb.append("|");
        		
        				if(JOHPCF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOHPCF);
            			}
            		
        			sb.append("|");
        		
        				if(JOOPSF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOPSF);
            			}
            		
        			sb.append("|");
        		
        				if(JOOPDF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOPDF);
            			}
            		
        			sb.append("|");
        		
        				if(JODFR7 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFR7);
            			}
            		
        			sb.append("|");
        		
        				if(JODFR1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFR1);
            			}
            		
        			sb.append("|");
        		
        				if(JODFR2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFR2);
            			}
            		
        			sb.append("|");
        		
        				if(JODFR3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFR3);
            			}
            		
        			sb.append("|");
        		
        				if(JODFR4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFR4);
            			}
            		
        			sb.append("|");
        		
        				if(JODFR5 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFR5);
            			}
            		
        			sb.append("|");
        		
        				if(JODFR6 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFR6);
            			}
            		
        			sb.append("|");
        		
        				if(JODFS7 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFS7);
            			}
            		
        			sb.append("|");
        		
        				if(JODFS1 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFS1);
            			}
            		
        			sb.append("|");
        		
        				if(JODFS2 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFS2);
            			}
            		
        			sb.append("|");
        		
        				if(JODFS3 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFS3);
            			}
            		
        			sb.append("|");
        		
        				if(JODFS4 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFS4);
            			}
            		
        			sb.append("|");
        		
        				if(JODFS5 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFS5);
            			}
            		
        			sb.append("|");
        		
        				if(JODFS6 == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODFS6);
            			}
            		
        			sb.append("|");
        		
        				if(JOLTCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLTCO);
            			}
            		
        			sb.append("|");
        		
        				if(JOLNCO == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLNCO);
            			}
            		
        			sb.append("|");
        		
        				if(JOLTDR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLTDR);
            			}
            		
        			sb.append("|");
        		
        				if(JOLNDR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLNDR);
            			}
            		
        			sb.append("|");
        		
        				if(JOFRDL == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOFRDL);
            			}
            		
        			sb.append("|");
        		
        				if(JOFRCD == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOFRCD);
            			}
            		
        			sb.append("|");
        		
        				if(JOLTEX == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLTEX);
            			}
            		
        			sb.append("|");
        		
        				if(JOOGSN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOOGSN);
            			}
            		
        			sb.append("|");
        		
        				if(JOSCHG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSCHG);
            			}
            		
        			sb.append("|");
        		
        				if(JOPICU == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPICU);
            			}
            		
        			sb.append("|");
        		
        				if(JODDRT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JODDRT);
            			}
            		
        			sb.append("|");
        		
        				if(JOCRPM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCRPM);
            			}
            		
        			sb.append("|");
        		
        				if(JOCRPN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCRPN);
            			}
            		
        			sb.append("|");
        		
        				if(JOCPPC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCPPC);
            			}
            		
        			sb.append("|");
        		
        				if(JOCPRN == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCPRN);
            			}
            		
        			sb.append("|");
        		
        				if(JOCHMC == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCHMC);
            			}
            		
        			sb.append("|");
        		
        				if(JOCRHM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCRHM);
            			}
            		
        			sb.append("|");
        		
        				if(JOLOCA == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLOCA);
            			}
            		
        			sb.append("|");
        		
        				if(JORCSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JORCSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOICSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOICSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOSCSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSCSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOPCSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOPCSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOARSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOARSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOSBSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOSBSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOMNSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMNSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOMXSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMXSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOCMSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOCMSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOHPSR == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOHPSR);
            			}
            		
        			sb.append("|");
        		
        				if(JOLAQF == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOLAQF);
            			}
            		
        			sb.append("|");
        		
        				if(JOEADT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOEADT);
            			}
            		
        			sb.append("|");
        		
        				if(JOEATM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOEATM);
            			}
            		
        			sb.append("|");
        		
        				if(JOEAID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOEAID);
            			}
            		
        			sb.append("|");
        		
        				if(JOMODT == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMODT);
            			}
            		
        			sb.append("|");
        		
        				if(JOMOTM == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMOTM);
            			}
            		
        			sb.append("|");
        		
        				if(JOMOID == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMOID);
            			}
            		
        			sb.append("|");
        		
        				if(JOMOPG == null){
        					sb.append("<null>");
        				}else{
            				sb.append(JOMOPG);
            			}
            		
        			sb.append("|");
        		
        	return sb.toString();
        }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
CUSTOMER_SHIP_TOStruct CUSTOMER_SHIP_TO = new CUSTOMER_SHIP_TOStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CUSTOMER_SHIP_TO");
					}
				
		int tos_count_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBOutput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBOutput_1 = new StringBuilder();
                    log4jParamters_tDBOutput_1.append("Parameters:");
                            log4jParamters_tDBOutput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DB_VERSION" + " = " + "V9_X");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("HOST" + " = " + "context.GIM_Server");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PORT" + " = " + "context.GIM_Port");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DBNAME" + " = " + "context.GIM_Database");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SCHEMA_DB" + " = " + "context.GIM_Schema_Master");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USER" + " = " + "context.GIM_Login");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.GIM_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE" + " = " + "\"CUSTOMER_SHIP_TO\"");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("TABLE_ACTION" + " = " + "NONE");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DATA_ACTION" + " = " + "INSERT");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SPECIFY_DATASOURCE_ALIAS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("DIE_ON_ERROR" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("PROPERTIES" + " = " + "context.GIM_AdditionalParams");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("COMMIT_EVERY" + " = " + "1");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ADD_COLS" + " = " + "[]");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_FIELD_OPTIONS" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("ENABLE_DEBUG_MODE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("SUPPORT_NULL_WHERE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("CONVERT_COLUMN_TABLE_TO_LOWERCASE" + " = " + "false");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("USE_BATCH_SIZE" + " = " + "true");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("BATCH_SIZE" + " = " + "1");
                        log4jParamters_tDBOutput_1.append(" | ");
                            log4jParamters_tDBOutput_1.append("UNIFIED_COMPONENTS" + " = " + "tPostgresqlOutput");
                        log4jParamters_tDBOutput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + (log4jParamters_tDBOutput_1) );
                    } 
                } 
            new BytesLimit65535_tDBOutput_1().limitLog4jByte();
            }





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.GIM_Schema_Master;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("CUSTOMER_SHIP_TO");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("CUSTOMER_SHIP_TO");
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Driver ClassName: ")  + ("org.postgresql.Driver")  + (".") );
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_1 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_1 = context.GIM_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection attempts to '")  + (url_tDBOutput_1)  + ("' with the username '")  + (dbUser_tDBOutput_1)  + ("'.") );
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to '")  + (url_tDBOutput_1)  + ("' has succeeded.") );
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection is set auto commit to '")  + (conn_tDBOutput_1.getAutoCommit())  + ("'.") );


   int batchSize_tDBOutput_1 = 1;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"SITE_ID\",\"AR_COMPANY\",\"SHIP_TO_CUST\",\"NATIONAL_ACCOUNT_NO\",\"DELIVERY_CODE\",\"SHIP_TO_STORE_NO\",\"PALLET_LOAD\",\"ORDER_APPROVAL_REQUIRED\",\"PO_REQUIRED\",\"BUSINESS_HOURS_FROM_1\",\"BUSINESS_HOURS_FROM_AM_PM_1\",\"BUSINESS_HOURS_TO_1\",\"BUSINESS_HOURS_TO_AM_PM_1\",\"NO_DELIVERIES_FROM_1\",\"NO_DELIVERIES_FROM_AM_PM_1\",\"NO_DELIVERIES_TO_1\",\"NO_DELIVERIES_TO_AM_PM_1\",\"NO_DELIVERIES_FROM_2\",\"NO_DELIVERIES_FROM_AM_PM_2\",\"NO_DELIVERIES_TO_2\",\"NO_DELIVERIES_TO_AM_PM_2\",\"NO_DELIVERIES_FROM_3\",\"NO_DELIVERIES_FROM_AM_PM_3\",\"NO_DELIVERIES_TO_3\",\"NO_DELIVERIES_TO_AM_PM_3\",\"NO_DELIVERIES_FROM_4\",\"NO_DELIVERIES_FROM_AM_PM_4\",\"NO_DELIVERIES_TO_4\",\"NO_DELIVERIES_TO_AM_PM_4\",\"SEPARATE_OR_COMBINE_BY_PO\",\"PRINT_OR_EDI_STATUS\",\"SUMMARY_REPORT\",\"EXTERNAL_DESIRED_NO_OF_COPIES\",\"SHIPPING_DOCUMENT_OR_INVOICE\",\"INTERNAL_DESIRED_NO_OF_COPIES\",\"RESTOCK_FEE\",\"ACCOUNT_TYPE\",\"PREFFERED_DELIVERY_HOURS_FROM_1\",\"PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1\",\"PREFFERED_DELIVERY_HOURS_TO_1\",\"PREFFERED_DELIVERY_HOURS_TO_AM_PM_1\",\"PREFFERED_DELIVERY_HOURS_FROM_2\",\"PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2\",\"PREFFERED_DELIVERY_HOURS_TO_2\",\"PREFFERED_DELIVERY_HOURS_TO_AM_PM_2\",\"CORPORATE_TYPE_OF_OPERATION\",\"CUISINE\",\"PROFILE_CREATION_DATE\",\"PROFILE_ARCHIVE_DATE\",\"ITEM_OVERRIDE_CHART_ID\",\"DEFAULT_SUBSTITUTE_TYPE\",\"DEFAULT_RESTRICT_TYPE\",\"RESTRICT_OR_SUB_CHART_ID\",\"FORCED_SUBSTITUTION\",\"DEPARTMENTS_INDICATOR\",\"PARTIAL_FILL\",\"NON_PROFIT_FLAG\",\"MISCELLANEOUS_TAX_EXEMPT\",\"OWNER_NAME\",\"TERRITORY_CODE\",\"MAIL_ADDRESS_1\",\"MAIL_ADDRESS_2\",\"MAIL_ADDRESS_3\",\"MAIL_CITY\",\"MAIL_STATE_CODE\",\"MAIL_ZIP_CODE\",\"COUNTRY_CODE\",\"CENSUS_STATE_CODE\",\"IMMEDIATE_ALLOC_FLAG\",\"CUSTOMER_SHIP_TO_STATUS\",\"RESTRICTION_CHART_TYPE\",\"ITEM_OVERRIDE_CHART_TYPE\",\"RECORD_CHANGE_FLAG\",\"ORDERS_PLACED_FLAG\",\"ASSIGN_CODES_BY_DEPT\",\"VENDOR_NO\",\"VENDOR_SUFFIX\",\"RECORD_TYPE_INDICATOR\",\"PURCHASE_ORDER_NO\",\"CUSTOMER_COMMODITY_CODE\",\"PREVIOUS_STATUS\",\"PAYMENT_TERMS_CODE\",\"PERSONAL_GURANTEE_INDICATOR\",\"PERSONAL_GURANTEE_EXPIRATION_DATE\",\"PERSONAL_GURANTEE_TASK_INDICATOR\",\"SALES_TAX_LAST_REVIEW_DATE\",\"SALES_TAX_REVIEW_INDICATOR\",\"LOCAL_TYPE_OF_OPERATION\",\"PO_NO_EXPIRATION_DATE\",\"PO_NO_TASK_INDICATOR\",\"AUDIT_SEQUENCE_NO\",\"SEQUENCE_CHART_IDENTIFIER\",\"STOP_DATE\",\"SEQUENCE_CHART_TYPE\",\"STOP_COUNTER\",\"DEFAULT_PICKING_TIME_ZONE_MONDAY\",\"DEFAULT_PICKING_TIME_ZONE_TUESDAY\",\"DEFAULT_PICKING_TIME_ZONE_WEDNESDAY\",\"DEFAULT_PICKING_TIME_ZONE_THURSDAY\",\"DEFAULT_PICKING_TIME_ZONE_FRIDAY\",\"DEFAULT_PICKING_TIME_ZONE_SATURDAY\",\"DEFAULT_PICKING_TIME_ZONE_SUNDAY\",\"OTHER_CONTACT_NAME\",\"MAIL_ADDRESS_NAME\",\"RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN\",\"ITEM_OVERRIDES_CHART_ORIGIN\",\"SEQUENCE_CHART_ORIGIN\",\"PENDING_TERMS_APPROVAL\",\"DESIGNATED_DELIVERY_DAYS_1\",\"DESIGNATED_SALESMAN_CALL_DAYS\",\"BUSINESS_HOURS_DAYS_1\",\"BUSINESS_HOURS_DAYS_2\",\"TAX_AUTHORITY_NO\",\"PRICE_RULE_NAME\",\"STOP_CODE\",\"BUSINESS_HOURS_FROM_2\",\"BUSINESS_HOURS_FROM_AM_PM_2\",\"BUSINESS_HOURS_TO_2\",\"BUSINESS_HOURS_TO_AM_PM_2\",\"TERRITORY_OVERRIDE_FLAG\",\"TAX_EXEMPT_APPROVAL_PENDING\",\"RESTOCK_FEE_APPROVAL_PENDING\",\"CREDIT_STOP_APPROVAL_PENDING\",\"ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING\",\"APPLICATION_RULE_NAME\",\"SUBSTITUTION_RULE_NAME\",\"MINIMUM_RULE_NAME\",\"MAXIMUM_RULE_NAME\",\"COMMISSION_BASE_RULE_NAME\",\"HAND_PRICE_RESTRICTION_RULE_NAME\",\"ESTIMATED_MARKET_SHARE\",\"ESTIMATED_WEEKLY_MARKET_POTENTIAL\",\"TAX_EXEMPT_EXPIRATION_DATE\",\"TAX_EXEMPT_FLAG\",\"REACTIVATION_APPROVAL_PENDING\",\"AGING_POLICY_APPROVAL_PENDING\",\"DISCOUNT_GRACE_APPROVAL_PENDING\",\"NET_DUE_GRACE_APPROVAL_PENDING\",\"MSP_TARGET_CUSTOMER_SPECIFICATIONS\",\"ACTIVE_OR_INACTIVE_APPROVAL_PENDING\",\"CUSTOMER_ENTITY_TYPE\",\"STATE\",\"COMMODITY_FLAG\",\"NO_OF_OPEN_ORDERS\",\"OPEN_ORDER_AMOUNT\",\"KOSHER_CUSTOMER\",\"LAPTOP_ZID_NO\",\"SYSCO_SALES_COMPANION\",\"OFF_STOP_DATE\",\"LAPTOP_USER_FLAG\",\"THIRD_PARTY_CUSTOMER_FLAG\",\"CREDIT_HIERARCHY_MASTER_COMPANY\",\"CREDIT_HIERARCHY_MASTER_COMPANY_NO\",\"SHIP_AVAILABLE_FLAG\",\"MAPSCO_MAP_CODE\",\"APPLICATION_RULE_DEFAULT_FLAG\",\"PRICE_RULE_DEFAULT_FLAG\",\"SUBSTITUTION_RULE_DEFAULT_FLAG\",\"MINIMUM_RULE_DEFAULT_FLAG\",\"MAXIMUM_RULE_DEFAULT_FLAG\",\"COMMISSION_BASE_RULE_DEFAULT_FLAG\",\"HAND_PRICE_RULE_DEFAULT_FLAG\",\"DEFAULT_ROUTE_MONDAY\",\"DEFAULT_ROUTE_TUESDAY\",\"DEFAULT_ROUTE_WEDNESDAY\",\"DEFAULT_ROUTE_THURSDAY\",\"DEFAULT_ROUTE_FRIDAY\",\"DEFAULT_ROUTE_SATURDAY\",\"LATITUDE_COORDINATES\",\"LONGITUDE_COORDINATES\",\"FREQUENCY_DOWNLOAD\",\"FREQUENCY_CODE\",\"LAPTOP_EXCEPTION_LEVEL\",\"THIRD_PARTY_OG_OPTIONS\",\"SERVICE_CHARGE\",\"PRIMARY_SHIP_TO\",\"DELIVERY_DIFFICULTY_RATING\",\"BILL_TO_CORP_PRICING_PARENT_COMPANY\",\"BILL_TO_CORP_PRICING_PARENT\",\"CORP_HIERARCHY_MASTER_COMPANY\",\"CORP_HIERARCHY_MASTER\",\"LOCATION_ID\",\"PRICE_RULE_SRC_COMPANY\",\"APPLICATION_RULE_SRC_COMPANY\",\"SUBSTITUTE_RULE_SRC_COMPANY\",\"MINIMUM_RULE_SRC_COMPANY\",\"MAXIMUM_RULE_SRC_COMPANY\",\"COMMISSION_BASE_RULE_SRC_COMPANY\",\"HAND_PRICE_REST_RULE_SRC_COMPANY\",\"CREATED_TIMESTAMP\",\"CREATED_USER_ID\",\"UPDATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"UPDATED_PROGRAM_ID\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\",\"JOPF_SVOP\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tMap_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tMap_1 = new StringBuilder();
                    log4jParamters_tMap_1.append("Parameters:");
                            log4jParamters_tMap_1.append("LINK_STYLE" + " = " + "AUTO");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("TEMPORARY_DATA_DIRECTORY" + " = " + "");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("ROWS_BUFFER_SIZE" + " = " + "2000000");
                        log4jParamters_tMap_1.append(" | ");
                            log4jParamters_tMap_1.append("CHANGE_HASH_AND_EQUALS_FOR_BIGDECIMAL" + " = " + "true");
                        log4jParamters_tMap_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + (log4jParamters_tMap_1) );
                    } 
                } 
            new BytesLimit65535_tMap_1().limitLog4jByte();
            }




// ###############################
// # Lookup's keys initialization
		int count_row1_tMap_1 = 0;
		
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				int count_CUSTOMER_SHIP_TO_tMap_1 = 0;
				
CUSTOMER_SHIP_TOStruct CUSTOMER_SHIP_TO_tmp = new CUSTOMER_SHIP_TOStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Start to work.") );
            if (log.isDebugEnabled()) {
                class BytesLimit65535_tDBInput_1{
                    public void limitLog4jByte() throws Exception{
                    StringBuilder log4jParamters_tDBInput_1 = new StringBuilder();
                    log4jParamters_tDBInput_1.append("Parameters:");
                            log4jParamters_tDBInput_1.append("USE_EXISTING_CONNECTION" + " = " + "false");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DB_VERSION" + " = " + "jt400-9.8.jar");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("HOST" + " = " + "context.SUS_Server");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("DBNAME" + " = " + "context.SUS_Database");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("USER" + " = " + "context.SUS_Login");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PASS" + " = " + String.valueOf(routines.system.PasswordEncryptUtil.encryptPassword(context.SUS_Password)).substring(0, 4) + "...");     
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TABLE" + " = " + "\"USCBJOPF\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERYSTORE" + " = " + "\"\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("QUERY" + " = " + "\"SELECT    USCBJOPF.JOARCO,    USCBJOPF.JOCUNO,    USCBJOPF.JONANO,    USCBJOPF.JODELC,    USCBJOPF.JOSTNU,    USCBJOPF.JOPLSZ,    USCBJOPF.JOORAP,    USCBJOPF.JOPORQ,    USCBJOPF.JOBHFR,    USCBJOPF.JOAPBF,    USCBJOPF.JOBHTO,    USCBJOPF.JOAPBT,    USCBJOPF.JODHF1,    USCBJOPF.JOAPF1,    USCBJOPF.JODHT1,    USCBJOPF.JOAPT1,    USCBJOPF.JODHF2,    USCBJOPF.JOAPF2,    USCBJOPF.JODHT2,    USCBJOPF.JOAPT2,    USCBJOPF.JODHF3,    USCBJOPF.JOAPF3,    USCBJOPF.JODHT3,    USCBJOPF.JOAPT3,    USCBJOPF.JODHF4,    USCBJOPF.JOAPF4,    USCBJOPF.JODHT4,    USCBJOPF.JOAPT4,    USCBJOPF.JOINSC,    USCBJOPF.JOINPE,    USCBJOPF.JOINSU,    USCBJOPF.JOINNE,    USCBJOPF.JOINSI,    USCBJOPF.JOINNI,    USCBJOPF.JORFEE,    USCBJOPF.JOACCP,    USCBJOPF.JOPDF1,    USCBJOPF.JOPFF1,    USCBJOPF.JOPDT1,    USCBJOPF.JOPFT1,    USCBJOPF.JOPDF2,    USCBJOPF.JOPFF2,    USCBJOPF.JOPDT2,    USCBJOPF.JOPFT2,    USCBJOPF.JOOPTP,    USCBJOPF.JOCUIS,    USCBJOPF.JOCRDT,    USCBJOPF.JOARDT,    USCBJOPF.JOIOCH,    USCBJOPF.JODSUB,    USCBJOPF.JODRTF,    USCBJOPF.JORSID,    USCBJOPF.JOFSUB,    USCBJOPF.JODPMT,    USCBJOPF.JOPARF,    USCBJOPF.JONPRF,    USCBJOPF.JOTXEX,    USCBJOPF.JOOWNR,    USCBJOPF.JOMACO,    USCBJOPF.JOMAD1,    USCBJOPF.JOMAD2,    USCBJOPF.JOMAD3,    USCBJOPF.JOMCIT,    USCBJOPF.JOMSTA,    USCBJOPF.JOMZIP,    USCBJOPF.JOCY03,    USCBJOPF.JOCSTA,    USCBJOPF.JOIALL,    USCBJOPF.JOSHST,    USCBJOPF.JORSCT,    USCBJOPF.JOIOCT,    USCBJOPF.JOCGFL,    USCBJOPF.JOORPF,    USCBJOPF.JOGLDC,    USCBJOPF.JOVNBR,    USCBJOPF.JOADCD,    USCBJOPF.JOBTRT,    USCBJOPF.JOAXZP,    USCBJOPF.JOPONU,    USCBJOPF.JOCMCD,    USCBJOPF.JOPVST,    USCBJOPF.JOPMTC,    USCBJOPF.JOPGIN,    USCBJOPF.JOPGED,    USCBJOPF.JOPGTI,    USCBJOPF.JOSTNR,    USCBJOPF.JOSTIN,    USCBJOPF.JOLOPT,    USCBJOPF.JOPONE,    USCBJOPF.JOPOTI,    USCBJOPF.JOAUSQ,    USCBJOPF.JOSCHT,    USCBJOPF.JOSTDT,    USCBJOPF.JOSCTP,    USCBJOPF.JOSTCT,    USCBJOPF.JODPZ1,    USCBJOPF.JODPZ2,    USCBJOPF.JODPZ3,    USCBJOPF.JODPZ4,    USCBJOPF.JODPZ5,    USCBJOPF.JODPZ6,    USCBJOPF.JODPZ7,    USCBJOPF.JOOTCN,    USCBJOPF.JOMADN,    USCBJOPF.JORCOR,    USCBJOPF.JOICOR,    USCBJOPF.JOSCOR,    USCBJOPF.JOPTAP,    USCBJOPF.JODSDL,    USCBJOPF.JODDL2,    USCBJOPF.JODSSC,    USCBJOPF.JOBHD1,    USCBJOPF.JOBHD2,    USCBJOPF.JOTXEN,    USCBJOPF.JOPRNM,    USCBJOPF.JOSTCD,    USCBJOPF.JOBHF2,    USCBJOPF.JOAPB2,    USCBJOPF.JOBHT2,    USCBJOPF.JOAPH2,    USCBJOPF.JOTORD,    USCBJOPF.JOTXAP,    USCBJOPF.JORSAP,    USCBJOPF.JOCSAP,    USCBJOPF.JOAIAP,    USCBJOPF.JOALNM,    USCBJOPF.JOSRNM,    USCBJOPF.JOMNRN,    USCBJOPF.JOMXRN,    USCBJOPF.JOCBNM,    USCBJOPF.JOHPNM,    USCBJOPF.JOOPSC,    USCBJOPF.JOOPSP,    USCBJOPF.JOMSES,    USCBJOPF.JOMPES,    USCBJOPF.JOEMDT,    USCBJOPF.JOEXMT,    USCBJOPF.JOREAP,    USCBJOPF.JOAGAP,    USCBJOPF.JODSAP,    USCBJOPF.JONTAP,    USCBJOPF.JOMSTS,    USCBJOPF.JOAAPP,    USCBJOPF.JOCENT,    USCBJOPF.JOSTAE,    USCBJOPF.JOCOMF,    USCBJOPF.JONOPO,    USCBJOPF.JOOPOA,    USCBJOPF.JOKOCU,    USCBJOPF.JOLTCN,    USCBJOPF.JOLTZN,    USCBJOPF.JOSSCP,    USCBJOPF.JOOSDT,    USCBJOPF.JOLTUF,    USCBJOPF.JOTPCF,    USCBJOPF.JOSCCC,    USCBJOPF.JOSMCO,    USCBJOPF.JOSUHM,    USCBJOPF.JOHMCO,    USCBJOPF.JOLOHM,    USCBJOPF.JOSIAV,    USCBJOPF.JOMAPC,    USCBJOPF.JOARLF,    USCBJOPF.JOPRLF,    USCBJOPF.JOSRLF,    USCBJOPF.JOMIRF,    USCBJOPF.JOMARF,    USCBJOPF.JOCBRF,    USCBJOPF.JOHPCF,    USCBJOPF.JOOPSF,    USCBJOPF.JOOPDF,    USCBJOPF.JODFR7,    USCBJOPF.JODFR1,    USCBJOPF.JODFR2,    USCBJOPF.JODFR3,    USCBJOPF.JODFR4,    USCBJOPF.JODFR5,    USCBJOPF.JODFR6,    USCBJOPF.JODFS7,    USCBJOPF.JODFS1,    USCBJOPF.JODFS2,    USCBJOPF.JODFS3,    USCBJOPF.JODFS4,    USCBJOPF.JODFS5,    USCBJOPF.JODFS6,    USCBJOPF.JOLTCO,    USCBJOPF.JOLNCO,    USCBJOPF.JOLTDR,    USCBJOPF.JOLNDR,    USCBJOPF.JOFRDL,    USCBJOPF.JOFRCD,    USCBJOPF.JOLTEX,    USCBJOPF.JOOGSN,    USCBJOPF.JOSCHG,    USCBJOPF.JOPICU,    USCBJOPF.JODDRT,    USCBJOPF.JOCRPM,    USCBJOPF.JOCRPN,    USCBJOPF.JOCPPC,    USCBJOPF.JOCPRN,    USCBJOPF.JOCHMC,    USCBJOPF.JOCRHM,    USCBJOPF.JOLOCA,    USCBJOPF.JORCSR,    USCBJOPF.JOICSR,    USCBJOPF.JOSCSR,    USCBJOPF.JOPCSR,    USCBJOPF.JOARSR,    USCBJOPF.JOSBSR,    USCBJOPF.JOMNSR,    USCBJOPF.JOMXSR,    USCBJOPF.JOCMSR,    USCBJOPF.JOHPSR,    USCBJOPF.JOLAQF,    USCBJOPF.JOEADT,    USCBJOPF.JOEATM,    USCBJOPF.JOEAID,    USCBJOPF.JOMODT,    USCBJOPF.JOMOTM,    USCBJOPF.JOMOID,    USCBJOPF.JOMOPG FROM USCBJOPF ORDER BY USCBJOPF.JOEADT DESC\"");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("PROPERTIES" + " = " + "context.SUS_Additional_Params");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("TRIM_ALL_COLUMN" + " = " + "true");
                        log4jParamters_tDBInput_1.append(" | ");
                            log4jParamters_tDBInput_1.append("UNIFIED_COMPONENTS" + " = " + "tAS400Input");
                        log4jParamters_tDBInput_1.append(" | ");
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + (log4jParamters_tDBInput_1) );
                    } 
                } 
            new BytesLimit65535_tDBInput_1().limitLog4jByte();
            }
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.SUS_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
	    		log.debug("tDBInput_1 - Driver ClassName: "+driverClass_tDBInput_1+".");
			
	    		log.debug("tDBInput_1 - Connection attempt to '" + url_tDBInput_1 + "' with the username '" + dbUser_tDBInput_1 + "'.");
			
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
	    		log.debug("tDBInput_1 - Connection to '" + url_tDBInput_1 + "' has succeeded.");
			
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  USCBJOPF.JOARCO, \n  USCBJOPF.JOCUNO, \n  USCBJOPF.JONANO, \n  USCBJOPF.JODELC, \n  USCBJOPF.JOSTNU, \n  USCBJOPF."
+"JOPLSZ, \n  USCBJOPF.JOORAP, \n  USCBJOPF.JOPORQ, \n  USCBJOPF.JOBHFR, \n  USCBJOPF.JOAPBF, \n  USCBJOPF.JOBHTO, \n  USCBJOPF."
+"JOAPBT, \n  USCBJOPF.JODHF1, \n  USCBJOPF.JOAPF1, \n  USCBJOPF.JODHT1, \n  USCBJOPF.JOAPT1, \n  USCBJOPF.JODHF2, \n  USCBJOPF."
+"JOAPF2, \n  USCBJOPF.JODHT2, \n  USCBJOPF.JOAPT2, \n  USCBJOPF.JODHF3, \n  USCBJOPF.JOAPF3, \n  USCBJOPF.JODHT3, \n  USCBJOPF."
+"JOAPT3, \n  USCBJOPF.JODHF4, \n  USCBJOPF.JOAPF4, \n  USCBJOPF.JODHT4, \n  USCBJOPF.JOAPT4, \n  USCBJOPF.JOINSC, \n  USCBJOPF."
+"JOINPE, \n  USCBJOPF.JOINSU, \n  USCBJOPF.JOINNE, \n  USCBJOPF.JOINSI, \n  USCBJOPF.JOINNI, \n  USCBJOPF.JORFEE, \n  USCBJOPF."
+"JOACCP, \n  USCBJOPF.JOPDF1, \n  USCBJOPF.JOPFF1, \n  USCBJOPF.JOPDT1, \n  USCBJOPF.JOPFT1, \n  USCBJOPF.JOPDF2, \n  USCBJOPF."
+"JOPFF2, \n  USCBJOPF.JOPDT2, \n  USCBJOPF.JOPFT2, \n  USCBJOPF.JOOPTP, \n  USCBJOPF.JOCUIS, \n  USCBJOPF.JOCRDT, \n  USCBJOPF."
+"JOARDT, \n  USCBJOPF.JOIOCH, \n  USCBJOPF.JODSUB, \n  USCBJOPF.JODRTF, \n  USCBJOPF.JORSID, \n  USCBJOPF.JOFSUB, \n  USCBJOPF."
+"JODPMT, \n  USCBJOPF.JOPARF, \n  USCBJOPF.JONPRF, \n  USCBJOPF.JOTXEX, \n  USCBJOPF.JOOWNR, \n  USCBJOPF.JOMACO, \n  USCBJOPF."
+"JOMAD1, \n  USCBJOPF.JOMAD2, \n  USCBJOPF.JOMAD3, \n  USCBJOPF.JOMCIT, \n  USCBJOPF.JOMSTA, \n  USCBJOPF.JOMZIP, \n  USCBJOPF."
+"JOCY03, \n  USCBJOPF.JOCSTA, \n  USCBJOPF.JOIALL, \n  USCBJOPF.JOSHST, \n  USCBJOPF.JORSCT, \n  USCBJOPF.JOIOCT, \n  USCBJOPF."
+"JOCGFL, \n  USCBJOPF.JOORPF, \n  USCBJOPF.JOGLDC, \n  USCBJOPF.JOVNBR, \n  USCBJOPF.JOADCD, \n  USCBJOPF.JOBTRT, \n  USCBJOPF."
+"JOAXZP, \n  USCBJOPF.JOPONU, \n  USCBJOPF.JOCMCD, \n  USCBJOPF.JOPVST, \n  USCBJOPF.JOPMTC, \n  USCBJOPF.JOPGIN, \n  USCBJOPF."
+"JOPGED, \n  USCBJOPF.JOPGTI, \n  USCBJOPF.JOSTNR, \n  USCBJOPF.JOSTIN, \n  USCBJOPF.JOLOPT, \n  USCBJOPF.JOPONE, \n  USCBJOPF."
+"JOPOTI, \n  USCBJOPF.JOAUSQ, \n  USCBJOPF.JOSCHT, \n  USCBJOPF.JOSTDT, \n  USCBJOPF.JOSCTP, \n  USCBJOPF.JOSTCT, \n  USCBJOPF."
+"JODPZ1, \n  USCBJOPF.JODPZ2, \n  USCBJOPF.JODPZ3, \n  USCBJOPF.JODPZ4, \n  USCBJOPF.JODPZ5, \n  USCBJOPF.JODPZ6, \n  USCBJOPF."
+"JODPZ7, \n  USCBJOPF.JOOTCN, \n  USCBJOPF.JOMADN, \n  USCBJOPF.JORCOR, \n  USCBJOPF.JOICOR, \n  USCBJOPF.JOSCOR, \n  USCBJOPF."
+"JOPTAP, \n  USCBJOPF.JODSDL, \n  USCBJOPF.JODDL2, \n  USCBJOPF.JODSSC, \n  USCBJOPF.JOBHD1, \n  USCBJOPF.JOBHD2, \n  USCBJOPF."
+"JOTXEN, \n  USCBJOPF.JOPRNM, \n  USCBJOPF.JOSTCD, \n  USCBJOPF.JOBHF2, \n  USCBJOPF.JOAPB2, \n  USCBJOPF.JOBHT2, \n  USCBJOPF."
+"JOAPH2, \n  USCBJOPF.JOTORD, \n  USCBJOPF.JOTXAP, \n  USCBJOPF.JORSAP, \n  USCBJOPF.JOCSAP, \n  USCBJOPF.JOAIAP, \n  USCBJOPF."
+"JOALNM, \n  USCBJOPF.JOSRNM, \n  USCBJOPF.JOMNRN, \n  USCBJOPF.JOMXRN, \n  USCBJOPF.JOCBNM, \n  USCBJOPF.JOHPNM, \n  USCBJOPF."
+"JOOPSC, \n  USCBJOPF.JOOPSP, \n  USCBJOPF.JOMSES, \n  USCBJOPF.JOMPES, \n  USCBJOPF.JOEMDT, \n  USCBJOPF.JOEXMT, \n  USCBJOPF."
+"JOREAP, \n  USCBJOPF.JOAGAP, \n  USCBJOPF.JODSAP, \n  USCBJOPF.JONTAP, \n  USCBJOPF.JOMSTS, \n  USCBJOPF.JOAAPP, \n  USCBJOPF."
+"JOCENT, \n  USCBJOPF.JOSTAE, \n  USCBJOPF.JOCOMF, \n  USCBJOPF.JONOPO, \n  USCBJOPF.JOOPOA, \n  USCBJOPF.JOKOCU, \n  USCBJOPF."
+"JOLTCN, \n  USCBJOPF.JOLTZN, \n  USCBJOPF.JOSSCP, \n  USCBJOPF.JOOSDT, \n  USCBJOPF.JOLTUF, \n  USCBJOPF.JOTPCF, \n  USCBJOPF."
+"JOSCCC, \n  USCBJOPF.JOSMCO, \n  USCBJOPF.JOSUHM, \n  USCBJOPF.JOHMCO, \n  USCBJOPF.JOLOHM, \n  USCBJOPF.JOSIAV, \n  USCBJOPF."
+"JOMAPC, \n  USCBJOPF.JOARLF, \n  USCBJOPF.JOPRLF, \n  USCBJOPF.JOSRLF, \n  USCBJOPF.JOMIRF, \n  USCBJOPF.JOMARF, \n  USCBJOPF."
+"JOCBRF, \n  USCBJOPF.JOHPCF, \n  USCBJOPF.JOOPSF, \n  USCBJOPF.JOOPDF, \n  USCBJOPF.JODFR7, \n  USCBJOPF.JODFR1, \n  USCBJOPF."
+"JODFR2, \n  USCBJOPF.JODFR3, \n  USCBJOPF.JODFR4, \n  USCBJOPF.JODFR5, \n  USCBJOPF.JODFR6, \n  USCBJOPF.JODFS7, \n  USCBJOPF."
+"JODFS1, \n  USCBJOPF.JODFS2, \n  USCBJOPF.JODFS3, \n  USCBJOPF.JODFS4, \n  USCBJOPF.JODFS5, \n  USCBJOPF.JODFS6, \n  USCBJOPF."
+"JOLTCO, \n  USCBJOPF.JOLNCO, \n  USCBJOPF.JOLTDR, \n  USCBJOPF.JOLNDR, \n  USCBJOPF.JOFRDL, \n  USCBJOPF.JOFRCD, \n  USCBJOPF."
+"JOLTEX, \n  USCBJOPF.JOOGSN, \n  USCBJOPF.JOSCHG, \n  USCBJOPF.JOPICU, \n  USCBJOPF.JODDRT, \n  USCBJOPF.JOCRPM, \n  USCBJOPF."
+"JOCRPN, \n  USCBJOPF.JOCPPC, \n  USCBJOPF.JOCPRN, \n  USCBJOPF.JOCHMC, \n  USCBJOPF.JOCRHM, \n  USCBJOPF.JOLOCA, \n  USCBJOPF."
+"JORCSR, \n  USCBJOPF.JOICSR, \n  USCBJOPF.JOSCSR, \n  USCBJOPF.JOPCSR, \n  USCBJOPF.JOARSR, \n  USCBJOPF.JOSBSR, \n  USCBJOPF."
+"JOMNSR, \n  USCBJOPF.JOMXSR, \n  USCBJOPF.JOCMSR, \n  USCBJOPF.JOHPSR, \n  USCBJOPF.JOLAQF, \n  USCBJOPF.JOEADT, \n  USCBJOPF."
+"JOEATM, \n  USCBJOPF.JOEAID, \n  USCBJOPF.JOMODT, \n  USCBJOPF.JOMOTM, \n  USCBJOPF.JOMOID, \n  USCBJOPF.JOMOPG\nFROM USCBJOPF"
+" ORDER BY USCBJOPF.JOEADT DESC";
		    
	    		log.debug("tDBInput_1 - Executing the query: '" + dbquery_tDBInput_1 + "'.");
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    	log.debug("tDBInput_1 - Retrieving records from the database.");
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.JOARCO = null;
							} else {
	                         		
        	row1.JOARCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.JOCUNO = null;
							} else {
	                         		
        	row1.JOCUNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.JONANO = null;
							} else {
	                         		
        	row1.JONANO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.JODELC = null;
							} else {
	                         		
        	row1.JODELC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.JOSTNU = null;
							} else {
	                         		
        	row1.JOSTNU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.JOPLSZ = null;
							} else {
	                         		
        	row1.JOPLSZ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.JOORAP = null;
							} else {
	                         		
        	row1.JOORAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.JOPORQ = null;
							} else {
	                         		
        	row1.JOPORQ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.JOBHFR = null;
							} else {
	                         		
        	row1.JOBHFR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.JOAPBF = null;
							} else {
	                         		
        	row1.JOAPBF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.JOBHTO = null;
							} else {
	                         		
        	row1.JOBHTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.JOAPBT = null;
							} else {
	                         		
        	row1.JOAPBT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.JODHF1 = null;
							} else {
	                         		
        	row1.JODHF1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.JOAPF1 = null;
							} else {
	                         		
        	row1.JOAPF1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.JODHT1 = null;
							} else {
	                         		
        	row1.JODHT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.JOAPT1 = null;
							} else {
	                         		
        	row1.JOAPT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.JODHF2 = null;
							} else {
	                         		
        	row1.JODHF2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.JOAPF2 = null;
							} else {
	                         		
        	row1.JOAPF2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.JODHT2 = null;
							} else {
	                         		
        	row1.JODHT2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.JOAPT2 = null;
							} else {
	                         		
        	row1.JOAPT2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.JODHF3 = null;
							} else {
	                         		
        	row1.JODHF3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.JOAPF3 = null;
							} else {
	                         		
        	row1.JOAPF3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.JODHT3 = null;
							} else {
	                         		
        	row1.JODHT3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.JOAPT3 = null;
							} else {
	                         		
        	row1.JOAPT3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.JODHF4 = null;
							} else {
	                         		
        	row1.JODHF4 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.JOAPF4 = null;
							} else {
	                         		
        	row1.JOAPF4 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.JODHT4 = null;
							} else {
	                         		
        	row1.JODHT4 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.JOAPT4 = null;
							} else {
	                         		
        	row1.JOAPT4 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.JOINSC = null;
							} else {
	                         		
        	row1.JOINSC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.JOINPE = null;
							} else {
	                         		
        	row1.JOINPE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.JOINSU = null;
							} else {
	                         		
        	row1.JOINSU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.JOINNE = null;
							} else {
	                         		
        	row1.JOINNE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.JOINSI = null;
							} else {
	                         		
        	row1.JOINSI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.JOINNI = null;
							} else {
	                         		
        	row1.JOINNI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.JORFEE = null;
							} else {
	                         		
        	row1.JORFEE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.JOACCP = null;
							} else {
	                         		
        	row1.JOACCP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.JOPDF1 = null;
							} else {
	                         		
        	row1.JOPDF1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.JOPFF1 = null;
							} else {
	                         		
        	row1.JOPFF1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.JOPDT1 = null;
							} else {
	                         		
        	row1.JOPDT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.JOPFT1 = null;
							} else {
	                         		
        	row1.JOPFT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.JOPDF2 = null;
							} else {
	                         		
        	row1.JOPDF2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.JOPFF2 = null;
							} else {
	                         		
        	row1.JOPFF2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.JOPDT2 = null;
							} else {
	                         		
        	row1.JOPDT2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.JOPFT2 = null;
							} else {
	                         		
        	row1.JOPFT2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.JOOPTP = null;
							} else {
	                         		
        	row1.JOOPTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.JOCUIS = null;
							} else {
	                         		
        	row1.JOCUIS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.JOCRDT = null;
							} else {
	                         		
        	row1.JOCRDT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.JOARDT = null;
							} else {
	                         		
        	row1.JOARDT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.JOIOCH = null;
							} else {
	                         		
        	row1.JOIOCH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.JODSUB = null;
							} else {
	                         		
        	row1.JODSUB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.JODRTF = null;
							} else {
	                         		
        	row1.JODRTF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.JORSID = null;
							} else {
	                         		
        	row1.JORSID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 52, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.JOFSUB = null;
							} else {
	                         		
        	row1.JOFSUB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.JODPMT = null;
							} else {
	                         		
        	row1.JODPMT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.JOPARF = null;
							} else {
	                         		
        	row1.JOPARF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 55, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.JONPRF = null;
							} else {
	                         		
        	row1.JONPRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.JOTXEX = null;
							} else {
	                         		
        	row1.JOTXEX = routines.system.JDBCUtil.getString(rs_tDBInput_1, 57, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.JOOWNR = null;
							} else {
	                         		
        	row1.JOOWNR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 58, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.JOMACO = null;
							} else {
	                         		
        	row1.JOMACO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 59, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.JOMAD1 = null;
							} else {
	                         		
        	row1.JOMAD1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 60, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.JOMAD2 = null;
							} else {
	                         		
        	row1.JOMAD2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 61, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.JOMAD3 = null;
							} else {
	                         		
        	row1.JOMAD3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 62, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.JOMCIT = null;
							} else {
	                         		
        	row1.JOMCIT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 63, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.JOMSTA = null;
							} else {
	                         		
        	row1.JOMSTA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.JOMZIP = null;
							} else {
	                         		
        	row1.JOMZIP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 65, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.JOCY03 = null;
							} else {
	                         		
        	row1.JOCY03 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 66, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.JOCSTA = null;
							} else {
	                         		
        	row1.JOCSTA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 67, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.JOIALL = null;
							} else {
	                         		
        	row1.JOIALL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.JOSHST = null;
							} else {
	                         		
        	row1.JOSHST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 69, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.JORSCT = null;
							} else {
	                         		
        	row1.JORSCT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 70, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.JOIOCT = null;
							} else {
	                         		
        	row1.JOIOCT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 71, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.JOCGFL = null;
							} else {
	                         		
        	row1.JOCGFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.JOORPF = null;
							} else {
	                         		
        	row1.JOORPF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 73, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.JOGLDC = null;
							} else {
	                         		
        	row1.JOGLDC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 74, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.JOVNBR = null;
							} else {
	                         		
        	row1.JOVNBR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.JOADCD = null;
							} else {
	                         		
        	row1.JOADCD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.JOBTRT = null;
							} else {
	                         		
        	row1.JOBTRT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 77, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row1.JOAXZP = null;
							} else {
	                         		
        	row1.JOAXZP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 78, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 79) {
								row1.JOPONU = null;
							} else {
	                         		
        	row1.JOPONU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 79, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 80) {
								row1.JOCMCD = null;
							} else {
	                         		
        	row1.JOCMCD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 80, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 81) {
								row1.JOPVST = null;
							} else {
	                         		
        	row1.JOPVST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 81, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 82) {
								row1.JOPMTC = null;
							} else {
	                         		
        	row1.JOPMTC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 82, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 83) {
								row1.JOPGIN = null;
							} else {
	                         		
        	row1.JOPGIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 83, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 84) {
								row1.JOPGED = null;
							} else {
	                         		
        	row1.JOPGED = routines.system.JDBCUtil.getString(rs_tDBInput_1, 84, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 85) {
								row1.JOPGTI = null;
							} else {
	                         		
        	row1.JOPGTI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 85, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 86) {
								row1.JOSTNR = null;
							} else {
	                         		
        	row1.JOSTNR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 86, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 87) {
								row1.JOSTIN = null;
							} else {
	                         		
        	row1.JOSTIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 87, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 88) {
								row1.JOLOPT = null;
							} else {
	                         		
        	row1.JOLOPT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 88, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 89) {
								row1.JOPONE = null;
							} else {
	                         		
        	row1.JOPONE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 89, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 90) {
								row1.JOPOTI = null;
							} else {
	                         		
        	row1.JOPOTI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 90, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 91) {
								row1.JOAUSQ = null;
							} else {
	                         		
        	row1.JOAUSQ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 91, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 92) {
								row1.JOSCHT = null;
							} else {
	                         		
        	row1.JOSCHT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 92, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 93) {
								row1.JOSTDT = null;
							} else {
	                         		
        	row1.JOSTDT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 93, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 94) {
								row1.JOSCTP = null;
							} else {
	                         		
        	row1.JOSCTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 94, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 95) {
								row1.JOSTCT = null;
							} else {
	                         		
        	row1.JOSTCT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 95, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 96) {
								row1.JODPZ1 = null;
							} else {
	                         		
        	row1.JODPZ1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 96, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 97) {
								row1.JODPZ2 = null;
							} else {
	                         		
        	row1.JODPZ2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 97, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 98) {
								row1.JODPZ3 = null;
							} else {
	                         		
        	row1.JODPZ3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 98, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 99) {
								row1.JODPZ4 = null;
							} else {
	                         		
        	row1.JODPZ4 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 99, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 100) {
								row1.JODPZ5 = null;
							} else {
	                         		
        	row1.JODPZ5 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 100, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 101) {
								row1.JODPZ6 = null;
							} else {
	                         		
        	row1.JODPZ6 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 101, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 102) {
								row1.JODPZ7 = null;
							} else {
	                         		
        	row1.JODPZ7 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 102, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 103) {
								row1.JOOTCN = null;
							} else {
	                         		
        	row1.JOOTCN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 103, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 104) {
								row1.JOMADN = null;
							} else {
	                         		
        	row1.JOMADN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 104, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 105) {
								row1.JORCOR = null;
							} else {
	                         		
        	row1.JORCOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 105, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 106) {
								row1.JOICOR = null;
							} else {
	                         		
        	row1.JOICOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 106, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 107) {
								row1.JOSCOR = null;
							} else {
	                         		
        	row1.JOSCOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 107, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 108) {
								row1.JOPTAP = null;
							} else {
	                         		
        	row1.JOPTAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 108, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 109) {
								row1.JODSDL = null;
							} else {
	                         		
        	row1.JODSDL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 109, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 110) {
								row1.JODDL2 = null;
							} else {
	                         		
        	row1.JODDL2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 110, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 111) {
								row1.JODSSC = null;
							} else {
	                         		
        	row1.JODSSC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 111, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 112) {
								row1.JOBHD1 = null;
							} else {
	                         		
        	row1.JOBHD1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 112, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 113) {
								row1.JOBHD2 = null;
							} else {
	                         		
        	row1.JOBHD2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 113, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 114) {
								row1.JOTXEN = null;
							} else {
	                         		
        	row1.JOTXEN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 114, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 115) {
								row1.JOPRNM = null;
							} else {
	                         		
        	row1.JOPRNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 115, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 116) {
								row1.JOSTCD = null;
							} else {
	                         		
        	row1.JOSTCD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 116, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 117) {
								row1.JOBHF2 = null;
							} else {
	                         		
        	row1.JOBHF2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 117, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 118) {
								row1.JOAPB2 = null;
							} else {
	                         		
        	row1.JOAPB2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 118, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 119) {
								row1.JOBHT2 = null;
							} else {
	                         		
        	row1.JOBHT2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 119, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 120) {
								row1.JOAPH2 = null;
							} else {
	                         		
        	row1.JOAPH2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 120, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 121) {
								row1.JOTORD = null;
							} else {
	                         		
        	row1.JOTORD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 121, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 122) {
								row1.JOTXAP = null;
							} else {
	                         		
        	row1.JOTXAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 122, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 123) {
								row1.JORSAP = null;
							} else {
	                         		
        	row1.JORSAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 123, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 124) {
								row1.JOCSAP = null;
							} else {
	                         		
        	row1.JOCSAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 124, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 125) {
								row1.JOAIAP = null;
							} else {
	                         		
        	row1.JOAIAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 125, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 126) {
								row1.JOALNM = null;
							} else {
	                         		
        	row1.JOALNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 126, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 127) {
								row1.JOSRNM = null;
							} else {
	                         		
        	row1.JOSRNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 127, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 128) {
								row1.JOMNRN = null;
							} else {
	                         		
        	row1.JOMNRN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 128, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 129) {
								row1.JOMXRN = null;
							} else {
	                         		
        	row1.JOMXRN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 129, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 130) {
								row1.JOCBNM = null;
							} else {
	                         		
        	row1.JOCBNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 130, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 131) {
								row1.JOHPNM = null;
							} else {
	                         		
        	row1.JOHPNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 131, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 132) {
								row1.JOOPSC = null;
							} else {
	                         		
        	row1.JOOPSC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 132, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 133) {
								row1.JOOPSP = null;
							} else {
	                         		
        	row1.JOOPSP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 133, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 134) {
								row1.JOMSES = null;
							} else {
		                          
            row1.JOMSES = rs_tDBInput_1.getBigDecimal(134);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 135) {
								row1.JOMPES = null;
							} else {
		                          
            row1.JOMPES = rs_tDBInput_1.getBigDecimal(135);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 136) {
								row1.JOEMDT = null;
							} else {
	                         		
        	row1.JOEMDT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 136, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 137) {
								row1.JOEXMT = null;
							} else {
	                         		
        	row1.JOEXMT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 137, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 138) {
								row1.JOREAP = null;
							} else {
	                         		
        	row1.JOREAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 138, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 139) {
								row1.JOAGAP = null;
							} else {
	                         		
        	row1.JOAGAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 139, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 140) {
								row1.JODSAP = null;
							} else {
	                         		
        	row1.JODSAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 140, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 141) {
								row1.JONTAP = null;
							} else {
	                         		
        	row1.JONTAP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 141, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 142) {
								row1.JOMSTS = null;
							} else {
	                         		
        	row1.JOMSTS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 142, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 143) {
								row1.JOAAPP = null;
							} else {
	                         		
        	row1.JOAAPP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 143, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 144) {
								row1.JOCENT = null;
							} else {
	                         		
        	row1.JOCENT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 144, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 145) {
								row1.JOSTAE = null;
							} else {
	                         		
        	row1.JOSTAE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 145, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 146) {
								row1.JOCOMF = null;
							} else {
	                         		
        	row1.JOCOMF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 146, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 147) {
								row1.JONOPO = null;
							} else {
	                         		
        	row1.JONOPO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 147, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 148) {
								row1.JOOPOA = null;
							} else {
		                          
            row1.JOOPOA = rs_tDBInput_1.getBigDecimal(148);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 149) {
								row1.JOKOCU = null;
							} else {
	                         		
        	row1.JOKOCU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 149, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 150) {
								row1.JOLTCN = null;
							} else {
	                         		
        	row1.JOLTCN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 150, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 151) {
								row1.JOLTZN = null;
							} else {
	                         		
        	row1.JOLTZN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 151, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 152) {
								row1.JOSSCP = null;
							} else {
	                         		
        	row1.JOSSCP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 152, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 153) {
								row1.JOOSDT = null;
							} else {
	                         		
        	row1.JOOSDT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 153, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 154) {
								row1.JOLTUF = null;
							} else {
	                         		
        	row1.JOLTUF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 154, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 155) {
								row1.JOTPCF = null;
							} else {
	                         		
        	row1.JOTPCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 155, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 156) {
								row1.JOSCCC = null;
							} else {
	                         		
        	row1.JOSCCC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 156, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 157) {
								row1.JOSMCO = null;
							} else {
	                         		
        	row1.JOSMCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 157, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 158) {
								row1.JOSUHM = null;
							} else {
	                         		
        	row1.JOSUHM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 158, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 159) {
								row1.JOHMCO = null;
							} else {
	                         		
        	row1.JOHMCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 159, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 160) {
								row1.JOLOHM = null;
							} else {
	                         		
        	row1.JOLOHM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 160, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 161) {
								row1.JOSIAV = null;
							} else {
	                         		
        	row1.JOSIAV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 161, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 162) {
								row1.JOMAPC = null;
							} else {
	                         		
        	row1.JOMAPC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 162, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 163) {
								row1.JOARLF = null;
							} else {
	                         		
        	row1.JOARLF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 163, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 164) {
								row1.JOPRLF = null;
							} else {
	                         		
        	row1.JOPRLF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 164, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 165) {
								row1.JOSRLF = null;
							} else {
	                         		
        	row1.JOSRLF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 165, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 166) {
								row1.JOMIRF = null;
							} else {
	                         		
        	row1.JOMIRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 166, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 167) {
								row1.JOMARF = null;
							} else {
	                         		
        	row1.JOMARF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 167, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 168) {
								row1.JOCBRF = null;
							} else {
	                         		
        	row1.JOCBRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 168, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 169) {
								row1.JOHPCF = null;
							} else {
	                         		
        	row1.JOHPCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 169, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 170) {
								row1.JOOPSF = null;
							} else {
	                         		
        	row1.JOOPSF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 170, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 171) {
								row1.JOOPDF = null;
							} else {
	                         		
        	row1.JOOPDF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 171, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 172) {
								row1.JODFR7 = null;
							} else {
	                         		
        	row1.JODFR7 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 172, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 173) {
								row1.JODFR1 = null;
							} else {
	                         		
        	row1.JODFR1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 173, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 174) {
								row1.JODFR2 = null;
							} else {
	                         		
        	row1.JODFR2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 174, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 175) {
								row1.JODFR3 = null;
							} else {
	                         		
        	row1.JODFR3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 175, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 176) {
								row1.JODFR4 = null;
							} else {
	                         		
        	row1.JODFR4 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 176, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 177) {
								row1.JODFR5 = null;
							} else {
	                         		
        	row1.JODFR5 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 177, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 178) {
								row1.JODFR6 = null;
							} else {
	                         		
        	row1.JODFR6 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 178, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 179) {
								row1.JODFS7 = null;
							} else {
	                         		
        	row1.JODFS7 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 179, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 180) {
								row1.JODFS1 = null;
							} else {
	                         		
        	row1.JODFS1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 180, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 181) {
								row1.JODFS2 = null;
							} else {
	                         		
        	row1.JODFS2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 181, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 182) {
								row1.JODFS3 = null;
							} else {
	                         		
        	row1.JODFS3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 182, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 183) {
								row1.JODFS4 = null;
							} else {
	                         		
        	row1.JODFS4 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 183, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 184) {
								row1.JODFS5 = null;
							} else {
	                         		
        	row1.JODFS5 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 184, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 185) {
								row1.JODFS6 = null;
							} else {
	                         		
        	row1.JODFS6 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 185, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 186) {
								row1.JOLTCO = null;
							} else {
	                         		
        	row1.JOLTCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 186, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 187) {
								row1.JOLNCO = null;
							} else {
	                         		
        	row1.JOLNCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 187, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 188) {
								row1.JOLTDR = null;
							} else {
	                         		
        	row1.JOLTDR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 188, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 189) {
								row1.JOLNDR = null;
							} else {
	                         		
        	row1.JOLNDR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 189, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 190) {
								row1.JOFRDL = null;
							} else {
	                         		
        	row1.JOFRDL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 190, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 191) {
								row1.JOFRCD = null;
							} else {
	                         		
        	row1.JOFRCD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 191, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 192) {
								row1.JOLTEX = null;
							} else {
	                         		
        	row1.JOLTEX = routines.system.JDBCUtil.getString(rs_tDBInput_1, 192, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 193) {
								row1.JOOGSN = null;
							} else {
	                         		
        	row1.JOOGSN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 193, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 194) {
								row1.JOSCHG = null;
							} else {
	                         		
        	row1.JOSCHG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 194, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 195) {
								row1.JOPICU = null;
							} else {
	                         		
        	row1.JOPICU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 195, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 196) {
								row1.JODDRT = null;
							} else {
	                         		
        	row1.JODDRT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 196, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 197) {
								row1.JOCRPM = null;
							} else {
	                         		
        	row1.JOCRPM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 197, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 198) {
								row1.JOCRPN = null;
							} else {
	                         		
        	row1.JOCRPN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 198, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 199) {
								row1.JOCPPC = null;
							} else {
	                         		
        	row1.JOCPPC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 199, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 200) {
								row1.JOCPRN = null;
							} else {
	                         		
        	row1.JOCPRN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 200, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 201) {
								row1.JOCHMC = null;
							} else {
	                         		
        	row1.JOCHMC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 201, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 202) {
								row1.JOCRHM = null;
							} else {
	                         		
        	row1.JOCRHM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 202, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 203) {
								row1.JOLOCA = null;
							} else {
	                         		
        	row1.JOLOCA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 203, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 204) {
								row1.JORCSR = null;
							} else {
	                         		
        	row1.JORCSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 204, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 205) {
								row1.JOICSR = null;
							} else {
	                         		
        	row1.JOICSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 205, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 206) {
								row1.JOSCSR = null;
							} else {
	                         		
        	row1.JOSCSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 206, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 207) {
								row1.JOPCSR = null;
							} else {
	                         		
        	row1.JOPCSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 207, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 208) {
								row1.JOARSR = null;
							} else {
	                         		
        	row1.JOARSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 208, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 209) {
								row1.JOSBSR = null;
							} else {
	                         		
        	row1.JOSBSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 209, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 210) {
								row1.JOMNSR = null;
							} else {
	                         		
        	row1.JOMNSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 210, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 211) {
								row1.JOMXSR = null;
							} else {
	                         		
        	row1.JOMXSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 211, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 212) {
								row1.JOCMSR = null;
							} else {
	                         		
        	row1.JOCMSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 212, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 213) {
								row1.JOHPSR = null;
							} else {
	                         		
        	row1.JOHPSR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 213, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 214) {
								row1.JOLAQF = null;
							} else {
	                         		
        	row1.JOLAQF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 214, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 215) {
								row1.JOEADT = null;
							} else {
		                          
            row1.JOEADT = rs_tDBInput_1.getBigDecimal(215);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 216) {
								row1.JOEATM = null;
							} else {
		                          
            row1.JOEATM = rs_tDBInput_1.getBigDecimal(216);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 217) {
								row1.JOEAID = null;
							} else {
	                         		
        	row1.JOEAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 217, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 218) {
								row1.JOMODT = null;
							} else {
		                          
            row1.JOMODT = rs_tDBInput_1.getBigDecimal(218);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 219) {
								row1.JOMOTM = null;
							} else {
		                          
            row1.JOMOTM = rs_tDBInput_1.getBigDecimal(219);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 220) {
								row1.JOMOID = null;
							} else {
	                         		
        	row1.JOMOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 220, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 221) {
								row1.JOMOPG = null;
							} else {
	                         		
        	row1.JOMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 221, true);
		                    }
					
						log.debug("tDBInput_1 - Retrieving the record " + nb_line_tDBInput_1 + ".");
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("row1 - " + (row1==null? "": row1.toLogString()));
    			}
    		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.JOEADT.toString(), row1.JOEATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.JOMODT.toString(), row1.JOMOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

CUSTOMER_SHIP_TO = null;


// # Output table : 'CUSTOMER_SHIP_TO'
count_CUSTOMER_SHIP_TO_tMap_1++;

CUSTOMER_SHIP_TO_tmp.SITE_ID = context.opco;
CUSTOMER_SHIP_TO_tmp.AR_COMPANY = row1.JOARCO ;
CUSTOMER_SHIP_TO_tmp.SHIP_TO_CUST = row1.JOCUNO ;
CUSTOMER_SHIP_TO_tmp.NATIONAL_ACCOUNT_NO = row1.JONANO ;
CUSTOMER_SHIP_TO_tmp.DELIVERY_CODE = row1.JODELC ;
CUSTOMER_SHIP_TO_tmp.SHIP_TO_STORE_NO = row1.JOSTNU ;
CUSTOMER_SHIP_TO_tmp.PALLET_LOAD = row1.JOPLSZ ;
CUSTOMER_SHIP_TO_tmp.ORDER_APPROVAL_REQUIRED = row1.JOORAP ;
CUSTOMER_SHIP_TO_tmp.PO_REQUIRED = row1.JOPORQ ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_FROM_1 = row1.JOBHFR ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_FROM_AM_PM_1 = row1.JOAPBF ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_TO_1 = row1.JOBHTO ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_TO_AM_PM_1 = row1.JOAPBT ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_FROM_1 = row1.JODHF1 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_FROM_AM_PM_1 = row1.JOAPF1 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_TO_1 = row1.JODHT1 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_TO_AM_PM_1 = row1.JOAPT1 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_FROM_2 = row1.JODHF2 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_FROM_AM_PM_2 = row1.JOAPF2 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_TO_2 = row1.JODHT2 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_TO_AM_PM_2 = row1.JOAPT2 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_FROM_3 = row1.JODHF3 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_FROM_AM_PM_3 = row1.JOAPF3 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_TO_3 = row1.JODHT3 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_TO_AM_PM_3 = row1.JOAPT3 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_FROM_4 = row1.JODHF4 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_FROM_AM_PM_4 = row1.JOAPF4 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_TO_4 = row1.JODHT4 ;
CUSTOMER_SHIP_TO_tmp.NO_DELIVERIES_TO_AM_PM_4 = row1.JOAPT4 ;
CUSTOMER_SHIP_TO_tmp.SEPARATE_OR_COMBINE_BY_PO = row1.JOINSC ;
CUSTOMER_SHIP_TO_tmp.PRINT_OR_EDI_STATUS = row1.JOINPE ;
CUSTOMER_SHIP_TO_tmp.SUMMARY_REPORT = row1.JOINSU ;
CUSTOMER_SHIP_TO_tmp.EXTERNAL_DESIRED_NO_OF_COPIES = row1.JOINNE ;
CUSTOMER_SHIP_TO_tmp.SHIPPING_DOCUMENT_OR_INVOICE = row1.JOINSI ;
CUSTOMER_SHIP_TO_tmp.INTERNAL_DESIRED_NO_OF_COPIES = row1.JOINNI ;
CUSTOMER_SHIP_TO_tmp.RESTOCK_FEE = row1.JORFEE ;
CUSTOMER_SHIP_TO_tmp.ACCOUNT_TYPE = row1.JOACCP ;
CUSTOMER_SHIP_TO_tmp.PREFFERED_DELIVERY_HOURS_FROM_1 = row1.JOPDF1 ;
CUSTOMER_SHIP_TO_tmp.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1 = row1.JOPFF1 ;
CUSTOMER_SHIP_TO_tmp.PREFFERED_DELIVERY_HOURS_TO_1 = row1.JOPDT1 ;
CUSTOMER_SHIP_TO_tmp.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1 = row1.JOPFT1 ;
CUSTOMER_SHIP_TO_tmp.PREFFERED_DELIVERY_HOURS_FROM_2 = row1.JOPDF2 ;
CUSTOMER_SHIP_TO_tmp.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2 = row1.JOPFF2 ;
CUSTOMER_SHIP_TO_tmp.PREFFERED_DELIVERY_HOURS_TO_2 = row1.JOPDT2 ;
CUSTOMER_SHIP_TO_tmp.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2 = row1.JOPFT2 ;
CUSTOMER_SHIP_TO_tmp.CORPORATE_TYPE_OF_OPERATION = row1.JOOPTP ;
CUSTOMER_SHIP_TO_tmp.CUISINE = row1.JOCUIS ;
CUSTOMER_SHIP_TO_tmp.PROFILE_CREATION_DATE = row1.JOCRDT ;
CUSTOMER_SHIP_TO_tmp.PROFILE_ARCHIVE_DATE = row1.JOARDT ;
CUSTOMER_SHIP_TO_tmp.ITEM_OVERRIDE_CHART_ID = row1.JOIOCH ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_SUBSTITUTE_TYPE = row1.JODSUB ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_RESTRICT_TYPE = row1.JODRTF ;
CUSTOMER_SHIP_TO_tmp.RESTRICT_OR_SUB_CHART_ID = row1.JORSID ;
CUSTOMER_SHIP_TO_tmp.FORCED_SUBSTITUTION = row1.JOFSUB ;
CUSTOMER_SHIP_TO_tmp.DEPARTMENTS_INDICATOR = row1.JODPMT ;
CUSTOMER_SHIP_TO_tmp.PARTIAL_FILL = row1.JOPARF ;
CUSTOMER_SHIP_TO_tmp.NON_PROFIT_FLAG = row1.JONPRF ;
CUSTOMER_SHIP_TO_tmp.MISCELLANEOUS_TAX_EXEMPT = row1.JOTXEX ;
CUSTOMER_SHIP_TO_tmp.OWNER_NAME = row1.JOOWNR ;
CUSTOMER_SHIP_TO_tmp.TERRITORY_CODE = row1.JOMACO ;
CUSTOMER_SHIP_TO_tmp.MAIL_ADDRESS_1 = row1.JOMAD1 ;
CUSTOMER_SHIP_TO_tmp.MAIL_ADDRESS_2 = row1.JOMAD2 ;
CUSTOMER_SHIP_TO_tmp.MAIL_ADDRESS_3 = row1.JOMAD3 ;
CUSTOMER_SHIP_TO_tmp.MAIL_CITY = row1.JOMCIT ;
CUSTOMER_SHIP_TO_tmp.MAIL_STATE_CODE = row1.JOMSTA ;
CUSTOMER_SHIP_TO_tmp.MAIL_ZIP_CODE = row1.JOMZIP ;
CUSTOMER_SHIP_TO_tmp.COUNTRY_CODE = row1.JOCY03 ;
CUSTOMER_SHIP_TO_tmp.CENSUS_STATE_CODE = row1.JOCSTA ;
CUSTOMER_SHIP_TO_tmp.IMMEDIATE_ALLOC_FLAG = row1.JOIALL ;
CUSTOMER_SHIP_TO_tmp.CUSTOMER_SHIP_TO_STATUS = row1.JOSHST ;
CUSTOMER_SHIP_TO_tmp.RESTRICTION_CHART_TYPE = row1.JORSCT ;
CUSTOMER_SHIP_TO_tmp.ITEM_OVERRIDE_CHART_TYPE = row1.JOIOCT ;
CUSTOMER_SHIP_TO_tmp.RECORD_CHANGE_FLAG = row1.JOCGFL ;
CUSTOMER_SHIP_TO_tmp.ORDERS_PLACED_FLAG = row1.JOORPF ;
CUSTOMER_SHIP_TO_tmp.ASSIGN_CODES_BY_DEPT = row1.JOGLDC ;
CUSTOMER_SHIP_TO_tmp.VENDOR_NO = row1.JOVNBR ;
CUSTOMER_SHIP_TO_tmp.VENDOR_SUFFIX = row1.JOADCD ;
CUSTOMER_SHIP_TO_tmp.RECORD_TYPE_INDICATOR = row1.JOBTRT ;
CUSTOMER_SHIP_TO_tmp.PURCHASE_ORDER_NO = row1.JOPONU ;
CUSTOMER_SHIP_TO_tmp.CUSTOMER_COMMODITY_CODE = row1.JOCMCD ;
CUSTOMER_SHIP_TO_tmp.PREVIOUS_STATUS = row1.JOPVST ;
CUSTOMER_SHIP_TO_tmp.PAYMENT_TERMS_CODE = row1.JOPMTC ;
CUSTOMER_SHIP_TO_tmp.PERSONAL_GURANTEE_INDICATOR = row1.JOPGIN ;
CUSTOMER_SHIP_TO_tmp.PERSONAL_GURANTEE_EXPIRATION_DATE = row1.JOPGED ;
CUSTOMER_SHIP_TO_tmp.PERSONAL_GURANTEE_TASK_INDICATOR = row1.JOPGTI ;
CUSTOMER_SHIP_TO_tmp.SALES_TAX_LAST_REVIEW_DATE = row1.JOSTNR ;
CUSTOMER_SHIP_TO_tmp.SALES_TAX_REVIEW_INDICATOR = row1.JOSTIN ;
CUSTOMER_SHIP_TO_tmp.LOCAL_TYPE_OF_OPERATION = row1.JOLOPT ;
CUSTOMER_SHIP_TO_tmp.PO_NO_EXPIRATION_DATE = row1.JOPONE ;
CUSTOMER_SHIP_TO_tmp.PO_NO_TASK_INDICATOR = row1.JOPOTI ;
CUSTOMER_SHIP_TO_tmp.AUDIT_SEQUENCE_NO = row1.JOAUSQ ;
CUSTOMER_SHIP_TO_tmp.SEQUENCE_CHART_IDENTIFIER = row1.JOSCHT ;
CUSTOMER_SHIP_TO_tmp.STOP_DATE = row1.JOSTDT ;
CUSTOMER_SHIP_TO_tmp.SEQUENCE_CHART_TYPE = row1.JOSCTP ;
CUSTOMER_SHIP_TO_tmp.STOP_COUNTER = row1.JOSTCT ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_PICKING_TIME_ZONE_MONDAY = row1.JODPZ1 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_PICKING_TIME_ZONE_TUESDAY = row1.JODPZ2 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY = row1.JODPZ3 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_PICKING_TIME_ZONE_THURSDAY = row1.JODPZ4 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_PICKING_TIME_ZONE_FRIDAY = row1.JODPZ5 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_PICKING_TIME_ZONE_SATURDAY = row1.JODPZ6 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_PICKING_TIME_ZONE_SUNDAY = row1.JODPZ7 ;
CUSTOMER_SHIP_TO_tmp.OTHER_CONTACT_NAME = row1.JOOTCN ;
CUSTOMER_SHIP_TO_tmp.MAIL_ADDRESS_NAME = row1.JOMADN ;
CUSTOMER_SHIP_TO_tmp.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN = row1.JORCOR ;
CUSTOMER_SHIP_TO_tmp.ITEM_OVERRIDES_CHART_ORIGIN = row1.JOICOR ;
CUSTOMER_SHIP_TO_tmp.SEQUENCE_CHART_ORIGIN = row1.JOSCOR ;
CUSTOMER_SHIP_TO_tmp.PENDING_TERMS_APPROVAL = row1.JOPTAP ;
CUSTOMER_SHIP_TO_tmp.DESIGNATED_DELIVERY_DAYS_1 = row1.JODSDL ;
CUSTOMER_SHIP_TO_tmp.DESIGNATED_SALESMAN_CALL_DAYS = row1.JODSSC ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_DAYS_1 = row1.JOBHD1 ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_DAYS_2 = row1.JOBHD2 ;
CUSTOMER_SHIP_TO_tmp.TAX_AUTHORITY_NO = row1.JOTXEN ;
CUSTOMER_SHIP_TO_tmp.PRICE_RULE_NAME = row1.JOPRNM ;
CUSTOMER_SHIP_TO_tmp.STOP_CODE = row1.JOSTCD ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_FROM_2 = row1.JOBHF2 ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_FROM_AM_PM_2 = row1.JOAPB2 ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_TO_2 = row1.JOBHT2 ;
CUSTOMER_SHIP_TO_tmp.BUSINESS_HOURS_TO_AM_PM_2 = row1.JOAPH2 ;
CUSTOMER_SHIP_TO_tmp.TERRITORY_OVERRIDE_FLAG = row1.JOTORD ;
CUSTOMER_SHIP_TO_tmp.TAX_EXEMPT_APPROVAL_PENDING = row1.JOTXAP ;
CUSTOMER_SHIP_TO_tmp.RESTOCK_FEE_APPROVAL_PENDING = row1.JORSAP ;
CUSTOMER_SHIP_TO_tmp.CREDIT_STOP_APPROVAL_PENDING = row1.JOCSAP ;
CUSTOMER_SHIP_TO_tmp.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING = row1.JOAIAP ;
CUSTOMER_SHIP_TO_tmp.APPLICATION_RULE_NAME = row1.JOALNM ;
CUSTOMER_SHIP_TO_tmp.SUBSTITUTION_RULE_NAME = row1.JOSRNM ;
CUSTOMER_SHIP_TO_tmp.MINIMUM_RULE_NAME = row1.JOMNRN ;
CUSTOMER_SHIP_TO_tmp.MAXIMUM_RULE_NAME = row1.JOMXRN ;
CUSTOMER_SHIP_TO_tmp.COMMISSION_BASE_RULE_NAME = row1.JOCBNM ;
CUSTOMER_SHIP_TO_tmp.HAND_PRICE_RESTRICTION_RULE_NAME = row1.JOHPNM ;
CUSTOMER_SHIP_TO_tmp.ESTIMATED_MARKET_SHARE = row1.JOMSES ;
CUSTOMER_SHIP_TO_tmp.ESTIMATED_WEEKLY_MARKET_POTENTIAL = row1.JOMPES ;
CUSTOMER_SHIP_TO_tmp.TAX_EXEMPT_EXPIRATION_DATE = row1.JOEMDT ;
CUSTOMER_SHIP_TO_tmp.TAX_EXEMPT_FLAG = row1.JOEXMT ;
CUSTOMER_SHIP_TO_tmp.REACTIVATION_APPROVAL_PENDING = row1.JOREAP ;
CUSTOMER_SHIP_TO_tmp.AGING_POLICY_APPROVAL_PENDING = row1.JOAGAP ;
CUSTOMER_SHIP_TO_tmp.DISCOUNT_GRACE_APPROVAL_PENDING = row1.JODSAP ;
CUSTOMER_SHIP_TO_tmp.NET_DUE_GRACE_APPROVAL_PENDING = row1.JONTAP ;
CUSTOMER_SHIP_TO_tmp.MSP_TARGET_CUSTOMER_SPECIFICATIONS = row1.JOMSTS ;
CUSTOMER_SHIP_TO_tmp.ACTIVE_OR_INACTIVE_APPROVAL_PENDING = row1.JOAAPP ;
CUSTOMER_SHIP_TO_tmp.CUSTOMER_ENTITY_TYPE = row1.JOCENT ;
CUSTOMER_SHIP_TO_tmp.STATE = row1.JOSTAE ;
CUSTOMER_SHIP_TO_tmp.COMMODITY_FLAG = row1.JOCOMF ;
CUSTOMER_SHIP_TO_tmp.NO_OF_OPEN_ORDERS = row1.JONOPO;
CUSTOMER_SHIP_TO_tmp.OPEN_ORDER_AMOUNT = row1.JOOPOA ;
CUSTOMER_SHIP_TO_tmp.KOSHER_CUSTOMER = row1.JOKOCU ;
CUSTOMER_SHIP_TO_tmp.LAPTOP_ZID_NO = row1.JOLTZN ;
CUSTOMER_SHIP_TO_tmp.SYSCO_SALES_COMPANION = row1.JOSSCP ;
CUSTOMER_SHIP_TO_tmp.OFF_STOP_DATE = row1.JOOSDT ;
CUSTOMER_SHIP_TO_tmp.LAPTOP_USER_FLAG = row1.JOLTUF ;
CUSTOMER_SHIP_TO_tmp.THIRD_PARTY_CUSTOMER_FLAG = row1.JOTPCF ;
CUSTOMER_SHIP_TO_tmp.CREDIT_HIERARCHY_MASTER_COMPANY = row1.JOHMCO ;
CUSTOMER_SHIP_TO_tmp.CREDIT_HIERARCHY_MASTER_COMPANY_NO = row1.JOLOHM ;
CUSTOMER_SHIP_TO_tmp.SHIP_AVAILABLE_FLAG = row1.JOSIAV ;
CUSTOMER_SHIP_TO_tmp.MAPSCO_MAP_CODE = row1.JOMAPC ;
CUSTOMER_SHIP_TO_tmp.APPLICATION_RULE_DEFAULT_FLAG = row1.JOARLF ;
CUSTOMER_SHIP_TO_tmp.PRICE_RULE_DEFAULT_FLAG = row1.JOPRLF ;
CUSTOMER_SHIP_TO_tmp.SUBSTITUTION_RULE_DEFAULT_FLAG = row1.JOSRLF ;
CUSTOMER_SHIP_TO_tmp.MINIMUM_RULE_DEFAULT_FLAG = row1.JOMIRF ;
CUSTOMER_SHIP_TO_tmp.MAXIMUM_RULE_DEFAULT_FLAG = row1.JOMARF ;
CUSTOMER_SHIP_TO_tmp.COMMISSION_BASE_RULE_DEFAULT_FLAG = row1.JOCBRF ;
CUSTOMER_SHIP_TO_tmp.HAND_PRICE_RULE_DEFAULT_FLAG = row1.JOHPCF ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_ROUTE_MONDAY = row1.JODFR1 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_ROUTE_TUESDAY = row1.JODFR2 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_ROUTE_WEDNESDAY = row1.JODFR3 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_ROUTE_THURSDAY = row1.JODFR4 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_ROUTE_FRIDAY = row1.JODFR5 ;
CUSTOMER_SHIP_TO_tmp.DEFAULT_ROUTE_SATURDAY = row1.JODFR6 ;
CUSTOMER_SHIP_TO_tmp.LATITUDE_COORDINATES = row1.JOLTCO ;
CUSTOMER_SHIP_TO_tmp.LONGITUDE_COORDINATES = row1.JOLNCO ;
CUSTOMER_SHIP_TO_tmp.FREQUENCY_DOWNLOAD = row1.JOFRDL ;
CUSTOMER_SHIP_TO_tmp.FREQUENCY_CODE = row1.JOFRCD ;
CUSTOMER_SHIP_TO_tmp.LAPTOP_EXCEPTION_LEVEL = row1.JOLTEX ;
CUSTOMER_SHIP_TO_tmp.THIRD_PARTY_OG_OPTIONS = row1.JOOGSN ;
CUSTOMER_SHIP_TO_tmp.SERVICE_CHARGE = row1.JOSCHG ;
CUSTOMER_SHIP_TO_tmp.PRIMARY_SHIP_TO = row1.JOPICU ;
CUSTOMER_SHIP_TO_tmp.DELIVERY_DIFFICULTY_RATING = row1.JODDRT ;
CUSTOMER_SHIP_TO_tmp.BILL_TO_CORP_PRICING_PARENT_COMPANY = row1.JOCPPC ;
CUSTOMER_SHIP_TO_tmp.BILL_TO_CORP_PRICING_PARENT = row1.JOCPRN ;
CUSTOMER_SHIP_TO_tmp.CORP_HIERARCHY_MASTER_COMPANY = row1.JOCHMC ;
CUSTOMER_SHIP_TO_tmp.CORP_HIERARCHY_MASTER = row1.JOCRHM ;
CUSTOMER_SHIP_TO_tmp.LOCATION_ID = row1.JOLOCA ;
CUSTOMER_SHIP_TO_tmp.PRICE_RULE_SRC_COMPANY = row1.JOPCSR ;
CUSTOMER_SHIP_TO_tmp.APPLICATION_RULE_SRC_COMPANY = row1.JOARSR ;
CUSTOMER_SHIP_TO_tmp.SUBSTITUTE_RULE_SRC_COMPANY = row1.JOSBSR ;
CUSTOMER_SHIP_TO_tmp.MINIMUM_RULE_SRC_COMPANY = row1.JOMNSR ;
CUSTOMER_SHIP_TO_tmp.MAXIMUM_RULE_SRC_COMPANY = row1.JOMXSR ;
CUSTOMER_SHIP_TO_tmp.COMMISSION_BASE_RULE_SRC_COMPANY = row1.JOCMSR ;
CUSTOMER_SHIP_TO_tmp.HAND_PRICE_REST_RULE_SRC_COMPANY = row1.JOHPSR ;
CUSTOMER_SHIP_TO_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
CUSTOMER_SHIP_TO_tmp.CREATED_USER_ID = row1.JOEAID ;
CUSTOMER_SHIP_TO_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
CUSTOMER_SHIP_TO_tmp.UPDATED_USER_ID = row1.JOMOID ;
CUSTOMER_SHIP_TO_tmp.UPDATED_PROGRAM_ID = row1.JOMOPG ;
CUSTOMER_SHIP_TO_tmp.IS_DELETED = false;
CUSTOMER_SHIP_TO_tmp.CREATED_ORIGIN = "SUS";
CUSTOMER_SHIP_TO_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
CUSTOMER_SHIP_TO_tmp.UPDATED_ORIGIN = "SUS";
CUSTOMER_SHIP_TO_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
CUSTOMER_SHIP_TO_tmp.JOPF_SVOP = context.svop;
CUSTOMER_SHIP_TO = CUSTOMER_SHIP_TO_tmp;
log.debug("tMap_1 - Outputting the record " + count_CUSTOMER_SHIP_TO_tMap_1 + " of the output table 'CUSTOMER_SHIP_TO'.");

// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "CUSTOMER_SHIP_TO"
if(CUSTOMER_SHIP_TO != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CUSTOMER_SHIP_TO"
						
						);
					}
					
    			if(log.isTraceEnabled()){
    				log.trace("CUSTOMER_SHIP_TO - " + (CUSTOMER_SHIP_TO==null? "": CUSTOMER_SHIP_TO.toLogString()));
    			}
    		



        whetherReject_tDBOutput_1 = false;
                    if(CUSTOMER_SHIP_TO.SITE_ID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, CUSTOMER_SHIP_TO.SITE_ID);
}

                    if(CUSTOMER_SHIP_TO.AR_COMPANY == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, CUSTOMER_SHIP_TO.AR_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.SHIP_TO_CUST == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, CUSTOMER_SHIP_TO.SHIP_TO_CUST);
}

                    if(CUSTOMER_SHIP_TO.NATIONAL_ACCOUNT_NO == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, CUSTOMER_SHIP_TO.NATIONAL_ACCOUNT_NO);
}

                    if(CUSTOMER_SHIP_TO.DELIVERY_CODE == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, CUSTOMER_SHIP_TO.DELIVERY_CODE);
}

                    if(CUSTOMER_SHIP_TO.SHIP_TO_STORE_NO == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, CUSTOMER_SHIP_TO.SHIP_TO_STORE_NO);
}

                    if(CUSTOMER_SHIP_TO.PALLET_LOAD == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, CUSTOMER_SHIP_TO.PALLET_LOAD);
}

                    if(CUSTOMER_SHIP_TO.ORDER_APPROVAL_REQUIRED == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, CUSTOMER_SHIP_TO.ORDER_APPROVAL_REQUIRED);
}

                    if(CUSTOMER_SHIP_TO.PO_REQUIRED == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, CUSTOMER_SHIP_TO.PO_REQUIRED);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_FROM_1 == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, CUSTOMER_SHIP_TO.BUSINESS_HOURS_FROM_1);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_FROM_AM_PM_1 == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, CUSTOMER_SHIP_TO.BUSINESS_HOURS_FROM_AM_PM_1);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_TO_1 == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, CUSTOMER_SHIP_TO.BUSINESS_HOURS_TO_1);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_TO_AM_PM_1 == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, CUSTOMER_SHIP_TO.BUSINESS_HOURS_TO_AM_PM_1);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_1 == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_1);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_AM_PM_1 == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_AM_PM_1);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_1 == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_1);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_AM_PM_1 == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_AM_PM_1);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_2 == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_2);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_AM_PM_2 == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_AM_PM_2);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_2 == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_2);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_AM_PM_2 == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_AM_PM_2);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_3 == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_3);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_AM_PM_3 == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_AM_PM_3);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_3 == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(24, CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_3);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_AM_PM_3 == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_AM_PM_3);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_4 == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_4);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_AM_PM_4 == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, CUSTOMER_SHIP_TO.NO_DELIVERIES_FROM_AM_PM_4);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_4 == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_4);
}

                    if(CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_AM_PM_4 == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, CUSTOMER_SHIP_TO.NO_DELIVERIES_TO_AM_PM_4);
}

                    if(CUSTOMER_SHIP_TO.SEPARATE_OR_COMBINE_BY_PO == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(30, CUSTOMER_SHIP_TO.SEPARATE_OR_COMBINE_BY_PO);
}

                    if(CUSTOMER_SHIP_TO.PRINT_OR_EDI_STATUS == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(31, CUSTOMER_SHIP_TO.PRINT_OR_EDI_STATUS);
}

                    if(CUSTOMER_SHIP_TO.SUMMARY_REPORT == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, CUSTOMER_SHIP_TO.SUMMARY_REPORT);
}

                    if(CUSTOMER_SHIP_TO.EXTERNAL_DESIRED_NO_OF_COPIES == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, CUSTOMER_SHIP_TO.EXTERNAL_DESIRED_NO_OF_COPIES);
}

                    if(CUSTOMER_SHIP_TO.SHIPPING_DOCUMENT_OR_INVOICE == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, CUSTOMER_SHIP_TO.SHIPPING_DOCUMENT_OR_INVOICE);
}

                    if(CUSTOMER_SHIP_TO.INTERNAL_DESIRED_NO_OF_COPIES == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, CUSTOMER_SHIP_TO.INTERNAL_DESIRED_NO_OF_COPIES);
}

                    if(CUSTOMER_SHIP_TO.RESTOCK_FEE == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, CUSTOMER_SHIP_TO.RESTOCK_FEE);
}

                    if(CUSTOMER_SHIP_TO.ACCOUNT_TYPE == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(37, CUSTOMER_SHIP_TO.ACCOUNT_TYPE);
}

                    if(CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_FROM_1 == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_FROM_1);
}

                    if(CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1 == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_1);
}

                    if(CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_TO_1 == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_TO_1);
}

                    if(CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1 == null) {
pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(41, CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_TO_AM_PM_1);
}

                    if(CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_FROM_2 == null) {
pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(42, CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_FROM_2);
}

                    if(CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2 == null) {
pstmt_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(43, CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_FROM_AM_PM_2);
}

                    if(CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_TO_2 == null) {
pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(44, CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_TO_2);
}

                    if(CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2 == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, CUSTOMER_SHIP_TO.PREFFERED_DELIVERY_HOURS_TO_AM_PM_2);
}

                    if(CUSTOMER_SHIP_TO.CORPORATE_TYPE_OF_OPERATION == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, CUSTOMER_SHIP_TO.CORPORATE_TYPE_OF_OPERATION);
}

                    if(CUSTOMER_SHIP_TO.CUISINE == null) {
pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(47, CUSTOMER_SHIP_TO.CUISINE);
}

                    if(CUSTOMER_SHIP_TO.PROFILE_CREATION_DATE == null) {
pstmt_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(48, CUSTOMER_SHIP_TO.PROFILE_CREATION_DATE);
}

                    if(CUSTOMER_SHIP_TO.PROFILE_ARCHIVE_DATE == null) {
pstmt_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(49, CUSTOMER_SHIP_TO.PROFILE_ARCHIVE_DATE);
}

                    if(CUSTOMER_SHIP_TO.ITEM_OVERRIDE_CHART_ID == null) {
pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(50, CUSTOMER_SHIP_TO.ITEM_OVERRIDE_CHART_ID);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_SUBSTITUTE_TYPE == null) {
pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(51, CUSTOMER_SHIP_TO.DEFAULT_SUBSTITUTE_TYPE);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_RESTRICT_TYPE == null) {
pstmt_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(52, CUSTOMER_SHIP_TO.DEFAULT_RESTRICT_TYPE);
}

                    if(CUSTOMER_SHIP_TO.RESTRICT_OR_SUB_CHART_ID == null) {
pstmt_tDBOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(53, CUSTOMER_SHIP_TO.RESTRICT_OR_SUB_CHART_ID);
}

                    if(CUSTOMER_SHIP_TO.FORCED_SUBSTITUTION == null) {
pstmt_tDBOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(54, CUSTOMER_SHIP_TO.FORCED_SUBSTITUTION);
}

                    if(CUSTOMER_SHIP_TO.DEPARTMENTS_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(55, CUSTOMER_SHIP_TO.DEPARTMENTS_INDICATOR);
}

                    if(CUSTOMER_SHIP_TO.PARTIAL_FILL == null) {
pstmt_tDBOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(56, CUSTOMER_SHIP_TO.PARTIAL_FILL);
}

                    if(CUSTOMER_SHIP_TO.NON_PROFIT_FLAG == null) {
pstmt_tDBOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(57, CUSTOMER_SHIP_TO.NON_PROFIT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.MISCELLANEOUS_TAX_EXEMPT == null) {
pstmt_tDBOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(58, CUSTOMER_SHIP_TO.MISCELLANEOUS_TAX_EXEMPT);
}

                    if(CUSTOMER_SHIP_TO.OWNER_NAME == null) {
pstmt_tDBOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(59, CUSTOMER_SHIP_TO.OWNER_NAME);
}

                    if(CUSTOMER_SHIP_TO.TERRITORY_CODE == null) {
pstmt_tDBOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(60, CUSTOMER_SHIP_TO.TERRITORY_CODE);
}

                    if(CUSTOMER_SHIP_TO.MAIL_ADDRESS_1 == null) {
pstmt_tDBOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(61, CUSTOMER_SHIP_TO.MAIL_ADDRESS_1);
}

                    if(CUSTOMER_SHIP_TO.MAIL_ADDRESS_2 == null) {
pstmt_tDBOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(62, CUSTOMER_SHIP_TO.MAIL_ADDRESS_2);
}

                    if(CUSTOMER_SHIP_TO.MAIL_ADDRESS_3 == null) {
pstmt_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(63, CUSTOMER_SHIP_TO.MAIL_ADDRESS_3);
}

                    if(CUSTOMER_SHIP_TO.MAIL_CITY == null) {
pstmt_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(64, CUSTOMER_SHIP_TO.MAIL_CITY);
}

                    if(CUSTOMER_SHIP_TO.MAIL_STATE_CODE == null) {
pstmt_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(65, CUSTOMER_SHIP_TO.MAIL_STATE_CODE);
}

                    if(CUSTOMER_SHIP_TO.MAIL_ZIP_CODE == null) {
pstmt_tDBOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(66, CUSTOMER_SHIP_TO.MAIL_ZIP_CODE);
}

                    if(CUSTOMER_SHIP_TO.COUNTRY_CODE == null) {
pstmt_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(67, CUSTOMER_SHIP_TO.COUNTRY_CODE);
}

                    if(CUSTOMER_SHIP_TO.CENSUS_STATE_CODE == null) {
pstmt_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(68, CUSTOMER_SHIP_TO.CENSUS_STATE_CODE);
}

                    if(CUSTOMER_SHIP_TO.IMMEDIATE_ALLOC_FLAG == null) {
pstmt_tDBOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(69, CUSTOMER_SHIP_TO.IMMEDIATE_ALLOC_FLAG);
}

                    if(CUSTOMER_SHIP_TO.CUSTOMER_SHIP_TO_STATUS == null) {
pstmt_tDBOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(70, CUSTOMER_SHIP_TO.CUSTOMER_SHIP_TO_STATUS);
}

                    if(CUSTOMER_SHIP_TO.RESTRICTION_CHART_TYPE == null) {
pstmt_tDBOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(71, CUSTOMER_SHIP_TO.RESTRICTION_CHART_TYPE);
}

                    if(CUSTOMER_SHIP_TO.ITEM_OVERRIDE_CHART_TYPE == null) {
pstmt_tDBOutput_1.setNull(72, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(72, CUSTOMER_SHIP_TO.ITEM_OVERRIDE_CHART_TYPE);
}

                    if(CUSTOMER_SHIP_TO.RECORD_CHANGE_FLAG == null) {
pstmt_tDBOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(73, CUSTOMER_SHIP_TO.RECORD_CHANGE_FLAG);
}

                    if(CUSTOMER_SHIP_TO.ORDERS_PLACED_FLAG == null) {
pstmt_tDBOutput_1.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(74, CUSTOMER_SHIP_TO.ORDERS_PLACED_FLAG);
}

                    if(CUSTOMER_SHIP_TO.ASSIGN_CODES_BY_DEPT == null) {
pstmt_tDBOutput_1.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(75, CUSTOMER_SHIP_TO.ASSIGN_CODES_BY_DEPT);
}

                    if(CUSTOMER_SHIP_TO.VENDOR_NO == null) {
pstmt_tDBOutput_1.setNull(76, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(76, CUSTOMER_SHIP_TO.VENDOR_NO);
}

                    if(CUSTOMER_SHIP_TO.VENDOR_SUFFIX == null) {
pstmt_tDBOutput_1.setNull(77, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(77, CUSTOMER_SHIP_TO.VENDOR_SUFFIX);
}

                    if(CUSTOMER_SHIP_TO.RECORD_TYPE_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(78, CUSTOMER_SHIP_TO.RECORD_TYPE_INDICATOR);
}

                    if(CUSTOMER_SHIP_TO.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_1.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(79, CUSTOMER_SHIP_TO.PURCHASE_ORDER_NO);
}

                    if(CUSTOMER_SHIP_TO.CUSTOMER_COMMODITY_CODE == null) {
pstmt_tDBOutput_1.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(80, CUSTOMER_SHIP_TO.CUSTOMER_COMMODITY_CODE);
}

                    if(CUSTOMER_SHIP_TO.PREVIOUS_STATUS == null) {
pstmt_tDBOutput_1.setNull(81, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(81, CUSTOMER_SHIP_TO.PREVIOUS_STATUS);
}

                    if(CUSTOMER_SHIP_TO.PAYMENT_TERMS_CODE == null) {
pstmt_tDBOutput_1.setNull(82, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(82, CUSTOMER_SHIP_TO.PAYMENT_TERMS_CODE);
}

                    if(CUSTOMER_SHIP_TO.PERSONAL_GURANTEE_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(83, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(83, CUSTOMER_SHIP_TO.PERSONAL_GURANTEE_INDICATOR);
}

                    if(CUSTOMER_SHIP_TO.PERSONAL_GURANTEE_EXPIRATION_DATE == null) {
pstmt_tDBOutput_1.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(84, CUSTOMER_SHIP_TO.PERSONAL_GURANTEE_EXPIRATION_DATE);
}

                    if(CUSTOMER_SHIP_TO.PERSONAL_GURANTEE_TASK_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(85, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(85, CUSTOMER_SHIP_TO.PERSONAL_GURANTEE_TASK_INDICATOR);
}

                    if(CUSTOMER_SHIP_TO.SALES_TAX_LAST_REVIEW_DATE == null) {
pstmt_tDBOutput_1.setNull(86, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(86, CUSTOMER_SHIP_TO.SALES_TAX_LAST_REVIEW_DATE);
}

                    if(CUSTOMER_SHIP_TO.SALES_TAX_REVIEW_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(87, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(87, CUSTOMER_SHIP_TO.SALES_TAX_REVIEW_INDICATOR);
}

                    if(CUSTOMER_SHIP_TO.LOCAL_TYPE_OF_OPERATION == null) {
pstmt_tDBOutput_1.setNull(88, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(88, CUSTOMER_SHIP_TO.LOCAL_TYPE_OF_OPERATION);
}

                    if(CUSTOMER_SHIP_TO.PO_NO_EXPIRATION_DATE == null) {
pstmt_tDBOutput_1.setNull(89, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(89, CUSTOMER_SHIP_TO.PO_NO_EXPIRATION_DATE);
}

                    if(CUSTOMER_SHIP_TO.PO_NO_TASK_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(90, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(90, CUSTOMER_SHIP_TO.PO_NO_TASK_INDICATOR);
}

                    if(CUSTOMER_SHIP_TO.AUDIT_SEQUENCE_NO == null) {
pstmt_tDBOutput_1.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(91, CUSTOMER_SHIP_TO.AUDIT_SEQUENCE_NO);
}

                    if(CUSTOMER_SHIP_TO.SEQUENCE_CHART_IDENTIFIER == null) {
pstmt_tDBOutput_1.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(92, CUSTOMER_SHIP_TO.SEQUENCE_CHART_IDENTIFIER);
}

                    if(CUSTOMER_SHIP_TO.STOP_DATE == null) {
pstmt_tDBOutput_1.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(93, CUSTOMER_SHIP_TO.STOP_DATE);
}

                    if(CUSTOMER_SHIP_TO.SEQUENCE_CHART_TYPE == null) {
pstmt_tDBOutput_1.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(94, CUSTOMER_SHIP_TO.SEQUENCE_CHART_TYPE);
}

                    if(CUSTOMER_SHIP_TO.STOP_COUNTER == null) {
pstmt_tDBOutput_1.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(95, CUSTOMER_SHIP_TO.STOP_COUNTER);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_MONDAY == null) {
pstmt_tDBOutput_1.setNull(96, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(96, CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_MONDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_TUESDAY == null) {
pstmt_tDBOutput_1.setNull(97, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(97, CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_TUESDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY == null) {
pstmt_tDBOutput_1.setNull(98, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(98, CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_WEDNESDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_THURSDAY == null) {
pstmt_tDBOutput_1.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(99, CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_THURSDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_FRIDAY == null) {
pstmt_tDBOutput_1.setNull(100, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(100, CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_FRIDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_SATURDAY == null) {
pstmt_tDBOutput_1.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(101, CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_SATURDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_SUNDAY == null) {
pstmt_tDBOutput_1.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(102, CUSTOMER_SHIP_TO.DEFAULT_PICKING_TIME_ZONE_SUNDAY);
}

                    if(CUSTOMER_SHIP_TO.OTHER_CONTACT_NAME == null) {
pstmt_tDBOutput_1.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(103, CUSTOMER_SHIP_TO.OTHER_CONTACT_NAME);
}

                    if(CUSTOMER_SHIP_TO.MAIL_ADDRESS_NAME == null) {
pstmt_tDBOutput_1.setNull(104, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(104, CUSTOMER_SHIP_TO.MAIL_ADDRESS_NAME);
}

                    if(CUSTOMER_SHIP_TO.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(105, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(105, CUSTOMER_SHIP_TO.RESTRICTION_OR_SUBSTITUTIONS_CHART_ORIGIN);
}

                    if(CUSTOMER_SHIP_TO.ITEM_OVERRIDES_CHART_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(106, CUSTOMER_SHIP_TO.ITEM_OVERRIDES_CHART_ORIGIN);
}

                    if(CUSTOMER_SHIP_TO.SEQUENCE_CHART_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(107, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(107, CUSTOMER_SHIP_TO.SEQUENCE_CHART_ORIGIN);
}

                    if(CUSTOMER_SHIP_TO.PENDING_TERMS_APPROVAL == null) {
pstmt_tDBOutput_1.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(108, CUSTOMER_SHIP_TO.PENDING_TERMS_APPROVAL);
}

                    if(CUSTOMER_SHIP_TO.DESIGNATED_DELIVERY_DAYS_1 == null) {
pstmt_tDBOutput_1.setNull(109, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(109, CUSTOMER_SHIP_TO.DESIGNATED_DELIVERY_DAYS_1);
}

                    if(CUSTOMER_SHIP_TO.DESIGNATED_SALESMAN_CALL_DAYS == null) {
pstmt_tDBOutput_1.setNull(110, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(110, CUSTOMER_SHIP_TO.DESIGNATED_SALESMAN_CALL_DAYS);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_DAYS_1 == null) {
pstmt_tDBOutput_1.setNull(111, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(111, CUSTOMER_SHIP_TO.BUSINESS_HOURS_DAYS_1);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_DAYS_2 == null) {
pstmt_tDBOutput_1.setNull(112, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(112, CUSTOMER_SHIP_TO.BUSINESS_HOURS_DAYS_2);
}

                    if(CUSTOMER_SHIP_TO.TAX_AUTHORITY_NO == null) {
pstmt_tDBOutput_1.setNull(113, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(113, CUSTOMER_SHIP_TO.TAX_AUTHORITY_NO);
}

                    if(CUSTOMER_SHIP_TO.PRICE_RULE_NAME == null) {
pstmt_tDBOutput_1.setNull(114, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(114, CUSTOMER_SHIP_TO.PRICE_RULE_NAME);
}

                    if(CUSTOMER_SHIP_TO.STOP_CODE == null) {
pstmt_tDBOutput_1.setNull(115, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(115, CUSTOMER_SHIP_TO.STOP_CODE);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_FROM_2 == null) {
pstmt_tDBOutput_1.setNull(116, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(116, CUSTOMER_SHIP_TO.BUSINESS_HOURS_FROM_2);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_FROM_AM_PM_2 == null) {
pstmt_tDBOutput_1.setNull(117, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(117, CUSTOMER_SHIP_TO.BUSINESS_HOURS_FROM_AM_PM_2);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_TO_2 == null) {
pstmt_tDBOutput_1.setNull(118, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(118, CUSTOMER_SHIP_TO.BUSINESS_HOURS_TO_2);
}

                    if(CUSTOMER_SHIP_TO.BUSINESS_HOURS_TO_AM_PM_2 == null) {
pstmt_tDBOutput_1.setNull(119, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(119, CUSTOMER_SHIP_TO.BUSINESS_HOURS_TO_AM_PM_2);
}

                    if(CUSTOMER_SHIP_TO.TERRITORY_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_1.setNull(120, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(120, CUSTOMER_SHIP_TO.TERRITORY_OVERRIDE_FLAG);
}

                    if(CUSTOMER_SHIP_TO.TAX_EXEMPT_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(121, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(121, CUSTOMER_SHIP_TO.TAX_EXEMPT_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.RESTOCK_FEE_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(122, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(122, CUSTOMER_SHIP_TO.RESTOCK_FEE_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.CREDIT_STOP_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(123, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(123, CUSTOMER_SHIP_TO.CREDIT_STOP_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(124, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(124, CUSTOMER_SHIP_TO.ALLOC_INVENTORY_IMMEDIATE_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.APPLICATION_RULE_NAME == null) {
pstmt_tDBOutput_1.setNull(125, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(125, CUSTOMER_SHIP_TO.APPLICATION_RULE_NAME);
}

                    if(CUSTOMER_SHIP_TO.SUBSTITUTION_RULE_NAME == null) {
pstmt_tDBOutput_1.setNull(126, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(126, CUSTOMER_SHIP_TO.SUBSTITUTION_RULE_NAME);
}

                    if(CUSTOMER_SHIP_TO.MINIMUM_RULE_NAME == null) {
pstmt_tDBOutput_1.setNull(127, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(127, CUSTOMER_SHIP_TO.MINIMUM_RULE_NAME);
}

                    if(CUSTOMER_SHIP_TO.MAXIMUM_RULE_NAME == null) {
pstmt_tDBOutput_1.setNull(128, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(128, CUSTOMER_SHIP_TO.MAXIMUM_RULE_NAME);
}

                    if(CUSTOMER_SHIP_TO.COMMISSION_BASE_RULE_NAME == null) {
pstmt_tDBOutput_1.setNull(129, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(129, CUSTOMER_SHIP_TO.COMMISSION_BASE_RULE_NAME);
}

                    if(CUSTOMER_SHIP_TO.HAND_PRICE_RESTRICTION_RULE_NAME == null) {
pstmt_tDBOutput_1.setNull(130, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(130, CUSTOMER_SHIP_TO.HAND_PRICE_RESTRICTION_RULE_NAME);
}

                    pstmt_tDBOutput_1.setBigDecimal(131, CUSTOMER_SHIP_TO.ESTIMATED_MARKET_SHARE);

                    pstmt_tDBOutput_1.setBigDecimal(132, CUSTOMER_SHIP_TO.ESTIMATED_WEEKLY_MARKET_POTENTIAL);

                    if(CUSTOMER_SHIP_TO.TAX_EXEMPT_EXPIRATION_DATE == null) {
pstmt_tDBOutput_1.setNull(133, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(133, CUSTOMER_SHIP_TO.TAX_EXEMPT_EXPIRATION_DATE);
}

                    if(CUSTOMER_SHIP_TO.TAX_EXEMPT_FLAG == null) {
pstmt_tDBOutput_1.setNull(134, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(134, CUSTOMER_SHIP_TO.TAX_EXEMPT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.REACTIVATION_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(135, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(135, CUSTOMER_SHIP_TO.REACTIVATION_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.AGING_POLICY_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(136, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(136, CUSTOMER_SHIP_TO.AGING_POLICY_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.DISCOUNT_GRACE_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(137, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(137, CUSTOMER_SHIP_TO.DISCOUNT_GRACE_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.NET_DUE_GRACE_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(138, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(138, CUSTOMER_SHIP_TO.NET_DUE_GRACE_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.MSP_TARGET_CUSTOMER_SPECIFICATIONS == null) {
pstmt_tDBOutput_1.setNull(139, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(139, CUSTOMER_SHIP_TO.MSP_TARGET_CUSTOMER_SPECIFICATIONS);
}

                    if(CUSTOMER_SHIP_TO.ACTIVE_OR_INACTIVE_APPROVAL_PENDING == null) {
pstmt_tDBOutput_1.setNull(140, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(140, CUSTOMER_SHIP_TO.ACTIVE_OR_INACTIVE_APPROVAL_PENDING);
}

                    if(CUSTOMER_SHIP_TO.CUSTOMER_ENTITY_TYPE == null) {
pstmt_tDBOutput_1.setNull(141, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(141, CUSTOMER_SHIP_TO.CUSTOMER_ENTITY_TYPE);
}

                    if(CUSTOMER_SHIP_TO.STATE == null) {
pstmt_tDBOutput_1.setNull(142, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(142, CUSTOMER_SHIP_TO.STATE);
}

                    if(CUSTOMER_SHIP_TO.COMMODITY_FLAG == null) {
pstmt_tDBOutput_1.setNull(143, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(143, CUSTOMER_SHIP_TO.COMMODITY_FLAG);
}

                    if(CUSTOMER_SHIP_TO.NO_OF_OPEN_ORDERS == null) {
pstmt_tDBOutput_1.setNull(144, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(144, CUSTOMER_SHIP_TO.NO_OF_OPEN_ORDERS);
}

                    pstmt_tDBOutput_1.setBigDecimal(145, CUSTOMER_SHIP_TO.OPEN_ORDER_AMOUNT);

                    if(CUSTOMER_SHIP_TO.KOSHER_CUSTOMER == null) {
pstmt_tDBOutput_1.setNull(146, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(146, CUSTOMER_SHIP_TO.KOSHER_CUSTOMER);
}

                    if(CUSTOMER_SHIP_TO.LAPTOP_ZID_NO == null) {
pstmt_tDBOutput_1.setNull(147, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(147, CUSTOMER_SHIP_TO.LAPTOP_ZID_NO);
}

                    if(CUSTOMER_SHIP_TO.SYSCO_SALES_COMPANION == null) {
pstmt_tDBOutput_1.setNull(148, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(148, CUSTOMER_SHIP_TO.SYSCO_SALES_COMPANION);
}

                    if(CUSTOMER_SHIP_TO.OFF_STOP_DATE == null) {
pstmt_tDBOutput_1.setNull(149, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(149, CUSTOMER_SHIP_TO.OFF_STOP_DATE);
}

                    if(CUSTOMER_SHIP_TO.LAPTOP_USER_FLAG == null) {
pstmt_tDBOutput_1.setNull(150, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(150, CUSTOMER_SHIP_TO.LAPTOP_USER_FLAG);
}

                    if(CUSTOMER_SHIP_TO.THIRD_PARTY_CUSTOMER_FLAG == null) {
pstmt_tDBOutput_1.setNull(151, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(151, CUSTOMER_SHIP_TO.THIRD_PARTY_CUSTOMER_FLAG);
}

                    if(CUSTOMER_SHIP_TO.CREDIT_HIERARCHY_MASTER_COMPANY == null) {
pstmt_tDBOutput_1.setNull(152, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(152, CUSTOMER_SHIP_TO.CREDIT_HIERARCHY_MASTER_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.CREDIT_HIERARCHY_MASTER_COMPANY_NO == null) {
pstmt_tDBOutput_1.setNull(153, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(153, CUSTOMER_SHIP_TO.CREDIT_HIERARCHY_MASTER_COMPANY_NO);
}

                    if(CUSTOMER_SHIP_TO.SHIP_AVAILABLE_FLAG == null) {
pstmt_tDBOutput_1.setNull(154, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(154, CUSTOMER_SHIP_TO.SHIP_AVAILABLE_FLAG);
}

                    if(CUSTOMER_SHIP_TO.MAPSCO_MAP_CODE == null) {
pstmt_tDBOutput_1.setNull(155, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(155, CUSTOMER_SHIP_TO.MAPSCO_MAP_CODE);
}

                    if(CUSTOMER_SHIP_TO.APPLICATION_RULE_DEFAULT_FLAG == null) {
pstmt_tDBOutput_1.setNull(156, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(156, CUSTOMER_SHIP_TO.APPLICATION_RULE_DEFAULT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.PRICE_RULE_DEFAULT_FLAG == null) {
pstmt_tDBOutput_1.setNull(157, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(157, CUSTOMER_SHIP_TO.PRICE_RULE_DEFAULT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.SUBSTITUTION_RULE_DEFAULT_FLAG == null) {
pstmt_tDBOutput_1.setNull(158, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(158, CUSTOMER_SHIP_TO.SUBSTITUTION_RULE_DEFAULT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.MINIMUM_RULE_DEFAULT_FLAG == null) {
pstmt_tDBOutput_1.setNull(159, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(159, CUSTOMER_SHIP_TO.MINIMUM_RULE_DEFAULT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.MAXIMUM_RULE_DEFAULT_FLAG == null) {
pstmt_tDBOutput_1.setNull(160, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(160, CUSTOMER_SHIP_TO.MAXIMUM_RULE_DEFAULT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.COMMISSION_BASE_RULE_DEFAULT_FLAG == null) {
pstmt_tDBOutput_1.setNull(161, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(161, CUSTOMER_SHIP_TO.COMMISSION_BASE_RULE_DEFAULT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.HAND_PRICE_RULE_DEFAULT_FLAG == null) {
pstmt_tDBOutput_1.setNull(162, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(162, CUSTOMER_SHIP_TO.HAND_PRICE_RULE_DEFAULT_FLAG);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_ROUTE_MONDAY == null) {
pstmt_tDBOutput_1.setNull(163, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(163, CUSTOMER_SHIP_TO.DEFAULT_ROUTE_MONDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_ROUTE_TUESDAY == null) {
pstmt_tDBOutput_1.setNull(164, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(164, CUSTOMER_SHIP_TO.DEFAULT_ROUTE_TUESDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_ROUTE_WEDNESDAY == null) {
pstmt_tDBOutput_1.setNull(165, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(165, CUSTOMER_SHIP_TO.DEFAULT_ROUTE_WEDNESDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_ROUTE_THURSDAY == null) {
pstmt_tDBOutput_1.setNull(166, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(166, CUSTOMER_SHIP_TO.DEFAULT_ROUTE_THURSDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_ROUTE_FRIDAY == null) {
pstmt_tDBOutput_1.setNull(167, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(167, CUSTOMER_SHIP_TO.DEFAULT_ROUTE_FRIDAY);
}

                    if(CUSTOMER_SHIP_TO.DEFAULT_ROUTE_SATURDAY == null) {
pstmt_tDBOutput_1.setNull(168, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(168, CUSTOMER_SHIP_TO.DEFAULT_ROUTE_SATURDAY);
}

                    if(CUSTOMER_SHIP_TO.LATITUDE_COORDINATES == null) {
pstmt_tDBOutput_1.setNull(169, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(169, CUSTOMER_SHIP_TO.LATITUDE_COORDINATES);
}

                    if(CUSTOMER_SHIP_TO.LONGITUDE_COORDINATES == null) {
pstmt_tDBOutput_1.setNull(170, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(170, CUSTOMER_SHIP_TO.LONGITUDE_COORDINATES);
}

                    if(CUSTOMER_SHIP_TO.FREQUENCY_DOWNLOAD == null) {
pstmt_tDBOutput_1.setNull(171, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(171, CUSTOMER_SHIP_TO.FREQUENCY_DOWNLOAD);
}

                    if(CUSTOMER_SHIP_TO.FREQUENCY_CODE == null) {
pstmt_tDBOutput_1.setNull(172, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(172, CUSTOMER_SHIP_TO.FREQUENCY_CODE);
}

                    if(CUSTOMER_SHIP_TO.LAPTOP_EXCEPTION_LEVEL == null) {
pstmt_tDBOutput_1.setNull(173, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(173, CUSTOMER_SHIP_TO.LAPTOP_EXCEPTION_LEVEL);
}

                    if(CUSTOMER_SHIP_TO.THIRD_PARTY_OG_OPTIONS == null) {
pstmt_tDBOutput_1.setNull(174, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(174, CUSTOMER_SHIP_TO.THIRD_PARTY_OG_OPTIONS);
}

                    if(CUSTOMER_SHIP_TO.SERVICE_CHARGE == null) {
pstmt_tDBOutput_1.setNull(175, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(175, CUSTOMER_SHIP_TO.SERVICE_CHARGE);
}

                    if(CUSTOMER_SHIP_TO.PRIMARY_SHIP_TO == null) {
pstmt_tDBOutput_1.setNull(176, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(176, CUSTOMER_SHIP_TO.PRIMARY_SHIP_TO);
}

                    if(CUSTOMER_SHIP_TO.DELIVERY_DIFFICULTY_RATING == null) {
pstmt_tDBOutput_1.setNull(177, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(177, CUSTOMER_SHIP_TO.DELIVERY_DIFFICULTY_RATING);
}

                    if(CUSTOMER_SHIP_TO.BILL_TO_CORP_PRICING_PARENT_COMPANY == null) {
pstmt_tDBOutput_1.setNull(178, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(178, CUSTOMER_SHIP_TO.BILL_TO_CORP_PRICING_PARENT_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.BILL_TO_CORP_PRICING_PARENT == null) {
pstmt_tDBOutput_1.setNull(179, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(179, CUSTOMER_SHIP_TO.BILL_TO_CORP_PRICING_PARENT);
}

                    if(CUSTOMER_SHIP_TO.CORP_HIERARCHY_MASTER_COMPANY == null) {
pstmt_tDBOutput_1.setNull(180, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(180, CUSTOMER_SHIP_TO.CORP_HIERARCHY_MASTER_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.CORP_HIERARCHY_MASTER == null) {
pstmt_tDBOutput_1.setNull(181, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(181, CUSTOMER_SHIP_TO.CORP_HIERARCHY_MASTER);
}

                    if(CUSTOMER_SHIP_TO.LOCATION_ID == null) {
pstmt_tDBOutput_1.setNull(182, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(182, CUSTOMER_SHIP_TO.LOCATION_ID);
}

                    if(CUSTOMER_SHIP_TO.PRICE_RULE_SRC_COMPANY == null) {
pstmt_tDBOutput_1.setNull(183, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(183, CUSTOMER_SHIP_TO.PRICE_RULE_SRC_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.APPLICATION_RULE_SRC_COMPANY == null) {
pstmt_tDBOutput_1.setNull(184, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(184, CUSTOMER_SHIP_TO.APPLICATION_RULE_SRC_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.SUBSTITUTE_RULE_SRC_COMPANY == null) {
pstmt_tDBOutput_1.setNull(185, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(185, CUSTOMER_SHIP_TO.SUBSTITUTE_RULE_SRC_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.MINIMUM_RULE_SRC_COMPANY == null) {
pstmt_tDBOutput_1.setNull(186, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(186, CUSTOMER_SHIP_TO.MINIMUM_RULE_SRC_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.MAXIMUM_RULE_SRC_COMPANY == null) {
pstmt_tDBOutput_1.setNull(187, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(187, CUSTOMER_SHIP_TO.MAXIMUM_RULE_SRC_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.COMMISSION_BASE_RULE_SRC_COMPANY == null) {
pstmt_tDBOutput_1.setNull(188, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(188, CUSTOMER_SHIP_TO.COMMISSION_BASE_RULE_SRC_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.HAND_PRICE_REST_RULE_SRC_COMPANY == null) {
pstmt_tDBOutput_1.setNull(189, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(189, CUSTOMER_SHIP_TO.HAND_PRICE_REST_RULE_SRC_COMPANY);
}

                    if(CUSTOMER_SHIP_TO.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(190, new java.sql.Timestamp(CUSTOMER_SHIP_TO.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(190, java.sql.Types.TIMESTAMP);
}

                    if(CUSTOMER_SHIP_TO.CREATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(191, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(191, CUSTOMER_SHIP_TO.CREATED_USER_ID);
}

                    if(CUSTOMER_SHIP_TO.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(192, new java.sql.Timestamp(CUSTOMER_SHIP_TO.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(192, java.sql.Types.TIMESTAMP);
}

                    if(CUSTOMER_SHIP_TO.UPDATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(193, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(193, CUSTOMER_SHIP_TO.UPDATED_USER_ID);
}

                    if(CUSTOMER_SHIP_TO.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_1.setNull(194, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(194, CUSTOMER_SHIP_TO.UPDATED_PROGRAM_ID);
}

                    pstmt_tDBOutput_1.setBoolean(195, CUSTOMER_SHIP_TO.IS_DELETED);

                    if(CUSTOMER_SHIP_TO.CREATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(196, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(196, CUSTOMER_SHIP_TO.CREATED_ORIGIN);
}

                    if(CUSTOMER_SHIP_TO.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(197, new java.sql.Timestamp(CUSTOMER_SHIP_TO.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(197, java.sql.Types.TIMESTAMP);
}

                    if(CUSTOMER_SHIP_TO.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(198, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(198, CUSTOMER_SHIP_TO.UPDATED_ORIGIN);
}

                    if(CUSTOMER_SHIP_TO.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(199, new java.sql.Timestamp(CUSTOMER_SHIP_TO.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(199, java.sql.Types.TIMESTAMP);
}

                    if(CUSTOMER_SHIP_TO.JOPF_SVOP == null) {
pstmt_tDBOutput_1.setNull(200, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(200, CUSTOMER_SHIP_TO.JOPF_SVOP);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Adding the record ")  + (nb_line_tDBOutput_1)  + (" to the ")  + ("INSERT")  + (" batch.") );
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
            	    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "CUSTOMER_SHIP_TO"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
	    		log.debug("tDBInput_1 - Closing the connection to the database.");
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	    		log.debug("tDBInput_1 - Connection to the database closed.");
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
	    		log.debug("tDBInput_1 - Retrieved records count: "+nb_line_tDBInput_1 + " .");
			

 
                if(log.isDebugEnabled())
            log.debug("tDBInput_1 - "  + ("Done.") );

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_1", end_Hash.get("tDBInput_1")-start_Hash.get("tDBInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      
				log.debug("tMap_1 - Written records count in the table 'CUSTOMER_SHIP_TO': " + count_CUSTOMER_SHIP_TO_tMap_1 + ".");





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tMap_1 - "  + ("Done.") );

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Executing the ")  + ("INSERT")  + (" batch.") );
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("The ")  + ("INSERT")  + (" batch execution has succeeded.") );
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
            log.error("tDBOutput_1 - "  + (errormessage_tDBOutput_1) );
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection starting to commit ")  + (rowsToCommitCount_tDBOutput_1)  + (" record(s).") );
			}
			conn_tDBOutput_1.commit();
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection commit has succeeded.") );
				rowsToCommitCount_tDBOutput_1 = 0;
			}
			commitCounter_tDBOutput_1 = 0;
		
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
    	conn_tDBOutput_1 .close();
    	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Has ")  + ("inserted")  + (" ")  + (nb_line_inserted_tDBOutput_1)  + (" record(s).") );


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CUSTOMER_SHIP_TO");
			  	}
			  	
 
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Done.") );

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_1", end_Hash.get("tDBOutput_1")-start_Hash.get("tDBOutput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				    if(!(e instanceof TalendException)){
					   log.fatal(currentComponent + " " + e.getMessage(),e);
					}
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Closing the connection to the database.") );
                    ctn_tDBOutput_1.close();
                if(log.isDebugEnabled())
            log.debug("tDBOutput_1 - "  + ("Connection to the database has closed.") );
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
            log.error("tDBOutput_1 - "  + (errorMessage_tDBOutput_1) );
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Customer_Ship_To_Inbound Customer_Ship_To_InboundClass = new Customer_Ship_To_Inbound();

        int exitCode = Customer_Ship_To_InboundClass.runJobInTOS(args);
	        if(exitCode==0){
		        log.info("TalendJob: 'Customer_Ship_To_Inbound' - Done.");
	        }

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

	        if(!"".equals(log4jLevel)){
	        	
				
				
				if("trace".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.TRACE);
				}else if("debug".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.DEBUG);
				}else if("info".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.INFO);
				}else if("warn".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.WARN);
				}else if("error".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.ERROR);
				}else if("fatal".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.FATAL);
				}else if ("off".equalsIgnoreCase(log4jLevel)){
					org.apache.logging.log4j.core.config.Configurator.setLevel(log.getName(), org.apache.logging.log4j.Level.OFF);
				}
				org.apache.logging.log4j.core.config.Configurator.setLevel(org.apache.logging.log4j.LogManager.getRootLogger().getName(), log.getLevel());
				
    	    }
        	log.info("TalendJob: 'Customer_Ship_To_Inbound' - Start.");
    	
    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Customer_Ship_To_Inbound.class.getClassLoader().getResourceAsStream("sus_sli_etl/customer_ship_to_inbound_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Customer_Ship_To_Inbound.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("opco", "id_String");
                        if(context.getStringValue("opco") == null) {
                            context.opco = null;
                        } else {
                            context.opco=(String) context.getProperty("opco");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("sopco", "id_String");
                        if(context.getStringValue("sopco") == null) {
                            context.sopco = null;
                        } else {
                            context.sopco=(String) context.getProperty("sopco");
                        }
                        context.setContextType("svop", "id_String");
                        if(context.getStringValue("svop") == null) {
                            context.svop = null;
                        } else {
                            context.svop=(String) context.getProperty("svop");
                        }
                        context.setContextType("GIM_AdditionalParams", "id_String");
                        if(context.getStringValue("GIM_AdditionalParams") == null) {
                            context.GIM_AdditionalParams = null;
                        } else {
                            context.GIM_AdditionalParams=(String) context.getProperty("GIM_AdditionalParams");
                        }
                        context.setContextType("GIM_Database", "id_String");
                        if(context.getStringValue("GIM_Database") == null) {
                            context.GIM_Database = null;
                        } else {
                            context.GIM_Database=(String) context.getProperty("GIM_Database");
                        }
                        context.setContextType("GIM_Login", "id_String");
                        if(context.getStringValue("GIM_Login") == null) {
                            context.GIM_Login = null;
                        } else {
                            context.GIM_Login=(String) context.getProperty("GIM_Login");
                        }
                        context.setContextType("GIM_Password", "id_Password");
                        if(context.getStringValue("GIM_Password") == null) {
                            context.GIM_Password = null;
                        } else {
                            String pwd_GIM_Password_value = context.getProperty("GIM_Password");
                            context.GIM_Password = null;
                            if(pwd_GIM_Password_value!=null) {
                                if(context_param.containsKey("GIM_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.GIM_Password = pwd_GIM_Password_value;
                                } else if (!pwd_GIM_Password_value.isEmpty()) {
                                    try {
                                        context.GIM_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_GIM_Password_value);
                                        context.put("GIM_Password",context.GIM_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("GIM_Port", "id_String");
                        if(context.getStringValue("GIM_Port") == null) {
                            context.GIM_Port = null;
                        } else {
                            context.GIM_Port=(String) context.getProperty("GIM_Port");
                        }
                        context.setContextType("GIM_Schema_Migrating_Test", "id_String");
                        if(context.getStringValue("GIM_Schema_Migrating_Test") == null) {
                            context.GIM_Schema_Migrating_Test = null;
                        } else {
                            context.GIM_Schema_Migrating_Test=(String) context.getProperty("GIM_Schema_Migrating_Test");
                        }
                        context.setContextType("GIM_Server", "id_String");
                        if(context.getStringValue("GIM_Server") == null) {
                            context.GIM_Server = null;
                        } else {
                            context.GIM_Server=(String) context.getProperty("GIM_Server");
                        }
                        context.setContextType("SUS_Additional_Params", "id_String");
                        if(context.getStringValue("SUS_Additional_Params") == null) {
                            context.SUS_Additional_Params = null;
                        } else {
                            context.SUS_Additional_Params=(String) context.getProperty("SUS_Additional_Params");
                        }
                        context.setContextType("SUS_Database", "id_String");
                        if(context.getStringValue("SUS_Database") == null) {
                            context.SUS_Database = null;
                        } else {
                            context.SUS_Database=(String) context.getProperty("SUS_Database");
                        }
                        context.setContextType("SUS_Login", "id_String");
                        if(context.getStringValue("SUS_Login") == null) {
                            context.SUS_Login = null;
                        } else {
                            context.SUS_Login=(String) context.getProperty("SUS_Login");
                        }
                        context.setContextType("SUS_Password", "id_Password");
                        if(context.getStringValue("SUS_Password") == null) {
                            context.SUS_Password = null;
                        } else {
                            String pwd_SUS_Password_value = context.getProperty("SUS_Password");
                            context.SUS_Password = null;
                            if(pwd_SUS_Password_value!=null) {
                                if(context_param.containsKey("SUS_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SUS_Password = pwd_SUS_Password_value;
                                } else if (!pwd_SUS_Password_value.isEmpty()) {
                                    try {
                                        context.SUS_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SUS_Password_value);
                                        context.put("SUS_Password",context.SUS_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SUS_Server", "id_String");
                        if(context.getStringValue("SUS_Server") == null) {
                            context.SUS_Server = null;
                        } else {
                            context.SUS_Server=(String) context.getProperty("SUS_Server");
                        }
                        context.setContextType("GIM_Schema_Master", "id_String");
                        if(context.getStringValue("GIM_Schema_Master") == null) {
                            context.GIM_Schema_Master = null;
                        } else {
                            context.GIM_Schema_Master=(String) context.getProperty("GIM_Schema_Master");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("opco")) {
                context.opco = (String) parentContextMap.get("opco");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("sopco")) {
                context.sopco = (String) parentContextMap.get("sopco");
            }if (parentContextMap.containsKey("svop")) {
                context.svop = (String) parentContextMap.get("svop");
            }if (parentContextMap.containsKey("GIM_AdditionalParams")) {
                context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
            }if (parentContextMap.containsKey("GIM_Database")) {
                context.GIM_Database = (String) parentContextMap.get("GIM_Database");
            }if (parentContextMap.containsKey("GIM_Login")) {
                context.GIM_Login = (String) parentContextMap.get("GIM_Login");
            }if (parentContextMap.containsKey("GIM_Password")) {
                context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
            }if (parentContextMap.containsKey("GIM_Port")) {
                context.GIM_Port = (String) parentContextMap.get("GIM_Port");
            }if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
                context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
            }if (parentContextMap.containsKey("GIM_Server")) {
                context.GIM_Server = (String) parentContextMap.get("GIM_Server");
            }if (parentContextMap.containsKey("SUS_Additional_Params")) {
                context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
            }if (parentContextMap.containsKey("SUS_Database")) {
                context.SUS_Database = (String) parentContextMap.get("SUS_Database");
            }if (parentContextMap.containsKey("SUS_Login")) {
                context.SUS_Login = (String) parentContextMap.get("SUS_Login");
            }if (parentContextMap.containsKey("SUS_Password")) {
                context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
            }if (parentContextMap.containsKey("SUS_Server")) {
                context.SUS_Server = (String) parentContextMap.get("SUS_Server");
            }if (parentContextMap.containsKey("GIM_Schema_Master")) {
                context.GIM_Schema_Master = (String) parentContextMap.get("GIM_Schema_Master");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("GIM_Password");
			parametersToEncrypt.add("SUS_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Customer_Ship_To_Inbound");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     647283 characters generated by Talend Open Studio for Data Integration 
 *     on the October 28, 2022 at 10:57:55 AM IST
 ************************************************************************************************/