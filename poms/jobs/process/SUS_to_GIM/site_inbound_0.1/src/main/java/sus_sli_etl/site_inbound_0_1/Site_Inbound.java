// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sus_sli_etl.site_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: Site_Inbound Purpose: Migrating data from referp to SITE<br>
 * Description: Migrating data from referp to SITE <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Site_Inbound implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (SUS_Login != null) {

				this.setProperty("SUS_Login", SUS_Login.toString());

			}

			if (SUS_Password != null) {

				this.setProperty("SUS_Password", SUS_Password.toString());

			}

			if (SUS_Database != null) {

				this.setProperty("SUS_Database", SUS_Database.toString());

			}

			if (SUS_Server != null) {

				this.setProperty("SUS_Server", SUS_Server.toString());

			}

			if (SUS_Additional_Params != null) {

				this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());

			}

			if (GIM_AdditionalParams != null) {

				this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());

			}

			if (GIM_Password != null) {

				this.setProperty("GIM_Password", GIM_Password.toString());

			}

			if (GIM_Server != null) {

				this.setProperty("GIM_Server", GIM_Server.toString());

			}

			if (GIM_Database != null) {

				this.setProperty("GIM_Database", GIM_Database.toString());

			}

			if (GIM_Port != null) {

				this.setProperty("GIM_Port", GIM_Port.toString());

			}

			if (GIM_Schema_Master != null) {

				this.setProperty("GIM_Schema_Master", GIM_Schema_Master.toString());

			}

			if (GIM_Login != null) {

				this.setProperty("GIM_Login", GIM_Login.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String SUS_Login;

		public String getSUS_Login() {
			return this.SUS_Login;
		}

		public java.lang.String SUS_Password;

		public java.lang.String getSUS_Password() {
			return this.SUS_Password;
		}

		public String SUS_Database;

		public String getSUS_Database() {
			return this.SUS_Database;
		}

		public String SUS_Server;

		public String getSUS_Server() {
			return this.SUS_Server;
		}

		public String SUS_Additional_Params;

		public String getSUS_Additional_Params() {
			return this.SUS_Additional_Params;
		}

		public String GIM_AdditionalParams;

		public String getGIM_AdditionalParams() {
			return this.GIM_AdditionalParams;
		}

		public java.lang.String GIM_Password;

		public java.lang.String getGIM_Password() {
			return this.GIM_Password;
		}

		public String GIM_Server;

		public String getGIM_Server() {
			return this.GIM_Server;
		}

		public String GIM_Database;

		public String getGIM_Database() {
			return this.GIM_Database;
		}

		public String GIM_Port;

		public String getGIM_Port() {
			return this.GIM_Port;
		}

		public String GIM_Schema_Master;

		public String getGIM_Schema_Master() {
			return this.GIM_Schema_Master;
		}

		public String GIM_Login;

		public String getGIM_Login() {
			return this.GIM_Login;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Site_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Site_Inbound.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Site_Inbound.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Site_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public String SITE_DESC;

		public String getSITE_DESC() {
			return this.SITE_DESC;
		}

		public String SYSTAR_FLAG;

		public String getSYSTAR_FLAG() {
			return this.SYSTAR_FLAG;
		}

		public String STAGE_AND_HOLD_INDICATOR;

		public String getSTAGE_AND_HOLD_INDICATOR() {
			return this.STAGE_AND_HOLD_INDICATOR;
		}

		public String PROCUREMENT_OC;

		public String getPROCUREMENT_OC() {
			return this.PROCUREMENT_OC;
		}

		public String NOTE_TYPE;

		public String getNOTE_TYPE() {
			return this.NOTE_TYPE;
		}

		public String DOE_CENTRAL_WAREHOUSE;

		public String getDOE_CENTRAL_WAREHOUSE() {
			return this.DOE_CENTRAL_WAREHOUSE;
		}

		public String VENDOR_NO;

		public String getVENDOR_NO() {
			return this.VENDOR_NO;
		}

		public String DISTRIBUTION_FLAG;

		public String getDISTRIBUTION_FLAG() {
			return this.DISTRIBUTION_FLAG;
		}

		public String IC_STATEMENT_TRANS_CODE;

		public String getIC_STATEMENT_TRANS_CODE() {
			return this.IC_STATEMENT_TRANS_CODE;
		}

		public String INTERCOMPANY_STATEMENT_CODE;

		public String getINTERCOMPANY_STATEMENT_CODE() {
			return this.INTERCOMPANY_STATEMENT_CODE;
		}

		public String REGIONAL_DISTRIBUTION_CENTER;

		public String getREGIONAL_DISTRIBUTION_CENTER() {
			return this.REGIONAL_DISTRIBUTION_CENTER;
		}

		public String FORECASTING_MANAGEMENT_SYSTEM;

		public String getFORECASTING_MANAGEMENT_SYSTEM() {
			return this.FORECASTING_MANAGEMENT_SYSTEM;
		}

		public String TRANSPORTATION_MANAGEMENT_SYSTEM;

		public String getTRANSPORTATION_MANAGEMENT_SYSTEM() {
			return this.TRANSPORTATION_MANAGEMENT_SYSTEM;
		}

		public String WHSE_MANAGEMENT_SYSTEM;

		public String getWHSE_MANAGEMENT_SYSTEM() {
			return this.WHSE_MANAGEMENT_SYSTEM;
		}

		public String YANTRA_SYSTEM;

		public String getYANTRA_SYSTEM() {
			return this.YANTRA_SYSTEM;
		}

		public String RECEIPT_BASED_BILLING;

		public String getRECEIPT_BASED_BILLING() {
			return this.RECEIPT_BASED_BILLING;
		}

		public String RDC_NO;

		public String getRDC_NO() {
			return this.RDC_NO;
		}

		public String WMS_REASON_CODE;

		public String getWMS_REASON_CODE() {
			return this.WMS_REASON_CODE;
		}

		public String DPR_RAMPUP_FLAG;

		public String getDPR_RAMPUP_FLAG() {
			return this.DPR_RAMPUP_FLAG;
		}

		public BigDecimal SHIPPER_ID_TMS;

		public BigDecimal getSHIPPER_ID_TMS() {
			return this.SHIPPER_ID_TMS;
		}

		public String MINILOAD_SYSTEM_INIDICATOR;

		public String getMINILOAD_SYSTEM_INIDICATOR() {
			return this.MINILOAD_SYSTEM_INIDICATOR;
		}

		public String SYGMA_REGION_OFFICE_NO;

		public String getSYGMA_REGION_OFFICE_NO() {
			return this.SYGMA_REGION_OFFICE_NO;
		}

		public String VALID_FLAG_ERO;

		public String getVALID_FLAG_ERO() {
			return this.VALID_FLAG_ERO;
		}

		public String SYSCO_LOGISTICS_FLAG;

		public String getSYSCO_LOGISTICS_FLAG() {
			return this.SYSCO_LOGISTICS_FLAG;
		}

		public String SAP_SYSTEM_FLAG;

		public String getSAP_SYSTEM_FLAG() {
			return this.SAP_SYSTEM_FLAG;
		}

		public String REGION_ID;

		public String getREGION_ID() {
			return this.REGION_ID;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.SITE_ID == null) {
				if (other.SITE_ID != null)
					return false;

			} else if (!this.SITE_ID.equals(other.SITE_ID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.SITE_ID = this.SITE_ID;
			other.SITE_DESC = this.SITE_DESC;
			other.SYSTAR_FLAG = this.SYSTAR_FLAG;
			other.STAGE_AND_HOLD_INDICATOR = this.STAGE_AND_HOLD_INDICATOR;
			other.PROCUREMENT_OC = this.PROCUREMENT_OC;
			other.NOTE_TYPE = this.NOTE_TYPE;
			other.DOE_CENTRAL_WAREHOUSE = this.DOE_CENTRAL_WAREHOUSE;
			other.VENDOR_NO = this.VENDOR_NO;
			other.DISTRIBUTION_FLAG = this.DISTRIBUTION_FLAG;
			other.IC_STATEMENT_TRANS_CODE = this.IC_STATEMENT_TRANS_CODE;
			other.INTERCOMPANY_STATEMENT_CODE = this.INTERCOMPANY_STATEMENT_CODE;
			other.REGIONAL_DISTRIBUTION_CENTER = this.REGIONAL_DISTRIBUTION_CENTER;
			other.FORECASTING_MANAGEMENT_SYSTEM = this.FORECASTING_MANAGEMENT_SYSTEM;
			other.TRANSPORTATION_MANAGEMENT_SYSTEM = this.TRANSPORTATION_MANAGEMENT_SYSTEM;
			other.WHSE_MANAGEMENT_SYSTEM = this.WHSE_MANAGEMENT_SYSTEM;
			other.YANTRA_SYSTEM = this.YANTRA_SYSTEM;
			other.RECEIPT_BASED_BILLING = this.RECEIPT_BASED_BILLING;
			other.RDC_NO = this.RDC_NO;
			other.WMS_REASON_CODE = this.WMS_REASON_CODE;
			other.DPR_RAMPUP_FLAG = this.DPR_RAMPUP_FLAG;
			other.SHIPPER_ID_TMS = this.SHIPPER_ID_TMS;
			other.MINILOAD_SYSTEM_INIDICATOR = this.MINILOAD_SYSTEM_INIDICATOR;
			other.SYGMA_REGION_OFFICE_NO = this.SYGMA_REGION_OFFICE_NO;
			other.VALID_FLAG_ERO = this.VALID_FLAG_ERO;
			other.SYSCO_LOGISTICS_FLAG = this.SYSCO_LOGISTICS_FLAG;
			other.SAP_SYSTEM_FLAG = this.SAP_SYSTEM_FLAG;
			other.REGION_ID = this.REGION_ID;
			other.IS_DELETED = this.IS_DELETED;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.SITE_ID = this.SITE_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Site_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Site_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Site_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Site_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Site_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.SITE_DESC = readString(dis);

					this.SYSTAR_FLAG = readString(dis);

					this.STAGE_AND_HOLD_INDICATOR = readString(dis);

					this.PROCUREMENT_OC = readString(dis);

					this.NOTE_TYPE = readString(dis);

					this.DOE_CENTRAL_WAREHOUSE = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.DISTRIBUTION_FLAG = readString(dis);

					this.IC_STATEMENT_TRANS_CODE = readString(dis);

					this.INTERCOMPANY_STATEMENT_CODE = readString(dis);

					this.REGIONAL_DISTRIBUTION_CENTER = readString(dis);

					this.FORECASTING_MANAGEMENT_SYSTEM = readString(dis);

					this.TRANSPORTATION_MANAGEMENT_SYSTEM = readString(dis);

					this.WHSE_MANAGEMENT_SYSTEM = readString(dis);

					this.YANTRA_SYSTEM = readString(dis);

					this.RECEIPT_BASED_BILLING = readString(dis);

					this.RDC_NO = readString(dis);

					this.WMS_REASON_CODE = readString(dis);

					this.DPR_RAMPUP_FLAG = readString(dis);

					this.SHIPPER_ID_TMS = (BigDecimal) dis.readObject();

					this.MINILOAD_SYSTEM_INIDICATOR = readString(dis);

					this.SYGMA_REGION_OFFICE_NO = readString(dis);

					this.VALID_FLAG_ERO = readString(dis);

					this.SYSCO_LOGISTICS_FLAG = readString(dis);

					this.SAP_SYSTEM_FLAG = readString(dis);

					this.REGION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Site_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.SITE_DESC = readString(dis);

					this.SYSTAR_FLAG = readString(dis);

					this.STAGE_AND_HOLD_INDICATOR = readString(dis);

					this.PROCUREMENT_OC = readString(dis);

					this.NOTE_TYPE = readString(dis);

					this.DOE_CENTRAL_WAREHOUSE = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.DISTRIBUTION_FLAG = readString(dis);

					this.IC_STATEMENT_TRANS_CODE = readString(dis);

					this.INTERCOMPANY_STATEMENT_CODE = readString(dis);

					this.REGIONAL_DISTRIBUTION_CENTER = readString(dis);

					this.FORECASTING_MANAGEMENT_SYSTEM = readString(dis);

					this.TRANSPORTATION_MANAGEMENT_SYSTEM = readString(dis);

					this.WHSE_MANAGEMENT_SYSTEM = readString(dis);

					this.YANTRA_SYSTEM = readString(dis);

					this.RECEIPT_BASED_BILLING = readString(dis);

					this.RDC_NO = readString(dis);

					this.WMS_REASON_CODE = readString(dis);

					this.DPR_RAMPUP_FLAG = readString(dis);

					this.SHIPPER_ID_TMS = (BigDecimal) dis.readObject();

					this.MINILOAD_SYSTEM_INIDICATOR = readString(dis);

					this.SYGMA_REGION_OFFICE_NO = readString(dis);

					this.VALID_FLAG_ERO = readString(dis);

					this.SYSCO_LOGISTICS_FLAG = readString(dis);

					this.SAP_SYSTEM_FLAG = readString(dis);

					this.REGION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.SITE_DESC, dos);

				// String

				writeString(this.SYSTAR_FLAG, dos);

				// String

				writeString(this.STAGE_AND_HOLD_INDICATOR, dos);

				// String

				writeString(this.PROCUREMENT_OC, dos);

				// String

				writeString(this.NOTE_TYPE, dos);

				// String

				writeString(this.DOE_CENTRAL_WAREHOUSE, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// String

				writeString(this.DISTRIBUTION_FLAG, dos);

				// String

				writeString(this.IC_STATEMENT_TRANS_CODE, dos);

				// String

				writeString(this.INTERCOMPANY_STATEMENT_CODE, dos);

				// String

				writeString(this.REGIONAL_DISTRIBUTION_CENTER, dos);

				// String

				writeString(this.FORECASTING_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.TRANSPORTATION_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.WHSE_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.YANTRA_SYSTEM, dos);

				// String

				writeString(this.RECEIPT_BASED_BILLING, dos);

				// String

				writeString(this.RDC_NO, dos);

				// String

				writeString(this.WMS_REASON_CODE, dos);

				// String

				writeString(this.DPR_RAMPUP_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.SHIPPER_ID_TMS);

				// String

				writeString(this.MINILOAD_SYSTEM_INIDICATOR, dos);

				// String

				writeString(this.SYGMA_REGION_OFFICE_NO, dos);

				// String

				writeString(this.VALID_FLAG_ERO, dos);

				// String

				writeString(this.SYSCO_LOGISTICS_FLAG, dos);

				// String

				writeString(this.SAP_SYSTEM_FLAG, dos);

				// String

				writeString(this.REGION_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.SITE_DESC, dos);

				// String

				writeString(this.SYSTAR_FLAG, dos);

				// String

				writeString(this.STAGE_AND_HOLD_INDICATOR, dos);

				// String

				writeString(this.PROCUREMENT_OC, dos);

				// String

				writeString(this.NOTE_TYPE, dos);

				// String

				writeString(this.DOE_CENTRAL_WAREHOUSE, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// String

				writeString(this.DISTRIBUTION_FLAG, dos);

				// String

				writeString(this.IC_STATEMENT_TRANS_CODE, dos);

				// String

				writeString(this.INTERCOMPANY_STATEMENT_CODE, dos);

				// String

				writeString(this.REGIONAL_DISTRIBUTION_CENTER, dos);

				// String

				writeString(this.FORECASTING_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.TRANSPORTATION_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.WHSE_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.YANTRA_SYSTEM, dos);

				// String

				writeString(this.RECEIPT_BASED_BILLING, dos);

				// String

				writeString(this.RDC_NO, dos);

				// String

				writeString(this.WMS_REASON_CODE, dos);

				// String

				writeString(this.DPR_RAMPUP_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.SHIPPER_ID_TMS);

				// String

				writeString(this.MINILOAD_SYSTEM_INIDICATOR, dos);

				// String

				writeString(this.SYGMA_REGION_OFFICE_NO, dos);

				// String

				writeString(this.VALID_FLAG_ERO, dos);

				// String

				writeString(this.SYSCO_LOGISTICS_FLAG, dos);

				// String

				writeString(this.SAP_SYSTEM_FLAG, dos);

				// String

				writeString(this.REGION_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",SITE_DESC=" + SITE_DESC);
			sb.append(",SYSTAR_FLAG=" + SYSTAR_FLAG);
			sb.append(",STAGE_AND_HOLD_INDICATOR=" + STAGE_AND_HOLD_INDICATOR);
			sb.append(",PROCUREMENT_OC=" + PROCUREMENT_OC);
			sb.append(",NOTE_TYPE=" + NOTE_TYPE);
			sb.append(",DOE_CENTRAL_WAREHOUSE=" + DOE_CENTRAL_WAREHOUSE);
			sb.append(",VENDOR_NO=" + VENDOR_NO);
			sb.append(",DISTRIBUTION_FLAG=" + DISTRIBUTION_FLAG);
			sb.append(",IC_STATEMENT_TRANS_CODE=" + IC_STATEMENT_TRANS_CODE);
			sb.append(",INTERCOMPANY_STATEMENT_CODE=" + INTERCOMPANY_STATEMENT_CODE);
			sb.append(",REGIONAL_DISTRIBUTION_CENTER=" + REGIONAL_DISTRIBUTION_CENTER);
			sb.append(",FORECASTING_MANAGEMENT_SYSTEM=" + FORECASTING_MANAGEMENT_SYSTEM);
			sb.append(",TRANSPORTATION_MANAGEMENT_SYSTEM=" + TRANSPORTATION_MANAGEMENT_SYSTEM);
			sb.append(",WHSE_MANAGEMENT_SYSTEM=" + WHSE_MANAGEMENT_SYSTEM);
			sb.append(",YANTRA_SYSTEM=" + YANTRA_SYSTEM);
			sb.append(",RECEIPT_BASED_BILLING=" + RECEIPT_BASED_BILLING);
			sb.append(",RDC_NO=" + RDC_NO);
			sb.append(",WMS_REASON_CODE=" + WMS_REASON_CODE);
			sb.append(",DPR_RAMPUP_FLAG=" + DPR_RAMPUP_FLAG);
			sb.append(",SHIPPER_ID_TMS=" + String.valueOf(SHIPPER_ID_TMS));
			sb.append(",MINILOAD_SYSTEM_INIDICATOR=" + MINILOAD_SYSTEM_INIDICATOR);
			sb.append(",SYGMA_REGION_OFFICE_NO=" + SYGMA_REGION_OFFICE_NO);
			sb.append(",VALID_FLAG_ERO=" + VALID_FLAG_ERO);
			sb.append(",SYSCO_LOGISTICS_FLAG=" + SYSCO_LOGISTICS_FLAG);
			sb.append(",SAP_SYSTEM_FLAG=" + SAP_SYSTEM_FLAG);
			sb.append(",REGION_ID=" + REGION_ID);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SITEStruct implements routines.system.IPersistableRow<SITEStruct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Site_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public String SITE_DESC;

		public String getSITE_DESC() {
			return this.SITE_DESC;
		}

		public String SYSTAR_FLAG;

		public String getSYSTAR_FLAG() {
			return this.SYSTAR_FLAG;
		}

		public String STAGE_AND_HOLD_INDICATOR;

		public String getSTAGE_AND_HOLD_INDICATOR() {
			return this.STAGE_AND_HOLD_INDICATOR;
		}

		public String PROCUREMENT_OC;

		public String getPROCUREMENT_OC() {
			return this.PROCUREMENT_OC;
		}

		public String NOTE_TYPE;

		public String getNOTE_TYPE() {
			return this.NOTE_TYPE;
		}

		public String DOE_CENTRAL_WAREHOUSE;

		public String getDOE_CENTRAL_WAREHOUSE() {
			return this.DOE_CENTRAL_WAREHOUSE;
		}

		public String VENDOR_NO;

		public String getVENDOR_NO() {
			return this.VENDOR_NO;
		}

		public String DISTRIBUTION_FLAG;

		public String getDISTRIBUTION_FLAG() {
			return this.DISTRIBUTION_FLAG;
		}

		public String IC_STATEMENT_TRANS_CODE;

		public String getIC_STATEMENT_TRANS_CODE() {
			return this.IC_STATEMENT_TRANS_CODE;
		}

		public String INTERCOMPANY_STATEMENT_CODE;

		public String getINTERCOMPANY_STATEMENT_CODE() {
			return this.INTERCOMPANY_STATEMENT_CODE;
		}

		public String REGIONAL_DISTRIBUTION_CENTER;

		public String getREGIONAL_DISTRIBUTION_CENTER() {
			return this.REGIONAL_DISTRIBUTION_CENTER;
		}

		public String FORECASTING_MANAGEMENT_SYSTEM;

		public String getFORECASTING_MANAGEMENT_SYSTEM() {
			return this.FORECASTING_MANAGEMENT_SYSTEM;
		}

		public String TRANSPORTATION_MANAGEMENT_SYSTEM;

		public String getTRANSPORTATION_MANAGEMENT_SYSTEM() {
			return this.TRANSPORTATION_MANAGEMENT_SYSTEM;
		}

		public String WHSE_MANAGEMENT_SYSTEM;

		public String getWHSE_MANAGEMENT_SYSTEM() {
			return this.WHSE_MANAGEMENT_SYSTEM;
		}

		public String YANTRA_SYSTEM;

		public String getYANTRA_SYSTEM() {
			return this.YANTRA_SYSTEM;
		}

		public String RECEIPT_BASED_BILLING;

		public String getRECEIPT_BASED_BILLING() {
			return this.RECEIPT_BASED_BILLING;
		}

		public String RDC_NO;

		public String getRDC_NO() {
			return this.RDC_NO;
		}

		public String WMS_REASON_CODE;

		public String getWMS_REASON_CODE() {
			return this.WMS_REASON_CODE;
		}

		public String DPR_RAMPUP_FLAG;

		public String getDPR_RAMPUP_FLAG() {
			return this.DPR_RAMPUP_FLAG;
		}

		public BigDecimal SHIPPER_ID_TMS;

		public BigDecimal getSHIPPER_ID_TMS() {
			return this.SHIPPER_ID_TMS;
		}

		public String MINILOAD_SYSTEM_INIDICATOR;

		public String getMINILOAD_SYSTEM_INIDICATOR() {
			return this.MINILOAD_SYSTEM_INIDICATOR;
		}

		public String SYGMA_REGION_OFFICE_NO;

		public String getSYGMA_REGION_OFFICE_NO() {
			return this.SYGMA_REGION_OFFICE_NO;
		}

		public String VALID_FLAG_ERO;

		public String getVALID_FLAG_ERO() {
			return this.VALID_FLAG_ERO;
		}

		public String SYSCO_LOGISTICS_FLAG;

		public String getSYSCO_LOGISTICS_FLAG() {
			return this.SYSCO_LOGISTICS_FLAG;
		}

		public String SAP_SYSTEM_FLAG;

		public String getSAP_SYSTEM_FLAG() {
			return this.SAP_SYSTEM_FLAG;
		}

		public String REGION_ID;

		public String getREGION_ID() {
			return this.REGION_ID;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final SITEStruct other = (SITEStruct) obj;

			if (this.SITE_ID == null) {
				if (other.SITE_ID != null)
					return false;

			} else if (!this.SITE_ID.equals(other.SITE_ID))

				return false;

			return true;
		}

		public void copyDataTo(SITEStruct other) {

			other.SITE_ID = this.SITE_ID;
			other.SITE_DESC = this.SITE_DESC;
			other.SYSTAR_FLAG = this.SYSTAR_FLAG;
			other.STAGE_AND_HOLD_INDICATOR = this.STAGE_AND_HOLD_INDICATOR;
			other.PROCUREMENT_OC = this.PROCUREMENT_OC;
			other.NOTE_TYPE = this.NOTE_TYPE;
			other.DOE_CENTRAL_WAREHOUSE = this.DOE_CENTRAL_WAREHOUSE;
			other.VENDOR_NO = this.VENDOR_NO;
			other.DISTRIBUTION_FLAG = this.DISTRIBUTION_FLAG;
			other.IC_STATEMENT_TRANS_CODE = this.IC_STATEMENT_TRANS_CODE;
			other.INTERCOMPANY_STATEMENT_CODE = this.INTERCOMPANY_STATEMENT_CODE;
			other.REGIONAL_DISTRIBUTION_CENTER = this.REGIONAL_DISTRIBUTION_CENTER;
			other.FORECASTING_MANAGEMENT_SYSTEM = this.FORECASTING_MANAGEMENT_SYSTEM;
			other.TRANSPORTATION_MANAGEMENT_SYSTEM = this.TRANSPORTATION_MANAGEMENT_SYSTEM;
			other.WHSE_MANAGEMENT_SYSTEM = this.WHSE_MANAGEMENT_SYSTEM;
			other.YANTRA_SYSTEM = this.YANTRA_SYSTEM;
			other.RECEIPT_BASED_BILLING = this.RECEIPT_BASED_BILLING;
			other.RDC_NO = this.RDC_NO;
			other.WMS_REASON_CODE = this.WMS_REASON_CODE;
			other.DPR_RAMPUP_FLAG = this.DPR_RAMPUP_FLAG;
			other.SHIPPER_ID_TMS = this.SHIPPER_ID_TMS;
			other.MINILOAD_SYSTEM_INIDICATOR = this.MINILOAD_SYSTEM_INIDICATOR;
			other.SYGMA_REGION_OFFICE_NO = this.SYGMA_REGION_OFFICE_NO;
			other.VALID_FLAG_ERO = this.VALID_FLAG_ERO;
			other.SYSCO_LOGISTICS_FLAG = this.SYSCO_LOGISTICS_FLAG;
			other.SAP_SYSTEM_FLAG = this.SAP_SYSTEM_FLAG;
			other.REGION_ID = this.REGION_ID;
			other.IS_DELETED = this.IS_DELETED;

		}

		public void copyKeysDataTo(SITEStruct other) {

			other.SITE_ID = this.SITE_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Site_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Site_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Site_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Site_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Site_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.SITE_DESC = readString(dis);

					this.SYSTAR_FLAG = readString(dis);

					this.STAGE_AND_HOLD_INDICATOR = readString(dis);

					this.PROCUREMENT_OC = readString(dis);

					this.NOTE_TYPE = readString(dis);

					this.DOE_CENTRAL_WAREHOUSE = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.DISTRIBUTION_FLAG = readString(dis);

					this.IC_STATEMENT_TRANS_CODE = readString(dis);

					this.INTERCOMPANY_STATEMENT_CODE = readString(dis);

					this.REGIONAL_DISTRIBUTION_CENTER = readString(dis);

					this.FORECASTING_MANAGEMENT_SYSTEM = readString(dis);

					this.TRANSPORTATION_MANAGEMENT_SYSTEM = readString(dis);

					this.WHSE_MANAGEMENT_SYSTEM = readString(dis);

					this.YANTRA_SYSTEM = readString(dis);

					this.RECEIPT_BASED_BILLING = readString(dis);

					this.RDC_NO = readString(dis);

					this.WMS_REASON_CODE = readString(dis);

					this.DPR_RAMPUP_FLAG = readString(dis);

					this.SHIPPER_ID_TMS = (BigDecimal) dis.readObject();

					this.MINILOAD_SYSTEM_INIDICATOR = readString(dis);

					this.SYGMA_REGION_OFFICE_NO = readString(dis);

					this.VALID_FLAG_ERO = readString(dis);

					this.SYSCO_LOGISTICS_FLAG = readString(dis);

					this.SAP_SYSTEM_FLAG = readString(dis);

					this.REGION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Site_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.SITE_DESC = readString(dis);

					this.SYSTAR_FLAG = readString(dis);

					this.STAGE_AND_HOLD_INDICATOR = readString(dis);

					this.PROCUREMENT_OC = readString(dis);

					this.NOTE_TYPE = readString(dis);

					this.DOE_CENTRAL_WAREHOUSE = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.DISTRIBUTION_FLAG = readString(dis);

					this.IC_STATEMENT_TRANS_CODE = readString(dis);

					this.INTERCOMPANY_STATEMENT_CODE = readString(dis);

					this.REGIONAL_DISTRIBUTION_CENTER = readString(dis);

					this.FORECASTING_MANAGEMENT_SYSTEM = readString(dis);

					this.TRANSPORTATION_MANAGEMENT_SYSTEM = readString(dis);

					this.WHSE_MANAGEMENT_SYSTEM = readString(dis);

					this.YANTRA_SYSTEM = readString(dis);

					this.RECEIPT_BASED_BILLING = readString(dis);

					this.RDC_NO = readString(dis);

					this.WMS_REASON_CODE = readString(dis);

					this.DPR_RAMPUP_FLAG = readString(dis);

					this.SHIPPER_ID_TMS = (BigDecimal) dis.readObject();

					this.MINILOAD_SYSTEM_INIDICATOR = readString(dis);

					this.SYGMA_REGION_OFFICE_NO = readString(dis);

					this.VALID_FLAG_ERO = readString(dis);

					this.SYSCO_LOGISTICS_FLAG = readString(dis);

					this.SAP_SYSTEM_FLAG = readString(dis);

					this.REGION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.SITE_DESC, dos);

				// String

				writeString(this.SYSTAR_FLAG, dos);

				// String

				writeString(this.STAGE_AND_HOLD_INDICATOR, dos);

				// String

				writeString(this.PROCUREMENT_OC, dos);

				// String

				writeString(this.NOTE_TYPE, dos);

				// String

				writeString(this.DOE_CENTRAL_WAREHOUSE, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// String

				writeString(this.DISTRIBUTION_FLAG, dos);

				// String

				writeString(this.IC_STATEMENT_TRANS_CODE, dos);

				// String

				writeString(this.INTERCOMPANY_STATEMENT_CODE, dos);

				// String

				writeString(this.REGIONAL_DISTRIBUTION_CENTER, dos);

				// String

				writeString(this.FORECASTING_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.TRANSPORTATION_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.WHSE_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.YANTRA_SYSTEM, dos);

				// String

				writeString(this.RECEIPT_BASED_BILLING, dos);

				// String

				writeString(this.RDC_NO, dos);

				// String

				writeString(this.WMS_REASON_CODE, dos);

				// String

				writeString(this.DPR_RAMPUP_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.SHIPPER_ID_TMS);

				// String

				writeString(this.MINILOAD_SYSTEM_INIDICATOR, dos);

				// String

				writeString(this.SYGMA_REGION_OFFICE_NO, dos);

				// String

				writeString(this.VALID_FLAG_ERO, dos);

				// String

				writeString(this.SYSCO_LOGISTICS_FLAG, dos);

				// String

				writeString(this.SAP_SYSTEM_FLAG, dos);

				// String

				writeString(this.REGION_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.SITE_DESC, dos);

				// String

				writeString(this.SYSTAR_FLAG, dos);

				// String

				writeString(this.STAGE_AND_HOLD_INDICATOR, dos);

				// String

				writeString(this.PROCUREMENT_OC, dos);

				// String

				writeString(this.NOTE_TYPE, dos);

				// String

				writeString(this.DOE_CENTRAL_WAREHOUSE, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// String

				writeString(this.DISTRIBUTION_FLAG, dos);

				// String

				writeString(this.IC_STATEMENT_TRANS_CODE, dos);

				// String

				writeString(this.INTERCOMPANY_STATEMENT_CODE, dos);

				// String

				writeString(this.REGIONAL_DISTRIBUTION_CENTER, dos);

				// String

				writeString(this.FORECASTING_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.TRANSPORTATION_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.WHSE_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.YANTRA_SYSTEM, dos);

				// String

				writeString(this.RECEIPT_BASED_BILLING, dos);

				// String

				writeString(this.RDC_NO, dos);

				// String

				writeString(this.WMS_REASON_CODE, dos);

				// String

				writeString(this.DPR_RAMPUP_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.SHIPPER_ID_TMS);

				// String

				writeString(this.MINILOAD_SYSTEM_INIDICATOR, dos);

				// String

				writeString(this.SYGMA_REGION_OFFICE_NO, dos);

				// String

				writeString(this.VALID_FLAG_ERO, dos);

				// String

				writeString(this.SYSCO_LOGISTICS_FLAG, dos);

				// String

				writeString(this.SAP_SYSTEM_FLAG, dos);

				// String

				writeString(this.REGION_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",SITE_DESC=" + SITE_DESC);
			sb.append(",SYSTAR_FLAG=" + SYSTAR_FLAG);
			sb.append(",STAGE_AND_HOLD_INDICATOR=" + STAGE_AND_HOLD_INDICATOR);
			sb.append(",PROCUREMENT_OC=" + PROCUREMENT_OC);
			sb.append(",NOTE_TYPE=" + NOTE_TYPE);
			sb.append(",DOE_CENTRAL_WAREHOUSE=" + DOE_CENTRAL_WAREHOUSE);
			sb.append(",VENDOR_NO=" + VENDOR_NO);
			sb.append(",DISTRIBUTION_FLAG=" + DISTRIBUTION_FLAG);
			sb.append(",IC_STATEMENT_TRANS_CODE=" + IC_STATEMENT_TRANS_CODE);
			sb.append(",INTERCOMPANY_STATEMENT_CODE=" + INTERCOMPANY_STATEMENT_CODE);
			sb.append(",REGIONAL_DISTRIBUTION_CENTER=" + REGIONAL_DISTRIBUTION_CENTER);
			sb.append(",FORECASTING_MANAGEMENT_SYSTEM=" + FORECASTING_MANAGEMENT_SYSTEM);
			sb.append(",TRANSPORTATION_MANAGEMENT_SYSTEM=" + TRANSPORTATION_MANAGEMENT_SYSTEM);
			sb.append(",WHSE_MANAGEMENT_SYSTEM=" + WHSE_MANAGEMENT_SYSTEM);
			sb.append(",YANTRA_SYSTEM=" + YANTRA_SYSTEM);
			sb.append(",RECEIPT_BASED_BILLING=" + RECEIPT_BASED_BILLING);
			sb.append(",RDC_NO=" + RDC_NO);
			sb.append(",WMS_REASON_CODE=" + WMS_REASON_CODE);
			sb.append(",DPR_RAMPUP_FLAG=" + DPR_RAMPUP_FLAG);
			sb.append(",SHIPPER_ID_TMS=" + String.valueOf(SHIPPER_ID_TMS));
			sb.append(",MINILOAD_SYSTEM_INIDICATOR=" + MINILOAD_SYSTEM_INIDICATOR);
			sb.append(",SYGMA_REGION_OFFICE_NO=" + SYGMA_REGION_OFFICE_NO);
			sb.append(",VALID_FLAG_ERO=" + VALID_FLAG_ERO);
			sb.append(",SYSCO_LOGISTICS_FLAG=" + SYSCO_LOGISTICS_FLAG);
			sb.append(",SAP_SYSTEM_FLAG=" + SAP_SYSTEM_FLAG);
			sb.append(",REGION_ID=" + REGION_ID);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SITEStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Site_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[0];

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public String SITE_DESC;

		public String getSITE_DESC() {
			return this.SITE_DESC;
		}

		public String SYSTAR_FLAG;

		public String getSYSTAR_FLAG() {
			return this.SYSTAR_FLAG;
		}

		public String STAGE_AND_HOLD_INDICATOR;

		public String getSTAGE_AND_HOLD_INDICATOR() {
			return this.STAGE_AND_HOLD_INDICATOR;
		}

		public String PROCUREMENT_OC;

		public String getPROCUREMENT_OC() {
			return this.PROCUREMENT_OC;
		}

		public String NOTE_TYPE;

		public String getNOTE_TYPE() {
			return this.NOTE_TYPE;
		}

		public String DOE_CENTRAL_WAREHOUSE;

		public String getDOE_CENTRAL_WAREHOUSE() {
			return this.DOE_CENTRAL_WAREHOUSE;
		}

		public String VENDOR_NO;

		public String getVENDOR_NO() {
			return this.VENDOR_NO;
		}

		public String DISTRIBUTION_FLAG;

		public String getDISTRIBUTION_FLAG() {
			return this.DISTRIBUTION_FLAG;
		}

		public String IC_STATEMENT_TRANS_CODE;

		public String getIC_STATEMENT_TRANS_CODE() {
			return this.IC_STATEMENT_TRANS_CODE;
		}

		public String INTERCOMPANY_STATEMENT_CODE;

		public String getINTERCOMPANY_STATEMENT_CODE() {
			return this.INTERCOMPANY_STATEMENT_CODE;
		}

		public String REGIONAL_DISTRIBUTION_CENTER;

		public String getREGIONAL_DISTRIBUTION_CENTER() {
			return this.REGIONAL_DISTRIBUTION_CENTER;
		}

		public String FORECASTING_MANAGEMENT_SYSTEM;

		public String getFORECASTING_MANAGEMENT_SYSTEM() {
			return this.FORECASTING_MANAGEMENT_SYSTEM;
		}

		public String TRANSPORTATION_MANAGEMENT_SYSTEM;

		public String getTRANSPORTATION_MANAGEMENT_SYSTEM() {
			return this.TRANSPORTATION_MANAGEMENT_SYSTEM;
		}

		public String WHSE_MANAGEMENT_SYSTEM;

		public String getWHSE_MANAGEMENT_SYSTEM() {
			return this.WHSE_MANAGEMENT_SYSTEM;
		}

		public String YANTRA_SYSTEM;

		public String getYANTRA_SYSTEM() {
			return this.YANTRA_SYSTEM;
		}

		public String RECEIPT_BASED_BILLING;

		public String getRECEIPT_BASED_BILLING() {
			return this.RECEIPT_BASED_BILLING;
		}

		public String RDC_NO;

		public String getRDC_NO() {
			return this.RDC_NO;
		}

		public String WMS_REASON_CODE;

		public String getWMS_REASON_CODE() {
			return this.WMS_REASON_CODE;
		}

		public String DPR_RAMPUP_FLAG;

		public String getDPR_RAMPUP_FLAG() {
			return this.DPR_RAMPUP_FLAG;
		}

		public String SHIPPER_ID_TMS;

		public String getSHIPPER_ID_TMS() {
			return this.SHIPPER_ID_TMS;
		}

		public String MINILOAD_SYSTEM_INIDICATOR;

		public String getMINILOAD_SYSTEM_INIDICATOR() {
			return this.MINILOAD_SYSTEM_INIDICATOR;
		}

		public String SYGMA_REGION_OFFICE_NO;

		public String getSYGMA_REGION_OFFICE_NO() {
			return this.SYGMA_REGION_OFFICE_NO;
		}

		public String VALID_FLAG_ERO;

		public String getVALID_FLAG_ERO() {
			return this.VALID_FLAG_ERO;
		}

		public String SYSCO_LOGISTICS_FLAG;

		public String getSYSCO_LOGISTICS_FLAG() {
			return this.SYSCO_LOGISTICS_FLAG;
		}

		public String SAP_SYSTEM_FLAG;

		public String getSAP_SYSTEM_FLAG() {
			return this.SAP_SYSTEM_FLAG;
		}

		public String REGION_ID;

		public String getREGION_ID() {
			return this.REGION_ID;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Site_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Site_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Site_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Site_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Site_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.SITE_DESC = readString(dis);

					this.SYSTAR_FLAG = readString(dis);

					this.STAGE_AND_HOLD_INDICATOR = readString(dis);

					this.PROCUREMENT_OC = readString(dis);

					this.NOTE_TYPE = readString(dis);

					this.DOE_CENTRAL_WAREHOUSE = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.DISTRIBUTION_FLAG = readString(dis);

					this.IC_STATEMENT_TRANS_CODE = readString(dis);

					this.INTERCOMPANY_STATEMENT_CODE = readString(dis);

					this.REGIONAL_DISTRIBUTION_CENTER = readString(dis);

					this.FORECASTING_MANAGEMENT_SYSTEM = readString(dis);

					this.TRANSPORTATION_MANAGEMENT_SYSTEM = readString(dis);

					this.WHSE_MANAGEMENT_SYSTEM = readString(dis);

					this.YANTRA_SYSTEM = readString(dis);

					this.RECEIPT_BASED_BILLING = readString(dis);

					this.RDC_NO = readString(dis);

					this.WMS_REASON_CODE = readString(dis);

					this.DPR_RAMPUP_FLAG = readString(dis);

					this.SHIPPER_ID_TMS = readString(dis);

					this.MINILOAD_SYSTEM_INIDICATOR = readString(dis);

					this.SYGMA_REGION_OFFICE_NO = readString(dis);

					this.VALID_FLAG_ERO = readString(dis);

					this.SYSCO_LOGISTICS_FLAG = readString(dis);

					this.SAP_SYSTEM_FLAG = readString(dis);

					this.REGION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Site_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.SITE_DESC = readString(dis);

					this.SYSTAR_FLAG = readString(dis);

					this.STAGE_AND_HOLD_INDICATOR = readString(dis);

					this.PROCUREMENT_OC = readString(dis);

					this.NOTE_TYPE = readString(dis);

					this.DOE_CENTRAL_WAREHOUSE = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.DISTRIBUTION_FLAG = readString(dis);

					this.IC_STATEMENT_TRANS_CODE = readString(dis);

					this.INTERCOMPANY_STATEMENT_CODE = readString(dis);

					this.REGIONAL_DISTRIBUTION_CENTER = readString(dis);

					this.FORECASTING_MANAGEMENT_SYSTEM = readString(dis);

					this.TRANSPORTATION_MANAGEMENT_SYSTEM = readString(dis);

					this.WHSE_MANAGEMENT_SYSTEM = readString(dis);

					this.YANTRA_SYSTEM = readString(dis);

					this.RECEIPT_BASED_BILLING = readString(dis);

					this.RDC_NO = readString(dis);

					this.WMS_REASON_CODE = readString(dis);

					this.DPR_RAMPUP_FLAG = readString(dis);

					this.SHIPPER_ID_TMS = readString(dis);

					this.MINILOAD_SYSTEM_INIDICATOR = readString(dis);

					this.SYGMA_REGION_OFFICE_NO = readString(dis);

					this.VALID_FLAG_ERO = readString(dis);

					this.SYSCO_LOGISTICS_FLAG = readString(dis);

					this.SAP_SYSTEM_FLAG = readString(dis);

					this.REGION_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.SITE_DESC, dos);

				// String

				writeString(this.SYSTAR_FLAG, dos);

				// String

				writeString(this.STAGE_AND_HOLD_INDICATOR, dos);

				// String

				writeString(this.PROCUREMENT_OC, dos);

				// String

				writeString(this.NOTE_TYPE, dos);

				// String

				writeString(this.DOE_CENTRAL_WAREHOUSE, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// String

				writeString(this.DISTRIBUTION_FLAG, dos);

				// String

				writeString(this.IC_STATEMENT_TRANS_CODE, dos);

				// String

				writeString(this.INTERCOMPANY_STATEMENT_CODE, dos);

				// String

				writeString(this.REGIONAL_DISTRIBUTION_CENTER, dos);

				// String

				writeString(this.FORECASTING_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.TRANSPORTATION_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.WHSE_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.YANTRA_SYSTEM, dos);

				// String

				writeString(this.RECEIPT_BASED_BILLING, dos);

				// String

				writeString(this.RDC_NO, dos);

				// String

				writeString(this.WMS_REASON_CODE, dos);

				// String

				writeString(this.DPR_RAMPUP_FLAG, dos);

				// String

				writeString(this.SHIPPER_ID_TMS, dos);

				// String

				writeString(this.MINILOAD_SYSTEM_INIDICATOR, dos);

				// String

				writeString(this.SYGMA_REGION_OFFICE_NO, dos);

				// String

				writeString(this.VALID_FLAG_ERO, dos);

				// String

				writeString(this.SYSCO_LOGISTICS_FLAG, dos);

				// String

				writeString(this.SAP_SYSTEM_FLAG, dos);

				// String

				writeString(this.REGION_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.SITE_DESC, dos);

				// String

				writeString(this.SYSTAR_FLAG, dos);

				// String

				writeString(this.STAGE_AND_HOLD_INDICATOR, dos);

				// String

				writeString(this.PROCUREMENT_OC, dos);

				// String

				writeString(this.NOTE_TYPE, dos);

				// String

				writeString(this.DOE_CENTRAL_WAREHOUSE, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// String

				writeString(this.DISTRIBUTION_FLAG, dos);

				// String

				writeString(this.IC_STATEMENT_TRANS_CODE, dos);

				// String

				writeString(this.INTERCOMPANY_STATEMENT_CODE, dos);

				// String

				writeString(this.REGIONAL_DISTRIBUTION_CENTER, dos);

				// String

				writeString(this.FORECASTING_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.TRANSPORTATION_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.WHSE_MANAGEMENT_SYSTEM, dos);

				// String

				writeString(this.YANTRA_SYSTEM, dos);

				// String

				writeString(this.RECEIPT_BASED_BILLING, dos);

				// String

				writeString(this.RDC_NO, dos);

				// String

				writeString(this.WMS_REASON_CODE, dos);

				// String

				writeString(this.DPR_RAMPUP_FLAG, dos);

				// String

				writeString(this.SHIPPER_ID_TMS, dos);

				// String

				writeString(this.MINILOAD_SYSTEM_INIDICATOR, dos);

				// String

				writeString(this.SYGMA_REGION_OFFICE_NO, dos);

				// String

				writeString(this.VALID_FLAG_ERO, dos);

				// String

				writeString(this.SYSCO_LOGISTICS_FLAG, dos);

				// String

				writeString(this.SAP_SYSTEM_FLAG, dos);

				// String

				writeString(this.REGION_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",SITE_DESC=" + SITE_DESC);
			sb.append(",SYSTAR_FLAG=" + SYSTAR_FLAG);
			sb.append(",STAGE_AND_HOLD_INDICATOR=" + STAGE_AND_HOLD_INDICATOR);
			sb.append(",PROCUREMENT_OC=" + PROCUREMENT_OC);
			sb.append(",NOTE_TYPE=" + NOTE_TYPE);
			sb.append(",DOE_CENTRAL_WAREHOUSE=" + DOE_CENTRAL_WAREHOUSE);
			sb.append(",VENDOR_NO=" + VENDOR_NO);
			sb.append(",DISTRIBUTION_FLAG=" + DISTRIBUTION_FLAG);
			sb.append(",IC_STATEMENT_TRANS_CODE=" + IC_STATEMENT_TRANS_CODE);
			sb.append(",INTERCOMPANY_STATEMENT_CODE=" + INTERCOMPANY_STATEMENT_CODE);
			sb.append(",REGIONAL_DISTRIBUTION_CENTER=" + REGIONAL_DISTRIBUTION_CENTER);
			sb.append(",FORECASTING_MANAGEMENT_SYSTEM=" + FORECASTING_MANAGEMENT_SYSTEM);
			sb.append(",TRANSPORTATION_MANAGEMENT_SYSTEM=" + TRANSPORTATION_MANAGEMENT_SYSTEM);
			sb.append(",WHSE_MANAGEMENT_SYSTEM=" + WHSE_MANAGEMENT_SYSTEM);
			sb.append(",YANTRA_SYSTEM=" + YANTRA_SYSTEM);
			sb.append(",RECEIPT_BASED_BILLING=" + RECEIPT_BASED_BILLING);
			sb.append(",RDC_NO=" + RDC_NO);
			sb.append(",WMS_REASON_CODE=" + WMS_REASON_CODE);
			sb.append(",DPR_RAMPUP_FLAG=" + DPR_RAMPUP_FLAG);
			sb.append(",SHIPPER_ID_TMS=" + SHIPPER_ID_TMS);
			sb.append(",MINILOAD_SYSTEM_INIDICATOR=" + MINILOAD_SYSTEM_INIDICATOR);
			sb.append(",SYGMA_REGION_OFFICE_NO=" + SYGMA_REGION_OFFICE_NO);
			sb.append(",VALID_FLAG_ERO=" + VALID_FLAG_ERO);
			sb.append(",SYSCO_LOGISTICS_FLAG=" + SYSCO_LOGISTICS_FLAG);
			sb.append(",SAP_SYSTEM_FLAG=" + SAP_SYSTEM_FLAG);
			sb.append(",REGION_ID=" + REGION_ID);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Site_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[0];

		public String REFCAT;

		public String getREFCAT() {
			return this.REFCAT;
		}

		public String REFKEY;

		public String getREFKEY() {
			return this.REFKEY;
		}

		public String REFDAT;

		public String getREFDAT() {
			return this.REFDAT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Site_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Site_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Site_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Site_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Site_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Site_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Site_Inbound) {

				try {

					int length = 0;

					this.REFCAT = readString(dis);

					this.REFKEY = readString(dis);

					this.REFDAT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Site_Inbound) {

				try {

					int length = 0;

					this.REFCAT = readString(dis);

					this.REFKEY = readString(dis);

					this.REFDAT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.REFCAT, dos);

				// String

				writeString(this.REFKEY, dos);

				// String

				writeString(this.REFDAT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.REFCAT, dos);

				// String

				writeString(this.REFKEY, dos);

				// String

				writeString(this.REFDAT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REFCAT=" + REFCAT);
			sb.append(",REFKEY=" + REFKEY);
			sb.append(",REFDAT=" + REFDAT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				SITEStruct SITE = new SITEStruct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[30];

					public void addRow(String[] row) {

						for (int i = 0; i < 30; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 29 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 29 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|%28$-");
							sbformat.append(colLengths[27]);
							sbformat.append("s");

							sbformat.append("|%29$-");
							sbformat.append(colLengths[28]);
							sbformat.append("s");

							sbformat.append("|%30$-");
							sbformat.append(colLengths[29]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[29] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "SITE_ID", "SITE_DESC", "SYSTAR_FLAG", "STAGE_AND_HOLD_INDICATOR",
						"PROCUREMENT_OC", "NOTE_TYPE", "DOE_CENTRAL_WAREHOUSE", "VENDOR_NO", "DISTRIBUTION_FLAG",
						"IC_STATEMENT_TRANS_CODE", "INTERCOMPANY_STATEMENT_CODE", "REGIONAL_DISTRIBUTION_CENTER",
						"FORECASTING_MANAGEMENT_SYSTEM", "TRANSPORTATION_MANAGEMENT_SYSTEM", "WHSE_MANAGEMENT_SYSTEM",
						"YANTRA_SYSTEM", "RECEIPT_BASED_BILLING", "RDC_NO", "WMS_REASON_CODE", "DPR_RAMPUP_FLAG",
						"SHIPPER_ID_TMS", "MINILOAD_SYSTEM_INIDICATOR", "SYGMA_REGION_OFFICE_NO", "VALID_FLAG_ERO",
						"SYSCO_LOGISTICS_FLAG", "SAP_SYSTEM_FLAG", "REGION_ID", "IS_DELETED", "errorCode",
						"errorMessage", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SITE");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = context.GIM_Schema_Master;

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("SITE");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("SITE");
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 28 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + context.GIM_Server + ":" + context.GIM_Port + "/"
						+ context.GIM_Database + "?" + context.GIM_AdditionalParams;
				dbUser_tDBOutput_1 = context.GIM_Login;

				final String decryptedPassword_tDBOutput_1 = context.GIM_Password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 1;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(
						"SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"SITE_ID\" = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"SITE_ID\",\"SITE_DESC\",\"SYSTAR_FLAG\",\"STAGE_AND_HOLD_INDICATOR\",\"PROCUREMENT_OC\",\"NOTE_TYPE\",\"DOE_CENTRAL_WAREHOUSE\",\"VENDOR_NO\",\"DISTRIBUTION_FLAG\",\"IC_STATEMENT_TRANS_CODE\",\"INTERCOMPANY_STATEMENT_CODE\",\"REGIONAL_DISTRIBUTION_CENTER\",\"FORECASTING_MANAGEMENT_SYSTEM\",\"TRANSPORTATION_MANAGEMENT_SYSTEM\",\"WHSE_MANAGEMENT_SYSTEM\",\"YANTRA_SYSTEM\",\"RECEIPT_BASED_BILLING\",\"RDC_NO\",\"WMS_REASON_CODE\",\"DPR_RAMPUP_FLAG\",\"SHIPPER_ID_TMS\",\"MINILOAD_SYSTEM_INIDICATOR\",\"SYGMA_REGION_OFFICE_NO\",\"VALID_FLAG_ERO\",\"SYSCO_LOGISTICS_FLAG\",\"SAP_SYSTEM_FLAG\",\"REGION_ID\",\"IS_DELETED\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"SITE_DESC\" = ?,\"SYSTAR_FLAG\" = ?,\"STAGE_AND_HOLD_INDICATOR\" = ?,\"PROCUREMENT_OC\" = ?,\"NOTE_TYPE\" = ?,\"DOE_CENTRAL_WAREHOUSE\" = ?,\"VENDOR_NO\" = ?,\"DISTRIBUTION_FLAG\" = ?,\"IC_STATEMENT_TRANS_CODE\" = ?,\"INTERCOMPANY_STATEMENT_CODE\" = ?,\"REGIONAL_DISTRIBUTION_CENTER\" = ?,\"FORECASTING_MANAGEMENT_SYSTEM\" = ?,\"TRANSPORTATION_MANAGEMENT_SYSTEM\" = ?,\"WHSE_MANAGEMENT_SYSTEM\" = ?,\"YANTRA_SYSTEM\" = ?,\"RECEIPT_BASED_BILLING\" = ?,\"RDC_NO\" = ?,\"WMS_REASON_CODE\" = ?,\"DPR_RAMPUP_FLAG\" = ?,\"SHIPPER_ID_TMS\" = ?,\"MINILOAD_SYSTEM_INIDICATOR\" = ?,\"SYGMA_REGION_OFFICE_NO\" = ?,\"VALID_FLAG_ERO\" = ?,\"SYSCO_LOGISTICS_FLAG\" = ?,\"SAP_SYSTEM_FLAG\" = ?,\"REGION_ID\" = ?,\"IS_DELETED\" = ? WHERE \"SITE_ID\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SITEStruct SITE_tmp = new SITEStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;

				final String decryptedPassword_tDBInput_1 = context.SUS_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";"
						+ context.SUS_Additional_Params;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  REFERP.REFCAT, \n  REFERP.REFKEY, \n  REFERP.REFDAT\nFROM REFERP WHERE REFERP.REFCAT='DM'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.REFCAT = null;
						} else {

							row1.REFCAT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.REFKEY = null;
						} else {

							row1.REFKEY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.REFDAT = null;
						} else {

							row1.REFDAT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						// Code generated according to input schema and output schema
						row2.SITE_ID = row1.REFKEY;
						row2.SITE_DESC = row1.REFDAT.substring(0, 30);
						row2.SYSTAR_FLAG = row1.REFDAT.substring(30, 31);
						row2.STAGE_AND_HOLD_INDICATOR = row1.REFDAT.substring(31, 32);
						row2.PROCUREMENT_OC = row1.REFDAT.substring(32, 33);
						row2.NOTE_TYPE = row1.REFDAT.substring(33, 34);
						row2.DOE_CENTRAL_WAREHOUSE = row1.REFDAT.substring(34, 39);
						row2.VENDOR_NO = row1.REFDAT.substring(39, 49);
						row2.DISTRIBUTION_FLAG = row1.REFDAT.substring(49, 50);
						row2.IC_STATEMENT_TRANS_CODE = row1.REFDAT.substring(50, 55);
						row2.INTERCOMPANY_STATEMENT_CODE = row1.REFDAT.substring(55, 60);
						row2.REGIONAL_DISTRIBUTION_CENTER = row1.REFDAT.substring(60, 61);
						row2.FORECASTING_MANAGEMENT_SYSTEM = row1.REFDAT.substring(61, 62);
						row2.TRANSPORTATION_MANAGEMENT_SYSTEM = row1.REFDAT.substring(62, 63);
						row2.WHSE_MANAGEMENT_SYSTEM = row1.REFDAT.substring(63, 64);
						row2.YANTRA_SYSTEM = row1.REFDAT.substring(64, 65);
						row2.RECEIPT_BASED_BILLING = row1.REFDAT.substring(65, 66);
						row2.RDC_NO = row1.REFDAT.substring(66, 71);
						row2.WMS_REASON_CODE = row1.REFDAT.substring(71, 72);
						row2.DPR_RAMPUP_FLAG = row1.REFDAT.substring(72, 73);
						row2.SHIPPER_ID_TMS = row1.REFDAT.substring(73, 81);
						row2.MINILOAD_SYSTEM_INIDICATOR = row1.REFDAT.substring(81, 82);
						row2.SYGMA_REGION_OFFICE_NO = row1.REFDAT.substring(82, 87);
						row2.VALID_FLAG_ERO = row1.REFDAT.substring(87, 88);
						row2.SYSCO_LOGISTICS_FLAG = row1.REFDAT.substring(88, 89);
						row2.SAP_SYSTEM_FLAG = row1.REFDAT.substring(89, 90);
						row2.REGION_ID = "";
						row2.IS_DELETED = false;

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							SITE = null;

// # Output table : 'SITE'
							SITE_tmp.SITE_ID = row2.SITE_ID;
							SITE_tmp.SITE_DESC = row2.SITE_DESC;
							SITE_tmp.SYSTAR_FLAG = row2.SYSTAR_FLAG;
							SITE_tmp.STAGE_AND_HOLD_INDICATOR = row2.STAGE_AND_HOLD_INDICATOR;
							SITE_tmp.PROCUREMENT_OC = row2.PROCUREMENT_OC;
							SITE_tmp.NOTE_TYPE = row2.NOTE_TYPE;
							SITE_tmp.DOE_CENTRAL_WAREHOUSE = row2.DOE_CENTRAL_WAREHOUSE;
							SITE_tmp.VENDOR_NO = row2.VENDOR_NO;
							SITE_tmp.DISTRIBUTION_FLAG = row2.DISTRIBUTION_FLAG;
							SITE_tmp.IC_STATEMENT_TRANS_CODE = row2.IC_STATEMENT_TRANS_CODE;
							SITE_tmp.INTERCOMPANY_STATEMENT_CODE = row2.INTERCOMPANY_STATEMENT_CODE;
							SITE_tmp.REGIONAL_DISTRIBUTION_CENTER = row2.REGIONAL_DISTRIBUTION_CENTER;
							SITE_tmp.FORECASTING_MANAGEMENT_SYSTEM = row2.FORECASTING_MANAGEMENT_SYSTEM;
							SITE_tmp.TRANSPORTATION_MANAGEMENT_SYSTEM = row2.TRANSPORTATION_MANAGEMENT_SYSTEM;
							SITE_tmp.WHSE_MANAGEMENT_SYSTEM = row2.WHSE_MANAGEMENT_SYSTEM;
							SITE_tmp.YANTRA_SYSTEM = row2.YANTRA_SYSTEM;
							SITE_tmp.RECEIPT_BASED_BILLING = row2.RECEIPT_BASED_BILLING;
							SITE_tmp.RDC_NO = row2.RDC_NO;
							SITE_tmp.WMS_REASON_CODE = row2.WMS_REASON_CODE;
							SITE_tmp.DPR_RAMPUP_FLAG = row2.DPR_RAMPUP_FLAG;
							SITE_tmp.SHIPPER_ID_TMS = row2.SHIPPER_ID_TMS.trim() != ""
									? new BigDecimal(row2.SHIPPER_ID_TMS.trim())
									: null;
							SITE_tmp.MINILOAD_SYSTEM_INIDICATOR = row2.MINILOAD_SYSTEM_INIDICATOR;
							SITE_tmp.SYGMA_REGION_OFFICE_NO = row2.SYGMA_REGION_OFFICE_NO;
							SITE_tmp.VALID_FLAG_ERO = row2.VALID_FLAG_ERO;
							SITE_tmp.SYSCO_LOGISTICS_FLAG = row2.SYSCO_LOGISTICS_FLAG;
							SITE_tmp.SAP_SYSTEM_FLAG = row2.SAP_SYSTEM_FLAG;
							SITE_tmp.REGION_ID = row2.REGION_ID;
							SITE_tmp.IS_DELETED = row2.IS_DELETED;
							SITE = SITE_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "SITE"
						if (SITE != null) {
							row3 = null;

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "SITE"

								);
							}

							row3 = null;
							whetherReject_tDBOutput_1 = false;
							if (SITE.SITE_ID == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, SITE.SITE_ID);
							}

							int checkCount_tDBOutput_1 = -1;
							try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
								}
							}
							if (checkCount_tDBOutput_1 > 0) {
								if (SITE.SITE_DESC == null) {
									pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(1, SITE.SITE_DESC);
								}

								if (SITE.SYSTAR_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(2, SITE.SYSTAR_FLAG);
								}

								if (SITE.STAGE_AND_HOLD_INDICATOR == null) {
									pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(3, SITE.STAGE_AND_HOLD_INDICATOR);
								}

								if (SITE.PROCUREMENT_OC == null) {
									pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(4, SITE.PROCUREMENT_OC);
								}

								if (SITE.NOTE_TYPE == null) {
									pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(5, SITE.NOTE_TYPE);
								}

								if (SITE.DOE_CENTRAL_WAREHOUSE == null) {
									pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(6, SITE.DOE_CENTRAL_WAREHOUSE);
								}

								if (SITE.VENDOR_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(7, SITE.VENDOR_NO);
								}

								if (SITE.DISTRIBUTION_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(8, SITE.DISTRIBUTION_FLAG);
								}

								if (SITE.IC_STATEMENT_TRANS_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(9, SITE.IC_STATEMENT_TRANS_CODE);
								}

								if (SITE.INTERCOMPANY_STATEMENT_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(10, SITE.INTERCOMPANY_STATEMENT_CODE);
								}

								if (SITE.REGIONAL_DISTRIBUTION_CENTER == null) {
									pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(11, SITE.REGIONAL_DISTRIBUTION_CENTER);
								}

								if (SITE.FORECASTING_MANAGEMENT_SYSTEM == null) {
									pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(12, SITE.FORECASTING_MANAGEMENT_SYSTEM);
								}

								if (SITE.TRANSPORTATION_MANAGEMENT_SYSTEM == null) {
									pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(13, SITE.TRANSPORTATION_MANAGEMENT_SYSTEM);
								}

								if (SITE.WHSE_MANAGEMENT_SYSTEM == null) {
									pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(14, SITE.WHSE_MANAGEMENT_SYSTEM);
								}

								if (SITE.YANTRA_SYSTEM == null) {
									pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(15, SITE.YANTRA_SYSTEM);
								}

								if (SITE.RECEIPT_BASED_BILLING == null) {
									pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(16, SITE.RECEIPT_BASED_BILLING);
								}

								if (SITE.RDC_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(17, SITE.RDC_NO);
								}

								if (SITE.WMS_REASON_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(18, SITE.WMS_REASON_CODE);
								}

								if (SITE.DPR_RAMPUP_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(19, SITE.DPR_RAMPUP_FLAG);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(20, SITE.SHIPPER_ID_TMS);

								if (SITE.MINILOAD_SYSTEM_INIDICATOR == null) {
									pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(21, SITE.MINILOAD_SYSTEM_INIDICATOR);
								}

								if (SITE.SYGMA_REGION_OFFICE_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(22, SITE.SYGMA_REGION_OFFICE_NO);
								}

								if (SITE.VALID_FLAG_ERO == null) {
									pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(23, SITE.VALID_FLAG_ERO);
								}

								if (SITE.SYSCO_LOGISTICS_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(24, SITE.SYSCO_LOGISTICS_FLAG);
								}

								if (SITE.SAP_SYSTEM_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(25, SITE.SAP_SYSTEM_FLAG);
								}

								if (SITE.REGION_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(26, SITE.REGION_ID);
								}

								if (SITE.IS_DELETED == null) {
									pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tDBOutput_1.setBoolean(27, SITE.IS_DELETED);
								}

								if (SITE.SITE_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(28 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(28 + count_tDBOutput_1, SITE.SITE_ID);
								}

								try {

									int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
									updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row3 = new row3Struct();
									row3.SITE_ID = SITE.SITE_ID;
									row3.SITE_DESC = SITE.SITE_DESC;
									row3.SYSTAR_FLAG = SITE.SYSTAR_FLAG;
									row3.STAGE_AND_HOLD_INDICATOR = SITE.STAGE_AND_HOLD_INDICATOR;
									row3.PROCUREMENT_OC = SITE.PROCUREMENT_OC;
									row3.NOTE_TYPE = SITE.NOTE_TYPE;
									row3.DOE_CENTRAL_WAREHOUSE = SITE.DOE_CENTRAL_WAREHOUSE;
									row3.VENDOR_NO = SITE.VENDOR_NO;
									row3.DISTRIBUTION_FLAG = SITE.DISTRIBUTION_FLAG;
									row3.IC_STATEMENT_TRANS_CODE = SITE.IC_STATEMENT_TRANS_CODE;
									row3.INTERCOMPANY_STATEMENT_CODE = SITE.INTERCOMPANY_STATEMENT_CODE;
									row3.REGIONAL_DISTRIBUTION_CENTER = SITE.REGIONAL_DISTRIBUTION_CENTER;
									row3.FORECASTING_MANAGEMENT_SYSTEM = SITE.FORECASTING_MANAGEMENT_SYSTEM;
									row3.TRANSPORTATION_MANAGEMENT_SYSTEM = SITE.TRANSPORTATION_MANAGEMENT_SYSTEM;
									row3.WHSE_MANAGEMENT_SYSTEM = SITE.WHSE_MANAGEMENT_SYSTEM;
									row3.YANTRA_SYSTEM = SITE.YANTRA_SYSTEM;
									row3.RECEIPT_BASED_BILLING = SITE.RECEIPT_BASED_BILLING;
									row3.RDC_NO = SITE.RDC_NO;
									row3.WMS_REASON_CODE = SITE.WMS_REASON_CODE;
									row3.DPR_RAMPUP_FLAG = SITE.DPR_RAMPUP_FLAG;
									row3.SHIPPER_ID_TMS = SITE.SHIPPER_ID_TMS;
									row3.MINILOAD_SYSTEM_INIDICATOR = SITE.MINILOAD_SYSTEM_INIDICATOR;
									row3.SYGMA_REGION_OFFICE_NO = SITE.SYGMA_REGION_OFFICE_NO;
									row3.VALID_FLAG_ERO = SITE.VALID_FLAG_ERO;
									row3.SYSCO_LOGISTICS_FLAG = SITE.SYSCO_LOGISTICS_FLAG;
									row3.SAP_SYSTEM_FLAG = SITE.SAP_SYSTEM_FLAG;
									row3.REGION_ID = SITE.REGION_ID;
									row3.IS_DELETED = SITE.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row3.errorCode = ((java.sql.SQLException) e).getSQLState();
									row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							} else {
								if (SITE.SITE_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(1, SITE.SITE_ID);
								}

								if (SITE.SITE_DESC == null) {
									pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(2, SITE.SITE_DESC);
								}

								if (SITE.SYSTAR_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(3, SITE.SYSTAR_FLAG);
								}

								if (SITE.STAGE_AND_HOLD_INDICATOR == null) {
									pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(4, SITE.STAGE_AND_HOLD_INDICATOR);
								}

								if (SITE.PROCUREMENT_OC == null) {
									pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(5, SITE.PROCUREMENT_OC);
								}

								if (SITE.NOTE_TYPE == null) {
									pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(6, SITE.NOTE_TYPE);
								}

								if (SITE.DOE_CENTRAL_WAREHOUSE == null) {
									pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(7, SITE.DOE_CENTRAL_WAREHOUSE);
								}

								if (SITE.VENDOR_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(8, SITE.VENDOR_NO);
								}

								if (SITE.DISTRIBUTION_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(9, SITE.DISTRIBUTION_FLAG);
								}

								if (SITE.IC_STATEMENT_TRANS_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(10, SITE.IC_STATEMENT_TRANS_CODE);
								}

								if (SITE.INTERCOMPANY_STATEMENT_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(11, SITE.INTERCOMPANY_STATEMENT_CODE);
								}

								if (SITE.REGIONAL_DISTRIBUTION_CENTER == null) {
									pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(12, SITE.REGIONAL_DISTRIBUTION_CENTER);
								}

								if (SITE.FORECASTING_MANAGEMENT_SYSTEM == null) {
									pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(13, SITE.FORECASTING_MANAGEMENT_SYSTEM);
								}

								if (SITE.TRANSPORTATION_MANAGEMENT_SYSTEM == null) {
									pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(14, SITE.TRANSPORTATION_MANAGEMENT_SYSTEM);
								}

								if (SITE.WHSE_MANAGEMENT_SYSTEM == null) {
									pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(15, SITE.WHSE_MANAGEMENT_SYSTEM);
								}

								if (SITE.YANTRA_SYSTEM == null) {
									pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(16, SITE.YANTRA_SYSTEM);
								}

								if (SITE.RECEIPT_BASED_BILLING == null) {
									pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(17, SITE.RECEIPT_BASED_BILLING);
								}

								if (SITE.RDC_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(18, SITE.RDC_NO);
								}

								if (SITE.WMS_REASON_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(19, SITE.WMS_REASON_CODE);
								}

								if (SITE.DPR_RAMPUP_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(20, SITE.DPR_RAMPUP_FLAG);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(21, SITE.SHIPPER_ID_TMS);

								if (SITE.MINILOAD_SYSTEM_INIDICATOR == null) {
									pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(22, SITE.MINILOAD_SYSTEM_INIDICATOR);
								}

								if (SITE.SYGMA_REGION_OFFICE_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(23, SITE.SYGMA_REGION_OFFICE_NO);
								}

								if (SITE.VALID_FLAG_ERO == null) {
									pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(24, SITE.VALID_FLAG_ERO);
								}

								if (SITE.SYSCO_LOGISTICS_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(25, SITE.SYSCO_LOGISTICS_FLAG);
								}

								if (SITE.SAP_SYSTEM_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(26, SITE.SAP_SYSTEM_FLAG);
								}

								if (SITE.REGION_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(27, SITE.REGION_ID);
								}

								if (SITE.IS_DELETED == null) {
									pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.BOOLEAN);
								} else {
									pstmtInsert_tDBOutput_1.setBoolean(28, SITE.IS_DELETED);
								}

								try {

									int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
									insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row3 = new row3Struct();
									row3.SITE_ID = SITE.SITE_ID;
									row3.SITE_DESC = SITE.SITE_DESC;
									row3.SYSTAR_FLAG = SITE.SYSTAR_FLAG;
									row3.STAGE_AND_HOLD_INDICATOR = SITE.STAGE_AND_HOLD_INDICATOR;
									row3.PROCUREMENT_OC = SITE.PROCUREMENT_OC;
									row3.NOTE_TYPE = SITE.NOTE_TYPE;
									row3.DOE_CENTRAL_WAREHOUSE = SITE.DOE_CENTRAL_WAREHOUSE;
									row3.VENDOR_NO = SITE.VENDOR_NO;
									row3.DISTRIBUTION_FLAG = SITE.DISTRIBUTION_FLAG;
									row3.IC_STATEMENT_TRANS_CODE = SITE.IC_STATEMENT_TRANS_CODE;
									row3.INTERCOMPANY_STATEMENT_CODE = SITE.INTERCOMPANY_STATEMENT_CODE;
									row3.REGIONAL_DISTRIBUTION_CENTER = SITE.REGIONAL_DISTRIBUTION_CENTER;
									row3.FORECASTING_MANAGEMENT_SYSTEM = SITE.FORECASTING_MANAGEMENT_SYSTEM;
									row3.TRANSPORTATION_MANAGEMENT_SYSTEM = SITE.TRANSPORTATION_MANAGEMENT_SYSTEM;
									row3.WHSE_MANAGEMENT_SYSTEM = SITE.WHSE_MANAGEMENT_SYSTEM;
									row3.YANTRA_SYSTEM = SITE.YANTRA_SYSTEM;
									row3.RECEIPT_BASED_BILLING = SITE.RECEIPT_BASED_BILLING;
									row3.RDC_NO = SITE.RDC_NO;
									row3.WMS_REASON_CODE = SITE.WMS_REASON_CODE;
									row3.DPR_RAMPUP_FLAG = SITE.DPR_RAMPUP_FLAG;
									row3.SHIPPER_ID_TMS = SITE.SHIPPER_ID_TMS;
									row3.MINILOAD_SYSTEM_INIDICATOR = SITE.MINILOAD_SYSTEM_INIDICATOR;
									row3.SYGMA_REGION_OFFICE_NO = SITE.SYGMA_REGION_OFFICE_NO;
									row3.VALID_FLAG_ERO = SITE.VALID_FLAG_ERO;
									row3.SYSCO_LOGISTICS_FLAG = SITE.SYSCO_LOGISTICS_FLAG;
									row3.SAP_SYSTEM_FLAG = SITE.SAP_SYSTEM_FLAG;
									row3.REGION_ID = SITE.REGION_ID;
									row3.IS_DELETED = SITE.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row3.errorCode = ((java.sql.SQLException) e).getSQLState();
									row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							}
							if (!whetherReject_tDBOutput_1) {
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if (rowsToCommitCount_tDBOutput_1 != 0) {

								}
								conn_tDBOutput_1.commit();
								if (rowsToCommitCount_tDBOutput_1 != 0) {

									rowsToCommitCount_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[30];

								if (row3.SITE_ID != null) { //
									row_tLogRow_1[0] = String.valueOf(row3.SITE_ID);

								} //

								if (row3.SITE_DESC != null) { //
									row_tLogRow_1[1] = String.valueOf(row3.SITE_DESC);

								} //

								if (row3.SYSTAR_FLAG != null) { //
									row_tLogRow_1[2] = String.valueOf(row3.SYSTAR_FLAG);

								} //

								if (row3.STAGE_AND_HOLD_INDICATOR != null) { //
									row_tLogRow_1[3] = String.valueOf(row3.STAGE_AND_HOLD_INDICATOR);

								} //

								if (row3.PROCUREMENT_OC != null) { //
									row_tLogRow_1[4] = String.valueOf(row3.PROCUREMENT_OC);

								} //

								if (row3.NOTE_TYPE != null) { //
									row_tLogRow_1[5] = String.valueOf(row3.NOTE_TYPE);

								} //

								if (row3.DOE_CENTRAL_WAREHOUSE != null) { //
									row_tLogRow_1[6] = String.valueOf(row3.DOE_CENTRAL_WAREHOUSE);

								} //

								if (row3.VENDOR_NO != null) { //
									row_tLogRow_1[7] = String.valueOf(row3.VENDOR_NO);

								} //

								if (row3.DISTRIBUTION_FLAG != null) { //
									row_tLogRow_1[8] = String.valueOf(row3.DISTRIBUTION_FLAG);

								} //

								if (row3.IC_STATEMENT_TRANS_CODE != null) { //
									row_tLogRow_1[9] = String.valueOf(row3.IC_STATEMENT_TRANS_CODE);

								} //

								if (row3.INTERCOMPANY_STATEMENT_CODE != null) { //
									row_tLogRow_1[10] = String.valueOf(row3.INTERCOMPANY_STATEMENT_CODE);

								} //

								if (row3.REGIONAL_DISTRIBUTION_CENTER != null) { //
									row_tLogRow_1[11] = String.valueOf(row3.REGIONAL_DISTRIBUTION_CENTER);

								} //

								if (row3.FORECASTING_MANAGEMENT_SYSTEM != null) { //
									row_tLogRow_1[12] = String.valueOf(row3.FORECASTING_MANAGEMENT_SYSTEM);

								} //

								if (row3.TRANSPORTATION_MANAGEMENT_SYSTEM != null) { //
									row_tLogRow_1[13] = String.valueOf(row3.TRANSPORTATION_MANAGEMENT_SYSTEM);

								} //

								if (row3.WHSE_MANAGEMENT_SYSTEM != null) { //
									row_tLogRow_1[14] = String.valueOf(row3.WHSE_MANAGEMENT_SYSTEM);

								} //

								if (row3.YANTRA_SYSTEM != null) { //
									row_tLogRow_1[15] = String.valueOf(row3.YANTRA_SYSTEM);

								} //

								if (row3.RECEIPT_BASED_BILLING != null) { //
									row_tLogRow_1[16] = String.valueOf(row3.RECEIPT_BASED_BILLING);

								} //

								if (row3.RDC_NO != null) { //
									row_tLogRow_1[17] = String.valueOf(row3.RDC_NO);

								} //

								if (row3.WMS_REASON_CODE != null) { //
									row_tLogRow_1[18] = String.valueOf(row3.WMS_REASON_CODE);

								} //

								if (row3.DPR_RAMPUP_FLAG != null) { //
									row_tLogRow_1[19] = String.valueOf(row3.DPR_RAMPUP_FLAG);

								} //

								if (row3.SHIPPER_ID_TMS != null) { //
									row_tLogRow_1[20] = row3.SHIPPER_ID_TMS.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.MINILOAD_SYSTEM_INIDICATOR != null) { //
									row_tLogRow_1[21] = String.valueOf(row3.MINILOAD_SYSTEM_INIDICATOR);

								} //

								if (row3.SYGMA_REGION_OFFICE_NO != null) { //
									row_tLogRow_1[22] = String.valueOf(row3.SYGMA_REGION_OFFICE_NO);

								} //

								if (row3.VALID_FLAG_ERO != null) { //
									row_tLogRow_1[23] = String.valueOf(row3.VALID_FLAG_ERO);

								} //

								if (row3.SYSCO_LOGISTICS_FLAG != null) { //
									row_tLogRow_1[24] = String.valueOf(row3.SYSCO_LOGISTICS_FLAG);

								} //

								if (row3.SAP_SYSTEM_FLAG != null) { //
									row_tLogRow_1[25] = String.valueOf(row3.SAP_SYSTEM_FLAG);

								} //

								if (row3.REGION_ID != null) { //
									row_tLogRow_1[26] = String.valueOf(row3.REGION_ID);

								} //

								if (row3.IS_DELETED != null) { //
									row_tLogRow_1[27] = String.valueOf(row3.IS_DELETED);

								} //

								if (row3.errorCode != null) { //
									row_tLogRow_1[28] = String.valueOf(row3.errorCode);

								} //

								if (row3.errorMessage != null) { //
									row_tLogRow_1[29] = String.valueOf(row3.errorMessage);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "SITE"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SITE");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Site_Inbound Site_InboundClass = new Site_Inbound();

		int exitCode = Site_InboundClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Site_Inbound.class.getClassLoader()
					.getResourceAsStream("sus_sli_etl/site_inbound_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Site_Inbound.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("SUS_Login", "id_String");
					if (context.getStringValue("SUS_Login") == null) {
						context.SUS_Login = null;
					} else {
						context.SUS_Login = (String) context.getProperty("SUS_Login");
					}
					context.setContextType("SUS_Password", "id_Password");
					if (context.getStringValue("SUS_Password") == null) {
						context.SUS_Password = null;
					} else {
						String pwd_SUS_Password_value = context.getProperty("SUS_Password");
						context.SUS_Password = null;
						if (pwd_SUS_Password_value != null) {
							if (context_param.containsKey("SUS_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.SUS_Password = pwd_SUS_Password_value;
							} else if (!pwd_SUS_Password_value.isEmpty()) {
								try {
									context.SUS_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_SUS_Password_value);
									context.put("SUS_Password", context.SUS_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("SUS_Database", "id_String");
					if (context.getStringValue("SUS_Database") == null) {
						context.SUS_Database = null;
					} else {
						context.SUS_Database = (String) context.getProperty("SUS_Database");
					}
					context.setContextType("SUS_Server", "id_String");
					if (context.getStringValue("SUS_Server") == null) {
						context.SUS_Server = null;
					} else {
						context.SUS_Server = (String) context.getProperty("SUS_Server");
					}
					context.setContextType("SUS_Additional_Params", "id_String");
					if (context.getStringValue("SUS_Additional_Params") == null) {
						context.SUS_Additional_Params = null;
					} else {
						context.SUS_Additional_Params = (String) context.getProperty("SUS_Additional_Params");
					}
					context.setContextType("GIM_AdditionalParams", "id_String");
					if (context.getStringValue("GIM_AdditionalParams") == null) {
						context.GIM_AdditionalParams = null;
					} else {
						context.GIM_AdditionalParams = (String) context.getProperty("GIM_AdditionalParams");
					}
					context.setContextType("GIM_Password", "id_Password");
					if (context.getStringValue("GIM_Password") == null) {
						context.GIM_Password = null;
					} else {
						String pwd_GIM_Password_value = context.getProperty("GIM_Password");
						context.GIM_Password = null;
						if (pwd_GIM_Password_value != null) {
							if (context_param.containsKey("GIM_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.GIM_Password = pwd_GIM_Password_value;
							} else if (!pwd_GIM_Password_value.isEmpty()) {
								try {
									context.GIM_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_GIM_Password_value);
									context.put("GIM_Password", context.GIM_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("GIM_Server", "id_String");
					if (context.getStringValue("GIM_Server") == null) {
						context.GIM_Server = null;
					} else {
						context.GIM_Server = (String) context.getProperty("GIM_Server");
					}
					context.setContextType("GIM_Database", "id_String");
					if (context.getStringValue("GIM_Database") == null) {
						context.GIM_Database = null;
					} else {
						context.GIM_Database = (String) context.getProperty("GIM_Database");
					}
					context.setContextType("GIM_Port", "id_String");
					if (context.getStringValue("GIM_Port") == null) {
						context.GIM_Port = null;
					} else {
						context.GIM_Port = (String) context.getProperty("GIM_Port");
					}
					context.setContextType("GIM_Schema_Master", "id_String");
					if (context.getStringValue("GIM_Schema_Master") == null) {
						context.GIM_Schema_Master = null;
					} else {
						context.GIM_Schema_Master = (String) context.getProperty("GIM_Schema_Master");
					}
					context.setContextType("GIM_Login", "id_String");
					if (context.getStringValue("GIM_Login") == null) {
						context.GIM_Login = null;
					} else {
						context.GIM_Login = (String) context.getProperty("GIM_Login");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("SUS_Login")) {
				context.SUS_Login = (String) parentContextMap.get("SUS_Login");
			}
			if (parentContextMap.containsKey("SUS_Password")) {
				context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
			}
			if (parentContextMap.containsKey("SUS_Database")) {
				context.SUS_Database = (String) parentContextMap.get("SUS_Database");
			}
			if (parentContextMap.containsKey("SUS_Server")) {
				context.SUS_Server = (String) parentContextMap.get("SUS_Server");
			}
			if (parentContextMap.containsKey("SUS_Additional_Params")) {
				context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
			}
			if (parentContextMap.containsKey("GIM_AdditionalParams")) {
				context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
			}
			if (parentContextMap.containsKey("GIM_Password")) {
				context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
			}
			if (parentContextMap.containsKey("GIM_Server")) {
				context.GIM_Server = (String) parentContextMap.get("GIM_Server");
			}
			if (parentContextMap.containsKey("GIM_Database")) {
				context.GIM_Database = (String) parentContextMap.get("GIM_Database");
			}
			if (parentContextMap.containsKey("GIM_Port")) {
				context.GIM_Port = (String) parentContextMap.get("GIM_Port");
			}
			if (parentContextMap.containsKey("GIM_Schema_Master")) {
				context.GIM_Schema_Master = (String) parentContextMap.get("GIM_Schema_Master");
			}
			if (parentContextMap.containsKey("GIM_Login")) {
				context.GIM_Login = (String) parentContextMap.get("GIM_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SUS_Password");
		parametersToEncrypt.add("GIM_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Site_Inbound");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 169689 characters generated by Talend Open Studio for Data Integration on the
 * July 21, 2022 at 7:15:58 PM IST
 ************************************************************************************************/