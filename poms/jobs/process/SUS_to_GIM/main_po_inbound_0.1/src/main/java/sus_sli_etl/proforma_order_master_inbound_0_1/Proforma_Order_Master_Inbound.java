// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sus_sli_etl.proforma_order_master_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.CharSetHandling;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Proforma_Order_Master_Inbound Purpose: Migrating data from IMHAE8FF to PROFORMA_ORDER_HEADER and from IMHBE9FF to PROFORMA_ORDER_DETAIL<br>
 * Description: Migrating data from IMHAE8FF to PROFORMA_ORDER_HEADER and from IMHBE9FF to PROFORMA_ORDER_DETAIL <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Proforma_Order_Master_Inbound implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(opco != null){
				
					this.setProperty("opco", opco.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(sopco != null){
				
					this.setProperty("sopco", sopco.toString());
				
			}
			
			if(svop != null){
				
					this.setProperty("svop", svop.toString());
				
			}
			
			if(GIM_AdditionalParams != null){
				
					this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());
				
			}
			
			if(GIM_Database != null){
				
					this.setProperty("GIM_Database", GIM_Database.toString());
				
			}
			
			if(GIM_Login != null){
				
					this.setProperty("GIM_Login", GIM_Login.toString());
				
			}
			
			if(GIM_Password != null){
				
					this.setProperty("GIM_Password", GIM_Password.toString());
				
			}
			
			if(GIM_Port != null){
				
					this.setProperty("GIM_Port", GIM_Port.toString());
				
			}
			
			if(GIM_Schema_Demand != null){
				
					this.setProperty("GIM_Schema_Demand", GIM_Schema_Demand.toString());
				
			}
			
			if(GIM_Schema_Inventory != null){
				
					this.setProperty("GIM_Schema_Inventory", GIM_Schema_Inventory.toString());
				
			}
			
			if(GIM_Schema_Master != null){
				
					this.setProperty("GIM_Schema_Master", GIM_Schema_Master.toString());
				
			}
			
			if(GIM_Schema_Migrating_Test != null){
				
					this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());
				
			}
			
			if(GIM_Schema_Order_Processing != null){
				
					this.setProperty("GIM_Schema_Order_Processing", GIM_Schema_Order_Processing.toString());
				
			}
			
			if(GIM_Schema_PO != null){
				
					this.setProperty("GIM_Schema_PO", GIM_Schema_PO.toString());
				
			}
			
			if(GIM_Schema_System != null){
				
					this.setProperty("GIM_Schema_System", GIM_Schema_System.toString());
				
			}
			
			if(GIM_Server != null){
				
					this.setProperty("GIM_Server", GIM_Server.toString());
				
			}
			
			if(SUS_Additional_Params != null){
				
					this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());
				
			}
			
			if(SUS_Database != null){
				
					this.setProperty("SUS_Database", SUS_Database.toString());
				
			}
			
			if(SUS_Database_ARDBFA != null){
				
					this.setProperty("SUS_Database_ARDBFA", SUS_Database_ARDBFA.toString());
				
			}
			
			if(SUS_Login != null){
				
					this.setProperty("SUS_Login", SUS_Login.toString());
				
			}
			
			if(SUS_Password != null){
				
					this.setProperty("SUS_Password", SUS_Password.toString());
				
			}
			
			if(SUS_Port != null){
				
					this.setProperty("SUS_Port", SUS_Port.toString());
				
			}
			
			if(SUS_Schema != null){
				
					this.setProperty("SUS_Schema", SUS_Schema.toString());
				
			}
			
			if(SUS_Server != null){
				
					this.setProperty("SUS_Server", SUS_Server.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String opco;
public String getOpco(){
	return this.opco;
}
public String server;
public String getServer(){
	return this.server;
}
public String sopco;
public String getSopco(){
	return this.sopco;
}
public String svop;
public String getSvop(){
	return this.svop;
}
public String GIM_AdditionalParams;
public String getGIM_AdditionalParams(){
	return this.GIM_AdditionalParams;
}
public String GIM_Database;
public String getGIM_Database(){
	return this.GIM_Database;
}
public String GIM_Login;
public String getGIM_Login(){
	return this.GIM_Login;
}
public java.lang.String GIM_Password;
public java.lang.String getGIM_Password(){
	return this.GIM_Password;
}
public String GIM_Port;
public String getGIM_Port(){
	return this.GIM_Port;
}
public String GIM_Schema_Demand;
public String getGIM_Schema_Demand(){
	return this.GIM_Schema_Demand;
}
public String GIM_Schema_Inventory;
public String getGIM_Schema_Inventory(){
	return this.GIM_Schema_Inventory;
}
public String GIM_Schema_Master;
public String getGIM_Schema_Master(){
	return this.GIM_Schema_Master;
}
public String GIM_Schema_Migrating_Test;
public String getGIM_Schema_Migrating_Test(){
	return this.GIM_Schema_Migrating_Test;
}
public String GIM_Schema_Order_Processing;
public String getGIM_Schema_Order_Processing(){
	return this.GIM_Schema_Order_Processing;
}
public String GIM_Schema_PO;
public String getGIM_Schema_PO(){
	return this.GIM_Schema_PO;
}
public String GIM_Schema_System;
public String getGIM_Schema_System(){
	return this.GIM_Schema_System;
}
public String GIM_Server;
public String getGIM_Server(){
	return this.GIM_Server;
}
public String SUS_Additional_Params;
public String getSUS_Additional_Params(){
	return this.SUS_Additional_Params;
}
public String SUS_Database;
public String getSUS_Database(){
	return this.SUS_Database;
}
public String SUS_Database_ARDBFA;
public String getSUS_Database_ARDBFA(){
	return this.SUS_Database_ARDBFA;
}
public String SUS_Login;
public String getSUS_Login(){
	return this.SUS_Login;
}
public java.lang.String SUS_Password;
public java.lang.String getSUS_Password(){
	return this.SUS_Password;
}
public String SUS_Port;
public String getSUS_Port(){
	return this.SUS_Port;
}
public String SUS_Schema;
public String getSUS_Schema(){
	return this.SUS_Schema;
}
public String SUS_Server;
public String getSUS_Server(){
	return this.SUS_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Proforma_Order_Master_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_xdZIQESEEe22MZO8DsrjmQ", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_xdZIQESEEe22MZO8DsrjmQ", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Proforma_Order_Master_Inbound.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Proforma_Order_Master_Inbound.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class Main_StatStruct implements routines.system.IPersistableRow<Main_StatStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_StatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
Main_StatStruct Main_Stat = new Main_StatStruct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Stat");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[7];

        public void addRow(String[] row) {

            for (int i = 0; i < 7; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 6 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 6 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[6] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"moment","pid","job","origin","message_type","message","duration",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_StatStruct Main_Stat_tmp = new Main_StatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row3.pid = pid;
		row3.root_pid = rootPid;
		row3.father_pid = fatherPid;	
    	row3.project = projectName;
    	row3.job = jobName;
    	row3.context = contextStr;
		row3.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row3.message = scm.getMessage();
		row3.duration = scm.getDuration();
		row3.moment = scm.getMoment();
		row3.message_type = scm.getMessageType();
		row3.job_version = scm.getJobVersion();
		row3.job_repository_id = scm.getJobId();
		row3.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Main_Stat = null;


// # Output table : 'Main_Stat'
Main_Stat_tmp.moment = row3.moment ;
Main_Stat_tmp.pid = row3.pid ;
Main_Stat_tmp.job = row3.job ;
Main_Stat_tmp.origin = row3.origin ;
Main_Stat_tmp.message_type = row3.message_type ;
Main_Stat_tmp.message = row3.message ;
Main_Stat_tmp.duration = row3.duration ;
Main_Stat = Main_Stat_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Main_Stat"
if(Main_Stat != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Stat"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[7];
   				
	    		if(Main_Stat.moment != null) { //              
                 row_tLogRow_1[0]=    						
								FormatterUtils.format_Date(Main_Stat.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.pid != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(Main_Stat.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.job != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(Main_Stat.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.origin != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(Main_Stat.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message_type != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(Main_Stat.message_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(Main_Stat.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.duration != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(Main_Stat.duration)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "Main_Stat"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Stat");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_LogStruct implements routines.system.IPersistableRow<Main_LogStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_LogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
Main_LogStruct Main_Log = new Main_LogStruct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Log");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_LogStruct Main_Log_tmp = new Main_LogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row4.type = lcm.getType();
		row4.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row4.priority = lcm.getPriority();
		row4.message = lcm.getMessage();
		row4.code = lcm.getCode();
		
		row4.moment = java.util.Calendar.getInstance().getTime();
	
    	row4.pid = pid;
		row4.root_pid = rootPid;
		row4.father_pid = fatherPid;
	
    	row4.project = projectName;
    	row4.job = jobName;
    	row4.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Main_Log = null;


// # Output table : 'Main_Log'
Main_Log_tmp.moment = row4.moment ;
Main_Log_tmp.pid = row4.pid ;
Main_Log_tmp.job = row4.job ;
Main_Log_tmp.type = row4.type ;
Main_Log_tmp.origin = row4.origin ;
Main_Log_tmp.message = row4.message ;
Main_Log = Main_Log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Main_Log"
if(Main_Log != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Log"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(Main_Log.moment != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(Main_Log.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.pid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.job != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.type != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.origin != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.message != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "Main_Log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Log");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_Flow_MeterStruct implements routines.system.IPersistableRow<Main_Flow_MeterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_Flow_MeterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();
Main_Flow_MeterStruct Main_Flow_Meter = new Main_Flow_MeterStruct();





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Flow_Meter");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("tLogRow_3");
        util_tLogRow_3.addRow(new String[]{"moment","pid","job","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_Flow_MeterStruct Main_Flow_Meter_tmp = new Main_Flow_MeterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row3_0.pid = pid;
		row3_0.root_pid = rootPid;
		row3_0.father_pid = fatherPid;	
        row3_0.project = projectName;
        row3_0.job = jobName;
        row3_0.context = contextStr;
		row3_0.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row3_0.moment = mcm.getMoment();
		row3_0.job_version = mcm.getJobVersion();
		row3_0.job_repository_id = mcm.getJobId();
		row3_0.system_pid = mcm.getSystemPid();
		row3_0.label = mcm.getLabel();
		row3_0.count = mcm.getCount();
		row3_0.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row3_0.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Main_Flow_Meter = null;


// # Output table : 'Main_Flow_Meter'
Main_Flow_Meter_tmp.moment = row3_0.moment ;
Main_Flow_Meter_tmp.pid = row3_0.pid ;
Main_Flow_Meter_tmp.job = row3_0.job ;
Main_Flow_Meter_tmp.origin = row3_0.origin ;
Main_Flow_Meter_tmp.label = row3_0.label ;
Main_Flow_Meter_tmp.count = row3_0.count ;
Main_Flow_Meter_tmp.reference = row3_0.reference ;
Main_Flow_Meter_tmp.thresholds = row3_0.thresholds ;
Main_Flow_Meter = Main_Flow_Meter_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Main_Flow_Meter"
if(Main_Flow_Meter != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Flow_Meter"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[8];
   				
	    		if(Main_Flow_Meter.moment != null) { //              
                 row_tLogRow_3[0]=    						
								FormatterUtils.format_Date(Main_Flow_Meter.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.pid != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(Main_Flow_Meter.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.job != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(Main_Flow_Meter.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.origin != null) { //              
                 row_tLogRow_3[3]=    						    
				                String.valueOf(Main_Flow_Meter.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.label != null) { //              
                 row_tLogRow_3[4]=    						    
				                String.valueOf(Main_Flow_Meter.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.count != null) { //              
                 row_tLogRow_3[5]=    						    
				                String.valueOf(Main_Flow_Meter.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.reference != null) { //              
                 row_tLogRow_3[6]=    						    
				                String.valueOf(Main_Flow_Meter.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.thresholds != null) { //              
                 row_tLogRow_3[7]=    						    
				                String.valueOf(Main_Flow_Meter.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "Main_Flow_Meter"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Flow_Meter");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Starting the Migrating Data from IMHAE8FF to PROFORMA_ORDER_HEADER...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class PROFORMA_ORDER_HEADERStruct implements routines.system.IPersistableRow<PROFORMA_ORDER_HEADERStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public String TERMS;

				public String getTERMS () {
					return this.TERMS;
				}
				
			    public BigDecimal FREIGHT_RATE;

				public BigDecimal getFREIGHT_RATE () {
					return this.FREIGHT_RATE;
				}
				
			    public String FREIGHT_RATE_TYPE;

				public String getFREIGHT_RATE_TYPE () {
					return this.FREIGHT_RATE_TYPE;
				}
				
			    public BigDecimal UNLOADING_CHARGE;

				public BigDecimal getUNLOADING_CHARGE () {
					return this.UNLOADING_CHARGE;
				}
				
			    public String UNLOADING_CHARGE_TYPE;

				public String getUNLOADING_CHARGE_TYPE () {
					return this.UNLOADING_CHARGE_TYPE;
				}
				
			    public BigDecimal PICKUP_ALLOWANCE_RATE;

				public BigDecimal getPICKUP_ALLOWANCE_RATE () {
					return this.PICKUP_ALLOWANCE_RATE;
				}
				
			    public String PICKUP_ALLOWANCE_TYPE;

				public String getPICKUP_ALLOWANCE_TYPE () {
					return this.PICKUP_ALLOWANCE_TYPE;
				}
				
			    public BigDecimal PICKUP_ALLOWANCE_FROM_BRACKET;

				public BigDecimal getPICKUP_ALLOWANCE_FROM_BRACKET () {
					return this.PICKUP_ALLOWANCE_FROM_BRACKET;
				}
				
			    public BigDecimal PICKUP_ALLOWANCE_TO_BRACKET;

				public BigDecimal getPICKUP_ALLOWANCE_TO_BRACKET () {
					return this.PICKUP_ALLOWANCE_TO_BRACKET;
				}
				
			    public String FREIGHT_VENDOR_TERMS;

				public String getFREIGHT_VENDOR_TERMS () {
					return this.FREIGHT_VENDOR_TERMS;
				}
				
			    public BigDecimal ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE;

				public BigDecimal getALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE () {
					return this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE;
				}
				
			    public BigDecimal ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;

				public BigDecimal getALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT () {
					return this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
				}
				
			    public BigDecimal TOTAL_UNLOADING_CHARGE;

				public BigDecimal getTOTAL_UNLOADING_CHARGE () {
					return this.TOTAL_UNLOADING_CHARGE;
				}
				
			    public BigDecimal TOTAT_FOB_COST;

				public BigDecimal getTOTAT_FOB_COST () {
					return this.TOTAT_FOB_COST;
				}
				
			    public BigDecimal TOTAL_FREIGHT_COST;

				public BigDecimal getTOTAL_FREIGHT_COST () {
					return this.TOTAL_FREIGHT_COST;
				}
				
			    public BigDecimal TOTAL_AP_COST;

				public BigDecimal getTOTAL_AP_COST () {
					return this.TOTAL_AP_COST;
				}
				
			    public BigDecimal TOTAL_PICKUP_ALLOWANCE;

				public BigDecimal getTOTAL_PICKUP_ALLOWANCE () {
					return this.TOTAL_PICKUP_ALLOWANCE;
				}
				
			    public BigDecimal TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH;

				public BigDecimal getTOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH () {
					return this.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH;
				}
				
			    public BigDecimal TOTAL_BRACKET_DIFFERENTIAL;

				public BigDecimal getTOTAL_BRACKET_DIFFERENTIAL () {
					return this.TOTAL_BRACKET_DIFFERENTIAL;
				}
				
			    public BigDecimal TOTAL_NON_DISTRB_ALLOWANCE;

				public BigDecimal getTOTAL_NON_DISTRB_ALLOWANCE () {
					return this.TOTAL_NON_DISTRB_ALLOWANCE;
				}
				
			    public String REVISED_TERMS;

				public String getREVISED_TERMS () {
					return this.REVISED_TERMS;
				}
				
			    public BigDecimal REVISED_FREIGHT_RATE;

				public BigDecimal getREVISED_FREIGHT_RATE () {
					return this.REVISED_FREIGHT_RATE;
				}
				
			    public String REVISED_FREIGHT_RATE_TYPE;

				public String getREVISED_FREIGHT_RATE_TYPE () {
					return this.REVISED_FREIGHT_RATE_TYPE;
				}
				
			    public BigDecimal REVISED_UNLOADING_CHARGE;

				public BigDecimal getREVISED_UNLOADING_CHARGE () {
					return this.REVISED_UNLOADING_CHARGE;
				}
				
			    public String REVISED_UNLOADING_CHARGE_TYPE;

				public String getREVISED_UNLOADING_CHARGE_TYPE () {
					return this.REVISED_UNLOADING_CHARGE_TYPE;
				}
				
			    public BigDecimal REVISED_PICKUP_ALLOWANCE_RATE;

				public BigDecimal getREVISED_PICKUP_ALLOWANCE_RATE () {
					return this.REVISED_PICKUP_ALLOWANCE_RATE;
				}
				
			    public String REVISED_PICKUP_ALLOWANCE_TYPE;

				public String getREVISED_PICKUP_ALLOWANCE_TYPE () {
					return this.REVISED_PICKUP_ALLOWANCE_TYPE;
				}
				
			    public BigDecimal REVISED_PICKUP_ALLOWANCE_FROM_BRACKET;

				public BigDecimal getREVISED_PICKUP_ALLOWANCE_FROM_BRACKET () {
					return this.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET;
				}
				
			    public BigDecimal REVISED_PICKUP_ALLOWANCE_TO_BRACKET;

				public BigDecimal getREVISED_PICKUP_ALLOWANCE_TO_BRACKET () {
					return this.REVISED_PICKUP_ALLOWANCE_TO_BRACKET;
				}
				
			    public String REVISED_FREIGHT_VENDOR_TERMS;

				public String getREVISED_FREIGHT_VENDOR_TERMS () {
					return this.REVISED_FREIGHT_VENDOR_TERMS;
				}
				
			    public BigDecimal REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;

				public BigDecimal getREVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH () {
					return this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
				}
				
			    public BigDecimal REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;

				public BigDecimal getREVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT () {
					return this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
				}
				
			    public BigDecimal REVISED_TOTAL_UNLOADING_CHARGE;

				public BigDecimal getREVISED_TOTAL_UNLOADING_CHARGE () {
					return this.REVISED_TOTAL_UNLOADING_CHARGE;
				}
				
			    public BigDecimal REVISED_TOTAL_FOB_COST;

				public BigDecimal getREVISED_TOTAL_FOB_COST () {
					return this.REVISED_TOTAL_FOB_COST;
				}
				
			    public BigDecimal REVISED_TOTAL_FREIGHT_COST;

				public BigDecimal getREVISED_TOTAL_FREIGHT_COST () {
					return this.REVISED_TOTAL_FREIGHT_COST;
				}
				
			    public BigDecimal REVISED_TOTAL_AP_COST;

				public BigDecimal getREVISED_TOTAL_AP_COST () {
					return this.REVISED_TOTAL_AP_COST;
				}
				
			    public BigDecimal REVISED_TOTAL_PICKUP_ALLOWANCE;

				public BigDecimal getREVISED_TOTAL_PICKUP_ALLOWANCE () {
					return this.REVISED_TOTAL_PICKUP_ALLOWANCE;
				}
				
			    public BigDecimal REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT;

				public BigDecimal getREVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT () {
					return this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT;
				}
				
			    public BigDecimal REVISED_TOTAL_BRACKET_DIFFERENTIAL;

				public BigDecimal getREVISED_TOTAL_BRACKET_DIFFERENTIAL () {
					return this.REVISED_TOTAL_BRACKET_DIFFERENTIAL;
				}
				
			    public String MERCH_DEFAULT_REASON_CODE;

				public String getMERCH_DEFAULT_REASON_CODE () {
					return this.MERCH_DEFAULT_REASON_CODE;
				}
				
			    public String FREIGHT_DEFAULT_REASON_CODE;

				public String getFREIGHT_DEFAULT_REASON_CODE () {
					return this.FREIGHT_DEFAULT_REASON_CODE;
				}
				
			    public BigDecimal FREIGHT_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getFREIGHT_CASH_DISCOUNT_AMOUNT () {
					return this.FREIGHT_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getREVISED_FREIGHT_CASH_DISCOUNT_AMOUNT () {
					return this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal MERCHANDISE_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getMERCHANDISE_CASH_DISCOUNT_AMOUNT () {
					return this.MERCHANDISE_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal REVISED_MERCH_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getREVISED_MERCH_CASH_DISCOUNT_AMOUNT () {
					return this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal MERCH_NET_AMOUNT;

				public BigDecimal getMERCH_NET_AMOUNT () {
					return this.MERCH_NET_AMOUNT;
				}
				
			    public BigDecimal FREIGHT_NET_AMOUNT;

				public BigDecimal getFREIGHT_NET_AMOUNT () {
					return this.FREIGHT_NET_AMOUNT;
				}
				
			    public BigDecimal REVISED_MERCH_NET_AMOUNT;

				public BigDecimal getREVISED_MERCH_NET_AMOUNT () {
					return this.REVISED_MERCH_NET_AMOUNT;
				}
				
			    public BigDecimal REVISED_FREIGHT_NET_AMOUNT;

				public BigDecimal getREVISED_FREIGHT_NET_AMOUNT () {
					return this.REVISED_FREIGHT_NET_AMOUNT;
				}
				
			    public String PROCUREMENT_PRE_APPROVAL_NUMBER;

				public String getPROCUREMENT_PRE_APPROVAL_NUMBER () {
					return this.PROCUREMENT_PRE_APPROVAL_NUMBER;
				}
				
			    public BigDecimal MERCH_ROUNDING_VARIANCE;

				public BigDecimal getMERCH_ROUNDING_VARIANCE () {
					return this.MERCH_ROUNDING_VARIANCE;
				}
				
			    public BigDecimal FREIGHT_ROUNDING_VARIANCE;

				public BigDecimal getFREIGHT_ROUNDING_VARIANCE () {
					return this.FREIGHT_ROUNDING_VARIANCE;
				}
				
			    public BigDecimal REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES;

				public BigDecimal getREVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES () {
					return this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES;
				}
				
			    public String E8FF_SVOP;

				public String getE8FF_SVOP () {
					return this.E8FF_SVOP;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PROFORMA_ORDER_HEADERStruct other = (PROFORMA_ORDER_HEADERStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PROFORMA_ORDER_HEADERStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.TERMS = this.TERMS;
	            other.FREIGHT_RATE = this.FREIGHT_RATE;
	            other.FREIGHT_RATE_TYPE = this.FREIGHT_RATE_TYPE;
	            other.UNLOADING_CHARGE = this.UNLOADING_CHARGE;
	            other.UNLOADING_CHARGE_TYPE = this.UNLOADING_CHARGE_TYPE;
	            other.PICKUP_ALLOWANCE_RATE = this.PICKUP_ALLOWANCE_RATE;
	            other.PICKUP_ALLOWANCE_TYPE = this.PICKUP_ALLOWANCE_TYPE;
	            other.PICKUP_ALLOWANCE_FROM_BRACKET = this.PICKUP_ALLOWANCE_FROM_BRACKET;
	            other.PICKUP_ALLOWANCE_TO_BRACKET = this.PICKUP_ALLOWANCE_TO_BRACKET;
	            other.FREIGHT_VENDOR_TERMS = this.FREIGHT_VENDOR_TERMS;
	            other.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE = this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE;
	            other.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
	            other.TOTAL_UNLOADING_CHARGE = this.TOTAL_UNLOADING_CHARGE;
	            other.TOTAT_FOB_COST = this.TOTAT_FOB_COST;
	            other.TOTAL_FREIGHT_COST = this.TOTAL_FREIGHT_COST;
	            other.TOTAL_AP_COST = this.TOTAL_AP_COST;
	            other.TOTAL_PICKUP_ALLOWANCE = this.TOTAL_PICKUP_ALLOWANCE;
	            other.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH = this.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH;
	            other.TOTAL_BRACKET_DIFFERENTIAL = this.TOTAL_BRACKET_DIFFERENTIAL;
	            other.TOTAL_NON_DISTRB_ALLOWANCE = this.TOTAL_NON_DISTRB_ALLOWANCE;
	            other.REVISED_TERMS = this.REVISED_TERMS;
	            other.REVISED_FREIGHT_RATE = this.REVISED_FREIGHT_RATE;
	            other.REVISED_FREIGHT_RATE_TYPE = this.REVISED_FREIGHT_RATE_TYPE;
	            other.REVISED_UNLOADING_CHARGE = this.REVISED_UNLOADING_CHARGE;
	            other.REVISED_UNLOADING_CHARGE_TYPE = this.REVISED_UNLOADING_CHARGE_TYPE;
	            other.REVISED_PICKUP_ALLOWANCE_RATE = this.REVISED_PICKUP_ALLOWANCE_RATE;
	            other.REVISED_PICKUP_ALLOWANCE_TYPE = this.REVISED_PICKUP_ALLOWANCE_TYPE;
	            other.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET = this.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET;
	            other.REVISED_PICKUP_ALLOWANCE_TO_BRACKET = this.REVISED_PICKUP_ALLOWANCE_TO_BRACKET;
	            other.REVISED_FREIGHT_VENDOR_TERMS = this.REVISED_FREIGHT_VENDOR_TERMS;
	            other.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
	            other.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
	            other.REVISED_TOTAL_UNLOADING_CHARGE = this.REVISED_TOTAL_UNLOADING_CHARGE;
	            other.REVISED_TOTAL_FOB_COST = this.REVISED_TOTAL_FOB_COST;
	            other.REVISED_TOTAL_FREIGHT_COST = this.REVISED_TOTAL_FREIGHT_COST;
	            other.REVISED_TOTAL_AP_COST = this.REVISED_TOTAL_AP_COST;
	            other.REVISED_TOTAL_PICKUP_ALLOWANCE = this.REVISED_TOTAL_PICKUP_ALLOWANCE;
	            other.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT = this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT;
	            other.REVISED_TOTAL_BRACKET_DIFFERENTIAL = this.REVISED_TOTAL_BRACKET_DIFFERENTIAL;
	            other.MERCH_DEFAULT_REASON_CODE = this.MERCH_DEFAULT_REASON_CODE;
	            other.FREIGHT_DEFAULT_REASON_CODE = this.FREIGHT_DEFAULT_REASON_CODE;
	            other.FREIGHT_CASH_DISCOUNT_AMOUNT = this.FREIGHT_CASH_DISCOUNT_AMOUNT;
	            other.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;
	            other.MERCHANDISE_CASH_DISCOUNT_AMOUNT = this.MERCHANDISE_CASH_DISCOUNT_AMOUNT;
	            other.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT;
	            other.MERCH_NET_AMOUNT = this.MERCH_NET_AMOUNT;
	            other.FREIGHT_NET_AMOUNT = this.FREIGHT_NET_AMOUNT;
	            other.REVISED_MERCH_NET_AMOUNT = this.REVISED_MERCH_NET_AMOUNT;
	            other.REVISED_FREIGHT_NET_AMOUNT = this.REVISED_FREIGHT_NET_AMOUNT;
	            other.PROCUREMENT_PRE_APPROVAL_NUMBER = this.PROCUREMENT_PRE_APPROVAL_NUMBER;
	            other.MERCH_ROUNDING_VARIANCE = this.MERCH_ROUNDING_VARIANCE;
	            other.FREIGHT_ROUNDING_VARIANCE = this.FREIGHT_ROUNDING_VARIANCE;
	            other.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES = this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES;
	            other.E8FF_SVOP = this.E8FF_SVOP;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            
	}

	public void copyKeysDataTo(PROFORMA_ORDER_HEADERStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.TERMS = readString(dis);
					
						this.FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.FREIGHT_RATE_TYPE = readString(dis);
					
						this.UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.UNLOADING_CHARGE_TYPE = readString(dis);
					
						this.PICKUP_ALLOWANCE_RATE = (BigDecimal) dis.readObject();
					
					this.PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.PICKUP_ALLOWANCE_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOWANCE_TO_BRACKET = (BigDecimal) dis.readObject();
					
					this.FREIGHT_VENDOR_TERMS = readString(dis);
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
						this.TOTAL_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
						this.TOTAT_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
						this.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.TOTAL_BRACKET_DIFFERENTIAL = (BigDecimal) dis.readObject();
					
						this.TOTAL_NON_DISTRB_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.REVISED_TERMS = readString(dis);
					
						this.REVISED_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.REVISED_FREIGHT_RATE_TYPE = readString(dis);
					
						this.REVISED_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.REVISED_UNLOADING_CHARGE_TYPE = readString(dis);
					
						this.REVISED_PICKUP_ALLOWANCE_RATE = (BigDecimal) dis.readObject();
					
					this.REVISED_PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.REVISED_PICKUP_ALLOWANCE_TO_BRACKET = (BigDecimal) dis.readObject();
					
					this.REVISED_FREIGHT_VENDOR_TERMS = readString(dis);
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_BRACKET_DIFFERENTIAL = (BigDecimal) dis.readObject();
					
					this.MERCH_DEFAULT_REASON_CODE = readString(dis);
					
					this.FREIGHT_DEFAULT_REASON_CODE = readString(dis);
					
						this.FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCHANDISE_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_NET_AMOUNT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_NET_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_NET_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_NET_AMOUNT = (BigDecimal) dis.readObject();
					
					this.PROCUREMENT_PRE_APPROVAL_NUMBER = readString(dis);
					
						this.MERCH_ROUNDING_VARIANCE = (BigDecimal) dis.readObject();
					
						this.FREIGHT_ROUNDING_VARIANCE = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES = (BigDecimal) dis.readObject();
					
					this.E8FF_SVOP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.CREATED_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.TERMS = readString(dis);
					
						this.FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.FREIGHT_RATE_TYPE = readString(dis);
					
						this.UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.UNLOADING_CHARGE_TYPE = readString(dis);
					
						this.PICKUP_ALLOWANCE_RATE = (BigDecimal) dis.readObject();
					
					this.PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.PICKUP_ALLOWANCE_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOWANCE_TO_BRACKET = (BigDecimal) dis.readObject();
					
					this.FREIGHT_VENDOR_TERMS = readString(dis);
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
						this.TOTAL_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
						this.TOTAT_FOB_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.TOTAL_PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
						this.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.TOTAL_BRACKET_DIFFERENTIAL = (BigDecimal) dis.readObject();
					
						this.TOTAL_NON_DISTRB_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.REVISED_TERMS = readString(dis);
					
						this.REVISED_FREIGHT_RATE = (BigDecimal) dis.readObject();
					
					this.REVISED_FREIGHT_RATE_TYPE = readString(dis);
					
						this.REVISED_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
					this.REVISED_UNLOADING_CHARGE_TYPE = readString(dis);
					
						this.REVISED_PICKUP_ALLOWANCE_RATE = (BigDecimal) dis.readObject();
					
					this.REVISED_PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET = (BigDecimal) dis.readObject();
					
						this.REVISED_PICKUP_ALLOWANCE_TO_BRACKET = (BigDecimal) dis.readObject();
					
					this.REVISED_FREIGHT_VENDOR_TERMS = readString(dis);
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_UNLOADING_CHARGE = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_FOB_COST = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_FREIGHT_COST = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_AP_COST = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_BRACKET_DIFFERENTIAL = (BigDecimal) dis.readObject();
					
					this.MERCH_DEFAULT_REASON_CODE = readString(dis);
					
					this.FREIGHT_DEFAULT_REASON_CODE = readString(dis);
					
						this.FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCHANDISE_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_NET_AMOUNT = (BigDecimal) dis.readObject();
					
						this.FREIGHT_NET_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_NET_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_NET_AMOUNT = (BigDecimal) dis.readObject();
					
					this.PROCUREMENT_PRE_APPROVAL_NUMBER = readString(dis);
					
						this.MERCH_ROUNDING_VARIANCE = (BigDecimal) dis.readObject();
					
						this.FREIGHT_ROUNDING_VARIANCE = (BigDecimal) dis.readObject();
					
						this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES = (BigDecimal) dis.readObject();
					
					this.E8FF_SVOP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.CREATED_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_RATE);
					
					// String
				
						writeString(this.FREIGHT_RATE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNLOADING_CHARGE);
					
					// String
				
						writeString(this.UNLOADING_CHARGE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_RATE);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_TO_BRACKET);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_UNLOADING_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAT_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOWANCE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_BRACKET_DIFFERENTIAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NON_DISTRB_ALLOWANCE);
					
					// String
				
						writeString(this.REVISED_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_RATE);
					
					// String
				
						writeString(this.REVISED_FREIGHT_RATE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.REVISED_UNLOADING_CHARGE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_RATE);
					
					// String
				
						writeString(this.REVISED_PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_TO_BRACKET);
					
					// String
				
						writeString(this.REVISED_FREIGHT_VENDOR_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_UNLOADING_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_PICKUP_ALLOWANCE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_BRACKET_DIFFERENTIAL);
					
					// String
				
						writeString(this.MERCH_DEFAULT_REASON_CODE,dos);
					
					// String
				
						writeString(this.FREIGHT_DEFAULT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCHANDISE_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_NET_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_NET_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_NET_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_NET_AMOUNT);
					
					// String
				
						writeString(this.PROCUREMENT_PRE_APPROVAL_NUMBER,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_ROUNDING_VARIANCE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_ROUNDING_VARIANCE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES);
					
					// String
				
						writeString(this.E8FF_SVOP,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_RATE);
					
					// String
				
						writeString(this.FREIGHT_RATE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNLOADING_CHARGE);
					
					// String
				
						writeString(this.UNLOADING_CHARGE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_RATE);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_TO_BRACKET);
					
					// String
				
						writeString(this.FREIGHT_VENDOR_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_UNLOADING_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAT_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_PICKUP_ALLOWANCE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_BRACKET_DIFFERENTIAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOTAL_NON_DISTRB_ALLOWANCE);
					
					// String
				
						writeString(this.REVISED_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_RATE);
					
					// String
				
						writeString(this.REVISED_FREIGHT_RATE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_UNLOADING_CHARGE);
					
					// String
				
						writeString(this.REVISED_UNLOADING_CHARGE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_RATE);
					
					// String
				
						writeString(this.REVISED_PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_TO_BRACKET);
					
					// String
				
						writeString(this.REVISED_FREIGHT_VENDOR_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_UNLOADING_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_FOB_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_FREIGHT_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_AP_COST);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_PICKUP_ALLOWANCE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_BRACKET_DIFFERENTIAL);
					
					// String
				
						writeString(this.MERCH_DEFAULT_REASON_CODE,dos);
					
					// String
				
						writeString(this.FREIGHT_DEFAULT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCHANDISE_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_NET_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_NET_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_NET_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_NET_AMOUNT);
					
					// String
				
						writeString(this.PROCUREMENT_PRE_APPROVAL_NUMBER,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_ROUNDING_VARIANCE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_ROUNDING_VARIANCE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES);
					
					// String
				
						writeString(this.E8FF_SVOP,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",TERMS="+TERMS);
		sb.append(",FREIGHT_RATE="+String.valueOf(FREIGHT_RATE));
		sb.append(",FREIGHT_RATE_TYPE="+FREIGHT_RATE_TYPE);
		sb.append(",UNLOADING_CHARGE="+String.valueOf(UNLOADING_CHARGE));
		sb.append(",UNLOADING_CHARGE_TYPE="+UNLOADING_CHARGE_TYPE);
		sb.append(",PICKUP_ALLOWANCE_RATE="+String.valueOf(PICKUP_ALLOWANCE_RATE));
		sb.append(",PICKUP_ALLOWANCE_TYPE="+PICKUP_ALLOWANCE_TYPE);
		sb.append(",PICKUP_ALLOWANCE_FROM_BRACKET="+String.valueOf(PICKUP_ALLOWANCE_FROM_BRACKET));
		sb.append(",PICKUP_ALLOWANCE_TO_BRACKET="+String.valueOf(PICKUP_ALLOWANCE_TO_BRACKET));
		sb.append(",FREIGHT_VENDOR_TERMS="+FREIGHT_VENDOR_TERMS);
		sb.append(",ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE="+String.valueOf(ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE));
		sb.append(",ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT="+String.valueOf(ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT));
		sb.append(",TOTAL_UNLOADING_CHARGE="+String.valueOf(TOTAL_UNLOADING_CHARGE));
		sb.append(",TOTAT_FOB_COST="+String.valueOf(TOTAT_FOB_COST));
		sb.append(",TOTAL_FREIGHT_COST="+String.valueOf(TOTAL_FREIGHT_COST));
		sb.append(",TOTAL_AP_COST="+String.valueOf(TOTAL_AP_COST));
		sb.append(",TOTAL_PICKUP_ALLOWANCE="+String.valueOf(TOTAL_PICKUP_ALLOWANCE));
		sb.append(",TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH="+String.valueOf(TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH));
		sb.append(",TOTAL_BRACKET_DIFFERENTIAL="+String.valueOf(TOTAL_BRACKET_DIFFERENTIAL));
		sb.append(",TOTAL_NON_DISTRB_ALLOWANCE="+String.valueOf(TOTAL_NON_DISTRB_ALLOWANCE));
		sb.append(",REVISED_TERMS="+REVISED_TERMS);
		sb.append(",REVISED_FREIGHT_RATE="+String.valueOf(REVISED_FREIGHT_RATE));
		sb.append(",REVISED_FREIGHT_RATE_TYPE="+REVISED_FREIGHT_RATE_TYPE);
		sb.append(",REVISED_UNLOADING_CHARGE="+String.valueOf(REVISED_UNLOADING_CHARGE));
		sb.append(",REVISED_UNLOADING_CHARGE_TYPE="+REVISED_UNLOADING_CHARGE_TYPE);
		sb.append(",REVISED_PICKUP_ALLOWANCE_RATE="+String.valueOf(REVISED_PICKUP_ALLOWANCE_RATE));
		sb.append(",REVISED_PICKUP_ALLOWANCE_TYPE="+REVISED_PICKUP_ALLOWANCE_TYPE);
		sb.append(",REVISED_PICKUP_ALLOWANCE_FROM_BRACKET="+String.valueOf(REVISED_PICKUP_ALLOWANCE_FROM_BRACKET));
		sb.append(",REVISED_PICKUP_ALLOWANCE_TO_BRACKET="+String.valueOf(REVISED_PICKUP_ALLOWANCE_TO_BRACKET));
		sb.append(",REVISED_FREIGHT_VENDOR_TERMS="+REVISED_FREIGHT_VENDOR_TERMS);
		sb.append(",REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH="+String.valueOf(REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH));
		sb.append(",REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT="+String.valueOf(REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT));
		sb.append(",REVISED_TOTAL_UNLOADING_CHARGE="+String.valueOf(REVISED_TOTAL_UNLOADING_CHARGE));
		sb.append(",REVISED_TOTAL_FOB_COST="+String.valueOf(REVISED_TOTAL_FOB_COST));
		sb.append(",REVISED_TOTAL_FREIGHT_COST="+String.valueOf(REVISED_TOTAL_FREIGHT_COST));
		sb.append(",REVISED_TOTAL_AP_COST="+String.valueOf(REVISED_TOTAL_AP_COST));
		sb.append(",REVISED_TOTAL_PICKUP_ALLOWANCE="+String.valueOf(REVISED_TOTAL_PICKUP_ALLOWANCE));
		sb.append(",REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT="+String.valueOf(REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT));
		sb.append(",REVISED_TOTAL_BRACKET_DIFFERENTIAL="+String.valueOf(REVISED_TOTAL_BRACKET_DIFFERENTIAL));
		sb.append(",MERCH_DEFAULT_REASON_CODE="+MERCH_DEFAULT_REASON_CODE);
		sb.append(",FREIGHT_DEFAULT_REASON_CODE="+FREIGHT_DEFAULT_REASON_CODE);
		sb.append(",FREIGHT_CASH_DISCOUNT_AMOUNT="+String.valueOf(FREIGHT_CASH_DISCOUNT_AMOUNT));
		sb.append(",REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT="+String.valueOf(REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT));
		sb.append(",MERCHANDISE_CASH_DISCOUNT_AMOUNT="+String.valueOf(MERCHANDISE_CASH_DISCOUNT_AMOUNT));
		sb.append(",REVISED_MERCH_CASH_DISCOUNT_AMOUNT="+String.valueOf(REVISED_MERCH_CASH_DISCOUNT_AMOUNT));
		sb.append(",MERCH_NET_AMOUNT="+String.valueOf(MERCH_NET_AMOUNT));
		sb.append(",FREIGHT_NET_AMOUNT="+String.valueOf(FREIGHT_NET_AMOUNT));
		sb.append(",REVISED_MERCH_NET_AMOUNT="+String.valueOf(REVISED_MERCH_NET_AMOUNT));
		sb.append(",REVISED_FREIGHT_NET_AMOUNT="+String.valueOf(REVISED_FREIGHT_NET_AMOUNT));
		sb.append(",PROCUREMENT_PRE_APPROVAL_NUMBER="+PROCUREMENT_PRE_APPROVAL_NUMBER);
		sb.append(",MERCH_ROUNDING_VARIANCE="+String.valueOf(MERCH_ROUNDING_VARIANCE));
		sb.append(",FREIGHT_ROUNDING_VARIANCE="+String.valueOf(FREIGHT_ROUNDING_VARIANCE));
		sb.append(",REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES="+String.valueOf(REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES));
		sb.append(",E8FF_SVOP="+E8FF_SVOP);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PROFORMA_ORDER_HEADERStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public String E8PO;

				public String getE8PO () {
					return this.E8PO;
				}
				
			    public String E8FMFT;

				public String getE8FMFT () {
					return this.E8FMFT;
				}
				
			    public BigDecimal E8FMFR;

				public BigDecimal getE8FMFR () {
					return this.E8FMFR;
				}
				
			    public String E8FFRT;

				public String getE8FFRT () {
					return this.E8FFRT;
				}
				
			    public BigDecimal E8FULC;

				public BigDecimal getE8FULC () {
					return this.E8FULC;
				}
				
			    public String E8FULT;

				public String getE8FULT () {
					return this.E8FULT;
				}
				
			    public BigDecimal E8FPAL;

				public BigDecimal getE8FPAL () {
					return this.E8FPAL;
				}
				
			    public String E8FPUT;

				public String getE8FPUT () {
					return this.E8FPUT;
				}
				
			    public BigDecimal E8FPFB;

				public BigDecimal getE8FPFB () {
					return this.E8FPFB;
				}
				
			    public BigDecimal E8FPTB;

				public BigDecimal getE8FPTB () {
					return this.E8FPTB;
				}
				
			    public String E8FFVT;

				public String getE8FFVT () {
					return this.E8FFVT;
				}
				
			    public BigDecimal E8FACM;

				public BigDecimal getE8FACM () {
					return this.E8FACM;
				}
				
			    public BigDecimal E8FACF;

				public BigDecimal getE8FACF () {
					return this.E8FACF;
				}
				
			    public BigDecimal E8FTUC;

				public BigDecimal getE8FTUC () {
					return this.E8FTUC;
				}
				
			    public BigDecimal E8FTBC;

				public BigDecimal getE8FTBC () {
					return this.E8FTBC;
				}
				
			    public BigDecimal E8FTFC;

				public BigDecimal getE8FTFC () {
					return this.E8FTFC;
				}
				
			    public BigDecimal E8FTAC;

				public BigDecimal getE8FTAC () {
					return this.E8FTAC;
				}
				
			    public BigDecimal E8FTPA;

				public BigDecimal getE8FTPA () {
					return this.E8FTPA;
				}
				
			    public BigDecimal E8FNAC;

				public BigDecimal getE8FNAC () {
					return this.E8FNAC;
				}
				
			    public BigDecimal E8FTBD;

				public BigDecimal getE8FTBD () {
					return this.E8FTBD;
				}
				
			    public BigDecimal E8PNAF;

				public BigDecimal getE8PNAF () {
					return this.E8PNAF;
				}
				
			    public String E8RVFT;

				public String getE8RVFT () {
					return this.E8RVFT;
				}
				
			    public BigDecimal E8RVFR;

				public BigDecimal getE8RVFR () {
					return this.E8RVFR;
				}
				
			    public String E8RFRT;

				public String getE8RFRT () {
					return this.E8RFRT;
				}
				
			    public BigDecimal E8RULC;

				public BigDecimal getE8RULC () {
					return this.E8RULC;
				}
				
			    public String E8RUCT;

				public String getE8RUCT () {
					return this.E8RUCT;
				}
				
			    public BigDecimal E8RPAL;

				public BigDecimal getE8RPAL () {
					return this.E8RPAL;
				}
				
			    public String E8RPUT;

				public String getE8RPUT () {
					return this.E8RPUT;
				}
				
			    public BigDecimal E8RPFB;

				public BigDecimal getE8RPFB () {
					return this.E8RPFB;
				}
				
			    public BigDecimal E8RPTB;

				public BigDecimal getE8RPTB () {
					return this.E8RPTB;
				}
				
			    public String E8RFVT;

				public String getE8RFVT () {
					return this.E8RFVT;
				}
				
			    public BigDecimal E8RACM;

				public BigDecimal getE8RACM () {
					return this.E8RACM;
				}
				
			    public BigDecimal E8RACF;

				public BigDecimal getE8RACF () {
					return this.E8RACF;
				}
				
			    public BigDecimal E8RTUG;

				public BigDecimal getE8RTUG () {
					return this.E8RTUG;
				}
				
			    public BigDecimal E8RTBC;

				public BigDecimal getE8RTBC () {
					return this.E8RTBC;
				}
				
			    public BigDecimal E8RTFC;

				public BigDecimal getE8RTFC () {
					return this.E8RTFC;
				}
				
			    public BigDecimal E8RTAP;

				public BigDecimal getE8RTAP () {
					return this.E8RTAP;
				}
				
			    public BigDecimal E8RTPA;

				public BigDecimal getE8RTPA () {
					return this.E8RTPA;
				}
				
			    public BigDecimal E8RNAC;

				public BigDecimal getE8RNAC () {
					return this.E8RNAC;
				}
				
			    public BigDecimal E8RTBD;

				public BigDecimal getE8RTBD () {
					return this.E8RTBD;
				}
				
			    public String E8MDRC;

				public String getE8MDRC () {
					return this.E8MDRC;
				}
				
			    public String E8FDRC;

				public String getE8FDRC () {
					return this.E8FDRC;
				}
				
			    public BigDecimal E8FFCD;

				public BigDecimal getE8FFCD () {
					return this.E8FFCD;
				}
				
			    public BigDecimal E8RFCD;

				public BigDecimal getE8RFCD () {
					return this.E8RFCD;
				}
				
			    public BigDecimal E8FMCD;

				public BigDecimal getE8FMCD () {
					return this.E8FMCD;
				}
				
			    public BigDecimal E8RMCD;

				public BigDecimal getE8RMCD () {
					return this.E8RMCD;
				}
				
			    public BigDecimal E8PFNA;

				public BigDecimal getE8PFNA () {
					return this.E8PFNA;
				}
				
			    public BigDecimal E8FPNA;

				public BigDecimal getE8FPNA () {
					return this.E8FPNA;
				}
				
			    public BigDecimal E8RPFN;

				public BigDecimal getE8RPFN () {
					return this.E8RPFN;
				}
				
			    public BigDecimal E8RFPN;

				public BigDecimal getE8RFPN () {
					return this.E8RFPN;
				}
				
			    public String E8PPAN;

				public String getE8PPAN () {
					return this.E8PPAN;
				}
				
			    public BigDecimal E8MERV;

				public BigDecimal getE8MERV () {
					return this.E8MERV;
				}
				
			    public BigDecimal E8FTRV;

				public BigDecimal getE8FTRV () {
					return this.E8FTRV;
				}
				
			    public BigDecimal E8RNAF;

				public BigDecimal getE8RNAF () {
					return this.E8RNAF;
				}
				
			    public BigDecimal E8EADT;

				public BigDecimal getE8EADT () {
					return this.E8EADT;
				}
				
			    public BigDecimal E8EATM;

				public BigDecimal getE8EATM () {
					return this.E8EATM;
				}
				
			    public String E8EAID;

				public String getE8EAID () {
					return this.E8EAID;
				}
				
			    public BigDecimal E8MODT;

				public BigDecimal getE8MODT () {
					return this.E8MODT;
				}
				
			    public BigDecimal E8MOTM;

				public BigDecimal getE8MOTM () {
					return this.E8MOTM;
				}
				
			    public String E8MOID;

				public String getE8MOID () {
					return this.E8MOID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.E8PO = readString(dis);
					
					this.E8FMFT = readString(dis);
					
						this.E8FMFR = (BigDecimal) dis.readObject();
					
					this.E8FFRT = readString(dis);
					
						this.E8FULC = (BigDecimal) dis.readObject();
					
					this.E8FULT = readString(dis);
					
						this.E8FPAL = (BigDecimal) dis.readObject();
					
					this.E8FPUT = readString(dis);
					
						this.E8FPFB = (BigDecimal) dis.readObject();
					
						this.E8FPTB = (BigDecimal) dis.readObject();
					
					this.E8FFVT = readString(dis);
					
						this.E8FACM = (BigDecimal) dis.readObject();
					
						this.E8FACF = (BigDecimal) dis.readObject();
					
						this.E8FTUC = (BigDecimal) dis.readObject();
					
						this.E8FTBC = (BigDecimal) dis.readObject();
					
						this.E8FTFC = (BigDecimal) dis.readObject();
					
						this.E8FTAC = (BigDecimal) dis.readObject();
					
						this.E8FTPA = (BigDecimal) dis.readObject();
					
						this.E8FNAC = (BigDecimal) dis.readObject();
					
						this.E8FTBD = (BigDecimal) dis.readObject();
					
						this.E8PNAF = (BigDecimal) dis.readObject();
					
					this.E8RVFT = readString(dis);
					
						this.E8RVFR = (BigDecimal) dis.readObject();
					
					this.E8RFRT = readString(dis);
					
						this.E8RULC = (BigDecimal) dis.readObject();
					
					this.E8RUCT = readString(dis);
					
						this.E8RPAL = (BigDecimal) dis.readObject();
					
					this.E8RPUT = readString(dis);
					
						this.E8RPFB = (BigDecimal) dis.readObject();
					
						this.E8RPTB = (BigDecimal) dis.readObject();
					
					this.E8RFVT = readString(dis);
					
						this.E8RACM = (BigDecimal) dis.readObject();
					
						this.E8RACF = (BigDecimal) dis.readObject();
					
						this.E8RTUG = (BigDecimal) dis.readObject();
					
						this.E8RTBC = (BigDecimal) dis.readObject();
					
						this.E8RTFC = (BigDecimal) dis.readObject();
					
						this.E8RTAP = (BigDecimal) dis.readObject();
					
						this.E8RTPA = (BigDecimal) dis.readObject();
					
						this.E8RNAC = (BigDecimal) dis.readObject();
					
						this.E8RTBD = (BigDecimal) dis.readObject();
					
					this.E8MDRC = readString(dis);
					
					this.E8FDRC = readString(dis);
					
						this.E8FFCD = (BigDecimal) dis.readObject();
					
						this.E8RFCD = (BigDecimal) dis.readObject();
					
						this.E8FMCD = (BigDecimal) dis.readObject();
					
						this.E8RMCD = (BigDecimal) dis.readObject();
					
						this.E8PFNA = (BigDecimal) dis.readObject();
					
						this.E8FPNA = (BigDecimal) dis.readObject();
					
						this.E8RPFN = (BigDecimal) dis.readObject();
					
						this.E8RFPN = (BigDecimal) dis.readObject();
					
					this.E8PPAN = readString(dis);
					
						this.E8MERV = (BigDecimal) dis.readObject();
					
						this.E8FTRV = (BigDecimal) dis.readObject();
					
						this.E8RNAF = (BigDecimal) dis.readObject();
					
						this.E8EADT = (BigDecimal) dis.readObject();
					
						this.E8EATM = (BigDecimal) dis.readObject();
					
					this.E8EAID = readString(dis);
					
						this.E8MODT = (BigDecimal) dis.readObject();
					
						this.E8MOTM = (BigDecimal) dis.readObject();
					
					this.E8MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.E8PO = readString(dis);
					
					this.E8FMFT = readString(dis);
					
						this.E8FMFR = (BigDecimal) dis.readObject();
					
					this.E8FFRT = readString(dis);
					
						this.E8FULC = (BigDecimal) dis.readObject();
					
					this.E8FULT = readString(dis);
					
						this.E8FPAL = (BigDecimal) dis.readObject();
					
					this.E8FPUT = readString(dis);
					
						this.E8FPFB = (BigDecimal) dis.readObject();
					
						this.E8FPTB = (BigDecimal) dis.readObject();
					
					this.E8FFVT = readString(dis);
					
						this.E8FACM = (BigDecimal) dis.readObject();
					
						this.E8FACF = (BigDecimal) dis.readObject();
					
						this.E8FTUC = (BigDecimal) dis.readObject();
					
						this.E8FTBC = (BigDecimal) dis.readObject();
					
						this.E8FTFC = (BigDecimal) dis.readObject();
					
						this.E8FTAC = (BigDecimal) dis.readObject();
					
						this.E8FTPA = (BigDecimal) dis.readObject();
					
						this.E8FNAC = (BigDecimal) dis.readObject();
					
						this.E8FTBD = (BigDecimal) dis.readObject();
					
						this.E8PNAF = (BigDecimal) dis.readObject();
					
					this.E8RVFT = readString(dis);
					
						this.E8RVFR = (BigDecimal) dis.readObject();
					
					this.E8RFRT = readString(dis);
					
						this.E8RULC = (BigDecimal) dis.readObject();
					
					this.E8RUCT = readString(dis);
					
						this.E8RPAL = (BigDecimal) dis.readObject();
					
					this.E8RPUT = readString(dis);
					
						this.E8RPFB = (BigDecimal) dis.readObject();
					
						this.E8RPTB = (BigDecimal) dis.readObject();
					
					this.E8RFVT = readString(dis);
					
						this.E8RACM = (BigDecimal) dis.readObject();
					
						this.E8RACF = (BigDecimal) dis.readObject();
					
						this.E8RTUG = (BigDecimal) dis.readObject();
					
						this.E8RTBC = (BigDecimal) dis.readObject();
					
						this.E8RTFC = (BigDecimal) dis.readObject();
					
						this.E8RTAP = (BigDecimal) dis.readObject();
					
						this.E8RTPA = (BigDecimal) dis.readObject();
					
						this.E8RNAC = (BigDecimal) dis.readObject();
					
						this.E8RTBD = (BigDecimal) dis.readObject();
					
					this.E8MDRC = readString(dis);
					
					this.E8FDRC = readString(dis);
					
						this.E8FFCD = (BigDecimal) dis.readObject();
					
						this.E8RFCD = (BigDecimal) dis.readObject();
					
						this.E8FMCD = (BigDecimal) dis.readObject();
					
						this.E8RMCD = (BigDecimal) dis.readObject();
					
						this.E8PFNA = (BigDecimal) dis.readObject();
					
						this.E8FPNA = (BigDecimal) dis.readObject();
					
						this.E8RPFN = (BigDecimal) dis.readObject();
					
						this.E8RFPN = (BigDecimal) dis.readObject();
					
					this.E8PPAN = readString(dis);
					
						this.E8MERV = (BigDecimal) dis.readObject();
					
						this.E8FTRV = (BigDecimal) dis.readObject();
					
						this.E8RNAF = (BigDecimal) dis.readObject();
					
						this.E8EADT = (BigDecimal) dis.readObject();
					
						this.E8EATM = (BigDecimal) dis.readObject();
					
					this.E8EAID = readString(dis);
					
						this.E8MODT = (BigDecimal) dis.readObject();
					
						this.E8MOTM = (BigDecimal) dis.readObject();
					
					this.E8MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E8PO,dos);
					
					// String
				
						writeString(this.E8FMFT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FMFR);
					
					// String
				
						writeString(this.E8FFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FULC);
					
					// String
				
						writeString(this.E8FULT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FPAL);
					
					// String
				
						writeString(this.E8FPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FPFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FPTB);
					
					// String
				
						writeString(this.E8FFVT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTUC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTBC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FNAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8PNAF);
					
					// String
				
						writeString(this.E8RVFT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RVFR);
					
					// String
				
						writeString(this.E8RFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RULC);
					
					// String
				
						writeString(this.E8RUCT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RPAL);
					
					// String
				
						writeString(this.E8RPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RPFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RPTB);
					
					// String
				
						writeString(this.E8RFVT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTUG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTBC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RNAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTBD);
					
					// String
				
						writeString(this.E8MDRC,dos);
					
					// String
				
						writeString(this.E8FDRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FFCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RFCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FMCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RMCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8PFNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FPNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RPFN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RFPN);
					
					// String
				
						writeString(this.E8PPAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8MERV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTRV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RNAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8EATM);
					
					// String
				
						writeString(this.E8EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8MOTM);
					
					// String
				
						writeString(this.E8MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.E8PO,dos);
					
					// String
				
						writeString(this.E8FMFT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FMFR);
					
					// String
				
						writeString(this.E8FFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FULC);
					
					// String
				
						writeString(this.E8FULT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FPAL);
					
					// String
				
						writeString(this.E8FPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FPFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FPTB);
					
					// String
				
						writeString(this.E8FFVT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTUC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTBC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FNAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8PNAF);
					
					// String
				
						writeString(this.E8RVFT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RVFR);
					
					// String
				
						writeString(this.E8RFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RULC);
					
					// String
				
						writeString(this.E8RUCT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RPAL);
					
					// String
				
						writeString(this.E8RPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RPFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RPTB);
					
					// String
				
						writeString(this.E8RFVT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTUG);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTBC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTFC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTPA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RNAC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RTBD);
					
					// String
				
						writeString(this.E8MDRC,dos);
					
					// String
				
						writeString(this.E8FDRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FFCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RFCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FMCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RMCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8PFNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FPNA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RPFN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RFPN);
					
					// String
				
						writeString(this.E8PPAN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8MERV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8FTRV);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8RNAF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8EATM);
					
					// String
				
						writeString(this.E8EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E8MOTM);
					
					// String
				
						writeString(this.E8MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E8PO="+E8PO);
		sb.append(",E8FMFT="+E8FMFT);
		sb.append(",E8FMFR="+String.valueOf(E8FMFR));
		sb.append(",E8FFRT="+E8FFRT);
		sb.append(",E8FULC="+String.valueOf(E8FULC));
		sb.append(",E8FULT="+E8FULT);
		sb.append(",E8FPAL="+String.valueOf(E8FPAL));
		sb.append(",E8FPUT="+E8FPUT);
		sb.append(",E8FPFB="+String.valueOf(E8FPFB));
		sb.append(",E8FPTB="+String.valueOf(E8FPTB));
		sb.append(",E8FFVT="+E8FFVT);
		sb.append(",E8FACM="+String.valueOf(E8FACM));
		sb.append(",E8FACF="+String.valueOf(E8FACF));
		sb.append(",E8FTUC="+String.valueOf(E8FTUC));
		sb.append(",E8FTBC="+String.valueOf(E8FTBC));
		sb.append(",E8FTFC="+String.valueOf(E8FTFC));
		sb.append(",E8FTAC="+String.valueOf(E8FTAC));
		sb.append(",E8FTPA="+String.valueOf(E8FTPA));
		sb.append(",E8FNAC="+String.valueOf(E8FNAC));
		sb.append(",E8FTBD="+String.valueOf(E8FTBD));
		sb.append(",E8PNAF="+String.valueOf(E8PNAF));
		sb.append(",E8RVFT="+E8RVFT);
		sb.append(",E8RVFR="+String.valueOf(E8RVFR));
		sb.append(",E8RFRT="+E8RFRT);
		sb.append(",E8RULC="+String.valueOf(E8RULC));
		sb.append(",E8RUCT="+E8RUCT);
		sb.append(",E8RPAL="+String.valueOf(E8RPAL));
		sb.append(",E8RPUT="+E8RPUT);
		sb.append(",E8RPFB="+String.valueOf(E8RPFB));
		sb.append(",E8RPTB="+String.valueOf(E8RPTB));
		sb.append(",E8RFVT="+E8RFVT);
		sb.append(",E8RACM="+String.valueOf(E8RACM));
		sb.append(",E8RACF="+String.valueOf(E8RACF));
		sb.append(",E8RTUG="+String.valueOf(E8RTUG));
		sb.append(",E8RTBC="+String.valueOf(E8RTBC));
		sb.append(",E8RTFC="+String.valueOf(E8RTFC));
		sb.append(",E8RTAP="+String.valueOf(E8RTAP));
		sb.append(",E8RTPA="+String.valueOf(E8RTPA));
		sb.append(",E8RNAC="+String.valueOf(E8RNAC));
		sb.append(",E8RTBD="+String.valueOf(E8RTBD));
		sb.append(",E8MDRC="+E8MDRC);
		sb.append(",E8FDRC="+E8FDRC);
		sb.append(",E8FFCD="+String.valueOf(E8FFCD));
		sb.append(",E8RFCD="+String.valueOf(E8RFCD));
		sb.append(",E8FMCD="+String.valueOf(E8FMCD));
		sb.append(",E8RMCD="+String.valueOf(E8RMCD));
		sb.append(",E8PFNA="+String.valueOf(E8PFNA));
		sb.append(",E8FPNA="+String.valueOf(E8FPNA));
		sb.append(",E8RPFN="+String.valueOf(E8RPFN));
		sb.append(",E8RFPN="+String.valueOf(E8RFPN));
		sb.append(",E8PPAN="+E8PPAN);
		sb.append(",E8MERV="+String.valueOf(E8MERV));
		sb.append(",E8FTRV="+String.valueOf(E8FTRV));
		sb.append(",E8RNAF="+String.valueOf(E8RNAF));
		sb.append(",E8EADT="+String.valueOf(E8EADT));
		sb.append(",E8EATM="+String.valueOf(E8EATM));
		sb.append(",E8EAID="+E8EAID);
		sb.append(",E8MODT="+String.valueOf(E8MODT));
		sb.append(",E8MOTM="+String.valueOf(E8MOTM));
		sb.append(",E8MOID="+E8MOID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
PROFORMA_ORDER_HEADERStruct PROFORMA_ORDER_HEADER = new PROFORMA_ORDER_HEADERStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PROFORMA_ORDER_HEADER");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("PROFORMA_ORDER_HEADER");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("PROFORMA_ORDER_HEADER");
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_2 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_2 = context.GIM_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 1;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 1;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"SITE_ID\",\"PURCHASE_ORDER_NO\",\"TERMS\",\"FREIGHT_RATE\",\"FREIGHT_RATE_TYPE\",\"UNLOADING_CHARGE\",\"UNLOADING_CHARGE_TYPE\",\"PICKUP_ALLOWANCE_RATE\",\"PICKUP_ALLOWANCE_TYPE\",\"PICKUP_ALLOWANCE_FROM_BRACKET\",\"PICKUP_ALLOWANCE_TO_BRACKET\",\"FREIGHT_VENDOR_TERMS\",\"ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE\",\"ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT\",\"TOTAL_UNLOADING_CHARGE\",\"TOTAT_FOB_COST\",\"TOTAL_FREIGHT_COST\",\"TOTAL_AP_COST\",\"TOTAL_PICKUP_ALLOWANCE\",\"TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH\",\"TOTAL_BRACKET_DIFFERENTIAL\",\"TOTAL_NON_DISTRB_ALLOWANCE\",\"REVISED_TERMS\",\"REVISED_FREIGHT_RATE\",\"REVISED_FREIGHT_RATE_TYPE\",\"REVISED_UNLOADING_CHARGE\",\"REVISED_UNLOADING_CHARGE_TYPE\",\"REVISED_PICKUP_ALLOWANCE_RATE\",\"REVISED_PICKUP_ALLOWANCE_TYPE\",\"REVISED_PICKUP_ALLOWANCE_FROM_BRACKET\",\"REVISED_PICKUP_ALLOWANCE_TO_BRACKET\",\"REVISED_FREIGHT_VENDOR_TERMS\",\"REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH\",\"REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT\",\"REVISED_TOTAL_UNLOADING_CHARGE\",\"REVISED_TOTAL_FOB_COST\",\"REVISED_TOTAL_FREIGHT_COST\",\"REVISED_TOTAL_AP_COST\",\"REVISED_TOTAL_PICKUP_ALLOWANCE\",\"REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT\",\"REVISED_TOTAL_BRACKET_DIFFERENTIAL\",\"MERCH_DEFAULT_REASON_CODE\",\"FREIGHT_DEFAULT_REASON_CODE\",\"FREIGHT_CASH_DISCOUNT_AMOUNT\",\"REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT\",\"MERCHANDISE_CASH_DISCOUNT_AMOUNT\",\"REVISED_MERCH_CASH_DISCOUNT_AMOUNT\",\"MERCH_NET_AMOUNT\",\"FREIGHT_NET_AMOUNT\",\"REVISED_MERCH_NET_AMOUNT\",\"REVISED_FREIGHT_NET_AMOUNT\",\"PROCUREMENT_PRE_APPROVAL_NUMBER\",\"MERCH_ROUNDING_VARIANCE\",\"FREIGHT_ROUNDING_VARIANCE\",\"REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES\",\"E8FF_SVOP\",\"IS_ACTIVE\",\"CREATED_USER_ID\",\"CREATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"UPDATED_TIMESTAMP\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String E8PO;
	String E8FMFT;
	String E8FFRT;
	String E8FULT;
	String E8FPUT;
	String E8FFVT;
	String E8RVFT;
	String E8RFRT;
	String E8RUCT;
	String E8RPUT;
	String E8RFVT;
	String E8MDRC;
	String E8FDRC;
	String E8PPAN;
	String E8EAID;
	String E8MOID;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
PROFORMA_ORDER_HEADERStruct PROFORMA_ORDER_HEADER_tmp = new PROFORMA_ORDER_HEADERStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.SUS_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				  
				String url_tDBInput_2 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  IMHAE8FF.E8PO, \n  IMHAE8FF.E8FMFT, \n  IMHAE8FF.E8FMFR, \n  IMHAE8FF.E8FFRT, \n  IMHAE8FF.E8FULC, \n  IMHAE8FF.E8"
+"FULT, \n  IMHAE8FF.E8FPAL, \n  IMHAE8FF.E8FPUT, \n  IMHAE8FF.E8FPFB, \n  IMHAE8FF.E8FPTB, \n  IMHAE8FF.E8FFVT, \n  IMHAE8FF.E8"
+"FACM, \n  IMHAE8FF.E8FACF, \n  IMHAE8FF.E8FTUC, \n  IMHAE8FF.E8FTBC, \n  IMHAE8FF.E8FTFC, \n  IMHAE8FF.E8FTAC, \n  IMHAE8FF.E8"
+"FTPA, \n  IMHAE8FF.E8FNAC, \n  IMHAE8FF.E8FTBD, \n  IMHAE8FF.E8PNAF, \n  IMHAE8FF.E8RVFT, \n  IMHAE8FF.E8RVFR, \n  IMHAE8FF.E8"
+"RFRT, \n  IMHAE8FF.E8RULC, \n  IMHAE8FF.E8RUCT, \n  IMHAE8FF.E8RPAL, \n  IMHAE8FF.E8RPUT, \n  IMHAE8FF.E8RPFB, \n  IMHAE8FF.E8"
+"RPTB, \n  IMHAE8FF.E8RFVT, \n  IMHAE8FF.E8RACM, \n  IMHAE8FF.E8RACF, \n  IMHAE8FF.E8RTUG, \n  IMHAE8FF.E8RTBC, \n  IMHAE8FF.E8"
+"RTFC, \n  IMHAE8FF.E8RTAP, \n  IMHAE8FF.E8RTPA, \n  IMHAE8FF.E8RNAC, \n  IMHAE8FF.E8RTBD, \n  IMHAE8FF.E8MDRC, \n  IMHAE8FF.E8"
+"FDRC, \n  IMHAE8FF.E8FFCD, \n  IMHAE8FF.E8RFCD, \n  IMHAE8FF.E8FMCD, \n  IMHAE8FF.E8RMCD, \n  IMHAE8FF.E8PFNA, \n  IMHAE8FF.E8"
+"FPNA, \n  IMHAE8FF.E8RPFN, \n  IMHAE8FF.E8RFPN, \n  IMHAE8FF.E8PPAN, \n  IMHAE8FF.E8MERV, \n  IMHAE8FF.E8FTRV, \n  IMHAE8FF.E8"
+"RNAF, \n  IMHAE8FF.E8EADT, \n  IMHAE8FF.E8EATM, \n  IMHAE8FF.E8EAID, \n  IMHAE8FF.E8MODT, \n  IMHAE8FF.E8MOTM, \n  IMHAE8FF.E8"
+"MOID\nFROM IMHAE8FF ORDER BY IMHAE8FF.E8EADT DESC";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row5.E8PO = null;
							} else {
	                         		
        	row5.E8PO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row5.E8FMFT = null;
							} else {
	                         		
        	row5.E8FMFT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row5.E8FMFR = null;
							} else {
		                          
            row5.E8FMFR = rs_tDBInput_2.getBigDecimal(3);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row5.E8FFRT = null;
							} else {
	                         		
        	row5.E8FFRT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row5.E8FULC = null;
							} else {
		                          
            row5.E8FULC = rs_tDBInput_2.getBigDecimal(5);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row5.E8FULT = null;
							} else {
	                         		
        	row5.E8FULT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row5.E8FPAL = null;
							} else {
		                          
            row5.E8FPAL = rs_tDBInput_2.getBigDecimal(7);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row5.E8FPUT = null;
							} else {
	                         		
        	row5.E8FPUT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row5.E8FPFB = null;
							} else {
		                          
            row5.E8FPFB = rs_tDBInput_2.getBigDecimal(9);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row5.E8FPTB = null;
							} else {
		                          
            row5.E8FPTB = rs_tDBInput_2.getBigDecimal(10);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row5.E8FFVT = null;
							} else {
	                         		
        	row5.E8FFVT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row5.E8FACM = null;
							} else {
		                          
            row5.E8FACM = rs_tDBInput_2.getBigDecimal(12);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row5.E8FACF = null;
							} else {
		                          
            row5.E8FACF = rs_tDBInput_2.getBigDecimal(13);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row5.E8FTUC = null;
							} else {
		                          
            row5.E8FTUC = rs_tDBInput_2.getBigDecimal(14);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row5.E8FTBC = null;
							} else {
		                          
            row5.E8FTBC = rs_tDBInput_2.getBigDecimal(15);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row5.E8FTFC = null;
							} else {
		                          
            row5.E8FTFC = rs_tDBInput_2.getBigDecimal(16);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row5.E8FTAC = null;
							} else {
		                          
            row5.E8FTAC = rs_tDBInput_2.getBigDecimal(17);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row5.E8FTPA = null;
							} else {
		                          
            row5.E8FTPA = rs_tDBInput_2.getBigDecimal(18);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row5.E8FNAC = null;
							} else {
		                          
            row5.E8FNAC = rs_tDBInput_2.getBigDecimal(19);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row5.E8FTBD = null;
							} else {
		                          
            row5.E8FTBD = rs_tDBInput_2.getBigDecimal(20);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row5.E8PNAF = null;
							} else {
		                          
            row5.E8PNAF = rs_tDBInput_2.getBigDecimal(21);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row5.E8RVFT = null;
							} else {
	                         		
        	row5.E8RVFT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row5.E8RVFR = null;
							} else {
		                          
            row5.E8RVFR = rs_tDBInput_2.getBigDecimal(23);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row5.E8RFRT = null;
							} else {
	                         		
        	row5.E8RFRT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								row5.E8RULC = null;
							} else {
		                          
            row5.E8RULC = rs_tDBInput_2.getBigDecimal(25);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								row5.E8RUCT = null;
							} else {
	                         		
        	row5.E8RUCT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								row5.E8RPAL = null;
							} else {
		                          
            row5.E8RPAL = rs_tDBInput_2.getBigDecimal(27);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								row5.E8RPUT = null;
							} else {
	                         		
        	row5.E8RPUT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 28, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								row5.E8RPFB = null;
							} else {
		                          
            row5.E8RPFB = rs_tDBInput_2.getBigDecimal(29);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 30) {
								row5.E8RPTB = null;
							} else {
		                          
            row5.E8RPTB = rs_tDBInput_2.getBigDecimal(30);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 31) {
								row5.E8RFVT = null;
							} else {
	                         		
        	row5.E8RFVT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 31, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 32) {
								row5.E8RACM = null;
							} else {
		                          
            row5.E8RACM = rs_tDBInput_2.getBigDecimal(32);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 33) {
								row5.E8RACF = null;
							} else {
		                          
            row5.E8RACF = rs_tDBInput_2.getBigDecimal(33);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 34) {
								row5.E8RTUG = null;
							} else {
		                          
            row5.E8RTUG = rs_tDBInput_2.getBigDecimal(34);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 35) {
								row5.E8RTBC = null;
							} else {
		                          
            row5.E8RTBC = rs_tDBInput_2.getBigDecimal(35);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 36) {
								row5.E8RTFC = null;
							} else {
		                          
            row5.E8RTFC = rs_tDBInput_2.getBigDecimal(36);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 37) {
								row5.E8RTAP = null;
							} else {
		                          
            row5.E8RTAP = rs_tDBInput_2.getBigDecimal(37);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 38) {
								row5.E8RTPA = null;
							} else {
		                          
            row5.E8RTPA = rs_tDBInput_2.getBigDecimal(38);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 39) {
								row5.E8RNAC = null;
							} else {
		                          
            row5.E8RNAC = rs_tDBInput_2.getBigDecimal(39);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 40) {
								row5.E8RTBD = null;
							} else {
		                          
            row5.E8RTBD = rs_tDBInput_2.getBigDecimal(40);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 41) {
								row5.E8MDRC = null;
							} else {
	                         		
        	row5.E8MDRC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 41, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 42) {
								row5.E8FDRC = null;
							} else {
	                         		
        	row5.E8FDRC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 42, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 43) {
								row5.E8FFCD = null;
							} else {
		                          
            row5.E8FFCD = rs_tDBInput_2.getBigDecimal(43);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 44) {
								row5.E8RFCD = null;
							} else {
		                          
            row5.E8RFCD = rs_tDBInput_2.getBigDecimal(44);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 45) {
								row5.E8FMCD = null;
							} else {
		                          
            row5.E8FMCD = rs_tDBInput_2.getBigDecimal(45);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 46) {
								row5.E8RMCD = null;
							} else {
		                          
            row5.E8RMCD = rs_tDBInput_2.getBigDecimal(46);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 47) {
								row5.E8PFNA = null;
							} else {
		                          
            row5.E8PFNA = rs_tDBInput_2.getBigDecimal(47);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 48) {
								row5.E8FPNA = null;
							} else {
		                          
            row5.E8FPNA = rs_tDBInput_2.getBigDecimal(48);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 49) {
								row5.E8RPFN = null;
							} else {
		                          
            row5.E8RPFN = rs_tDBInput_2.getBigDecimal(49);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 50) {
								row5.E8RFPN = null;
							} else {
		                          
            row5.E8RFPN = rs_tDBInput_2.getBigDecimal(50);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 51) {
								row5.E8PPAN = null;
							} else {
	                         		
        	row5.E8PPAN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 51, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 52) {
								row5.E8MERV = null;
							} else {
		                          
            row5.E8MERV = rs_tDBInput_2.getBigDecimal(52);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 53) {
								row5.E8FTRV = null;
							} else {
		                          
            row5.E8FTRV = rs_tDBInput_2.getBigDecimal(53);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 54) {
								row5.E8RNAF = null;
							} else {
		                          
            row5.E8RNAF = rs_tDBInput_2.getBigDecimal(54);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 55) {
								row5.E8EADT = null;
							} else {
		                          
            row5.E8EADT = rs_tDBInput_2.getBigDecimal(55);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 56) {
								row5.E8EATM = null;
							} else {
		                          
            row5.E8EATM = rs_tDBInput_2.getBigDecimal(56);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 57) {
								row5.E8EAID = null;
							} else {
	                         		
        	row5.E8EAID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 57, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 58) {
								row5.E8MODT = null;
							} else {
		                          
            row5.E8MODT = rs_tDBInput_2.getBigDecimal(58);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 59) {
								row5.E8MOTM = null;
							} else {
		                          
            row5.E8MOTM = rs_tDBInput_2.getBigDecimal(59);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 60) {
								row5.E8MOID = null;
							} else {
	                         		
        	row5.E8MOID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 60, true);
		                    }
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.E8PO = CharSetHandling.convertEBCDICStrToASCII(row5.E8PO) ;
Var.E8FMFT = CharSetHandling.convertEBCDICStrToASCII(row5.E8FMFT) ;
Var.E8FFRT = CharSetHandling.convertEBCDICStrToASCII(row5.E8FFRT) ;
Var.E8FULT = CharSetHandling.convertEBCDICStrToASCII(row5.E8FULT) ;
Var.E8FPUT = CharSetHandling.convertEBCDICStrToASCII(row5.E8FPUT) ;
Var.E8FFVT = CharSetHandling.convertEBCDICStrToASCII(row5.E8FFVT) ;
Var.E8RVFT = CharSetHandling.convertEBCDICStrToASCII(row5.E8RVFT) ;
Var.E8RFRT = CharSetHandling.convertEBCDICStrToASCII(row5.E8RFRT) ;
Var.E8RUCT = CharSetHandling.convertEBCDICStrToASCII(row5.E8RUCT) ;
Var.E8RPUT = CharSetHandling.convertEBCDICStrToASCII(row5.E8RPUT) ;
Var.E8RFVT = CharSetHandling.convertEBCDICStrToASCII(row5.E8RFVT) ;
Var.E8MDRC = CharSetHandling.convertEBCDICStrToASCII(row5.E8MDRC) ;
Var.E8FDRC = CharSetHandling.convertEBCDICStrToASCII(row5.E8FDRC) ;
Var.E8PPAN = CharSetHandling.convertEBCDICStrToASCII(row5.E8PPAN) ;
Var.E8EAID = CharSetHandling.convertEBCDICStrToASCII(row5.E8EAID) ;
Var.E8MOID = CharSetHandling.convertEBCDICStrToASCII(row5.E8MOID) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row5.E8EADT.toString(),row5.E8EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row5.E8MODT.toString(),row5.E8MOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PROFORMA_ORDER_HEADER = null;


// # Output table : 'PROFORMA_ORDER_HEADER'
PROFORMA_ORDER_HEADER_tmp.SITE_ID = context.opco;
PROFORMA_ORDER_HEADER_tmp.PURCHASE_ORDER_NO = Var.E8PO;
PROFORMA_ORDER_HEADER_tmp.TERMS = Var.E8FMFT;
PROFORMA_ORDER_HEADER_tmp.FREIGHT_RATE = row5.E8FMFR ;
PROFORMA_ORDER_HEADER_tmp.FREIGHT_RATE_TYPE = Var.E8FFRT;
PROFORMA_ORDER_HEADER_tmp.UNLOADING_CHARGE = row5.E8FULC;
PROFORMA_ORDER_HEADER_tmp.UNLOADING_CHARGE_TYPE = Var.E8FULT;
PROFORMA_ORDER_HEADER_tmp.PICKUP_ALLOWANCE_RATE = row5.E8FPAL;
PROFORMA_ORDER_HEADER_tmp.PICKUP_ALLOWANCE_TYPE = Var.E8FPUT;
PROFORMA_ORDER_HEADER_tmp.PICKUP_ALLOWANCE_FROM_BRACKET = row5.E8FPFB;
PROFORMA_ORDER_HEADER_tmp.PICKUP_ALLOWANCE_TO_BRACKET = row5.E8FPTB;
PROFORMA_ORDER_HEADER_tmp.FREIGHT_VENDOR_TERMS = Var.E8FFVT;
PROFORMA_ORDER_HEADER_tmp.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE = row5.E8FACM;
PROFORMA_ORDER_HEADER_tmp.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = row5.E8FACF;
PROFORMA_ORDER_HEADER_tmp.TOTAL_UNLOADING_CHARGE = row5.E8FTUC;
PROFORMA_ORDER_HEADER_tmp.TOTAT_FOB_COST = row5.E8FTBC;
PROFORMA_ORDER_HEADER_tmp.TOTAL_FREIGHT_COST = row5.E8FTFC;
PROFORMA_ORDER_HEADER_tmp.TOTAL_AP_COST = row5.E8FTAC;
PROFORMA_ORDER_HEADER_tmp.TOTAL_PICKUP_ALLOWANCE = row5.E8FTPA;
PROFORMA_ORDER_HEADER_tmp.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH = row5.E8FNAC;
PROFORMA_ORDER_HEADER_tmp.TOTAL_BRACKET_DIFFERENTIAL = row5.E8FTBD;
PROFORMA_ORDER_HEADER_tmp.TOTAL_NON_DISTRB_ALLOWANCE = row5.E8PNAF;
PROFORMA_ORDER_HEADER_tmp.REVISED_TERMS = Var.E8RVFT;
PROFORMA_ORDER_HEADER_tmp.REVISED_FREIGHT_RATE = row5.E8RVFR;
PROFORMA_ORDER_HEADER_tmp.REVISED_FREIGHT_RATE_TYPE = Var.E8RFRT;
PROFORMA_ORDER_HEADER_tmp.REVISED_UNLOADING_CHARGE = row5.E8RULC;
PROFORMA_ORDER_HEADER_tmp.REVISED_UNLOADING_CHARGE_TYPE = Var.E8RUCT;
PROFORMA_ORDER_HEADER_tmp.REVISED_PICKUP_ALLOWANCE_RATE = row5.E8RPAL;
PROFORMA_ORDER_HEADER_tmp.REVISED_PICKUP_ALLOWANCE_TYPE = Var.E8RPUT;
PROFORMA_ORDER_HEADER_tmp.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET = row5.E8RPFB;
PROFORMA_ORDER_HEADER_tmp.REVISED_PICKUP_ALLOWANCE_TO_BRACKET = row5.E8RPTB;
PROFORMA_ORDER_HEADER_tmp.REVISED_FREIGHT_VENDOR_TERMS = Var.E8RFVT;
PROFORMA_ORDER_HEADER_tmp.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = row5.E8RACM;
PROFORMA_ORDER_HEADER_tmp.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = row5.E8RACF;
PROFORMA_ORDER_HEADER_tmp.REVISED_TOTAL_UNLOADING_CHARGE = row5.E8RTUG;
PROFORMA_ORDER_HEADER_tmp.REVISED_TOTAL_FOB_COST = row5.E8RTBC;
PROFORMA_ORDER_HEADER_tmp.REVISED_TOTAL_FREIGHT_COST = row5.E8RTFC;
PROFORMA_ORDER_HEADER_tmp.REVISED_TOTAL_AP_COST = row5.E8RTAP;
PROFORMA_ORDER_HEADER_tmp.REVISED_TOTAL_PICKUP_ALLOWANCE = row5.E8RTPA;
PROFORMA_ORDER_HEADER_tmp.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT = row5.E8RNAC;
PROFORMA_ORDER_HEADER_tmp.REVISED_TOTAL_BRACKET_DIFFERENTIAL = row5.E8RTBD;
PROFORMA_ORDER_HEADER_tmp.MERCH_DEFAULT_REASON_CODE = Var.E8MDRC;
PROFORMA_ORDER_HEADER_tmp.FREIGHT_DEFAULT_REASON_CODE = Var.E8FDRC;
PROFORMA_ORDER_HEADER_tmp.FREIGHT_CASH_DISCOUNT_AMOUNT = row5.E8FFCD;
PROFORMA_ORDER_HEADER_tmp.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = row5.E8RFCD;
PROFORMA_ORDER_HEADER_tmp.MERCHANDISE_CASH_DISCOUNT_AMOUNT = row5.E8FMCD;
PROFORMA_ORDER_HEADER_tmp.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = row5.E8RMCD;
PROFORMA_ORDER_HEADER_tmp.MERCH_NET_AMOUNT = row5.E8PFNA;
PROFORMA_ORDER_HEADER_tmp.FREIGHT_NET_AMOUNT = row5.E8FPNA;
PROFORMA_ORDER_HEADER_tmp.REVISED_MERCH_NET_AMOUNT = row5.E8RPFN;
PROFORMA_ORDER_HEADER_tmp.REVISED_FREIGHT_NET_AMOUNT = row5.E8RFPN;
PROFORMA_ORDER_HEADER_tmp.PROCUREMENT_PRE_APPROVAL_NUMBER = Var.E8PPAN;
PROFORMA_ORDER_HEADER_tmp.MERCH_ROUNDING_VARIANCE = row5.E8MERV;
PROFORMA_ORDER_HEADER_tmp.FREIGHT_ROUNDING_VARIANCE = row5.E8FTRV;
PROFORMA_ORDER_HEADER_tmp.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES = row5.E8RNAF;
PROFORMA_ORDER_HEADER_tmp.E8FF_SVOP = context.svop;
PROFORMA_ORDER_HEADER_tmp.IS_ACTIVE = true;
PROFORMA_ORDER_HEADER_tmp.CREATED_USER_ID = Var.E8EAID;
PROFORMA_ORDER_HEADER_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PROFORMA_ORDER_HEADER_tmp.UPDATED_USER_ID = Var.E8MOID;
PROFORMA_ORDER_HEADER_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PROFORMA_ORDER_HEADER_tmp.IS_DELETED = false;
PROFORMA_ORDER_HEADER_tmp.CREATED_ORIGIN = "SUS";
PROFORMA_ORDER_HEADER_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PROFORMA_ORDER_HEADER_tmp.UPDATED_ORIGIN = "SUS";
PROFORMA_ORDER_HEADER_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PROFORMA_ORDER_HEADER = PROFORMA_ORDER_HEADER_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "PROFORMA_ORDER_HEADER"
if(PROFORMA_ORDER_HEADER != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PROFORMA_ORDER_HEADER"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(PROFORMA_ORDER_HEADER.SITE_ID == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, PROFORMA_ORDER_HEADER.SITE_ID);
}

                    if(PROFORMA_ORDER_HEADER.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, PROFORMA_ORDER_HEADER.PURCHASE_ORDER_NO);
}

                    if(PROFORMA_ORDER_HEADER.TERMS == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, PROFORMA_ORDER_HEADER.TERMS);
}

                    pstmt_tDBOutput_2.setBigDecimal(4, PROFORMA_ORDER_HEADER.FREIGHT_RATE);

                    if(PROFORMA_ORDER_HEADER.FREIGHT_RATE_TYPE == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, PROFORMA_ORDER_HEADER.FREIGHT_RATE_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(6, PROFORMA_ORDER_HEADER.UNLOADING_CHARGE);

                    if(PROFORMA_ORDER_HEADER.UNLOADING_CHARGE_TYPE == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, PROFORMA_ORDER_HEADER.UNLOADING_CHARGE_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(8, PROFORMA_ORDER_HEADER.PICKUP_ALLOWANCE_RATE);

                    if(PROFORMA_ORDER_HEADER.PICKUP_ALLOWANCE_TYPE == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, PROFORMA_ORDER_HEADER.PICKUP_ALLOWANCE_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(10, PROFORMA_ORDER_HEADER.PICKUP_ALLOWANCE_FROM_BRACKET);

                    pstmt_tDBOutput_2.setBigDecimal(11, PROFORMA_ORDER_HEADER.PICKUP_ALLOWANCE_TO_BRACKET);

                    if(PROFORMA_ORDER_HEADER.FREIGHT_VENDOR_TERMS == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(12, PROFORMA_ORDER_HEADER.FREIGHT_VENDOR_TERMS);
}

                    pstmt_tDBOutput_2.setBigDecimal(13, PROFORMA_ORDER_HEADER.ALLOWANCE_CHARGES_DISTRIB_TO_MERCHANDISE);

                    pstmt_tDBOutput_2.setBigDecimal(14, PROFORMA_ORDER_HEADER.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);

                    pstmt_tDBOutput_2.setBigDecimal(15, PROFORMA_ORDER_HEADER.TOTAL_UNLOADING_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(16, PROFORMA_ORDER_HEADER.TOTAT_FOB_COST);

                    pstmt_tDBOutput_2.setBigDecimal(17, PROFORMA_ORDER_HEADER.TOTAL_FREIGHT_COST);

                    pstmt_tDBOutput_2.setBigDecimal(18, PROFORMA_ORDER_HEADER.TOTAL_AP_COST);

                    pstmt_tDBOutput_2.setBigDecimal(19, PROFORMA_ORDER_HEADER.TOTAL_PICKUP_ALLOWANCE);

                    pstmt_tDBOutput_2.setBigDecimal(20, PROFORMA_ORDER_HEADER.TOTAL_NON_DISTRIB_ALLOWANCE_CHARGES_TO_MERCH);

                    pstmt_tDBOutput_2.setBigDecimal(21, PROFORMA_ORDER_HEADER.TOTAL_BRACKET_DIFFERENTIAL);

                    pstmt_tDBOutput_2.setBigDecimal(22, PROFORMA_ORDER_HEADER.TOTAL_NON_DISTRB_ALLOWANCE);

                    if(PROFORMA_ORDER_HEADER.REVISED_TERMS == null) {
pstmt_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(23, PROFORMA_ORDER_HEADER.REVISED_TERMS);
}

                    pstmt_tDBOutput_2.setBigDecimal(24, PROFORMA_ORDER_HEADER.REVISED_FREIGHT_RATE);

                    if(PROFORMA_ORDER_HEADER.REVISED_FREIGHT_RATE_TYPE == null) {
pstmt_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(25, PROFORMA_ORDER_HEADER.REVISED_FREIGHT_RATE_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(26, PROFORMA_ORDER_HEADER.REVISED_UNLOADING_CHARGE);

                    if(PROFORMA_ORDER_HEADER.REVISED_UNLOADING_CHARGE_TYPE == null) {
pstmt_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(27, PROFORMA_ORDER_HEADER.REVISED_UNLOADING_CHARGE_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(28, PROFORMA_ORDER_HEADER.REVISED_PICKUP_ALLOWANCE_RATE);

                    if(PROFORMA_ORDER_HEADER.REVISED_PICKUP_ALLOWANCE_TYPE == null) {
pstmt_tDBOutput_2.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(29, PROFORMA_ORDER_HEADER.REVISED_PICKUP_ALLOWANCE_TYPE);
}

                    pstmt_tDBOutput_2.setBigDecimal(30, PROFORMA_ORDER_HEADER.REVISED_PICKUP_ALLOWANCE_FROM_BRACKET);

                    pstmt_tDBOutput_2.setBigDecimal(31, PROFORMA_ORDER_HEADER.REVISED_PICKUP_ALLOWANCE_TO_BRACKET);

                    if(PROFORMA_ORDER_HEADER.REVISED_FREIGHT_VENDOR_TERMS == null) {
pstmt_tDBOutput_2.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(32, PROFORMA_ORDER_HEADER.REVISED_FREIGHT_VENDOR_TERMS);
}

                    pstmt_tDBOutput_2.setBigDecimal(33, PROFORMA_ORDER_HEADER.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);

                    pstmt_tDBOutput_2.setBigDecimal(34, PROFORMA_ORDER_HEADER.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);

                    pstmt_tDBOutput_2.setBigDecimal(35, PROFORMA_ORDER_HEADER.REVISED_TOTAL_UNLOADING_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(36, PROFORMA_ORDER_HEADER.REVISED_TOTAL_FOB_COST);

                    pstmt_tDBOutput_2.setBigDecimal(37, PROFORMA_ORDER_HEADER.REVISED_TOTAL_FREIGHT_COST);

                    pstmt_tDBOutput_2.setBigDecimal(38, PROFORMA_ORDER_HEADER.REVISED_TOTAL_AP_COST);

                    pstmt_tDBOutput_2.setBigDecimal(39, PROFORMA_ORDER_HEADER.REVISED_TOTAL_PICKUP_ALLOWANCE);

                    pstmt_tDBOutput_2.setBigDecimal(40, PROFORMA_ORDER_HEADER.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGE_TO_MERCHANT);

                    pstmt_tDBOutput_2.setBigDecimal(41, PROFORMA_ORDER_HEADER.REVISED_TOTAL_BRACKET_DIFFERENTIAL);

                    if(PROFORMA_ORDER_HEADER.MERCH_DEFAULT_REASON_CODE == null) {
pstmt_tDBOutput_2.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(42, PROFORMA_ORDER_HEADER.MERCH_DEFAULT_REASON_CODE);
}

                    if(PROFORMA_ORDER_HEADER.FREIGHT_DEFAULT_REASON_CODE == null) {
pstmt_tDBOutput_2.setNull(43, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(43, PROFORMA_ORDER_HEADER.FREIGHT_DEFAULT_REASON_CODE);
}

                    pstmt_tDBOutput_2.setBigDecimal(44, PROFORMA_ORDER_HEADER.FREIGHT_CASH_DISCOUNT_AMOUNT);

                    pstmt_tDBOutput_2.setBigDecimal(45, PROFORMA_ORDER_HEADER.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT);

                    pstmt_tDBOutput_2.setBigDecimal(46, PROFORMA_ORDER_HEADER.MERCHANDISE_CASH_DISCOUNT_AMOUNT);

                    pstmt_tDBOutput_2.setBigDecimal(47, PROFORMA_ORDER_HEADER.REVISED_MERCH_CASH_DISCOUNT_AMOUNT);

                    pstmt_tDBOutput_2.setBigDecimal(48, PROFORMA_ORDER_HEADER.MERCH_NET_AMOUNT);

                    pstmt_tDBOutput_2.setBigDecimal(49, PROFORMA_ORDER_HEADER.FREIGHT_NET_AMOUNT);

                    pstmt_tDBOutput_2.setBigDecimal(50, PROFORMA_ORDER_HEADER.REVISED_MERCH_NET_AMOUNT);

                    pstmt_tDBOutput_2.setBigDecimal(51, PROFORMA_ORDER_HEADER.REVISED_FREIGHT_NET_AMOUNT);

                    if(PROFORMA_ORDER_HEADER.PROCUREMENT_PRE_APPROVAL_NUMBER == null) {
pstmt_tDBOutput_2.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(52, PROFORMA_ORDER_HEADER.PROCUREMENT_PRE_APPROVAL_NUMBER);
}

                    pstmt_tDBOutput_2.setBigDecimal(53, PROFORMA_ORDER_HEADER.MERCH_ROUNDING_VARIANCE);

                    pstmt_tDBOutput_2.setBigDecimal(54, PROFORMA_ORDER_HEADER.FREIGHT_ROUNDING_VARIANCE);

                    pstmt_tDBOutput_2.setBigDecimal(55, PROFORMA_ORDER_HEADER.REVISED_TOTAL_NON_DISTRB_ALLOWANCE_CHARGES);

                    if(PROFORMA_ORDER_HEADER.E8FF_SVOP == null) {
pstmt_tDBOutput_2.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(56, PROFORMA_ORDER_HEADER.E8FF_SVOP);
}

                    if(PROFORMA_ORDER_HEADER.IS_ACTIVE == null) {
pstmt_tDBOutput_2.setNull(57, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_2.setBoolean(57, PROFORMA_ORDER_HEADER.IS_ACTIVE);
}

                    if(PROFORMA_ORDER_HEADER.CREATED_USER_ID == null) {
pstmt_tDBOutput_2.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(58, PROFORMA_ORDER_HEADER.CREATED_USER_ID);
}

                    if(PROFORMA_ORDER_HEADER.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(59, new java.sql.Timestamp(PROFORMA_ORDER_HEADER.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(59, java.sql.Types.TIMESTAMP);
}

                    if(PROFORMA_ORDER_HEADER.UPDATED_USER_ID == null) {
pstmt_tDBOutput_2.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(60, PROFORMA_ORDER_HEADER.UPDATED_USER_ID);
}

                    if(PROFORMA_ORDER_HEADER.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(61, new java.sql.Timestamp(PROFORMA_ORDER_HEADER.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(61, java.sql.Types.TIMESTAMP);
}

                    if(PROFORMA_ORDER_HEADER.IS_DELETED == null) {
pstmt_tDBOutput_2.setNull(62, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_2.setBoolean(62, PROFORMA_ORDER_HEADER.IS_DELETED);
}

                    if(PROFORMA_ORDER_HEADER.CREATED_ORIGIN == null) {
pstmt_tDBOutput_2.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(63, PROFORMA_ORDER_HEADER.CREATED_ORIGIN);
}

                    if(PROFORMA_ORDER_HEADER.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(64, new java.sql.Timestamp(PROFORMA_ORDER_HEADER.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(64, java.sql.Types.TIMESTAMP);
}

                    if(PROFORMA_ORDER_HEADER.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_2.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(65, PROFORMA_ORDER_HEADER.UPDATED_ORIGIN);
}

                    if(PROFORMA_ORDER_HEADER.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(66, new java.sql.Timestamp(PROFORMA_ORDER_HEADER.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(66, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
            	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
			    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "PROFORMA_ORDER_HEADER"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_2", end_Hash.get("tDBInput_2")-start_Hash.get("tDBInput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
			}
			conn_tDBOutput_2.commit();
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
				rowsToCommitCount_tDBOutput_2 = 0;
			}
			commitCounter_tDBOutput_2 = 0;
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PROFORMA_ORDER_HEADER");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_2", end_Hash.get("tDBOutput_2")-start_Hash.get("tDBOutput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Starting the Migrating Data from IMHBE9FF to PROFORMA_ORDER_DETAIL...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class PROFORMA_ORDER_DETAILStruct implements routines.system.IPersistableRow<PROFORMA_ORDER_DETAILStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}
				
			    public BigDecimal RECOMMENDED_ORDER_SEQ_NO;

				public BigDecimal getRECOMMENDED_ORDER_SEQ_NO () {
					return this.RECOMMENDED_ORDER_SEQ_NO;
				}
				
			    public String CUST_PREFERENCE_VENDOR;

				public String getCUST_PREFERENCE_VENDOR () {
					return this.CUST_PREFERENCE_VENDOR;
				}
				
			    public String MERCH_CHANGE_FLAG;

				public String getMERCH_CHANGE_FLAG () {
					return this.MERCH_CHANGE_FLAG;
				}
				
			    public String FREIGHT_CHANGE_FLAG;

				public String getFREIGHT_CHANGE_FLAG () {
					return this.FREIGHT_CHANGE_FLAG;
				}
				
			    public String DROP_SHIP_QTY_CHANGE_FLAG;

				public String getDROP_SHIP_QTY_CHANGE_FLAG () {
					return this.DROP_SHIP_QTY_CHANGE_FLAG;
				}
				
			    public String MERCH_REASON_CODE;

				public String getMERCH_REASON_CODE () {
					return this.MERCH_REASON_CODE;
				}
				
			    public String FREIGHT_REASON_CODE;

				public String getFREIGHT_REASON_CODE () {
					return this.FREIGHT_REASON_CODE;
				}
				
			    public BigDecimal PO_ORDER_QTY;

				public BigDecimal getPO_ORDER_QTY () {
					return this.PO_ORDER_QTY;
				}
				
			    public BigDecimal PO_FOB_PER_ITEM;

				public BigDecimal getPO_FOB_PER_ITEM () {
					return this.PO_FOB_PER_ITEM;
				}
				
			    public BigDecimal PO_FREIGHT_PER_ITEM;

				public BigDecimal getPO_FREIGHT_PER_ITEM () {
					return this.PO_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal PO_AP_PER_ITEM;

				public BigDecimal getPO_AP_PER_ITEM () {
					return this.PO_AP_PER_ITEM;
				}
				
			    public BigDecimal PICKUP_ALLOWANCE;

				public BigDecimal getPICKUP_ALLOWANCE () {
					return this.PICKUP_ALLOWANCE;
				}
				
			    public String PICKUP_ALLOWANCE_TYPE;

				public String getPICKUP_ALLOWANCE_TYPE () {
					return this.PICKUP_ALLOWANCE_TYPE;
				}
				
			    public BigDecimal FREIGHT_RATE_OVERRIDE;

				public BigDecimal getFREIGHT_RATE_OVERRIDE () {
					return this.FREIGHT_RATE_OVERRIDE;
				}
				
			    public String FREIGHT_TYPE_OVERRIDE;

				public String getFREIGHT_TYPE_OVERRIDE () {
					return this.FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal PICKUP_ALLOWANCE_PER_ITEM;

				public BigDecimal getPICKUP_ALLOWANCE_PER_ITEM () {
					return this.PICKUP_ALLOWANCE_PER_ITEM;
				}
				
			    public BigDecimal BRACKET_DIFFERENTIAL_PER_ITEM;

				public BigDecimal getBRACKET_DIFFERENTIAL_PER_ITEM () {
					return this.BRACKET_DIFFERENTIAL_PER_ITEM;
				}
				
			    public String UNIT_OF_MEASURE;

				public String getUNIT_OF_MEASURE () {
					return this.UNIT_OF_MEASURE;
				}
				
			    public BigDecimal UNLOADING_CHARGE_PER_ITEM;

				public BigDecimal getUNLOADING_CHARGE_PER_ITEM () {
					return this.UNLOADING_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;

				public BigDecimal getALLOWANCE_CHARGES_DISTRIB_TO_MERCH () {
					return this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
				}
				
			    public BigDecimal ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;

				public BigDecimal getALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT () {
					return this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
				}
				
			    public String AS_MANUALLY_ENTERED_LINE_FLAG;

				public String getAS_MANUALLY_ENTERED_LINE_FLAG () {
					return this.AS_MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public String PAY_MERCH;

				public String getPAY_MERCH () {
					return this.PAY_MERCH;
				}
				
			    public String PAY_QTY;

				public String getPAY_QTY () {
					return this.PAY_QTY;
				}
				
			    public String PO_REVISED_ORDER_QTY;

				public String getPO_REVISED_ORDER_QTY () {
					return this.PO_REVISED_ORDER_QTY;
				}
				
			    public BigDecimal PO_REVISED_FOB_PER_ITEM;

				public BigDecimal getPO_REVISED_FOB_PER_ITEM () {
					return this.PO_REVISED_FOB_PER_ITEM;
				}
				
			    public BigDecimal PO_REVISED_FREIGHT_PER_ITEM;

				public BigDecimal getPO_REVISED_FREIGHT_PER_ITEM () {
					return this.PO_REVISED_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal PO_REVISED_AP_PER_ITEM;

				public BigDecimal getPO_REVISED_AP_PER_ITEM () {
					return this.PO_REVISED_AP_PER_ITEM;
				}
				
			    public BigDecimal REVISED_PICKUP_ALLOWANCE;

				public BigDecimal getREVISED_PICKUP_ALLOWANCE () {
					return this.REVISED_PICKUP_ALLOWANCE;
				}
				
			    public String REVISED_PICKUP_ALLOWANCE_TYPE;

				public String getREVISED_PICKUP_ALLOWANCE_TYPE () {
					return this.REVISED_PICKUP_ALLOWANCE_TYPE;
				}
				
			    public BigDecimal REVISED_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getREVISED_FREIGHT_RATE_OVERRIDE () {
					return this.REVISED_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String REVISED_FREIGHT_TYPE_OVERRIDE;

				public String getREVISED_FREIGHT_TYPE_OVERRIDE () {
					return this.REVISED_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal REVISED_PICKUP_ALLOWANCE_PER_ITEM;

				public BigDecimal getREVISED_PICKUP_ALLOWANCE_PER_ITEM () {
					return this.REVISED_PICKUP_ALLOWANCE_PER_ITEM;
				}
				
			    public BigDecimal REVISED_BRACKET_DIFFERENTIAL_PER_ITEM;

				public BigDecimal getREVISED_BRACKET_DIFFERENTIAL_PER_ITEM () {
					return this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM;
				}
				
			    public BigDecimal REVISED_UNLOADING_CHARGE_PER_ITEM;

				public BigDecimal getREVISED_UNLOADING_CHARGE_PER_ITEM () {
					return this.REVISED_UNLOADING_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;

				public BigDecimal getREVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH () {
					return this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
				}
				
			    public BigDecimal REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;

				public BigDecimal getREVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT () {
					return this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
				}
				
			    public BigDecimal REVISED_DROP_SHIP_RECEIVED_QTY;

				public BigDecimal getREVISED_DROP_SHIP_RECEIVED_QTY () {
					return this.REVISED_DROP_SHIP_RECEIVED_QTY;
				}
				
			    public BigDecimal REVISED_DROP_SHIP_RECEIVED_WEIGHT;

				public BigDecimal getREVISED_DROP_SHIP_RECEIVED_WEIGHT () {
					return this.REVISED_DROP_SHIP_RECEIVED_WEIGHT;
				}
				
			    public BigDecimal REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY;

				public BigDecimal getREVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY () {
					return this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY;
				}
				
			    public BigDecimal REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT;

				public BigDecimal getREVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT () {
					return this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT;
				}
				
			    public String TERMS;

				public String getTERMS () {
					return this.TERMS;
				}
				
			    public String REVISED_TERMS;

				public String getREVISED_TERMS () {
					return this.REVISED_TERMS;
				}
				
			    public BigDecimal FREIGHT_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getFREIGHT_CASH_DISCOUNT_AMOUNT () {
					return this.FREIGHT_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getREVISED_FREIGHT_CASH_DISCOUNT_AMOUNT () {
					return this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal MERCH_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getMERCH_CASH_DISCOUNT_AMOUNT () {
					return this.MERCH_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal REVISED_MERCH_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getREVISED_MERCH_CASH_DISCOUNT_AMOUNT () {
					return this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal REVISED_MERCH_EXTENDED_AMOUNT;

				public BigDecimal getREVISED_MERCH_EXTENDED_AMOUNT () {
					return this.REVISED_MERCH_EXTENDED_AMOUNT;
				}
				
			    public BigDecimal REVISED_FREIGHT_EXTENDED_AMOUNT;

				public BigDecimal getREVISED_FREIGHT_EXTENDED_AMOUNT () {
					return this.REVISED_FREIGHT_EXTENDED_AMOUNT;
				}
				
			    public BigDecimal MERCH_EXTENDED_AMOUNT_TO_BE_PAID;

				public BigDecimal getMERCH_EXTENDED_AMOUNT_TO_BE_PAID () {
					return this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID;

				public BigDecimal getFREIGHT_EXTENDED_AMOUNT_TO_BE_PAID () {
					return this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID;
				}
				
			    public String PRICE_OVERRIDE_FLAG;

				public String getPRICE_OVERRIDE_FLAG () {
					return this.PRICE_OVERRIDE_FLAG;
				}
				
			    public String REVISED_PRICE_OVERRIDE_FLAG;

				public String getREVISED_PRICE_OVERRIDE_FLAG () {
					return this.REVISED_PRICE_OVERRIDE_FLAG;
				}
				
			    public BigDecimal CARRIER_SHORT_QTY;

				public BigDecimal getCARRIER_SHORT_QTY () {
					return this.CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal VENDOR_SHORT_QTY;

				public BigDecimal getVENDOR_SHORT_QTY () {
					return this.VENDOR_SHORT_QTY;
				}
				
			    public String E9FF_SVOP;

				public String getE9FF_SVOP () {
					return this.E9FF_SVOP;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.ITEM == null) ? 0 : this.ITEM.hashCode());
					
						result = prime * result + ((this.RECOMMENDED_ORDER_SEQ_NO == null) ? 0 : this.RECOMMENDED_ORDER_SEQ_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PROFORMA_ORDER_DETAILStruct other = (PROFORMA_ORDER_DETAILStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.ITEM == null) {
							if (other.ITEM != null)
								return false;
						
						} else if (!this.ITEM.equals(other.ITEM))
						
							return false;
					
						if (this.RECOMMENDED_ORDER_SEQ_NO == null) {
							if (other.RECOMMENDED_ORDER_SEQ_NO != null)
								return false;
						
						} else if (!this.RECOMMENDED_ORDER_SEQ_NO.equals(other.RECOMMENDED_ORDER_SEQ_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PROFORMA_ORDER_DETAILStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.ITEM = this.ITEM;
	            other.RECOMMENDED_ORDER_SEQ_NO = this.RECOMMENDED_ORDER_SEQ_NO;
	            other.CUST_PREFERENCE_VENDOR = this.CUST_PREFERENCE_VENDOR;
	            other.MERCH_CHANGE_FLAG = this.MERCH_CHANGE_FLAG;
	            other.FREIGHT_CHANGE_FLAG = this.FREIGHT_CHANGE_FLAG;
	            other.DROP_SHIP_QTY_CHANGE_FLAG = this.DROP_SHIP_QTY_CHANGE_FLAG;
	            other.MERCH_REASON_CODE = this.MERCH_REASON_CODE;
	            other.FREIGHT_REASON_CODE = this.FREIGHT_REASON_CODE;
	            other.PO_ORDER_QTY = this.PO_ORDER_QTY;
	            other.PO_FOB_PER_ITEM = this.PO_FOB_PER_ITEM;
	            other.PO_FREIGHT_PER_ITEM = this.PO_FREIGHT_PER_ITEM;
	            other.PO_AP_PER_ITEM = this.PO_AP_PER_ITEM;
	            other.PICKUP_ALLOWANCE = this.PICKUP_ALLOWANCE;
	            other.PICKUP_ALLOWANCE_TYPE = this.PICKUP_ALLOWANCE_TYPE;
	            other.FREIGHT_RATE_OVERRIDE = this.FREIGHT_RATE_OVERRIDE;
	            other.FREIGHT_TYPE_OVERRIDE = this.FREIGHT_TYPE_OVERRIDE;
	            other.PICKUP_ALLOWANCE_PER_ITEM = this.PICKUP_ALLOWANCE_PER_ITEM;
	            other.BRACKET_DIFFERENTIAL_PER_ITEM = this.BRACKET_DIFFERENTIAL_PER_ITEM;
	            other.UNIT_OF_MEASURE = this.UNIT_OF_MEASURE;
	            other.UNLOADING_CHARGE_PER_ITEM = this.UNLOADING_CHARGE_PER_ITEM;
	            other.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
	            other.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
	            other.AS_MANUALLY_ENTERED_LINE_FLAG = this.AS_MANUALLY_ENTERED_LINE_FLAG;
	            other.PAY_MERCH = this.PAY_MERCH;
	            other.PAY_QTY = this.PAY_QTY;
	            other.PO_REVISED_ORDER_QTY = this.PO_REVISED_ORDER_QTY;
	            other.PO_REVISED_FOB_PER_ITEM = this.PO_REVISED_FOB_PER_ITEM;
	            other.PO_REVISED_FREIGHT_PER_ITEM = this.PO_REVISED_FREIGHT_PER_ITEM;
	            other.PO_REVISED_AP_PER_ITEM = this.PO_REVISED_AP_PER_ITEM;
	            other.REVISED_PICKUP_ALLOWANCE = this.REVISED_PICKUP_ALLOWANCE;
	            other.REVISED_PICKUP_ALLOWANCE_TYPE = this.REVISED_PICKUP_ALLOWANCE_TYPE;
	            other.REVISED_FREIGHT_RATE_OVERRIDE = this.REVISED_FREIGHT_RATE_OVERRIDE;
	            other.REVISED_FREIGHT_TYPE_OVERRIDE = this.REVISED_FREIGHT_TYPE_OVERRIDE;
	            other.REVISED_PICKUP_ALLOWANCE_PER_ITEM = this.REVISED_PICKUP_ALLOWANCE_PER_ITEM;
	            other.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM = this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM;
	            other.REVISED_UNLOADING_CHARGE_PER_ITEM = this.REVISED_UNLOADING_CHARGE_PER_ITEM;
	            other.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
	            other.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
	            other.REVISED_DROP_SHIP_RECEIVED_QTY = this.REVISED_DROP_SHIP_RECEIVED_QTY;
	            other.REVISED_DROP_SHIP_RECEIVED_WEIGHT = this.REVISED_DROP_SHIP_RECEIVED_WEIGHT;
	            other.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY = this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY;
	            other.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT = this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT;
	            other.TERMS = this.TERMS;
	            other.REVISED_TERMS = this.REVISED_TERMS;
	            other.FREIGHT_CASH_DISCOUNT_AMOUNT = this.FREIGHT_CASH_DISCOUNT_AMOUNT;
	            other.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;
	            other.MERCH_CASH_DISCOUNT_AMOUNT = this.MERCH_CASH_DISCOUNT_AMOUNT;
	            other.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT;
	            other.REVISED_MERCH_EXTENDED_AMOUNT = this.REVISED_MERCH_EXTENDED_AMOUNT;
	            other.REVISED_FREIGHT_EXTENDED_AMOUNT = this.REVISED_FREIGHT_EXTENDED_AMOUNT;
	            other.MERCH_EXTENDED_AMOUNT_TO_BE_PAID = this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID;
	            other.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID = this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID;
	            other.PRICE_OVERRIDE_FLAG = this.PRICE_OVERRIDE_FLAG;
	            other.REVISED_PRICE_OVERRIDE_FLAG = this.REVISED_PRICE_OVERRIDE_FLAG;
	            other.CARRIER_SHORT_QTY = this.CARRIER_SHORT_QTY;
	            other.VENDOR_SHORT_QTY = this.VENDOR_SHORT_QTY;
	            other.E9FF_SVOP = this.E9FF_SVOP;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            
	}

	public void copyKeysDataTo(PROFORMA_ORDER_DETAILStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.ITEM = this.ITEM;
	            	other.RECOMMENDED_ORDER_SEQ_NO = this.RECOMMENDED_ORDER_SEQ_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.RECOMMENDED_ORDER_SEQ_NO = (BigDecimal) dis.readObject();
					
					this.CUST_PREFERENCE_VENDOR = readString(dis);
					
					this.MERCH_CHANGE_FLAG = readString(dis);
					
					this.FREIGHT_CHANGE_FLAG = readString(dis);
					
					this.DROP_SHIP_QTY_CHANGE_FLAG = readString(dis);
					
					this.MERCH_REASON_CODE = readString(dis);
					
					this.FREIGHT_REASON_CODE = readString(dis);
					
						this.PO_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.PO_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.PICKUP_ALLOWANCE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.BRACKET_DIFFERENTIAL_PER_ITEM = (BigDecimal) dis.readObject();
					
					this.UNIT_OF_MEASURE = readString(dis);
					
						this.UNLOADING_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
					this.AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.PAY_MERCH = readString(dis);
					
					this.PAY_QTY = readString(dis);
					
					this.PO_REVISED_ORDER_QTY = readString(dis);
					
						this.PO_REVISED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_REVISED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_REVISED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.REVISED_PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.REVISED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.REVISED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.REVISED_PICKUP_ALLOWANCE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_UNLOADING_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_RECEIVED_QTY = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_RECEIVED_WEIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT = (BigDecimal) dis.readObject();
					
					this.TERMS = readString(dis);
					
					this.REVISED_TERMS = readString(dis);
					
						this.FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_EXTENDED_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_EXTENDED_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.REVISED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.E9FF_SVOP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.CREATED_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.RECOMMENDED_ORDER_SEQ_NO = (BigDecimal) dis.readObject();
					
					this.CUST_PREFERENCE_VENDOR = readString(dis);
					
					this.MERCH_CHANGE_FLAG = readString(dis);
					
					this.FREIGHT_CHANGE_FLAG = readString(dis);
					
					this.DROP_SHIP_QTY_CHANGE_FLAG = readString(dis);
					
					this.MERCH_REASON_CODE = readString(dis);
					
					this.FREIGHT_REASON_CODE = readString(dis);
					
						this.PO_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.PO_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.PICKUP_ALLOWANCE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.BRACKET_DIFFERENTIAL_PER_ITEM = (BigDecimal) dis.readObject();
					
					this.UNIT_OF_MEASURE = readString(dis);
					
						this.UNLOADING_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
					this.AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.PAY_MERCH = readString(dis);
					
					this.PAY_QTY = readString(dis);
					
					this.PO_REVISED_ORDER_QTY = readString(dis);
					
						this.PO_REVISED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_REVISED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_REVISED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.REVISED_PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.REVISED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.REVISED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.REVISED_PICKUP_ALLOWANCE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_UNLOADING_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_RECEIVED_QTY = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_RECEIVED_WEIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT = (BigDecimal) dis.readObject();
					
					this.TERMS = readString(dis);
					
					this.REVISED_TERMS = readString(dis);
					
						this.FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_EXTENDED_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_EXTENDED_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.REVISED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.E9FF_SVOP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.CREATED_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECOMMENDED_ORDER_SEQ_NO);
					
					// String
				
						writeString(this.CUST_PREFERENCE_VENDOR,dos);
					
					// String
				
						writeString(this.MERCH_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.DROP_SHIP_QTY_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.MERCH_REASON_CODE,dos);
					
					// String
				
						writeString(this.FREIGHT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BRACKET_DIFFERENTIAL_PER_ITEM);
					
					// String
				
						writeString(this.UNIT_OF_MEASURE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNLOADING_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// String
				
						writeString(this.AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.PAY_MERCH,dos);
					
					// String
				
						writeString(this.PAY_QTY,dos);
					
					// String
				
						writeString(this.PO_REVISED_ORDER_QTY,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE);
					
					// String
				
						writeString(this.REVISED_PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.REVISED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_UNLOADING_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_RECEIVED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_RECEIVED_WEIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT);
					
					// String
				
						writeString(this.TERMS,dos);
					
					// String
				
						writeString(this.REVISED_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_EXTENDED_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_EXTENDED_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.REVISED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.E9FF_SVOP,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECOMMENDED_ORDER_SEQ_NO);
					
					// String
				
						writeString(this.CUST_PREFERENCE_VENDOR,dos);
					
					// String
				
						writeString(this.MERCH_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.DROP_SHIP_QTY_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.MERCH_REASON_CODE,dos);
					
					// String
				
						writeString(this.FREIGHT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BRACKET_DIFFERENTIAL_PER_ITEM);
					
					// String
				
						writeString(this.UNIT_OF_MEASURE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNLOADING_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// String
				
						writeString(this.AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.PAY_MERCH,dos);
					
					// String
				
						writeString(this.PAY_QTY,dos);
					
					// String
				
						writeString(this.PO_REVISED_ORDER_QTY,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE);
					
					// String
				
						writeString(this.REVISED_PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.REVISED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_UNLOADING_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_RECEIVED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_RECEIVED_WEIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT);
					
					// String
				
						writeString(this.TERMS,dos);
					
					// String
				
						writeString(this.REVISED_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_EXTENDED_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_EXTENDED_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.REVISED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.E9FF_SVOP,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",ITEM="+ITEM);
		sb.append(",RECOMMENDED_ORDER_SEQ_NO="+String.valueOf(RECOMMENDED_ORDER_SEQ_NO));
		sb.append(",CUST_PREFERENCE_VENDOR="+CUST_PREFERENCE_VENDOR);
		sb.append(",MERCH_CHANGE_FLAG="+MERCH_CHANGE_FLAG);
		sb.append(",FREIGHT_CHANGE_FLAG="+FREIGHT_CHANGE_FLAG);
		sb.append(",DROP_SHIP_QTY_CHANGE_FLAG="+DROP_SHIP_QTY_CHANGE_FLAG);
		sb.append(",MERCH_REASON_CODE="+MERCH_REASON_CODE);
		sb.append(",FREIGHT_REASON_CODE="+FREIGHT_REASON_CODE);
		sb.append(",PO_ORDER_QTY="+String.valueOf(PO_ORDER_QTY));
		sb.append(",PO_FOB_PER_ITEM="+String.valueOf(PO_FOB_PER_ITEM));
		sb.append(",PO_FREIGHT_PER_ITEM="+String.valueOf(PO_FREIGHT_PER_ITEM));
		sb.append(",PO_AP_PER_ITEM="+String.valueOf(PO_AP_PER_ITEM));
		sb.append(",PICKUP_ALLOWANCE="+String.valueOf(PICKUP_ALLOWANCE));
		sb.append(",PICKUP_ALLOWANCE_TYPE="+PICKUP_ALLOWANCE_TYPE);
		sb.append(",FREIGHT_RATE_OVERRIDE="+String.valueOf(FREIGHT_RATE_OVERRIDE));
		sb.append(",FREIGHT_TYPE_OVERRIDE="+FREIGHT_TYPE_OVERRIDE);
		sb.append(",PICKUP_ALLOWANCE_PER_ITEM="+String.valueOf(PICKUP_ALLOWANCE_PER_ITEM));
		sb.append(",BRACKET_DIFFERENTIAL_PER_ITEM="+String.valueOf(BRACKET_DIFFERENTIAL_PER_ITEM));
		sb.append(",UNIT_OF_MEASURE="+UNIT_OF_MEASURE);
		sb.append(",UNLOADING_CHARGE_PER_ITEM="+String.valueOf(UNLOADING_CHARGE_PER_ITEM));
		sb.append(",ALLOWANCE_CHARGES_DISTRIB_TO_MERCH="+String.valueOf(ALLOWANCE_CHARGES_DISTRIB_TO_MERCH));
		sb.append(",ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT="+String.valueOf(ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT));
		sb.append(",AS_MANUALLY_ENTERED_LINE_FLAG="+AS_MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",PAY_MERCH="+PAY_MERCH);
		sb.append(",PAY_QTY="+PAY_QTY);
		sb.append(",PO_REVISED_ORDER_QTY="+PO_REVISED_ORDER_QTY);
		sb.append(",PO_REVISED_FOB_PER_ITEM="+String.valueOf(PO_REVISED_FOB_PER_ITEM));
		sb.append(",PO_REVISED_FREIGHT_PER_ITEM="+String.valueOf(PO_REVISED_FREIGHT_PER_ITEM));
		sb.append(",PO_REVISED_AP_PER_ITEM="+String.valueOf(PO_REVISED_AP_PER_ITEM));
		sb.append(",REVISED_PICKUP_ALLOWANCE="+String.valueOf(REVISED_PICKUP_ALLOWANCE));
		sb.append(",REVISED_PICKUP_ALLOWANCE_TYPE="+REVISED_PICKUP_ALLOWANCE_TYPE);
		sb.append(",REVISED_FREIGHT_RATE_OVERRIDE="+String.valueOf(REVISED_FREIGHT_RATE_OVERRIDE));
		sb.append(",REVISED_FREIGHT_TYPE_OVERRIDE="+REVISED_FREIGHT_TYPE_OVERRIDE);
		sb.append(",REVISED_PICKUP_ALLOWANCE_PER_ITEM="+String.valueOf(REVISED_PICKUP_ALLOWANCE_PER_ITEM));
		sb.append(",REVISED_BRACKET_DIFFERENTIAL_PER_ITEM="+String.valueOf(REVISED_BRACKET_DIFFERENTIAL_PER_ITEM));
		sb.append(",REVISED_UNLOADING_CHARGE_PER_ITEM="+String.valueOf(REVISED_UNLOADING_CHARGE_PER_ITEM));
		sb.append(",REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH="+String.valueOf(REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH));
		sb.append(",REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT="+String.valueOf(REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT));
		sb.append(",REVISED_DROP_SHIP_RECEIVED_QTY="+String.valueOf(REVISED_DROP_SHIP_RECEIVED_QTY));
		sb.append(",REVISED_DROP_SHIP_RECEIVED_WEIGHT="+String.valueOf(REVISED_DROP_SHIP_RECEIVED_WEIGHT));
		sb.append(",REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY="+String.valueOf(REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY));
		sb.append(",REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT="+String.valueOf(REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT));
		sb.append(",TERMS="+TERMS);
		sb.append(",REVISED_TERMS="+REVISED_TERMS);
		sb.append(",FREIGHT_CASH_DISCOUNT_AMOUNT="+String.valueOf(FREIGHT_CASH_DISCOUNT_AMOUNT));
		sb.append(",REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT="+String.valueOf(REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT));
		sb.append(",MERCH_CASH_DISCOUNT_AMOUNT="+String.valueOf(MERCH_CASH_DISCOUNT_AMOUNT));
		sb.append(",REVISED_MERCH_CASH_DISCOUNT_AMOUNT="+String.valueOf(REVISED_MERCH_CASH_DISCOUNT_AMOUNT));
		sb.append(",REVISED_MERCH_EXTENDED_AMOUNT="+String.valueOf(REVISED_MERCH_EXTENDED_AMOUNT));
		sb.append(",REVISED_FREIGHT_EXTENDED_AMOUNT="+String.valueOf(REVISED_FREIGHT_EXTENDED_AMOUNT));
		sb.append(",MERCH_EXTENDED_AMOUNT_TO_BE_PAID="+String.valueOf(MERCH_EXTENDED_AMOUNT_TO_BE_PAID));
		sb.append(",FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID="+String.valueOf(FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID));
		sb.append(",PRICE_OVERRIDE_FLAG="+PRICE_OVERRIDE_FLAG);
		sb.append(",REVISED_PRICE_OVERRIDE_FLAG="+REVISED_PRICE_OVERRIDE_FLAG);
		sb.append(",CARRIER_SHORT_QTY="+String.valueOf(CARRIER_SHORT_QTY));
		sb.append(",VENDOR_SHORT_QTY="+String.valueOf(VENDOR_SHORT_QTY));
		sb.append(",E9FF_SVOP="+E9FF_SVOP);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PROFORMA_ORDER_DETAILStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ITEM, other.ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.RECOMMENDED_ORDER_SEQ_NO, other.RECOMMENDED_ORDER_SEQ_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public String ITEM;

				public String getITEM () {
					return this.ITEM;
				}
				
			    public BigDecimal RECOMMENDED_ORDER_SEQ_NO;

				public BigDecimal getRECOMMENDED_ORDER_SEQ_NO () {
					return this.RECOMMENDED_ORDER_SEQ_NO;
				}
				
			    public String CUST_PREFERENCE_VENDOR;

				public String getCUST_PREFERENCE_VENDOR () {
					return this.CUST_PREFERENCE_VENDOR;
				}
				
			    public String MERCH_CHANGE_FLAG;

				public String getMERCH_CHANGE_FLAG () {
					return this.MERCH_CHANGE_FLAG;
				}
				
			    public String FREIGHT_CHANGE_FLAG;

				public String getFREIGHT_CHANGE_FLAG () {
					return this.FREIGHT_CHANGE_FLAG;
				}
				
			    public String DROP_SHIP_QTY_CHANGE_FLAG;

				public String getDROP_SHIP_QTY_CHANGE_FLAG () {
					return this.DROP_SHIP_QTY_CHANGE_FLAG;
				}
				
			    public String MERCH_REASON_CODE;

				public String getMERCH_REASON_CODE () {
					return this.MERCH_REASON_CODE;
				}
				
			    public String FREIGHT_REASON_CODE;

				public String getFREIGHT_REASON_CODE () {
					return this.FREIGHT_REASON_CODE;
				}
				
			    public BigDecimal PO_ORDER_QTY;

				public BigDecimal getPO_ORDER_QTY () {
					return this.PO_ORDER_QTY;
				}
				
			    public BigDecimal PO_FOB_PER_ITEM;

				public BigDecimal getPO_FOB_PER_ITEM () {
					return this.PO_FOB_PER_ITEM;
				}
				
			    public BigDecimal PO_FREIGHT_PER_ITEM;

				public BigDecimal getPO_FREIGHT_PER_ITEM () {
					return this.PO_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal PO_AP_PER_ITEM;

				public BigDecimal getPO_AP_PER_ITEM () {
					return this.PO_AP_PER_ITEM;
				}
				
			    public BigDecimal PICKUP_ALLOWANCE;

				public BigDecimal getPICKUP_ALLOWANCE () {
					return this.PICKUP_ALLOWANCE;
				}
				
			    public String PICKUP_ALLOWANCE_TYPE;

				public String getPICKUP_ALLOWANCE_TYPE () {
					return this.PICKUP_ALLOWANCE_TYPE;
				}
				
			    public BigDecimal FREIGHT_RATE_OVERRIDE;

				public BigDecimal getFREIGHT_RATE_OVERRIDE () {
					return this.FREIGHT_RATE_OVERRIDE;
				}
				
			    public String FREIGHT_TYPE_OVERRIDE;

				public String getFREIGHT_TYPE_OVERRIDE () {
					return this.FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal PICKUP_ALLOWANCE_PER_ITEM;

				public BigDecimal getPICKUP_ALLOWANCE_PER_ITEM () {
					return this.PICKUP_ALLOWANCE_PER_ITEM;
				}
				
			    public BigDecimal BRACKET_DIFFERENTIAL_PER_ITEM;

				public BigDecimal getBRACKET_DIFFERENTIAL_PER_ITEM () {
					return this.BRACKET_DIFFERENTIAL_PER_ITEM;
				}
				
			    public String UNIT_OF_MEASURE;

				public String getUNIT_OF_MEASURE () {
					return this.UNIT_OF_MEASURE;
				}
				
			    public BigDecimal UNLOADING_CHARGE_PER_ITEM;

				public BigDecimal getUNLOADING_CHARGE_PER_ITEM () {
					return this.UNLOADING_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;

				public BigDecimal getALLOWANCE_CHARGES_DISTRIB_TO_MERCH () {
					return this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
				}
				
			    public BigDecimal ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;

				public BigDecimal getALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT () {
					return this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
				}
				
			    public String AS_MANUALLY_ENTERED_LINE_FLAG;

				public String getAS_MANUALLY_ENTERED_LINE_FLAG () {
					return this.AS_MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public String PAY_MERCH;

				public String getPAY_MERCH () {
					return this.PAY_MERCH;
				}
				
			    public String PAY_QTY;

				public String getPAY_QTY () {
					return this.PAY_QTY;
				}
				
			    public String PO_REVISED_ORDER_QTY;

				public String getPO_REVISED_ORDER_QTY () {
					return this.PO_REVISED_ORDER_QTY;
				}
				
			    public BigDecimal PO_REVISED_FOB_PER_ITEM;

				public BigDecimal getPO_REVISED_FOB_PER_ITEM () {
					return this.PO_REVISED_FOB_PER_ITEM;
				}
				
			    public BigDecimal PO_REVISED_FREIGHT_PER_ITEM;

				public BigDecimal getPO_REVISED_FREIGHT_PER_ITEM () {
					return this.PO_REVISED_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal PO_REVISED_AP_PER_ITEM;

				public BigDecimal getPO_REVISED_AP_PER_ITEM () {
					return this.PO_REVISED_AP_PER_ITEM;
				}
				
			    public BigDecimal REVISED_PICKUP_ALLOWANCE;

				public BigDecimal getREVISED_PICKUP_ALLOWANCE () {
					return this.REVISED_PICKUP_ALLOWANCE;
				}
				
			    public String REVISED_PICKUP_ALLOWANCE_TYPE;

				public String getREVISED_PICKUP_ALLOWANCE_TYPE () {
					return this.REVISED_PICKUP_ALLOWANCE_TYPE;
				}
				
			    public BigDecimal REVISED_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getREVISED_FREIGHT_RATE_OVERRIDE () {
					return this.REVISED_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String REVISED_FREIGHT_TYPE_OVERRIDE;

				public String getREVISED_FREIGHT_TYPE_OVERRIDE () {
					return this.REVISED_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal REVISED_PICKUP_ALLOWANCE_PER_ITEM;

				public BigDecimal getREVISED_PICKUP_ALLOWANCE_PER_ITEM () {
					return this.REVISED_PICKUP_ALLOWANCE_PER_ITEM;
				}
				
			    public BigDecimal REVISED_BRACKET_DIFFERENTIAL_PER_ITEM;

				public BigDecimal getREVISED_BRACKET_DIFFERENTIAL_PER_ITEM () {
					return this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM;
				}
				
			    public BigDecimal REVISED_UNLOADING_CHARGE_PER_ITEM;

				public BigDecimal getREVISED_UNLOADING_CHARGE_PER_ITEM () {
					return this.REVISED_UNLOADING_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;

				public BigDecimal getREVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH () {
					return this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
				}
				
			    public BigDecimal REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;

				public BigDecimal getREVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT () {
					return this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
				}
				
			    public BigDecimal REVISED_DROP_SHIP_RECEIVED_QTY;

				public BigDecimal getREVISED_DROP_SHIP_RECEIVED_QTY () {
					return this.REVISED_DROP_SHIP_RECEIVED_QTY;
				}
				
			    public BigDecimal REVISED_DROP_SHIP_RECEIVED_WEIGHT;

				public BigDecimal getREVISED_DROP_SHIP_RECEIVED_WEIGHT () {
					return this.REVISED_DROP_SHIP_RECEIVED_WEIGHT;
				}
				
			    public BigDecimal REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY;

				public BigDecimal getREVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY () {
					return this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY;
				}
				
			    public BigDecimal REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT;

				public BigDecimal getREVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT () {
					return this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT;
				}
				
			    public String TERMS;

				public String getTERMS () {
					return this.TERMS;
				}
				
			    public String REVISED_TERMS;

				public String getREVISED_TERMS () {
					return this.REVISED_TERMS;
				}
				
			    public BigDecimal FREIGHT_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getFREIGHT_CASH_DISCOUNT_AMOUNT () {
					return this.FREIGHT_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getREVISED_FREIGHT_CASH_DISCOUNT_AMOUNT () {
					return this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal MERCH_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getMERCH_CASH_DISCOUNT_AMOUNT () {
					return this.MERCH_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal REVISED_MERCH_CASH_DISCOUNT_AMOUNT;

				public BigDecimal getREVISED_MERCH_CASH_DISCOUNT_AMOUNT () {
					return this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT;
				}
				
			    public BigDecimal REVISED_MERCH_EXTENDED_AMOUNT;

				public BigDecimal getREVISED_MERCH_EXTENDED_AMOUNT () {
					return this.REVISED_MERCH_EXTENDED_AMOUNT;
				}
				
			    public BigDecimal REVISED_FREIGHT_EXTENDED_AMOUNT;

				public BigDecimal getREVISED_FREIGHT_EXTENDED_AMOUNT () {
					return this.REVISED_FREIGHT_EXTENDED_AMOUNT;
				}
				
			    public BigDecimal MERCH_EXTENDED_AMOUNT_TO_BE_PAID;

				public BigDecimal getMERCH_EXTENDED_AMOUNT_TO_BE_PAID () {
					return this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID;

				public BigDecimal getFREIGHT_EXTENDED_AMOUNT_TO_BE_PAID () {
					return this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID;
				}
				
			    public String PRICE_OVERRIDE_FLAG;

				public String getPRICE_OVERRIDE_FLAG () {
					return this.PRICE_OVERRIDE_FLAG;
				}
				
			    public String REVISED_PRICE_OVERRIDE_FLAG;

				public String getREVISED_PRICE_OVERRIDE_FLAG () {
					return this.REVISED_PRICE_OVERRIDE_FLAG;
				}
				
			    public BigDecimal CARRIER_SHORT_QTY;

				public BigDecimal getCARRIER_SHORT_QTY () {
					return this.CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal VENDOR_SHORT_QTY;

				public BigDecimal getVENDOR_SHORT_QTY () {
					return this.VENDOR_SHORT_QTY;
				}
				
			    public String E9FF_SVOP;

				public String getE9FF_SVOP () {
					return this.E9FF_SVOP;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public String CREATED_TIMESTAMP;

				public String getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_TIMESTAMP;

				public String getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.RECOMMENDED_ORDER_SEQ_NO = (BigDecimal) dis.readObject();
					
					this.CUST_PREFERENCE_VENDOR = readString(dis);
					
					this.MERCH_CHANGE_FLAG = readString(dis);
					
					this.FREIGHT_CHANGE_FLAG = readString(dis);
					
					this.DROP_SHIP_QTY_CHANGE_FLAG = readString(dis);
					
					this.MERCH_REASON_CODE = readString(dis);
					
					this.FREIGHT_REASON_CODE = readString(dis);
					
						this.PO_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.PO_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.PICKUP_ALLOWANCE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.BRACKET_DIFFERENTIAL_PER_ITEM = (BigDecimal) dis.readObject();
					
					this.UNIT_OF_MEASURE = readString(dis);
					
						this.UNLOADING_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
					this.AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.PAY_MERCH = readString(dis);
					
					this.PAY_QTY = readString(dis);
					
					this.PO_REVISED_ORDER_QTY = readString(dis);
					
						this.PO_REVISED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_REVISED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_REVISED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.REVISED_PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.REVISED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.REVISED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.REVISED_PICKUP_ALLOWANCE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_UNLOADING_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_RECEIVED_QTY = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_RECEIVED_WEIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT = (BigDecimal) dis.readObject();
					
					this.TERMS = readString(dis);
					
					this.REVISED_TERMS = readString(dis);
					
						this.FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_EXTENDED_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_EXTENDED_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.REVISED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.E9FF_SVOP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.CREATED_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
					this.ITEM = readString(dis);
					
						this.RECOMMENDED_ORDER_SEQ_NO = (BigDecimal) dis.readObject();
					
					this.CUST_PREFERENCE_VENDOR = readString(dis);
					
					this.MERCH_CHANGE_FLAG = readString(dis);
					
					this.FREIGHT_CHANGE_FLAG = readString(dis);
					
					this.DROP_SHIP_QTY_CHANGE_FLAG = readString(dis);
					
					this.MERCH_REASON_CODE = readString(dis);
					
					this.FREIGHT_REASON_CODE = readString(dis);
					
						this.PO_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.PO_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.PICKUP_ALLOWANCE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.BRACKET_DIFFERENTIAL_PER_ITEM = (BigDecimal) dis.readObject();
					
					this.UNIT_OF_MEASURE = readString(dis);
					
						this.UNLOADING_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
					this.AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.PAY_MERCH = readString(dis);
					
					this.PAY_QTY = readString(dis);
					
					this.PO_REVISED_ORDER_QTY = readString(dis);
					
						this.PO_REVISED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_REVISED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.PO_REVISED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_PICKUP_ALLOWANCE = (BigDecimal) dis.readObject();
					
					this.REVISED_PICKUP_ALLOWANCE_TYPE = readString(dis);
					
						this.REVISED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.REVISED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.REVISED_PICKUP_ALLOWANCE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_UNLOADING_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = (BigDecimal) dis.readObject();
					
						this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_RECEIVED_QTY = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_RECEIVED_WEIGHT = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT = (BigDecimal) dis.readObject();
					
					this.TERMS = readString(dis);
					
					this.REVISED_TERMS = readString(dis);
					
						this.FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_MERCH_EXTENDED_AMOUNT = (BigDecimal) dis.readObject();
					
						this.REVISED_FREIGHT_EXTENDED_AMOUNT = (BigDecimal) dis.readObject();
					
						this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.REVISED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.E9FF_SVOP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.CREATED_USER_ID = readString(dis);
					
					this.CREATED_TIMESTAMP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECOMMENDED_ORDER_SEQ_NO);
					
					// String
				
						writeString(this.CUST_PREFERENCE_VENDOR,dos);
					
					// String
				
						writeString(this.MERCH_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.DROP_SHIP_QTY_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.MERCH_REASON_CODE,dos);
					
					// String
				
						writeString(this.FREIGHT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BRACKET_DIFFERENTIAL_PER_ITEM);
					
					// String
				
						writeString(this.UNIT_OF_MEASURE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNLOADING_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// String
				
						writeString(this.AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.PAY_MERCH,dos);
					
					// String
				
						writeString(this.PAY_QTY,dos);
					
					// String
				
						writeString(this.PO_REVISED_ORDER_QTY,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE);
					
					// String
				
						writeString(this.REVISED_PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.REVISED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_UNLOADING_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_RECEIVED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_RECEIVED_WEIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT);
					
					// String
				
						writeString(this.TERMS,dos);
					
					// String
				
						writeString(this.REVISED_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_EXTENDED_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_EXTENDED_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.REVISED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.E9FF_SVOP,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// String
				
						writeString(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// String
				
						writeString(this.ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECOMMENDED_ORDER_SEQ_NO);
					
					// String
				
						writeString(this.CUST_PREFERENCE_VENDOR,dos);
					
					// String
				
						writeString(this.MERCH_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.DROP_SHIP_QTY_CHANGE_FLAG,dos);
					
					// String
				
						writeString(this.MERCH_REASON_CODE,dos);
					
					// String
				
						writeString(this.FREIGHT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE);
					
					// String
				
						writeString(this.PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PICKUP_ALLOWANCE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BRACKET_DIFFERENTIAL_PER_ITEM);
					
					// String
				
						writeString(this.UNIT_OF_MEASURE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UNLOADING_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// String
				
						writeString(this.AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.PAY_MERCH,dos);
					
					// String
				
						writeString(this.PAY_QTY,dos);
					
					// String
				
						writeString(this.PO_REVISED_ORDER_QTY,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_REVISED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE);
					
					// String
				
						writeString(this.REVISED_PICKUP_ALLOWANCE_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.REVISED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_PICKUP_ALLOWANCE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_UNLOADING_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_RECEIVED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_RECEIVED_WEIGHT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT);
					
					// String
				
						writeString(this.TERMS,dos);
					
					// String
				
						writeString(this.REVISED_TERMS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_CASH_DISCOUNT_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_MERCH_EXTENDED_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REVISED_FREIGHT_EXTENDED_AMOUNT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXTENDED_AMOUNT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.REVISED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.E9FF_SVOP,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// String
				
						writeString(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",ITEM="+ITEM);
		sb.append(",RECOMMENDED_ORDER_SEQ_NO="+String.valueOf(RECOMMENDED_ORDER_SEQ_NO));
		sb.append(",CUST_PREFERENCE_VENDOR="+CUST_PREFERENCE_VENDOR);
		sb.append(",MERCH_CHANGE_FLAG="+MERCH_CHANGE_FLAG);
		sb.append(",FREIGHT_CHANGE_FLAG="+FREIGHT_CHANGE_FLAG);
		sb.append(",DROP_SHIP_QTY_CHANGE_FLAG="+DROP_SHIP_QTY_CHANGE_FLAG);
		sb.append(",MERCH_REASON_CODE="+MERCH_REASON_CODE);
		sb.append(",FREIGHT_REASON_CODE="+FREIGHT_REASON_CODE);
		sb.append(",PO_ORDER_QTY="+String.valueOf(PO_ORDER_QTY));
		sb.append(",PO_FOB_PER_ITEM="+String.valueOf(PO_FOB_PER_ITEM));
		sb.append(",PO_FREIGHT_PER_ITEM="+String.valueOf(PO_FREIGHT_PER_ITEM));
		sb.append(",PO_AP_PER_ITEM="+String.valueOf(PO_AP_PER_ITEM));
		sb.append(",PICKUP_ALLOWANCE="+String.valueOf(PICKUP_ALLOWANCE));
		sb.append(",PICKUP_ALLOWANCE_TYPE="+PICKUP_ALLOWANCE_TYPE);
		sb.append(",FREIGHT_RATE_OVERRIDE="+String.valueOf(FREIGHT_RATE_OVERRIDE));
		sb.append(",FREIGHT_TYPE_OVERRIDE="+FREIGHT_TYPE_OVERRIDE);
		sb.append(",PICKUP_ALLOWANCE_PER_ITEM="+String.valueOf(PICKUP_ALLOWANCE_PER_ITEM));
		sb.append(",BRACKET_DIFFERENTIAL_PER_ITEM="+String.valueOf(BRACKET_DIFFERENTIAL_PER_ITEM));
		sb.append(",UNIT_OF_MEASURE="+UNIT_OF_MEASURE);
		sb.append(",UNLOADING_CHARGE_PER_ITEM="+String.valueOf(UNLOADING_CHARGE_PER_ITEM));
		sb.append(",ALLOWANCE_CHARGES_DISTRIB_TO_MERCH="+String.valueOf(ALLOWANCE_CHARGES_DISTRIB_TO_MERCH));
		sb.append(",ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT="+String.valueOf(ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT));
		sb.append(",AS_MANUALLY_ENTERED_LINE_FLAG="+AS_MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",PAY_MERCH="+PAY_MERCH);
		sb.append(",PAY_QTY="+PAY_QTY);
		sb.append(",PO_REVISED_ORDER_QTY="+PO_REVISED_ORDER_QTY);
		sb.append(",PO_REVISED_FOB_PER_ITEM="+String.valueOf(PO_REVISED_FOB_PER_ITEM));
		sb.append(",PO_REVISED_FREIGHT_PER_ITEM="+String.valueOf(PO_REVISED_FREIGHT_PER_ITEM));
		sb.append(",PO_REVISED_AP_PER_ITEM="+String.valueOf(PO_REVISED_AP_PER_ITEM));
		sb.append(",REVISED_PICKUP_ALLOWANCE="+String.valueOf(REVISED_PICKUP_ALLOWANCE));
		sb.append(",REVISED_PICKUP_ALLOWANCE_TYPE="+REVISED_PICKUP_ALLOWANCE_TYPE);
		sb.append(",REVISED_FREIGHT_RATE_OVERRIDE="+String.valueOf(REVISED_FREIGHT_RATE_OVERRIDE));
		sb.append(",REVISED_FREIGHT_TYPE_OVERRIDE="+REVISED_FREIGHT_TYPE_OVERRIDE);
		sb.append(",REVISED_PICKUP_ALLOWANCE_PER_ITEM="+String.valueOf(REVISED_PICKUP_ALLOWANCE_PER_ITEM));
		sb.append(",REVISED_BRACKET_DIFFERENTIAL_PER_ITEM="+String.valueOf(REVISED_BRACKET_DIFFERENTIAL_PER_ITEM));
		sb.append(",REVISED_UNLOADING_CHARGE_PER_ITEM="+String.valueOf(REVISED_UNLOADING_CHARGE_PER_ITEM));
		sb.append(",REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH="+String.valueOf(REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH));
		sb.append(",REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT="+String.valueOf(REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT));
		sb.append(",REVISED_DROP_SHIP_RECEIVED_QTY="+String.valueOf(REVISED_DROP_SHIP_RECEIVED_QTY));
		sb.append(",REVISED_DROP_SHIP_RECEIVED_WEIGHT="+String.valueOf(REVISED_DROP_SHIP_RECEIVED_WEIGHT));
		sb.append(",REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY="+String.valueOf(REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY));
		sb.append(",REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT="+String.valueOf(REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT));
		sb.append(",TERMS="+TERMS);
		sb.append(",REVISED_TERMS="+REVISED_TERMS);
		sb.append(",FREIGHT_CASH_DISCOUNT_AMOUNT="+String.valueOf(FREIGHT_CASH_DISCOUNT_AMOUNT));
		sb.append(",REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT="+String.valueOf(REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT));
		sb.append(",MERCH_CASH_DISCOUNT_AMOUNT="+String.valueOf(MERCH_CASH_DISCOUNT_AMOUNT));
		sb.append(",REVISED_MERCH_CASH_DISCOUNT_AMOUNT="+String.valueOf(REVISED_MERCH_CASH_DISCOUNT_AMOUNT));
		sb.append(",REVISED_MERCH_EXTENDED_AMOUNT="+String.valueOf(REVISED_MERCH_EXTENDED_AMOUNT));
		sb.append(",REVISED_FREIGHT_EXTENDED_AMOUNT="+String.valueOf(REVISED_FREIGHT_EXTENDED_AMOUNT));
		sb.append(",MERCH_EXTENDED_AMOUNT_TO_BE_PAID="+String.valueOf(MERCH_EXTENDED_AMOUNT_TO_BE_PAID));
		sb.append(",FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID="+String.valueOf(FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID));
		sb.append(",PRICE_OVERRIDE_FLAG="+PRICE_OVERRIDE_FLAG);
		sb.append(",REVISED_PRICE_OVERRIDE_FLAG="+REVISED_PRICE_OVERRIDE_FLAG);
		sb.append(",CARRIER_SHORT_QTY="+String.valueOf(CARRIER_SHORT_QTY));
		sb.append(",VENDOR_SHORT_QTY="+String.valueOf(VENDOR_SHORT_QTY));
		sb.append(",E9FF_SVOP="+E9FF_SVOP);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",CREATED_TIMESTAMP="+CREATED_TIMESTAMP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+UPDATED_TIMESTAMP);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[0];

	
			    public String E9PO;

				public String getE9PO () {
					return this.E9PO;
				}
				
			    public String E9ITEM;

				public String getE9ITEM () {
					return this.E9ITEM;
				}
				
			    public BigDecimal E9ROSQ;

				public BigDecimal getE9ROSQ () {
					return this.E9ROSQ;
				}
				
			    public String E9CPVN;

				public String getE9CPVN () {
					return this.E9CPVN;
				}
				
			    public String E9FMCF;

				public String getE9FMCF () {
					return this.E9FMCF;
				}
				
			    public String E9FFCF;

				public String getE9FFCF () {
					return this.E9FFCF;
				}
				
			    public String E9FQCF;

				public String getE9FQCF () {
					return this.E9FQCF;
				}
				
			    public String E9MRSC;

				public String getE9MRSC () {
					return this.E9MRSC;
				}
				
			    public String E9RRSC;

				public String getE9RRSC () {
					return this.E9RRSC;
				}
				
			    public BigDecimal E9PFOQ;

				public BigDecimal getE9PFOQ () {
					return this.E9PFOQ;
				}
				
			    public BigDecimal E9PFFB;

				public BigDecimal getE9PFFB () {
					return this.E9PFFB;
				}
				
			    public BigDecimal E9PFFR;

				public BigDecimal getE9PFFR () {
					return this.E9PFFR;
				}
				
			    public BigDecimal E9PFAP;

				public BigDecimal getE9PFAP () {
					return this.E9PFAP;
				}
				
			    public BigDecimal E9FPAL;

				public BigDecimal getE9FPAL () {
					return this.E9FPAL;
				}
				
			    public String E9FPUT;

				public String getE9FPUT () {
					return this.E9FPUT;
				}
				
			    public BigDecimal E9FFRO;

				public BigDecimal getE9FFRO () {
					return this.E9FFRO;
				}
				
			    public String E9FFTO;

				public String getE9FFTO () {
					return this.E9FFTO;
				}
				
			    public BigDecimal E9FPAP;

				public BigDecimal getE9FPAP () {
					return this.E9FPAP;
				}
				
			    public BigDecimal E9FBDP;

				public BigDecimal getE9FBDP () {
					return this.E9FBDP;
				}
				
			    public String E9FUOM;

				public String getE9FUOM () {
					return this.E9FUOM;
				}
				
			    public BigDecimal E9FUCI;

				public BigDecimal getE9FUCI () {
					return this.E9FUCI;
				}
				
			    public BigDecimal E9FACM;

				public BigDecimal getE9FACM () {
					return this.E9FACM;
				}
				
			    public BigDecimal E9FACF;

				public BigDecimal getE9FACF () {
					return this.E9FACF;
				}
				
			    public String E9FMEF;

				public String getE9FMEF () {
					return this.E9FMEF;
				}
				
			    public String E9FMPF;

				public String getE9FMPF () {
					return this.E9FMPF;
				}
				
			    public String E9FQPF;

				public String getE9FQPF () {
					return this.E9FQPF;
				}
				
			    public BigDecimal E9PROQ;

				public BigDecimal getE9PROQ () {
					return this.E9PROQ;
				}
				
			    public BigDecimal E9PRFB;

				public BigDecimal getE9PRFB () {
					return this.E9PRFB;
				}
				
			    public BigDecimal E9PRFR;

				public BigDecimal getE9PRFR () {
					return this.E9PRFR;
				}
				
			    public BigDecimal E9PRAN;

				public BigDecimal getE9PRAN () {
					return this.E9PRAN;
				}
				
			    public BigDecimal E9RPAL;

				public BigDecimal getE9RPAL () {
					return this.E9RPAL;
				}
				
			    public String E9RPUT;

				public String getE9RPUT () {
					return this.E9RPUT;
				}
				
			    public BigDecimal E9RFRO;

				public BigDecimal getE9RFRO () {
					return this.E9RFRO;
				}
				
			    public String E9RFTO;

				public String getE9RFTO () {
					return this.E9RFTO;
				}
				
			    public BigDecimal E9RPAP;

				public BigDecimal getE9RPAP () {
					return this.E9RPAP;
				}
				
			    public BigDecimal E9RBDP;

				public BigDecimal getE9RBDP () {
					return this.E9RBDP;
				}
				
			    public BigDecimal E9RUCI;

				public BigDecimal getE9RUCI () {
					return this.E9RUCI;
				}
				
			    public BigDecimal E9RACM;

				public BigDecimal getE9RACM () {
					return this.E9RACM;
				}
				
			    public BigDecimal E9RACF;

				public BigDecimal getE9RACF () {
					return this.E9RACF;
				}
				
			    public BigDecimal E9RDRQ;

				public BigDecimal getE9RDRQ () {
					return this.E9RDRQ;
				}
				
			    public BigDecimal E9RDRW;

				public BigDecimal getE9RDRW () {
					return this.E9RDRW;
				}
				
			    public BigDecimal E9RDDQ;

				public BigDecimal getE9RDDQ () {
					return this.E9RDDQ;
				}
				
			    public BigDecimal E9RDDW;

				public BigDecimal getE9RDDW () {
					return this.E9RDDW;
				}
				
			    public String E9FMFT;

				public String getE9FMFT () {
					return this.E9FMFT;
				}
				
			    public String E9RVFT;

				public String getE9RVFT () {
					return this.E9RVFT;
				}
				
			    public BigDecimal E9FFCD;

				public BigDecimal getE9FFCD () {
					return this.E9FFCD;
				}
				
			    public BigDecimal E9RFCD;

				public BigDecimal getE9RFCD () {
					return this.E9RFCD;
				}
				
			    public BigDecimal E9FMCD;

				public BigDecimal getE9FMCD () {
					return this.E9FMCD;
				}
				
			    public BigDecimal E9RMCD;

				public BigDecimal getE9RMCD () {
					return this.E9RMCD;
				}
				
			    public BigDecimal E9RMEA;

				public BigDecimal getE9RMEA () {
					return this.E9RMEA;
				}
				
			    public BigDecimal E9RFEA;

				public BigDecimal getE9RFEA () {
					return this.E9RFEA;
				}
				
			    public BigDecimal E9MEAP;

				public BigDecimal getE9MEAP () {
					return this.E9MEAP;
				}
				
			    public BigDecimal E9FEAP;

				public BigDecimal getE9FEAP () {
					return this.E9FEAP;
				}
				
			    public String E9FPOF;

				public String getE9FPOF () {
					return this.E9FPOF;
				}
				
			    public String E9RPOF;

				public String getE9RPOF () {
					return this.E9RPOF;
				}
				
			    public BigDecimal E9QYSH;

				public BigDecimal getE9QYSH () {
					return this.E9QYSH;
				}
				
			    public BigDecimal E9VSQY;

				public BigDecimal getE9VSQY () {
					return this.E9VSQY;
				}
				
			    public BigDecimal E9EADT;

				public BigDecimal getE9EADT () {
					return this.E9EADT;
				}
				
			    public BigDecimal E9EATM;

				public BigDecimal getE9EATM () {
					return this.E9EATM;
				}
				
			    public String E9EAID;

				public String getE9EAID () {
					return this.E9EAID;
				}
				
			    public BigDecimal E9MODT;

				public BigDecimal getE9MODT () {
					return this.E9MODT;
				}
				
			    public BigDecimal E9MOTM;

				public BigDecimal getE9MOTM () {
					return this.E9MOTM;
				}
				
			    public String E9MOID;

				public String getE9MOID () {
					return this.E9MOID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Proforma_Order_Master_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.E9PO = readString(dis);
					
					this.E9ITEM = readString(dis);
					
						this.E9ROSQ = (BigDecimal) dis.readObject();
					
					this.E9CPVN = readString(dis);
					
					this.E9FMCF = readString(dis);
					
					this.E9FFCF = readString(dis);
					
					this.E9FQCF = readString(dis);
					
					this.E9MRSC = readString(dis);
					
					this.E9RRSC = readString(dis);
					
						this.E9PFOQ = (BigDecimal) dis.readObject();
					
						this.E9PFFB = (BigDecimal) dis.readObject();
					
						this.E9PFFR = (BigDecimal) dis.readObject();
					
						this.E9PFAP = (BigDecimal) dis.readObject();
					
						this.E9FPAL = (BigDecimal) dis.readObject();
					
					this.E9FPUT = readString(dis);
					
						this.E9FFRO = (BigDecimal) dis.readObject();
					
					this.E9FFTO = readString(dis);
					
						this.E9FPAP = (BigDecimal) dis.readObject();
					
						this.E9FBDP = (BigDecimal) dis.readObject();
					
					this.E9FUOM = readString(dis);
					
						this.E9FUCI = (BigDecimal) dis.readObject();
					
						this.E9FACM = (BigDecimal) dis.readObject();
					
						this.E9FACF = (BigDecimal) dis.readObject();
					
					this.E9FMEF = readString(dis);
					
					this.E9FMPF = readString(dis);
					
					this.E9FQPF = readString(dis);
					
						this.E9PROQ = (BigDecimal) dis.readObject();
					
						this.E9PRFB = (BigDecimal) dis.readObject();
					
						this.E9PRFR = (BigDecimal) dis.readObject();
					
						this.E9PRAN = (BigDecimal) dis.readObject();
					
						this.E9RPAL = (BigDecimal) dis.readObject();
					
					this.E9RPUT = readString(dis);
					
						this.E9RFRO = (BigDecimal) dis.readObject();
					
					this.E9RFTO = readString(dis);
					
						this.E9RPAP = (BigDecimal) dis.readObject();
					
						this.E9RBDP = (BigDecimal) dis.readObject();
					
						this.E9RUCI = (BigDecimal) dis.readObject();
					
						this.E9RACM = (BigDecimal) dis.readObject();
					
						this.E9RACF = (BigDecimal) dis.readObject();
					
						this.E9RDRQ = (BigDecimal) dis.readObject();
					
						this.E9RDRW = (BigDecimal) dis.readObject();
					
						this.E9RDDQ = (BigDecimal) dis.readObject();
					
						this.E9RDDW = (BigDecimal) dis.readObject();
					
					this.E9FMFT = readString(dis);
					
					this.E9RVFT = readString(dis);
					
						this.E9FFCD = (BigDecimal) dis.readObject();
					
						this.E9RFCD = (BigDecimal) dis.readObject();
					
						this.E9FMCD = (BigDecimal) dis.readObject();
					
						this.E9RMCD = (BigDecimal) dis.readObject();
					
						this.E9RMEA = (BigDecimal) dis.readObject();
					
						this.E9RFEA = (BigDecimal) dis.readObject();
					
						this.E9MEAP = (BigDecimal) dis.readObject();
					
						this.E9FEAP = (BigDecimal) dis.readObject();
					
					this.E9FPOF = readString(dis);
					
					this.E9RPOF = readString(dis);
					
						this.E9QYSH = (BigDecimal) dis.readObject();
					
						this.E9VSQY = (BigDecimal) dis.readObject();
					
						this.E9EADT = (BigDecimal) dis.readObject();
					
						this.E9EATM = (BigDecimal) dis.readObject();
					
					this.E9EAID = readString(dis);
					
						this.E9MODT = (BigDecimal) dis.readObject();
					
						this.E9MOTM = (BigDecimal) dis.readObject();
					
					this.E9MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Proforma_Order_Master_Inbound) {

        	try {

        		int length = 0;
		
					this.E9PO = readString(dis);
					
					this.E9ITEM = readString(dis);
					
						this.E9ROSQ = (BigDecimal) dis.readObject();
					
					this.E9CPVN = readString(dis);
					
					this.E9FMCF = readString(dis);
					
					this.E9FFCF = readString(dis);
					
					this.E9FQCF = readString(dis);
					
					this.E9MRSC = readString(dis);
					
					this.E9RRSC = readString(dis);
					
						this.E9PFOQ = (BigDecimal) dis.readObject();
					
						this.E9PFFB = (BigDecimal) dis.readObject();
					
						this.E9PFFR = (BigDecimal) dis.readObject();
					
						this.E9PFAP = (BigDecimal) dis.readObject();
					
						this.E9FPAL = (BigDecimal) dis.readObject();
					
					this.E9FPUT = readString(dis);
					
						this.E9FFRO = (BigDecimal) dis.readObject();
					
					this.E9FFTO = readString(dis);
					
						this.E9FPAP = (BigDecimal) dis.readObject();
					
						this.E9FBDP = (BigDecimal) dis.readObject();
					
					this.E9FUOM = readString(dis);
					
						this.E9FUCI = (BigDecimal) dis.readObject();
					
						this.E9FACM = (BigDecimal) dis.readObject();
					
						this.E9FACF = (BigDecimal) dis.readObject();
					
					this.E9FMEF = readString(dis);
					
					this.E9FMPF = readString(dis);
					
					this.E9FQPF = readString(dis);
					
						this.E9PROQ = (BigDecimal) dis.readObject();
					
						this.E9PRFB = (BigDecimal) dis.readObject();
					
						this.E9PRFR = (BigDecimal) dis.readObject();
					
						this.E9PRAN = (BigDecimal) dis.readObject();
					
						this.E9RPAL = (BigDecimal) dis.readObject();
					
					this.E9RPUT = readString(dis);
					
						this.E9RFRO = (BigDecimal) dis.readObject();
					
					this.E9RFTO = readString(dis);
					
						this.E9RPAP = (BigDecimal) dis.readObject();
					
						this.E9RBDP = (BigDecimal) dis.readObject();
					
						this.E9RUCI = (BigDecimal) dis.readObject();
					
						this.E9RACM = (BigDecimal) dis.readObject();
					
						this.E9RACF = (BigDecimal) dis.readObject();
					
						this.E9RDRQ = (BigDecimal) dis.readObject();
					
						this.E9RDRW = (BigDecimal) dis.readObject();
					
						this.E9RDDQ = (BigDecimal) dis.readObject();
					
						this.E9RDDW = (BigDecimal) dis.readObject();
					
					this.E9FMFT = readString(dis);
					
					this.E9RVFT = readString(dis);
					
						this.E9FFCD = (BigDecimal) dis.readObject();
					
						this.E9RFCD = (BigDecimal) dis.readObject();
					
						this.E9FMCD = (BigDecimal) dis.readObject();
					
						this.E9RMCD = (BigDecimal) dis.readObject();
					
						this.E9RMEA = (BigDecimal) dis.readObject();
					
						this.E9RFEA = (BigDecimal) dis.readObject();
					
						this.E9MEAP = (BigDecimal) dis.readObject();
					
						this.E9FEAP = (BigDecimal) dis.readObject();
					
					this.E9FPOF = readString(dis);
					
					this.E9RPOF = readString(dis);
					
						this.E9QYSH = (BigDecimal) dis.readObject();
					
						this.E9VSQY = (BigDecimal) dis.readObject();
					
						this.E9EADT = (BigDecimal) dis.readObject();
					
						this.E9EATM = (BigDecimal) dis.readObject();
					
					this.E9EAID = readString(dis);
					
						this.E9MODT = (BigDecimal) dis.readObject();
					
						this.E9MOTM = (BigDecimal) dis.readObject();
					
					this.E9MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E9PO,dos);
					
					// String
				
						writeString(this.E9ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9ROSQ);
					
					// String
				
						writeString(this.E9CPVN,dos);
					
					// String
				
						writeString(this.E9FMCF,dos);
					
					// String
				
						writeString(this.E9FFCF,dos);
					
					// String
				
						writeString(this.E9FQCF,dos);
					
					// String
				
						writeString(this.E9MRSC,dos);
					
					// String
				
						writeString(this.E9RRSC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PFOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PFFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PFFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PFAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FPAL);
					
					// String
				
						writeString(this.E9FPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FFRO);
					
					// String
				
						writeString(this.E9FFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FBDP);
					
					// String
				
						writeString(this.E9FUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FACF);
					
					// String
				
						writeString(this.E9FMEF,dos);
					
					// String
				
						writeString(this.E9FMPF,dos);
					
					// String
				
						writeString(this.E9FQPF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PROQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PRFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PRFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PRAN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RPAL);
					
					// String
				
						writeString(this.E9RPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RFRO);
					
					// String
				
						writeString(this.E9RFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RDRQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RDRW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RDDQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RDDW);
					
					// String
				
						writeString(this.E9FMFT,dos);
					
					// String
				
						writeString(this.E9RVFT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FFCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RFCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FMCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RMCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RMEA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RFEA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FEAP);
					
					// String
				
						writeString(this.E9FPOF,dos);
					
					// String
				
						writeString(this.E9RPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9VSQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9EATM);
					
					// String
				
						writeString(this.E9EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9MOTM);
					
					// String
				
						writeString(this.E9MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.E9PO,dos);
					
					// String
				
						writeString(this.E9ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9ROSQ);
					
					// String
				
						writeString(this.E9CPVN,dos);
					
					// String
				
						writeString(this.E9FMCF,dos);
					
					// String
				
						writeString(this.E9FFCF,dos);
					
					// String
				
						writeString(this.E9FQCF,dos);
					
					// String
				
						writeString(this.E9MRSC,dos);
					
					// String
				
						writeString(this.E9RRSC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PFOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PFFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PFFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PFAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FPAL);
					
					// String
				
						writeString(this.E9FPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FFRO);
					
					// String
				
						writeString(this.E9FFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FBDP);
					
					// String
				
						writeString(this.E9FUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FACF);
					
					// String
				
						writeString(this.E9FMEF,dos);
					
					// String
				
						writeString(this.E9FMPF,dos);
					
					// String
				
						writeString(this.E9FQPF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PROQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PRFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PRFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9PRAN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RPAL);
					
					// String
				
						writeString(this.E9RPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RFRO);
					
					// String
				
						writeString(this.E9RFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RDRQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RDRW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RDDQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RDDW);
					
					// String
				
						writeString(this.E9FMFT,dos);
					
					// String
				
						writeString(this.E9RVFT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FFCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RFCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FMCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RMCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RMEA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9RFEA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9FEAP);
					
					// String
				
						writeString(this.E9FPOF,dos);
					
					// String
				
						writeString(this.E9RPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9VSQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9EATM);
					
					// String
				
						writeString(this.E9EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.E9MOTM);
					
					// String
				
						writeString(this.E9MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E9PO="+E9PO);
		sb.append(",E9ITEM="+E9ITEM);
		sb.append(",E9ROSQ="+String.valueOf(E9ROSQ));
		sb.append(",E9CPVN="+E9CPVN);
		sb.append(",E9FMCF="+E9FMCF);
		sb.append(",E9FFCF="+E9FFCF);
		sb.append(",E9FQCF="+E9FQCF);
		sb.append(",E9MRSC="+E9MRSC);
		sb.append(",E9RRSC="+E9RRSC);
		sb.append(",E9PFOQ="+String.valueOf(E9PFOQ));
		sb.append(",E9PFFB="+String.valueOf(E9PFFB));
		sb.append(",E9PFFR="+String.valueOf(E9PFFR));
		sb.append(",E9PFAP="+String.valueOf(E9PFAP));
		sb.append(",E9FPAL="+String.valueOf(E9FPAL));
		sb.append(",E9FPUT="+E9FPUT);
		sb.append(",E9FFRO="+String.valueOf(E9FFRO));
		sb.append(",E9FFTO="+E9FFTO);
		sb.append(",E9FPAP="+String.valueOf(E9FPAP));
		sb.append(",E9FBDP="+String.valueOf(E9FBDP));
		sb.append(",E9FUOM="+E9FUOM);
		sb.append(",E9FUCI="+String.valueOf(E9FUCI));
		sb.append(",E9FACM="+String.valueOf(E9FACM));
		sb.append(",E9FACF="+String.valueOf(E9FACF));
		sb.append(",E9FMEF="+E9FMEF);
		sb.append(",E9FMPF="+E9FMPF);
		sb.append(",E9FQPF="+E9FQPF);
		sb.append(",E9PROQ="+String.valueOf(E9PROQ));
		sb.append(",E9PRFB="+String.valueOf(E9PRFB));
		sb.append(",E9PRFR="+String.valueOf(E9PRFR));
		sb.append(",E9PRAN="+String.valueOf(E9PRAN));
		sb.append(",E9RPAL="+String.valueOf(E9RPAL));
		sb.append(",E9RPUT="+E9RPUT);
		sb.append(",E9RFRO="+String.valueOf(E9RFRO));
		sb.append(",E9RFTO="+E9RFTO);
		sb.append(",E9RPAP="+String.valueOf(E9RPAP));
		sb.append(",E9RBDP="+String.valueOf(E9RBDP));
		sb.append(",E9RUCI="+String.valueOf(E9RUCI));
		sb.append(",E9RACM="+String.valueOf(E9RACM));
		sb.append(",E9RACF="+String.valueOf(E9RACF));
		sb.append(",E9RDRQ="+String.valueOf(E9RDRQ));
		sb.append(",E9RDRW="+String.valueOf(E9RDRW));
		sb.append(",E9RDDQ="+String.valueOf(E9RDDQ));
		sb.append(",E9RDDW="+String.valueOf(E9RDDW));
		sb.append(",E9FMFT="+E9FMFT);
		sb.append(",E9RVFT="+E9RVFT);
		sb.append(",E9FFCD="+String.valueOf(E9FFCD));
		sb.append(",E9RFCD="+String.valueOf(E9RFCD));
		sb.append(",E9FMCD="+String.valueOf(E9FMCD));
		sb.append(",E9RMCD="+String.valueOf(E9RMCD));
		sb.append(",E9RMEA="+String.valueOf(E9RMEA));
		sb.append(",E9RFEA="+String.valueOf(E9RFEA));
		sb.append(",E9MEAP="+String.valueOf(E9MEAP));
		sb.append(",E9FEAP="+String.valueOf(E9FEAP));
		sb.append(",E9FPOF="+E9FPOF);
		sb.append(",E9RPOF="+E9RPOF);
		sb.append(",E9QYSH="+String.valueOf(E9QYSH));
		sb.append(",E9VSQY="+String.valueOf(E9VSQY));
		sb.append(",E9EADT="+String.valueOf(E9EADT));
		sb.append(",E9EATM="+String.valueOf(E9EATM));
		sb.append(",E9EAID="+E9EAID);
		sb.append(",E9MODT="+String.valueOf(E9MODT));
		sb.append(",E9MOTM="+String.valueOf(E9MOTM));
		sb.append(",E9MOID="+E9MOID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
PROFORMA_ORDER_DETAILStruct PROFORMA_ORDER_DETAIL = new PROFORMA_ORDER_DETAILStruct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PROFORMA_ORDER_DETAIL");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("PROFORMA_ORDER_DETAIL");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("PROFORMA_ORDER_DETAIL");
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_1 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_1 = context.GIM_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 1;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"SITE_ID\",\"PURCHASE_ORDER_NO\",\"ITEM\",\"RECOMMENDED_ORDER_SEQ_NO\",\"CUST_PREFERENCE_VENDOR\",\"MERCH_CHANGE_FLAG\",\"FREIGHT_CHANGE_FLAG\",\"DROP_SHIP_QTY_CHANGE_FLAG\",\"MERCH_REASON_CODE\",\"FREIGHT_REASON_CODE\",\"PO_ORDER_QTY\",\"PO_FOB_PER_ITEM\",\"PO_FREIGHT_PER_ITEM\",\"PO_AP_PER_ITEM\",\"PICKUP_ALLOWANCE\",\"PICKUP_ALLOWANCE_TYPE\",\"FREIGHT_RATE_OVERRIDE\",\"FREIGHT_TYPE_OVERRIDE\",\"PICKUP_ALLOWANCE_PER_ITEM\",\"BRACKET_DIFFERENTIAL_PER_ITEM\",\"UNIT_OF_MEASURE\",\"UNLOADING_CHARGE_PER_ITEM\",\"ALLOWANCE_CHARGES_DISTRIB_TO_MERCH\",\"ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT\",\"AS_MANUALLY_ENTERED_LINE_FLAG\",\"PAY_MERCH\",\"PAY_QTY\",\"PO_REVISED_ORDER_QTY\",\"PO_REVISED_FOB_PER_ITEM\",\"PO_REVISED_FREIGHT_PER_ITEM\",\"PO_REVISED_AP_PER_ITEM\",\"REVISED_PICKUP_ALLOWANCE\",\"REVISED_PICKUP_ALLOWANCE_TYPE\",\"REVISED_FREIGHT_RATE_OVERRIDE\",\"REVISED_FREIGHT_TYPE_OVERRIDE\",\"REVISED_PICKUP_ALLOWANCE_PER_ITEM\",\"REVISED_BRACKET_DIFFERENTIAL_PER_ITEM\",\"REVISED_UNLOADING_CHARGE_PER_ITEM\",\"REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH\",\"REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT\",\"REVISED_DROP_SHIP_RECEIVED_QTY\",\"REVISED_DROP_SHIP_RECEIVED_WEIGHT\",\"REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY\",\"REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT\",\"TERMS\",\"REVISED_TERMS\",\"FREIGHT_CASH_DISCOUNT_AMOUNT\",\"REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT\",\"MERCH_CASH_DISCOUNT_AMOUNT\",\"REVISED_MERCH_CASH_DISCOUNT_AMOUNT\",\"REVISED_MERCH_EXTENDED_AMOUNT\",\"REVISED_FREIGHT_EXTENDED_AMOUNT\",\"MERCH_EXTENDED_AMOUNT_TO_BE_PAID\",\"FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID\",\"PRICE_OVERRIDE_FLAG\",\"REVISED_PRICE_OVERRIDE_FLAG\",\"CARRIER_SHORT_QTY\",\"VENDOR_SHORT_QTY\",\"E9FF_SVOP\",\"IS_ACTIVE\",\"CREATED_USER_ID\",\"CREATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"UPDATED_TIMESTAMP\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
PROFORMA_ORDER_DETAILStruct PROFORMA_ORDER_DETAIL_tmp = new PROFORMA_ORDER_DETAILStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.SUS_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  IMHBE9FF.E9PO, \n  IMHBE9FF.E9ITEM, \n  IMHBE9FF.E9ROSQ, \n  IMHBE9FF.E9CPVN, \n  IMHBE9FF.E9FMCF, \n  IMHBE9FF.E9"
+"FFCF, \n  IMHBE9FF.E9FQCF, \n  IMHBE9FF.E9MRSC, \n  IMHBE9FF.E9RRSC, \n  IMHBE9FF.E9PFOQ, \n  IMHBE9FF.E9PFFB, \n  IMHBE9FF.E9"
+"PFFR, \n  IMHBE9FF.E9PFAP, \n  IMHBE9FF.E9FPAL, \n  IMHBE9FF.E9FPUT, \n  IMHBE9FF.E9FFRO, \n  IMHBE9FF.E9FFTO, \n  IMHBE9FF.E9"
+"FPAP, \n  IMHBE9FF.E9FBDP, \n  IMHBE9FF.E9FUOM, \n  IMHBE9FF.E9FUCI, \n  IMHBE9FF.E9FACM, \n  IMHBE9FF.E9FACF, \n  IMHBE9FF.E9"
+"FMEF, \n  IMHBE9FF.E9FMPF, \n  IMHBE9FF.E9FQPF, \n  IMHBE9FF.E9PROQ, \n  IMHBE9FF.E9PRFB, \n  IMHBE9FF.E9PRFR, \n  IMHBE9FF.E9"
+"PRAN, \n  IMHBE9FF.E9RPAL, \n  IMHBE9FF.E9RPUT, \n  IMHBE9FF.E9RFRO, \n  IMHBE9FF.E9RFTO, \n  IMHBE9FF.E9RPAP, \n  IMHBE9FF.E9"
+"RBDP, \n  IMHBE9FF.E9RUCI, \n  IMHBE9FF.E9RACM, \n  IMHBE9FF.E9RACF, \n  IMHBE9FF.E9RDRQ, \n  IMHBE9FF.E9RDRW, \n  IMHBE9FF.E9"
+"RDDQ, \n  IMHBE9FF.E9RDDW, \n  IMHBE9FF.E9FMFT, \n  IMHBE9FF.E9RVFT, \n  IMHBE9FF.E9FFCD, \n  IMHBE9FF.E9RFCD, \n  IMHBE9FF.E9"
+"FMCD, \n  IMHBE9FF.E9RMCD, \n  IMHBE9FF.E9RMEA, \n  IMHBE9FF.E9RFEA, \n  IMHBE9FF.E9MEAP, \n  IMHBE9FF.E9FEAP, \n  IMHBE9FF.E9"
+"FPOF, \n  IMHBE9FF.E9RPOF, \n  IMHBE9FF.E9QYSH, \n  IMHBE9FF.E9VSQY, \n  IMHBE9FF.E9EADT, \n  IMHBE9FF.E9EATM, \n  IMHBE9FF.E9"
+"EAID, \n  IMHBE9FF.E9MODT, \n  IMHBE9FF.E9MOTM, \n  IMHBE9FF.E9MOID\nFROM IMHBE9FF ORDER BY IMHBE9FF.E9EADT DESC";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.E9PO = null;
							} else {
	                         		
        	row1.E9PO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.E9ITEM = null;
							} else {
	                         		
        	row1.E9ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.E9ROSQ = null;
							} else {
		                          
            row1.E9ROSQ = rs_tDBInput_1.getBigDecimal(3);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.E9CPVN = null;
							} else {
	                         		
        	row1.E9CPVN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.E9FMCF = null;
							} else {
	                         		
        	row1.E9FMCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.E9FFCF = null;
							} else {
	                         		
        	row1.E9FFCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.E9FQCF = null;
							} else {
	                         		
        	row1.E9FQCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.E9MRSC = null;
							} else {
	                         		
        	row1.E9MRSC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.E9RRSC = null;
							} else {
	                         		
        	row1.E9RRSC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.E9PFOQ = null;
							} else {
		                          
            row1.E9PFOQ = rs_tDBInput_1.getBigDecimal(10);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.E9PFFB = null;
							} else {
		                          
            row1.E9PFFB = rs_tDBInput_1.getBigDecimal(11);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.E9PFFR = null;
							} else {
		                          
            row1.E9PFFR = rs_tDBInput_1.getBigDecimal(12);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.E9PFAP = null;
							} else {
		                          
            row1.E9PFAP = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.E9FPAL = null;
							} else {
		                          
            row1.E9FPAL = rs_tDBInput_1.getBigDecimal(14);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.E9FPUT = null;
							} else {
	                         		
        	row1.E9FPUT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.E9FFRO = null;
							} else {
		                          
            row1.E9FFRO = rs_tDBInput_1.getBigDecimal(16);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.E9FFTO = null;
							} else {
	                         		
        	row1.E9FFTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.E9FPAP = null;
							} else {
		                          
            row1.E9FPAP = rs_tDBInput_1.getBigDecimal(18);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.E9FBDP = null;
							} else {
		                          
            row1.E9FBDP = rs_tDBInput_1.getBigDecimal(19);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.E9FUOM = null;
							} else {
	                         		
        	row1.E9FUOM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.E9FUCI = null;
							} else {
		                          
            row1.E9FUCI = rs_tDBInput_1.getBigDecimal(21);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.E9FACM = null;
							} else {
		                          
            row1.E9FACM = rs_tDBInput_1.getBigDecimal(22);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.E9FACF = null;
							} else {
		                          
            row1.E9FACF = rs_tDBInput_1.getBigDecimal(23);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.E9FMEF = null;
							} else {
	                         		
        	row1.E9FMEF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.E9FMPF = null;
							} else {
	                         		
        	row1.E9FMPF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.E9FQPF = null;
							} else {
	                         		
        	row1.E9FQPF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.E9PROQ = null;
							} else {
		                          
            row1.E9PROQ = rs_tDBInput_1.getBigDecimal(27);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.E9PRFB = null;
							} else {
		                          
            row1.E9PRFB = rs_tDBInput_1.getBigDecimal(28);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.E9PRFR = null;
							} else {
		                          
            row1.E9PRFR = rs_tDBInput_1.getBigDecimal(29);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.E9PRAN = null;
							} else {
		                          
            row1.E9PRAN = rs_tDBInput_1.getBigDecimal(30);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.E9RPAL = null;
							} else {
		                          
            row1.E9RPAL = rs_tDBInput_1.getBigDecimal(31);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.E9RPUT = null;
							} else {
	                         		
        	row1.E9RPUT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.E9RFRO = null;
							} else {
		                          
            row1.E9RFRO = rs_tDBInput_1.getBigDecimal(33);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.E9RFTO = null;
							} else {
	                         		
        	row1.E9RFTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.E9RPAP = null;
							} else {
		                          
            row1.E9RPAP = rs_tDBInput_1.getBigDecimal(35);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.E9RBDP = null;
							} else {
		                          
            row1.E9RBDP = rs_tDBInput_1.getBigDecimal(36);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.E9RUCI = null;
							} else {
		                          
            row1.E9RUCI = rs_tDBInput_1.getBigDecimal(37);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.E9RACM = null;
							} else {
		                          
            row1.E9RACM = rs_tDBInput_1.getBigDecimal(38);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.E9RACF = null;
							} else {
		                          
            row1.E9RACF = rs_tDBInput_1.getBigDecimal(39);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.E9RDRQ = null;
							} else {
		                          
            row1.E9RDRQ = rs_tDBInput_1.getBigDecimal(40);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.E9RDRW = null;
							} else {
		                          
            row1.E9RDRW = rs_tDBInput_1.getBigDecimal(41);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.E9RDDQ = null;
							} else {
		                          
            row1.E9RDDQ = rs_tDBInput_1.getBigDecimal(42);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.E9RDDW = null;
							} else {
		                          
            row1.E9RDDW = rs_tDBInput_1.getBigDecimal(43);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.E9FMFT = null;
							} else {
	                         		
        	row1.E9FMFT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.E9RVFT = null;
							} else {
	                         		
        	row1.E9RVFT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.E9FFCD = null;
							} else {
		                          
            row1.E9FFCD = rs_tDBInput_1.getBigDecimal(46);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.E9RFCD = null;
							} else {
		                          
            row1.E9RFCD = rs_tDBInput_1.getBigDecimal(47);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.E9FMCD = null;
							} else {
		                          
            row1.E9FMCD = rs_tDBInput_1.getBigDecimal(48);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.E9RMCD = null;
							} else {
		                          
            row1.E9RMCD = rs_tDBInput_1.getBigDecimal(49);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.E9RMEA = null;
							} else {
		                          
            row1.E9RMEA = rs_tDBInput_1.getBigDecimal(50);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.E9RFEA = null;
							} else {
		                          
            row1.E9RFEA = rs_tDBInput_1.getBigDecimal(51);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.E9MEAP = null;
							} else {
		                          
            row1.E9MEAP = rs_tDBInput_1.getBigDecimal(52);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.E9FEAP = null;
							} else {
		                          
            row1.E9FEAP = rs_tDBInput_1.getBigDecimal(53);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.E9FPOF = null;
							} else {
	                         		
        	row1.E9FPOF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.E9RPOF = null;
							} else {
	                         		
        	row1.E9RPOF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 55, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.E9QYSH = null;
							} else {
		                          
            row1.E9QYSH = rs_tDBInput_1.getBigDecimal(56);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.E9VSQY = null;
							} else {
		                          
            row1.E9VSQY = rs_tDBInput_1.getBigDecimal(57);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.E9EADT = null;
							} else {
		                          
            row1.E9EADT = rs_tDBInput_1.getBigDecimal(58);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.E9EATM = null;
							} else {
		                          
            row1.E9EATM = rs_tDBInput_1.getBigDecimal(59);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.E9EAID = null;
							} else {
	                         		
        	row1.E9EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 60, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.E9MODT = null;
							} else {
		                          
            row1.E9MODT = rs_tDBInput_1.getBigDecimal(61);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.E9MOTM = null;
							} else {
		                          
            row1.E9MOTM = rs_tDBInput_1.getBigDecimal(62);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.E9MOID = null;
							} else {
	                         		
        	row1.E9MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 63, true);
		                    }
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Code generated according to input schema and output schema
row2.SITE_ID = context.opco;
row2.PURCHASE_ORDER_NO = CharSetHandling.convertEBCDICStrToASCII(row1.E9PO);
row2.ITEM = CharSetHandling.convertEBCDICStrToASCII(row1.E9ITEM);
row2.RECOMMENDED_ORDER_SEQ_NO = row1.E9ROSQ;
row2.CUST_PREFERENCE_VENDOR = CharSetHandling.convertEBCDICStrToASCII(row1.E9CPVN);
row2.MERCH_CHANGE_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.E9FMCF);
row2.FREIGHT_CHANGE_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.E9FFCF);
row2.DROP_SHIP_QTY_CHANGE_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.E9FQCF);
row2.MERCH_REASON_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.E9MRSC);
row2.FREIGHT_REASON_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.E9RRSC);
row2.PO_ORDER_QTY = row1.E9PFOQ;
row2.PO_FOB_PER_ITEM = row1.E9PFFB;
row2.PO_FREIGHT_PER_ITEM = row1.E9PFFR;
row2.PO_AP_PER_ITEM = row1.E9PFAP;
row2.PICKUP_ALLOWANCE = row1.E9FPAL;
row2.PICKUP_ALLOWANCE_TYPE = CharSetHandling.convertEBCDICStrToASCII(row1.E9FPUT);
row2.FREIGHT_RATE_OVERRIDE = row1.E9FFRO;
row2.FREIGHT_TYPE_OVERRIDE = CharSetHandling.convertEBCDICStrToASCII(row1.E9FFTO);
row2.PICKUP_ALLOWANCE_PER_ITEM = row1.E9FPAP;
row2.BRACKET_DIFFERENTIAL_PER_ITEM = row1.E9FBDP;
row2.UNIT_OF_MEASURE = CharSetHandling.convertEBCDICStrToASCII(row1.E9FUOM);
row2.UNLOADING_CHARGE_PER_ITEM = row1.E9FUCI;
row2.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = row1.E9FACM;
row2.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = row1.E9FACF;
row2.AS_MANUALLY_ENTERED_LINE_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.E9FMEF);
row2.PAY_MERCH = CharSetHandling.convertEBCDICStrToASCII(row1.E9FMPF);
row2.PAY_QTY = CharSetHandling.convertEBCDICStrToASCII(row1.E9FQPF);
row2.PO_REVISED_ORDER_QTY = row1.E9PROQ.toString();
row2.PO_REVISED_FOB_PER_ITEM = row1.E9PRFB;
row2.PO_REVISED_FREIGHT_PER_ITEM = row1.E9PRFR;
row2.PO_REVISED_AP_PER_ITEM = row1.E9PRAN;
row2.REVISED_PICKUP_ALLOWANCE = row1.E9RPAL;
row2.REVISED_PICKUP_ALLOWANCE_TYPE = CharSetHandling.convertEBCDICStrToASCII(row1.E9RPUT);
row2.REVISED_FREIGHT_RATE_OVERRIDE = row1.E9RFRO;
row2.REVISED_FREIGHT_TYPE_OVERRIDE = CharSetHandling.convertEBCDICStrToASCII(row1.E9RFTO);
row2.REVISED_PICKUP_ALLOWANCE_PER_ITEM = row1.E9RPAP;
row2.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM = row1.E9RBDP;
row2.REVISED_UNLOADING_CHARGE_PER_ITEM = row1.E9RUCI;
row2.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = row1.E9RACM;
row2.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = row1.E9RACF;
row2.REVISED_DROP_SHIP_RECEIVED_QTY = row1.E9RDRQ;
row2.REVISED_DROP_SHIP_RECEIVED_WEIGHT = row1.E9RDRW;
row2.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY = row1.E9RDDQ;
row2.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT = row1.E9RDDW;
row2.TERMS = CharSetHandling.convertEBCDICStrToASCII(row1.E9FMFT);
row2.REVISED_TERMS = CharSetHandling.convertEBCDICStrToASCII(row1.E9RVFT);
row2.FREIGHT_CASH_DISCOUNT_AMOUNT = row1.E9FFCD;
row2.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = row1.E9RFCD;
row2.MERCH_CASH_DISCOUNT_AMOUNT = row1.E9FMCD;
row2.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = row1.E9RMCD;
row2.REVISED_MERCH_EXTENDED_AMOUNT = row1.E9RMEA;
row2.REVISED_FREIGHT_EXTENDED_AMOUNT = row1.E9RFEA;
row2.MERCH_EXTENDED_AMOUNT_TO_BE_PAID = row1.E9MEAP;
row2.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID = row1.E9FEAP;
row2.PRICE_OVERRIDE_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.E9FPOF);
row2.REVISED_PRICE_OVERRIDE_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.E9RPOF);
row2.CARRIER_SHORT_QTY = row1.E9QYSH;
row2.VENDOR_SHORT_QTY = row1.E9VSQY;
row2.E9FF_SVOP = context.svop;
row2.IS_ACTIVE = true;
row2.CREATED_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.E9EAID);
row2.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.E9EADT.toString(), row1.E9EATM.toString());
row2.UPDATED_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.E9MOID);
row2.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.E9MODT.toString(), row1.E9MOTM.toString());
row2.IS_DELETED = false;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

PROFORMA_ORDER_DETAIL = null;


// # Output table : 'PROFORMA_ORDER_DETAIL'
PROFORMA_ORDER_DETAIL_tmp.SITE_ID = row2.SITE_ID;
PROFORMA_ORDER_DETAIL_tmp.PURCHASE_ORDER_NO = row2.PURCHASE_ORDER_NO;
PROFORMA_ORDER_DETAIL_tmp.ITEM = row2.ITEM;
PROFORMA_ORDER_DETAIL_tmp.RECOMMENDED_ORDER_SEQ_NO = row2.RECOMMENDED_ORDER_SEQ_NO;
PROFORMA_ORDER_DETAIL_tmp.CUST_PREFERENCE_VENDOR = row2.CUST_PREFERENCE_VENDOR;
PROFORMA_ORDER_DETAIL_tmp.MERCH_CHANGE_FLAG = row2.MERCH_CHANGE_FLAG;
PROFORMA_ORDER_DETAIL_tmp.FREIGHT_CHANGE_FLAG = row2.FREIGHT_CHANGE_FLAG;
PROFORMA_ORDER_DETAIL_tmp.DROP_SHIP_QTY_CHANGE_FLAG = row2.DROP_SHIP_QTY_CHANGE_FLAG;
PROFORMA_ORDER_DETAIL_tmp.MERCH_REASON_CODE = row2.MERCH_REASON_CODE;
PROFORMA_ORDER_DETAIL_tmp.FREIGHT_REASON_CODE = row2.FREIGHT_REASON_CODE;
PROFORMA_ORDER_DETAIL_tmp.PO_ORDER_QTY = row2.PO_ORDER_QTY;
PROFORMA_ORDER_DETAIL_tmp.PO_FOB_PER_ITEM = row2.PO_FOB_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.PO_FREIGHT_PER_ITEM = row2.PO_FREIGHT_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.PO_AP_PER_ITEM = row2.PO_AP_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.PICKUP_ALLOWANCE = row2.PICKUP_ALLOWANCE;
PROFORMA_ORDER_DETAIL_tmp.PICKUP_ALLOWANCE_TYPE = row2.PICKUP_ALLOWANCE_TYPE;
PROFORMA_ORDER_DETAIL_tmp.FREIGHT_RATE_OVERRIDE = row2.FREIGHT_RATE_OVERRIDE;
PROFORMA_ORDER_DETAIL_tmp.FREIGHT_TYPE_OVERRIDE = row2.FREIGHT_TYPE_OVERRIDE;
PROFORMA_ORDER_DETAIL_tmp.PICKUP_ALLOWANCE_PER_ITEM = row2.PICKUP_ALLOWANCE_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.BRACKET_DIFFERENTIAL_PER_ITEM = row2.BRACKET_DIFFERENTIAL_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.UNIT_OF_MEASURE = row2.UNIT_OF_MEASURE;
PROFORMA_ORDER_DETAIL_tmp.UNLOADING_CHARGE_PER_ITEM = row2.UNLOADING_CHARGE_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = row2.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
PROFORMA_ORDER_DETAIL_tmp.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = row2.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
PROFORMA_ORDER_DETAIL_tmp.AS_MANUALLY_ENTERED_LINE_FLAG = row2.AS_MANUALLY_ENTERED_LINE_FLAG;
PROFORMA_ORDER_DETAIL_tmp.PAY_MERCH = row2.PAY_MERCH;
PROFORMA_ORDER_DETAIL_tmp.PAY_QTY = row2.PAY_QTY;
PROFORMA_ORDER_DETAIL_tmp.PO_REVISED_ORDER_QTY = row2.PO_REVISED_ORDER_QTY;
PROFORMA_ORDER_DETAIL_tmp.PO_REVISED_FOB_PER_ITEM = row2.PO_REVISED_FOB_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.PO_REVISED_FREIGHT_PER_ITEM = row2.PO_REVISED_FREIGHT_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.PO_REVISED_AP_PER_ITEM = row2.PO_REVISED_AP_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.REVISED_PICKUP_ALLOWANCE = row2.REVISED_PICKUP_ALLOWANCE;
PROFORMA_ORDER_DETAIL_tmp.REVISED_PICKUP_ALLOWANCE_TYPE = row2.REVISED_PICKUP_ALLOWANCE_TYPE;
PROFORMA_ORDER_DETAIL_tmp.REVISED_FREIGHT_RATE_OVERRIDE = row2.REVISED_FREIGHT_RATE_OVERRIDE;
PROFORMA_ORDER_DETAIL_tmp.REVISED_FREIGHT_TYPE_OVERRIDE = row2.REVISED_FREIGHT_TYPE_OVERRIDE;
PROFORMA_ORDER_DETAIL_tmp.REVISED_PICKUP_ALLOWANCE_PER_ITEM = row2.REVISED_PICKUP_ALLOWANCE_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM = row2.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.REVISED_UNLOADING_CHARGE_PER_ITEM = row2.REVISED_UNLOADING_CHARGE_PER_ITEM;
PROFORMA_ORDER_DETAIL_tmp.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH = row2.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH;
PROFORMA_ORDER_DETAIL_tmp.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT = row2.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT;
PROFORMA_ORDER_DETAIL_tmp.REVISED_DROP_SHIP_RECEIVED_QTY = row2.REVISED_DROP_SHIP_RECEIVED_QTY;
PROFORMA_ORDER_DETAIL_tmp.REVISED_DROP_SHIP_RECEIVED_WEIGHT = row2.REVISED_DROP_SHIP_RECEIVED_WEIGHT;
PROFORMA_ORDER_DETAIL_tmp.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY = row2.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY;
PROFORMA_ORDER_DETAIL_tmp.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT = row2.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT;
PROFORMA_ORDER_DETAIL_tmp.TERMS = row2.TERMS;
PROFORMA_ORDER_DETAIL_tmp.REVISED_TERMS = row2.REVISED_TERMS;
PROFORMA_ORDER_DETAIL_tmp.FREIGHT_CASH_DISCOUNT_AMOUNT = row2.FREIGHT_CASH_DISCOUNT_AMOUNT;
PROFORMA_ORDER_DETAIL_tmp.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT = row2.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT;
PROFORMA_ORDER_DETAIL_tmp.MERCH_CASH_DISCOUNT_AMOUNT = row2.MERCH_CASH_DISCOUNT_AMOUNT;
PROFORMA_ORDER_DETAIL_tmp.REVISED_MERCH_CASH_DISCOUNT_AMOUNT = row2.REVISED_MERCH_CASH_DISCOUNT_AMOUNT;
PROFORMA_ORDER_DETAIL_tmp.REVISED_MERCH_EXTENDED_AMOUNT = row2.REVISED_MERCH_EXTENDED_AMOUNT;
PROFORMA_ORDER_DETAIL_tmp.REVISED_FREIGHT_EXTENDED_AMOUNT = row2.REVISED_FREIGHT_EXTENDED_AMOUNT;
PROFORMA_ORDER_DETAIL_tmp.MERCH_EXTENDED_AMOUNT_TO_BE_PAID = row2.MERCH_EXTENDED_AMOUNT_TO_BE_PAID;
PROFORMA_ORDER_DETAIL_tmp.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID = row2.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID;
PROFORMA_ORDER_DETAIL_tmp.PRICE_OVERRIDE_FLAG = row2.PRICE_OVERRIDE_FLAG;
PROFORMA_ORDER_DETAIL_tmp.REVISED_PRICE_OVERRIDE_FLAG = row2.REVISED_PRICE_OVERRIDE_FLAG;
PROFORMA_ORDER_DETAIL_tmp.CARRIER_SHORT_QTY = row2.CARRIER_SHORT_QTY;
PROFORMA_ORDER_DETAIL_tmp.VENDOR_SHORT_QTY = row2.VENDOR_SHORT_QTY;
PROFORMA_ORDER_DETAIL_tmp.E9FF_SVOP = row2.E9FF_SVOP;
PROFORMA_ORDER_DETAIL_tmp.IS_ACTIVE = row2.IS_ACTIVE;
PROFORMA_ORDER_DETAIL_tmp.CREATED_USER_ID = row2.CREATED_USER_ID;
PROFORMA_ORDER_DETAIL_tmp.CREATED_TIMESTAMP = row2.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",row2.CREATED_TIMESTAMP):null ;
PROFORMA_ORDER_DETAIL_tmp.UPDATED_USER_ID = row2.UPDATED_USER_ID;
PROFORMA_ORDER_DETAIL_tmp.UPDATED_TIMESTAMP = row2.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",row2.UPDATED_TIMESTAMP):null ;
PROFORMA_ORDER_DETAIL_tmp.IS_DELETED = row2.IS_DELETED;
PROFORMA_ORDER_DETAIL_tmp.CREATED_ORIGIN = "SUS";
PROFORMA_ORDER_DETAIL_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PROFORMA_ORDER_DETAIL_tmp.UPDATED_ORIGIN = "SUS";
PROFORMA_ORDER_DETAIL_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PROFORMA_ORDER_DETAIL = PROFORMA_ORDER_DETAIL_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "PROFORMA_ORDER_DETAIL"
if(PROFORMA_ORDER_DETAIL != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PROFORMA_ORDER_DETAIL"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(PROFORMA_ORDER_DETAIL.SITE_ID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, PROFORMA_ORDER_DETAIL.SITE_ID);
}

                    if(PROFORMA_ORDER_DETAIL.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, PROFORMA_ORDER_DETAIL.PURCHASE_ORDER_NO);
}

                    if(PROFORMA_ORDER_DETAIL.ITEM == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, PROFORMA_ORDER_DETAIL.ITEM);
}

                    pstmt_tDBOutput_1.setBigDecimal(4, PROFORMA_ORDER_DETAIL.RECOMMENDED_ORDER_SEQ_NO);

                    if(PROFORMA_ORDER_DETAIL.CUST_PREFERENCE_VENDOR == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, PROFORMA_ORDER_DETAIL.CUST_PREFERENCE_VENDOR);
}

                    if(PROFORMA_ORDER_DETAIL.MERCH_CHANGE_FLAG == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, PROFORMA_ORDER_DETAIL.MERCH_CHANGE_FLAG);
}

                    if(PROFORMA_ORDER_DETAIL.FREIGHT_CHANGE_FLAG == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, PROFORMA_ORDER_DETAIL.FREIGHT_CHANGE_FLAG);
}

                    if(PROFORMA_ORDER_DETAIL.DROP_SHIP_QTY_CHANGE_FLAG == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, PROFORMA_ORDER_DETAIL.DROP_SHIP_QTY_CHANGE_FLAG);
}

                    if(PROFORMA_ORDER_DETAIL.MERCH_REASON_CODE == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, PROFORMA_ORDER_DETAIL.MERCH_REASON_CODE);
}

                    if(PROFORMA_ORDER_DETAIL.FREIGHT_REASON_CODE == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, PROFORMA_ORDER_DETAIL.FREIGHT_REASON_CODE);
}

                    pstmt_tDBOutput_1.setBigDecimal(11, PROFORMA_ORDER_DETAIL.PO_ORDER_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(12, PROFORMA_ORDER_DETAIL.PO_FOB_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(13, PROFORMA_ORDER_DETAIL.PO_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(14, PROFORMA_ORDER_DETAIL.PO_AP_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(15, PROFORMA_ORDER_DETAIL.PICKUP_ALLOWANCE);

                    if(PROFORMA_ORDER_DETAIL.PICKUP_ALLOWANCE_TYPE == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, PROFORMA_ORDER_DETAIL.PICKUP_ALLOWANCE_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(17, PROFORMA_ORDER_DETAIL.FREIGHT_RATE_OVERRIDE);

                    if(PROFORMA_ORDER_DETAIL.FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, PROFORMA_ORDER_DETAIL.FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_1.setBigDecimal(19, PROFORMA_ORDER_DETAIL.PICKUP_ALLOWANCE_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(20, PROFORMA_ORDER_DETAIL.BRACKET_DIFFERENTIAL_PER_ITEM);

                    if(PROFORMA_ORDER_DETAIL.UNIT_OF_MEASURE == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, PROFORMA_ORDER_DETAIL.UNIT_OF_MEASURE);
}

                    pstmt_tDBOutput_1.setBigDecimal(22, PROFORMA_ORDER_DETAIL.UNLOADING_CHARGE_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(23, PROFORMA_ORDER_DETAIL.ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);

                    pstmt_tDBOutput_1.setBigDecimal(24, PROFORMA_ORDER_DETAIL.ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);

                    if(PROFORMA_ORDER_DETAIL.AS_MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, PROFORMA_ORDER_DETAIL.AS_MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PROFORMA_ORDER_DETAIL.PAY_MERCH == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, PROFORMA_ORDER_DETAIL.PAY_MERCH);
}

                    if(PROFORMA_ORDER_DETAIL.PAY_QTY == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, PROFORMA_ORDER_DETAIL.PAY_QTY);
}

                    if(PROFORMA_ORDER_DETAIL.PO_REVISED_ORDER_QTY == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, PROFORMA_ORDER_DETAIL.PO_REVISED_ORDER_QTY);
}

                    pstmt_tDBOutput_1.setBigDecimal(29, PROFORMA_ORDER_DETAIL.PO_REVISED_FOB_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(30, PROFORMA_ORDER_DETAIL.PO_REVISED_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(31, PROFORMA_ORDER_DETAIL.PO_REVISED_AP_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(32, PROFORMA_ORDER_DETAIL.REVISED_PICKUP_ALLOWANCE);

                    if(PROFORMA_ORDER_DETAIL.REVISED_PICKUP_ALLOWANCE_TYPE == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, PROFORMA_ORDER_DETAIL.REVISED_PICKUP_ALLOWANCE_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(34, PROFORMA_ORDER_DETAIL.REVISED_FREIGHT_RATE_OVERRIDE);

                    if(PROFORMA_ORDER_DETAIL.REVISED_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, PROFORMA_ORDER_DETAIL.REVISED_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_1.setBigDecimal(36, PROFORMA_ORDER_DETAIL.REVISED_PICKUP_ALLOWANCE_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(37, PROFORMA_ORDER_DETAIL.REVISED_BRACKET_DIFFERENTIAL_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(38, PROFORMA_ORDER_DETAIL.REVISED_UNLOADING_CHARGE_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(39, PROFORMA_ORDER_DETAIL.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_MERCH);

                    pstmt_tDBOutput_1.setBigDecimal(40, PROFORMA_ORDER_DETAIL.REVISED_ALLOWANCE_CHARGES_DISTRIB_TO_FREIGHT);

                    pstmt_tDBOutput_1.setBigDecimal(41, PROFORMA_ORDER_DETAIL.REVISED_DROP_SHIP_RECEIVED_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(42, PROFORMA_ORDER_DETAIL.REVISED_DROP_SHIP_RECEIVED_WEIGHT);

                    pstmt_tDBOutput_1.setBigDecimal(43, PROFORMA_ORDER_DETAIL.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(44, PROFORMA_ORDER_DETAIL.REVISED_DROP_SHIP_DAMAGED_AND_ACCEPTED_WGT);

                    if(PROFORMA_ORDER_DETAIL.TERMS == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, PROFORMA_ORDER_DETAIL.TERMS);
}

                    if(PROFORMA_ORDER_DETAIL.REVISED_TERMS == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, PROFORMA_ORDER_DETAIL.REVISED_TERMS);
}

                    pstmt_tDBOutput_1.setBigDecimal(47, PROFORMA_ORDER_DETAIL.FREIGHT_CASH_DISCOUNT_AMOUNT);

                    pstmt_tDBOutput_1.setBigDecimal(48, PROFORMA_ORDER_DETAIL.REVISED_FREIGHT_CASH_DISCOUNT_AMOUNT);

                    pstmt_tDBOutput_1.setBigDecimal(49, PROFORMA_ORDER_DETAIL.MERCH_CASH_DISCOUNT_AMOUNT);

                    pstmt_tDBOutput_1.setBigDecimal(50, PROFORMA_ORDER_DETAIL.REVISED_MERCH_CASH_DISCOUNT_AMOUNT);

                    pstmt_tDBOutput_1.setBigDecimal(51, PROFORMA_ORDER_DETAIL.REVISED_MERCH_EXTENDED_AMOUNT);

                    pstmt_tDBOutput_1.setBigDecimal(52, PROFORMA_ORDER_DETAIL.REVISED_FREIGHT_EXTENDED_AMOUNT);

                    pstmt_tDBOutput_1.setBigDecimal(53, PROFORMA_ORDER_DETAIL.MERCH_EXTENDED_AMOUNT_TO_BE_PAID);

                    pstmt_tDBOutput_1.setBigDecimal(54, PROFORMA_ORDER_DETAIL.FREIGHT_EXTENDED_AMOUNT_TO_BE_PAID);

                    if(PROFORMA_ORDER_DETAIL.PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(55, PROFORMA_ORDER_DETAIL.PRICE_OVERRIDE_FLAG);
}

                    if(PROFORMA_ORDER_DETAIL.REVISED_PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(56, PROFORMA_ORDER_DETAIL.REVISED_PRICE_OVERRIDE_FLAG);
}

                    pstmt_tDBOutput_1.setBigDecimal(57, PROFORMA_ORDER_DETAIL.CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(58, PROFORMA_ORDER_DETAIL.VENDOR_SHORT_QTY);

                    if(PROFORMA_ORDER_DETAIL.E9FF_SVOP == null) {
pstmt_tDBOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(59, PROFORMA_ORDER_DETAIL.E9FF_SVOP);
}

                    if(PROFORMA_ORDER_DETAIL.IS_ACTIVE == null) {
pstmt_tDBOutput_1.setNull(60, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(60, PROFORMA_ORDER_DETAIL.IS_ACTIVE);
}

                    if(PROFORMA_ORDER_DETAIL.CREATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(61, PROFORMA_ORDER_DETAIL.CREATED_USER_ID);
}

                    if(PROFORMA_ORDER_DETAIL.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(62, new java.sql.Timestamp(PROFORMA_ORDER_DETAIL.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(62, java.sql.Types.TIMESTAMP);
}

                    if(PROFORMA_ORDER_DETAIL.UPDATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(63, PROFORMA_ORDER_DETAIL.UPDATED_USER_ID);
}

                    if(PROFORMA_ORDER_DETAIL.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(64, new java.sql.Timestamp(PROFORMA_ORDER_DETAIL.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(64, java.sql.Types.TIMESTAMP);
}

                    if(PROFORMA_ORDER_DETAIL.IS_DELETED == null) {
pstmt_tDBOutput_1.setNull(65, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(65, PROFORMA_ORDER_DETAIL.IS_DELETED);
}

                    if(PROFORMA_ORDER_DETAIL.CREATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(66, PROFORMA_ORDER_DETAIL.CREATED_ORIGIN);
}

                    if(PROFORMA_ORDER_DETAIL.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(67, new java.sql.Timestamp(PROFORMA_ORDER_DETAIL.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(67, java.sql.Types.TIMESTAMP);
}

                    if(PROFORMA_ORDER_DETAIL.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(68, PROFORMA_ORDER_DETAIL.UPDATED_ORIGIN);
}

                    if(PROFORMA_ORDER_DETAIL.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(69, new java.sql.Timestamp(PROFORMA_ORDER_DETAIL.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(69, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "PROFORMA_ORDER_DETAIL"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_1", end_Hash.get("tDBInput_1")-start_Hash.get("tDBInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
			}
			conn_tDBOutput_1.commit();
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
				rowsToCommitCount_tDBOutput_1 = 0;
			}
			commitCounter_tDBOutput_1 = 0;
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PROFORMA_ORDER_DETAIL");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_1", end_Hash.get("tDBOutput_1")-start_Hash.get("tDBOutput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Proforma_Order_Master_Inbound Proforma_Order_Master_InboundClass = new Proforma_Order_Master_Inbound();

        int exitCode = Proforma_Order_Master_InboundClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Proforma_Order_Master_Inbound.class.getClassLoader().getResourceAsStream("sus_sli_etl/proforma_order_master_inbound_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Proforma_Order_Master_Inbound.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("opco", "id_String");
                        if(context.getStringValue("opco") == null) {
                            context.opco = null;
                        } else {
                            context.opco=(String) context.getProperty("opco");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("sopco", "id_String");
                        if(context.getStringValue("sopco") == null) {
                            context.sopco = null;
                        } else {
                            context.sopco=(String) context.getProperty("sopco");
                        }
                        context.setContextType("svop", "id_String");
                        if(context.getStringValue("svop") == null) {
                            context.svop = null;
                        } else {
                            context.svop=(String) context.getProperty("svop");
                        }
                        context.setContextType("GIM_AdditionalParams", "id_String");
                        if(context.getStringValue("GIM_AdditionalParams") == null) {
                            context.GIM_AdditionalParams = null;
                        } else {
                            context.GIM_AdditionalParams=(String) context.getProperty("GIM_AdditionalParams");
                        }
                        context.setContextType("GIM_Database", "id_String");
                        if(context.getStringValue("GIM_Database") == null) {
                            context.GIM_Database = null;
                        } else {
                            context.GIM_Database=(String) context.getProperty("GIM_Database");
                        }
                        context.setContextType("GIM_Login", "id_String");
                        if(context.getStringValue("GIM_Login") == null) {
                            context.GIM_Login = null;
                        } else {
                            context.GIM_Login=(String) context.getProperty("GIM_Login");
                        }
                        context.setContextType("GIM_Password", "id_Password");
                        if(context.getStringValue("GIM_Password") == null) {
                            context.GIM_Password = null;
                        } else {
                            String pwd_GIM_Password_value = context.getProperty("GIM_Password");
                            context.GIM_Password = null;
                            if(pwd_GIM_Password_value!=null) {
                                if(context_param.containsKey("GIM_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.GIM_Password = pwd_GIM_Password_value;
                                } else if (!pwd_GIM_Password_value.isEmpty()) {
                                    try {
                                        context.GIM_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_GIM_Password_value);
                                        context.put("GIM_Password",context.GIM_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("GIM_Port", "id_String");
                        if(context.getStringValue("GIM_Port") == null) {
                            context.GIM_Port = null;
                        } else {
                            context.GIM_Port=(String) context.getProperty("GIM_Port");
                        }
                        context.setContextType("GIM_Schema_Demand", "id_String");
                        if(context.getStringValue("GIM_Schema_Demand") == null) {
                            context.GIM_Schema_Demand = null;
                        } else {
                            context.GIM_Schema_Demand=(String) context.getProperty("GIM_Schema_Demand");
                        }
                        context.setContextType("GIM_Schema_Inventory", "id_String");
                        if(context.getStringValue("GIM_Schema_Inventory") == null) {
                            context.GIM_Schema_Inventory = null;
                        } else {
                            context.GIM_Schema_Inventory=(String) context.getProperty("GIM_Schema_Inventory");
                        }
                        context.setContextType("GIM_Schema_Master", "id_String");
                        if(context.getStringValue("GIM_Schema_Master") == null) {
                            context.GIM_Schema_Master = null;
                        } else {
                            context.GIM_Schema_Master=(String) context.getProperty("GIM_Schema_Master");
                        }
                        context.setContextType("GIM_Schema_Migrating_Test", "id_String");
                        if(context.getStringValue("GIM_Schema_Migrating_Test") == null) {
                            context.GIM_Schema_Migrating_Test = null;
                        } else {
                            context.GIM_Schema_Migrating_Test=(String) context.getProperty("GIM_Schema_Migrating_Test");
                        }
                        context.setContextType("GIM_Schema_Order_Processing", "id_String");
                        if(context.getStringValue("GIM_Schema_Order_Processing") == null) {
                            context.GIM_Schema_Order_Processing = null;
                        } else {
                            context.GIM_Schema_Order_Processing=(String) context.getProperty("GIM_Schema_Order_Processing");
                        }
                        context.setContextType("GIM_Schema_PO", "id_String");
                        if(context.getStringValue("GIM_Schema_PO") == null) {
                            context.GIM_Schema_PO = null;
                        } else {
                            context.GIM_Schema_PO=(String) context.getProperty("GIM_Schema_PO");
                        }
                        context.setContextType("GIM_Schema_System", "id_String");
                        if(context.getStringValue("GIM_Schema_System") == null) {
                            context.GIM_Schema_System = null;
                        } else {
                            context.GIM_Schema_System=(String) context.getProperty("GIM_Schema_System");
                        }
                        context.setContextType("GIM_Server", "id_String");
                        if(context.getStringValue("GIM_Server") == null) {
                            context.GIM_Server = null;
                        } else {
                            context.GIM_Server=(String) context.getProperty("GIM_Server");
                        }
                        context.setContextType("SUS_Additional_Params", "id_String");
                        if(context.getStringValue("SUS_Additional_Params") == null) {
                            context.SUS_Additional_Params = null;
                        } else {
                            context.SUS_Additional_Params=(String) context.getProperty("SUS_Additional_Params");
                        }
                        context.setContextType("SUS_Database", "id_String");
                        if(context.getStringValue("SUS_Database") == null) {
                            context.SUS_Database = null;
                        } else {
                            context.SUS_Database=(String) context.getProperty("SUS_Database");
                        }
                        context.setContextType("SUS_Database_ARDBFA", "id_String");
                        if(context.getStringValue("SUS_Database_ARDBFA") == null) {
                            context.SUS_Database_ARDBFA = null;
                        } else {
                            context.SUS_Database_ARDBFA=(String) context.getProperty("SUS_Database_ARDBFA");
                        }
                        context.setContextType("SUS_Login", "id_String");
                        if(context.getStringValue("SUS_Login") == null) {
                            context.SUS_Login = null;
                        } else {
                            context.SUS_Login=(String) context.getProperty("SUS_Login");
                        }
                        context.setContextType("SUS_Password", "id_Password");
                        if(context.getStringValue("SUS_Password") == null) {
                            context.SUS_Password = null;
                        } else {
                            String pwd_SUS_Password_value = context.getProperty("SUS_Password");
                            context.SUS_Password = null;
                            if(pwd_SUS_Password_value!=null) {
                                if(context_param.containsKey("SUS_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SUS_Password = pwd_SUS_Password_value;
                                } else if (!pwd_SUS_Password_value.isEmpty()) {
                                    try {
                                        context.SUS_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SUS_Password_value);
                                        context.put("SUS_Password",context.SUS_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SUS_Port", "id_String");
                        if(context.getStringValue("SUS_Port") == null) {
                            context.SUS_Port = null;
                        } else {
                            context.SUS_Port=(String) context.getProperty("SUS_Port");
                        }
                        context.setContextType("SUS_Schema", "id_String");
                        if(context.getStringValue("SUS_Schema") == null) {
                            context.SUS_Schema = null;
                        } else {
                            context.SUS_Schema=(String) context.getProperty("SUS_Schema");
                        }
                        context.setContextType("SUS_Server", "id_String");
                        if(context.getStringValue("SUS_Server") == null) {
                            context.SUS_Server = null;
                        } else {
                            context.SUS_Server=(String) context.getProperty("SUS_Server");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("opco")) {
                context.opco = (String) parentContextMap.get("opco");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("sopco")) {
                context.sopco = (String) parentContextMap.get("sopco");
            }if (parentContextMap.containsKey("svop")) {
                context.svop = (String) parentContextMap.get("svop");
            }if (parentContextMap.containsKey("GIM_AdditionalParams")) {
                context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
            }if (parentContextMap.containsKey("GIM_Database")) {
                context.GIM_Database = (String) parentContextMap.get("GIM_Database");
            }if (parentContextMap.containsKey("GIM_Login")) {
                context.GIM_Login = (String) parentContextMap.get("GIM_Login");
            }if (parentContextMap.containsKey("GIM_Password")) {
                context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
            }if (parentContextMap.containsKey("GIM_Port")) {
                context.GIM_Port = (String) parentContextMap.get("GIM_Port");
            }if (parentContextMap.containsKey("GIM_Schema_Demand")) {
                context.GIM_Schema_Demand = (String) parentContextMap.get("GIM_Schema_Demand");
            }if (parentContextMap.containsKey("GIM_Schema_Inventory")) {
                context.GIM_Schema_Inventory = (String) parentContextMap.get("GIM_Schema_Inventory");
            }if (parentContextMap.containsKey("GIM_Schema_Master")) {
                context.GIM_Schema_Master = (String) parentContextMap.get("GIM_Schema_Master");
            }if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
                context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
            }if (parentContextMap.containsKey("GIM_Schema_Order_Processing")) {
                context.GIM_Schema_Order_Processing = (String) parentContextMap.get("GIM_Schema_Order_Processing");
            }if (parentContextMap.containsKey("GIM_Schema_PO")) {
                context.GIM_Schema_PO = (String) parentContextMap.get("GIM_Schema_PO");
            }if (parentContextMap.containsKey("GIM_Schema_System")) {
                context.GIM_Schema_System = (String) parentContextMap.get("GIM_Schema_System");
            }if (parentContextMap.containsKey("GIM_Server")) {
                context.GIM_Server = (String) parentContextMap.get("GIM_Server");
            }if (parentContextMap.containsKey("SUS_Additional_Params")) {
                context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
            }if (parentContextMap.containsKey("SUS_Database")) {
                context.SUS_Database = (String) parentContextMap.get("SUS_Database");
            }if (parentContextMap.containsKey("SUS_Database_ARDBFA")) {
                context.SUS_Database_ARDBFA = (String) parentContextMap.get("SUS_Database_ARDBFA");
            }if (parentContextMap.containsKey("SUS_Login")) {
                context.SUS_Login = (String) parentContextMap.get("SUS_Login");
            }if (parentContextMap.containsKey("SUS_Password")) {
                context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
            }if (parentContextMap.containsKey("SUS_Port")) {
                context.SUS_Port = (String) parentContextMap.get("SUS_Port");
            }if (parentContextMap.containsKey("SUS_Schema")) {
                context.SUS_Schema = (String) parentContextMap.get("SUS_Schema");
            }if (parentContextMap.containsKey("SUS_Server")) {
                context.SUS_Server = (String) parentContextMap.get("SUS_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("GIM_Password");
			parametersToEncrypt.add("SUS_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

e_tJava_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Proforma_Order_Master_Inbound");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     507260 characters generated by Talend Open Studio for Data Integration 
 *     on the November 22, 2022 at 1:53:03 PM IST
 ************************************************************************************************/