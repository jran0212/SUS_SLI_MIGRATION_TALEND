// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sus_sli_etl.purchase_order_detail_update_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Purchase_Order_Detail_Update_Inbound Purpose: Migrating data from IMHBV4PF to PURCHASE_ORDER_DETAIL<br>
 * Description: Migrating data from IMHBV4PF to PURCHASE_ORDER_DETAIL <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Purchase_Order_Detail_Update_Inbound implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(opco != null){
				
					this.setProperty("opco", opco.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(sopco != null){
				
					this.setProperty("sopco", sopco.toString());
				
			}
			
			if(svop != null){
				
					this.setProperty("svop", svop.toString());
				
			}
			
			if(GIM_AdditionalParams != null){
				
					this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());
				
			}
			
			if(GIM_Database != null){
				
					this.setProperty("GIM_Database", GIM_Database.toString());
				
			}
			
			if(GIM_Login != null){
				
					this.setProperty("GIM_Login", GIM_Login.toString());
				
			}
			
			if(GIM_Password != null){
				
					this.setProperty("GIM_Password", GIM_Password.toString());
				
			}
			
			if(GIM_Port != null){
				
					this.setProperty("GIM_Port", GIM_Port.toString());
				
			}
			
			if(GIM_Schema_Demand != null){
				
					this.setProperty("GIM_Schema_Demand", GIM_Schema_Demand.toString());
				
			}
			
			if(GIM_Schema_Inventory != null){
				
					this.setProperty("GIM_Schema_Inventory", GIM_Schema_Inventory.toString());
				
			}
			
			if(GIM_Schema_Master != null){
				
					this.setProperty("GIM_Schema_Master", GIM_Schema_Master.toString());
				
			}
			
			if(GIM_Schema_Migrating_Test != null){
				
					this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());
				
			}
			
			if(GIM_Schema_Order_Processing != null){
				
					this.setProperty("GIM_Schema_Order_Processing", GIM_Schema_Order_Processing.toString());
				
			}
			
			if(GIM_Schema_PO != null){
				
					this.setProperty("GIM_Schema_PO", GIM_Schema_PO.toString());
				
			}
			
			if(GIM_Schema_System != null){
				
					this.setProperty("GIM_Schema_System", GIM_Schema_System.toString());
				
			}
			
			if(GIM_Server != null){
				
					this.setProperty("GIM_Server", GIM_Server.toString());
				
			}
			
			if(SUS_Additional_Params != null){
				
					this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());
				
			}
			
			if(SUS_Database != null){
				
					this.setProperty("SUS_Database", SUS_Database.toString());
				
			}
			
			if(SUS_Database_ARDBFA != null){
				
					this.setProperty("SUS_Database_ARDBFA", SUS_Database_ARDBFA.toString());
				
			}
			
			if(SUS_Login != null){
				
					this.setProperty("SUS_Login", SUS_Login.toString());
				
			}
			
			if(SUS_Password != null){
				
					this.setProperty("SUS_Password", SUS_Password.toString());
				
			}
			
			if(SUS_Port != null){
				
					this.setProperty("SUS_Port", SUS_Port.toString());
				
			}
			
			if(SUS_Schema != null){
				
					this.setProperty("SUS_Schema", SUS_Schema.toString());
				
			}
			
			if(SUS_Server != null){
				
					this.setProperty("SUS_Server", SUS_Server.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String opco;
public String getOpco(){
	return this.opco;
}
public String server;
public String getServer(){
	return this.server;
}
public String sopco;
public String getSopco(){
	return this.sopco;
}
public String svop;
public String getSvop(){
	return this.svop;
}
public String GIM_AdditionalParams;
public String getGIM_AdditionalParams(){
	return this.GIM_AdditionalParams;
}
public String GIM_Database;
public String getGIM_Database(){
	return this.GIM_Database;
}
public String GIM_Login;
public String getGIM_Login(){
	return this.GIM_Login;
}
public java.lang.String GIM_Password;
public java.lang.String getGIM_Password(){
	return this.GIM_Password;
}
public String GIM_Port;
public String getGIM_Port(){
	return this.GIM_Port;
}
public String GIM_Schema_Demand;
public String getGIM_Schema_Demand(){
	return this.GIM_Schema_Demand;
}
public String GIM_Schema_Inventory;
public String getGIM_Schema_Inventory(){
	return this.GIM_Schema_Inventory;
}
public String GIM_Schema_Master;
public String getGIM_Schema_Master(){
	return this.GIM_Schema_Master;
}
public String GIM_Schema_Migrating_Test;
public String getGIM_Schema_Migrating_Test(){
	return this.GIM_Schema_Migrating_Test;
}
public String GIM_Schema_Order_Processing;
public String getGIM_Schema_Order_Processing(){
	return this.GIM_Schema_Order_Processing;
}
public String GIM_Schema_PO;
public String getGIM_Schema_PO(){
	return this.GIM_Schema_PO;
}
public String GIM_Schema_System;
public String getGIM_Schema_System(){
	return this.GIM_Schema_System;
}
public String GIM_Server;
public String getGIM_Server(){
	return this.GIM_Server;
}
public String SUS_Additional_Params;
public String getSUS_Additional_Params(){
	return this.SUS_Additional_Params;
}
public String SUS_Database;
public String getSUS_Database(){
	return this.SUS_Database;
}
public String SUS_Database_ARDBFA;
public String getSUS_Database_ARDBFA(){
	return this.SUS_Database_ARDBFA;
}
public String SUS_Login;
public String getSUS_Login(){
	return this.SUS_Login;
}
public java.lang.String SUS_Password;
public java.lang.String getSUS_Password(){
	return this.SUS_Password;
}
public String SUS_Port;
public String getSUS_Port(){
	return this.SUS_Port;
}
public String SUS_Schema;
public String getSUS_Schema(){
	return this.SUS_Schema;
}
public String SUS_Server;
public String getSUS_Server(){
	return this.SUS_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Purchase_Order_Detail_Update_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_KOdS8FBeEe2x9IfQWoEuMg", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_KOdS8FBeEe2x9IfQWoEuMg", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Purchase_Order_Detail_Update_Inbound.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Purchase_Order_Detail_Update_Inbound.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class Main_LogStruct implements routines.system.IPersistableRow<Main_LogStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_LogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
Main_LogStruct Main_Log = new Main_LogStruct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Log");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_LogStruct Main_Log_tmp = new Main_LogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row6.type = lcm.getType();
		row6.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row6.priority = lcm.getPriority();
		row6.message = lcm.getMessage();
		row6.code = lcm.getCode();
		
		row6.moment = java.util.Calendar.getInstance().getTime();
	
    	row6.pid = pid;
		row6.root_pid = rootPid;
		row6.father_pid = fatherPid;
	
    	row6.project = projectName;
    	row6.job = jobName;
    	row6.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Main_Log = null;


// # Output table : 'Main_Log'
Main_Log_tmp.moment = row6.moment ;
Main_Log_tmp.pid = row6.pid ;
Main_Log_tmp.job = row6.job ;
Main_Log_tmp.type = row6.type ;
Main_Log_tmp.origin = row6.origin ;
Main_Log_tmp.message = row6.message ;
Main_Log = Main_Log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Main_Log"
if(Main_Log != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Log"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(Main_Log.moment != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(Main_Log.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.pid != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.job != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.type != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.origin != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(Main_Log.message != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(Main_Log.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "Main_Log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Log");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_Flow_MeterStruct implements routines.system.IPersistableRow<Main_Flow_MeterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_Flow_MeterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();
Main_Flow_MeterStruct Main_Flow_Meter = new Main_Flow_MeterStruct();





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Flow_Meter");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("tLogRow_3");
        util_tLogRow_3.addRow(new String[]{"moment","pid","job","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_Flow_MeterStruct Main_Flow_Meter_tmp = new Main_Flow_MeterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row3_0.pid = pid;
		row3_0.root_pid = rootPid;
		row3_0.father_pid = fatherPid;	
        row3_0.project = projectName;
        row3_0.job = jobName;
        row3_0.context = contextStr;
		row3_0.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row3_0.moment = mcm.getMoment();
		row3_0.job_version = mcm.getJobVersion();
		row3_0.job_repository_id = mcm.getJobId();
		row3_0.system_pid = mcm.getSystemPid();
		row3_0.label = mcm.getLabel();
		row3_0.count = mcm.getCount();
		row3_0.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row3_0.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Main_Flow_Meter = null;


// # Output table : 'Main_Flow_Meter'
Main_Flow_Meter_tmp.moment = row3_0.moment ;
Main_Flow_Meter_tmp.pid = row3_0.pid ;
Main_Flow_Meter_tmp.job = row3_0.job ;
Main_Flow_Meter_tmp.origin = row3_0.origin ;
Main_Flow_Meter_tmp.label = row3_0.label ;
Main_Flow_Meter_tmp.count = row3_0.count ;
Main_Flow_Meter_tmp.reference = row3_0.reference ;
Main_Flow_Meter_tmp.thresholds = row3_0.thresholds ;
Main_Flow_Meter = Main_Flow_Meter_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Main_Flow_Meter"
if(Main_Flow_Meter != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Flow_Meter"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[8];
   				
	    		if(Main_Flow_Meter.moment != null) { //              
                 row_tLogRow_3[0]=    						
								FormatterUtils.format_Date(Main_Flow_Meter.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.pid != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(Main_Flow_Meter.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.job != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(Main_Flow_Meter.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.origin != null) { //              
                 row_tLogRow_3[3]=    						    
				                String.valueOf(Main_Flow_Meter.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.label != null) { //              
                 row_tLogRow_3[4]=    						    
				                String.valueOf(Main_Flow_Meter.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.count != null) { //              
                 row_tLogRow_3[5]=    						    
				                String.valueOf(Main_Flow_Meter.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.reference != null) { //              
                 row_tLogRow_3[6]=    						    
				                String.valueOf(Main_Flow_Meter.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.thresholds != null) { //              
                 row_tLogRow_3[7]=    						    
				                String.valueOf(Main_Flow_Meter.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "Main_Flow_Meter"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Flow_Meter");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_StatStruct implements routines.system.IPersistableRow<Main_StatStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_StatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
Main_StatStruct Main_Stat = new Main_StatStruct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Stat");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[7];

        public void addRow(String[] row) {

            for (int i = 0; i < 7; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 6 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 6 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[6] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"moment","pid","job","origin","message_type","message","duration",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_StatStruct Main_Stat_tmp = new Main_StatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
		row5.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row5.message = scm.getMessage();
		row5.duration = scm.getDuration();
		row5.moment = scm.getMoment();
		row5.message_type = scm.getMessageType();
		row5.job_version = scm.getJobVersion();
		row5.job_repository_id = scm.getJobId();
		row5.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Main_Stat = null;


// # Output table : 'Main_Stat'
Main_Stat_tmp.moment = row5.moment;
Main_Stat_tmp.pid = row5.pid;
Main_Stat_tmp.job = row5.job;
Main_Stat_tmp.origin = row5.origin;
Main_Stat_tmp.message_type = row5.message_type;
Main_Stat_tmp.message = row5.message;
Main_Stat_tmp.duration = row5.duration ;
Main_Stat = Main_Stat_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Main_Stat"
if(Main_Stat != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Stat"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[7];
   				
	    		if(Main_Stat.moment != null) { //              
                 row_tLogRow_1[0]=    						
								FormatterUtils.format_Date(Main_Stat.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.pid != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(Main_Stat.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.job != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(Main_Stat.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.origin != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(Main_Stat.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message_type != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(Main_Stat.message_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(Main_Stat.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.duration != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(Main_Stat.duration)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "Main_Stat"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Stat");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";

	
		int tos_count_tJava_4 = 0;
		


System.out.println("Starting the Updating Data from IMHBV4PF_4 to PURCHASE_ORDER_DETAIL...........");
 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());




/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";

	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class PURCHASE_ORDER_DETAIL_UPDATE_4Struct implements routines.system.IPersistableRow<PURCHASE_ORDER_DETAIL_UPDATE_4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public BigDecimal SMS_MAJ_LINE_NO;

				public BigDecimal getSMS_MAJ_LINE_NO () {
					return this.SMS_MAJ_LINE_NO;
				}
				
			    public BigDecimal SMS_MIN_LINE_NO;

				public BigDecimal getSMS_MIN_LINE_NO () {
					return this.SMS_MIN_LINE_NO;
				}
				
			    public String VENDOR_CLASSIFICATION;

				public String getVENDOR_CLASSIFICATION () {
					return this.VENDOR_CLASSIFICATION;
				}
				
			    public BigDecimal SHIPPING_POINT_SHIP_FROM;

				public BigDecimal getSHIPPING_POINT_SHIP_FROM () {
					return this.SHIPPING_POINT_SHIP_FROM;
				}
				
			    public BigDecimal BUYING_GROUP;

				public BigDecimal getBUYING_GROUP () {
					return this.BUYING_GROUP;
				}
				
			    public String CUST_PREF_VENDOR;

				public String getCUST_PREF_VENDOR () {
					return this.CUST_PREF_VENDOR;
				}
				
			    public String SOURCE_VENDOR;

				public String getSOURCE_VENDOR () {
					return this.SOURCE_VENDOR;
				}
				
			    public String VENDOR_TERMS;

				public String getVENDOR_TERMS () {
					return this.VENDOR_TERMS;
				}
				
			    public String PO_PRIMARY_STATUS;

				public String getPO_PRIMARY_STATUS () {
					return this.PO_PRIMARY_STATUS;
				}
				
			    public String PO_SECONDARY_STATUS;

				public String getPO_SECONDARY_STATUS () {
					return this.PO_SECONDARY_STATUS;
				}
				
			    public String PO_TYPE;

				public String getPO_TYPE () {
					return this.PO_TYPE;
				}
				
			    public String WHSE_CHANGE_CODE;

				public String getWHSE_CHANGE_CODE () {
					return this.WHSE_CHANGE_CODE;
				}
				
			    public String CONF_STATUS;

				public String getCONF_STATUS () {
					return this.CONF_STATUS;
				}
				
			    public String PO_VALID_PRICING_FLAG;

				public String getPO_VALID_PRICING_FLAG () {
					return this.PO_VALID_PRICING_FLAG;
				}
				
			    public String PO_VALID_PRICING_APPROVAL;

				public String getPO_VALID_PRICING_APPROVAL () {
					return this.PO_VALID_PRICING_APPROVAL;
				}
				
			    public String PO_CHANGED_FLAG;

				public String getPO_CHANGED_FLAG () {
					return this.PO_CHANGED_FLAG;
				}
				
			    public String ALLOC_SCHEDULED_RECEIPT_FLAG;

				public String getALLOC_SCHEDULED_RECEIPT_FLAG () {
					return this.ALLOC_SCHEDULED_RECEIPT_FLAG;
				}
				
			    public String PRICE_OVERRIDE_FLAG;

				public String getPRICE_OVERRIDE_FLAG () {
					return this.PRICE_OVERRIDE_FLAG;
				}
				
			    public String MARKED_BY_MERCHANDISER_FLAG;

				public String getMARKED_BY_MERCHANDISER_FLAG () {
					return this.MARKED_BY_MERCHANDISER_FLAG;
				}
				
			    public String FAILED_SCORECARD_FLAG;

				public String getFAILED_SCORECARD_FLAG () {
					return this.FAILED_SCORECARD_FLAG;
				}
				
			    public String MANUALLY_ENTERED_LINE_FLAG;

				public String getMANUALLY_ENTERED_LINE_FLAG () {
					return this.MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public java.util.Date CALENDAR_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ANTICIPATED_RECEIPT () {
					return this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;

				public java.util.Date getCALENDAR_DATE_SCHEDULED_RECEIPT_DATE () {
					return this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
				}
				
			    public java.util.Date BUSINESS_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ANTICIPATED_RECEIPT () {
					return this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date AVAIL_TIMESTAMP;

				public java.util.Date getAVAIL_TIMESTAMP () {
					return this.AVAIL_TIMESTAMP;
				}
				
			    public java.util.Date BUSINESS_ORDER_DATE;

				public java.util.Date getBUSINESS_ORDER_DATE () {
					return this.BUSINESS_ORDER_DATE;
				}
				
			    public BigDecimal SUGGESTED_ORDER_QTY;

				public BigDecimal getSUGGESTED_ORDER_QTY () {
					return this.SUGGESTED_ORDER_QTY;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public BigDecimal CUST_ORDER_NO;

				public BigDecimal getCUST_ORDER_NO () {
					return this.CUST_ORDER_NO;
				}
				
			    public BigDecimal CUST_ORDER_LINE_NO;

				public BigDecimal getCUST_ORDER_LINE_NO () {
					return this.CUST_ORDER_LINE_NO;
				}
				
			    public BigDecimal ORIG_ORDER_QTY;

				public BigDecimal getORIG_ORDER_QTY () {
					return this.ORIG_ORDER_QTY;
				}
				
			    public BigDecimal ORIG_FOB_PER_ITEM;

				public BigDecimal getORIG_FOB_PER_ITEM () {
					return this.ORIG_FOB_PER_ITEM;
				}
				
			    public BigDecimal ORIG_FREIGHT_PER_ITEM;

				public BigDecimal getORIG_FREIGHT_PER_ITEM () {
					return this.ORIG_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal ORIG_AP_PER_ITEM;

				public BigDecimal getORIG_AP_PER_ITEM () {
					return this.ORIG_AP_PER_ITEM;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getORIG_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getORIG_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getORIG_FREIGHT_RATE_OVERRIDE () {
					return this.ORIG_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String ORIG_FREIGHT_TYPE_OVERRIDE;

				public String getORIG_FREIGHT_TYPE_OVERRIDE () {
					return this.ORIG_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getORIG_PICKUP_ALLOW_PER_ITEM () {
					return this.ORIG_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal ORIG_OFF_INV_ALLOW;

				public BigDecimal getORIG_OFF_INV_ALLOW () {
					return this.ORIG_OFF_INV_ALLOW;
				}
				
			    public String ORIG_UOM;

				public String getORIG_UOM () {
					return this.ORIG_UOM;
				}
				
			    public BigDecimal ORIG_ALT_DELV_PRICE;

				public BigDecimal getORIG_ALT_DELV_PRICE () {
					return this.ORIG_ALT_DELV_PRICE;
				}
				
			    public BigDecimal ORIG_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_MERCH_ALLOW_CHARGE () {
					return this.ORIG_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal ORIG_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getORIG_FREIGHT_ALLOW_CHARGE () {
					return this.ORIG_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal ALLOC_QTY;

				public BigDecimal getALLOC_QTY () {
					return this.ALLOC_QTY;
				}
				
			    public BigDecimal ALLOC_QTY_SPLITS;

				public BigDecimal getALLOC_QTY_SPLITS () {
					return this.ALLOC_QTY_SPLITS;
				}
				
			    public BigDecimal INV_UNIT_PRICE;

				public BigDecimal getINV_UNIT_PRICE () {
					return this.INV_UNIT_PRICE;
				}
				
			    public String FREE_GOODS_FLAG;

				public String getFREE_GOODS_FLAG () {
					return this.FREE_GOODS_FLAG;
				}
				
			    public String VENDOR_PRICE_LIST_UOM;

				public String getVENDOR_PRICE_LIST_UOM () {
					return this.VENDOR_PRICE_LIST_UOM;
				}
				
			    public BigDecimal CONFIRMED_ORDER_QTY;

				public BigDecimal getCONFIRMED_ORDER_QTY () {
					return this.CONFIRMED_ORDER_QTY;
				}
				
			    public BigDecimal CONFIRMED_FOB_PER_ITEM;

				public BigDecimal getCONFIRMED_FOB_PER_ITEM () {
					return this.CONFIRMED_FOB_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_PER_ITEM;

				public BigDecimal getCONFIRMED_FREIGHT_PER_ITEM () {
					return this.CONFIRMED_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_AP_PER_ITEM;

				public BigDecimal getCONFIRMED_AP_PER_ITEM () {
					return this.CONFIRMED_AP_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getCONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_FREIGHT_RATE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_FREIGHT_TYPE_OVERRIDE;

				public String getCONFIRMED_FREIGHT_TYPE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_PER_ITEM () {
					return this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_OFF_INV_ALLOW;

				public BigDecimal getCONFIRMED_OFF_INV_ALLOW () {
					return this.CONFIRMED_OFF_INV_ALLOW;
				}
				
			    public String CONFIRMED_UOM;

				public String getCONFIRMED_UOM () {
					return this.CONFIRMED_UOM;
				}
				
			    public BigDecimal CONFIRMED_ALT_DELV_PRICE;

				public BigDecimal getCONFIRMED_ALT_DELV_PRICE () {
					return this.CONFIRMED_ALT_DELV_PRICE;
				}
				
			    public BigDecimal CONF_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_MERCH_ALLOW_CHARGE () {
					return this.CONF_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONF_DIST_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_FREIGHT_ALLOW_CHARGE () {
					return this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_MRPT;

				public BigDecimal getCONFIRMED_MRPT () {
					return this.CONFIRMED_MRPT;
				}
				
			    public String CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;

				public String getCONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG () {
					return this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public String CONFIRMED_PRICE_OVERRIDE_FLAG;

				public String getCONFIRMED_PRICE_OVERRIDE_FLAG () {
					return this.CONFIRMED_PRICE_OVERRIDE_FLAG;
				}
				
			    public BigDecimal CARRIER_SHORT_QTY;

				public BigDecimal getCARRIER_SHORT_QTY () {
					return this.CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal RECVD_DAMAGED_ACCEPTED_QTY;

				public BigDecimal getRECVD_DAMAGED_ACCEPTED_QTY () {
					return this.RECVD_DAMAGED_ACCEPTED_QTY;
				}
				
			    public BigDecimal RECVD_QTY;

				public BigDecimal getRECVD_QTY () {
					return this.RECVD_QTY;
				}
				
			    public BigDecimal VENDOR_SHORT_QTY;

				public BigDecimal getVENDOR_SHORT_QTY () {
					return this.VENDOR_SHORT_QTY;
				}
				
			    public String CARRIER_SHORT_REASON_CODE;

				public String getCARRIER_SHORT_REASON_CODE () {
					return this.CARRIER_SHORT_REASON_CODE;
				}
				
			    public String VENDOR_SHORT_REASON_CODE;

				public String getVENDOR_SHORT_REASON_CODE () {
					return this.VENDOR_SHORT_REASON_CODE;
				}
				
			    public BigDecimal RECVD_WGT;

				public BigDecimal getRECVD_WGT () {
					return this.RECVD_WGT;
				}
				
			    public BigDecimal DAMAGED_RECVD_WGT;

				public BigDecimal getDAMAGED_RECVD_WGT () {
					return this.DAMAGED_RECVD_WGT;
				}
				
			    public String REVISED_PROFORMA_FLAG;

				public String getREVISED_PROFORMA_FLAG () {
					return this.REVISED_PROFORMA_FLAG;
				}
				
			    public String FREIGHT_PROFORMA_STATUS;

				public String getFREIGHT_PROFORMA_STATUS () {
					return this.FREIGHT_PROFORMA_STATUS;
				}
				
			    public String MERCH_PROFORMA_STATUS;

				public String getMERCH_PROFORMA_STATUS () {
					return this.MERCH_PROFORMA_STATUS;
				}
				
			    public BigDecimal MERCH_EXT_AMT_TOBE_PAID;

				public BigDecimal getMERCH_EXT_AMT_TOBE_PAID () {
					return this.MERCH_EXT_AMT_TOBE_PAID;
				}
				
			    public java.util.Date MERCH_INV_DATE;

				public java.util.Date getMERCH_INV_DATE () {
					return this.MERCH_INV_DATE;
				}
				
			    public String MERCH_INV_NO;

				public String getMERCH_INV_NO () {
					return this.MERCH_INV_NO;
				}
				
			    public String MERCH_PRICE_DIFF_STATUS;

				public String getMERCH_PRICE_DIFF_STATUS () {
					return this.MERCH_PRICE_DIFF_STATUS;
				}
				
			    public String MERCH_QTY_DIFF_STATUS;

				public String getMERCH_QTY_DIFF_STATUS () {
					return this.MERCH_QTY_DIFF_STATUS;
				}
				
			    public BigDecimal MERCH_QTY_TO_BE_PAID;

				public BigDecimal getMERCH_QTY_TO_BE_PAID () {
					return this.MERCH_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_WGT_TO_BE_PAID;

				public BigDecimal getMERCH_WGT_TO_BE_PAID () {
					return this.MERCH_WGT_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_CASH_DISC;

				public BigDecimal getMERCH_CASH_DISC () {
					return this.MERCH_CASH_DISC;
				}
				
			    public String FREIGHT_INV_NO;

				public String getFREIGHT_INV_NO () {
					return this.FREIGHT_INV_NO;
				}
				
			    public BigDecimal FREIGHT_EXT_AMT_TO_BE_PAID;

				public BigDecimal getFREIGHT_EXT_AMT_TO_BE_PAID () {
					return this.FREIGHT_EXT_AMT_TO_BE_PAID;
				}
				
			    public java.util.Date FREIGHT_INV_DATE;

				public java.util.Date getFREIGHT_INV_DATE () {
					return this.FREIGHT_INV_DATE;
				}
				
			    public BigDecimal FREIGHT_CHARGE_TO_BE_PAID;

				public BigDecimal getFREIGHT_CHARGE_TO_BE_PAID () {
					return this.FREIGHT_CHARGE_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CASH_DISC;

				public BigDecimal getFREIGHT_CASH_DISC () {
					return this.FREIGHT_CASH_DISC;
				}
				
			    public BigDecimal FREIGHT_QTY_TO_BE_PAID;

				public BigDecimal getFREIGHT_QTY_TO_BE_PAID () {
					return this.FREIGHT_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CLAIM_QTY;

				public BigDecimal getFREIGHT_CLAIM_QTY () {
					return this.FREIGHT_CLAIM_QTY;
				}
				
			    public String LOAD_CTRL_NO;

				public String getLOAD_CTRL_NO () {
					return this.LOAD_CTRL_NO;
				}
				
			    public String SPLIT_PO_FLAG;

				public String getSPLIT_PO_FLAG () {
					return this.SPLIT_PO_FLAG;
				}
				
			    public String TRUE_VENDOR;

				public String getTRUE_VENDOR () {
					return this.TRUE_VENDOR;
				}
				
			    public String MANIFEST_HIST_MFG_NO;

				public String getMANIFEST_HIST_MFG_NO () {
					return this.MANIFEST_HIST_MFG_NO;
				}
				
			    public String NOTE1;

				public String getNOTE1 () {
					return this.NOTE1;
				}
				
			    public BigDecimal TRUE_VENDOR_SHIP_FROM;

				public BigDecimal getTRUE_VENDOR_SHIP_FROM () {
					return this.TRUE_VENDOR_SHIP_FROM;
				}
				
			    public BigDecimal LAST_QTY_SENT_TO_DPR;

				public BigDecimal getLAST_QTY_SENT_TO_DPR () {
					return this.LAST_QTY_SENT_TO_DPR;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String V4PF_SVOP;

				public String getV4PF_SVOP () {
					return this.V4PF_SVOP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public BigDecimal ORIG_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getORIG_UNLOAD_CHARGE_PER_ITEM () {
					return this.ORIG_UNLOAD_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal CONF_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getCONF_UNLOAD_CHARGE_PER_ITEM () {
					return this.CONF_UNLOAD_CHARGE_PER_ITEM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.SMS_MAJ_LINE_NO == null) ? 0 : this.SMS_MAJ_LINE_NO.hashCode());
					
						result = prime * result + ((this.SMS_MIN_LINE_NO == null) ? 0 : this.SMS_MIN_LINE_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PURCHASE_ORDER_DETAIL_UPDATE_4Struct other = (PURCHASE_ORDER_DETAIL_UPDATE_4Struct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.SMS_MAJ_LINE_NO == null) {
							if (other.SMS_MAJ_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MAJ_LINE_NO.equals(other.SMS_MAJ_LINE_NO))
						
							return false;
					
						if (this.SMS_MIN_LINE_NO == null) {
							if (other.SMS_MIN_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MIN_LINE_NO.equals(other.SMS_MIN_LINE_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PURCHASE_ORDER_DETAIL_UPDATE_4Struct other) {

		other.SITE_ID = this.SITE_ID;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            other.VENDOR_CLASSIFICATION = this.VENDOR_CLASSIFICATION;
	            other.SHIPPING_POINT_SHIP_FROM = this.SHIPPING_POINT_SHIP_FROM;
	            other.BUYING_GROUP = this.BUYING_GROUP;
	            other.CUST_PREF_VENDOR = this.CUST_PREF_VENDOR;
	            other.SOURCE_VENDOR = this.SOURCE_VENDOR;
	            other.VENDOR_TERMS = this.VENDOR_TERMS;
	            other.PO_PRIMARY_STATUS = this.PO_PRIMARY_STATUS;
	            other.PO_SECONDARY_STATUS = this.PO_SECONDARY_STATUS;
	            other.PO_TYPE = this.PO_TYPE;
	            other.WHSE_CHANGE_CODE = this.WHSE_CHANGE_CODE;
	            other.CONF_STATUS = this.CONF_STATUS;
	            other.PO_VALID_PRICING_FLAG = this.PO_VALID_PRICING_FLAG;
	            other.PO_VALID_PRICING_APPROVAL = this.PO_VALID_PRICING_APPROVAL;
	            other.PO_CHANGED_FLAG = this.PO_CHANGED_FLAG;
	            other.ALLOC_SCHEDULED_RECEIPT_FLAG = this.ALLOC_SCHEDULED_RECEIPT_FLAG;
	            other.PRICE_OVERRIDE_FLAG = this.PRICE_OVERRIDE_FLAG;
	            other.MARKED_BY_MERCHANDISER_FLAG = this.MARKED_BY_MERCHANDISER_FLAG;
	            other.FAILED_SCORECARD_FLAG = this.FAILED_SCORECARD_FLAG;
	            other.MANUALLY_ENTERED_LINE_FLAG = this.MANUALLY_ENTERED_LINE_FLAG;
	            other.CALENDAR_DATE_ANTICIPATED_RECEIPT = this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
	            other.BUSINESS_DATE_ANTICIPATED_RECEIPT = this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
	            other.AVAIL_TIMESTAMP = this.AVAIL_TIMESTAMP;
	            other.BUSINESS_ORDER_DATE = this.BUSINESS_ORDER_DATE;
	            other.SUGGESTED_ORDER_QTY = this.SUGGESTED_ORDER_QTY;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.CUST_ORDER_NO = this.CUST_ORDER_NO;
	            other.CUST_ORDER_LINE_NO = this.CUST_ORDER_LINE_NO;
	            other.ORIG_ORDER_QTY = this.ORIG_ORDER_QTY;
	            other.ORIG_FOB_PER_ITEM = this.ORIG_FOB_PER_ITEM;
	            other.ORIG_FREIGHT_PER_ITEM = this.ORIG_FREIGHT_PER_ITEM;
	            other.ORIG_AP_PER_ITEM = this.ORIG_AP_PER_ITEM;
	            other.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.ORIG_FREIGHT_RATE_OVERRIDE = this.ORIG_FREIGHT_RATE_OVERRIDE;
	            other.ORIG_FREIGHT_TYPE_OVERRIDE = this.ORIG_FREIGHT_TYPE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_PER_ITEM = this.ORIG_PICKUP_ALLOW_PER_ITEM;
	            other.ORIG_OFF_INV_ALLOW = this.ORIG_OFF_INV_ALLOW;
	            other.ORIG_UOM = this.ORIG_UOM;
	            other.ORIG_ALT_DELV_PRICE = this.ORIG_ALT_DELV_PRICE;
	            other.ORIG_MERCH_ALLOW_CHARGE = this.ORIG_MERCH_ALLOW_CHARGE;
	            other.ORIG_FREIGHT_ALLOW_CHARGE = this.ORIG_FREIGHT_ALLOW_CHARGE;
	            other.ALLOC_QTY = this.ALLOC_QTY;
	            other.ALLOC_QTY_SPLITS = this.ALLOC_QTY_SPLITS;
	            other.INV_UNIT_PRICE = this.INV_UNIT_PRICE;
	            other.FREE_GOODS_FLAG = this.FREE_GOODS_FLAG;
	            other.VENDOR_PRICE_LIST_UOM = this.VENDOR_PRICE_LIST_UOM;
	            other.CONFIRMED_ORDER_QTY = this.CONFIRMED_ORDER_QTY;
	            other.CONFIRMED_FOB_PER_ITEM = this.CONFIRMED_FOB_PER_ITEM;
	            other.CONFIRMED_FREIGHT_PER_ITEM = this.CONFIRMED_FREIGHT_PER_ITEM;
	            other.CONFIRMED_AP_PER_ITEM = this.CONFIRMED_AP_PER_ITEM;
	            other.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_RATE_OVERRIDE = this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_TYPE_OVERRIDE = this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_PER_ITEM = this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
	            other.CONFIRMED_OFF_INV_ALLOW = this.CONFIRMED_OFF_INV_ALLOW;
	            other.CONFIRMED_UOM = this.CONFIRMED_UOM;
	            other.CONFIRMED_ALT_DELV_PRICE = this.CONFIRMED_ALT_DELV_PRICE;
	            other.CONF_DIST_MERCH_ALLOW_CHARGE = this.CONF_DIST_MERCH_ALLOW_CHARGE;
	            other.CONF_DIST_FREIGHT_ALLOW_CHARGE = this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_MRPT = this.CONFIRMED_MRPT;
	            other.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
	            other.CONFIRMED_PRICE_OVERRIDE_FLAG = this.CONFIRMED_PRICE_OVERRIDE_FLAG;
	            other.CARRIER_SHORT_QTY = this.CARRIER_SHORT_QTY;
	            other.RECVD_DAMAGED_ACCEPTED_QTY = this.RECVD_DAMAGED_ACCEPTED_QTY;
	            other.RECVD_QTY = this.RECVD_QTY;
	            other.VENDOR_SHORT_QTY = this.VENDOR_SHORT_QTY;
	            other.CARRIER_SHORT_REASON_CODE = this.CARRIER_SHORT_REASON_CODE;
	            other.VENDOR_SHORT_REASON_CODE = this.VENDOR_SHORT_REASON_CODE;
	            other.RECVD_WGT = this.RECVD_WGT;
	            other.DAMAGED_RECVD_WGT = this.DAMAGED_RECVD_WGT;
	            other.REVISED_PROFORMA_FLAG = this.REVISED_PROFORMA_FLAG;
	            other.FREIGHT_PROFORMA_STATUS = this.FREIGHT_PROFORMA_STATUS;
	            other.MERCH_PROFORMA_STATUS = this.MERCH_PROFORMA_STATUS;
	            other.MERCH_EXT_AMT_TOBE_PAID = this.MERCH_EXT_AMT_TOBE_PAID;
	            other.MERCH_INV_DATE = this.MERCH_INV_DATE;
	            other.MERCH_INV_NO = this.MERCH_INV_NO;
	            other.MERCH_PRICE_DIFF_STATUS = this.MERCH_PRICE_DIFF_STATUS;
	            other.MERCH_QTY_DIFF_STATUS = this.MERCH_QTY_DIFF_STATUS;
	            other.MERCH_QTY_TO_BE_PAID = this.MERCH_QTY_TO_BE_PAID;
	            other.MERCH_WGT_TO_BE_PAID = this.MERCH_WGT_TO_BE_PAID;
	            other.MERCH_CASH_DISC = this.MERCH_CASH_DISC;
	            other.FREIGHT_INV_NO = this.FREIGHT_INV_NO;
	            other.FREIGHT_EXT_AMT_TO_BE_PAID = this.FREIGHT_EXT_AMT_TO_BE_PAID;
	            other.FREIGHT_INV_DATE = this.FREIGHT_INV_DATE;
	            other.FREIGHT_CHARGE_TO_BE_PAID = this.FREIGHT_CHARGE_TO_BE_PAID;
	            other.FREIGHT_CASH_DISC = this.FREIGHT_CASH_DISC;
	            other.FREIGHT_QTY_TO_BE_PAID = this.FREIGHT_QTY_TO_BE_PAID;
	            other.FREIGHT_CLAIM_QTY = this.FREIGHT_CLAIM_QTY;
	            other.LOAD_CTRL_NO = this.LOAD_CTRL_NO;
	            other.SPLIT_PO_FLAG = this.SPLIT_PO_FLAG;
	            other.TRUE_VENDOR = this.TRUE_VENDOR;
	            other.MANIFEST_HIST_MFG_NO = this.MANIFEST_HIST_MFG_NO;
	            other.NOTE1 = this.NOTE1;
	            other.TRUE_VENDOR_SHIP_FROM = this.TRUE_VENDOR_SHIP_FROM;
	            other.LAST_QTY_SENT_TO_DPR = this.LAST_QTY_SENT_TO_DPR;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.V4PF_SVOP = this.V4PF_SVOP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.ORIG_UNLOAD_CHARGE_PER_ITEM = this.ORIG_UNLOAD_CHARGE_PER_ITEM;
	            other.CONF_UNLOAD_CHARGE_PER_ITEM = this.CONF_UNLOAD_CHARGE_PER_ITEM;
	            
	}

	public void copyKeysDataTo(PURCHASE_ORDER_DETAIL_UPDATE_4Struct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            	other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",SMS_MAJ_LINE_NO="+String.valueOf(SMS_MAJ_LINE_NO));
		sb.append(",SMS_MIN_LINE_NO="+String.valueOf(SMS_MIN_LINE_NO));
		sb.append(",VENDOR_CLASSIFICATION="+VENDOR_CLASSIFICATION);
		sb.append(",SHIPPING_POINT_SHIP_FROM="+String.valueOf(SHIPPING_POINT_SHIP_FROM));
		sb.append(",BUYING_GROUP="+String.valueOf(BUYING_GROUP));
		sb.append(",CUST_PREF_VENDOR="+CUST_PREF_VENDOR);
		sb.append(",SOURCE_VENDOR="+SOURCE_VENDOR);
		sb.append(",VENDOR_TERMS="+VENDOR_TERMS);
		sb.append(",PO_PRIMARY_STATUS="+PO_PRIMARY_STATUS);
		sb.append(",PO_SECONDARY_STATUS="+PO_SECONDARY_STATUS);
		sb.append(",PO_TYPE="+PO_TYPE);
		sb.append(",WHSE_CHANGE_CODE="+WHSE_CHANGE_CODE);
		sb.append(",CONF_STATUS="+CONF_STATUS);
		sb.append(",PO_VALID_PRICING_FLAG="+PO_VALID_PRICING_FLAG);
		sb.append(",PO_VALID_PRICING_APPROVAL="+PO_VALID_PRICING_APPROVAL);
		sb.append(",PO_CHANGED_FLAG="+PO_CHANGED_FLAG);
		sb.append(",ALLOC_SCHEDULED_RECEIPT_FLAG="+ALLOC_SCHEDULED_RECEIPT_FLAG);
		sb.append(",PRICE_OVERRIDE_FLAG="+PRICE_OVERRIDE_FLAG);
		sb.append(",MARKED_BY_MERCHANDISER_FLAG="+MARKED_BY_MERCHANDISER_FLAG);
		sb.append(",FAILED_SCORECARD_FLAG="+FAILED_SCORECARD_FLAG);
		sb.append(",MANUALLY_ENTERED_LINE_FLAG="+MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CALENDAR_DATE_ANTICIPATED_RECEIPT="+String.valueOf(CALENDAR_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_DATE_SCHEDULED_RECEIPT_DATE="+String.valueOf(CALENDAR_DATE_SCHEDULED_RECEIPT_DATE));
		sb.append(",BUSINESS_DATE_ANTICIPATED_RECEIPT="+String.valueOf(BUSINESS_DATE_ANTICIPATED_RECEIPT));
		sb.append(",AVAIL_TIMESTAMP="+String.valueOf(AVAIL_TIMESTAMP));
		sb.append(",BUSINESS_ORDER_DATE="+String.valueOf(BUSINESS_ORDER_DATE));
		sb.append(",SUGGESTED_ORDER_QTY="+String.valueOf(SUGGESTED_ORDER_QTY));
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",CUST_ORDER_NO="+String.valueOf(CUST_ORDER_NO));
		sb.append(",CUST_ORDER_LINE_NO="+String.valueOf(CUST_ORDER_LINE_NO));
		sb.append(",ORIG_ORDER_QTY="+String.valueOf(ORIG_ORDER_QTY));
		sb.append(",ORIG_FOB_PER_ITEM="+String.valueOf(ORIG_FOB_PER_ITEM));
		sb.append(",ORIG_FREIGHT_PER_ITEM="+String.valueOf(ORIG_FREIGHT_PER_ITEM));
		sb.append(",ORIG_AP_PER_ITEM="+String.valueOf(ORIG_AP_PER_ITEM));
		sb.append(",ORIG_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(ORIG_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",ORIG_PICKUP_ALLOW_TYPE_OVERRIDE="+ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",ORIG_FREIGHT_RATE_OVERRIDE="+String.valueOf(ORIG_FREIGHT_RATE_OVERRIDE));
		sb.append(",ORIG_FREIGHT_TYPE_OVERRIDE="+ORIG_FREIGHT_TYPE_OVERRIDE);
		sb.append(",ORIG_PICKUP_ALLOW_PER_ITEM="+String.valueOf(ORIG_PICKUP_ALLOW_PER_ITEM));
		sb.append(",ORIG_OFF_INV_ALLOW="+String.valueOf(ORIG_OFF_INV_ALLOW));
		sb.append(",ORIG_UOM="+ORIG_UOM);
		sb.append(",ORIG_ALT_DELV_PRICE="+String.valueOf(ORIG_ALT_DELV_PRICE));
		sb.append(",ORIG_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_MERCH_ALLOW_CHARGE));
		sb.append(",ORIG_FREIGHT_ALLOW_CHARGE="+String.valueOf(ORIG_FREIGHT_ALLOW_CHARGE));
		sb.append(",ALLOC_QTY="+String.valueOf(ALLOC_QTY));
		sb.append(",ALLOC_QTY_SPLITS="+String.valueOf(ALLOC_QTY_SPLITS));
		sb.append(",INV_UNIT_PRICE="+String.valueOf(INV_UNIT_PRICE));
		sb.append(",FREE_GOODS_FLAG="+FREE_GOODS_FLAG);
		sb.append(",VENDOR_PRICE_LIST_UOM="+VENDOR_PRICE_LIST_UOM);
		sb.append(",CONFIRMED_ORDER_QTY="+String.valueOf(CONFIRMED_ORDER_QTY));
		sb.append(",CONFIRMED_FOB_PER_ITEM="+String.valueOf(CONFIRMED_FOB_PER_ITEM));
		sb.append(",CONFIRMED_FREIGHT_PER_ITEM="+String.valueOf(CONFIRMED_FREIGHT_PER_ITEM));
		sb.append(",CONFIRMED_AP_PER_ITEM="+String.valueOf(CONFIRMED_AP_PER_ITEM));
		sb.append(",CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE="+CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_FREIGHT_RATE_OVERRIDE="+String.valueOf(CONFIRMED_FREIGHT_RATE_OVERRIDE));
		sb.append(",CONFIRMED_FREIGHT_TYPE_OVERRIDE="+CONFIRMED_FREIGHT_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_PER_ITEM="+String.valueOf(CONFIRMED_PICKUP_ALLOW_PER_ITEM));
		sb.append(",CONFIRMED_OFF_INV_ALLOW="+String.valueOf(CONFIRMED_OFF_INV_ALLOW));
		sb.append(",CONFIRMED_UOM="+CONFIRMED_UOM);
		sb.append(",CONFIRMED_ALT_DELV_PRICE="+String.valueOf(CONFIRMED_ALT_DELV_PRICE));
		sb.append(",CONF_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(CONF_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",CONF_DIST_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONF_DIST_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_MRPT="+String.valueOf(CONFIRMED_MRPT));
		sb.append(",CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG="+CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CONFIRMED_PRICE_OVERRIDE_FLAG="+CONFIRMED_PRICE_OVERRIDE_FLAG);
		sb.append(",CARRIER_SHORT_QTY="+String.valueOf(CARRIER_SHORT_QTY));
		sb.append(",RECVD_DAMAGED_ACCEPTED_QTY="+String.valueOf(RECVD_DAMAGED_ACCEPTED_QTY));
		sb.append(",RECVD_QTY="+String.valueOf(RECVD_QTY));
		sb.append(",VENDOR_SHORT_QTY="+String.valueOf(VENDOR_SHORT_QTY));
		sb.append(",CARRIER_SHORT_REASON_CODE="+CARRIER_SHORT_REASON_CODE);
		sb.append(",VENDOR_SHORT_REASON_CODE="+VENDOR_SHORT_REASON_CODE);
		sb.append(",RECVD_WGT="+String.valueOf(RECVD_WGT));
		sb.append(",DAMAGED_RECVD_WGT="+String.valueOf(DAMAGED_RECVD_WGT));
		sb.append(",REVISED_PROFORMA_FLAG="+REVISED_PROFORMA_FLAG);
		sb.append(",FREIGHT_PROFORMA_STATUS="+FREIGHT_PROFORMA_STATUS);
		sb.append(",MERCH_PROFORMA_STATUS="+MERCH_PROFORMA_STATUS);
		sb.append(",MERCH_EXT_AMT_TOBE_PAID="+String.valueOf(MERCH_EXT_AMT_TOBE_PAID));
		sb.append(",MERCH_INV_DATE="+String.valueOf(MERCH_INV_DATE));
		sb.append(",MERCH_INV_NO="+MERCH_INV_NO);
		sb.append(",MERCH_PRICE_DIFF_STATUS="+MERCH_PRICE_DIFF_STATUS);
		sb.append(",MERCH_QTY_DIFF_STATUS="+MERCH_QTY_DIFF_STATUS);
		sb.append(",MERCH_QTY_TO_BE_PAID="+String.valueOf(MERCH_QTY_TO_BE_PAID));
		sb.append(",MERCH_WGT_TO_BE_PAID="+String.valueOf(MERCH_WGT_TO_BE_PAID));
		sb.append(",MERCH_CASH_DISC="+String.valueOf(MERCH_CASH_DISC));
		sb.append(",FREIGHT_INV_NO="+FREIGHT_INV_NO);
		sb.append(",FREIGHT_EXT_AMT_TO_BE_PAID="+String.valueOf(FREIGHT_EXT_AMT_TO_BE_PAID));
		sb.append(",FREIGHT_INV_DATE="+String.valueOf(FREIGHT_INV_DATE));
		sb.append(",FREIGHT_CHARGE_TO_BE_PAID="+String.valueOf(FREIGHT_CHARGE_TO_BE_PAID));
		sb.append(",FREIGHT_CASH_DISC="+String.valueOf(FREIGHT_CASH_DISC));
		sb.append(",FREIGHT_QTY_TO_BE_PAID="+String.valueOf(FREIGHT_QTY_TO_BE_PAID));
		sb.append(",FREIGHT_CLAIM_QTY="+String.valueOf(FREIGHT_CLAIM_QTY));
		sb.append(",LOAD_CTRL_NO="+LOAD_CTRL_NO);
		sb.append(",SPLIT_PO_FLAG="+SPLIT_PO_FLAG);
		sb.append(",TRUE_VENDOR="+TRUE_VENDOR);
		sb.append(",MANIFEST_HIST_MFG_NO="+MANIFEST_HIST_MFG_NO);
		sb.append(",NOTE1="+NOTE1);
		sb.append(",TRUE_VENDOR_SHIP_FROM="+String.valueOf(TRUE_VENDOR_SHIP_FROM));
		sb.append(",LAST_QTY_SENT_TO_DPR="+String.valueOf(LAST_QTY_SENT_TO_DPR));
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",V4PF_SVOP="+V4PF_SVOP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",ORIG_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(ORIG_UNLOAD_CHARGE_PER_ITEM));
		sb.append(",CONF_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(CONF_UNLOAD_CHARGE_PER_ITEM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PURCHASE_ORDER_DETAIL_UPDATE_4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MAJ_LINE_NO, other.SMS_MAJ_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MIN_LINE_NO, other.SMS_MIN_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public String V4PO;

				public String getV4PO () {
					return this.V4PO;
				}
				
			    public String V4ITEM;

				public String getV4ITEM () {
					return this.V4ITEM;
				}
				
			    public BigDecimal V4ROSQ;

				public BigDecimal getV4ROSQ () {
					return this.V4ROSQ;
				}
				
			    public String V4OWID;

				public String getV4OWID () {
					return this.V4OWID;
				}
				
			    public String V4ARCO;

				public String getV4ARCO () {
					return this.V4ARCO;
				}
				
			    public String V4MNPC;

				public String getV4MNPC () {
					return this.V4MNPC;
				}
				
			    public String V4MUPC;

				public String getV4MUPC () {
					return this.V4MUPC;
				}
				
			    public String V4ITDS;

				public String getV4ITDS () {
					return this.V4ITDS;
				}
				
			    public String V4VCAT;

				public String getV4VCAT () {
					return this.V4VCAT;
				}
				
			    public String V4VNBR;

				public String getV4VNBR () {
					return this.V4VNBR;
				}
				
			    public BigDecimal V4ADCD;

				public BigDecimal getV4ADCD () {
					return this.V4ADCD;
				}
				
			    public BigDecimal V4BYGP;

				public BigDecimal getV4BYGP () {
					return this.V4BYGP;
				}
				
			    public String V4CPVN;

				public String getV4CPVN () {
					return this.V4CPVN;
				}
				
			    public String V4PVND;

				public String getV4PVND () {
					return this.V4PVND;
				}
				
			    public String V4TERM;

				public String getV4TERM () {
					return this.V4TERM;
				}
				
			    public String V4POST;

				public String getV4POST () {
					return this.V4POST;
				}
				
			    public String V4POSS;

				public String getV4POSS () {
					return this.V4POSS;
				}
				
			    public String V4ORTY;

				public String getV4ORTY () {
					return this.V4ORTY;
				}
				
			    public String V4WCCD;

				public String getV4WCCD () {
					return this.V4WCCD;
				}
				
			    public String V4CFST;

				public String getV4CFST () {
					return this.V4CFST;
				}
				
			    public String V4WHSE;

				public String getV4WHSE () {
					return this.V4WHSE;
				}
				
			    public String V4VLPF;

				public String getV4VLPF () {
					return this.V4VLPF;
				}
				
			    public String V4VLPA;

				public String getV4VLPA () {
					return this.V4VLPA;
				}
				
			    public String V4POCH;

				public String getV4POCH () {
					return this.V4POCH;
				}
				
			    public String V4KMFG;

				public String getV4KMFG () {
					return this.V4KMFG;
				}
				
			    public String V4ASRF;

				public String getV4ASRF () {
					return this.V4ASRF;
				}
				
			    public String V4POFL;

				public String getV4POFL () {
					return this.V4POFL;
				}
				
			    public String V4MKMF;

				public String getV4MKMF () {
					return this.V4MKMF;
				}
				
			    public String V4FSCF;

				public String getV4FSCF () {
					return this.V4FSCF;
				}
				
			    public String V4MELN;

				public String getV4MELN () {
					return this.V4MELN;
				}
				
			    public String V4IPCF;

				public String getV4IPCF () {
					return this.V4IPCF;
				}
				
			    public BigDecimal V4ARBD;

				public BigDecimal getV4ARBD () {
					return this.V4ARBD;
				}
				
			    public BigDecimal V4PSRD;

				public BigDecimal getV4PSRD () {
					return this.V4PSRD;
				}
				
			    public BigDecimal V4ARDE;

				public BigDecimal getV4ARDE () {
					return this.V4ARDE;
				}
				
			    public BigDecimal V4AVDT;

				public BigDecimal getV4AVDT () {
					return this.V4AVDT;
				}
				
			    public BigDecimal V4AVTM;

				public BigDecimal getV4AVTM () {
					return this.V4AVTM;
				}
				
			    public BigDecimal V4ORDT;

				public BigDecimal getV4ORDT () {
					return this.V4ORDT;
				}
				
			    public BigDecimal V4PSOQ;

				public BigDecimal getV4PSOQ () {
					return this.V4PSOQ;
				}
				
			    public String V4CUNO;

				public String getV4CUNO () {
					return this.V4CUNO;
				}
				
			    public BigDecimal V4ORNO;

				public BigDecimal getV4ORNO () {
					return this.V4ORNO;
				}
				
			    public BigDecimal V4ODLN;

				public BigDecimal getV4ODLN () {
					return this.V4ODLN;
				}
				
			    public String V4ITCI;

				public String getV4ITCI () {
					return this.V4ITCI;
				}
				
			    public BigDecimal V4POOQ;

				public BigDecimal getV4POOQ () {
					return this.V4POOQ;
				}
				
			    public BigDecimal V4POFB;

				public BigDecimal getV4POFB () {
					return this.V4POFB;
				}
				
			    public BigDecimal V4POFR;

				public BigDecimal getV4POFR () {
					return this.V4POFR;
				}
				
			    public BigDecimal V4POAP;

				public BigDecimal getV4POAP () {
					return this.V4POAP;
				}
				
			    public BigDecimal V4IPUO;

				public BigDecimal getV4IPUO () {
					return this.V4IPUO;
				}
				
			    public String V4IPUT;

				public String getV4IPUT () {
					return this.V4IPUT;
				}
				
			    public BigDecimal V4IFRO;

				public BigDecimal getV4IFRO () {
					return this.V4IFRO;
				}
				
			    public String V4IFRT;

				public String getV4IFRT () {
					return this.V4IFRT;
				}
				
			    public BigDecimal V4BDPI;

				public BigDecimal getV4BDPI () {
					return this.V4BDPI;
				}
				
			    public BigDecimal V4PAPI;

				public BigDecimal getV4PAPI () {
					return this.V4PAPI;
				}
				
			    public BigDecimal V4POAL;

				public BigDecimal getV4POAL () {
					return this.V4POAL;
				}
				
			    public String V4POUM;

				public String getV4POUM () {
					return this.V4POUM;
				}
				
			    public BigDecimal V4OUCI;

				public BigDecimal getV4OUCI () {
					return this.V4OUCI;
				}
				
			    public BigDecimal V4OADP;

				public BigDecimal getV4OADP () {
					return this.V4OADP;
				}
				
			    public BigDecimal V4ACDM;

				public BigDecimal getV4ACDM () {
					return this.V4ACDM;
				}
				
			    public BigDecimal V4ACDF;

				public BigDecimal getV4ACDF () {
					return this.V4ACDF;
				}
				
			    public BigDecimal V4ALQY;

				public BigDecimal getV4ALQY () {
					return this.V4ALQY;
				}
				
			    public BigDecimal V4ALQS;

				public BigDecimal getV4ALQS () {
					return this.V4ALQS;
				}
				
			    public BigDecimal V4MRPR;

				public BigDecimal getV4MRPR () {
					return this.V4MRPR;
				}
				
			    public BigDecimal V4IUPR;

				public BigDecimal getV4IUPR () {
					return this.V4IUPR;
				}
				
			    public String V4FEGD;

				public String getV4FEGD () {
					return this.V4FEGD;
				}
				
			    public String V4VPUM;

				public String getV4VPUM () {
					return this.V4VPUM;
				}
				
			    public BigDecimal V4PCOQ;

				public BigDecimal getV4PCOQ () {
					return this.V4PCOQ;
				}
				
			    public BigDecimal V4PCFB;

				public BigDecimal getV4PCFB () {
					return this.V4PCFB;
				}
				
			    public BigDecimal V4PCFR;

				public BigDecimal getV4PCFR () {
					return this.V4PCFR;
				}
				
			    public BigDecimal V4PCAP;

				public BigDecimal getV4PCAP () {
					return this.V4PCAP;
				}
				
			    public BigDecimal V4CPAL;

				public BigDecimal getV4CPAL () {
					return this.V4CPAL;
				}
				
			    public String V4CPUT;

				public String getV4CPUT () {
					return this.V4CPUT;
				}
				
			    public BigDecimal V4CFRO;

				public BigDecimal getV4CFRO () {
					return this.V4CFRO;
				}
				
			    public String V4CFTO;

				public String getV4CFTO () {
					return this.V4CFTO;
				}
				
			    public BigDecimal V4CPAP;

				public BigDecimal getV4CPAP () {
					return this.V4CPAP;
				}
				
			    public BigDecimal V4CBDP;

				public BigDecimal getV4CBDP () {
					return this.V4CBDP;
				}
				
			    public BigDecimal V4COIN;

				public BigDecimal getV4COIN () {
					return this.V4COIN;
				}
				
			    public String V4CUOM;

				public String getV4CUOM () {
					return this.V4CUOM;
				}
				
			    public BigDecimal V4CUCI;

				public BigDecimal getV4CUCI () {
					return this.V4CUCI;
				}
				
			    public BigDecimal V4CADP;

				public BigDecimal getV4CADP () {
					return this.V4CADP;
				}
				
			    public BigDecimal V4CACM;

				public BigDecimal getV4CACM () {
					return this.V4CACM;
				}
				
			    public BigDecimal V4CACF;

				public BigDecimal getV4CACF () {
					return this.V4CACF;
				}
				
			    public BigDecimal V4CMRP;

				public BigDecimal getV4CMRP () {
					return this.V4CMRP;
				}
				
			    public String V4CMEF;

				public String getV4CMEF () {
					return this.V4CMEF;
				}
				
			    public String V4CFTP;

				public String getV4CFTP () {
					return this.V4CFTP;
				}
				
			    public String V4CPOF;

				public String getV4CPOF () {
					return this.V4CPOF;
				}
				
			    public BigDecimal V4QYSH;

				public BigDecimal getV4QYSH () {
					return this.V4QYSH;
				}
				
			    public BigDecimal V4QYDA;

				public BigDecimal getV4QYDA () {
					return this.V4QYDA;
				}
				
			    public BigDecimal V4RCQT;

				public BigDecimal getV4RCQT () {
					return this.V4RCQT;
				}
				
			    public BigDecimal V4VSQY;

				public BigDecimal getV4VSQY () {
					return this.V4VSQY;
				}
				
			    public String V4CSRC;

				public String getV4CSRC () {
					return this.V4CSRC;
				}
				
			    public String V4VSRC;

				public String getV4VSRC () {
					return this.V4VSRC;
				}
				
			    public BigDecimal V4RVWT;

				public BigDecimal getV4RVWT () {
					return this.V4RVWT;
				}
				
			    public BigDecimal V4RVWK;

				public BigDecimal getV4RVWK () {
					return this.V4RVWK;
				}
				
			    public BigDecimal V4DRWT;

				public BigDecimal getV4DRWT () {
					return this.V4DRWT;
				}
				
			    public BigDecimal V4DRWK;

				public BigDecimal getV4DRWK () {
					return this.V4DRWK;
				}
				
			    public String V4RPFF;

				public String getV4RPFF () {
					return this.V4RPFF;
				}
				
			    public String V4PPFS;

				public String getV4PPFS () {
					return this.V4PPFS;
				}
				
			    public String V4PMPS;

				public String getV4PMPS () {
					return this.V4PMPS;
				}
				
			    public BigDecimal V4MEAP;

				public BigDecimal getV4MEAP () {
					return this.V4MEAP;
				}
				
			    public BigDecimal V4MIDT;

				public BigDecimal getV4MIDT () {
					return this.V4MIDT;
				}
				
			    public String V4MINV;

				public String getV4MINV () {
					return this.V4MINV;
				}
				
			    public String V4MPDD;

				public String getV4MPDD () {
					return this.V4MPDD;
				}
				
			    public String V4MQDD;

				public String getV4MQDD () {
					return this.V4MQDD;
				}
				
			    public BigDecimal V4MRQT;

				public BigDecimal getV4MRQT () {
					return this.V4MRQT;
				}
				
			    public BigDecimal V4MRCW;

				public BigDecimal getV4MRCW () {
					return this.V4MRCW;
				}
				
			    public BigDecimal V4MRCK;

				public BigDecimal getV4MRCK () {
					return this.V4MRCK;
				}
				
			    public BigDecimal V4PFMM;

				public BigDecimal getV4PFMM () {
					return this.V4PFMM;
				}
				
			    public BigDecimal V4MCSD;

				public BigDecimal getV4MCSD () {
					return this.V4MCSD;
				}
				
			    public String V4FINV;

				public String getV4FINV () {
					return this.V4FINV;
				}
				
			    public BigDecimal V4FEAP;

				public BigDecimal getV4FEAP () {
					return this.V4FEAP;
				}
				
			    public BigDecimal V4FIDT;

				public BigDecimal getV4FIDT () {
					return this.V4FIDT;
				}
				
			    public BigDecimal V4FRCW;

				public BigDecimal getV4FRCW () {
					return this.V4FRCW;
				}
				
			    public BigDecimal V4FCAD;

				public BigDecimal getV4FCAD () {
					return this.V4FCAD;
				}
				
			    public BigDecimal V4FRQT;

				public BigDecimal getV4FRQT () {
					return this.V4FRQT;
				}
				
			    public BigDecimal V4PFMD;

				public BigDecimal getV4PFMD () {
					return this.V4PFMD;
				}
				
			    public BigDecimal V4FTCQ;

				public BigDecimal getV4FTCQ () {
					return this.V4FTCQ;
				}
				
			    public String V4LCN;

				public String getV4LCN () {
					return this.V4LCN;
				}
				
			    public String V4SPOF;

				public String getV4SPOF () {
					return this.V4SPOF;
				}
				
			    public BigDecimal V4PCLN;

				public BigDecimal getV4PCLN () {
					return this.V4PCLN;
				}
				
			    public String V4MFVN;

				public String getV4MFVN () {
					return this.V4MFVN;
				}
				
			    public String V4MFID;

				public String getV4MFID () {
					return this.V4MFID;
				}
				
			    public String V4ERRF;

				public String getV4ERRF () {
					return this.V4ERRF;
				}
				
			    public String V4IMCC;

				public String getV4IMCC () {
					return this.V4IMCC;
				}
				
			    public String V4COD1;

				public String getV4COD1 () {
					return this.V4COD1;
				}
				
			    public String V4NTYP;

				public String getV4NTYP () {
					return this.V4NTYP;
				}
				
			    public BigDecimal V4TDCD;

				public BigDecimal getV4TDCD () {
					return this.V4TDCD;
				}
				
			    public BigDecimal V4QTIF;

				public BigDecimal getV4QTIF () {
					return this.V4QTIF;
				}
				
			    public BigDecimal V4EADT;

				public BigDecimal getV4EADT () {
					return this.V4EADT;
				}
				
			    public BigDecimal V4EATM;

				public BigDecimal getV4EATM () {
					return this.V4EATM;
				}
				
			    public String V4EAID;

				public String getV4EAID () {
					return this.V4EAID;
				}
				
			    public BigDecimal V4MODT;

				public BigDecimal getV4MODT () {
					return this.V4MODT;
				}
				
			    public BigDecimal V4MOTM;

				public BigDecimal getV4MOTM () {
					return this.V4MOTM;
				}
				
			    public String V4MOID;

				public String getV4MOID () {
					return this.V4MOID;
				}
				
			    public String V4MOPG;

				public String getV4MOPG () {
					return this.V4MOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("V4PO="+V4PO);
		sb.append(",V4ITEM="+V4ITEM);
		sb.append(",V4ROSQ="+String.valueOf(V4ROSQ));
		sb.append(",V4OWID="+V4OWID);
		sb.append(",V4ARCO="+V4ARCO);
		sb.append(",V4MNPC="+V4MNPC);
		sb.append(",V4MUPC="+V4MUPC);
		sb.append(",V4ITDS="+V4ITDS);
		sb.append(",V4VCAT="+V4VCAT);
		sb.append(",V4VNBR="+V4VNBR);
		sb.append(",V4ADCD="+String.valueOf(V4ADCD));
		sb.append(",V4BYGP="+String.valueOf(V4BYGP));
		sb.append(",V4CPVN="+V4CPVN);
		sb.append(",V4PVND="+V4PVND);
		sb.append(",V4TERM="+V4TERM);
		sb.append(",V4POST="+V4POST);
		sb.append(",V4POSS="+V4POSS);
		sb.append(",V4ORTY="+V4ORTY);
		sb.append(",V4WCCD="+V4WCCD);
		sb.append(",V4CFST="+V4CFST);
		sb.append(",V4WHSE="+V4WHSE);
		sb.append(",V4VLPF="+V4VLPF);
		sb.append(",V4VLPA="+V4VLPA);
		sb.append(",V4POCH="+V4POCH);
		sb.append(",V4KMFG="+V4KMFG);
		sb.append(",V4ASRF="+V4ASRF);
		sb.append(",V4POFL="+V4POFL);
		sb.append(",V4MKMF="+V4MKMF);
		sb.append(",V4FSCF="+V4FSCF);
		sb.append(",V4MELN="+V4MELN);
		sb.append(",V4IPCF="+V4IPCF);
		sb.append(",V4ARBD="+String.valueOf(V4ARBD));
		sb.append(",V4PSRD="+String.valueOf(V4PSRD));
		sb.append(",V4ARDE="+String.valueOf(V4ARDE));
		sb.append(",V4AVDT="+String.valueOf(V4AVDT));
		sb.append(",V4AVTM="+String.valueOf(V4AVTM));
		sb.append(",V4ORDT="+String.valueOf(V4ORDT));
		sb.append(",V4PSOQ="+String.valueOf(V4PSOQ));
		sb.append(",V4CUNO="+V4CUNO);
		sb.append(",V4ORNO="+String.valueOf(V4ORNO));
		sb.append(",V4ODLN="+String.valueOf(V4ODLN));
		sb.append(",V4ITCI="+V4ITCI);
		sb.append(",V4POOQ="+String.valueOf(V4POOQ));
		sb.append(",V4POFB="+String.valueOf(V4POFB));
		sb.append(",V4POFR="+String.valueOf(V4POFR));
		sb.append(",V4POAP="+String.valueOf(V4POAP));
		sb.append(",V4IPUO="+String.valueOf(V4IPUO));
		sb.append(",V4IPUT="+V4IPUT);
		sb.append(",V4IFRO="+String.valueOf(V4IFRO));
		sb.append(",V4IFRT="+V4IFRT);
		sb.append(",V4BDPI="+String.valueOf(V4BDPI));
		sb.append(",V4PAPI="+String.valueOf(V4PAPI));
		sb.append(",V4POAL="+String.valueOf(V4POAL));
		sb.append(",V4POUM="+V4POUM);
		sb.append(",V4OUCI="+String.valueOf(V4OUCI));
		sb.append(",V4OADP="+String.valueOf(V4OADP));
		sb.append(",V4ACDM="+String.valueOf(V4ACDM));
		sb.append(",V4ACDF="+String.valueOf(V4ACDF));
		sb.append(",V4ALQY="+String.valueOf(V4ALQY));
		sb.append(",V4ALQS="+String.valueOf(V4ALQS));
		sb.append(",V4MRPR="+String.valueOf(V4MRPR));
		sb.append(",V4IUPR="+String.valueOf(V4IUPR));
		sb.append(",V4FEGD="+V4FEGD);
		sb.append(",V4VPUM="+V4VPUM);
		sb.append(",V4PCOQ="+String.valueOf(V4PCOQ));
		sb.append(",V4PCFB="+String.valueOf(V4PCFB));
		sb.append(",V4PCFR="+String.valueOf(V4PCFR));
		sb.append(",V4PCAP="+String.valueOf(V4PCAP));
		sb.append(",V4CPAL="+String.valueOf(V4CPAL));
		sb.append(",V4CPUT="+V4CPUT);
		sb.append(",V4CFRO="+String.valueOf(V4CFRO));
		sb.append(",V4CFTO="+V4CFTO);
		sb.append(",V4CPAP="+String.valueOf(V4CPAP));
		sb.append(",V4CBDP="+String.valueOf(V4CBDP));
		sb.append(",V4COIN="+String.valueOf(V4COIN));
		sb.append(",V4CUOM="+V4CUOM);
		sb.append(",V4CUCI="+String.valueOf(V4CUCI));
		sb.append(",V4CADP="+String.valueOf(V4CADP));
		sb.append(",V4CACM="+String.valueOf(V4CACM));
		sb.append(",V4CACF="+String.valueOf(V4CACF));
		sb.append(",V4CMRP="+String.valueOf(V4CMRP));
		sb.append(",V4CMEF="+V4CMEF);
		sb.append(",V4CFTP="+V4CFTP);
		sb.append(",V4CPOF="+V4CPOF);
		sb.append(",V4QYSH="+String.valueOf(V4QYSH));
		sb.append(",V4QYDA="+String.valueOf(V4QYDA));
		sb.append(",V4RCQT="+String.valueOf(V4RCQT));
		sb.append(",V4VSQY="+String.valueOf(V4VSQY));
		sb.append(",V4CSRC="+V4CSRC);
		sb.append(",V4VSRC="+V4VSRC);
		sb.append(",V4RVWT="+String.valueOf(V4RVWT));
		sb.append(",V4RVWK="+String.valueOf(V4RVWK));
		sb.append(",V4DRWT="+String.valueOf(V4DRWT));
		sb.append(",V4DRWK="+String.valueOf(V4DRWK));
		sb.append(",V4RPFF="+V4RPFF);
		sb.append(",V4PPFS="+V4PPFS);
		sb.append(",V4PMPS="+V4PMPS);
		sb.append(",V4MEAP="+String.valueOf(V4MEAP));
		sb.append(",V4MIDT="+String.valueOf(V4MIDT));
		sb.append(",V4MINV="+V4MINV);
		sb.append(",V4MPDD="+V4MPDD);
		sb.append(",V4MQDD="+V4MQDD);
		sb.append(",V4MRQT="+String.valueOf(V4MRQT));
		sb.append(",V4MRCW="+String.valueOf(V4MRCW));
		sb.append(",V4MRCK="+String.valueOf(V4MRCK));
		sb.append(",V4PFMM="+String.valueOf(V4PFMM));
		sb.append(",V4MCSD="+String.valueOf(V4MCSD));
		sb.append(",V4FINV="+V4FINV);
		sb.append(",V4FEAP="+String.valueOf(V4FEAP));
		sb.append(",V4FIDT="+String.valueOf(V4FIDT));
		sb.append(",V4FRCW="+String.valueOf(V4FRCW));
		sb.append(",V4FCAD="+String.valueOf(V4FCAD));
		sb.append(",V4FRQT="+String.valueOf(V4FRQT));
		sb.append(",V4PFMD="+String.valueOf(V4PFMD));
		sb.append(",V4FTCQ="+String.valueOf(V4FTCQ));
		sb.append(",V4LCN="+V4LCN);
		sb.append(",V4SPOF="+V4SPOF);
		sb.append(",V4PCLN="+String.valueOf(V4PCLN));
		sb.append(",V4MFVN="+V4MFVN);
		sb.append(",V4MFID="+V4MFID);
		sb.append(",V4ERRF="+V4ERRF);
		sb.append(",V4IMCC="+V4IMCC);
		sb.append(",V4COD1="+V4COD1);
		sb.append(",V4NTYP="+V4NTYP);
		sb.append(",V4TDCD="+String.valueOf(V4TDCD));
		sb.append(",V4QTIF="+String.valueOf(V4QTIF));
		sb.append(",V4EADT="+String.valueOf(V4EADT));
		sb.append(",V4EATM="+String.valueOf(V4EATM));
		sb.append(",V4EAID="+V4EAID);
		sb.append(",V4MODT="+String.valueOf(V4MODT));
		sb.append(",V4MOTM="+String.valueOf(V4MOTM));
		sb.append(",V4MOID="+V4MOID);
		sb.append(",V4MOPG="+V4MOPG);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
PURCHASE_ORDER_DETAIL_UPDATE_4Struct PURCHASE_ORDER_DETAIL_UPDATE_4 = new PURCHASE_ORDER_DETAIL_UPDATE_4Struct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_4");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PURCHASE_ORDER_DETAIL_UPDATE_4");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("PURCHASE_ORDER_DETAIL");
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("PURCHASE_ORDER_DETAIL");
}

        int updateKeyCount_tDBOutput_4 = 4;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_4 == 115 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_4 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_4 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_4 = context.GIM_Password; 

    String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;

    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4,dbUser_tDBOutput_4,dbPwd_tDBOutput_4);
	
	resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
        conn_tDBOutput_4.setAutoCommit(false);
        int commitEvery_tDBOutput_4 = 1;
        int commitCounter_tDBOutput_4 = 0;


   int batchSize_tDBOutput_4 = 1;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"VENDOR_CLASSIFICATION\" = ?,\"SHIPPING_POINT_SHIP_FROM\" = ?,\"BUYING_GROUP\" = ?,\"CUST_PREF_VENDOR\" = ?,\"SOURCE_VENDOR\" = ?,\"VENDOR_TERMS\" = ?,\"PO_PRIMARY_STATUS\" = ?,\"PO_SECONDARY_STATUS\" = ?,\"PO_TYPE\" = ?,\"WHSE_CHANGE_CODE\" = ?,\"CONF_STATUS\" = ?,\"PO_VALID_PRICING_FLAG\" = ?,\"PO_VALID_PRICING_APPROVAL\" = ?,\"PO_CHANGED_FLAG\" = ?,\"ALLOC_SCHEDULED_RECEIPT_FLAG\" = ?,\"PRICE_OVERRIDE_FLAG\" = ?,\"MARKED_BY_MERCHANDISER_FLAG\" = ?,\"FAILED_SCORECARD_FLAG\" = ?,\"MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CALENDAR_DATE_ANTICIPATED_RECEIPT\" = ?,\"CALENDAR_DATE_SCHEDULED_RECEIPT_DATE\" = ?,\"BUSINESS_DATE_ANTICIPATED_RECEIPT\" = ?,\"AVAIL_TIMESTAMP\" = ?,\"BUSINESS_ORDER_DATE\" = ?,\"SUGGESTED_ORDER_QTY\" = ?,\"SHIP_TO_CUST\" = ?,\"CUST_ORDER_NO\" = ?,\"CUST_ORDER_LINE_NO\" = ?,\"ORIG_ORDER_QTY\" = ?,\"ORIG_FOB_PER_ITEM\" = ?,\"ORIG_FREIGHT_PER_ITEM\" = ?,\"ORIG_AP_PER_ITEM\" = ?,\"ORIG_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"ORIG_FREIGHT_RATE_OVERRIDE\" = ?,\"ORIG_FREIGHT_TYPE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_PER_ITEM\" = ?,\"ORIG_OFF_INV_ALLOW\" = ?,\"ORIG_UOM\" = ?,\"ORIG_ALT_DELV_PRICE\" = ?,\"ORIG_MERCH_ALLOW_CHARGE\" = ?,\"ORIG_FREIGHT_ALLOW_CHARGE\" = ?,\"ALLOC_QTY\" = ?,\"ALLOC_QTY_SPLITS\" = ?,\"INV_UNIT_PRICE\" = ?,\"FREE_GOODS_FLAG\" = ?,\"VENDOR_PRICE_LIST_UOM\" = ?,\"CONFIRMED_ORDER_QTY\" = ?,\"CONFIRMED_FOB_PER_ITEM\" = ?,\"CONFIRMED_FREIGHT_PER_ITEM\" = ?,\"CONFIRMED_AP_PER_ITEM\" = ?,\"CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_RATE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_TYPE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_PER_ITEM\" = ?,\"CONFIRMED_OFF_INV_ALLOW\" = ?,\"CONFIRMED_UOM\" = ?,\"CONFIRMED_ALT_DELV_PRICE\" = ?,\"CONF_DIST_MERCH_ALLOW_CHARGE\" = ?,\"CONF_DIST_FREIGHT_ALLOW_CHARGE\" = ?,\"CONFIRMED_MRPT\" = ?,\"CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CONFIRMED_PRICE_OVERRIDE_FLAG\" = ?,\"CARRIER_SHORT_QTY\" = ?,\"RECVD_DAMAGED_ACCEPTED_QTY\" = ?,\"RECVD_QTY\" = ?,\"VENDOR_SHORT_QTY\" = ?,\"CARRIER_SHORT_REASON_CODE\" = ?,\"VENDOR_SHORT_REASON_CODE\" = ?,\"RECVD_WGT\" = ?,\"DAMAGED_RECVD_WGT\" = ?,\"REVISED_PROFORMA_FLAG\" = ?,\"FREIGHT_PROFORMA_STATUS\" = ?,\"MERCH_PROFORMA_STATUS\" = ?,\"MERCH_EXT_AMT_TOBE_PAID\" = ?,\"MERCH_INV_DATE\" = ?,\"MERCH_INV_NO\" = ?,\"MERCH_PRICE_DIFF_STATUS\" = ?,\"MERCH_QTY_DIFF_STATUS\" = ?,\"MERCH_QTY_TO_BE_PAID\" = ?,\"MERCH_WGT_TO_BE_PAID\" = ?,\"MERCH_CASH_DISC\" = ?,\"FREIGHT_INV_NO\" = ?,\"FREIGHT_EXT_AMT_TO_BE_PAID\" = ?,\"FREIGHT_INV_DATE\" = ?,\"FREIGHT_CHARGE_TO_BE_PAID\" = ?,\"FREIGHT_CASH_DISC\" = ?,\"FREIGHT_QTY_TO_BE_PAID\" = ?,\"FREIGHT_CLAIM_QTY\" = ?,\"LOAD_CTRL_NO\" = ?,\"SPLIT_PO_FLAG\" = ?,\"TRUE_VENDOR\" = ?,\"MANIFEST_HIST_MFG_NO\" = ?,\"NOTE1\" = ?,\"TRUE_VENDOR_SHIP_FROM\" = ?,\"LAST_QTY_SENT_TO_DPR\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"IS_ACTIVE\" = ?,\"V4PF_SVOP\" = ?,\"UPDATED_USER_ID\" = ?,\"UPDATED_PROGRAM_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"ORIG_UNLOAD_CHARGE_PER_ITEM\" = ?,\"CONF_UNLOAD_CHARGE_PER_ITEM\" = ? WHERE \"SITE_ID\" = ? AND \"PURCHASE_ORDER_NO\" = ? AND \"SMS_MAJ_LINE_NO\" = ? AND \"SMS_MIN_LINE_NO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
	String V4ARBD;
	String V4PSRD;
	String V4ARDE;
	String V4MIDT;
	String V4FIDT;
	String V4ORDT;
	String AVAIL_TIMESTAMP;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
PURCHASE_ORDER_DETAIL_UPDATE_4Struct PURCHASE_ORDER_DETAIL_UPDATE_4_tmp = new PURCHASE_ORDER_DETAIL_UPDATE_4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_4");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_4 = context.SUS_Password; 
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				  
				String url_tDBInput_4 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  IMHBV4PF.V4PO, \n  IMHBV4PF.V4ITEM, \n  IMHBV4PF.V4ROSQ, \n  IMHBV4PF.V4OWID, \n  IMHBV4PF.V4ARCO, \n  IMHBV"
+"4PF.V4MNPC, \n  IMHBV4PF.V4MUPC, \n  IMHBV4PF.V4ITDS, \n  IMHBV4PF.V4VCAT, \n  IMHBV4PF.V4VNBR, \n  IMHBV4PF.V4ADCD, \n "
+" IMHBV4PF.V4BYGP, \n  IMHBV4PF.V4CPVN, \n  IMHBV4PF.V4PVND, \n  IMHBV4PF.V4TERM, \n  IMHBV4PF.V4POST, \n  IMHBV4PF.V4POS"
+"S, \n  IMHBV4PF.V4ORTY, \n  IMHBV4PF.V4WCCD, \n  IMHBV4PF.V4CFST, \n  IMHBV4PF.V4WHSE, \n  IMHBV4PF.V4VLPF, \n  IMHBV4PF"
+".V4VLPA, \n  IMHBV4PF.V4POCH, \n  IMHBV4PF.V4KMFG, \n  IMHBV4PF.V4ASRF, \n  IMHBV4PF.V4POFL, \n  IMHBV4PF.V4MKMF, \n  IM"
+"HBV4PF.V4FSCF, \n  IMHBV4PF.V4MELN, \n  IMHBV4PF.V4IPCF, \n  IMHBV4PF.V4ARBD, \n  IMHBV4PF.V4PSRD, \n  IMHBV4PF.V4ARDE, "
+"\n  IMHBV4PF.V4AVDT, \n  IMHBV4PF.V4AVTM, \n  IMHBV4PF.V4ORDT, \n  IMHBV4PF.V4PSOQ, \n  IMHBV4PF.V4CUNO, \n  IMHBV4PF.V4"
+"ORNO, \n  IMHBV4PF.V4ODLN, \n  IMHBV4PF.V4ITCI, \n  IMHBV4PF.V4POOQ, \n  IMHBV4PF.V4POFB, \n  IMHBV4PF.V4POFR, \n  IMHBV"
+"4PF.V4POAP, \n  IMHBV4PF.V4IPUO, \n  IMHBV4PF.V4IPUT, \n  IMHBV4PF.V4IFRO, \n  IMHBV4PF.V4IFRT, \n  IMHBV4PF.V4BDPI, \n "
+" IMHBV4PF.V4PAPI, \n  IMHBV4PF.V4POAL, \n  IMHBV4PF.V4POUM, \n  IMHBV4PF.V4OUCI, \n  IMHBV4PF.V4OADP, \n  IMHBV4PF.V4ACD"
+"M, \n  IMHBV4PF.V4ACDF, \n  IMHBV4PF.V4ALQY, \n  IMHBV4PF.V4ALQS, \n  IMHBV4PF.V4MRPR, \n  IMHBV4PF.V4IUPR, \n  IMHBV4PF"
+".V4FEGD, \n  IMHBV4PF.V4VPUM, \n  IMHBV4PF.V4PCOQ, \n  IMHBV4PF.V4PCFB, \n  IMHBV4PF.V4PCFR, \n  IMHBV4PF.V4PCAP, \n  IM"
+"HBV4PF.V4CPAL, \n  IMHBV4PF.V4CPUT, \n  IMHBV4PF.V4CFRO, \n  IMHBV4PF.V4CFTO, \n  IMHBV4PF.V4CPAP, \n  IMHBV4PF.V4CBDP, "
+"\n  IMHBV4PF.V4COIN, \n  IMHBV4PF.V4CUOM, \n  IMHBV4PF.V4CUCI, \n  IMHBV4PF.V4CADP, \n  IMHBV4PF.V4CACM, \n  IMHBV4PF.V4"
+"CACF, \n  IMHBV4PF.V4CMRP, \n  IMHBV4PF.V4CMEF, \n  IMHBV4PF.V4CFTP, \n  IMHBV4PF.V4CPOF, \n  IMHBV4PF.V4QYSH, \n  IMHBV"
+"4PF.V4QYDA, \n  IMHBV4PF.V4RCQT, \n  IMHBV4PF.V4VSQY, \n  IMHBV4PF.V4CSRC, \n  IMHBV4PF.V4VSRC, \n  IMHBV4PF.V4RVWT, \n "
+" IMHBV4PF.V4RVWK, \n  IMHBV4PF.V4DRWT, \n  IMHBV4PF.V4DRWK, \n  IMHBV4PF.V4RPFF, \n  IMHBV4PF.V4PPFS, \n  IMHBV4PF.V4PMP"
+"S, \n  IMHBV4PF.V4MEAP, \n  IMHBV4PF.V4MIDT, \n  IMHBV4PF.V4MINV, \n  IMHBV4PF.V4MPDD, \n  IMHBV4PF.V4MQDD, \n  IMHBV4PF"
+".V4MRQT, \n  IMHBV4PF.V4MRCW, \n  IMHBV4PF.V4MRCK, \n  IMHBV4PF.V4PFMM, \n  IMHBV4PF.V4MCSD, \n  IMHBV4PF.V4FINV, \n  IM"
+"HBV4PF.V4FEAP, \n  IMHBV4PF.V4FIDT, \n  IMHBV4PF.V4FRCW, \n  IMHBV4PF.V4FCAD, \n  IMHBV4PF.V4FRQT, \n  IMHBV4PF.V4PFMD, "
+"\n  IMHBV4PF.V4FTCQ, \n  IMHBV4PF.V4LCN, \n  IMHBV4PF.V4SPOF, \n  IMHBV4PF.V4PCLN, \n  IMHBV4PF.V4MFVN, \n  IMHBV4PF.V4M"
+"FID, \n  IMHBV4PF.V4ERRF, \n  IMHBV4PF.V4IMCC, \n  IMHBV4PF.V4COD1, \n  IMHBV4PF.V4NTYP, \n  IMHBV4PF.V4TDCD, \n  IMHBV4"
+"PF.V4QTIF, \n  IMHBV4PF.V4EADT, \n  IMHBV4PF.V4EATM, \n  IMHBV4PF.V4EAID, \n  IMHBV4PF.V4MODT, \n  IMHBV4PF.V4MOTM, \n  "
+"IMHBV4PF.V4MOID, \n  IMHBV4PF.V4MOPG\nFROM IMHBV4PF WHERE IMHBV4PF.V4EADT BETWEEN 20220401 AND 20220631 \nORDER BY IMHBV"
+"4PF.V4EADT DESC";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.V4PO = null;
							} else {
	                         		
        	row4.V4PO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.V4ITEM = null;
							} else {
	                         		
        	row4.V4ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row4.V4ROSQ = null;
							} else {
		                          
            row4.V4ROSQ = rs_tDBInput_4.getBigDecimal(3);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row4.V4OWID = null;
							} else {
	                         		
        	row4.V4OWID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row4.V4ARCO = null;
							} else {
	                         		
        	row4.V4ARCO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row4.V4MNPC = null;
							} else {
	                         		
        	row4.V4MNPC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row4.V4MUPC = null;
							} else {
	                         		
        	row4.V4MUPC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								row4.V4ITDS = null;
							} else {
	                         		
        	row4.V4ITDS = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								row4.V4VCAT = null;
							} else {
	                         		
        	row4.V4VCAT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								row4.V4VNBR = null;
							} else {
	                         		
        	row4.V4VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								row4.V4ADCD = null;
							} else {
		                          
            row4.V4ADCD = rs_tDBInput_4.getBigDecimal(11);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								row4.V4BYGP = null;
							} else {
		                          
            row4.V4BYGP = rs_tDBInput_4.getBigDecimal(12);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								row4.V4CPVN = null;
							} else {
	                         		
        	row4.V4CPVN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 13, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								row4.V4PVND = null;
							} else {
	                         		
        	row4.V4PVND = routines.system.JDBCUtil.getString(rs_tDBInput_4, 14, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								row4.V4TERM = null;
							} else {
	                         		
        	row4.V4TERM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 15, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								row4.V4POST = null;
							} else {
	                         		
        	row4.V4POST = routines.system.JDBCUtil.getString(rs_tDBInput_4, 16, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								row4.V4POSS = null;
							} else {
	                         		
        	row4.V4POSS = routines.system.JDBCUtil.getString(rs_tDBInput_4, 17, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 18) {
								row4.V4ORTY = null;
							} else {
	                         		
        	row4.V4ORTY = routines.system.JDBCUtil.getString(rs_tDBInput_4, 18, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 19) {
								row4.V4WCCD = null;
							} else {
	                         		
        	row4.V4WCCD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 19, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 20) {
								row4.V4CFST = null;
							} else {
	                         		
        	row4.V4CFST = routines.system.JDBCUtil.getString(rs_tDBInput_4, 20, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 21) {
								row4.V4WHSE = null;
							} else {
	                         		
        	row4.V4WHSE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 21, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 22) {
								row4.V4VLPF = null;
							} else {
	                         		
        	row4.V4VLPF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 22, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 23) {
								row4.V4VLPA = null;
							} else {
	                         		
        	row4.V4VLPA = routines.system.JDBCUtil.getString(rs_tDBInput_4, 23, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 24) {
								row4.V4POCH = null;
							} else {
	                         		
        	row4.V4POCH = routines.system.JDBCUtil.getString(rs_tDBInput_4, 24, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 25) {
								row4.V4KMFG = null;
							} else {
	                         		
        	row4.V4KMFG = routines.system.JDBCUtil.getString(rs_tDBInput_4, 25, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 26) {
								row4.V4ASRF = null;
							} else {
	                         		
        	row4.V4ASRF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 26, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 27) {
								row4.V4POFL = null;
							} else {
	                         		
        	row4.V4POFL = routines.system.JDBCUtil.getString(rs_tDBInput_4, 27, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 28) {
								row4.V4MKMF = null;
							} else {
	                         		
        	row4.V4MKMF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 28, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 29) {
								row4.V4FSCF = null;
							} else {
	                         		
        	row4.V4FSCF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 29, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 30) {
								row4.V4MELN = null;
							} else {
	                         		
        	row4.V4MELN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 30, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 31) {
								row4.V4IPCF = null;
							} else {
	                         		
        	row4.V4IPCF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 31, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 32) {
								row4.V4ARBD = null;
							} else {
		                          
            row4.V4ARBD = rs_tDBInput_4.getBigDecimal(32);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 33) {
								row4.V4PSRD = null;
							} else {
		                          
            row4.V4PSRD = rs_tDBInput_4.getBigDecimal(33);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 34) {
								row4.V4ARDE = null;
							} else {
		                          
            row4.V4ARDE = rs_tDBInput_4.getBigDecimal(34);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 35) {
								row4.V4AVDT = null;
							} else {
		                          
            row4.V4AVDT = rs_tDBInput_4.getBigDecimal(35);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 36) {
								row4.V4AVTM = null;
							} else {
		                          
            row4.V4AVTM = rs_tDBInput_4.getBigDecimal(36);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 37) {
								row4.V4ORDT = null;
							} else {
		                          
            row4.V4ORDT = rs_tDBInput_4.getBigDecimal(37);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 38) {
								row4.V4PSOQ = null;
							} else {
		                          
            row4.V4PSOQ = rs_tDBInput_4.getBigDecimal(38);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 39) {
								row4.V4CUNO = null;
							} else {
	                         		
        	row4.V4CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 39, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 40) {
								row4.V4ORNO = null;
							} else {
		                          
            row4.V4ORNO = rs_tDBInput_4.getBigDecimal(40);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 41) {
								row4.V4ODLN = null;
							} else {
		                          
            row4.V4ODLN = rs_tDBInput_4.getBigDecimal(41);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 42) {
								row4.V4ITCI = null;
							} else {
	                         		
        	row4.V4ITCI = routines.system.JDBCUtil.getString(rs_tDBInput_4, 42, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 43) {
								row4.V4POOQ = null;
							} else {
		                          
            row4.V4POOQ = rs_tDBInput_4.getBigDecimal(43);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 44) {
								row4.V4POFB = null;
							} else {
		                          
            row4.V4POFB = rs_tDBInput_4.getBigDecimal(44);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 45) {
								row4.V4POFR = null;
							} else {
		                          
            row4.V4POFR = rs_tDBInput_4.getBigDecimal(45);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 46) {
								row4.V4POAP = null;
							} else {
		                          
            row4.V4POAP = rs_tDBInput_4.getBigDecimal(46);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 47) {
								row4.V4IPUO = null;
							} else {
		                          
            row4.V4IPUO = rs_tDBInput_4.getBigDecimal(47);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 48) {
								row4.V4IPUT = null;
							} else {
	                         		
        	row4.V4IPUT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 48, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 49) {
								row4.V4IFRO = null;
							} else {
		                          
            row4.V4IFRO = rs_tDBInput_4.getBigDecimal(49);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 50) {
								row4.V4IFRT = null;
							} else {
	                         		
        	row4.V4IFRT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 50, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 51) {
								row4.V4BDPI = null;
							} else {
		                          
            row4.V4BDPI = rs_tDBInput_4.getBigDecimal(51);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 52) {
								row4.V4PAPI = null;
							} else {
		                          
            row4.V4PAPI = rs_tDBInput_4.getBigDecimal(52);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 53) {
								row4.V4POAL = null;
							} else {
		                          
            row4.V4POAL = rs_tDBInput_4.getBigDecimal(53);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 54) {
								row4.V4POUM = null;
							} else {
	                         		
        	row4.V4POUM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 54, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 55) {
								row4.V4OUCI = null;
							} else {
		                          
            row4.V4OUCI = rs_tDBInput_4.getBigDecimal(55);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 56) {
								row4.V4OADP = null;
							} else {
		                          
            row4.V4OADP = rs_tDBInput_4.getBigDecimal(56);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 57) {
								row4.V4ACDM = null;
							} else {
		                          
            row4.V4ACDM = rs_tDBInput_4.getBigDecimal(57);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 58) {
								row4.V4ACDF = null;
							} else {
		                          
            row4.V4ACDF = rs_tDBInput_4.getBigDecimal(58);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 59) {
								row4.V4ALQY = null;
							} else {
		                          
            row4.V4ALQY = rs_tDBInput_4.getBigDecimal(59);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 60) {
								row4.V4ALQS = null;
							} else {
		                          
            row4.V4ALQS = rs_tDBInput_4.getBigDecimal(60);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 61) {
								row4.V4MRPR = null;
							} else {
		                          
            row4.V4MRPR = rs_tDBInput_4.getBigDecimal(61);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 62) {
								row4.V4IUPR = null;
							} else {
		                          
            row4.V4IUPR = rs_tDBInput_4.getBigDecimal(62);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 63) {
								row4.V4FEGD = null;
							} else {
	                         		
        	row4.V4FEGD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 63, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 64) {
								row4.V4VPUM = null;
							} else {
	                         		
        	row4.V4VPUM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 64, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 65) {
								row4.V4PCOQ = null;
							} else {
		                          
            row4.V4PCOQ = rs_tDBInput_4.getBigDecimal(65);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 66) {
								row4.V4PCFB = null;
							} else {
		                          
            row4.V4PCFB = rs_tDBInput_4.getBigDecimal(66);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 67) {
								row4.V4PCFR = null;
							} else {
		                          
            row4.V4PCFR = rs_tDBInput_4.getBigDecimal(67);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 68) {
								row4.V4PCAP = null;
							} else {
		                          
            row4.V4PCAP = rs_tDBInput_4.getBigDecimal(68);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 69) {
								row4.V4CPAL = null;
							} else {
		                          
            row4.V4CPAL = rs_tDBInput_4.getBigDecimal(69);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 70) {
								row4.V4CPUT = null;
							} else {
	                         		
        	row4.V4CPUT = routines.system.JDBCUtil.getString(rs_tDBInput_4, 70, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 71) {
								row4.V4CFRO = null;
							} else {
		                          
            row4.V4CFRO = rs_tDBInput_4.getBigDecimal(71);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 72) {
								row4.V4CFTO = null;
							} else {
	                         		
        	row4.V4CFTO = routines.system.JDBCUtil.getString(rs_tDBInput_4, 72, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 73) {
								row4.V4CPAP = null;
							} else {
		                          
            row4.V4CPAP = rs_tDBInput_4.getBigDecimal(73);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 74) {
								row4.V4CBDP = null;
							} else {
		                          
            row4.V4CBDP = rs_tDBInput_4.getBigDecimal(74);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 75) {
								row4.V4COIN = null;
							} else {
		                          
            row4.V4COIN = rs_tDBInput_4.getBigDecimal(75);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 76) {
								row4.V4CUOM = null;
							} else {
	                         		
        	row4.V4CUOM = routines.system.JDBCUtil.getString(rs_tDBInput_4, 76, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 77) {
								row4.V4CUCI = null;
							} else {
		                          
            row4.V4CUCI = rs_tDBInput_4.getBigDecimal(77);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 78) {
								row4.V4CADP = null;
							} else {
		                          
            row4.V4CADP = rs_tDBInput_4.getBigDecimal(78);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 79) {
								row4.V4CACM = null;
							} else {
		                          
            row4.V4CACM = rs_tDBInput_4.getBigDecimal(79);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 80) {
								row4.V4CACF = null;
							} else {
		                          
            row4.V4CACF = rs_tDBInput_4.getBigDecimal(80);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 81) {
								row4.V4CMRP = null;
							} else {
		                          
            row4.V4CMRP = rs_tDBInput_4.getBigDecimal(81);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 82) {
								row4.V4CMEF = null;
							} else {
	                         		
        	row4.V4CMEF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 82, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 83) {
								row4.V4CFTP = null;
							} else {
	                         		
        	row4.V4CFTP = routines.system.JDBCUtil.getString(rs_tDBInput_4, 83, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 84) {
								row4.V4CPOF = null;
							} else {
	                         		
        	row4.V4CPOF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 84, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 85) {
								row4.V4QYSH = null;
							} else {
		                          
            row4.V4QYSH = rs_tDBInput_4.getBigDecimal(85);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 86) {
								row4.V4QYDA = null;
							} else {
		                          
            row4.V4QYDA = rs_tDBInput_4.getBigDecimal(86);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 87) {
								row4.V4RCQT = null;
							} else {
		                          
            row4.V4RCQT = rs_tDBInput_4.getBigDecimal(87);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 88) {
								row4.V4VSQY = null;
							} else {
		                          
            row4.V4VSQY = rs_tDBInput_4.getBigDecimal(88);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 89) {
								row4.V4CSRC = null;
							} else {
	                         		
        	row4.V4CSRC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 89, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 90) {
								row4.V4VSRC = null;
							} else {
	                         		
        	row4.V4VSRC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 90, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 91) {
								row4.V4RVWT = null;
							} else {
		                          
            row4.V4RVWT = rs_tDBInput_4.getBigDecimal(91);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 92) {
								row4.V4RVWK = null;
							} else {
		                          
            row4.V4RVWK = rs_tDBInput_4.getBigDecimal(92);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 93) {
								row4.V4DRWT = null;
							} else {
		                          
            row4.V4DRWT = rs_tDBInput_4.getBigDecimal(93);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 94) {
								row4.V4DRWK = null;
							} else {
		                          
            row4.V4DRWK = rs_tDBInput_4.getBigDecimal(94);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 95) {
								row4.V4RPFF = null;
							} else {
	                         		
        	row4.V4RPFF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 95, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 96) {
								row4.V4PPFS = null;
							} else {
	                         		
        	row4.V4PPFS = routines.system.JDBCUtil.getString(rs_tDBInput_4, 96, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 97) {
								row4.V4PMPS = null;
							} else {
	                         		
        	row4.V4PMPS = routines.system.JDBCUtil.getString(rs_tDBInput_4, 97, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 98) {
								row4.V4MEAP = null;
							} else {
		                          
            row4.V4MEAP = rs_tDBInput_4.getBigDecimal(98);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 99) {
								row4.V4MIDT = null;
							} else {
		                          
            row4.V4MIDT = rs_tDBInput_4.getBigDecimal(99);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 100) {
								row4.V4MINV = null;
							} else {
	                         		
        	row4.V4MINV = routines.system.JDBCUtil.getString(rs_tDBInput_4, 100, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 101) {
								row4.V4MPDD = null;
							} else {
	                         		
        	row4.V4MPDD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 101, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 102) {
								row4.V4MQDD = null;
							} else {
	                         		
        	row4.V4MQDD = routines.system.JDBCUtil.getString(rs_tDBInput_4, 102, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 103) {
								row4.V4MRQT = null;
							} else {
		                          
            row4.V4MRQT = rs_tDBInput_4.getBigDecimal(103);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 104) {
								row4.V4MRCW = null;
							} else {
		                          
            row4.V4MRCW = rs_tDBInput_4.getBigDecimal(104);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 105) {
								row4.V4MRCK = null;
							} else {
		                          
            row4.V4MRCK = rs_tDBInput_4.getBigDecimal(105);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 106) {
								row4.V4PFMM = null;
							} else {
		                          
            row4.V4PFMM = rs_tDBInput_4.getBigDecimal(106);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 107) {
								row4.V4MCSD = null;
							} else {
		                          
            row4.V4MCSD = rs_tDBInput_4.getBigDecimal(107);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 108) {
								row4.V4FINV = null;
							} else {
	                         		
        	row4.V4FINV = routines.system.JDBCUtil.getString(rs_tDBInput_4, 108, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 109) {
								row4.V4FEAP = null;
							} else {
		                          
            row4.V4FEAP = rs_tDBInput_4.getBigDecimal(109);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 110) {
								row4.V4FIDT = null;
							} else {
		                          
            row4.V4FIDT = rs_tDBInput_4.getBigDecimal(110);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 111) {
								row4.V4FRCW = null;
							} else {
		                          
            row4.V4FRCW = rs_tDBInput_4.getBigDecimal(111);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 112) {
								row4.V4FCAD = null;
							} else {
		                          
            row4.V4FCAD = rs_tDBInput_4.getBigDecimal(112);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 113) {
								row4.V4FRQT = null;
							} else {
		                          
            row4.V4FRQT = rs_tDBInput_4.getBigDecimal(113);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 114) {
								row4.V4PFMD = null;
							} else {
		                          
            row4.V4PFMD = rs_tDBInput_4.getBigDecimal(114);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 115) {
								row4.V4FTCQ = null;
							} else {
		                          
            row4.V4FTCQ = rs_tDBInput_4.getBigDecimal(115);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 116) {
								row4.V4LCN = null;
							} else {
	                         		
        	row4.V4LCN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 116, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 117) {
								row4.V4SPOF = null;
							} else {
	                         		
        	row4.V4SPOF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 117, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 118) {
								row4.V4PCLN = null;
							} else {
		                          
            row4.V4PCLN = rs_tDBInput_4.getBigDecimal(118);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 119) {
								row4.V4MFVN = null;
							} else {
	                         		
        	row4.V4MFVN = routines.system.JDBCUtil.getString(rs_tDBInput_4, 119, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 120) {
								row4.V4MFID = null;
							} else {
	                         		
        	row4.V4MFID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 120, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 121) {
								row4.V4ERRF = null;
							} else {
	                         		
        	row4.V4ERRF = routines.system.JDBCUtil.getString(rs_tDBInput_4, 121, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 122) {
								row4.V4IMCC = null;
							} else {
	                         		
        	row4.V4IMCC = routines.system.JDBCUtil.getString(rs_tDBInput_4, 122, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 123) {
								row4.V4COD1 = null;
							} else {
	                         		
        	row4.V4COD1 = routines.system.JDBCUtil.getString(rs_tDBInput_4, 123, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 124) {
								row4.V4NTYP = null;
							} else {
	                         		
        	row4.V4NTYP = routines.system.JDBCUtil.getString(rs_tDBInput_4, 124, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 125) {
								row4.V4TDCD = null;
							} else {
		                          
            row4.V4TDCD = rs_tDBInput_4.getBigDecimal(125);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 126) {
								row4.V4QTIF = null;
							} else {
		                          
            row4.V4QTIF = rs_tDBInput_4.getBigDecimal(126);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 127) {
								row4.V4EADT = null;
							} else {
		                          
            row4.V4EADT = rs_tDBInput_4.getBigDecimal(127);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 128) {
								row4.V4EATM = null;
							} else {
		                          
            row4.V4EATM = rs_tDBInput_4.getBigDecimal(128);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 129) {
								row4.V4EAID = null;
							} else {
	                         		
        	row4.V4EAID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 129, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 130) {
								row4.V4MODT = null;
							} else {
		                          
            row4.V4MODT = rs_tDBInput_4.getBigDecimal(130);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 131) {
								row4.V4MOTM = null;
							} else {
		                          
            row4.V4MOTM = rs_tDBInput_4.getBigDecimal(131);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 132) {
								row4.V4MOID = null;
							} else {
	                         		
        	row4.V4MOID = routines.system.JDBCUtil.getString(rs_tDBInput_4, 132, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 133) {
								row4.V4MOPG = null;
							} else {
	                         		
        	row4.V4MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_4, 133, true);
		                    }
					



 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;
Var.V4ARBD = TimeStampConverting.convertToDate(row4.V4ARBD.toString()) ;
Var.V4PSRD = TimeStampConverting.convertToDate(row4.V4PSRD.toString()) ;
Var.V4ARDE = TimeStampConverting.convertToDate(row4.V4ARDE.toString()) ;
Var.V4MIDT = TimeStampConverting.convertToDate(row4.V4MIDT.toString()) ;
Var.V4FIDT = TimeStampConverting.convertToDate(row4.V4FIDT.toString()) ;
Var.V4ORDT = TimeStampConverting.convertToDate(row4.V4ORDT.toString()) ;
Var.AVAIL_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row4.V4AVDT.toString(),row4.V4AVTM.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row4.V4EADT.toString(),row4.V4EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row4.V4MODT.toString(),row4.V4MOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PURCHASE_ORDER_DETAIL_UPDATE_4 = null;


// # Output table : 'PURCHASE_ORDER_DETAIL_UPDATE_4'
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.SITE_ID = context.opco;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.PURCHASE_ORDER_NO = row4.V4PO ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.SMS_MAJ_LINE_NO = row4.V4ROSQ ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.SMS_MIN_LINE_NO = new BigDecimal("1");
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.VENDOR_CLASSIFICATION = row4.V4VCAT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.SHIPPING_POINT_SHIP_FROM = row4.V4ADCD;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.BUYING_GROUP = row4.V4BYGP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CUST_PREF_VENDOR = row4.V4CPVN ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.SOURCE_VENDOR = row4.V4PVND ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.VENDOR_TERMS = row4.V4TERM ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.PO_PRIMARY_STATUS = row4.V4POST ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.PO_SECONDARY_STATUS = row4.V4POSS ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.PO_TYPE = row4.V4ORTY ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.WHSE_CHANGE_CODE = row4.V4WCCD ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONF_STATUS = row4.V4CFST ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.PO_VALID_PRICING_FLAG = row4.V4VLPF ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.PO_VALID_PRICING_APPROVAL = row4.V4VLPA ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.PO_CHANGED_FLAG = row4.V4POCH ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ALLOC_SCHEDULED_RECEIPT_FLAG = row4.V4ASRF ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.PRICE_OVERRIDE_FLAG = row4.V4POFL ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MARKED_BY_MERCHANDISER_FLAG = row4.V4MKMF ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FAILED_SCORECARD_FLAG = row4.V4FSCF ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MANUALLY_ENTERED_LINE_FLAG = row4.V4MELN ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CALENDAR_DATE_ANTICIPATED_RECEIPT = Var.V4ARBD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARBD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = Var.V4PSRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4PSRD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.BUSINESS_DATE_ANTICIPATED_RECEIPT = Var.V4ARDE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARDE):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.AVAIL_TIMESTAMP = Var.AVAIL_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.AVAIL_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.BUSINESS_ORDER_DATE = Var.V4ORDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ORDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.SUGGESTED_ORDER_QTY = row4.V4PSOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.SHIP_TO_CUST = row4.V4CUNO ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CUST_ORDER_NO = row4.V4ORNO ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CUST_ORDER_LINE_NO = row4.V4ODLN ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_ORDER_QTY = row4.V4POOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_FOB_PER_ITEM = row4.V4POFB ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_FREIGHT_PER_ITEM = row4.V4POFR;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_AP_PER_ITEM = row4.V4POAP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = row4.V4IPUO;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = row4.V4IPUT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_FREIGHT_RATE_OVERRIDE = row4.V4IFRO;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_FREIGHT_TYPE_OVERRIDE = row4.V4IFRT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_PICKUP_ALLOW_PER_ITEM = row4.V4PAPI;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_OFF_INV_ALLOW = row4.V4POAL;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_UOM = row4.V4POUM;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_ALT_DELV_PRICE = row4.V4OADP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_MERCH_ALLOW_CHARGE = row4.V4ACDM ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_FREIGHT_ALLOW_CHARGE = row4.V4ACDF ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ALLOC_QTY = row4.V4ALQY ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ALLOC_QTY_SPLITS = row4.V4ALQS ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.INV_UNIT_PRICE = row4.V4IUPR ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREE_GOODS_FLAG = row4.V4FEGD ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.VENDOR_PRICE_LIST_UOM = row4.V4VPUM ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_ORDER_QTY = row4.V4PCOQ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_FOB_PER_ITEM = row4.V4PCFB;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_FREIGHT_PER_ITEM = row4.V4PCFR;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_AP_PER_ITEM = row4.V4PCAP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = row4.V4CPAL;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = row4.V4CPUT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_FREIGHT_RATE_OVERRIDE = row4.V4CFRO;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_FREIGHT_TYPE_OVERRIDE = row4.V4CFTO;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_PICKUP_ALLOW_PER_ITEM = row4.V4CPAP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_OFF_INV_ALLOW = row4.V4COIN;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_UOM = row4.V4CUOM;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_ALT_DELV_PRICE = row4.V4CADP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONF_DIST_MERCH_ALLOW_CHARGE = row4.V4CACM;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONF_DIST_FREIGHT_ALLOW_CHARGE = row4.V4CACF;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_MRPT = row4.V4CMRP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = row4.V4CMEF;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONFIRMED_PRICE_OVERRIDE_FLAG = row4.V4CPOF;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CARRIER_SHORT_QTY = row4.V4QYSH;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.RECVD_DAMAGED_ACCEPTED_QTY = row4.V4QYDA;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.RECVD_QTY = row4.V4RCQT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.VENDOR_SHORT_QTY = row4.V4VSQY;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CARRIER_SHORT_REASON_CODE = row4.V4CSRC;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.VENDOR_SHORT_REASON_CODE = row4.V4VSRC;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.RECVD_WGT = row4.V4RVWT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.DAMAGED_RECVD_WGT = row4.V4DRWT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.REVISED_PROFORMA_FLAG = row4.V4RPFF;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREIGHT_PROFORMA_STATUS = row4.V4PPFS;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_PROFORMA_STATUS = row4.V4PMPS;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_EXT_AMT_TOBE_PAID = row4.V4MEAP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_INV_DATE = Var.V4MIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4MIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_INV_NO = row4.V4MINV;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_PRICE_DIFF_STATUS = row4.V4MPDD;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_QTY_DIFF_STATUS = row4.V4MQDD;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_QTY_TO_BE_PAID = row4.V4MRQT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_WGT_TO_BE_PAID = row4.V4MRCW;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MERCH_CASH_DISC = row4.V4MCSD;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREIGHT_INV_NO = row4.V4FINV;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREIGHT_EXT_AMT_TO_BE_PAID = row4.V4FEAP;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREIGHT_INV_DATE = Var.V4FIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4FIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREIGHT_CHARGE_TO_BE_PAID = row4.V4FRCW;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREIGHT_CASH_DISC = row4.V4FCAD;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREIGHT_QTY_TO_BE_PAID = row4.V4FRQT;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.FREIGHT_CLAIM_QTY = row4.V4FTCQ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.LOAD_CTRL_NO = row4.V4LCN;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.SPLIT_PO_FLAG = row4.V4SPOF;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.TRUE_VENDOR = row4.V4MFVN;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.MANIFEST_HIST_MFG_NO = row4.V4MFID;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.NOTE1 = row4.V4COD1;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.TRUE_VENDOR_SHIP_FROM = row4.V4TDCD;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.LAST_QTY_SENT_TO_DPR = row4.V4QTIF;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CREATED_USER_ID = row4.V4EAID;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.IS_ACTIVE = true;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.V4PF_SVOP = context.svop;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.UPDATED_USER_ID = row4.V4MOID;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.UPDATED_PROGRAM_ID = row4.V4MOPG;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.IS_DELETED = false;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CREATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.UPDATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.ORIG_UNLOAD_CHARGE_PER_ITEM = row4.V4OUCI;
PURCHASE_ORDER_DETAIL_UPDATE_4_tmp.CONF_UNLOAD_CHARGE_PER_ITEM = row4.V4CUCI;
PURCHASE_ORDER_DETAIL_UPDATE_4 = PURCHASE_ORDER_DETAIL_UPDATE_4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "PURCHASE_ORDER_DETAIL_UPDATE_4"
if(PURCHASE_ORDER_DETAIL_UPDATE_4 != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PURCHASE_ORDER_DETAIL_UPDATE_4"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_CLASSIFICATION == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_CLASSIFICATION);
}

                    pstmt_tDBOutput_4.setBigDecimal(2, PURCHASE_ORDER_DETAIL_UPDATE_4.SHIPPING_POINT_SHIP_FROM);

                    pstmt_tDBOutput_4.setBigDecimal(3, PURCHASE_ORDER_DETAIL_UPDATE_4.BUYING_GROUP);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CUST_PREF_VENDOR == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, PURCHASE_ORDER_DETAIL_UPDATE_4.CUST_PREF_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.SOURCE_VENDOR == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(5, PURCHASE_ORDER_DETAIL_UPDATE_4.SOURCE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_TERMS == null) {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(6, PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.PO_PRIMARY_STATUS == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, PURCHASE_ORDER_DETAIL_UPDATE_4.PO_PRIMARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.PO_SECONDARY_STATUS == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(8, PURCHASE_ORDER_DETAIL_UPDATE_4.PO_SECONDARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.PO_TYPE == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, PURCHASE_ORDER_DETAIL_UPDATE_4.PO_TYPE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.WHSE_CHANGE_CODE == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, PURCHASE_ORDER_DETAIL_UPDATE_4.WHSE_CHANGE_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CONF_STATUS == null) {
pstmt_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(11, PURCHASE_ORDER_DETAIL_UPDATE_4.CONF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.PO_VALID_PRICING_FLAG == null) {
pstmt_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(12, PURCHASE_ORDER_DETAIL_UPDATE_4.PO_VALID_PRICING_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.PO_VALID_PRICING_APPROVAL == null) {
pstmt_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(13, PURCHASE_ORDER_DETAIL_UPDATE_4.PO_VALID_PRICING_APPROVAL);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.PO_CHANGED_FLAG == null) {
pstmt_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(14, PURCHASE_ORDER_DETAIL_UPDATE_4.PO_CHANGED_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.ALLOC_SCHEDULED_RECEIPT_FLAG == null) {
pstmt_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(15, PURCHASE_ORDER_DETAIL_UPDATE_4.ALLOC_SCHEDULED_RECEIPT_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_4.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(16, PURCHASE_ORDER_DETAIL_UPDATE_4.PRICE_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.MARKED_BY_MERCHANDISER_FLAG == null) {
pstmt_tDBOutput_4.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(17, PURCHASE_ORDER_DETAIL_UPDATE_4.MARKED_BY_MERCHANDISER_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.FAILED_SCORECARD_FLAG == null) {
pstmt_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(18, PURCHASE_ORDER_DETAIL_UPDATE_4.FAILED_SCORECARD_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(19, PURCHASE_ORDER_DETAIL_UPDATE_4.MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CALENDAR_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_4.setTimestamp(20, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.CALENDAR_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_4.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE != null) {
pstmt_tDBOutput_4.setTimestamp(21, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE.getTime()));
} else {
pstmt_tDBOutput_4.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.BUSINESS_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_4.setTimestamp(22, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.BUSINESS_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_4.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.AVAIL_TIMESTAMP != null) {
pstmt_tDBOutput_4.setTimestamp(23, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.AVAIL_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_4.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.BUSINESS_ORDER_DATE != null) {
pstmt_tDBOutput_4.setTimestamp(24, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.BUSINESS_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_4.setNull(24, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_4.setBigDecimal(25, PURCHASE_ORDER_DETAIL_UPDATE_4.SUGGESTED_ORDER_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.SHIP_TO_CUST == null) {
pstmt_tDBOutput_4.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(26, PURCHASE_ORDER_DETAIL_UPDATE_4.SHIP_TO_CUST);
}

                    pstmt_tDBOutput_4.setBigDecimal(27, PURCHASE_ORDER_DETAIL_UPDATE_4.CUST_ORDER_NO);

                    pstmt_tDBOutput_4.setBigDecimal(28, PURCHASE_ORDER_DETAIL_UPDATE_4.CUST_ORDER_LINE_NO);

                    pstmt_tDBOutput_4.setBigDecimal(29, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_ORDER_QTY);

                    pstmt_tDBOutput_4.setBigDecimal(30, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_FOB_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(31, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(32, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_AP_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(33, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_4.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(34, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_4.setBigDecimal(35, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_4.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(36, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_4.setBigDecimal(37, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(38, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_UOM == null) {
pstmt_tDBOutput_4.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(39, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_UOM);
}

                    pstmt_tDBOutput_4.setBigDecimal(40, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_ALT_DELV_PRICE);

                    pstmt_tDBOutput_4.setBigDecimal(41, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_4.setBigDecimal(42, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_4.setBigDecimal(43, PURCHASE_ORDER_DETAIL_UPDATE_4.ALLOC_QTY);

                    pstmt_tDBOutput_4.setBigDecimal(44, PURCHASE_ORDER_DETAIL_UPDATE_4.ALLOC_QTY_SPLITS);

                    pstmt_tDBOutput_4.setBigDecimal(45, PURCHASE_ORDER_DETAIL_UPDATE_4.INV_UNIT_PRICE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.FREE_GOODS_FLAG == null) {
pstmt_tDBOutput_4.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(46, PURCHASE_ORDER_DETAIL_UPDATE_4.FREE_GOODS_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_PRICE_LIST_UOM == null) {
pstmt_tDBOutput_4.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(47, PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_PRICE_LIST_UOM);
}

                    pstmt_tDBOutput_4.setBigDecimal(48, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_ORDER_QTY);

                    pstmt_tDBOutput_4.setBigDecimal(49, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_FOB_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(50, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(51, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_AP_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(52, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_4.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(53, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_4.setBigDecimal(54, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_4.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(55, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_4.setBigDecimal(56, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(57, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_UOM == null) {
pstmt_tDBOutput_4.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(58, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_UOM);
}

                    pstmt_tDBOutput_4.setBigDecimal(59, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_ALT_DELV_PRICE);

                    pstmt_tDBOutput_4.setBigDecimal(60, PURCHASE_ORDER_DETAIL_UPDATE_4.CONF_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_4.setBigDecimal(61, PURCHASE_ORDER_DETAIL_UPDATE_4.CONF_DIST_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_4.setBigDecimal(62, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_MRPT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_4.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(63, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_4.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(64, PURCHASE_ORDER_DETAIL_UPDATE_4.CONFIRMED_PRICE_OVERRIDE_FLAG);
}

                    pstmt_tDBOutput_4.setBigDecimal(65, PURCHASE_ORDER_DETAIL_UPDATE_4.CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_4.setBigDecimal(66, PURCHASE_ORDER_DETAIL_UPDATE_4.RECVD_DAMAGED_ACCEPTED_QTY);

                    pstmt_tDBOutput_4.setBigDecimal(67, PURCHASE_ORDER_DETAIL_UPDATE_4.RECVD_QTY);

                    pstmt_tDBOutput_4.setBigDecimal(68, PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_SHORT_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CARRIER_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_4.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(69, PURCHASE_ORDER_DETAIL_UPDATE_4.CARRIER_SHORT_REASON_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_4.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(70, PURCHASE_ORDER_DETAIL_UPDATE_4.VENDOR_SHORT_REASON_CODE);
}

                    pstmt_tDBOutput_4.setBigDecimal(71, PURCHASE_ORDER_DETAIL_UPDATE_4.RECVD_WGT);

                    pstmt_tDBOutput_4.setBigDecimal(72, PURCHASE_ORDER_DETAIL_UPDATE_4.DAMAGED_RECVD_WGT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.REVISED_PROFORMA_FLAG == null) {
pstmt_tDBOutput_4.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(73, PURCHASE_ORDER_DETAIL_UPDATE_4.REVISED_PROFORMA_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_PROFORMA_STATUS == null) {
pstmt_tDBOutput_4.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(74, PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_PROFORMA_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_PROFORMA_STATUS == null) {
pstmt_tDBOutput_4.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(75, PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_PROFORMA_STATUS);
}

                    pstmt_tDBOutput_4.setBigDecimal(76, PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_EXT_AMT_TOBE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_INV_DATE != null) {
pstmt_tDBOutput_4.setTimestamp(77, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_4.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_INV_NO == null) {
pstmt_tDBOutput_4.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(78, PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_INV_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_PRICE_DIFF_STATUS == null) {
pstmt_tDBOutput_4.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(79, PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_PRICE_DIFF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_QTY_DIFF_STATUS == null) {
pstmt_tDBOutput_4.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(80, PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_QTY_DIFF_STATUS);
}

                    pstmt_tDBOutput_4.setBigDecimal(81, PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_4.setBigDecimal(82, PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_WGT_TO_BE_PAID);

                    pstmt_tDBOutput_4.setBigDecimal(83, PURCHASE_ORDER_DETAIL_UPDATE_4.MERCH_CASH_DISC);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_INV_NO == null) {
pstmt_tDBOutput_4.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(84, PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_INV_NO);
}

                    pstmt_tDBOutput_4.setBigDecimal(85, PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_EXT_AMT_TO_BE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_INV_DATE != null) {
pstmt_tDBOutput_4.setTimestamp(86, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_4.setNull(86, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_4.setBigDecimal(87, PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_CHARGE_TO_BE_PAID);

                    pstmt_tDBOutput_4.setBigDecimal(88, PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_CASH_DISC);

                    pstmt_tDBOutput_4.setBigDecimal(89, PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_4.setBigDecimal(90, PURCHASE_ORDER_DETAIL_UPDATE_4.FREIGHT_CLAIM_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.LOAD_CTRL_NO == null) {
pstmt_tDBOutput_4.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(91, PURCHASE_ORDER_DETAIL_UPDATE_4.LOAD_CTRL_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.SPLIT_PO_FLAG == null) {
pstmt_tDBOutput_4.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(92, PURCHASE_ORDER_DETAIL_UPDATE_4.SPLIT_PO_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.TRUE_VENDOR == null) {
pstmt_tDBOutput_4.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(93, PURCHASE_ORDER_DETAIL_UPDATE_4.TRUE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.MANIFEST_HIST_MFG_NO == null) {
pstmt_tDBOutput_4.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(94, PURCHASE_ORDER_DETAIL_UPDATE_4.MANIFEST_HIST_MFG_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.NOTE1 == null) {
pstmt_tDBOutput_4.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(95, PURCHASE_ORDER_DETAIL_UPDATE_4.NOTE1);
}

                    pstmt_tDBOutput_4.setBigDecimal(96, PURCHASE_ORDER_DETAIL_UPDATE_4.TRUE_VENDOR_SHIP_FROM);

                    pstmt_tDBOutput_4.setBigDecimal(97, PURCHASE_ORDER_DETAIL_UPDATE_4.LAST_QTY_SENT_TO_DPR);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_4.setTimestamp(98, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_4.setNull(98, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CREATED_USER_ID == null) {
pstmt_tDBOutput_4.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(99, PURCHASE_ORDER_DETAIL_UPDATE_4.CREATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.IS_ACTIVE == null) {
pstmt_tDBOutput_4.setNull(100, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(100, PURCHASE_ORDER_DETAIL_UPDATE_4.IS_ACTIVE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.V4PF_SVOP == null) {
pstmt_tDBOutput_4.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(101, PURCHASE_ORDER_DETAIL_UPDATE_4.V4PF_SVOP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_USER_ID == null) {
pstmt_tDBOutput_4.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(102, PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_4.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(103, PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_PROGRAM_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_4.setTimestamp(104, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_4.setNull(104, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.IS_DELETED == null) {
pstmt_tDBOutput_4.setNull(105, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_4.setBoolean(105, PURCHASE_ORDER_DETAIL_UPDATE_4.IS_DELETED);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CREATED_ORIGIN == null) {
pstmt_tDBOutput_4.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(106, PURCHASE_ORDER_DETAIL_UPDATE_4.CREATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_4.setTimestamp(107, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_4.setNull(107, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_4.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(108, PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_4.setTimestamp(109, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_4.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_4.setNull(109, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_4.setBigDecimal(110, PURCHASE_ORDER_DETAIL_UPDATE_4.ORIG_UNLOAD_CHARGE_PER_ITEM);

                    pstmt_tDBOutput_4.setBigDecimal(111, PURCHASE_ORDER_DETAIL_UPDATE_4.CONF_UNLOAD_CHARGE_PER_ITEM);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.SITE_ID == null) {
pstmt_tDBOutput_4.setNull(112 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(112 + count_tDBOutput_4, PURCHASE_ORDER_DETAIL_UPDATE_4.SITE_ID);
}


                    if(PURCHASE_ORDER_DETAIL_UPDATE_4.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_4.setNull(113 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(113 + count_tDBOutput_4, PURCHASE_ORDER_DETAIL_UPDATE_4.PURCHASE_ORDER_NO);
}


                    pstmt_tDBOutput_4.setBigDecimal(114 + count_tDBOutput_4, PURCHASE_ORDER_DETAIL_UPDATE_4.SMS_MAJ_LINE_NO);


                    pstmt_tDBOutput_4.setBigDecimal(115 + count_tDBOutput_4, PURCHASE_ORDER_DETAIL_UPDATE_4.SMS_MIN_LINE_NO);


    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                if ((batchSize_tDBOutput_4 > 0) && (batchSizeCounter_tDBOutput_4 > 0)) {
                try {
                		int countSum_tDBOutput_4 = 0;
                		    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
            	    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
            	    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
            	    	
                batchSizeCounter_tDBOutput_4 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
			    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
			    	String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					}else{
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}
			    	
			    	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
					
			    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
			    	
			    	System.err.println(errormessage_tDBOutput_4);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    	
                    }
                    conn_tDBOutput_4.commit();
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_4 = 0;
                    }
                    commitCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "PURCHASE_ORDER_DETAIL_UPDATE_4"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_4", end_Hash.get("tDBInput_4")-start_Hash.get("tDBInput_4"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				}
		    	
		    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
			
	    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
			if(rowsToCommitCount_tDBOutput_4 != 0){
				
			}
			conn_tDBOutput_4.commit();
			if(rowsToCommitCount_tDBOutput_4 != 0){
				
				rowsToCommitCount_tDBOutput_4 = 0;
			}
			commitCounter_tDBOutput_4 = 0;
		
    	conn_tDBOutput_4 .close();
    	
    	resourceMap.put("finish_tDBOutput_4", true);
    	

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PURCHASE_ORDER_DETAIL_UPDATE_4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_4", end_Hash.get("tDBOutput_4")-start_Hash.get("tDBOutput_4"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Starting the Updating Data from IMHBV4PF_5 to PURCHASE_ORDER_DETAIL...........");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class PURCHASE_ORDER_DETAIL_UPDATE_5Struct implements routines.system.IPersistableRow<PURCHASE_ORDER_DETAIL_UPDATE_5Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public BigDecimal SMS_MAJ_LINE_NO;

				public BigDecimal getSMS_MAJ_LINE_NO () {
					return this.SMS_MAJ_LINE_NO;
				}
				
			    public BigDecimal SMS_MIN_LINE_NO;

				public BigDecimal getSMS_MIN_LINE_NO () {
					return this.SMS_MIN_LINE_NO;
				}
				
			    public String VENDOR_CLASSIFICATION;

				public String getVENDOR_CLASSIFICATION () {
					return this.VENDOR_CLASSIFICATION;
				}
				
			    public BigDecimal SHIPPING_POINT_SHIP_FROM;

				public BigDecimal getSHIPPING_POINT_SHIP_FROM () {
					return this.SHIPPING_POINT_SHIP_FROM;
				}
				
			    public BigDecimal BUYING_GROUP;

				public BigDecimal getBUYING_GROUP () {
					return this.BUYING_GROUP;
				}
				
			    public String CUST_PREF_VENDOR;

				public String getCUST_PREF_VENDOR () {
					return this.CUST_PREF_VENDOR;
				}
				
			    public String SOURCE_VENDOR;

				public String getSOURCE_VENDOR () {
					return this.SOURCE_VENDOR;
				}
				
			    public String VENDOR_TERMS;

				public String getVENDOR_TERMS () {
					return this.VENDOR_TERMS;
				}
				
			    public String PO_PRIMARY_STATUS;

				public String getPO_PRIMARY_STATUS () {
					return this.PO_PRIMARY_STATUS;
				}
				
			    public String PO_SECONDARY_STATUS;

				public String getPO_SECONDARY_STATUS () {
					return this.PO_SECONDARY_STATUS;
				}
				
			    public String PO_TYPE;

				public String getPO_TYPE () {
					return this.PO_TYPE;
				}
				
			    public String WHSE_CHANGE_CODE;

				public String getWHSE_CHANGE_CODE () {
					return this.WHSE_CHANGE_CODE;
				}
				
			    public String CONF_STATUS;

				public String getCONF_STATUS () {
					return this.CONF_STATUS;
				}
				
			    public String PO_VALID_PRICING_FLAG;

				public String getPO_VALID_PRICING_FLAG () {
					return this.PO_VALID_PRICING_FLAG;
				}
				
			    public String PO_VALID_PRICING_APPROVAL;

				public String getPO_VALID_PRICING_APPROVAL () {
					return this.PO_VALID_PRICING_APPROVAL;
				}
				
			    public String PO_CHANGED_FLAG;

				public String getPO_CHANGED_FLAG () {
					return this.PO_CHANGED_FLAG;
				}
				
			    public String ALLOC_SCHEDULED_RECEIPT_FLAG;

				public String getALLOC_SCHEDULED_RECEIPT_FLAG () {
					return this.ALLOC_SCHEDULED_RECEIPT_FLAG;
				}
				
			    public String PRICE_OVERRIDE_FLAG;

				public String getPRICE_OVERRIDE_FLAG () {
					return this.PRICE_OVERRIDE_FLAG;
				}
				
			    public String MARKED_BY_MERCHANDISER_FLAG;

				public String getMARKED_BY_MERCHANDISER_FLAG () {
					return this.MARKED_BY_MERCHANDISER_FLAG;
				}
				
			    public String FAILED_SCORECARD_FLAG;

				public String getFAILED_SCORECARD_FLAG () {
					return this.FAILED_SCORECARD_FLAG;
				}
				
			    public String MANUALLY_ENTERED_LINE_FLAG;

				public String getMANUALLY_ENTERED_LINE_FLAG () {
					return this.MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public java.util.Date CALENDAR_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ANTICIPATED_RECEIPT () {
					return this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;

				public java.util.Date getCALENDAR_DATE_SCHEDULED_RECEIPT_DATE () {
					return this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
				}
				
			    public java.util.Date BUSINESS_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ANTICIPATED_RECEIPT () {
					return this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date AVAIL_TIMESTAMP;

				public java.util.Date getAVAIL_TIMESTAMP () {
					return this.AVAIL_TIMESTAMP;
				}
				
			    public java.util.Date BUSINESS_ORDER_DATE;

				public java.util.Date getBUSINESS_ORDER_DATE () {
					return this.BUSINESS_ORDER_DATE;
				}
				
			    public BigDecimal SUGGESTED_ORDER_QTY;

				public BigDecimal getSUGGESTED_ORDER_QTY () {
					return this.SUGGESTED_ORDER_QTY;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public BigDecimal CUST_ORDER_NO;

				public BigDecimal getCUST_ORDER_NO () {
					return this.CUST_ORDER_NO;
				}
				
			    public BigDecimal CUST_ORDER_LINE_NO;

				public BigDecimal getCUST_ORDER_LINE_NO () {
					return this.CUST_ORDER_LINE_NO;
				}
				
			    public BigDecimal ORIG_ORDER_QTY;

				public BigDecimal getORIG_ORDER_QTY () {
					return this.ORIG_ORDER_QTY;
				}
				
			    public BigDecimal ORIG_FOB_PER_ITEM;

				public BigDecimal getORIG_FOB_PER_ITEM () {
					return this.ORIG_FOB_PER_ITEM;
				}
				
			    public BigDecimal ORIG_FREIGHT_PER_ITEM;

				public BigDecimal getORIG_FREIGHT_PER_ITEM () {
					return this.ORIG_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal ORIG_AP_PER_ITEM;

				public BigDecimal getORIG_AP_PER_ITEM () {
					return this.ORIG_AP_PER_ITEM;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getORIG_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getORIG_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getORIG_FREIGHT_RATE_OVERRIDE () {
					return this.ORIG_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String ORIG_FREIGHT_TYPE_OVERRIDE;

				public String getORIG_FREIGHT_TYPE_OVERRIDE () {
					return this.ORIG_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getORIG_PICKUP_ALLOW_PER_ITEM () {
					return this.ORIG_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal ORIG_OFF_INV_ALLOW;

				public BigDecimal getORIG_OFF_INV_ALLOW () {
					return this.ORIG_OFF_INV_ALLOW;
				}
				
			    public String ORIG_UOM;

				public String getORIG_UOM () {
					return this.ORIG_UOM;
				}
				
			    public BigDecimal ORIG_ALT_DELV_PRICE;

				public BigDecimal getORIG_ALT_DELV_PRICE () {
					return this.ORIG_ALT_DELV_PRICE;
				}
				
			    public BigDecimal ORIG_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_MERCH_ALLOW_CHARGE () {
					return this.ORIG_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal ORIG_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getORIG_FREIGHT_ALLOW_CHARGE () {
					return this.ORIG_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal ALLOC_QTY;

				public BigDecimal getALLOC_QTY () {
					return this.ALLOC_QTY;
				}
				
			    public BigDecimal ALLOC_QTY_SPLITS;

				public BigDecimal getALLOC_QTY_SPLITS () {
					return this.ALLOC_QTY_SPLITS;
				}
				
			    public BigDecimal INV_UNIT_PRICE;

				public BigDecimal getINV_UNIT_PRICE () {
					return this.INV_UNIT_PRICE;
				}
				
			    public String FREE_GOODS_FLAG;

				public String getFREE_GOODS_FLAG () {
					return this.FREE_GOODS_FLAG;
				}
				
			    public String VENDOR_PRICE_LIST_UOM;

				public String getVENDOR_PRICE_LIST_UOM () {
					return this.VENDOR_PRICE_LIST_UOM;
				}
				
			    public BigDecimal CONFIRMED_ORDER_QTY;

				public BigDecimal getCONFIRMED_ORDER_QTY () {
					return this.CONFIRMED_ORDER_QTY;
				}
				
			    public BigDecimal CONFIRMED_FOB_PER_ITEM;

				public BigDecimal getCONFIRMED_FOB_PER_ITEM () {
					return this.CONFIRMED_FOB_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_PER_ITEM;

				public BigDecimal getCONFIRMED_FREIGHT_PER_ITEM () {
					return this.CONFIRMED_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_AP_PER_ITEM;

				public BigDecimal getCONFIRMED_AP_PER_ITEM () {
					return this.CONFIRMED_AP_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getCONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_FREIGHT_RATE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_FREIGHT_TYPE_OVERRIDE;

				public String getCONFIRMED_FREIGHT_TYPE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_PER_ITEM () {
					return this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_OFF_INV_ALLOW;

				public BigDecimal getCONFIRMED_OFF_INV_ALLOW () {
					return this.CONFIRMED_OFF_INV_ALLOW;
				}
				
			    public String CONFIRMED_UOM;

				public String getCONFIRMED_UOM () {
					return this.CONFIRMED_UOM;
				}
				
			    public BigDecimal CONFIRMED_ALT_DELV_PRICE;

				public BigDecimal getCONFIRMED_ALT_DELV_PRICE () {
					return this.CONFIRMED_ALT_DELV_PRICE;
				}
				
			    public BigDecimal CONF_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_MERCH_ALLOW_CHARGE () {
					return this.CONF_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONF_DIST_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_FREIGHT_ALLOW_CHARGE () {
					return this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_MRPT;

				public BigDecimal getCONFIRMED_MRPT () {
					return this.CONFIRMED_MRPT;
				}
				
			    public String CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;

				public String getCONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG () {
					return this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public String CONFIRMED_PRICE_OVERRIDE_FLAG;

				public String getCONFIRMED_PRICE_OVERRIDE_FLAG () {
					return this.CONFIRMED_PRICE_OVERRIDE_FLAG;
				}
				
			    public BigDecimal CARRIER_SHORT_QTY;

				public BigDecimal getCARRIER_SHORT_QTY () {
					return this.CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal RECVD_DAMAGED_ACCEPTED_QTY;

				public BigDecimal getRECVD_DAMAGED_ACCEPTED_QTY () {
					return this.RECVD_DAMAGED_ACCEPTED_QTY;
				}
				
			    public BigDecimal RECVD_QTY;

				public BigDecimal getRECVD_QTY () {
					return this.RECVD_QTY;
				}
				
			    public BigDecimal VENDOR_SHORT_QTY;

				public BigDecimal getVENDOR_SHORT_QTY () {
					return this.VENDOR_SHORT_QTY;
				}
				
			    public String CARRIER_SHORT_REASON_CODE;

				public String getCARRIER_SHORT_REASON_CODE () {
					return this.CARRIER_SHORT_REASON_CODE;
				}
				
			    public String VENDOR_SHORT_REASON_CODE;

				public String getVENDOR_SHORT_REASON_CODE () {
					return this.VENDOR_SHORT_REASON_CODE;
				}
				
			    public BigDecimal RECVD_WGT;

				public BigDecimal getRECVD_WGT () {
					return this.RECVD_WGT;
				}
				
			    public BigDecimal DAMAGED_RECVD_WGT;

				public BigDecimal getDAMAGED_RECVD_WGT () {
					return this.DAMAGED_RECVD_WGT;
				}
				
			    public String REVISED_PROFORMA_FLAG;

				public String getREVISED_PROFORMA_FLAG () {
					return this.REVISED_PROFORMA_FLAG;
				}
				
			    public String FREIGHT_PROFORMA_STATUS;

				public String getFREIGHT_PROFORMA_STATUS () {
					return this.FREIGHT_PROFORMA_STATUS;
				}
				
			    public String MERCH_PROFORMA_STATUS;

				public String getMERCH_PROFORMA_STATUS () {
					return this.MERCH_PROFORMA_STATUS;
				}
				
			    public BigDecimal MERCH_EXT_AMT_TOBE_PAID;

				public BigDecimal getMERCH_EXT_AMT_TOBE_PAID () {
					return this.MERCH_EXT_AMT_TOBE_PAID;
				}
				
			    public java.util.Date MERCH_INV_DATE;

				public java.util.Date getMERCH_INV_DATE () {
					return this.MERCH_INV_DATE;
				}
				
			    public String MERCH_INV_NO;

				public String getMERCH_INV_NO () {
					return this.MERCH_INV_NO;
				}
				
			    public String MERCH_PRICE_DIFF_STATUS;

				public String getMERCH_PRICE_DIFF_STATUS () {
					return this.MERCH_PRICE_DIFF_STATUS;
				}
				
			    public String MERCH_QTY_DIFF_STATUS;

				public String getMERCH_QTY_DIFF_STATUS () {
					return this.MERCH_QTY_DIFF_STATUS;
				}
				
			    public BigDecimal MERCH_QTY_TO_BE_PAID;

				public BigDecimal getMERCH_QTY_TO_BE_PAID () {
					return this.MERCH_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_WGT_TO_BE_PAID;

				public BigDecimal getMERCH_WGT_TO_BE_PAID () {
					return this.MERCH_WGT_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_CASH_DISC;

				public BigDecimal getMERCH_CASH_DISC () {
					return this.MERCH_CASH_DISC;
				}
				
			    public String FREIGHT_INV_NO;

				public String getFREIGHT_INV_NO () {
					return this.FREIGHT_INV_NO;
				}
				
			    public BigDecimal FREIGHT_EXT_AMT_TO_BE_PAID;

				public BigDecimal getFREIGHT_EXT_AMT_TO_BE_PAID () {
					return this.FREIGHT_EXT_AMT_TO_BE_PAID;
				}
				
			    public java.util.Date FREIGHT_INV_DATE;

				public java.util.Date getFREIGHT_INV_DATE () {
					return this.FREIGHT_INV_DATE;
				}
				
			    public BigDecimal FREIGHT_CHARGE_TO_BE_PAID;

				public BigDecimal getFREIGHT_CHARGE_TO_BE_PAID () {
					return this.FREIGHT_CHARGE_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CASH_DISC;

				public BigDecimal getFREIGHT_CASH_DISC () {
					return this.FREIGHT_CASH_DISC;
				}
				
			    public BigDecimal FREIGHT_QTY_TO_BE_PAID;

				public BigDecimal getFREIGHT_QTY_TO_BE_PAID () {
					return this.FREIGHT_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CLAIM_QTY;

				public BigDecimal getFREIGHT_CLAIM_QTY () {
					return this.FREIGHT_CLAIM_QTY;
				}
				
			    public String LOAD_CTRL_NO;

				public String getLOAD_CTRL_NO () {
					return this.LOAD_CTRL_NO;
				}
				
			    public String SPLIT_PO_FLAG;

				public String getSPLIT_PO_FLAG () {
					return this.SPLIT_PO_FLAG;
				}
				
			    public String TRUE_VENDOR;

				public String getTRUE_VENDOR () {
					return this.TRUE_VENDOR;
				}
				
			    public String MANIFEST_HIST_MFG_NO;

				public String getMANIFEST_HIST_MFG_NO () {
					return this.MANIFEST_HIST_MFG_NO;
				}
				
			    public String NOTE1;

				public String getNOTE1 () {
					return this.NOTE1;
				}
				
			    public BigDecimal TRUE_VENDOR_SHIP_FROM;

				public BigDecimal getTRUE_VENDOR_SHIP_FROM () {
					return this.TRUE_VENDOR_SHIP_FROM;
				}
				
			    public BigDecimal LAST_QTY_SENT_TO_DPR;

				public BigDecimal getLAST_QTY_SENT_TO_DPR () {
					return this.LAST_QTY_SENT_TO_DPR;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String V4PF_SVOP;

				public String getV4PF_SVOP () {
					return this.V4PF_SVOP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public BigDecimal ORIG_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getORIG_UNLOAD_CHARGE_PER_ITEM () {
					return this.ORIG_UNLOAD_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal CONF_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getCONF_UNLOAD_CHARGE_PER_ITEM () {
					return this.CONF_UNLOAD_CHARGE_PER_ITEM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.SMS_MAJ_LINE_NO == null) ? 0 : this.SMS_MAJ_LINE_NO.hashCode());
					
						result = prime * result + ((this.SMS_MIN_LINE_NO == null) ? 0 : this.SMS_MIN_LINE_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PURCHASE_ORDER_DETAIL_UPDATE_5Struct other = (PURCHASE_ORDER_DETAIL_UPDATE_5Struct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.SMS_MAJ_LINE_NO == null) {
							if (other.SMS_MAJ_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MAJ_LINE_NO.equals(other.SMS_MAJ_LINE_NO))
						
							return false;
					
						if (this.SMS_MIN_LINE_NO == null) {
							if (other.SMS_MIN_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MIN_LINE_NO.equals(other.SMS_MIN_LINE_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PURCHASE_ORDER_DETAIL_UPDATE_5Struct other) {

		other.SITE_ID = this.SITE_ID;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            other.VENDOR_CLASSIFICATION = this.VENDOR_CLASSIFICATION;
	            other.SHIPPING_POINT_SHIP_FROM = this.SHIPPING_POINT_SHIP_FROM;
	            other.BUYING_GROUP = this.BUYING_GROUP;
	            other.CUST_PREF_VENDOR = this.CUST_PREF_VENDOR;
	            other.SOURCE_VENDOR = this.SOURCE_VENDOR;
	            other.VENDOR_TERMS = this.VENDOR_TERMS;
	            other.PO_PRIMARY_STATUS = this.PO_PRIMARY_STATUS;
	            other.PO_SECONDARY_STATUS = this.PO_SECONDARY_STATUS;
	            other.PO_TYPE = this.PO_TYPE;
	            other.WHSE_CHANGE_CODE = this.WHSE_CHANGE_CODE;
	            other.CONF_STATUS = this.CONF_STATUS;
	            other.PO_VALID_PRICING_FLAG = this.PO_VALID_PRICING_FLAG;
	            other.PO_VALID_PRICING_APPROVAL = this.PO_VALID_PRICING_APPROVAL;
	            other.PO_CHANGED_FLAG = this.PO_CHANGED_FLAG;
	            other.ALLOC_SCHEDULED_RECEIPT_FLAG = this.ALLOC_SCHEDULED_RECEIPT_FLAG;
	            other.PRICE_OVERRIDE_FLAG = this.PRICE_OVERRIDE_FLAG;
	            other.MARKED_BY_MERCHANDISER_FLAG = this.MARKED_BY_MERCHANDISER_FLAG;
	            other.FAILED_SCORECARD_FLAG = this.FAILED_SCORECARD_FLAG;
	            other.MANUALLY_ENTERED_LINE_FLAG = this.MANUALLY_ENTERED_LINE_FLAG;
	            other.CALENDAR_DATE_ANTICIPATED_RECEIPT = this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
	            other.BUSINESS_DATE_ANTICIPATED_RECEIPT = this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
	            other.AVAIL_TIMESTAMP = this.AVAIL_TIMESTAMP;
	            other.BUSINESS_ORDER_DATE = this.BUSINESS_ORDER_DATE;
	            other.SUGGESTED_ORDER_QTY = this.SUGGESTED_ORDER_QTY;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.CUST_ORDER_NO = this.CUST_ORDER_NO;
	            other.CUST_ORDER_LINE_NO = this.CUST_ORDER_LINE_NO;
	            other.ORIG_ORDER_QTY = this.ORIG_ORDER_QTY;
	            other.ORIG_FOB_PER_ITEM = this.ORIG_FOB_PER_ITEM;
	            other.ORIG_FREIGHT_PER_ITEM = this.ORIG_FREIGHT_PER_ITEM;
	            other.ORIG_AP_PER_ITEM = this.ORIG_AP_PER_ITEM;
	            other.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.ORIG_FREIGHT_RATE_OVERRIDE = this.ORIG_FREIGHT_RATE_OVERRIDE;
	            other.ORIG_FREIGHT_TYPE_OVERRIDE = this.ORIG_FREIGHT_TYPE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_PER_ITEM = this.ORIG_PICKUP_ALLOW_PER_ITEM;
	            other.ORIG_OFF_INV_ALLOW = this.ORIG_OFF_INV_ALLOW;
	            other.ORIG_UOM = this.ORIG_UOM;
	            other.ORIG_ALT_DELV_PRICE = this.ORIG_ALT_DELV_PRICE;
	            other.ORIG_MERCH_ALLOW_CHARGE = this.ORIG_MERCH_ALLOW_CHARGE;
	            other.ORIG_FREIGHT_ALLOW_CHARGE = this.ORIG_FREIGHT_ALLOW_CHARGE;
	            other.ALLOC_QTY = this.ALLOC_QTY;
	            other.ALLOC_QTY_SPLITS = this.ALLOC_QTY_SPLITS;
	            other.INV_UNIT_PRICE = this.INV_UNIT_PRICE;
	            other.FREE_GOODS_FLAG = this.FREE_GOODS_FLAG;
	            other.VENDOR_PRICE_LIST_UOM = this.VENDOR_PRICE_LIST_UOM;
	            other.CONFIRMED_ORDER_QTY = this.CONFIRMED_ORDER_QTY;
	            other.CONFIRMED_FOB_PER_ITEM = this.CONFIRMED_FOB_PER_ITEM;
	            other.CONFIRMED_FREIGHT_PER_ITEM = this.CONFIRMED_FREIGHT_PER_ITEM;
	            other.CONFIRMED_AP_PER_ITEM = this.CONFIRMED_AP_PER_ITEM;
	            other.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_RATE_OVERRIDE = this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_TYPE_OVERRIDE = this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_PER_ITEM = this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
	            other.CONFIRMED_OFF_INV_ALLOW = this.CONFIRMED_OFF_INV_ALLOW;
	            other.CONFIRMED_UOM = this.CONFIRMED_UOM;
	            other.CONFIRMED_ALT_DELV_PRICE = this.CONFIRMED_ALT_DELV_PRICE;
	            other.CONF_DIST_MERCH_ALLOW_CHARGE = this.CONF_DIST_MERCH_ALLOW_CHARGE;
	            other.CONF_DIST_FREIGHT_ALLOW_CHARGE = this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_MRPT = this.CONFIRMED_MRPT;
	            other.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
	            other.CONFIRMED_PRICE_OVERRIDE_FLAG = this.CONFIRMED_PRICE_OVERRIDE_FLAG;
	            other.CARRIER_SHORT_QTY = this.CARRIER_SHORT_QTY;
	            other.RECVD_DAMAGED_ACCEPTED_QTY = this.RECVD_DAMAGED_ACCEPTED_QTY;
	            other.RECVD_QTY = this.RECVD_QTY;
	            other.VENDOR_SHORT_QTY = this.VENDOR_SHORT_QTY;
	            other.CARRIER_SHORT_REASON_CODE = this.CARRIER_SHORT_REASON_CODE;
	            other.VENDOR_SHORT_REASON_CODE = this.VENDOR_SHORT_REASON_CODE;
	            other.RECVD_WGT = this.RECVD_WGT;
	            other.DAMAGED_RECVD_WGT = this.DAMAGED_RECVD_WGT;
	            other.REVISED_PROFORMA_FLAG = this.REVISED_PROFORMA_FLAG;
	            other.FREIGHT_PROFORMA_STATUS = this.FREIGHT_PROFORMA_STATUS;
	            other.MERCH_PROFORMA_STATUS = this.MERCH_PROFORMA_STATUS;
	            other.MERCH_EXT_AMT_TOBE_PAID = this.MERCH_EXT_AMT_TOBE_PAID;
	            other.MERCH_INV_DATE = this.MERCH_INV_DATE;
	            other.MERCH_INV_NO = this.MERCH_INV_NO;
	            other.MERCH_PRICE_DIFF_STATUS = this.MERCH_PRICE_DIFF_STATUS;
	            other.MERCH_QTY_DIFF_STATUS = this.MERCH_QTY_DIFF_STATUS;
	            other.MERCH_QTY_TO_BE_PAID = this.MERCH_QTY_TO_BE_PAID;
	            other.MERCH_WGT_TO_BE_PAID = this.MERCH_WGT_TO_BE_PAID;
	            other.MERCH_CASH_DISC = this.MERCH_CASH_DISC;
	            other.FREIGHT_INV_NO = this.FREIGHT_INV_NO;
	            other.FREIGHT_EXT_AMT_TO_BE_PAID = this.FREIGHT_EXT_AMT_TO_BE_PAID;
	            other.FREIGHT_INV_DATE = this.FREIGHT_INV_DATE;
	            other.FREIGHT_CHARGE_TO_BE_PAID = this.FREIGHT_CHARGE_TO_BE_PAID;
	            other.FREIGHT_CASH_DISC = this.FREIGHT_CASH_DISC;
	            other.FREIGHT_QTY_TO_BE_PAID = this.FREIGHT_QTY_TO_BE_PAID;
	            other.FREIGHT_CLAIM_QTY = this.FREIGHT_CLAIM_QTY;
	            other.LOAD_CTRL_NO = this.LOAD_CTRL_NO;
	            other.SPLIT_PO_FLAG = this.SPLIT_PO_FLAG;
	            other.TRUE_VENDOR = this.TRUE_VENDOR;
	            other.MANIFEST_HIST_MFG_NO = this.MANIFEST_HIST_MFG_NO;
	            other.NOTE1 = this.NOTE1;
	            other.TRUE_VENDOR_SHIP_FROM = this.TRUE_VENDOR_SHIP_FROM;
	            other.LAST_QTY_SENT_TO_DPR = this.LAST_QTY_SENT_TO_DPR;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.V4PF_SVOP = this.V4PF_SVOP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.ORIG_UNLOAD_CHARGE_PER_ITEM = this.ORIG_UNLOAD_CHARGE_PER_ITEM;
	            other.CONF_UNLOAD_CHARGE_PER_ITEM = this.CONF_UNLOAD_CHARGE_PER_ITEM;
	            
	}

	public void copyKeysDataTo(PURCHASE_ORDER_DETAIL_UPDATE_5Struct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            	other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",SMS_MAJ_LINE_NO="+String.valueOf(SMS_MAJ_LINE_NO));
		sb.append(",SMS_MIN_LINE_NO="+String.valueOf(SMS_MIN_LINE_NO));
		sb.append(",VENDOR_CLASSIFICATION="+VENDOR_CLASSIFICATION);
		sb.append(",SHIPPING_POINT_SHIP_FROM="+String.valueOf(SHIPPING_POINT_SHIP_FROM));
		sb.append(",BUYING_GROUP="+String.valueOf(BUYING_GROUP));
		sb.append(",CUST_PREF_VENDOR="+CUST_PREF_VENDOR);
		sb.append(",SOURCE_VENDOR="+SOURCE_VENDOR);
		sb.append(",VENDOR_TERMS="+VENDOR_TERMS);
		sb.append(",PO_PRIMARY_STATUS="+PO_PRIMARY_STATUS);
		sb.append(",PO_SECONDARY_STATUS="+PO_SECONDARY_STATUS);
		sb.append(",PO_TYPE="+PO_TYPE);
		sb.append(",WHSE_CHANGE_CODE="+WHSE_CHANGE_CODE);
		sb.append(",CONF_STATUS="+CONF_STATUS);
		sb.append(",PO_VALID_PRICING_FLAG="+PO_VALID_PRICING_FLAG);
		sb.append(",PO_VALID_PRICING_APPROVAL="+PO_VALID_PRICING_APPROVAL);
		sb.append(",PO_CHANGED_FLAG="+PO_CHANGED_FLAG);
		sb.append(",ALLOC_SCHEDULED_RECEIPT_FLAG="+ALLOC_SCHEDULED_RECEIPT_FLAG);
		sb.append(",PRICE_OVERRIDE_FLAG="+PRICE_OVERRIDE_FLAG);
		sb.append(",MARKED_BY_MERCHANDISER_FLAG="+MARKED_BY_MERCHANDISER_FLAG);
		sb.append(",FAILED_SCORECARD_FLAG="+FAILED_SCORECARD_FLAG);
		sb.append(",MANUALLY_ENTERED_LINE_FLAG="+MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CALENDAR_DATE_ANTICIPATED_RECEIPT="+String.valueOf(CALENDAR_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_DATE_SCHEDULED_RECEIPT_DATE="+String.valueOf(CALENDAR_DATE_SCHEDULED_RECEIPT_DATE));
		sb.append(",BUSINESS_DATE_ANTICIPATED_RECEIPT="+String.valueOf(BUSINESS_DATE_ANTICIPATED_RECEIPT));
		sb.append(",AVAIL_TIMESTAMP="+String.valueOf(AVAIL_TIMESTAMP));
		sb.append(",BUSINESS_ORDER_DATE="+String.valueOf(BUSINESS_ORDER_DATE));
		sb.append(",SUGGESTED_ORDER_QTY="+String.valueOf(SUGGESTED_ORDER_QTY));
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",CUST_ORDER_NO="+String.valueOf(CUST_ORDER_NO));
		sb.append(",CUST_ORDER_LINE_NO="+String.valueOf(CUST_ORDER_LINE_NO));
		sb.append(",ORIG_ORDER_QTY="+String.valueOf(ORIG_ORDER_QTY));
		sb.append(",ORIG_FOB_PER_ITEM="+String.valueOf(ORIG_FOB_PER_ITEM));
		sb.append(",ORIG_FREIGHT_PER_ITEM="+String.valueOf(ORIG_FREIGHT_PER_ITEM));
		sb.append(",ORIG_AP_PER_ITEM="+String.valueOf(ORIG_AP_PER_ITEM));
		sb.append(",ORIG_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(ORIG_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",ORIG_PICKUP_ALLOW_TYPE_OVERRIDE="+ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",ORIG_FREIGHT_RATE_OVERRIDE="+String.valueOf(ORIG_FREIGHT_RATE_OVERRIDE));
		sb.append(",ORIG_FREIGHT_TYPE_OVERRIDE="+ORIG_FREIGHT_TYPE_OVERRIDE);
		sb.append(",ORIG_PICKUP_ALLOW_PER_ITEM="+String.valueOf(ORIG_PICKUP_ALLOW_PER_ITEM));
		sb.append(",ORIG_OFF_INV_ALLOW="+String.valueOf(ORIG_OFF_INV_ALLOW));
		sb.append(",ORIG_UOM="+ORIG_UOM);
		sb.append(",ORIG_ALT_DELV_PRICE="+String.valueOf(ORIG_ALT_DELV_PRICE));
		sb.append(",ORIG_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_MERCH_ALLOW_CHARGE));
		sb.append(",ORIG_FREIGHT_ALLOW_CHARGE="+String.valueOf(ORIG_FREIGHT_ALLOW_CHARGE));
		sb.append(",ALLOC_QTY="+String.valueOf(ALLOC_QTY));
		sb.append(",ALLOC_QTY_SPLITS="+String.valueOf(ALLOC_QTY_SPLITS));
		sb.append(",INV_UNIT_PRICE="+String.valueOf(INV_UNIT_PRICE));
		sb.append(",FREE_GOODS_FLAG="+FREE_GOODS_FLAG);
		sb.append(",VENDOR_PRICE_LIST_UOM="+VENDOR_PRICE_LIST_UOM);
		sb.append(",CONFIRMED_ORDER_QTY="+String.valueOf(CONFIRMED_ORDER_QTY));
		sb.append(",CONFIRMED_FOB_PER_ITEM="+String.valueOf(CONFIRMED_FOB_PER_ITEM));
		sb.append(",CONFIRMED_FREIGHT_PER_ITEM="+String.valueOf(CONFIRMED_FREIGHT_PER_ITEM));
		sb.append(",CONFIRMED_AP_PER_ITEM="+String.valueOf(CONFIRMED_AP_PER_ITEM));
		sb.append(",CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE="+CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_FREIGHT_RATE_OVERRIDE="+String.valueOf(CONFIRMED_FREIGHT_RATE_OVERRIDE));
		sb.append(",CONFIRMED_FREIGHT_TYPE_OVERRIDE="+CONFIRMED_FREIGHT_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_PER_ITEM="+String.valueOf(CONFIRMED_PICKUP_ALLOW_PER_ITEM));
		sb.append(",CONFIRMED_OFF_INV_ALLOW="+String.valueOf(CONFIRMED_OFF_INV_ALLOW));
		sb.append(",CONFIRMED_UOM="+CONFIRMED_UOM);
		sb.append(",CONFIRMED_ALT_DELV_PRICE="+String.valueOf(CONFIRMED_ALT_DELV_PRICE));
		sb.append(",CONF_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(CONF_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",CONF_DIST_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONF_DIST_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_MRPT="+String.valueOf(CONFIRMED_MRPT));
		sb.append(",CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG="+CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CONFIRMED_PRICE_OVERRIDE_FLAG="+CONFIRMED_PRICE_OVERRIDE_FLAG);
		sb.append(",CARRIER_SHORT_QTY="+String.valueOf(CARRIER_SHORT_QTY));
		sb.append(",RECVD_DAMAGED_ACCEPTED_QTY="+String.valueOf(RECVD_DAMAGED_ACCEPTED_QTY));
		sb.append(",RECVD_QTY="+String.valueOf(RECVD_QTY));
		sb.append(",VENDOR_SHORT_QTY="+String.valueOf(VENDOR_SHORT_QTY));
		sb.append(",CARRIER_SHORT_REASON_CODE="+CARRIER_SHORT_REASON_CODE);
		sb.append(",VENDOR_SHORT_REASON_CODE="+VENDOR_SHORT_REASON_CODE);
		sb.append(",RECVD_WGT="+String.valueOf(RECVD_WGT));
		sb.append(",DAMAGED_RECVD_WGT="+String.valueOf(DAMAGED_RECVD_WGT));
		sb.append(",REVISED_PROFORMA_FLAG="+REVISED_PROFORMA_FLAG);
		sb.append(",FREIGHT_PROFORMA_STATUS="+FREIGHT_PROFORMA_STATUS);
		sb.append(",MERCH_PROFORMA_STATUS="+MERCH_PROFORMA_STATUS);
		sb.append(",MERCH_EXT_AMT_TOBE_PAID="+String.valueOf(MERCH_EXT_AMT_TOBE_PAID));
		sb.append(",MERCH_INV_DATE="+String.valueOf(MERCH_INV_DATE));
		sb.append(",MERCH_INV_NO="+MERCH_INV_NO);
		sb.append(",MERCH_PRICE_DIFF_STATUS="+MERCH_PRICE_DIFF_STATUS);
		sb.append(",MERCH_QTY_DIFF_STATUS="+MERCH_QTY_DIFF_STATUS);
		sb.append(",MERCH_QTY_TO_BE_PAID="+String.valueOf(MERCH_QTY_TO_BE_PAID));
		sb.append(",MERCH_WGT_TO_BE_PAID="+String.valueOf(MERCH_WGT_TO_BE_PAID));
		sb.append(",MERCH_CASH_DISC="+String.valueOf(MERCH_CASH_DISC));
		sb.append(",FREIGHT_INV_NO="+FREIGHT_INV_NO);
		sb.append(",FREIGHT_EXT_AMT_TO_BE_PAID="+String.valueOf(FREIGHT_EXT_AMT_TO_BE_PAID));
		sb.append(",FREIGHT_INV_DATE="+String.valueOf(FREIGHT_INV_DATE));
		sb.append(",FREIGHT_CHARGE_TO_BE_PAID="+String.valueOf(FREIGHT_CHARGE_TO_BE_PAID));
		sb.append(",FREIGHT_CASH_DISC="+String.valueOf(FREIGHT_CASH_DISC));
		sb.append(",FREIGHT_QTY_TO_BE_PAID="+String.valueOf(FREIGHT_QTY_TO_BE_PAID));
		sb.append(",FREIGHT_CLAIM_QTY="+String.valueOf(FREIGHT_CLAIM_QTY));
		sb.append(",LOAD_CTRL_NO="+LOAD_CTRL_NO);
		sb.append(",SPLIT_PO_FLAG="+SPLIT_PO_FLAG);
		sb.append(",TRUE_VENDOR="+TRUE_VENDOR);
		sb.append(",MANIFEST_HIST_MFG_NO="+MANIFEST_HIST_MFG_NO);
		sb.append(",NOTE1="+NOTE1);
		sb.append(",TRUE_VENDOR_SHIP_FROM="+String.valueOf(TRUE_VENDOR_SHIP_FROM));
		sb.append(",LAST_QTY_SENT_TO_DPR="+String.valueOf(LAST_QTY_SENT_TO_DPR));
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",V4PF_SVOP="+V4PF_SVOP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",ORIG_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(ORIG_UNLOAD_CHARGE_PER_ITEM));
		sb.append(",CONF_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(CONF_UNLOAD_CHARGE_PER_ITEM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PURCHASE_ORDER_DETAIL_UPDATE_5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MAJ_LINE_NO, other.SMS_MAJ_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MIN_LINE_NO, other.SMS_MIN_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public String V4PO;

				public String getV4PO () {
					return this.V4PO;
				}
				
			    public String V4ITEM;

				public String getV4ITEM () {
					return this.V4ITEM;
				}
				
			    public BigDecimal V4ROSQ;

				public BigDecimal getV4ROSQ () {
					return this.V4ROSQ;
				}
				
			    public String V4OWID;

				public String getV4OWID () {
					return this.V4OWID;
				}
				
			    public String V4ARCO;

				public String getV4ARCO () {
					return this.V4ARCO;
				}
				
			    public String V4MNPC;

				public String getV4MNPC () {
					return this.V4MNPC;
				}
				
			    public String V4MUPC;

				public String getV4MUPC () {
					return this.V4MUPC;
				}
				
			    public String V4ITDS;

				public String getV4ITDS () {
					return this.V4ITDS;
				}
				
			    public String V4VCAT;

				public String getV4VCAT () {
					return this.V4VCAT;
				}
				
			    public String V4VNBR;

				public String getV4VNBR () {
					return this.V4VNBR;
				}
				
			    public BigDecimal V4ADCD;

				public BigDecimal getV4ADCD () {
					return this.V4ADCD;
				}
				
			    public BigDecimal V4BYGP;

				public BigDecimal getV4BYGP () {
					return this.V4BYGP;
				}
				
			    public String V4CPVN;

				public String getV4CPVN () {
					return this.V4CPVN;
				}
				
			    public String V4PVND;

				public String getV4PVND () {
					return this.V4PVND;
				}
				
			    public String V4TERM;

				public String getV4TERM () {
					return this.V4TERM;
				}
				
			    public String V4POST;

				public String getV4POST () {
					return this.V4POST;
				}
				
			    public String V4POSS;

				public String getV4POSS () {
					return this.V4POSS;
				}
				
			    public String V4ORTY;

				public String getV4ORTY () {
					return this.V4ORTY;
				}
				
			    public String V4WCCD;

				public String getV4WCCD () {
					return this.V4WCCD;
				}
				
			    public String V4CFST;

				public String getV4CFST () {
					return this.V4CFST;
				}
				
			    public String V4WHSE;

				public String getV4WHSE () {
					return this.V4WHSE;
				}
				
			    public String V4VLPF;

				public String getV4VLPF () {
					return this.V4VLPF;
				}
				
			    public String V4VLPA;

				public String getV4VLPA () {
					return this.V4VLPA;
				}
				
			    public String V4POCH;

				public String getV4POCH () {
					return this.V4POCH;
				}
				
			    public String V4KMFG;

				public String getV4KMFG () {
					return this.V4KMFG;
				}
				
			    public String V4ASRF;

				public String getV4ASRF () {
					return this.V4ASRF;
				}
				
			    public String V4POFL;

				public String getV4POFL () {
					return this.V4POFL;
				}
				
			    public String V4MKMF;

				public String getV4MKMF () {
					return this.V4MKMF;
				}
				
			    public String V4FSCF;

				public String getV4FSCF () {
					return this.V4FSCF;
				}
				
			    public String V4MELN;

				public String getV4MELN () {
					return this.V4MELN;
				}
				
			    public String V4IPCF;

				public String getV4IPCF () {
					return this.V4IPCF;
				}
				
			    public BigDecimal V4ARBD;

				public BigDecimal getV4ARBD () {
					return this.V4ARBD;
				}
				
			    public BigDecimal V4PSRD;

				public BigDecimal getV4PSRD () {
					return this.V4PSRD;
				}
				
			    public BigDecimal V4ARDE;

				public BigDecimal getV4ARDE () {
					return this.V4ARDE;
				}
				
			    public BigDecimal V4AVDT;

				public BigDecimal getV4AVDT () {
					return this.V4AVDT;
				}
				
			    public BigDecimal V4AVTM;

				public BigDecimal getV4AVTM () {
					return this.V4AVTM;
				}
				
			    public BigDecimal V4ORDT;

				public BigDecimal getV4ORDT () {
					return this.V4ORDT;
				}
				
			    public BigDecimal V4PSOQ;

				public BigDecimal getV4PSOQ () {
					return this.V4PSOQ;
				}
				
			    public String V4CUNO;

				public String getV4CUNO () {
					return this.V4CUNO;
				}
				
			    public BigDecimal V4ORNO;

				public BigDecimal getV4ORNO () {
					return this.V4ORNO;
				}
				
			    public BigDecimal V4ODLN;

				public BigDecimal getV4ODLN () {
					return this.V4ODLN;
				}
				
			    public String V4ITCI;

				public String getV4ITCI () {
					return this.V4ITCI;
				}
				
			    public BigDecimal V4POOQ;

				public BigDecimal getV4POOQ () {
					return this.V4POOQ;
				}
				
			    public BigDecimal V4POFB;

				public BigDecimal getV4POFB () {
					return this.V4POFB;
				}
				
			    public BigDecimal V4POFR;

				public BigDecimal getV4POFR () {
					return this.V4POFR;
				}
				
			    public BigDecimal V4POAP;

				public BigDecimal getV4POAP () {
					return this.V4POAP;
				}
				
			    public BigDecimal V4IPUO;

				public BigDecimal getV4IPUO () {
					return this.V4IPUO;
				}
				
			    public String V4IPUT;

				public String getV4IPUT () {
					return this.V4IPUT;
				}
				
			    public BigDecimal V4IFRO;

				public BigDecimal getV4IFRO () {
					return this.V4IFRO;
				}
				
			    public String V4IFRT;

				public String getV4IFRT () {
					return this.V4IFRT;
				}
				
			    public BigDecimal V4BDPI;

				public BigDecimal getV4BDPI () {
					return this.V4BDPI;
				}
				
			    public BigDecimal V4PAPI;

				public BigDecimal getV4PAPI () {
					return this.V4PAPI;
				}
				
			    public BigDecimal V4POAL;

				public BigDecimal getV4POAL () {
					return this.V4POAL;
				}
				
			    public String V4POUM;

				public String getV4POUM () {
					return this.V4POUM;
				}
				
			    public BigDecimal V4OUCI;

				public BigDecimal getV4OUCI () {
					return this.V4OUCI;
				}
				
			    public BigDecimal V4OADP;

				public BigDecimal getV4OADP () {
					return this.V4OADP;
				}
				
			    public BigDecimal V4ACDM;

				public BigDecimal getV4ACDM () {
					return this.V4ACDM;
				}
				
			    public BigDecimal V4ACDF;

				public BigDecimal getV4ACDF () {
					return this.V4ACDF;
				}
				
			    public BigDecimal V4ALQY;

				public BigDecimal getV4ALQY () {
					return this.V4ALQY;
				}
				
			    public BigDecimal V4ALQS;

				public BigDecimal getV4ALQS () {
					return this.V4ALQS;
				}
				
			    public BigDecimal V4MRPR;

				public BigDecimal getV4MRPR () {
					return this.V4MRPR;
				}
				
			    public BigDecimal V4IUPR;

				public BigDecimal getV4IUPR () {
					return this.V4IUPR;
				}
				
			    public String V4FEGD;

				public String getV4FEGD () {
					return this.V4FEGD;
				}
				
			    public String V4VPUM;

				public String getV4VPUM () {
					return this.V4VPUM;
				}
				
			    public BigDecimal V4PCOQ;

				public BigDecimal getV4PCOQ () {
					return this.V4PCOQ;
				}
				
			    public BigDecimal V4PCFB;

				public BigDecimal getV4PCFB () {
					return this.V4PCFB;
				}
				
			    public BigDecimal V4PCFR;

				public BigDecimal getV4PCFR () {
					return this.V4PCFR;
				}
				
			    public BigDecimal V4PCAP;

				public BigDecimal getV4PCAP () {
					return this.V4PCAP;
				}
				
			    public BigDecimal V4CPAL;

				public BigDecimal getV4CPAL () {
					return this.V4CPAL;
				}
				
			    public String V4CPUT;

				public String getV4CPUT () {
					return this.V4CPUT;
				}
				
			    public BigDecimal V4CFRO;

				public BigDecimal getV4CFRO () {
					return this.V4CFRO;
				}
				
			    public String V4CFTO;

				public String getV4CFTO () {
					return this.V4CFTO;
				}
				
			    public BigDecimal V4CPAP;

				public BigDecimal getV4CPAP () {
					return this.V4CPAP;
				}
				
			    public BigDecimal V4CBDP;

				public BigDecimal getV4CBDP () {
					return this.V4CBDP;
				}
				
			    public BigDecimal V4COIN;

				public BigDecimal getV4COIN () {
					return this.V4COIN;
				}
				
			    public String V4CUOM;

				public String getV4CUOM () {
					return this.V4CUOM;
				}
				
			    public BigDecimal V4CUCI;

				public BigDecimal getV4CUCI () {
					return this.V4CUCI;
				}
				
			    public BigDecimal V4CADP;

				public BigDecimal getV4CADP () {
					return this.V4CADP;
				}
				
			    public BigDecimal V4CACM;

				public BigDecimal getV4CACM () {
					return this.V4CACM;
				}
				
			    public BigDecimal V4CACF;

				public BigDecimal getV4CACF () {
					return this.V4CACF;
				}
				
			    public BigDecimal V4CMRP;

				public BigDecimal getV4CMRP () {
					return this.V4CMRP;
				}
				
			    public String V4CMEF;

				public String getV4CMEF () {
					return this.V4CMEF;
				}
				
			    public String V4CFTP;

				public String getV4CFTP () {
					return this.V4CFTP;
				}
				
			    public String V4CPOF;

				public String getV4CPOF () {
					return this.V4CPOF;
				}
				
			    public BigDecimal V4QYSH;

				public BigDecimal getV4QYSH () {
					return this.V4QYSH;
				}
				
			    public BigDecimal V4QYDA;

				public BigDecimal getV4QYDA () {
					return this.V4QYDA;
				}
				
			    public BigDecimal V4RCQT;

				public BigDecimal getV4RCQT () {
					return this.V4RCQT;
				}
				
			    public BigDecimal V4VSQY;

				public BigDecimal getV4VSQY () {
					return this.V4VSQY;
				}
				
			    public String V4CSRC;

				public String getV4CSRC () {
					return this.V4CSRC;
				}
				
			    public String V4VSRC;

				public String getV4VSRC () {
					return this.V4VSRC;
				}
				
			    public BigDecimal V4RVWT;

				public BigDecimal getV4RVWT () {
					return this.V4RVWT;
				}
				
			    public BigDecimal V4RVWK;

				public BigDecimal getV4RVWK () {
					return this.V4RVWK;
				}
				
			    public BigDecimal V4DRWT;

				public BigDecimal getV4DRWT () {
					return this.V4DRWT;
				}
				
			    public BigDecimal V4DRWK;

				public BigDecimal getV4DRWK () {
					return this.V4DRWK;
				}
				
			    public String V4RPFF;

				public String getV4RPFF () {
					return this.V4RPFF;
				}
				
			    public String V4PPFS;

				public String getV4PPFS () {
					return this.V4PPFS;
				}
				
			    public String V4PMPS;

				public String getV4PMPS () {
					return this.V4PMPS;
				}
				
			    public BigDecimal V4MEAP;

				public BigDecimal getV4MEAP () {
					return this.V4MEAP;
				}
				
			    public BigDecimal V4MIDT;

				public BigDecimal getV4MIDT () {
					return this.V4MIDT;
				}
				
			    public String V4MINV;

				public String getV4MINV () {
					return this.V4MINV;
				}
				
			    public String V4MPDD;

				public String getV4MPDD () {
					return this.V4MPDD;
				}
				
			    public String V4MQDD;

				public String getV4MQDD () {
					return this.V4MQDD;
				}
				
			    public BigDecimal V4MRQT;

				public BigDecimal getV4MRQT () {
					return this.V4MRQT;
				}
				
			    public BigDecimal V4MRCW;

				public BigDecimal getV4MRCW () {
					return this.V4MRCW;
				}
				
			    public BigDecimal V4MRCK;

				public BigDecimal getV4MRCK () {
					return this.V4MRCK;
				}
				
			    public BigDecimal V4PFMM;

				public BigDecimal getV4PFMM () {
					return this.V4PFMM;
				}
				
			    public BigDecimal V4MCSD;

				public BigDecimal getV4MCSD () {
					return this.V4MCSD;
				}
				
			    public String V4FINV;

				public String getV4FINV () {
					return this.V4FINV;
				}
				
			    public BigDecimal V4FEAP;

				public BigDecimal getV4FEAP () {
					return this.V4FEAP;
				}
				
			    public BigDecimal V4FIDT;

				public BigDecimal getV4FIDT () {
					return this.V4FIDT;
				}
				
			    public BigDecimal V4FRCW;

				public BigDecimal getV4FRCW () {
					return this.V4FRCW;
				}
				
			    public BigDecimal V4FCAD;

				public BigDecimal getV4FCAD () {
					return this.V4FCAD;
				}
				
			    public BigDecimal V4FRQT;

				public BigDecimal getV4FRQT () {
					return this.V4FRQT;
				}
				
			    public BigDecimal V4PFMD;

				public BigDecimal getV4PFMD () {
					return this.V4PFMD;
				}
				
			    public BigDecimal V4FTCQ;

				public BigDecimal getV4FTCQ () {
					return this.V4FTCQ;
				}
				
			    public String V4LCN;

				public String getV4LCN () {
					return this.V4LCN;
				}
				
			    public String V4SPOF;

				public String getV4SPOF () {
					return this.V4SPOF;
				}
				
			    public BigDecimal V4PCLN;

				public BigDecimal getV4PCLN () {
					return this.V4PCLN;
				}
				
			    public String V4MFVN;

				public String getV4MFVN () {
					return this.V4MFVN;
				}
				
			    public String V4MFID;

				public String getV4MFID () {
					return this.V4MFID;
				}
				
			    public String V4ERRF;

				public String getV4ERRF () {
					return this.V4ERRF;
				}
				
			    public String V4IMCC;

				public String getV4IMCC () {
					return this.V4IMCC;
				}
				
			    public String V4COD1;

				public String getV4COD1 () {
					return this.V4COD1;
				}
				
			    public String V4NTYP;

				public String getV4NTYP () {
					return this.V4NTYP;
				}
				
			    public BigDecimal V4TDCD;

				public BigDecimal getV4TDCD () {
					return this.V4TDCD;
				}
				
			    public BigDecimal V4QTIF;

				public BigDecimal getV4QTIF () {
					return this.V4QTIF;
				}
				
			    public BigDecimal V4EADT;

				public BigDecimal getV4EADT () {
					return this.V4EADT;
				}
				
			    public BigDecimal V4EATM;

				public BigDecimal getV4EATM () {
					return this.V4EATM;
				}
				
			    public String V4EAID;

				public String getV4EAID () {
					return this.V4EAID;
				}
				
			    public BigDecimal V4MODT;

				public BigDecimal getV4MODT () {
					return this.V4MODT;
				}
				
			    public BigDecimal V4MOTM;

				public BigDecimal getV4MOTM () {
					return this.V4MOTM;
				}
				
			    public String V4MOID;

				public String getV4MOID () {
					return this.V4MOID;
				}
				
			    public String V4MOPG;

				public String getV4MOPG () {
					return this.V4MOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("V4PO="+V4PO);
		sb.append(",V4ITEM="+V4ITEM);
		sb.append(",V4ROSQ="+String.valueOf(V4ROSQ));
		sb.append(",V4OWID="+V4OWID);
		sb.append(",V4ARCO="+V4ARCO);
		sb.append(",V4MNPC="+V4MNPC);
		sb.append(",V4MUPC="+V4MUPC);
		sb.append(",V4ITDS="+V4ITDS);
		sb.append(",V4VCAT="+V4VCAT);
		sb.append(",V4VNBR="+V4VNBR);
		sb.append(",V4ADCD="+String.valueOf(V4ADCD));
		sb.append(",V4BYGP="+String.valueOf(V4BYGP));
		sb.append(",V4CPVN="+V4CPVN);
		sb.append(",V4PVND="+V4PVND);
		sb.append(",V4TERM="+V4TERM);
		sb.append(",V4POST="+V4POST);
		sb.append(",V4POSS="+V4POSS);
		sb.append(",V4ORTY="+V4ORTY);
		sb.append(",V4WCCD="+V4WCCD);
		sb.append(",V4CFST="+V4CFST);
		sb.append(",V4WHSE="+V4WHSE);
		sb.append(",V4VLPF="+V4VLPF);
		sb.append(",V4VLPA="+V4VLPA);
		sb.append(",V4POCH="+V4POCH);
		sb.append(",V4KMFG="+V4KMFG);
		sb.append(",V4ASRF="+V4ASRF);
		sb.append(",V4POFL="+V4POFL);
		sb.append(",V4MKMF="+V4MKMF);
		sb.append(",V4FSCF="+V4FSCF);
		sb.append(",V4MELN="+V4MELN);
		sb.append(",V4IPCF="+V4IPCF);
		sb.append(",V4ARBD="+String.valueOf(V4ARBD));
		sb.append(",V4PSRD="+String.valueOf(V4PSRD));
		sb.append(",V4ARDE="+String.valueOf(V4ARDE));
		sb.append(",V4AVDT="+String.valueOf(V4AVDT));
		sb.append(",V4AVTM="+String.valueOf(V4AVTM));
		sb.append(",V4ORDT="+String.valueOf(V4ORDT));
		sb.append(",V4PSOQ="+String.valueOf(V4PSOQ));
		sb.append(",V4CUNO="+V4CUNO);
		sb.append(",V4ORNO="+String.valueOf(V4ORNO));
		sb.append(",V4ODLN="+String.valueOf(V4ODLN));
		sb.append(",V4ITCI="+V4ITCI);
		sb.append(",V4POOQ="+String.valueOf(V4POOQ));
		sb.append(",V4POFB="+String.valueOf(V4POFB));
		sb.append(",V4POFR="+String.valueOf(V4POFR));
		sb.append(",V4POAP="+String.valueOf(V4POAP));
		sb.append(",V4IPUO="+String.valueOf(V4IPUO));
		sb.append(",V4IPUT="+V4IPUT);
		sb.append(",V4IFRO="+String.valueOf(V4IFRO));
		sb.append(",V4IFRT="+V4IFRT);
		sb.append(",V4BDPI="+String.valueOf(V4BDPI));
		sb.append(",V4PAPI="+String.valueOf(V4PAPI));
		sb.append(",V4POAL="+String.valueOf(V4POAL));
		sb.append(",V4POUM="+V4POUM);
		sb.append(",V4OUCI="+String.valueOf(V4OUCI));
		sb.append(",V4OADP="+String.valueOf(V4OADP));
		sb.append(",V4ACDM="+String.valueOf(V4ACDM));
		sb.append(",V4ACDF="+String.valueOf(V4ACDF));
		sb.append(",V4ALQY="+String.valueOf(V4ALQY));
		sb.append(",V4ALQS="+String.valueOf(V4ALQS));
		sb.append(",V4MRPR="+String.valueOf(V4MRPR));
		sb.append(",V4IUPR="+String.valueOf(V4IUPR));
		sb.append(",V4FEGD="+V4FEGD);
		sb.append(",V4VPUM="+V4VPUM);
		sb.append(",V4PCOQ="+String.valueOf(V4PCOQ));
		sb.append(",V4PCFB="+String.valueOf(V4PCFB));
		sb.append(",V4PCFR="+String.valueOf(V4PCFR));
		sb.append(",V4PCAP="+String.valueOf(V4PCAP));
		sb.append(",V4CPAL="+String.valueOf(V4CPAL));
		sb.append(",V4CPUT="+V4CPUT);
		sb.append(",V4CFRO="+String.valueOf(V4CFRO));
		sb.append(",V4CFTO="+V4CFTO);
		sb.append(",V4CPAP="+String.valueOf(V4CPAP));
		sb.append(",V4CBDP="+String.valueOf(V4CBDP));
		sb.append(",V4COIN="+String.valueOf(V4COIN));
		sb.append(",V4CUOM="+V4CUOM);
		sb.append(",V4CUCI="+String.valueOf(V4CUCI));
		sb.append(",V4CADP="+String.valueOf(V4CADP));
		sb.append(",V4CACM="+String.valueOf(V4CACM));
		sb.append(",V4CACF="+String.valueOf(V4CACF));
		sb.append(",V4CMRP="+String.valueOf(V4CMRP));
		sb.append(",V4CMEF="+V4CMEF);
		sb.append(",V4CFTP="+V4CFTP);
		sb.append(",V4CPOF="+V4CPOF);
		sb.append(",V4QYSH="+String.valueOf(V4QYSH));
		sb.append(",V4QYDA="+String.valueOf(V4QYDA));
		sb.append(",V4RCQT="+String.valueOf(V4RCQT));
		sb.append(",V4VSQY="+String.valueOf(V4VSQY));
		sb.append(",V4CSRC="+V4CSRC);
		sb.append(",V4VSRC="+V4VSRC);
		sb.append(",V4RVWT="+String.valueOf(V4RVWT));
		sb.append(",V4RVWK="+String.valueOf(V4RVWK));
		sb.append(",V4DRWT="+String.valueOf(V4DRWT));
		sb.append(",V4DRWK="+String.valueOf(V4DRWK));
		sb.append(",V4RPFF="+V4RPFF);
		sb.append(",V4PPFS="+V4PPFS);
		sb.append(",V4PMPS="+V4PMPS);
		sb.append(",V4MEAP="+String.valueOf(V4MEAP));
		sb.append(",V4MIDT="+String.valueOf(V4MIDT));
		sb.append(",V4MINV="+V4MINV);
		sb.append(",V4MPDD="+V4MPDD);
		sb.append(",V4MQDD="+V4MQDD);
		sb.append(",V4MRQT="+String.valueOf(V4MRQT));
		sb.append(",V4MRCW="+String.valueOf(V4MRCW));
		sb.append(",V4MRCK="+String.valueOf(V4MRCK));
		sb.append(",V4PFMM="+String.valueOf(V4PFMM));
		sb.append(",V4MCSD="+String.valueOf(V4MCSD));
		sb.append(",V4FINV="+V4FINV);
		sb.append(",V4FEAP="+String.valueOf(V4FEAP));
		sb.append(",V4FIDT="+String.valueOf(V4FIDT));
		sb.append(",V4FRCW="+String.valueOf(V4FRCW));
		sb.append(",V4FCAD="+String.valueOf(V4FCAD));
		sb.append(",V4FRQT="+String.valueOf(V4FRQT));
		sb.append(",V4PFMD="+String.valueOf(V4PFMD));
		sb.append(",V4FTCQ="+String.valueOf(V4FTCQ));
		sb.append(",V4LCN="+V4LCN);
		sb.append(",V4SPOF="+V4SPOF);
		sb.append(",V4PCLN="+String.valueOf(V4PCLN));
		sb.append(",V4MFVN="+V4MFVN);
		sb.append(",V4MFID="+V4MFID);
		sb.append(",V4ERRF="+V4ERRF);
		sb.append(",V4IMCC="+V4IMCC);
		sb.append(",V4COD1="+V4COD1);
		sb.append(",V4NTYP="+V4NTYP);
		sb.append(",V4TDCD="+String.valueOf(V4TDCD));
		sb.append(",V4QTIF="+String.valueOf(V4QTIF));
		sb.append(",V4EADT="+String.valueOf(V4EADT));
		sb.append(",V4EATM="+String.valueOf(V4EATM));
		sb.append(",V4EAID="+V4EAID);
		sb.append(",V4MODT="+String.valueOf(V4MODT));
		sb.append(",V4MOTM="+String.valueOf(V4MOTM));
		sb.append(",V4MOID="+V4MOID);
		sb.append(",V4MOPG="+V4MOPG);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
PURCHASE_ORDER_DETAIL_UPDATE_5Struct PURCHASE_ORDER_DETAIL_UPDATE_5 = new PURCHASE_ORDER_DETAIL_UPDATE_5Struct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PURCHASE_ORDER_DETAIL_UPDATE_5");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("PURCHASE_ORDER_DETAIL");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("PURCHASE_ORDER_DETAIL");
}

        int updateKeyCount_tDBOutput_1 = 4;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 115 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_1 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_1 = context.GIM_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 1;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1 + "\" SET \"VENDOR_CLASSIFICATION\" = ?,\"SHIPPING_POINT_SHIP_FROM\" = ?,\"BUYING_GROUP\" = ?,\"CUST_PREF_VENDOR\" = ?,\"SOURCE_VENDOR\" = ?,\"VENDOR_TERMS\" = ?,\"PO_PRIMARY_STATUS\" = ?,\"PO_SECONDARY_STATUS\" = ?,\"PO_TYPE\" = ?,\"WHSE_CHANGE_CODE\" = ?,\"CONF_STATUS\" = ?,\"PO_VALID_PRICING_FLAG\" = ?,\"PO_VALID_PRICING_APPROVAL\" = ?,\"PO_CHANGED_FLAG\" = ?,\"ALLOC_SCHEDULED_RECEIPT_FLAG\" = ?,\"PRICE_OVERRIDE_FLAG\" = ?,\"MARKED_BY_MERCHANDISER_FLAG\" = ?,\"FAILED_SCORECARD_FLAG\" = ?,\"MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CALENDAR_DATE_ANTICIPATED_RECEIPT\" = ?,\"CALENDAR_DATE_SCHEDULED_RECEIPT_DATE\" = ?,\"BUSINESS_DATE_ANTICIPATED_RECEIPT\" = ?,\"AVAIL_TIMESTAMP\" = ?,\"BUSINESS_ORDER_DATE\" = ?,\"SUGGESTED_ORDER_QTY\" = ?,\"SHIP_TO_CUST\" = ?,\"CUST_ORDER_NO\" = ?,\"CUST_ORDER_LINE_NO\" = ?,\"ORIG_ORDER_QTY\" = ?,\"ORIG_FOB_PER_ITEM\" = ?,\"ORIG_FREIGHT_PER_ITEM\" = ?,\"ORIG_AP_PER_ITEM\" = ?,\"ORIG_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"ORIG_FREIGHT_RATE_OVERRIDE\" = ?,\"ORIG_FREIGHT_TYPE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_PER_ITEM\" = ?,\"ORIG_OFF_INV_ALLOW\" = ?,\"ORIG_UOM\" = ?,\"ORIG_ALT_DELV_PRICE\" = ?,\"ORIG_MERCH_ALLOW_CHARGE\" = ?,\"ORIG_FREIGHT_ALLOW_CHARGE\" = ?,\"ALLOC_QTY\" = ?,\"ALLOC_QTY_SPLITS\" = ?,\"INV_UNIT_PRICE\" = ?,\"FREE_GOODS_FLAG\" = ?,\"VENDOR_PRICE_LIST_UOM\" = ?,\"CONFIRMED_ORDER_QTY\" = ?,\"CONFIRMED_FOB_PER_ITEM\" = ?,\"CONFIRMED_FREIGHT_PER_ITEM\" = ?,\"CONFIRMED_AP_PER_ITEM\" = ?,\"CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_RATE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_TYPE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_PER_ITEM\" = ?,\"CONFIRMED_OFF_INV_ALLOW\" = ?,\"CONFIRMED_UOM\" = ?,\"CONFIRMED_ALT_DELV_PRICE\" = ?,\"CONF_DIST_MERCH_ALLOW_CHARGE\" = ?,\"CONF_DIST_FREIGHT_ALLOW_CHARGE\" = ?,\"CONFIRMED_MRPT\" = ?,\"CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CONFIRMED_PRICE_OVERRIDE_FLAG\" = ?,\"CARRIER_SHORT_QTY\" = ?,\"RECVD_DAMAGED_ACCEPTED_QTY\" = ?,\"RECVD_QTY\" = ?,\"VENDOR_SHORT_QTY\" = ?,\"CARRIER_SHORT_REASON_CODE\" = ?,\"VENDOR_SHORT_REASON_CODE\" = ?,\"RECVD_WGT\" = ?,\"DAMAGED_RECVD_WGT\" = ?,\"REVISED_PROFORMA_FLAG\" = ?,\"FREIGHT_PROFORMA_STATUS\" = ?,\"MERCH_PROFORMA_STATUS\" = ?,\"MERCH_EXT_AMT_TOBE_PAID\" = ?,\"MERCH_INV_DATE\" = ?,\"MERCH_INV_NO\" = ?,\"MERCH_PRICE_DIFF_STATUS\" = ?,\"MERCH_QTY_DIFF_STATUS\" = ?,\"MERCH_QTY_TO_BE_PAID\" = ?,\"MERCH_WGT_TO_BE_PAID\" = ?,\"MERCH_CASH_DISC\" = ?,\"FREIGHT_INV_NO\" = ?,\"FREIGHT_EXT_AMT_TO_BE_PAID\" = ?,\"FREIGHT_INV_DATE\" = ?,\"FREIGHT_CHARGE_TO_BE_PAID\" = ?,\"FREIGHT_CASH_DISC\" = ?,\"FREIGHT_QTY_TO_BE_PAID\" = ?,\"FREIGHT_CLAIM_QTY\" = ?,\"LOAD_CTRL_NO\" = ?,\"SPLIT_PO_FLAG\" = ?,\"TRUE_VENDOR\" = ?,\"MANIFEST_HIST_MFG_NO\" = ?,\"NOTE1\" = ?,\"TRUE_VENDOR_SHIP_FROM\" = ?,\"LAST_QTY_SENT_TO_DPR\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"IS_ACTIVE\" = ?,\"V4PF_SVOP\" = ?,\"UPDATED_USER_ID\" = ?,\"UPDATED_PROGRAM_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"ORIG_UNLOAD_CHARGE_PER_ITEM\" = ?,\"CONF_UNLOAD_CHARGE_PER_ITEM\" = ? WHERE \"SITE_ID\" = ? AND \"PURCHASE_ORDER_NO\" = ? AND \"SMS_MAJ_LINE_NO\" = ? AND \"SMS_MIN_LINE_NO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String V4ARBD;
	String V4PSRD;
	String V4ARDE;
	String V4MIDT;
	String V4FIDT;
	String V4ORDT;
	String AVAIL_TIMESTAMP;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
PURCHASE_ORDER_DETAIL_UPDATE_5Struct PURCHASE_ORDER_DETAIL_UPDATE_5_tmp = new PURCHASE_ORDER_DETAIL_UPDATE_5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.SUS_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  IMHBV4PF.V4PO, \n  IMHBV4PF.V4ITEM, \n  IMHBV4PF.V4ROSQ, \n  IMHBV4PF.V4OWID, \n  IMHBV4PF.V4ARCO, \n  IMHBV"
+"4PF.V4MNPC, \n  IMHBV4PF.V4MUPC, \n  IMHBV4PF.V4ITDS, \n  IMHBV4PF.V4VCAT, \n  IMHBV4PF.V4VNBR, \n  IMHBV4PF.V4ADCD, \n "
+" IMHBV4PF.V4BYGP, \n  IMHBV4PF.V4CPVN, \n  IMHBV4PF.V4PVND, \n  IMHBV4PF.V4TERM, \n  IMHBV4PF.V4POST, \n  IMHBV4PF.V4POS"
+"S, \n  IMHBV4PF.V4ORTY, \n  IMHBV4PF.V4WCCD, \n  IMHBV4PF.V4CFST, \n  IMHBV4PF.V4WHSE, \n  IMHBV4PF.V4VLPF, \n  IMHBV4PF"
+".V4VLPA, \n  IMHBV4PF.V4POCH, \n  IMHBV4PF.V4KMFG, \n  IMHBV4PF.V4ASRF, \n  IMHBV4PF.V4POFL, \n  IMHBV4PF.V4MKMF, \n  IM"
+"HBV4PF.V4FSCF, \n  IMHBV4PF.V4MELN, \n  IMHBV4PF.V4IPCF, \n  IMHBV4PF.V4ARBD, \n  IMHBV4PF.V4PSRD, \n  IMHBV4PF.V4ARDE, "
+"\n  IMHBV4PF.V4AVDT, \n  IMHBV4PF.V4AVTM, \n  IMHBV4PF.V4ORDT, \n  IMHBV4PF.V4PSOQ, \n  IMHBV4PF.V4CUNO, \n  IMHBV4PF.V4"
+"ORNO, \n  IMHBV4PF.V4ODLN, \n  IMHBV4PF.V4ITCI, \n  IMHBV4PF.V4POOQ, \n  IMHBV4PF.V4POFB, \n  IMHBV4PF.V4POFR, \n  IMHBV"
+"4PF.V4POAP, \n  IMHBV4PF.V4IPUO, \n  IMHBV4PF.V4IPUT, \n  IMHBV4PF.V4IFRO, \n  IMHBV4PF.V4IFRT, \n  IMHBV4PF.V4BDPI, \n "
+" IMHBV4PF.V4PAPI, \n  IMHBV4PF.V4POAL, \n  IMHBV4PF.V4POUM, \n  IMHBV4PF.V4OUCI, \n  IMHBV4PF.V4OADP, \n  IMHBV4PF.V4ACD"
+"M, \n  IMHBV4PF.V4ACDF, \n  IMHBV4PF.V4ALQY, \n  IMHBV4PF.V4ALQS, \n  IMHBV4PF.V4MRPR, \n  IMHBV4PF.V4IUPR, \n  IMHBV4PF"
+".V4FEGD, \n  IMHBV4PF.V4VPUM, \n  IMHBV4PF.V4PCOQ, \n  IMHBV4PF.V4PCFB, \n  IMHBV4PF.V4PCFR, \n  IMHBV4PF.V4PCAP, \n  IM"
+"HBV4PF.V4CPAL, \n  IMHBV4PF.V4CPUT, \n  IMHBV4PF.V4CFRO, \n  IMHBV4PF.V4CFTO, \n  IMHBV4PF.V4CPAP, \n  IMHBV4PF.V4CBDP, "
+"\n  IMHBV4PF.V4COIN, \n  IMHBV4PF.V4CUOM, \n  IMHBV4PF.V4CUCI, \n  IMHBV4PF.V4CADP, \n  IMHBV4PF.V4CACM, \n  IMHBV4PF.V4"
+"CACF, \n  IMHBV4PF.V4CMRP, \n  IMHBV4PF.V4CMEF, \n  IMHBV4PF.V4CFTP, \n  IMHBV4PF.V4CPOF, \n  IMHBV4PF.V4QYSH, \n  IMHBV"
+"4PF.V4QYDA, \n  IMHBV4PF.V4RCQT, \n  IMHBV4PF.V4VSQY, \n  IMHBV4PF.V4CSRC, \n  IMHBV4PF.V4VSRC, \n  IMHBV4PF.V4RVWT, \n "
+" IMHBV4PF.V4RVWK, \n  IMHBV4PF.V4DRWT, \n  IMHBV4PF.V4DRWK, \n  IMHBV4PF.V4RPFF, \n  IMHBV4PF.V4PPFS, \n  IMHBV4PF.V4PMP"
+"S, \n  IMHBV4PF.V4MEAP, \n  IMHBV4PF.V4MIDT, \n  IMHBV4PF.V4MINV, \n  IMHBV4PF.V4MPDD, \n  IMHBV4PF.V4MQDD, \n  IMHBV4PF"
+".V4MRQT, \n  IMHBV4PF.V4MRCW, \n  IMHBV4PF.V4MRCK, \n  IMHBV4PF.V4PFMM, \n  IMHBV4PF.V4MCSD, \n  IMHBV4PF.V4FINV, \n  IM"
+"HBV4PF.V4FEAP, \n  IMHBV4PF.V4FIDT, \n  IMHBV4PF.V4FRCW, \n  IMHBV4PF.V4FCAD, \n  IMHBV4PF.V4FRQT, \n  IMHBV4PF.V4PFMD, "
+"\n  IMHBV4PF.V4FTCQ, \n  IMHBV4PF.V4LCN, \n  IMHBV4PF.V4SPOF, \n  IMHBV4PF.V4PCLN, \n  IMHBV4PF.V4MFVN, \n  IMHBV4PF.V4M"
+"FID, \n  IMHBV4PF.V4ERRF, \n  IMHBV4PF.V4IMCC, \n  IMHBV4PF.V4COD1, \n  IMHBV4PF.V4NTYP, \n  IMHBV4PF.V4TDCD, \n  IMHBV4"
+"PF.V4QTIF, \n  IMHBV4PF.V4EADT, \n  IMHBV4PF.V4EATM, \n  IMHBV4PF.V4EAID, \n  IMHBV4PF.V4MODT, \n  IMHBV4PF.V4MOTM, \n  "
+"IMHBV4PF.V4MOID, \n  IMHBV4PF.V4MOPG\nFROM IMHBV4PF WHERE IMHBV4PF.V4EADT BETWEEN 20220701 AND 20220931 \nORDER BY IMHBV"
+"4PF.V4EADT DESC";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.V4PO = null;
							} else {
	                         		
        	row1.V4PO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.V4ITEM = null;
							} else {
	                         		
        	row1.V4ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.V4ROSQ = null;
							} else {
		                          
            row1.V4ROSQ = rs_tDBInput_1.getBigDecimal(3);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.V4OWID = null;
							} else {
	                         		
        	row1.V4OWID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.V4ARCO = null;
							} else {
	                         		
        	row1.V4ARCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.V4MNPC = null;
							} else {
	                         		
        	row1.V4MNPC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.V4MUPC = null;
							} else {
	                         		
        	row1.V4MUPC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.V4ITDS = null;
							} else {
	                         		
        	row1.V4ITDS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.V4VCAT = null;
							} else {
	                         		
        	row1.V4VCAT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.V4VNBR = null;
							} else {
	                         		
        	row1.V4VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.V4ADCD = null;
							} else {
		                          
            row1.V4ADCD = rs_tDBInput_1.getBigDecimal(11);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.V4BYGP = null;
							} else {
		                          
            row1.V4BYGP = rs_tDBInput_1.getBigDecimal(12);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.V4CPVN = null;
							} else {
	                         		
        	row1.V4CPVN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.V4PVND = null;
							} else {
	                         		
        	row1.V4PVND = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.V4TERM = null;
							} else {
	                         		
        	row1.V4TERM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.V4POST = null;
							} else {
	                         		
        	row1.V4POST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.V4POSS = null;
							} else {
	                         		
        	row1.V4POSS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.V4ORTY = null;
							} else {
	                         		
        	row1.V4ORTY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.V4WCCD = null;
							} else {
	                         		
        	row1.V4WCCD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.V4CFST = null;
							} else {
	                         		
        	row1.V4CFST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.V4WHSE = null;
							} else {
	                         		
        	row1.V4WHSE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.V4VLPF = null;
							} else {
	                         		
        	row1.V4VLPF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.V4VLPA = null;
							} else {
	                         		
        	row1.V4VLPA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.V4POCH = null;
							} else {
	                         		
        	row1.V4POCH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.V4KMFG = null;
							} else {
	                         		
        	row1.V4KMFG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.V4ASRF = null;
							} else {
	                         		
        	row1.V4ASRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.V4POFL = null;
							} else {
	                         		
        	row1.V4POFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.V4MKMF = null;
							} else {
	                         		
        	row1.V4MKMF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.V4FSCF = null;
							} else {
	                         		
        	row1.V4FSCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.V4MELN = null;
							} else {
	                         		
        	row1.V4MELN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.V4IPCF = null;
							} else {
	                         		
        	row1.V4IPCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.V4ARBD = null;
							} else {
		                          
            row1.V4ARBD = rs_tDBInput_1.getBigDecimal(32);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.V4PSRD = null;
							} else {
		                          
            row1.V4PSRD = rs_tDBInput_1.getBigDecimal(33);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.V4ARDE = null;
							} else {
		                          
            row1.V4ARDE = rs_tDBInput_1.getBigDecimal(34);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.V4AVDT = null;
							} else {
		                          
            row1.V4AVDT = rs_tDBInput_1.getBigDecimal(35);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.V4AVTM = null;
							} else {
		                          
            row1.V4AVTM = rs_tDBInput_1.getBigDecimal(36);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.V4ORDT = null;
							} else {
		                          
            row1.V4ORDT = rs_tDBInput_1.getBigDecimal(37);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.V4PSOQ = null;
							} else {
		                          
            row1.V4PSOQ = rs_tDBInput_1.getBigDecimal(38);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.V4CUNO = null;
							} else {
	                         		
        	row1.V4CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.V4ORNO = null;
							} else {
		                          
            row1.V4ORNO = rs_tDBInput_1.getBigDecimal(40);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.V4ODLN = null;
							} else {
		                          
            row1.V4ODLN = rs_tDBInput_1.getBigDecimal(41);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.V4ITCI = null;
							} else {
	                         		
        	row1.V4ITCI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.V4POOQ = null;
							} else {
		                          
            row1.V4POOQ = rs_tDBInput_1.getBigDecimal(43);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.V4POFB = null;
							} else {
		                          
            row1.V4POFB = rs_tDBInput_1.getBigDecimal(44);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.V4POFR = null;
							} else {
		                          
            row1.V4POFR = rs_tDBInput_1.getBigDecimal(45);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.V4POAP = null;
							} else {
		                          
            row1.V4POAP = rs_tDBInput_1.getBigDecimal(46);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.V4IPUO = null;
							} else {
		                          
            row1.V4IPUO = rs_tDBInput_1.getBigDecimal(47);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.V4IPUT = null;
							} else {
	                         		
        	row1.V4IPUT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.V4IFRO = null;
							} else {
		                          
            row1.V4IFRO = rs_tDBInput_1.getBigDecimal(49);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.V4IFRT = null;
							} else {
	                         		
        	row1.V4IFRT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.V4BDPI = null;
							} else {
		                          
            row1.V4BDPI = rs_tDBInput_1.getBigDecimal(51);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.V4PAPI = null;
							} else {
		                          
            row1.V4PAPI = rs_tDBInput_1.getBigDecimal(52);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.V4POAL = null;
							} else {
		                          
            row1.V4POAL = rs_tDBInput_1.getBigDecimal(53);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.V4POUM = null;
							} else {
	                         		
        	row1.V4POUM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.V4OUCI = null;
							} else {
		                          
            row1.V4OUCI = rs_tDBInput_1.getBigDecimal(55);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.V4OADP = null;
							} else {
		                          
            row1.V4OADP = rs_tDBInput_1.getBigDecimal(56);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.V4ACDM = null;
							} else {
		                          
            row1.V4ACDM = rs_tDBInput_1.getBigDecimal(57);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.V4ACDF = null;
							} else {
		                          
            row1.V4ACDF = rs_tDBInput_1.getBigDecimal(58);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.V4ALQY = null;
							} else {
		                          
            row1.V4ALQY = rs_tDBInput_1.getBigDecimal(59);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.V4ALQS = null;
							} else {
		                          
            row1.V4ALQS = rs_tDBInput_1.getBigDecimal(60);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.V4MRPR = null;
							} else {
		                          
            row1.V4MRPR = rs_tDBInput_1.getBigDecimal(61);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.V4IUPR = null;
							} else {
		                          
            row1.V4IUPR = rs_tDBInput_1.getBigDecimal(62);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.V4FEGD = null;
							} else {
	                         		
        	row1.V4FEGD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 63, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.V4VPUM = null;
							} else {
	                         		
        	row1.V4VPUM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.V4PCOQ = null;
							} else {
		                          
            row1.V4PCOQ = rs_tDBInput_1.getBigDecimal(65);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.V4PCFB = null;
							} else {
		                          
            row1.V4PCFB = rs_tDBInput_1.getBigDecimal(66);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.V4PCFR = null;
							} else {
		                          
            row1.V4PCFR = rs_tDBInput_1.getBigDecimal(67);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.V4PCAP = null;
							} else {
		                          
            row1.V4PCAP = rs_tDBInput_1.getBigDecimal(68);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.V4CPAL = null;
							} else {
		                          
            row1.V4CPAL = rs_tDBInput_1.getBigDecimal(69);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.V4CPUT = null;
							} else {
	                         		
        	row1.V4CPUT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 70, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.V4CFRO = null;
							} else {
		                          
            row1.V4CFRO = rs_tDBInput_1.getBigDecimal(71);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.V4CFTO = null;
							} else {
	                         		
        	row1.V4CFTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.V4CPAP = null;
							} else {
		                          
            row1.V4CPAP = rs_tDBInput_1.getBigDecimal(73);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.V4CBDP = null;
							} else {
		                          
            row1.V4CBDP = rs_tDBInput_1.getBigDecimal(74);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.V4COIN = null;
							} else {
		                          
            row1.V4COIN = rs_tDBInput_1.getBigDecimal(75);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.V4CUOM = null;
							} else {
	                         		
        	row1.V4CUOM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.V4CUCI = null;
							} else {
		                          
            row1.V4CUCI = rs_tDBInput_1.getBigDecimal(77);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row1.V4CADP = null;
							} else {
		                          
            row1.V4CADP = rs_tDBInput_1.getBigDecimal(78);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 79) {
								row1.V4CACM = null;
							} else {
		                          
            row1.V4CACM = rs_tDBInput_1.getBigDecimal(79);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 80) {
								row1.V4CACF = null;
							} else {
		                          
            row1.V4CACF = rs_tDBInput_1.getBigDecimal(80);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 81) {
								row1.V4CMRP = null;
							} else {
		                          
            row1.V4CMRP = rs_tDBInput_1.getBigDecimal(81);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 82) {
								row1.V4CMEF = null;
							} else {
	                         		
        	row1.V4CMEF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 82, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 83) {
								row1.V4CFTP = null;
							} else {
	                         		
        	row1.V4CFTP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 83, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 84) {
								row1.V4CPOF = null;
							} else {
	                         		
        	row1.V4CPOF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 84, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 85) {
								row1.V4QYSH = null;
							} else {
		                          
            row1.V4QYSH = rs_tDBInput_1.getBigDecimal(85);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 86) {
								row1.V4QYDA = null;
							} else {
		                          
            row1.V4QYDA = rs_tDBInput_1.getBigDecimal(86);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 87) {
								row1.V4RCQT = null;
							} else {
		                          
            row1.V4RCQT = rs_tDBInput_1.getBigDecimal(87);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 88) {
								row1.V4VSQY = null;
							} else {
		                          
            row1.V4VSQY = rs_tDBInput_1.getBigDecimal(88);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 89) {
								row1.V4CSRC = null;
							} else {
	                         		
        	row1.V4CSRC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 89, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 90) {
								row1.V4VSRC = null;
							} else {
	                         		
        	row1.V4VSRC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 90, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 91) {
								row1.V4RVWT = null;
							} else {
		                          
            row1.V4RVWT = rs_tDBInput_1.getBigDecimal(91);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 92) {
								row1.V4RVWK = null;
							} else {
		                          
            row1.V4RVWK = rs_tDBInput_1.getBigDecimal(92);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 93) {
								row1.V4DRWT = null;
							} else {
		                          
            row1.V4DRWT = rs_tDBInput_1.getBigDecimal(93);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 94) {
								row1.V4DRWK = null;
							} else {
		                          
            row1.V4DRWK = rs_tDBInput_1.getBigDecimal(94);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 95) {
								row1.V4RPFF = null;
							} else {
	                         		
        	row1.V4RPFF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 95, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 96) {
								row1.V4PPFS = null;
							} else {
	                         		
        	row1.V4PPFS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 96, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 97) {
								row1.V4PMPS = null;
							} else {
	                         		
        	row1.V4PMPS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 97, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 98) {
								row1.V4MEAP = null;
							} else {
		                          
            row1.V4MEAP = rs_tDBInput_1.getBigDecimal(98);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 99) {
								row1.V4MIDT = null;
							} else {
		                          
            row1.V4MIDT = rs_tDBInput_1.getBigDecimal(99);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 100) {
								row1.V4MINV = null;
							} else {
	                         		
        	row1.V4MINV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 100, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 101) {
								row1.V4MPDD = null;
							} else {
	                         		
        	row1.V4MPDD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 101, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 102) {
								row1.V4MQDD = null;
							} else {
	                         		
        	row1.V4MQDD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 102, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 103) {
								row1.V4MRQT = null;
							} else {
		                          
            row1.V4MRQT = rs_tDBInput_1.getBigDecimal(103);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 104) {
								row1.V4MRCW = null;
							} else {
		                          
            row1.V4MRCW = rs_tDBInput_1.getBigDecimal(104);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 105) {
								row1.V4MRCK = null;
							} else {
		                          
            row1.V4MRCK = rs_tDBInput_1.getBigDecimal(105);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 106) {
								row1.V4PFMM = null;
							} else {
		                          
            row1.V4PFMM = rs_tDBInput_1.getBigDecimal(106);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 107) {
								row1.V4MCSD = null;
							} else {
		                          
            row1.V4MCSD = rs_tDBInput_1.getBigDecimal(107);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 108) {
								row1.V4FINV = null;
							} else {
	                         		
        	row1.V4FINV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 108, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 109) {
								row1.V4FEAP = null;
							} else {
		                          
            row1.V4FEAP = rs_tDBInput_1.getBigDecimal(109);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 110) {
								row1.V4FIDT = null;
							} else {
		                          
            row1.V4FIDT = rs_tDBInput_1.getBigDecimal(110);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 111) {
								row1.V4FRCW = null;
							} else {
		                          
            row1.V4FRCW = rs_tDBInput_1.getBigDecimal(111);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 112) {
								row1.V4FCAD = null;
							} else {
		                          
            row1.V4FCAD = rs_tDBInput_1.getBigDecimal(112);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 113) {
								row1.V4FRQT = null;
							} else {
		                          
            row1.V4FRQT = rs_tDBInput_1.getBigDecimal(113);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 114) {
								row1.V4PFMD = null;
							} else {
		                          
            row1.V4PFMD = rs_tDBInput_1.getBigDecimal(114);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 115) {
								row1.V4FTCQ = null;
							} else {
		                          
            row1.V4FTCQ = rs_tDBInput_1.getBigDecimal(115);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 116) {
								row1.V4LCN = null;
							} else {
	                         		
        	row1.V4LCN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 116, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 117) {
								row1.V4SPOF = null;
							} else {
	                         		
        	row1.V4SPOF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 117, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 118) {
								row1.V4PCLN = null;
							} else {
		                          
            row1.V4PCLN = rs_tDBInput_1.getBigDecimal(118);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 119) {
								row1.V4MFVN = null;
							} else {
	                         		
        	row1.V4MFVN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 119, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 120) {
								row1.V4MFID = null;
							} else {
	                         		
        	row1.V4MFID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 120, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 121) {
								row1.V4ERRF = null;
							} else {
	                         		
        	row1.V4ERRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 121, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 122) {
								row1.V4IMCC = null;
							} else {
	                         		
        	row1.V4IMCC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 122, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 123) {
								row1.V4COD1 = null;
							} else {
	                         		
        	row1.V4COD1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 123, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 124) {
								row1.V4NTYP = null;
							} else {
	                         		
        	row1.V4NTYP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 124, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 125) {
								row1.V4TDCD = null;
							} else {
		                          
            row1.V4TDCD = rs_tDBInput_1.getBigDecimal(125);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 126) {
								row1.V4QTIF = null;
							} else {
		                          
            row1.V4QTIF = rs_tDBInput_1.getBigDecimal(126);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 127) {
								row1.V4EADT = null;
							} else {
		                          
            row1.V4EADT = rs_tDBInput_1.getBigDecimal(127);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 128) {
								row1.V4EATM = null;
							} else {
		                          
            row1.V4EATM = rs_tDBInput_1.getBigDecimal(128);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 129) {
								row1.V4EAID = null;
							} else {
	                         		
        	row1.V4EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 129, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 130) {
								row1.V4MODT = null;
							} else {
		                          
            row1.V4MODT = rs_tDBInput_1.getBigDecimal(130);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 131) {
								row1.V4MOTM = null;
							} else {
		                          
            row1.V4MOTM = rs_tDBInput_1.getBigDecimal(131);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 132) {
								row1.V4MOID = null;
							} else {
	                         		
        	row1.V4MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 132, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 133) {
								row1.V4MOPG = null;
							} else {
	                         		
        	row1.V4MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 133, true);
		                    }
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.V4ARBD = TimeStampConverting.convertToDate(row1.V4ARBD.toString()) ;
Var.V4PSRD = TimeStampConverting.convertToDate(row1.V4PSRD.toString()) ;
Var.V4ARDE = TimeStampConverting.convertToDate(row1.V4ARDE.toString()) ;
Var.V4MIDT = TimeStampConverting.convertToDate(row1.V4MIDT.toString()) ;
Var.V4FIDT = TimeStampConverting.convertToDate(row1.V4FIDT.toString()) ;
Var.V4ORDT = TimeStampConverting.convertToDate(row1.V4ORDT.toString()) ;
Var.AVAIL_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.V4AVDT.toString(),row1.V4AVTM.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.V4EADT.toString(),row1.V4EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.V4MODT.toString(),row1.V4MOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PURCHASE_ORDER_DETAIL_UPDATE_5 = null;


// # Output table : 'PURCHASE_ORDER_DETAIL_UPDATE_5'
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.SITE_ID = context.opco;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.PURCHASE_ORDER_NO = row1.V4PO ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.SMS_MAJ_LINE_NO = row1.V4ROSQ ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.SMS_MIN_LINE_NO = new BigDecimal("1");
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.VENDOR_CLASSIFICATION = row1.V4VCAT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.SHIPPING_POINT_SHIP_FROM = row1.V4ADCD;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.BUYING_GROUP = row1.V4BYGP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CUST_PREF_VENDOR = row1.V4CPVN ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.SOURCE_VENDOR = row1.V4PVND ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.VENDOR_TERMS = row1.V4TERM ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.PO_PRIMARY_STATUS = row1.V4POST ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.PO_SECONDARY_STATUS = row1.V4POSS ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.PO_TYPE = row1.V4ORTY ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.WHSE_CHANGE_CODE = row1.V4WCCD ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONF_STATUS = row1.V4CFST ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.PO_VALID_PRICING_FLAG = row1.V4VLPF ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.PO_VALID_PRICING_APPROVAL = row1.V4VLPA ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.PO_CHANGED_FLAG = row1.V4POCH ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ALLOC_SCHEDULED_RECEIPT_FLAG = row1.V4ASRF ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.PRICE_OVERRIDE_FLAG = row1.V4POFL ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MARKED_BY_MERCHANDISER_FLAG = row1.V4MKMF ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FAILED_SCORECARD_FLAG = row1.V4FSCF ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MANUALLY_ENTERED_LINE_FLAG = row1.V4MELN ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CALENDAR_DATE_ANTICIPATED_RECEIPT = Var.V4ARBD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARBD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = Var.V4PSRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4PSRD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.BUSINESS_DATE_ANTICIPATED_RECEIPT = Var.V4ARDE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARDE):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.AVAIL_TIMESTAMP = Var.AVAIL_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.AVAIL_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.BUSINESS_ORDER_DATE = Var.V4ORDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ORDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.SUGGESTED_ORDER_QTY = row1.V4PSOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.SHIP_TO_CUST = row1.V4CUNO ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CUST_ORDER_NO = row1.V4ORNO ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CUST_ORDER_LINE_NO = row1.V4ODLN ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_ORDER_QTY = row1.V4POOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_FOB_PER_ITEM = row1.V4POFB ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_FREIGHT_PER_ITEM = row1.V4POFR;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_AP_PER_ITEM = row1.V4POAP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = row1.V4IPUO;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = row1.V4IPUT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_FREIGHT_RATE_OVERRIDE = row1.V4IFRO;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_FREIGHT_TYPE_OVERRIDE = row1.V4IFRT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_PICKUP_ALLOW_PER_ITEM = row1.V4PAPI;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_OFF_INV_ALLOW = row1.V4POAL;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_UOM = row1.V4POUM;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_ALT_DELV_PRICE = row1.V4OADP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_MERCH_ALLOW_CHARGE = row1.V4ACDM ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_FREIGHT_ALLOW_CHARGE = row1.V4ACDF ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ALLOC_QTY = row1.V4ALQY ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ALLOC_QTY_SPLITS = row1.V4ALQS ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.INV_UNIT_PRICE = row1.V4IUPR ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREE_GOODS_FLAG = row1.V4FEGD ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.VENDOR_PRICE_LIST_UOM = row1.V4VPUM ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_ORDER_QTY = row1.V4PCOQ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_FOB_PER_ITEM = row1.V4PCFB;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_FREIGHT_PER_ITEM = row1.V4PCFR;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_AP_PER_ITEM = row1.V4PCAP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = row1.V4CPAL;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = row1.V4CPUT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_FREIGHT_RATE_OVERRIDE = row1.V4CFRO;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_FREIGHT_TYPE_OVERRIDE = row1.V4CFTO;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_PICKUP_ALLOW_PER_ITEM = row1.V4CPAP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_OFF_INV_ALLOW = row1.V4COIN;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_UOM = row1.V4CUOM;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_ALT_DELV_PRICE = row1.V4CADP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONF_DIST_MERCH_ALLOW_CHARGE = row1.V4CACM;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONF_DIST_FREIGHT_ALLOW_CHARGE = row1.V4CACF;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_MRPT = row1.V4CMRP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = row1.V4CMEF;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONFIRMED_PRICE_OVERRIDE_FLAG = row1.V4CPOF;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CARRIER_SHORT_QTY = row1.V4QYSH;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.RECVD_DAMAGED_ACCEPTED_QTY = row1.V4QYDA;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.RECVD_QTY = row1.V4RCQT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.VENDOR_SHORT_QTY = row1.V4VSQY;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CARRIER_SHORT_REASON_CODE = row1.V4CSRC;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.VENDOR_SHORT_REASON_CODE = row1.V4VSRC;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.RECVD_WGT = row1.V4RVWT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.DAMAGED_RECVD_WGT = row1.V4DRWT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.REVISED_PROFORMA_FLAG = row1.V4RPFF;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREIGHT_PROFORMA_STATUS = row1.V4PPFS;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_PROFORMA_STATUS = row1.V4PMPS;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_EXT_AMT_TOBE_PAID = row1.V4MEAP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_INV_DATE = Var.V4MIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4MIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_INV_NO = row1.V4MINV;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_PRICE_DIFF_STATUS = row1.V4MPDD;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_QTY_DIFF_STATUS = row1.V4MQDD;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_QTY_TO_BE_PAID = row1.V4MRQT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_WGT_TO_BE_PAID = row1.V4MRCW;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MERCH_CASH_DISC = row1.V4MCSD;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREIGHT_INV_NO = row1.V4FINV;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREIGHT_EXT_AMT_TO_BE_PAID = row1.V4FEAP;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREIGHT_INV_DATE = Var.V4FIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4FIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREIGHT_CHARGE_TO_BE_PAID = row1.V4FRCW;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREIGHT_CASH_DISC = row1.V4FCAD;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREIGHT_QTY_TO_BE_PAID = row1.V4FRQT;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.FREIGHT_CLAIM_QTY = row1.V4FTCQ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.LOAD_CTRL_NO = row1.V4LCN;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.SPLIT_PO_FLAG = row1.V4SPOF;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.TRUE_VENDOR = row1.V4MFVN;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.MANIFEST_HIST_MFG_NO = row1.V4MFID;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.NOTE1 = row1.V4COD1;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.TRUE_VENDOR_SHIP_FROM = row1.V4TDCD;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.LAST_QTY_SENT_TO_DPR = row1.V4QTIF;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CREATED_USER_ID = row1.V4EAID;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.IS_ACTIVE = true;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.V4PF_SVOP = context.svop;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.UPDATED_USER_ID = row1.V4MOID;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.UPDATED_PROGRAM_ID = row1.V4MOPG;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.IS_DELETED = false;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CREATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.UPDATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.ORIG_UNLOAD_CHARGE_PER_ITEM = row1.V4OUCI;
PURCHASE_ORDER_DETAIL_UPDATE_5_tmp.CONF_UNLOAD_CHARGE_PER_ITEM = row1.V4CUCI;
PURCHASE_ORDER_DETAIL_UPDATE_5 = PURCHASE_ORDER_DETAIL_UPDATE_5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "PURCHASE_ORDER_DETAIL_UPDATE_5"
if(PURCHASE_ORDER_DETAIL_UPDATE_5 != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PURCHASE_ORDER_DETAIL_UPDATE_5"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_CLASSIFICATION == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_CLASSIFICATION);
}

                    pstmt_tDBOutput_1.setBigDecimal(2, PURCHASE_ORDER_DETAIL_UPDATE_5.SHIPPING_POINT_SHIP_FROM);

                    pstmt_tDBOutput_1.setBigDecimal(3, PURCHASE_ORDER_DETAIL_UPDATE_5.BUYING_GROUP);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CUST_PREF_VENDOR == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, PURCHASE_ORDER_DETAIL_UPDATE_5.CUST_PREF_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.SOURCE_VENDOR == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, PURCHASE_ORDER_DETAIL_UPDATE_5.SOURCE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_TERMS == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.PO_PRIMARY_STATUS == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, PURCHASE_ORDER_DETAIL_UPDATE_5.PO_PRIMARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.PO_SECONDARY_STATUS == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, PURCHASE_ORDER_DETAIL_UPDATE_5.PO_SECONDARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.PO_TYPE == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, PURCHASE_ORDER_DETAIL_UPDATE_5.PO_TYPE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.WHSE_CHANGE_CODE == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, PURCHASE_ORDER_DETAIL_UPDATE_5.WHSE_CHANGE_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CONF_STATUS == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, PURCHASE_ORDER_DETAIL_UPDATE_5.CONF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.PO_VALID_PRICING_FLAG == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, PURCHASE_ORDER_DETAIL_UPDATE_5.PO_VALID_PRICING_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.PO_VALID_PRICING_APPROVAL == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, PURCHASE_ORDER_DETAIL_UPDATE_5.PO_VALID_PRICING_APPROVAL);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.PO_CHANGED_FLAG == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, PURCHASE_ORDER_DETAIL_UPDATE_5.PO_CHANGED_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.ALLOC_SCHEDULED_RECEIPT_FLAG == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, PURCHASE_ORDER_DETAIL_UPDATE_5.ALLOC_SCHEDULED_RECEIPT_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, PURCHASE_ORDER_DETAIL_UPDATE_5.PRICE_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.MARKED_BY_MERCHANDISER_FLAG == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, PURCHASE_ORDER_DETAIL_UPDATE_5.MARKED_BY_MERCHANDISER_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.FAILED_SCORECARD_FLAG == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, PURCHASE_ORDER_DETAIL_UPDATE_5.FAILED_SCORECARD_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, PURCHASE_ORDER_DETAIL_UPDATE_5.MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CALENDAR_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_1.setTimestamp(20, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.CALENDAR_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(21, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.BUSINESS_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_1.setTimestamp(22, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.BUSINESS_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.AVAIL_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(23, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.AVAIL_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.BUSINESS_ORDER_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(24, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.BUSINESS_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_1.setBigDecimal(25, PURCHASE_ORDER_DETAIL_UPDATE_5.SUGGESTED_ORDER_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.SHIP_TO_CUST == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, PURCHASE_ORDER_DETAIL_UPDATE_5.SHIP_TO_CUST);
}

                    pstmt_tDBOutput_1.setBigDecimal(27, PURCHASE_ORDER_DETAIL_UPDATE_5.CUST_ORDER_NO);

                    pstmt_tDBOutput_1.setBigDecimal(28, PURCHASE_ORDER_DETAIL_UPDATE_5.CUST_ORDER_LINE_NO);

                    pstmt_tDBOutput_1.setBigDecimal(29, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_ORDER_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(30, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_FOB_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(31, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(32, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_AP_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(33, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_1.setBigDecimal(35, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_1.setBigDecimal(37, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(38, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_UOM == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_UOM);
}

                    pstmt_tDBOutput_1.setBigDecimal(40, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_ALT_DELV_PRICE);

                    pstmt_tDBOutput_1.setBigDecimal(41, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(42, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(43, PURCHASE_ORDER_DETAIL_UPDATE_5.ALLOC_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(44, PURCHASE_ORDER_DETAIL_UPDATE_5.ALLOC_QTY_SPLITS);

                    pstmt_tDBOutput_1.setBigDecimal(45, PURCHASE_ORDER_DETAIL_UPDATE_5.INV_UNIT_PRICE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.FREE_GOODS_FLAG == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, PURCHASE_ORDER_DETAIL_UPDATE_5.FREE_GOODS_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_PRICE_LIST_UOM == null) {
pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(47, PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_PRICE_LIST_UOM);
}

                    pstmt_tDBOutput_1.setBigDecimal(48, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_ORDER_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(49, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_FOB_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(50, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(51, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_AP_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(52, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(53, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_1.setBigDecimal(54, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(55, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_1.setBigDecimal(56, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(57, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_UOM == null) {
pstmt_tDBOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(58, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_UOM);
}

                    pstmt_tDBOutput_1.setBigDecimal(59, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_ALT_DELV_PRICE);

                    pstmt_tDBOutput_1.setBigDecimal(60, PURCHASE_ORDER_DETAIL_UPDATE_5.CONF_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(61, PURCHASE_ORDER_DETAIL_UPDATE_5.CONF_DIST_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_1.setBigDecimal(62, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_MRPT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(63, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(64, PURCHASE_ORDER_DETAIL_UPDATE_5.CONFIRMED_PRICE_OVERRIDE_FLAG);
}

                    pstmt_tDBOutput_1.setBigDecimal(65, PURCHASE_ORDER_DETAIL_UPDATE_5.CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(66, PURCHASE_ORDER_DETAIL_UPDATE_5.RECVD_DAMAGED_ACCEPTED_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(67, PURCHASE_ORDER_DETAIL_UPDATE_5.RECVD_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(68, PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_SHORT_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CARRIER_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(69, PURCHASE_ORDER_DETAIL_UPDATE_5.CARRIER_SHORT_REASON_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(70, PURCHASE_ORDER_DETAIL_UPDATE_5.VENDOR_SHORT_REASON_CODE);
}

                    pstmt_tDBOutput_1.setBigDecimal(71, PURCHASE_ORDER_DETAIL_UPDATE_5.RECVD_WGT);

                    pstmt_tDBOutput_1.setBigDecimal(72, PURCHASE_ORDER_DETAIL_UPDATE_5.DAMAGED_RECVD_WGT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.REVISED_PROFORMA_FLAG == null) {
pstmt_tDBOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(73, PURCHASE_ORDER_DETAIL_UPDATE_5.REVISED_PROFORMA_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_PROFORMA_STATUS == null) {
pstmt_tDBOutput_1.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(74, PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_PROFORMA_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_PROFORMA_STATUS == null) {
pstmt_tDBOutput_1.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(75, PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_PROFORMA_STATUS);
}

                    pstmt_tDBOutput_1.setBigDecimal(76, PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_EXT_AMT_TOBE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_INV_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(77, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_INV_NO == null) {
pstmt_tDBOutput_1.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(78, PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_INV_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_PRICE_DIFF_STATUS == null) {
pstmt_tDBOutput_1.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(79, PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_PRICE_DIFF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_QTY_DIFF_STATUS == null) {
pstmt_tDBOutput_1.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(80, PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_QTY_DIFF_STATUS);
}

                    pstmt_tDBOutput_1.setBigDecimal(81, PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_1.setBigDecimal(82, PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_WGT_TO_BE_PAID);

                    pstmt_tDBOutput_1.setBigDecimal(83, PURCHASE_ORDER_DETAIL_UPDATE_5.MERCH_CASH_DISC);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_INV_NO == null) {
pstmt_tDBOutput_1.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(84, PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_INV_NO);
}

                    pstmt_tDBOutput_1.setBigDecimal(85, PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_EXT_AMT_TO_BE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_INV_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(86, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(86, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_1.setBigDecimal(87, PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_CHARGE_TO_BE_PAID);

                    pstmt_tDBOutput_1.setBigDecimal(88, PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_CASH_DISC);

                    pstmt_tDBOutput_1.setBigDecimal(89, PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_1.setBigDecimal(90, PURCHASE_ORDER_DETAIL_UPDATE_5.FREIGHT_CLAIM_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.LOAD_CTRL_NO == null) {
pstmt_tDBOutput_1.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(91, PURCHASE_ORDER_DETAIL_UPDATE_5.LOAD_CTRL_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.SPLIT_PO_FLAG == null) {
pstmt_tDBOutput_1.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(92, PURCHASE_ORDER_DETAIL_UPDATE_5.SPLIT_PO_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.TRUE_VENDOR == null) {
pstmt_tDBOutput_1.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(93, PURCHASE_ORDER_DETAIL_UPDATE_5.TRUE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.MANIFEST_HIST_MFG_NO == null) {
pstmt_tDBOutput_1.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(94, PURCHASE_ORDER_DETAIL_UPDATE_5.MANIFEST_HIST_MFG_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.NOTE1 == null) {
pstmt_tDBOutput_1.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(95, PURCHASE_ORDER_DETAIL_UPDATE_5.NOTE1);
}

                    pstmt_tDBOutput_1.setBigDecimal(96, PURCHASE_ORDER_DETAIL_UPDATE_5.TRUE_VENDOR_SHIP_FROM);

                    pstmt_tDBOutput_1.setBigDecimal(97, PURCHASE_ORDER_DETAIL_UPDATE_5.LAST_QTY_SENT_TO_DPR);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(98, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(98, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CREATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(99, PURCHASE_ORDER_DETAIL_UPDATE_5.CREATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.IS_ACTIVE == null) {
pstmt_tDBOutput_1.setNull(100, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(100, PURCHASE_ORDER_DETAIL_UPDATE_5.IS_ACTIVE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.V4PF_SVOP == null) {
pstmt_tDBOutput_1.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(101, PURCHASE_ORDER_DETAIL_UPDATE_5.V4PF_SVOP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(102, PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_1.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(103, PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_PROGRAM_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(104, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(104, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.IS_DELETED == null) {
pstmt_tDBOutput_1.setNull(105, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_1.setBoolean(105, PURCHASE_ORDER_DETAIL_UPDATE_5.IS_DELETED);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CREATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(106, PURCHASE_ORDER_DETAIL_UPDATE_5.CREATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(107, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(107, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(108, PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(109, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_5.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(109, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_1.setBigDecimal(110, PURCHASE_ORDER_DETAIL_UPDATE_5.ORIG_UNLOAD_CHARGE_PER_ITEM);

                    pstmt_tDBOutput_1.setBigDecimal(111, PURCHASE_ORDER_DETAIL_UPDATE_5.CONF_UNLOAD_CHARGE_PER_ITEM);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.SITE_ID == null) {
pstmt_tDBOutput_1.setNull(112 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(112 + count_tDBOutput_1, PURCHASE_ORDER_DETAIL_UPDATE_5.SITE_ID);
}


                    if(PURCHASE_ORDER_DETAIL_UPDATE_5.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_1.setNull(113 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(113 + count_tDBOutput_1, PURCHASE_ORDER_DETAIL_UPDATE_5.PURCHASE_ORDER_NO);
}


                    pstmt_tDBOutput_1.setBigDecimal(114 + count_tDBOutput_1, PURCHASE_ORDER_DETAIL_UPDATE_5.SMS_MAJ_LINE_NO);


                    pstmt_tDBOutput_1.setBigDecimal(115 + count_tDBOutput_1, PURCHASE_ORDER_DETAIL_UPDATE_5.SMS_MIN_LINE_NO);


    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
            	    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
			    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "PURCHASE_ORDER_DETAIL_UPDATE_5"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_1", end_Hash.get("tDBInput_1")-start_Hash.get("tDBInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		updatedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
			}
			conn_tDBOutput_1.commit();
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
				rowsToCommitCount_tDBOutput_1 = 0;
			}
			commitCounter_tDBOutput_1 = 0;
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PURCHASE_ORDER_DETAIL_UPDATE_5");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_1", end_Hash.get("tDBOutput_1")-start_Hash.get("tDBOutput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println("Starting the Updating Data from IMHBV4PF_2 to PURCHASE_ORDER_DETAIL...........");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class PURCHASE_ORDER_DETAIL_UPDATE_2Struct implements routines.system.IPersistableRow<PURCHASE_ORDER_DETAIL_UPDATE_2Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public BigDecimal SMS_MAJ_LINE_NO;

				public BigDecimal getSMS_MAJ_LINE_NO () {
					return this.SMS_MAJ_LINE_NO;
				}
				
			    public BigDecimal SMS_MIN_LINE_NO;

				public BigDecimal getSMS_MIN_LINE_NO () {
					return this.SMS_MIN_LINE_NO;
				}
				
			    public String VENDOR_CLASSIFICATION;

				public String getVENDOR_CLASSIFICATION () {
					return this.VENDOR_CLASSIFICATION;
				}
				
			    public BigDecimal SHIPPING_POINT_SHIP_FROM;

				public BigDecimal getSHIPPING_POINT_SHIP_FROM () {
					return this.SHIPPING_POINT_SHIP_FROM;
				}
				
			    public BigDecimal BUYING_GROUP;

				public BigDecimal getBUYING_GROUP () {
					return this.BUYING_GROUP;
				}
				
			    public String CUST_PREF_VENDOR;

				public String getCUST_PREF_VENDOR () {
					return this.CUST_PREF_VENDOR;
				}
				
			    public String SOURCE_VENDOR;

				public String getSOURCE_VENDOR () {
					return this.SOURCE_VENDOR;
				}
				
			    public String VENDOR_TERMS;

				public String getVENDOR_TERMS () {
					return this.VENDOR_TERMS;
				}
				
			    public String PO_PRIMARY_STATUS;

				public String getPO_PRIMARY_STATUS () {
					return this.PO_PRIMARY_STATUS;
				}
				
			    public String PO_SECONDARY_STATUS;

				public String getPO_SECONDARY_STATUS () {
					return this.PO_SECONDARY_STATUS;
				}
				
			    public String PO_TYPE;

				public String getPO_TYPE () {
					return this.PO_TYPE;
				}
				
			    public String WHSE_CHANGE_CODE;

				public String getWHSE_CHANGE_CODE () {
					return this.WHSE_CHANGE_CODE;
				}
				
			    public String CONF_STATUS;

				public String getCONF_STATUS () {
					return this.CONF_STATUS;
				}
				
			    public String PO_VALID_PRICING_FLAG;

				public String getPO_VALID_PRICING_FLAG () {
					return this.PO_VALID_PRICING_FLAG;
				}
				
			    public String PO_VALID_PRICING_APPROVAL;

				public String getPO_VALID_PRICING_APPROVAL () {
					return this.PO_VALID_PRICING_APPROVAL;
				}
				
			    public String PO_CHANGED_FLAG;

				public String getPO_CHANGED_FLAG () {
					return this.PO_CHANGED_FLAG;
				}
				
			    public String ALLOC_SCHEDULED_RECEIPT_FLAG;

				public String getALLOC_SCHEDULED_RECEIPT_FLAG () {
					return this.ALLOC_SCHEDULED_RECEIPT_FLAG;
				}
				
			    public String PRICE_OVERRIDE_FLAG;

				public String getPRICE_OVERRIDE_FLAG () {
					return this.PRICE_OVERRIDE_FLAG;
				}
				
			    public String MARKED_BY_MERCHANDISER_FLAG;

				public String getMARKED_BY_MERCHANDISER_FLAG () {
					return this.MARKED_BY_MERCHANDISER_FLAG;
				}
				
			    public String FAILED_SCORECARD_FLAG;

				public String getFAILED_SCORECARD_FLAG () {
					return this.FAILED_SCORECARD_FLAG;
				}
				
			    public String MANUALLY_ENTERED_LINE_FLAG;

				public String getMANUALLY_ENTERED_LINE_FLAG () {
					return this.MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public java.util.Date CALENDAR_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ANTICIPATED_RECEIPT () {
					return this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;

				public java.util.Date getCALENDAR_DATE_SCHEDULED_RECEIPT_DATE () {
					return this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
				}
				
			    public java.util.Date BUSINESS_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ANTICIPATED_RECEIPT () {
					return this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date AVAIL_TIMESTAMP;

				public java.util.Date getAVAIL_TIMESTAMP () {
					return this.AVAIL_TIMESTAMP;
				}
				
			    public java.util.Date BUSINESS_ORDER_DATE;

				public java.util.Date getBUSINESS_ORDER_DATE () {
					return this.BUSINESS_ORDER_DATE;
				}
				
			    public BigDecimal SUGGESTED_ORDER_QTY;

				public BigDecimal getSUGGESTED_ORDER_QTY () {
					return this.SUGGESTED_ORDER_QTY;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public BigDecimal CUST_ORDER_NO;

				public BigDecimal getCUST_ORDER_NO () {
					return this.CUST_ORDER_NO;
				}
				
			    public BigDecimal CUST_ORDER_LINE_NO;

				public BigDecimal getCUST_ORDER_LINE_NO () {
					return this.CUST_ORDER_LINE_NO;
				}
				
			    public BigDecimal ORIG_ORDER_QTY;

				public BigDecimal getORIG_ORDER_QTY () {
					return this.ORIG_ORDER_QTY;
				}
				
			    public BigDecimal ORIG_FOB_PER_ITEM;

				public BigDecimal getORIG_FOB_PER_ITEM () {
					return this.ORIG_FOB_PER_ITEM;
				}
				
			    public BigDecimal ORIG_FREIGHT_PER_ITEM;

				public BigDecimal getORIG_FREIGHT_PER_ITEM () {
					return this.ORIG_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal ORIG_AP_PER_ITEM;

				public BigDecimal getORIG_AP_PER_ITEM () {
					return this.ORIG_AP_PER_ITEM;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getORIG_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getORIG_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getORIG_FREIGHT_RATE_OVERRIDE () {
					return this.ORIG_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String ORIG_FREIGHT_TYPE_OVERRIDE;

				public String getORIG_FREIGHT_TYPE_OVERRIDE () {
					return this.ORIG_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getORIG_PICKUP_ALLOW_PER_ITEM () {
					return this.ORIG_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal ORIG_OFF_INV_ALLOW;

				public BigDecimal getORIG_OFF_INV_ALLOW () {
					return this.ORIG_OFF_INV_ALLOW;
				}
				
			    public String ORIG_UOM;

				public String getORIG_UOM () {
					return this.ORIG_UOM;
				}
				
			    public BigDecimal ORIG_ALT_DELV_PRICE;

				public BigDecimal getORIG_ALT_DELV_PRICE () {
					return this.ORIG_ALT_DELV_PRICE;
				}
				
			    public BigDecimal ORIG_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_MERCH_ALLOW_CHARGE () {
					return this.ORIG_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal ORIG_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getORIG_FREIGHT_ALLOW_CHARGE () {
					return this.ORIG_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal ALLOC_QTY;

				public BigDecimal getALLOC_QTY () {
					return this.ALLOC_QTY;
				}
				
			    public BigDecimal ALLOC_QTY_SPLITS;

				public BigDecimal getALLOC_QTY_SPLITS () {
					return this.ALLOC_QTY_SPLITS;
				}
				
			    public BigDecimal INV_UNIT_PRICE;

				public BigDecimal getINV_UNIT_PRICE () {
					return this.INV_UNIT_PRICE;
				}
				
			    public String FREE_GOODS_FLAG;

				public String getFREE_GOODS_FLAG () {
					return this.FREE_GOODS_FLAG;
				}
				
			    public String VENDOR_PRICE_LIST_UOM;

				public String getVENDOR_PRICE_LIST_UOM () {
					return this.VENDOR_PRICE_LIST_UOM;
				}
				
			    public BigDecimal CONFIRMED_ORDER_QTY;

				public BigDecimal getCONFIRMED_ORDER_QTY () {
					return this.CONFIRMED_ORDER_QTY;
				}
				
			    public BigDecimal CONFIRMED_FOB_PER_ITEM;

				public BigDecimal getCONFIRMED_FOB_PER_ITEM () {
					return this.CONFIRMED_FOB_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_PER_ITEM;

				public BigDecimal getCONFIRMED_FREIGHT_PER_ITEM () {
					return this.CONFIRMED_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_AP_PER_ITEM;

				public BigDecimal getCONFIRMED_AP_PER_ITEM () {
					return this.CONFIRMED_AP_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getCONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_FREIGHT_RATE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_FREIGHT_TYPE_OVERRIDE;

				public String getCONFIRMED_FREIGHT_TYPE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_PER_ITEM () {
					return this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_OFF_INV_ALLOW;

				public BigDecimal getCONFIRMED_OFF_INV_ALLOW () {
					return this.CONFIRMED_OFF_INV_ALLOW;
				}
				
			    public String CONFIRMED_UOM;

				public String getCONFIRMED_UOM () {
					return this.CONFIRMED_UOM;
				}
				
			    public BigDecimal CONFIRMED_ALT_DELV_PRICE;

				public BigDecimal getCONFIRMED_ALT_DELV_PRICE () {
					return this.CONFIRMED_ALT_DELV_PRICE;
				}
				
			    public BigDecimal CONF_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_MERCH_ALLOW_CHARGE () {
					return this.CONF_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONF_DIST_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_FREIGHT_ALLOW_CHARGE () {
					return this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_MRPT;

				public BigDecimal getCONFIRMED_MRPT () {
					return this.CONFIRMED_MRPT;
				}
				
			    public String CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;

				public String getCONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG () {
					return this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public String CONFIRMED_PRICE_OVERRIDE_FLAG;

				public String getCONFIRMED_PRICE_OVERRIDE_FLAG () {
					return this.CONFIRMED_PRICE_OVERRIDE_FLAG;
				}
				
			    public BigDecimal CARRIER_SHORT_QTY;

				public BigDecimal getCARRIER_SHORT_QTY () {
					return this.CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal RECVD_DAMAGED_ACCEPTED_QTY;

				public BigDecimal getRECVD_DAMAGED_ACCEPTED_QTY () {
					return this.RECVD_DAMAGED_ACCEPTED_QTY;
				}
				
			    public BigDecimal RECVD_QTY;

				public BigDecimal getRECVD_QTY () {
					return this.RECVD_QTY;
				}
				
			    public BigDecimal VENDOR_SHORT_QTY;

				public BigDecimal getVENDOR_SHORT_QTY () {
					return this.VENDOR_SHORT_QTY;
				}
				
			    public String CARRIER_SHORT_REASON_CODE;

				public String getCARRIER_SHORT_REASON_CODE () {
					return this.CARRIER_SHORT_REASON_CODE;
				}
				
			    public String VENDOR_SHORT_REASON_CODE;

				public String getVENDOR_SHORT_REASON_CODE () {
					return this.VENDOR_SHORT_REASON_CODE;
				}
				
			    public BigDecimal RECVD_WGT;

				public BigDecimal getRECVD_WGT () {
					return this.RECVD_WGT;
				}
				
			    public BigDecimal DAMAGED_RECVD_WGT;

				public BigDecimal getDAMAGED_RECVD_WGT () {
					return this.DAMAGED_RECVD_WGT;
				}
				
			    public String REVISED_PROFORMA_FLAG;

				public String getREVISED_PROFORMA_FLAG () {
					return this.REVISED_PROFORMA_FLAG;
				}
				
			    public String FREIGHT_PROFORMA_STATUS;

				public String getFREIGHT_PROFORMA_STATUS () {
					return this.FREIGHT_PROFORMA_STATUS;
				}
				
			    public String MERCH_PROFORMA_STATUS;

				public String getMERCH_PROFORMA_STATUS () {
					return this.MERCH_PROFORMA_STATUS;
				}
				
			    public BigDecimal MERCH_EXT_AMT_TOBE_PAID;

				public BigDecimal getMERCH_EXT_AMT_TOBE_PAID () {
					return this.MERCH_EXT_AMT_TOBE_PAID;
				}
				
			    public java.util.Date MERCH_INV_DATE;

				public java.util.Date getMERCH_INV_DATE () {
					return this.MERCH_INV_DATE;
				}
				
			    public String MERCH_INV_NO;

				public String getMERCH_INV_NO () {
					return this.MERCH_INV_NO;
				}
				
			    public String MERCH_PRICE_DIFF_STATUS;

				public String getMERCH_PRICE_DIFF_STATUS () {
					return this.MERCH_PRICE_DIFF_STATUS;
				}
				
			    public String MERCH_QTY_DIFF_STATUS;

				public String getMERCH_QTY_DIFF_STATUS () {
					return this.MERCH_QTY_DIFF_STATUS;
				}
				
			    public BigDecimal MERCH_QTY_TO_BE_PAID;

				public BigDecimal getMERCH_QTY_TO_BE_PAID () {
					return this.MERCH_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_WGT_TO_BE_PAID;

				public BigDecimal getMERCH_WGT_TO_BE_PAID () {
					return this.MERCH_WGT_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_CASH_DISC;

				public BigDecimal getMERCH_CASH_DISC () {
					return this.MERCH_CASH_DISC;
				}
				
			    public String FREIGHT_INV_NO;

				public String getFREIGHT_INV_NO () {
					return this.FREIGHT_INV_NO;
				}
				
			    public BigDecimal FREIGHT_EXT_AMT_TO_BE_PAID;

				public BigDecimal getFREIGHT_EXT_AMT_TO_BE_PAID () {
					return this.FREIGHT_EXT_AMT_TO_BE_PAID;
				}
				
			    public java.util.Date FREIGHT_INV_DATE;

				public java.util.Date getFREIGHT_INV_DATE () {
					return this.FREIGHT_INV_DATE;
				}
				
			    public BigDecimal FREIGHT_CHARGE_TO_BE_PAID;

				public BigDecimal getFREIGHT_CHARGE_TO_BE_PAID () {
					return this.FREIGHT_CHARGE_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CASH_DISC;

				public BigDecimal getFREIGHT_CASH_DISC () {
					return this.FREIGHT_CASH_DISC;
				}
				
			    public BigDecimal FREIGHT_QTY_TO_BE_PAID;

				public BigDecimal getFREIGHT_QTY_TO_BE_PAID () {
					return this.FREIGHT_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CLAIM_QTY;

				public BigDecimal getFREIGHT_CLAIM_QTY () {
					return this.FREIGHT_CLAIM_QTY;
				}
				
			    public String LOAD_CTRL_NO;

				public String getLOAD_CTRL_NO () {
					return this.LOAD_CTRL_NO;
				}
				
			    public String SPLIT_PO_FLAG;

				public String getSPLIT_PO_FLAG () {
					return this.SPLIT_PO_FLAG;
				}
				
			    public String TRUE_VENDOR;

				public String getTRUE_VENDOR () {
					return this.TRUE_VENDOR;
				}
				
			    public String MANIFEST_HIST_MFG_NO;

				public String getMANIFEST_HIST_MFG_NO () {
					return this.MANIFEST_HIST_MFG_NO;
				}
				
			    public String NOTE1;

				public String getNOTE1 () {
					return this.NOTE1;
				}
				
			    public BigDecimal TRUE_VENDOR_SHIP_FROM;

				public BigDecimal getTRUE_VENDOR_SHIP_FROM () {
					return this.TRUE_VENDOR_SHIP_FROM;
				}
				
			    public BigDecimal LAST_QTY_SENT_TO_DPR;

				public BigDecimal getLAST_QTY_SENT_TO_DPR () {
					return this.LAST_QTY_SENT_TO_DPR;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String V4PF_SVOP;

				public String getV4PF_SVOP () {
					return this.V4PF_SVOP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public BigDecimal ORIG_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getORIG_UNLOAD_CHARGE_PER_ITEM () {
					return this.ORIG_UNLOAD_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal CONF_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getCONF_UNLOAD_CHARGE_PER_ITEM () {
					return this.CONF_UNLOAD_CHARGE_PER_ITEM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.SMS_MAJ_LINE_NO == null) ? 0 : this.SMS_MAJ_LINE_NO.hashCode());
					
						result = prime * result + ((this.SMS_MIN_LINE_NO == null) ? 0 : this.SMS_MIN_LINE_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PURCHASE_ORDER_DETAIL_UPDATE_2Struct other = (PURCHASE_ORDER_DETAIL_UPDATE_2Struct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.SMS_MAJ_LINE_NO == null) {
							if (other.SMS_MAJ_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MAJ_LINE_NO.equals(other.SMS_MAJ_LINE_NO))
						
							return false;
					
						if (this.SMS_MIN_LINE_NO == null) {
							if (other.SMS_MIN_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MIN_LINE_NO.equals(other.SMS_MIN_LINE_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PURCHASE_ORDER_DETAIL_UPDATE_2Struct other) {

		other.SITE_ID = this.SITE_ID;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            other.VENDOR_CLASSIFICATION = this.VENDOR_CLASSIFICATION;
	            other.SHIPPING_POINT_SHIP_FROM = this.SHIPPING_POINT_SHIP_FROM;
	            other.BUYING_GROUP = this.BUYING_GROUP;
	            other.CUST_PREF_VENDOR = this.CUST_PREF_VENDOR;
	            other.SOURCE_VENDOR = this.SOURCE_VENDOR;
	            other.VENDOR_TERMS = this.VENDOR_TERMS;
	            other.PO_PRIMARY_STATUS = this.PO_PRIMARY_STATUS;
	            other.PO_SECONDARY_STATUS = this.PO_SECONDARY_STATUS;
	            other.PO_TYPE = this.PO_TYPE;
	            other.WHSE_CHANGE_CODE = this.WHSE_CHANGE_CODE;
	            other.CONF_STATUS = this.CONF_STATUS;
	            other.PO_VALID_PRICING_FLAG = this.PO_VALID_PRICING_FLAG;
	            other.PO_VALID_PRICING_APPROVAL = this.PO_VALID_PRICING_APPROVAL;
	            other.PO_CHANGED_FLAG = this.PO_CHANGED_FLAG;
	            other.ALLOC_SCHEDULED_RECEIPT_FLAG = this.ALLOC_SCHEDULED_RECEIPT_FLAG;
	            other.PRICE_OVERRIDE_FLAG = this.PRICE_OVERRIDE_FLAG;
	            other.MARKED_BY_MERCHANDISER_FLAG = this.MARKED_BY_MERCHANDISER_FLAG;
	            other.FAILED_SCORECARD_FLAG = this.FAILED_SCORECARD_FLAG;
	            other.MANUALLY_ENTERED_LINE_FLAG = this.MANUALLY_ENTERED_LINE_FLAG;
	            other.CALENDAR_DATE_ANTICIPATED_RECEIPT = this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
	            other.BUSINESS_DATE_ANTICIPATED_RECEIPT = this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
	            other.AVAIL_TIMESTAMP = this.AVAIL_TIMESTAMP;
	            other.BUSINESS_ORDER_DATE = this.BUSINESS_ORDER_DATE;
	            other.SUGGESTED_ORDER_QTY = this.SUGGESTED_ORDER_QTY;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.CUST_ORDER_NO = this.CUST_ORDER_NO;
	            other.CUST_ORDER_LINE_NO = this.CUST_ORDER_LINE_NO;
	            other.ORIG_ORDER_QTY = this.ORIG_ORDER_QTY;
	            other.ORIG_FOB_PER_ITEM = this.ORIG_FOB_PER_ITEM;
	            other.ORIG_FREIGHT_PER_ITEM = this.ORIG_FREIGHT_PER_ITEM;
	            other.ORIG_AP_PER_ITEM = this.ORIG_AP_PER_ITEM;
	            other.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.ORIG_FREIGHT_RATE_OVERRIDE = this.ORIG_FREIGHT_RATE_OVERRIDE;
	            other.ORIG_FREIGHT_TYPE_OVERRIDE = this.ORIG_FREIGHT_TYPE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_PER_ITEM = this.ORIG_PICKUP_ALLOW_PER_ITEM;
	            other.ORIG_OFF_INV_ALLOW = this.ORIG_OFF_INV_ALLOW;
	            other.ORIG_UOM = this.ORIG_UOM;
	            other.ORIG_ALT_DELV_PRICE = this.ORIG_ALT_DELV_PRICE;
	            other.ORIG_MERCH_ALLOW_CHARGE = this.ORIG_MERCH_ALLOW_CHARGE;
	            other.ORIG_FREIGHT_ALLOW_CHARGE = this.ORIG_FREIGHT_ALLOW_CHARGE;
	            other.ALLOC_QTY = this.ALLOC_QTY;
	            other.ALLOC_QTY_SPLITS = this.ALLOC_QTY_SPLITS;
	            other.INV_UNIT_PRICE = this.INV_UNIT_PRICE;
	            other.FREE_GOODS_FLAG = this.FREE_GOODS_FLAG;
	            other.VENDOR_PRICE_LIST_UOM = this.VENDOR_PRICE_LIST_UOM;
	            other.CONFIRMED_ORDER_QTY = this.CONFIRMED_ORDER_QTY;
	            other.CONFIRMED_FOB_PER_ITEM = this.CONFIRMED_FOB_PER_ITEM;
	            other.CONFIRMED_FREIGHT_PER_ITEM = this.CONFIRMED_FREIGHT_PER_ITEM;
	            other.CONFIRMED_AP_PER_ITEM = this.CONFIRMED_AP_PER_ITEM;
	            other.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_RATE_OVERRIDE = this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_TYPE_OVERRIDE = this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_PER_ITEM = this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
	            other.CONFIRMED_OFF_INV_ALLOW = this.CONFIRMED_OFF_INV_ALLOW;
	            other.CONFIRMED_UOM = this.CONFIRMED_UOM;
	            other.CONFIRMED_ALT_DELV_PRICE = this.CONFIRMED_ALT_DELV_PRICE;
	            other.CONF_DIST_MERCH_ALLOW_CHARGE = this.CONF_DIST_MERCH_ALLOW_CHARGE;
	            other.CONF_DIST_FREIGHT_ALLOW_CHARGE = this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_MRPT = this.CONFIRMED_MRPT;
	            other.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
	            other.CONFIRMED_PRICE_OVERRIDE_FLAG = this.CONFIRMED_PRICE_OVERRIDE_FLAG;
	            other.CARRIER_SHORT_QTY = this.CARRIER_SHORT_QTY;
	            other.RECVD_DAMAGED_ACCEPTED_QTY = this.RECVD_DAMAGED_ACCEPTED_QTY;
	            other.RECVD_QTY = this.RECVD_QTY;
	            other.VENDOR_SHORT_QTY = this.VENDOR_SHORT_QTY;
	            other.CARRIER_SHORT_REASON_CODE = this.CARRIER_SHORT_REASON_CODE;
	            other.VENDOR_SHORT_REASON_CODE = this.VENDOR_SHORT_REASON_CODE;
	            other.RECVD_WGT = this.RECVD_WGT;
	            other.DAMAGED_RECVD_WGT = this.DAMAGED_RECVD_WGT;
	            other.REVISED_PROFORMA_FLAG = this.REVISED_PROFORMA_FLAG;
	            other.FREIGHT_PROFORMA_STATUS = this.FREIGHT_PROFORMA_STATUS;
	            other.MERCH_PROFORMA_STATUS = this.MERCH_PROFORMA_STATUS;
	            other.MERCH_EXT_AMT_TOBE_PAID = this.MERCH_EXT_AMT_TOBE_PAID;
	            other.MERCH_INV_DATE = this.MERCH_INV_DATE;
	            other.MERCH_INV_NO = this.MERCH_INV_NO;
	            other.MERCH_PRICE_DIFF_STATUS = this.MERCH_PRICE_DIFF_STATUS;
	            other.MERCH_QTY_DIFF_STATUS = this.MERCH_QTY_DIFF_STATUS;
	            other.MERCH_QTY_TO_BE_PAID = this.MERCH_QTY_TO_BE_PAID;
	            other.MERCH_WGT_TO_BE_PAID = this.MERCH_WGT_TO_BE_PAID;
	            other.MERCH_CASH_DISC = this.MERCH_CASH_DISC;
	            other.FREIGHT_INV_NO = this.FREIGHT_INV_NO;
	            other.FREIGHT_EXT_AMT_TO_BE_PAID = this.FREIGHT_EXT_AMT_TO_BE_PAID;
	            other.FREIGHT_INV_DATE = this.FREIGHT_INV_DATE;
	            other.FREIGHT_CHARGE_TO_BE_PAID = this.FREIGHT_CHARGE_TO_BE_PAID;
	            other.FREIGHT_CASH_DISC = this.FREIGHT_CASH_DISC;
	            other.FREIGHT_QTY_TO_BE_PAID = this.FREIGHT_QTY_TO_BE_PAID;
	            other.FREIGHT_CLAIM_QTY = this.FREIGHT_CLAIM_QTY;
	            other.LOAD_CTRL_NO = this.LOAD_CTRL_NO;
	            other.SPLIT_PO_FLAG = this.SPLIT_PO_FLAG;
	            other.TRUE_VENDOR = this.TRUE_VENDOR;
	            other.MANIFEST_HIST_MFG_NO = this.MANIFEST_HIST_MFG_NO;
	            other.NOTE1 = this.NOTE1;
	            other.TRUE_VENDOR_SHIP_FROM = this.TRUE_VENDOR_SHIP_FROM;
	            other.LAST_QTY_SENT_TO_DPR = this.LAST_QTY_SENT_TO_DPR;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.V4PF_SVOP = this.V4PF_SVOP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.ORIG_UNLOAD_CHARGE_PER_ITEM = this.ORIG_UNLOAD_CHARGE_PER_ITEM;
	            other.CONF_UNLOAD_CHARGE_PER_ITEM = this.CONF_UNLOAD_CHARGE_PER_ITEM;
	            
	}

	public void copyKeysDataTo(PURCHASE_ORDER_DETAIL_UPDATE_2Struct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            	other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",SMS_MAJ_LINE_NO="+String.valueOf(SMS_MAJ_LINE_NO));
		sb.append(",SMS_MIN_LINE_NO="+String.valueOf(SMS_MIN_LINE_NO));
		sb.append(",VENDOR_CLASSIFICATION="+VENDOR_CLASSIFICATION);
		sb.append(",SHIPPING_POINT_SHIP_FROM="+String.valueOf(SHIPPING_POINT_SHIP_FROM));
		sb.append(",BUYING_GROUP="+String.valueOf(BUYING_GROUP));
		sb.append(",CUST_PREF_VENDOR="+CUST_PREF_VENDOR);
		sb.append(",SOURCE_VENDOR="+SOURCE_VENDOR);
		sb.append(",VENDOR_TERMS="+VENDOR_TERMS);
		sb.append(",PO_PRIMARY_STATUS="+PO_PRIMARY_STATUS);
		sb.append(",PO_SECONDARY_STATUS="+PO_SECONDARY_STATUS);
		sb.append(",PO_TYPE="+PO_TYPE);
		sb.append(",WHSE_CHANGE_CODE="+WHSE_CHANGE_CODE);
		sb.append(",CONF_STATUS="+CONF_STATUS);
		sb.append(",PO_VALID_PRICING_FLAG="+PO_VALID_PRICING_FLAG);
		sb.append(",PO_VALID_PRICING_APPROVAL="+PO_VALID_PRICING_APPROVAL);
		sb.append(",PO_CHANGED_FLAG="+PO_CHANGED_FLAG);
		sb.append(",ALLOC_SCHEDULED_RECEIPT_FLAG="+ALLOC_SCHEDULED_RECEIPT_FLAG);
		sb.append(",PRICE_OVERRIDE_FLAG="+PRICE_OVERRIDE_FLAG);
		sb.append(",MARKED_BY_MERCHANDISER_FLAG="+MARKED_BY_MERCHANDISER_FLAG);
		sb.append(",FAILED_SCORECARD_FLAG="+FAILED_SCORECARD_FLAG);
		sb.append(",MANUALLY_ENTERED_LINE_FLAG="+MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CALENDAR_DATE_ANTICIPATED_RECEIPT="+String.valueOf(CALENDAR_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_DATE_SCHEDULED_RECEIPT_DATE="+String.valueOf(CALENDAR_DATE_SCHEDULED_RECEIPT_DATE));
		sb.append(",BUSINESS_DATE_ANTICIPATED_RECEIPT="+String.valueOf(BUSINESS_DATE_ANTICIPATED_RECEIPT));
		sb.append(",AVAIL_TIMESTAMP="+String.valueOf(AVAIL_TIMESTAMP));
		sb.append(",BUSINESS_ORDER_DATE="+String.valueOf(BUSINESS_ORDER_DATE));
		sb.append(",SUGGESTED_ORDER_QTY="+String.valueOf(SUGGESTED_ORDER_QTY));
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",CUST_ORDER_NO="+String.valueOf(CUST_ORDER_NO));
		sb.append(",CUST_ORDER_LINE_NO="+String.valueOf(CUST_ORDER_LINE_NO));
		sb.append(",ORIG_ORDER_QTY="+String.valueOf(ORIG_ORDER_QTY));
		sb.append(",ORIG_FOB_PER_ITEM="+String.valueOf(ORIG_FOB_PER_ITEM));
		sb.append(",ORIG_FREIGHT_PER_ITEM="+String.valueOf(ORIG_FREIGHT_PER_ITEM));
		sb.append(",ORIG_AP_PER_ITEM="+String.valueOf(ORIG_AP_PER_ITEM));
		sb.append(",ORIG_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(ORIG_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",ORIG_PICKUP_ALLOW_TYPE_OVERRIDE="+ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",ORIG_FREIGHT_RATE_OVERRIDE="+String.valueOf(ORIG_FREIGHT_RATE_OVERRIDE));
		sb.append(",ORIG_FREIGHT_TYPE_OVERRIDE="+ORIG_FREIGHT_TYPE_OVERRIDE);
		sb.append(",ORIG_PICKUP_ALLOW_PER_ITEM="+String.valueOf(ORIG_PICKUP_ALLOW_PER_ITEM));
		sb.append(",ORIG_OFF_INV_ALLOW="+String.valueOf(ORIG_OFF_INV_ALLOW));
		sb.append(",ORIG_UOM="+ORIG_UOM);
		sb.append(",ORIG_ALT_DELV_PRICE="+String.valueOf(ORIG_ALT_DELV_PRICE));
		sb.append(",ORIG_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_MERCH_ALLOW_CHARGE));
		sb.append(",ORIG_FREIGHT_ALLOW_CHARGE="+String.valueOf(ORIG_FREIGHT_ALLOW_CHARGE));
		sb.append(",ALLOC_QTY="+String.valueOf(ALLOC_QTY));
		sb.append(",ALLOC_QTY_SPLITS="+String.valueOf(ALLOC_QTY_SPLITS));
		sb.append(",INV_UNIT_PRICE="+String.valueOf(INV_UNIT_PRICE));
		sb.append(",FREE_GOODS_FLAG="+FREE_GOODS_FLAG);
		sb.append(",VENDOR_PRICE_LIST_UOM="+VENDOR_PRICE_LIST_UOM);
		sb.append(",CONFIRMED_ORDER_QTY="+String.valueOf(CONFIRMED_ORDER_QTY));
		sb.append(",CONFIRMED_FOB_PER_ITEM="+String.valueOf(CONFIRMED_FOB_PER_ITEM));
		sb.append(",CONFIRMED_FREIGHT_PER_ITEM="+String.valueOf(CONFIRMED_FREIGHT_PER_ITEM));
		sb.append(",CONFIRMED_AP_PER_ITEM="+String.valueOf(CONFIRMED_AP_PER_ITEM));
		sb.append(",CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE="+CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_FREIGHT_RATE_OVERRIDE="+String.valueOf(CONFIRMED_FREIGHT_RATE_OVERRIDE));
		sb.append(",CONFIRMED_FREIGHT_TYPE_OVERRIDE="+CONFIRMED_FREIGHT_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_PER_ITEM="+String.valueOf(CONFIRMED_PICKUP_ALLOW_PER_ITEM));
		sb.append(",CONFIRMED_OFF_INV_ALLOW="+String.valueOf(CONFIRMED_OFF_INV_ALLOW));
		sb.append(",CONFIRMED_UOM="+CONFIRMED_UOM);
		sb.append(",CONFIRMED_ALT_DELV_PRICE="+String.valueOf(CONFIRMED_ALT_DELV_PRICE));
		sb.append(",CONF_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(CONF_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",CONF_DIST_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONF_DIST_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_MRPT="+String.valueOf(CONFIRMED_MRPT));
		sb.append(",CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG="+CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CONFIRMED_PRICE_OVERRIDE_FLAG="+CONFIRMED_PRICE_OVERRIDE_FLAG);
		sb.append(",CARRIER_SHORT_QTY="+String.valueOf(CARRIER_SHORT_QTY));
		sb.append(",RECVD_DAMAGED_ACCEPTED_QTY="+String.valueOf(RECVD_DAMAGED_ACCEPTED_QTY));
		sb.append(",RECVD_QTY="+String.valueOf(RECVD_QTY));
		sb.append(",VENDOR_SHORT_QTY="+String.valueOf(VENDOR_SHORT_QTY));
		sb.append(",CARRIER_SHORT_REASON_CODE="+CARRIER_SHORT_REASON_CODE);
		sb.append(",VENDOR_SHORT_REASON_CODE="+VENDOR_SHORT_REASON_CODE);
		sb.append(",RECVD_WGT="+String.valueOf(RECVD_WGT));
		sb.append(",DAMAGED_RECVD_WGT="+String.valueOf(DAMAGED_RECVD_WGT));
		sb.append(",REVISED_PROFORMA_FLAG="+REVISED_PROFORMA_FLAG);
		sb.append(",FREIGHT_PROFORMA_STATUS="+FREIGHT_PROFORMA_STATUS);
		sb.append(",MERCH_PROFORMA_STATUS="+MERCH_PROFORMA_STATUS);
		sb.append(",MERCH_EXT_AMT_TOBE_PAID="+String.valueOf(MERCH_EXT_AMT_TOBE_PAID));
		sb.append(",MERCH_INV_DATE="+String.valueOf(MERCH_INV_DATE));
		sb.append(",MERCH_INV_NO="+MERCH_INV_NO);
		sb.append(",MERCH_PRICE_DIFF_STATUS="+MERCH_PRICE_DIFF_STATUS);
		sb.append(",MERCH_QTY_DIFF_STATUS="+MERCH_QTY_DIFF_STATUS);
		sb.append(",MERCH_QTY_TO_BE_PAID="+String.valueOf(MERCH_QTY_TO_BE_PAID));
		sb.append(",MERCH_WGT_TO_BE_PAID="+String.valueOf(MERCH_WGT_TO_BE_PAID));
		sb.append(",MERCH_CASH_DISC="+String.valueOf(MERCH_CASH_DISC));
		sb.append(",FREIGHT_INV_NO="+FREIGHT_INV_NO);
		sb.append(",FREIGHT_EXT_AMT_TO_BE_PAID="+String.valueOf(FREIGHT_EXT_AMT_TO_BE_PAID));
		sb.append(",FREIGHT_INV_DATE="+String.valueOf(FREIGHT_INV_DATE));
		sb.append(",FREIGHT_CHARGE_TO_BE_PAID="+String.valueOf(FREIGHT_CHARGE_TO_BE_PAID));
		sb.append(",FREIGHT_CASH_DISC="+String.valueOf(FREIGHT_CASH_DISC));
		sb.append(",FREIGHT_QTY_TO_BE_PAID="+String.valueOf(FREIGHT_QTY_TO_BE_PAID));
		sb.append(",FREIGHT_CLAIM_QTY="+String.valueOf(FREIGHT_CLAIM_QTY));
		sb.append(",LOAD_CTRL_NO="+LOAD_CTRL_NO);
		sb.append(",SPLIT_PO_FLAG="+SPLIT_PO_FLAG);
		sb.append(",TRUE_VENDOR="+TRUE_VENDOR);
		sb.append(",MANIFEST_HIST_MFG_NO="+MANIFEST_HIST_MFG_NO);
		sb.append(",NOTE1="+NOTE1);
		sb.append(",TRUE_VENDOR_SHIP_FROM="+String.valueOf(TRUE_VENDOR_SHIP_FROM));
		sb.append(",LAST_QTY_SENT_TO_DPR="+String.valueOf(LAST_QTY_SENT_TO_DPR));
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",V4PF_SVOP="+V4PF_SVOP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",ORIG_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(ORIG_UNLOAD_CHARGE_PER_ITEM));
		sb.append(",CONF_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(CONF_UNLOAD_CHARGE_PER_ITEM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PURCHASE_ORDER_DETAIL_UPDATE_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MAJ_LINE_NO, other.SMS_MAJ_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MIN_LINE_NO, other.SMS_MIN_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public String V4PO;

				public String getV4PO () {
					return this.V4PO;
				}
				
			    public String V4ITEM;

				public String getV4ITEM () {
					return this.V4ITEM;
				}
				
			    public BigDecimal V4ROSQ;

				public BigDecimal getV4ROSQ () {
					return this.V4ROSQ;
				}
				
			    public String V4OWID;

				public String getV4OWID () {
					return this.V4OWID;
				}
				
			    public String V4ARCO;

				public String getV4ARCO () {
					return this.V4ARCO;
				}
				
			    public String V4MNPC;

				public String getV4MNPC () {
					return this.V4MNPC;
				}
				
			    public String V4MUPC;

				public String getV4MUPC () {
					return this.V4MUPC;
				}
				
			    public String V4ITDS;

				public String getV4ITDS () {
					return this.V4ITDS;
				}
				
			    public String V4VCAT;

				public String getV4VCAT () {
					return this.V4VCAT;
				}
				
			    public String V4VNBR;

				public String getV4VNBR () {
					return this.V4VNBR;
				}
				
			    public BigDecimal V4ADCD;

				public BigDecimal getV4ADCD () {
					return this.V4ADCD;
				}
				
			    public BigDecimal V4BYGP;

				public BigDecimal getV4BYGP () {
					return this.V4BYGP;
				}
				
			    public String V4CPVN;

				public String getV4CPVN () {
					return this.V4CPVN;
				}
				
			    public String V4PVND;

				public String getV4PVND () {
					return this.V4PVND;
				}
				
			    public String V4TERM;

				public String getV4TERM () {
					return this.V4TERM;
				}
				
			    public String V4POST;

				public String getV4POST () {
					return this.V4POST;
				}
				
			    public String V4POSS;

				public String getV4POSS () {
					return this.V4POSS;
				}
				
			    public String V4ORTY;

				public String getV4ORTY () {
					return this.V4ORTY;
				}
				
			    public String V4WCCD;

				public String getV4WCCD () {
					return this.V4WCCD;
				}
				
			    public String V4CFST;

				public String getV4CFST () {
					return this.V4CFST;
				}
				
			    public String V4WHSE;

				public String getV4WHSE () {
					return this.V4WHSE;
				}
				
			    public String V4VLPF;

				public String getV4VLPF () {
					return this.V4VLPF;
				}
				
			    public String V4VLPA;

				public String getV4VLPA () {
					return this.V4VLPA;
				}
				
			    public String V4POCH;

				public String getV4POCH () {
					return this.V4POCH;
				}
				
			    public String V4KMFG;

				public String getV4KMFG () {
					return this.V4KMFG;
				}
				
			    public String V4ASRF;

				public String getV4ASRF () {
					return this.V4ASRF;
				}
				
			    public String V4POFL;

				public String getV4POFL () {
					return this.V4POFL;
				}
				
			    public String V4MKMF;

				public String getV4MKMF () {
					return this.V4MKMF;
				}
				
			    public String V4FSCF;

				public String getV4FSCF () {
					return this.V4FSCF;
				}
				
			    public String V4MELN;

				public String getV4MELN () {
					return this.V4MELN;
				}
				
			    public String V4IPCF;

				public String getV4IPCF () {
					return this.V4IPCF;
				}
				
			    public BigDecimal V4ARBD;

				public BigDecimal getV4ARBD () {
					return this.V4ARBD;
				}
				
			    public BigDecimal V4PSRD;

				public BigDecimal getV4PSRD () {
					return this.V4PSRD;
				}
				
			    public BigDecimal V4ARDE;

				public BigDecimal getV4ARDE () {
					return this.V4ARDE;
				}
				
			    public BigDecimal V4AVDT;

				public BigDecimal getV4AVDT () {
					return this.V4AVDT;
				}
				
			    public BigDecimal V4AVTM;

				public BigDecimal getV4AVTM () {
					return this.V4AVTM;
				}
				
			    public BigDecimal V4ORDT;

				public BigDecimal getV4ORDT () {
					return this.V4ORDT;
				}
				
			    public BigDecimal V4PSOQ;

				public BigDecimal getV4PSOQ () {
					return this.V4PSOQ;
				}
				
			    public String V4CUNO;

				public String getV4CUNO () {
					return this.V4CUNO;
				}
				
			    public BigDecimal V4ORNO;

				public BigDecimal getV4ORNO () {
					return this.V4ORNO;
				}
				
			    public BigDecimal V4ODLN;

				public BigDecimal getV4ODLN () {
					return this.V4ODLN;
				}
				
			    public String V4ITCI;

				public String getV4ITCI () {
					return this.V4ITCI;
				}
				
			    public BigDecimal V4POOQ;

				public BigDecimal getV4POOQ () {
					return this.V4POOQ;
				}
				
			    public BigDecimal V4POFB;

				public BigDecimal getV4POFB () {
					return this.V4POFB;
				}
				
			    public BigDecimal V4POFR;

				public BigDecimal getV4POFR () {
					return this.V4POFR;
				}
				
			    public BigDecimal V4POAP;

				public BigDecimal getV4POAP () {
					return this.V4POAP;
				}
				
			    public BigDecimal V4IPUO;

				public BigDecimal getV4IPUO () {
					return this.V4IPUO;
				}
				
			    public String V4IPUT;

				public String getV4IPUT () {
					return this.V4IPUT;
				}
				
			    public BigDecimal V4IFRO;

				public BigDecimal getV4IFRO () {
					return this.V4IFRO;
				}
				
			    public String V4IFRT;

				public String getV4IFRT () {
					return this.V4IFRT;
				}
				
			    public BigDecimal V4BDPI;

				public BigDecimal getV4BDPI () {
					return this.V4BDPI;
				}
				
			    public BigDecimal V4PAPI;

				public BigDecimal getV4PAPI () {
					return this.V4PAPI;
				}
				
			    public BigDecimal V4POAL;

				public BigDecimal getV4POAL () {
					return this.V4POAL;
				}
				
			    public String V4POUM;

				public String getV4POUM () {
					return this.V4POUM;
				}
				
			    public BigDecimal V4OUCI;

				public BigDecimal getV4OUCI () {
					return this.V4OUCI;
				}
				
			    public BigDecimal V4OADP;

				public BigDecimal getV4OADP () {
					return this.V4OADP;
				}
				
			    public BigDecimal V4ACDM;

				public BigDecimal getV4ACDM () {
					return this.V4ACDM;
				}
				
			    public BigDecimal V4ACDF;

				public BigDecimal getV4ACDF () {
					return this.V4ACDF;
				}
				
			    public BigDecimal V4ALQY;

				public BigDecimal getV4ALQY () {
					return this.V4ALQY;
				}
				
			    public BigDecimal V4ALQS;

				public BigDecimal getV4ALQS () {
					return this.V4ALQS;
				}
				
			    public BigDecimal V4MRPR;

				public BigDecimal getV4MRPR () {
					return this.V4MRPR;
				}
				
			    public BigDecimal V4IUPR;

				public BigDecimal getV4IUPR () {
					return this.V4IUPR;
				}
				
			    public String V4FEGD;

				public String getV4FEGD () {
					return this.V4FEGD;
				}
				
			    public String V4VPUM;

				public String getV4VPUM () {
					return this.V4VPUM;
				}
				
			    public BigDecimal V4PCOQ;

				public BigDecimal getV4PCOQ () {
					return this.V4PCOQ;
				}
				
			    public BigDecimal V4PCFB;

				public BigDecimal getV4PCFB () {
					return this.V4PCFB;
				}
				
			    public BigDecimal V4PCFR;

				public BigDecimal getV4PCFR () {
					return this.V4PCFR;
				}
				
			    public BigDecimal V4PCAP;

				public BigDecimal getV4PCAP () {
					return this.V4PCAP;
				}
				
			    public BigDecimal V4CPAL;

				public BigDecimal getV4CPAL () {
					return this.V4CPAL;
				}
				
			    public String V4CPUT;

				public String getV4CPUT () {
					return this.V4CPUT;
				}
				
			    public BigDecimal V4CFRO;

				public BigDecimal getV4CFRO () {
					return this.V4CFRO;
				}
				
			    public String V4CFTO;

				public String getV4CFTO () {
					return this.V4CFTO;
				}
				
			    public BigDecimal V4CPAP;

				public BigDecimal getV4CPAP () {
					return this.V4CPAP;
				}
				
			    public BigDecimal V4CBDP;

				public BigDecimal getV4CBDP () {
					return this.V4CBDP;
				}
				
			    public BigDecimal V4COIN;

				public BigDecimal getV4COIN () {
					return this.V4COIN;
				}
				
			    public String V4CUOM;

				public String getV4CUOM () {
					return this.V4CUOM;
				}
				
			    public BigDecimal V4CUCI;

				public BigDecimal getV4CUCI () {
					return this.V4CUCI;
				}
				
			    public BigDecimal V4CADP;

				public BigDecimal getV4CADP () {
					return this.V4CADP;
				}
				
			    public BigDecimal V4CACM;

				public BigDecimal getV4CACM () {
					return this.V4CACM;
				}
				
			    public BigDecimal V4CACF;

				public BigDecimal getV4CACF () {
					return this.V4CACF;
				}
				
			    public BigDecimal V4CMRP;

				public BigDecimal getV4CMRP () {
					return this.V4CMRP;
				}
				
			    public String V4CMEF;

				public String getV4CMEF () {
					return this.V4CMEF;
				}
				
			    public String V4CFTP;

				public String getV4CFTP () {
					return this.V4CFTP;
				}
				
			    public String V4CPOF;

				public String getV4CPOF () {
					return this.V4CPOF;
				}
				
			    public BigDecimal V4QYSH;

				public BigDecimal getV4QYSH () {
					return this.V4QYSH;
				}
				
			    public BigDecimal V4QYDA;

				public BigDecimal getV4QYDA () {
					return this.V4QYDA;
				}
				
			    public BigDecimal V4RCQT;

				public BigDecimal getV4RCQT () {
					return this.V4RCQT;
				}
				
			    public BigDecimal V4VSQY;

				public BigDecimal getV4VSQY () {
					return this.V4VSQY;
				}
				
			    public String V4CSRC;

				public String getV4CSRC () {
					return this.V4CSRC;
				}
				
			    public String V4VSRC;

				public String getV4VSRC () {
					return this.V4VSRC;
				}
				
			    public BigDecimal V4RVWT;

				public BigDecimal getV4RVWT () {
					return this.V4RVWT;
				}
				
			    public BigDecimal V4RVWK;

				public BigDecimal getV4RVWK () {
					return this.V4RVWK;
				}
				
			    public BigDecimal V4DRWT;

				public BigDecimal getV4DRWT () {
					return this.V4DRWT;
				}
				
			    public BigDecimal V4DRWK;

				public BigDecimal getV4DRWK () {
					return this.V4DRWK;
				}
				
			    public String V4RPFF;

				public String getV4RPFF () {
					return this.V4RPFF;
				}
				
			    public String V4PPFS;

				public String getV4PPFS () {
					return this.V4PPFS;
				}
				
			    public String V4PMPS;

				public String getV4PMPS () {
					return this.V4PMPS;
				}
				
			    public BigDecimal V4MEAP;

				public BigDecimal getV4MEAP () {
					return this.V4MEAP;
				}
				
			    public BigDecimal V4MIDT;

				public BigDecimal getV4MIDT () {
					return this.V4MIDT;
				}
				
			    public String V4MINV;

				public String getV4MINV () {
					return this.V4MINV;
				}
				
			    public String V4MPDD;

				public String getV4MPDD () {
					return this.V4MPDD;
				}
				
			    public String V4MQDD;

				public String getV4MQDD () {
					return this.V4MQDD;
				}
				
			    public BigDecimal V4MRQT;

				public BigDecimal getV4MRQT () {
					return this.V4MRQT;
				}
				
			    public BigDecimal V4MRCW;

				public BigDecimal getV4MRCW () {
					return this.V4MRCW;
				}
				
			    public BigDecimal V4MRCK;

				public BigDecimal getV4MRCK () {
					return this.V4MRCK;
				}
				
			    public BigDecimal V4PFMM;

				public BigDecimal getV4PFMM () {
					return this.V4PFMM;
				}
				
			    public BigDecimal V4MCSD;

				public BigDecimal getV4MCSD () {
					return this.V4MCSD;
				}
				
			    public String V4FINV;

				public String getV4FINV () {
					return this.V4FINV;
				}
				
			    public BigDecimal V4FEAP;

				public BigDecimal getV4FEAP () {
					return this.V4FEAP;
				}
				
			    public BigDecimal V4FIDT;

				public BigDecimal getV4FIDT () {
					return this.V4FIDT;
				}
				
			    public BigDecimal V4FRCW;

				public BigDecimal getV4FRCW () {
					return this.V4FRCW;
				}
				
			    public BigDecimal V4FCAD;

				public BigDecimal getV4FCAD () {
					return this.V4FCAD;
				}
				
			    public BigDecimal V4FRQT;

				public BigDecimal getV4FRQT () {
					return this.V4FRQT;
				}
				
			    public BigDecimal V4PFMD;

				public BigDecimal getV4PFMD () {
					return this.V4PFMD;
				}
				
			    public BigDecimal V4FTCQ;

				public BigDecimal getV4FTCQ () {
					return this.V4FTCQ;
				}
				
			    public String V4LCN;

				public String getV4LCN () {
					return this.V4LCN;
				}
				
			    public String V4SPOF;

				public String getV4SPOF () {
					return this.V4SPOF;
				}
				
			    public BigDecimal V4PCLN;

				public BigDecimal getV4PCLN () {
					return this.V4PCLN;
				}
				
			    public String V4MFVN;

				public String getV4MFVN () {
					return this.V4MFVN;
				}
				
			    public String V4MFID;

				public String getV4MFID () {
					return this.V4MFID;
				}
				
			    public String V4ERRF;

				public String getV4ERRF () {
					return this.V4ERRF;
				}
				
			    public String V4IMCC;

				public String getV4IMCC () {
					return this.V4IMCC;
				}
				
			    public String V4COD1;

				public String getV4COD1 () {
					return this.V4COD1;
				}
				
			    public String V4NTYP;

				public String getV4NTYP () {
					return this.V4NTYP;
				}
				
			    public BigDecimal V4TDCD;

				public BigDecimal getV4TDCD () {
					return this.V4TDCD;
				}
				
			    public BigDecimal V4QTIF;

				public BigDecimal getV4QTIF () {
					return this.V4QTIF;
				}
				
			    public BigDecimal V4EADT;

				public BigDecimal getV4EADT () {
					return this.V4EADT;
				}
				
			    public BigDecimal V4EATM;

				public BigDecimal getV4EATM () {
					return this.V4EATM;
				}
				
			    public String V4EAID;

				public String getV4EAID () {
					return this.V4EAID;
				}
				
			    public BigDecimal V4MODT;

				public BigDecimal getV4MODT () {
					return this.V4MODT;
				}
				
			    public BigDecimal V4MOTM;

				public BigDecimal getV4MOTM () {
					return this.V4MOTM;
				}
				
			    public String V4MOID;

				public String getV4MOID () {
					return this.V4MOID;
				}
				
			    public String V4MOPG;

				public String getV4MOPG () {
					return this.V4MOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("V4PO="+V4PO);
		sb.append(",V4ITEM="+V4ITEM);
		sb.append(",V4ROSQ="+String.valueOf(V4ROSQ));
		sb.append(",V4OWID="+V4OWID);
		sb.append(",V4ARCO="+V4ARCO);
		sb.append(",V4MNPC="+V4MNPC);
		sb.append(",V4MUPC="+V4MUPC);
		sb.append(",V4ITDS="+V4ITDS);
		sb.append(",V4VCAT="+V4VCAT);
		sb.append(",V4VNBR="+V4VNBR);
		sb.append(",V4ADCD="+String.valueOf(V4ADCD));
		sb.append(",V4BYGP="+String.valueOf(V4BYGP));
		sb.append(",V4CPVN="+V4CPVN);
		sb.append(",V4PVND="+V4PVND);
		sb.append(",V4TERM="+V4TERM);
		sb.append(",V4POST="+V4POST);
		sb.append(",V4POSS="+V4POSS);
		sb.append(",V4ORTY="+V4ORTY);
		sb.append(",V4WCCD="+V4WCCD);
		sb.append(",V4CFST="+V4CFST);
		sb.append(",V4WHSE="+V4WHSE);
		sb.append(",V4VLPF="+V4VLPF);
		sb.append(",V4VLPA="+V4VLPA);
		sb.append(",V4POCH="+V4POCH);
		sb.append(",V4KMFG="+V4KMFG);
		sb.append(",V4ASRF="+V4ASRF);
		sb.append(",V4POFL="+V4POFL);
		sb.append(",V4MKMF="+V4MKMF);
		sb.append(",V4FSCF="+V4FSCF);
		sb.append(",V4MELN="+V4MELN);
		sb.append(",V4IPCF="+V4IPCF);
		sb.append(",V4ARBD="+String.valueOf(V4ARBD));
		sb.append(",V4PSRD="+String.valueOf(V4PSRD));
		sb.append(",V4ARDE="+String.valueOf(V4ARDE));
		sb.append(",V4AVDT="+String.valueOf(V4AVDT));
		sb.append(",V4AVTM="+String.valueOf(V4AVTM));
		sb.append(",V4ORDT="+String.valueOf(V4ORDT));
		sb.append(",V4PSOQ="+String.valueOf(V4PSOQ));
		sb.append(",V4CUNO="+V4CUNO);
		sb.append(",V4ORNO="+String.valueOf(V4ORNO));
		sb.append(",V4ODLN="+String.valueOf(V4ODLN));
		sb.append(",V4ITCI="+V4ITCI);
		sb.append(",V4POOQ="+String.valueOf(V4POOQ));
		sb.append(",V4POFB="+String.valueOf(V4POFB));
		sb.append(",V4POFR="+String.valueOf(V4POFR));
		sb.append(",V4POAP="+String.valueOf(V4POAP));
		sb.append(",V4IPUO="+String.valueOf(V4IPUO));
		sb.append(",V4IPUT="+V4IPUT);
		sb.append(",V4IFRO="+String.valueOf(V4IFRO));
		sb.append(",V4IFRT="+V4IFRT);
		sb.append(",V4BDPI="+String.valueOf(V4BDPI));
		sb.append(",V4PAPI="+String.valueOf(V4PAPI));
		sb.append(",V4POAL="+String.valueOf(V4POAL));
		sb.append(",V4POUM="+V4POUM);
		sb.append(",V4OUCI="+String.valueOf(V4OUCI));
		sb.append(",V4OADP="+String.valueOf(V4OADP));
		sb.append(",V4ACDM="+String.valueOf(V4ACDM));
		sb.append(",V4ACDF="+String.valueOf(V4ACDF));
		sb.append(",V4ALQY="+String.valueOf(V4ALQY));
		sb.append(",V4ALQS="+String.valueOf(V4ALQS));
		sb.append(",V4MRPR="+String.valueOf(V4MRPR));
		sb.append(",V4IUPR="+String.valueOf(V4IUPR));
		sb.append(",V4FEGD="+V4FEGD);
		sb.append(",V4VPUM="+V4VPUM);
		sb.append(",V4PCOQ="+String.valueOf(V4PCOQ));
		sb.append(",V4PCFB="+String.valueOf(V4PCFB));
		sb.append(",V4PCFR="+String.valueOf(V4PCFR));
		sb.append(",V4PCAP="+String.valueOf(V4PCAP));
		sb.append(",V4CPAL="+String.valueOf(V4CPAL));
		sb.append(",V4CPUT="+V4CPUT);
		sb.append(",V4CFRO="+String.valueOf(V4CFRO));
		sb.append(",V4CFTO="+V4CFTO);
		sb.append(",V4CPAP="+String.valueOf(V4CPAP));
		sb.append(",V4CBDP="+String.valueOf(V4CBDP));
		sb.append(",V4COIN="+String.valueOf(V4COIN));
		sb.append(",V4CUOM="+V4CUOM);
		sb.append(",V4CUCI="+String.valueOf(V4CUCI));
		sb.append(",V4CADP="+String.valueOf(V4CADP));
		sb.append(",V4CACM="+String.valueOf(V4CACM));
		sb.append(",V4CACF="+String.valueOf(V4CACF));
		sb.append(",V4CMRP="+String.valueOf(V4CMRP));
		sb.append(",V4CMEF="+V4CMEF);
		sb.append(",V4CFTP="+V4CFTP);
		sb.append(",V4CPOF="+V4CPOF);
		sb.append(",V4QYSH="+String.valueOf(V4QYSH));
		sb.append(",V4QYDA="+String.valueOf(V4QYDA));
		sb.append(",V4RCQT="+String.valueOf(V4RCQT));
		sb.append(",V4VSQY="+String.valueOf(V4VSQY));
		sb.append(",V4CSRC="+V4CSRC);
		sb.append(",V4VSRC="+V4VSRC);
		sb.append(",V4RVWT="+String.valueOf(V4RVWT));
		sb.append(",V4RVWK="+String.valueOf(V4RVWK));
		sb.append(",V4DRWT="+String.valueOf(V4DRWT));
		sb.append(",V4DRWK="+String.valueOf(V4DRWK));
		sb.append(",V4RPFF="+V4RPFF);
		sb.append(",V4PPFS="+V4PPFS);
		sb.append(",V4PMPS="+V4PMPS);
		sb.append(",V4MEAP="+String.valueOf(V4MEAP));
		sb.append(",V4MIDT="+String.valueOf(V4MIDT));
		sb.append(",V4MINV="+V4MINV);
		sb.append(",V4MPDD="+V4MPDD);
		sb.append(",V4MQDD="+V4MQDD);
		sb.append(",V4MRQT="+String.valueOf(V4MRQT));
		sb.append(",V4MRCW="+String.valueOf(V4MRCW));
		sb.append(",V4MRCK="+String.valueOf(V4MRCK));
		sb.append(",V4PFMM="+String.valueOf(V4PFMM));
		sb.append(",V4MCSD="+String.valueOf(V4MCSD));
		sb.append(",V4FINV="+V4FINV);
		sb.append(",V4FEAP="+String.valueOf(V4FEAP));
		sb.append(",V4FIDT="+String.valueOf(V4FIDT));
		sb.append(",V4FRCW="+String.valueOf(V4FRCW));
		sb.append(",V4FCAD="+String.valueOf(V4FCAD));
		sb.append(",V4FRQT="+String.valueOf(V4FRQT));
		sb.append(",V4PFMD="+String.valueOf(V4PFMD));
		sb.append(",V4FTCQ="+String.valueOf(V4FTCQ));
		sb.append(",V4LCN="+V4LCN);
		sb.append(",V4SPOF="+V4SPOF);
		sb.append(",V4PCLN="+String.valueOf(V4PCLN));
		sb.append(",V4MFVN="+V4MFVN);
		sb.append(",V4MFID="+V4MFID);
		sb.append(",V4ERRF="+V4ERRF);
		sb.append(",V4IMCC="+V4IMCC);
		sb.append(",V4COD1="+V4COD1);
		sb.append(",V4NTYP="+V4NTYP);
		sb.append(",V4TDCD="+String.valueOf(V4TDCD));
		sb.append(",V4QTIF="+String.valueOf(V4QTIF));
		sb.append(",V4EADT="+String.valueOf(V4EADT));
		sb.append(",V4EATM="+String.valueOf(V4EATM));
		sb.append(",V4EAID="+V4EAID);
		sb.append(",V4MODT="+String.valueOf(V4MODT));
		sb.append(",V4MOTM="+String.valueOf(V4MOTM));
		sb.append(",V4MOID="+V4MOID);
		sb.append(",V4MOPG="+V4MOPG);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
PURCHASE_ORDER_DETAIL_UPDATE_2Struct PURCHASE_ORDER_DETAIL_UPDATE_2 = new PURCHASE_ORDER_DETAIL_UPDATE_2Struct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_3");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PURCHASE_ORDER_DETAIL_UPDATE_2");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("PURCHASE_ORDER_DETAIL");
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("PURCHASE_ORDER_DETAIL");
}

        int updateKeyCount_tDBOutput_3 = 4;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 115 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_3 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_3 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_3 = context.GIM_Password; 

    String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;

    conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3,dbUser_tDBOutput_3,dbPwd_tDBOutput_3);
	
	resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
        conn_tDBOutput_3.setAutoCommit(false);
        int commitEvery_tDBOutput_3 = 1;
        int commitCounter_tDBOutput_3 = 0;


   int batchSize_tDBOutput_3 = 1;
   int batchSizeCounter_tDBOutput_3=0;

int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"VENDOR_CLASSIFICATION\" = ?,\"SHIPPING_POINT_SHIP_FROM\" = ?,\"BUYING_GROUP\" = ?,\"CUST_PREF_VENDOR\" = ?,\"SOURCE_VENDOR\" = ?,\"VENDOR_TERMS\" = ?,\"PO_PRIMARY_STATUS\" = ?,\"PO_SECONDARY_STATUS\" = ?,\"PO_TYPE\" = ?,\"WHSE_CHANGE_CODE\" = ?,\"CONF_STATUS\" = ?,\"PO_VALID_PRICING_FLAG\" = ?,\"PO_VALID_PRICING_APPROVAL\" = ?,\"PO_CHANGED_FLAG\" = ?,\"ALLOC_SCHEDULED_RECEIPT_FLAG\" = ?,\"PRICE_OVERRIDE_FLAG\" = ?,\"MARKED_BY_MERCHANDISER_FLAG\" = ?,\"FAILED_SCORECARD_FLAG\" = ?,\"MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CALENDAR_DATE_ANTICIPATED_RECEIPT\" = ?,\"CALENDAR_DATE_SCHEDULED_RECEIPT_DATE\" = ?,\"BUSINESS_DATE_ANTICIPATED_RECEIPT\" = ?,\"AVAIL_TIMESTAMP\" = ?,\"BUSINESS_ORDER_DATE\" = ?,\"SUGGESTED_ORDER_QTY\" = ?,\"SHIP_TO_CUST\" = ?,\"CUST_ORDER_NO\" = ?,\"CUST_ORDER_LINE_NO\" = ?,\"ORIG_ORDER_QTY\" = ?,\"ORIG_FOB_PER_ITEM\" = ?,\"ORIG_FREIGHT_PER_ITEM\" = ?,\"ORIG_AP_PER_ITEM\" = ?,\"ORIG_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"ORIG_FREIGHT_RATE_OVERRIDE\" = ?,\"ORIG_FREIGHT_TYPE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_PER_ITEM\" = ?,\"ORIG_OFF_INV_ALLOW\" = ?,\"ORIG_UOM\" = ?,\"ORIG_ALT_DELV_PRICE\" = ?,\"ORIG_MERCH_ALLOW_CHARGE\" = ?,\"ORIG_FREIGHT_ALLOW_CHARGE\" = ?,\"ALLOC_QTY\" = ?,\"ALLOC_QTY_SPLITS\" = ?,\"INV_UNIT_PRICE\" = ?,\"FREE_GOODS_FLAG\" = ?,\"VENDOR_PRICE_LIST_UOM\" = ?,\"CONFIRMED_ORDER_QTY\" = ?,\"CONFIRMED_FOB_PER_ITEM\" = ?,\"CONFIRMED_FREIGHT_PER_ITEM\" = ?,\"CONFIRMED_AP_PER_ITEM\" = ?,\"CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_RATE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_TYPE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_PER_ITEM\" = ?,\"CONFIRMED_OFF_INV_ALLOW\" = ?,\"CONFIRMED_UOM\" = ?,\"CONFIRMED_ALT_DELV_PRICE\" = ?,\"CONF_DIST_MERCH_ALLOW_CHARGE\" = ?,\"CONF_DIST_FREIGHT_ALLOW_CHARGE\" = ?,\"CONFIRMED_MRPT\" = ?,\"CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CONFIRMED_PRICE_OVERRIDE_FLAG\" = ?,\"CARRIER_SHORT_QTY\" = ?,\"RECVD_DAMAGED_ACCEPTED_QTY\" = ?,\"RECVD_QTY\" = ?,\"VENDOR_SHORT_QTY\" = ?,\"CARRIER_SHORT_REASON_CODE\" = ?,\"VENDOR_SHORT_REASON_CODE\" = ?,\"RECVD_WGT\" = ?,\"DAMAGED_RECVD_WGT\" = ?,\"REVISED_PROFORMA_FLAG\" = ?,\"FREIGHT_PROFORMA_STATUS\" = ?,\"MERCH_PROFORMA_STATUS\" = ?,\"MERCH_EXT_AMT_TOBE_PAID\" = ?,\"MERCH_INV_DATE\" = ?,\"MERCH_INV_NO\" = ?,\"MERCH_PRICE_DIFF_STATUS\" = ?,\"MERCH_QTY_DIFF_STATUS\" = ?,\"MERCH_QTY_TO_BE_PAID\" = ?,\"MERCH_WGT_TO_BE_PAID\" = ?,\"MERCH_CASH_DISC\" = ?,\"FREIGHT_INV_NO\" = ?,\"FREIGHT_EXT_AMT_TO_BE_PAID\" = ?,\"FREIGHT_INV_DATE\" = ?,\"FREIGHT_CHARGE_TO_BE_PAID\" = ?,\"FREIGHT_CASH_DISC\" = ?,\"FREIGHT_QTY_TO_BE_PAID\" = ?,\"FREIGHT_CLAIM_QTY\" = ?,\"LOAD_CTRL_NO\" = ?,\"SPLIT_PO_FLAG\" = ?,\"TRUE_VENDOR\" = ?,\"MANIFEST_HIST_MFG_NO\" = ?,\"NOTE1\" = ?,\"TRUE_VENDOR_SHIP_FROM\" = ?,\"LAST_QTY_SENT_TO_DPR\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"IS_ACTIVE\" = ?,\"V4PF_SVOP\" = ?,\"UPDATED_USER_ID\" = ?,\"UPDATED_PROGRAM_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"ORIG_UNLOAD_CHARGE_PER_ITEM\" = ?,\"CONF_UNLOAD_CHARGE_PER_ITEM\" = ? WHERE \"SITE_ID\" = ? AND \"PURCHASE_ORDER_NO\" = ? AND \"SMS_MAJ_LINE_NO\" = ? AND \"SMS_MIN_LINE_NO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
	String V4ARBD;
	String V4PSRD;
	String V4ARDE;
	String V4MIDT;
	String V4FIDT;
	String V4ORDT;
	String AVAIL_TIMESTAMP;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
PURCHASE_ORDER_DETAIL_UPDATE_2Struct PURCHASE_ORDER_DETAIL_UPDATE_2_tmp = new PURCHASE_ORDER_DETAIL_UPDATE_2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_3");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_3 = context.SUS_Password; 
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				  
				String url_tDBInput_3 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  IMHBV4PF.V4PO, \n  IMHBV4PF.V4ITEM, \n  IMHBV4PF.V4ROSQ, \n  IMHBV4PF.V4OWID, \n  IMHBV4PF.V4ARCO, \n  IMHBV"
+"4PF.V4MNPC, \n  IMHBV4PF.V4MUPC, \n  IMHBV4PF.V4ITDS, \n  IMHBV4PF.V4VCAT, \n  IMHBV4PF.V4VNBR, \n  IMHBV4PF.V4ADCD, \n "
+" IMHBV4PF.V4BYGP, \n  IMHBV4PF.V4CPVN, \n  IMHBV4PF.V4PVND, \n  IMHBV4PF.V4TERM, \n  IMHBV4PF.V4POST, \n  IMHBV4PF.V4POS"
+"S, \n  IMHBV4PF.V4ORTY, \n  IMHBV4PF.V4WCCD, \n  IMHBV4PF.V4CFST, \n  IMHBV4PF.V4WHSE, \n  IMHBV4PF.V4VLPF, \n  IMHBV4PF"
+".V4VLPA, \n  IMHBV4PF.V4POCH, \n  IMHBV4PF.V4KMFG, \n  IMHBV4PF.V4ASRF, \n  IMHBV4PF.V4POFL, \n  IMHBV4PF.V4MKMF, \n  IM"
+"HBV4PF.V4FSCF, \n  IMHBV4PF.V4MELN, \n  IMHBV4PF.V4IPCF, \n  IMHBV4PF.V4ARBD, \n  IMHBV4PF.V4PSRD, \n  IMHBV4PF.V4ARDE, "
+"\n  IMHBV4PF.V4AVDT, \n  IMHBV4PF.V4AVTM, \n  IMHBV4PF.V4ORDT, \n  IMHBV4PF.V4PSOQ, \n  IMHBV4PF.V4CUNO, \n  IMHBV4PF.V4"
+"ORNO, \n  IMHBV4PF.V4ODLN, \n  IMHBV4PF.V4ITCI, \n  IMHBV4PF.V4POOQ, \n  IMHBV4PF.V4POFB, \n  IMHBV4PF.V4POFR, \n  IMHBV"
+"4PF.V4POAP, \n  IMHBV4PF.V4IPUO, \n  IMHBV4PF.V4IPUT, \n  IMHBV4PF.V4IFRO, \n  IMHBV4PF.V4IFRT, \n  IMHBV4PF.V4BDPI, \n "
+" IMHBV4PF.V4PAPI, \n  IMHBV4PF.V4POAL, \n  IMHBV4PF.V4POUM, \n  IMHBV4PF.V4OUCI, \n  IMHBV4PF.V4OADP, \n  IMHBV4PF.V4ACD"
+"M, \n  IMHBV4PF.V4ACDF, \n  IMHBV4PF.V4ALQY, \n  IMHBV4PF.V4ALQS, \n  IMHBV4PF.V4MRPR, \n  IMHBV4PF.V4IUPR, \n  IMHBV4PF"
+".V4FEGD, \n  IMHBV4PF.V4VPUM, \n  IMHBV4PF.V4PCOQ, \n  IMHBV4PF.V4PCFB, \n  IMHBV4PF.V4PCFR, \n  IMHBV4PF.V4PCAP, \n  IM"
+"HBV4PF.V4CPAL, \n  IMHBV4PF.V4CPUT, \n  IMHBV4PF.V4CFRO, \n  IMHBV4PF.V4CFTO, \n  IMHBV4PF.V4CPAP, \n  IMHBV4PF.V4CBDP, "
+"\n  IMHBV4PF.V4COIN, \n  IMHBV4PF.V4CUOM, \n  IMHBV4PF.V4CUCI, \n  IMHBV4PF.V4CADP, \n  IMHBV4PF.V4CACM, \n  IMHBV4PF.V4"
+"CACF, \n  IMHBV4PF.V4CMRP, \n  IMHBV4PF.V4CMEF, \n  IMHBV4PF.V4CFTP, \n  IMHBV4PF.V4CPOF, \n  IMHBV4PF.V4QYSH, \n  IMHBV"
+"4PF.V4QYDA, \n  IMHBV4PF.V4RCQT, \n  IMHBV4PF.V4VSQY, \n  IMHBV4PF.V4CSRC, \n  IMHBV4PF.V4VSRC, \n  IMHBV4PF.V4RVWT, \n "
+" IMHBV4PF.V4RVWK, \n  IMHBV4PF.V4DRWT, \n  IMHBV4PF.V4DRWK, \n  IMHBV4PF.V4RPFF, \n  IMHBV4PF.V4PPFS, \n  IMHBV4PF.V4PMP"
+"S, \n  IMHBV4PF.V4MEAP, \n  IMHBV4PF.V4MIDT, \n  IMHBV4PF.V4MINV, \n  IMHBV4PF.V4MPDD, \n  IMHBV4PF.V4MQDD, \n  IMHBV4PF"
+".V4MRQT, \n  IMHBV4PF.V4MRCW, \n  IMHBV4PF.V4MRCK, \n  IMHBV4PF.V4PFMM, \n  IMHBV4PF.V4MCSD, \n  IMHBV4PF.V4FINV, \n  IM"
+"HBV4PF.V4FEAP, \n  IMHBV4PF.V4FIDT, \n  IMHBV4PF.V4FRCW, \n  IMHBV4PF.V4FCAD, \n  IMHBV4PF.V4FRQT, \n  IMHBV4PF.V4PFMD, "
+"\n  IMHBV4PF.V4FTCQ, \n  IMHBV4PF.V4LCN, \n  IMHBV4PF.V4SPOF, \n  IMHBV4PF.V4PCLN, \n  IMHBV4PF.V4MFVN, \n  IMHBV4PF.V4M"
+"FID, \n  IMHBV4PF.V4ERRF, \n  IMHBV4PF.V4IMCC, \n  IMHBV4PF.V4COD1, \n  IMHBV4PF.V4NTYP, \n  IMHBV4PF.V4TDCD, \n  IMHBV4"
+"PF.V4QTIF, \n  IMHBV4PF.V4EADT, \n  IMHBV4PF.V4EATM, \n  IMHBV4PF.V4EAID, \n  IMHBV4PF.V4MODT, \n  IMHBV4PF.V4MOTM, \n  "
+"IMHBV4PF.V4MOID, \n  IMHBV4PF.V4MOPG\nFROM IMHBV4PF WHERE IMHBV4PF.V4EADT BETWEEN 20200101 AND 20211231 \nORDER BY IMHBV"
+"4PF.V4EADT DESC";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.V4PO = null;
							} else {
	                         		
        	row3.V4PO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.V4ITEM = null;
							} else {
	                         		
        	row3.V4ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.V4ROSQ = null;
							} else {
		                          
            row3.V4ROSQ = rs_tDBInput_3.getBigDecimal(3);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.V4OWID = null;
							} else {
	                         		
        	row3.V4OWID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.V4ARCO = null;
							} else {
	                         		
        	row3.V4ARCO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row3.V4MNPC = null;
							} else {
	                         		
        	row3.V4MNPC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row3.V4MUPC = null;
							} else {
	                         		
        	row3.V4MUPC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row3.V4ITDS = null;
							} else {
	                         		
        	row3.V4ITDS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row3.V4VCAT = null;
							} else {
	                         		
        	row3.V4VCAT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row3.V4VNBR = null;
							} else {
	                         		
        	row3.V4VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_3, 10, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row3.V4ADCD = null;
							} else {
		                          
            row3.V4ADCD = rs_tDBInput_3.getBigDecimal(11);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row3.V4BYGP = null;
							} else {
		                          
            row3.V4BYGP = rs_tDBInput_3.getBigDecimal(12);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row3.V4CPVN = null;
							} else {
	                         		
        	row3.V4CPVN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row3.V4PVND = null;
							} else {
	                         		
        	row3.V4PVND = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row3.V4TERM = null;
							} else {
	                         		
        	row3.V4TERM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 15, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row3.V4POST = null;
							} else {
	                         		
        	row3.V4POST = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row3.V4POSS = null;
							} else {
	                         		
        	row3.V4POSS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 17, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row3.V4ORTY = null;
							} else {
	                         		
        	row3.V4ORTY = routines.system.JDBCUtil.getString(rs_tDBInput_3, 18, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row3.V4WCCD = null;
							} else {
	                         		
        	row3.V4WCCD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 19, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 20) {
								row3.V4CFST = null;
							} else {
	                         		
        	row3.V4CFST = routines.system.JDBCUtil.getString(rs_tDBInput_3, 20, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 21) {
								row3.V4WHSE = null;
							} else {
	                         		
        	row3.V4WHSE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 21, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 22) {
								row3.V4VLPF = null;
							} else {
	                         		
        	row3.V4VLPF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 22, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 23) {
								row3.V4VLPA = null;
							} else {
	                         		
        	row3.V4VLPA = routines.system.JDBCUtil.getString(rs_tDBInput_3, 23, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 24) {
								row3.V4POCH = null;
							} else {
	                         		
        	row3.V4POCH = routines.system.JDBCUtil.getString(rs_tDBInput_3, 24, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 25) {
								row3.V4KMFG = null;
							} else {
	                         		
        	row3.V4KMFG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 25, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 26) {
								row3.V4ASRF = null;
							} else {
	                         		
        	row3.V4ASRF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 26, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 27) {
								row3.V4POFL = null;
							} else {
	                         		
        	row3.V4POFL = routines.system.JDBCUtil.getString(rs_tDBInput_3, 27, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 28) {
								row3.V4MKMF = null;
							} else {
	                         		
        	row3.V4MKMF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 28, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 29) {
								row3.V4FSCF = null;
							} else {
	                         		
        	row3.V4FSCF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 29, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 30) {
								row3.V4MELN = null;
							} else {
	                         		
        	row3.V4MELN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 30, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 31) {
								row3.V4IPCF = null;
							} else {
	                         		
        	row3.V4IPCF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 31, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 32) {
								row3.V4ARBD = null;
							} else {
		                          
            row3.V4ARBD = rs_tDBInput_3.getBigDecimal(32);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 33) {
								row3.V4PSRD = null;
							} else {
		                          
            row3.V4PSRD = rs_tDBInput_3.getBigDecimal(33);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 34) {
								row3.V4ARDE = null;
							} else {
		                          
            row3.V4ARDE = rs_tDBInput_3.getBigDecimal(34);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 35) {
								row3.V4AVDT = null;
							} else {
		                          
            row3.V4AVDT = rs_tDBInput_3.getBigDecimal(35);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 36) {
								row3.V4AVTM = null;
							} else {
		                          
            row3.V4AVTM = rs_tDBInput_3.getBigDecimal(36);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 37) {
								row3.V4ORDT = null;
							} else {
		                          
            row3.V4ORDT = rs_tDBInput_3.getBigDecimal(37);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 38) {
								row3.V4PSOQ = null;
							} else {
		                          
            row3.V4PSOQ = rs_tDBInput_3.getBigDecimal(38);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 39) {
								row3.V4CUNO = null;
							} else {
	                         		
        	row3.V4CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 39, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 40) {
								row3.V4ORNO = null;
							} else {
		                          
            row3.V4ORNO = rs_tDBInput_3.getBigDecimal(40);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 41) {
								row3.V4ODLN = null;
							} else {
		                          
            row3.V4ODLN = rs_tDBInput_3.getBigDecimal(41);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 42) {
								row3.V4ITCI = null;
							} else {
	                         		
        	row3.V4ITCI = routines.system.JDBCUtil.getString(rs_tDBInput_3, 42, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 43) {
								row3.V4POOQ = null;
							} else {
		                          
            row3.V4POOQ = rs_tDBInput_3.getBigDecimal(43);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 44) {
								row3.V4POFB = null;
							} else {
		                          
            row3.V4POFB = rs_tDBInput_3.getBigDecimal(44);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 45) {
								row3.V4POFR = null;
							} else {
		                          
            row3.V4POFR = rs_tDBInput_3.getBigDecimal(45);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 46) {
								row3.V4POAP = null;
							} else {
		                          
            row3.V4POAP = rs_tDBInput_3.getBigDecimal(46);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 47) {
								row3.V4IPUO = null;
							} else {
		                          
            row3.V4IPUO = rs_tDBInput_3.getBigDecimal(47);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 48) {
								row3.V4IPUT = null;
							} else {
	                         		
        	row3.V4IPUT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 48, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 49) {
								row3.V4IFRO = null;
							} else {
		                          
            row3.V4IFRO = rs_tDBInput_3.getBigDecimal(49);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 50) {
								row3.V4IFRT = null;
							} else {
	                         		
        	row3.V4IFRT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 50, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 51) {
								row3.V4BDPI = null;
							} else {
		                          
            row3.V4BDPI = rs_tDBInput_3.getBigDecimal(51);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 52) {
								row3.V4PAPI = null;
							} else {
		                          
            row3.V4PAPI = rs_tDBInput_3.getBigDecimal(52);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 53) {
								row3.V4POAL = null;
							} else {
		                          
            row3.V4POAL = rs_tDBInput_3.getBigDecimal(53);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 54) {
								row3.V4POUM = null;
							} else {
	                         		
        	row3.V4POUM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 54, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 55) {
								row3.V4OUCI = null;
							} else {
		                          
            row3.V4OUCI = rs_tDBInput_3.getBigDecimal(55);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 56) {
								row3.V4OADP = null;
							} else {
		                          
            row3.V4OADP = rs_tDBInput_3.getBigDecimal(56);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 57) {
								row3.V4ACDM = null;
							} else {
		                          
            row3.V4ACDM = rs_tDBInput_3.getBigDecimal(57);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 58) {
								row3.V4ACDF = null;
							} else {
		                          
            row3.V4ACDF = rs_tDBInput_3.getBigDecimal(58);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 59) {
								row3.V4ALQY = null;
							} else {
		                          
            row3.V4ALQY = rs_tDBInput_3.getBigDecimal(59);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 60) {
								row3.V4ALQS = null;
							} else {
		                          
            row3.V4ALQS = rs_tDBInput_3.getBigDecimal(60);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 61) {
								row3.V4MRPR = null;
							} else {
		                          
            row3.V4MRPR = rs_tDBInput_3.getBigDecimal(61);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 62) {
								row3.V4IUPR = null;
							} else {
		                          
            row3.V4IUPR = rs_tDBInput_3.getBigDecimal(62);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 63) {
								row3.V4FEGD = null;
							} else {
	                         		
        	row3.V4FEGD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 63, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 64) {
								row3.V4VPUM = null;
							} else {
	                         		
        	row3.V4VPUM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 64, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 65) {
								row3.V4PCOQ = null;
							} else {
		                          
            row3.V4PCOQ = rs_tDBInput_3.getBigDecimal(65);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 66) {
								row3.V4PCFB = null;
							} else {
		                          
            row3.V4PCFB = rs_tDBInput_3.getBigDecimal(66);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 67) {
								row3.V4PCFR = null;
							} else {
		                          
            row3.V4PCFR = rs_tDBInput_3.getBigDecimal(67);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 68) {
								row3.V4PCAP = null;
							} else {
		                          
            row3.V4PCAP = rs_tDBInput_3.getBigDecimal(68);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 69) {
								row3.V4CPAL = null;
							} else {
		                          
            row3.V4CPAL = rs_tDBInput_3.getBigDecimal(69);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 70) {
								row3.V4CPUT = null;
							} else {
	                         		
        	row3.V4CPUT = routines.system.JDBCUtil.getString(rs_tDBInput_3, 70, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 71) {
								row3.V4CFRO = null;
							} else {
		                          
            row3.V4CFRO = rs_tDBInput_3.getBigDecimal(71);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 72) {
								row3.V4CFTO = null;
							} else {
	                         		
        	row3.V4CFTO = routines.system.JDBCUtil.getString(rs_tDBInput_3, 72, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 73) {
								row3.V4CPAP = null;
							} else {
		                          
            row3.V4CPAP = rs_tDBInput_3.getBigDecimal(73);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 74) {
								row3.V4CBDP = null;
							} else {
		                          
            row3.V4CBDP = rs_tDBInput_3.getBigDecimal(74);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 75) {
								row3.V4COIN = null;
							} else {
		                          
            row3.V4COIN = rs_tDBInput_3.getBigDecimal(75);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 76) {
								row3.V4CUOM = null;
							} else {
	                         		
        	row3.V4CUOM = routines.system.JDBCUtil.getString(rs_tDBInput_3, 76, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 77) {
								row3.V4CUCI = null;
							} else {
		                          
            row3.V4CUCI = rs_tDBInput_3.getBigDecimal(77);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 78) {
								row3.V4CADP = null;
							} else {
		                          
            row3.V4CADP = rs_tDBInput_3.getBigDecimal(78);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 79) {
								row3.V4CACM = null;
							} else {
		                          
            row3.V4CACM = rs_tDBInput_3.getBigDecimal(79);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 80) {
								row3.V4CACF = null;
							} else {
		                          
            row3.V4CACF = rs_tDBInput_3.getBigDecimal(80);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 81) {
								row3.V4CMRP = null;
							} else {
		                          
            row3.V4CMRP = rs_tDBInput_3.getBigDecimal(81);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 82) {
								row3.V4CMEF = null;
							} else {
	                         		
        	row3.V4CMEF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 82, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 83) {
								row3.V4CFTP = null;
							} else {
	                         		
        	row3.V4CFTP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 83, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 84) {
								row3.V4CPOF = null;
							} else {
	                         		
        	row3.V4CPOF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 84, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 85) {
								row3.V4QYSH = null;
							} else {
		                          
            row3.V4QYSH = rs_tDBInput_3.getBigDecimal(85);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 86) {
								row3.V4QYDA = null;
							} else {
		                          
            row3.V4QYDA = rs_tDBInput_3.getBigDecimal(86);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 87) {
								row3.V4RCQT = null;
							} else {
		                          
            row3.V4RCQT = rs_tDBInput_3.getBigDecimal(87);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 88) {
								row3.V4VSQY = null;
							} else {
		                          
            row3.V4VSQY = rs_tDBInput_3.getBigDecimal(88);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 89) {
								row3.V4CSRC = null;
							} else {
	                         		
        	row3.V4CSRC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 89, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 90) {
								row3.V4VSRC = null;
							} else {
	                         		
        	row3.V4VSRC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 90, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 91) {
								row3.V4RVWT = null;
							} else {
		                          
            row3.V4RVWT = rs_tDBInput_3.getBigDecimal(91);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 92) {
								row3.V4RVWK = null;
							} else {
		                          
            row3.V4RVWK = rs_tDBInput_3.getBigDecimal(92);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 93) {
								row3.V4DRWT = null;
							} else {
		                          
            row3.V4DRWT = rs_tDBInput_3.getBigDecimal(93);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 94) {
								row3.V4DRWK = null;
							} else {
		                          
            row3.V4DRWK = rs_tDBInput_3.getBigDecimal(94);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 95) {
								row3.V4RPFF = null;
							} else {
	                         		
        	row3.V4RPFF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 95, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 96) {
								row3.V4PPFS = null;
							} else {
	                         		
        	row3.V4PPFS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 96, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 97) {
								row3.V4PMPS = null;
							} else {
	                         		
        	row3.V4PMPS = routines.system.JDBCUtil.getString(rs_tDBInput_3, 97, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 98) {
								row3.V4MEAP = null;
							} else {
		                          
            row3.V4MEAP = rs_tDBInput_3.getBigDecimal(98);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 99) {
								row3.V4MIDT = null;
							} else {
		                          
            row3.V4MIDT = rs_tDBInput_3.getBigDecimal(99);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 100) {
								row3.V4MINV = null;
							} else {
	                         		
        	row3.V4MINV = routines.system.JDBCUtil.getString(rs_tDBInput_3, 100, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 101) {
								row3.V4MPDD = null;
							} else {
	                         		
        	row3.V4MPDD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 101, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 102) {
								row3.V4MQDD = null;
							} else {
	                         		
        	row3.V4MQDD = routines.system.JDBCUtil.getString(rs_tDBInput_3, 102, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 103) {
								row3.V4MRQT = null;
							} else {
		                          
            row3.V4MRQT = rs_tDBInput_3.getBigDecimal(103);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 104) {
								row3.V4MRCW = null;
							} else {
		                          
            row3.V4MRCW = rs_tDBInput_3.getBigDecimal(104);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 105) {
								row3.V4MRCK = null;
							} else {
		                          
            row3.V4MRCK = rs_tDBInput_3.getBigDecimal(105);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 106) {
								row3.V4PFMM = null;
							} else {
		                          
            row3.V4PFMM = rs_tDBInput_3.getBigDecimal(106);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 107) {
								row3.V4MCSD = null;
							} else {
		                          
            row3.V4MCSD = rs_tDBInput_3.getBigDecimal(107);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 108) {
								row3.V4FINV = null;
							} else {
	                         		
        	row3.V4FINV = routines.system.JDBCUtil.getString(rs_tDBInput_3, 108, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 109) {
								row3.V4FEAP = null;
							} else {
		                          
            row3.V4FEAP = rs_tDBInput_3.getBigDecimal(109);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 110) {
								row3.V4FIDT = null;
							} else {
		                          
            row3.V4FIDT = rs_tDBInput_3.getBigDecimal(110);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 111) {
								row3.V4FRCW = null;
							} else {
		                          
            row3.V4FRCW = rs_tDBInput_3.getBigDecimal(111);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 112) {
								row3.V4FCAD = null;
							} else {
		                          
            row3.V4FCAD = rs_tDBInput_3.getBigDecimal(112);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 113) {
								row3.V4FRQT = null;
							} else {
		                          
            row3.V4FRQT = rs_tDBInput_3.getBigDecimal(113);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 114) {
								row3.V4PFMD = null;
							} else {
		                          
            row3.V4PFMD = rs_tDBInput_3.getBigDecimal(114);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 115) {
								row3.V4FTCQ = null;
							} else {
		                          
            row3.V4FTCQ = rs_tDBInput_3.getBigDecimal(115);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 116) {
								row3.V4LCN = null;
							} else {
	                         		
        	row3.V4LCN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 116, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 117) {
								row3.V4SPOF = null;
							} else {
	                         		
        	row3.V4SPOF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 117, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 118) {
								row3.V4PCLN = null;
							} else {
		                          
            row3.V4PCLN = rs_tDBInput_3.getBigDecimal(118);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 119) {
								row3.V4MFVN = null;
							} else {
	                         		
        	row3.V4MFVN = routines.system.JDBCUtil.getString(rs_tDBInput_3, 119, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 120) {
								row3.V4MFID = null;
							} else {
	                         		
        	row3.V4MFID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 120, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 121) {
								row3.V4ERRF = null;
							} else {
	                         		
        	row3.V4ERRF = routines.system.JDBCUtil.getString(rs_tDBInput_3, 121, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 122) {
								row3.V4IMCC = null;
							} else {
	                         		
        	row3.V4IMCC = routines.system.JDBCUtil.getString(rs_tDBInput_3, 122, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 123) {
								row3.V4COD1 = null;
							} else {
	                         		
        	row3.V4COD1 = routines.system.JDBCUtil.getString(rs_tDBInput_3, 123, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 124) {
								row3.V4NTYP = null;
							} else {
	                         		
        	row3.V4NTYP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 124, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 125) {
								row3.V4TDCD = null;
							} else {
		                          
            row3.V4TDCD = rs_tDBInput_3.getBigDecimal(125);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 126) {
								row3.V4QTIF = null;
							} else {
		                          
            row3.V4QTIF = rs_tDBInput_3.getBigDecimal(126);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 127) {
								row3.V4EADT = null;
							} else {
		                          
            row3.V4EADT = rs_tDBInput_3.getBigDecimal(127);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 128) {
								row3.V4EATM = null;
							} else {
		                          
            row3.V4EATM = rs_tDBInput_3.getBigDecimal(128);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 129) {
								row3.V4EAID = null;
							} else {
	                         		
        	row3.V4EAID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 129, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 130) {
								row3.V4MODT = null;
							} else {
		                          
            row3.V4MODT = rs_tDBInput_3.getBigDecimal(130);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 131) {
								row3.V4MOTM = null;
							} else {
		                          
            row3.V4MOTM = rs_tDBInput_3.getBigDecimal(131);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 132) {
								row3.V4MOID = null;
							} else {
	                         		
        	row3.V4MOID = routines.system.JDBCUtil.getString(rs_tDBInput_3, 132, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 133) {
								row3.V4MOPG = null;
							} else {
	                         		
        	row3.V4MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_3, 133, true);
		                    }
					



 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;
Var.V4ARBD = TimeStampConverting.convertToDate(row3.V4ARBD.toString()) ;
Var.V4PSRD = TimeStampConverting.convertToDate(row3.V4PSRD.toString()) ;
Var.V4ARDE = TimeStampConverting.convertToDate(row3.V4ARDE.toString()) ;
Var.V4MIDT = TimeStampConverting.convertToDate(row3.V4MIDT.toString()) ;
Var.V4FIDT = TimeStampConverting.convertToDate(row3.V4FIDT.toString()) ;
Var.V4ORDT = TimeStampConverting.convertToDate(row3.V4ORDT.toString()) ;
Var.AVAIL_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row3.V4AVDT.toString(),row3.V4AVTM.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row3.V4EADT.toString(),row3.V4EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row3.V4MODT.toString(),row3.V4MOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PURCHASE_ORDER_DETAIL_UPDATE_2 = null;


// # Output table : 'PURCHASE_ORDER_DETAIL_UPDATE_2'
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.SITE_ID = context.opco;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.PURCHASE_ORDER_NO = row3.V4PO ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.SMS_MAJ_LINE_NO = row3.V4ROSQ ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.SMS_MIN_LINE_NO = new BigDecimal("1");
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.VENDOR_CLASSIFICATION = row3.V4VCAT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.SHIPPING_POINT_SHIP_FROM = row3.V4ADCD;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.BUYING_GROUP = row3.V4BYGP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CUST_PREF_VENDOR = row3.V4CPVN ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.SOURCE_VENDOR = row3.V4PVND ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.VENDOR_TERMS = row3.V4TERM ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.PO_PRIMARY_STATUS = row3.V4POST ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.PO_SECONDARY_STATUS = row3.V4POSS ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.PO_TYPE = row3.V4ORTY ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.WHSE_CHANGE_CODE = row3.V4WCCD ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONF_STATUS = row3.V4CFST ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.PO_VALID_PRICING_FLAG = row3.V4VLPF ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.PO_VALID_PRICING_APPROVAL = row3.V4VLPA ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.PO_CHANGED_FLAG = row3.V4POCH ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ALLOC_SCHEDULED_RECEIPT_FLAG = row3.V4ASRF ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.PRICE_OVERRIDE_FLAG = row3.V4POFL ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MARKED_BY_MERCHANDISER_FLAG = row3.V4MKMF ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FAILED_SCORECARD_FLAG = row3.V4FSCF ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MANUALLY_ENTERED_LINE_FLAG = row3.V4MELN ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CALENDAR_DATE_ANTICIPATED_RECEIPT = Var.V4ARBD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARBD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = Var.V4PSRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4PSRD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.BUSINESS_DATE_ANTICIPATED_RECEIPT = Var.V4ARDE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARDE):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.AVAIL_TIMESTAMP = Var.AVAIL_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.AVAIL_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.BUSINESS_ORDER_DATE = Var.V4ORDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ORDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.SUGGESTED_ORDER_QTY = row3.V4PSOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.SHIP_TO_CUST = row3.V4CUNO ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CUST_ORDER_NO = row3.V4ORNO ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CUST_ORDER_LINE_NO = row3.V4ODLN ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_ORDER_QTY = row3.V4POOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_FOB_PER_ITEM = row3.V4POFB ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_FREIGHT_PER_ITEM = row3.V4POFR;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_AP_PER_ITEM = row3.V4POAP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = row3.V4IPUO;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = row3.V4IPUT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_FREIGHT_RATE_OVERRIDE = row3.V4IFRO;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_FREIGHT_TYPE_OVERRIDE = row3.V4IFRT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_PICKUP_ALLOW_PER_ITEM = row3.V4PAPI;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_OFF_INV_ALLOW = row3.V4POAL;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_UOM = row3.V4POUM;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_ALT_DELV_PRICE = row3.V4OADP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_MERCH_ALLOW_CHARGE = row3.V4ACDM ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_FREIGHT_ALLOW_CHARGE = row3.V4ACDF ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ALLOC_QTY = row3.V4ALQY ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ALLOC_QTY_SPLITS = row3.V4ALQS ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.INV_UNIT_PRICE = row3.V4IUPR ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREE_GOODS_FLAG = row3.V4FEGD ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.VENDOR_PRICE_LIST_UOM = row3.V4VPUM ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_ORDER_QTY = row3.V4PCOQ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_FOB_PER_ITEM = row3.V4PCFB;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_FREIGHT_PER_ITEM = row3.V4PCFR;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_AP_PER_ITEM = row3.V4PCAP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = row3.V4CPAL;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = row3.V4CPUT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_FREIGHT_RATE_OVERRIDE = row3.V4CFRO;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_FREIGHT_TYPE_OVERRIDE = row3.V4CFTO;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_PICKUP_ALLOW_PER_ITEM = row3.V4CPAP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_OFF_INV_ALLOW = row3.V4COIN;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_UOM = row3.V4CUOM;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_ALT_DELV_PRICE = row3.V4CADP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONF_DIST_MERCH_ALLOW_CHARGE = row3.V4CACM;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONF_DIST_FREIGHT_ALLOW_CHARGE = row3.V4CACF;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_MRPT = row3.V4CMRP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = row3.V4CMEF;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONFIRMED_PRICE_OVERRIDE_FLAG = row3.V4CPOF;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CARRIER_SHORT_QTY = row3.V4QYSH;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.RECVD_DAMAGED_ACCEPTED_QTY = row3.V4QYDA;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.RECVD_QTY = row3.V4RCQT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.VENDOR_SHORT_QTY = row3.V4VSQY;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CARRIER_SHORT_REASON_CODE = row3.V4CSRC;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.VENDOR_SHORT_REASON_CODE = row3.V4VSRC;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.RECVD_WGT = row3.V4RVWT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.DAMAGED_RECVD_WGT = row3.V4DRWT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.REVISED_PROFORMA_FLAG = row3.V4RPFF;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREIGHT_PROFORMA_STATUS = row3.V4PPFS;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_PROFORMA_STATUS = row3.V4PMPS;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_EXT_AMT_TOBE_PAID = row3.V4MEAP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_INV_DATE = Var.V4MIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4MIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_INV_NO = row3.V4MINV;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_PRICE_DIFF_STATUS = row3.V4MPDD;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_QTY_DIFF_STATUS = row3.V4MQDD;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_QTY_TO_BE_PAID = row3.V4MRQT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_WGT_TO_BE_PAID = row3.V4MRCW;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MERCH_CASH_DISC = row3.V4MCSD;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREIGHT_INV_NO = row3.V4FINV;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREIGHT_EXT_AMT_TO_BE_PAID = row3.V4FEAP;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREIGHT_INV_DATE = Var.V4FIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4FIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREIGHT_CHARGE_TO_BE_PAID = row3.V4FRCW;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREIGHT_CASH_DISC = row3.V4FCAD;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREIGHT_QTY_TO_BE_PAID = row3.V4FRQT;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.FREIGHT_CLAIM_QTY = row3.V4FTCQ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.LOAD_CTRL_NO = row3.V4LCN;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.SPLIT_PO_FLAG = row3.V4SPOF;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.TRUE_VENDOR = row3.V4MFVN;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.MANIFEST_HIST_MFG_NO = row3.V4MFID;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.NOTE1 = row3.V4COD1;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.TRUE_VENDOR_SHIP_FROM = row3.V4TDCD;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.LAST_QTY_SENT_TO_DPR = row3.V4QTIF;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CREATED_USER_ID = row3.V4EAID;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.IS_ACTIVE = true;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.V4PF_SVOP = context.svop;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.UPDATED_USER_ID = row3.V4MOID;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.UPDATED_PROGRAM_ID = row3.V4MOPG;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.IS_DELETED = false;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CREATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.UPDATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.ORIG_UNLOAD_CHARGE_PER_ITEM = row3.V4OUCI;
PURCHASE_ORDER_DETAIL_UPDATE_2_tmp.CONF_UNLOAD_CHARGE_PER_ITEM = row3.V4CUCI;
PURCHASE_ORDER_DETAIL_UPDATE_2 = PURCHASE_ORDER_DETAIL_UPDATE_2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "PURCHASE_ORDER_DETAIL_UPDATE_2"
if(PURCHASE_ORDER_DETAIL_UPDATE_2 != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PURCHASE_ORDER_DETAIL_UPDATE_2"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_CLASSIFICATION == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_CLASSIFICATION);
}

                    pstmt_tDBOutput_3.setBigDecimal(2, PURCHASE_ORDER_DETAIL_UPDATE_2.SHIPPING_POINT_SHIP_FROM);

                    pstmt_tDBOutput_3.setBigDecimal(3, PURCHASE_ORDER_DETAIL_UPDATE_2.BUYING_GROUP);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CUST_PREF_VENDOR == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, PURCHASE_ORDER_DETAIL_UPDATE_2.CUST_PREF_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.SOURCE_VENDOR == null) {
pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5, PURCHASE_ORDER_DETAIL_UPDATE_2.SOURCE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_TERMS == null) {
pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(6, PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.PO_PRIMARY_STATUS == null) {
pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(7, PURCHASE_ORDER_DETAIL_UPDATE_2.PO_PRIMARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.PO_SECONDARY_STATUS == null) {
pstmt_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(8, PURCHASE_ORDER_DETAIL_UPDATE_2.PO_SECONDARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.PO_TYPE == null) {
pstmt_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(9, PURCHASE_ORDER_DETAIL_UPDATE_2.PO_TYPE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.WHSE_CHANGE_CODE == null) {
pstmt_tDBOutput_3.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(10, PURCHASE_ORDER_DETAIL_UPDATE_2.WHSE_CHANGE_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CONF_STATUS == null) {
pstmt_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(11, PURCHASE_ORDER_DETAIL_UPDATE_2.CONF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.PO_VALID_PRICING_FLAG == null) {
pstmt_tDBOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(12, PURCHASE_ORDER_DETAIL_UPDATE_2.PO_VALID_PRICING_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.PO_VALID_PRICING_APPROVAL == null) {
pstmt_tDBOutput_3.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(13, PURCHASE_ORDER_DETAIL_UPDATE_2.PO_VALID_PRICING_APPROVAL);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.PO_CHANGED_FLAG == null) {
pstmt_tDBOutput_3.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(14, PURCHASE_ORDER_DETAIL_UPDATE_2.PO_CHANGED_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.ALLOC_SCHEDULED_RECEIPT_FLAG == null) {
pstmt_tDBOutput_3.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(15, PURCHASE_ORDER_DETAIL_UPDATE_2.ALLOC_SCHEDULED_RECEIPT_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_3.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(16, PURCHASE_ORDER_DETAIL_UPDATE_2.PRICE_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.MARKED_BY_MERCHANDISER_FLAG == null) {
pstmt_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(17, PURCHASE_ORDER_DETAIL_UPDATE_2.MARKED_BY_MERCHANDISER_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.FAILED_SCORECARD_FLAG == null) {
pstmt_tDBOutput_3.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(18, PURCHASE_ORDER_DETAIL_UPDATE_2.FAILED_SCORECARD_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(19, PURCHASE_ORDER_DETAIL_UPDATE_2.MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CALENDAR_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_3.setTimestamp(20, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.CALENDAR_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_3.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE != null) {
pstmt_tDBOutput_3.setTimestamp(21, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE.getTime()));
} else {
pstmt_tDBOutput_3.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.BUSINESS_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_3.setTimestamp(22, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.BUSINESS_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_3.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.AVAIL_TIMESTAMP != null) {
pstmt_tDBOutput_3.setTimestamp(23, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.AVAIL_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_3.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.BUSINESS_ORDER_DATE != null) {
pstmt_tDBOutput_3.setTimestamp(24, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.BUSINESS_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_3.setNull(24, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(25, PURCHASE_ORDER_DETAIL_UPDATE_2.SUGGESTED_ORDER_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.SHIP_TO_CUST == null) {
pstmt_tDBOutput_3.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(26, PURCHASE_ORDER_DETAIL_UPDATE_2.SHIP_TO_CUST);
}

                    pstmt_tDBOutput_3.setBigDecimal(27, PURCHASE_ORDER_DETAIL_UPDATE_2.CUST_ORDER_NO);

                    pstmt_tDBOutput_3.setBigDecimal(28, PURCHASE_ORDER_DETAIL_UPDATE_2.CUST_ORDER_LINE_NO);

                    pstmt_tDBOutput_3.setBigDecimal(29, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_ORDER_QTY);

                    pstmt_tDBOutput_3.setBigDecimal(30, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_FOB_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(31, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(32, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_AP_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(33, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_3.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(34, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_3.setBigDecimal(35, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_3.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(36, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_3.setBigDecimal(37, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(38, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_UOM == null) {
pstmt_tDBOutput_3.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(39, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_UOM);
}

                    pstmt_tDBOutput_3.setBigDecimal(40, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_ALT_DELV_PRICE);

                    pstmt_tDBOutput_3.setBigDecimal(41, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_3.setBigDecimal(42, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_3.setBigDecimal(43, PURCHASE_ORDER_DETAIL_UPDATE_2.ALLOC_QTY);

                    pstmt_tDBOutput_3.setBigDecimal(44, PURCHASE_ORDER_DETAIL_UPDATE_2.ALLOC_QTY_SPLITS);

                    pstmt_tDBOutput_3.setBigDecimal(45, PURCHASE_ORDER_DETAIL_UPDATE_2.INV_UNIT_PRICE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.FREE_GOODS_FLAG == null) {
pstmt_tDBOutput_3.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(46, PURCHASE_ORDER_DETAIL_UPDATE_2.FREE_GOODS_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_PRICE_LIST_UOM == null) {
pstmt_tDBOutput_3.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(47, PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_PRICE_LIST_UOM);
}

                    pstmt_tDBOutput_3.setBigDecimal(48, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_ORDER_QTY);

                    pstmt_tDBOutput_3.setBigDecimal(49, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_FOB_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(50, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(51, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_AP_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(52, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_3.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(53, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_3.setBigDecimal(54, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_3.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(55, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_3.setBigDecimal(56, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(57, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_UOM == null) {
pstmt_tDBOutput_3.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(58, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_UOM);
}

                    pstmt_tDBOutput_3.setBigDecimal(59, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_ALT_DELV_PRICE);

                    pstmt_tDBOutput_3.setBigDecimal(60, PURCHASE_ORDER_DETAIL_UPDATE_2.CONF_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_3.setBigDecimal(61, PURCHASE_ORDER_DETAIL_UPDATE_2.CONF_DIST_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_3.setBigDecimal(62, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_MRPT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_3.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(63, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_3.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(64, PURCHASE_ORDER_DETAIL_UPDATE_2.CONFIRMED_PRICE_OVERRIDE_FLAG);
}

                    pstmt_tDBOutput_3.setBigDecimal(65, PURCHASE_ORDER_DETAIL_UPDATE_2.CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_3.setBigDecimal(66, PURCHASE_ORDER_DETAIL_UPDATE_2.RECVD_DAMAGED_ACCEPTED_QTY);

                    pstmt_tDBOutput_3.setBigDecimal(67, PURCHASE_ORDER_DETAIL_UPDATE_2.RECVD_QTY);

                    pstmt_tDBOutput_3.setBigDecimal(68, PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_SHORT_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CARRIER_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_3.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(69, PURCHASE_ORDER_DETAIL_UPDATE_2.CARRIER_SHORT_REASON_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_3.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(70, PURCHASE_ORDER_DETAIL_UPDATE_2.VENDOR_SHORT_REASON_CODE);
}

                    pstmt_tDBOutput_3.setBigDecimal(71, PURCHASE_ORDER_DETAIL_UPDATE_2.RECVD_WGT);

                    pstmt_tDBOutput_3.setBigDecimal(72, PURCHASE_ORDER_DETAIL_UPDATE_2.DAMAGED_RECVD_WGT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.REVISED_PROFORMA_FLAG == null) {
pstmt_tDBOutput_3.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(73, PURCHASE_ORDER_DETAIL_UPDATE_2.REVISED_PROFORMA_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_PROFORMA_STATUS == null) {
pstmt_tDBOutput_3.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(74, PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_PROFORMA_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_PROFORMA_STATUS == null) {
pstmt_tDBOutput_3.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(75, PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_PROFORMA_STATUS);
}

                    pstmt_tDBOutput_3.setBigDecimal(76, PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_EXT_AMT_TOBE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_INV_DATE != null) {
pstmt_tDBOutput_3.setTimestamp(77, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_3.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_INV_NO == null) {
pstmt_tDBOutput_3.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(78, PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_INV_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_PRICE_DIFF_STATUS == null) {
pstmt_tDBOutput_3.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(79, PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_PRICE_DIFF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_QTY_DIFF_STATUS == null) {
pstmt_tDBOutput_3.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(80, PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_QTY_DIFF_STATUS);
}

                    pstmt_tDBOutput_3.setBigDecimal(81, PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_3.setBigDecimal(82, PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_WGT_TO_BE_PAID);

                    pstmt_tDBOutput_3.setBigDecimal(83, PURCHASE_ORDER_DETAIL_UPDATE_2.MERCH_CASH_DISC);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_INV_NO == null) {
pstmt_tDBOutput_3.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(84, PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_INV_NO);
}

                    pstmt_tDBOutput_3.setBigDecimal(85, PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_EXT_AMT_TO_BE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_INV_DATE != null) {
pstmt_tDBOutput_3.setTimestamp(86, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_3.setNull(86, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(87, PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_CHARGE_TO_BE_PAID);

                    pstmt_tDBOutput_3.setBigDecimal(88, PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_CASH_DISC);

                    pstmt_tDBOutput_3.setBigDecimal(89, PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_3.setBigDecimal(90, PURCHASE_ORDER_DETAIL_UPDATE_2.FREIGHT_CLAIM_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.LOAD_CTRL_NO == null) {
pstmt_tDBOutput_3.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(91, PURCHASE_ORDER_DETAIL_UPDATE_2.LOAD_CTRL_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.SPLIT_PO_FLAG == null) {
pstmt_tDBOutput_3.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(92, PURCHASE_ORDER_DETAIL_UPDATE_2.SPLIT_PO_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.TRUE_VENDOR == null) {
pstmt_tDBOutput_3.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(93, PURCHASE_ORDER_DETAIL_UPDATE_2.TRUE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.MANIFEST_HIST_MFG_NO == null) {
pstmt_tDBOutput_3.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(94, PURCHASE_ORDER_DETAIL_UPDATE_2.MANIFEST_HIST_MFG_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.NOTE1 == null) {
pstmt_tDBOutput_3.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(95, PURCHASE_ORDER_DETAIL_UPDATE_2.NOTE1);
}

                    pstmt_tDBOutput_3.setBigDecimal(96, PURCHASE_ORDER_DETAIL_UPDATE_2.TRUE_VENDOR_SHIP_FROM);

                    pstmt_tDBOutput_3.setBigDecimal(97, PURCHASE_ORDER_DETAIL_UPDATE_2.LAST_QTY_SENT_TO_DPR);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_3.setTimestamp(98, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_3.setNull(98, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CREATED_USER_ID == null) {
pstmt_tDBOutput_3.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(99, PURCHASE_ORDER_DETAIL_UPDATE_2.CREATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.IS_ACTIVE == null) {
pstmt_tDBOutput_3.setNull(100, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(100, PURCHASE_ORDER_DETAIL_UPDATE_2.IS_ACTIVE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.V4PF_SVOP == null) {
pstmt_tDBOutput_3.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(101, PURCHASE_ORDER_DETAIL_UPDATE_2.V4PF_SVOP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_USER_ID == null) {
pstmt_tDBOutput_3.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(102, PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_3.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(103, PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_PROGRAM_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_3.setTimestamp(104, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_3.setNull(104, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.IS_DELETED == null) {
pstmt_tDBOutput_3.setNull(105, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_3.setBoolean(105, PURCHASE_ORDER_DETAIL_UPDATE_2.IS_DELETED);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CREATED_ORIGIN == null) {
pstmt_tDBOutput_3.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(106, PURCHASE_ORDER_DETAIL_UPDATE_2.CREATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_3.setTimestamp(107, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_3.setNull(107, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_3.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(108, PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_3.setTimestamp(109, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_2.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_3.setNull(109, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_3.setBigDecimal(110, PURCHASE_ORDER_DETAIL_UPDATE_2.ORIG_UNLOAD_CHARGE_PER_ITEM);

                    pstmt_tDBOutput_3.setBigDecimal(111, PURCHASE_ORDER_DETAIL_UPDATE_2.CONF_UNLOAD_CHARGE_PER_ITEM);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.SITE_ID == null) {
pstmt_tDBOutput_3.setNull(112 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(112 + count_tDBOutput_3, PURCHASE_ORDER_DETAIL_UPDATE_2.SITE_ID);
}


                    if(PURCHASE_ORDER_DETAIL_UPDATE_2.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_3.setNull(113 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(113 + count_tDBOutput_3, PURCHASE_ORDER_DETAIL_UPDATE_2.PURCHASE_ORDER_NO);
}


                    pstmt_tDBOutput_3.setBigDecimal(114 + count_tDBOutput_3, PURCHASE_ORDER_DETAIL_UPDATE_2.SMS_MAJ_LINE_NO);


                    pstmt_tDBOutput_3.setBigDecimal(115 + count_tDBOutput_3, PURCHASE_ORDER_DETAIL_UPDATE_2.SMS_MIN_LINE_NO);


    		pstmt_tDBOutput_3.addBatch();
    		nb_line_tDBOutput_3++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_3++;
    		  
    			if ((batchSize_tDBOutput_3 > 0) && (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
                try {
						int countSum_tDBOutput_3 = 0;
						    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
				    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
            	    	batchSizeCounter_tDBOutput_3 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
				    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
				    	String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						}else{
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}
				    	
				    	int countSum_tDBOutput_3 = 0;
						for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
						rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
				    	
				    	System.err.println(errormessage_tDBOutput_3);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_3++;
                if(commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
                if ((batchSize_tDBOutput_3 > 0) && (batchSizeCounter_tDBOutput_3 > 0)) {
                try {
                		int countSum_tDBOutput_3 = 0;
                		    
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}
            	    	rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
            	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
            	    	
                batchSizeCounter_tDBOutput_3 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
			    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
			    	String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					}else{
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}
			    	
			    	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
					
			    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
			    	
			    	System.err.println(errormessage_tDBOutput_3);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_3 != 0){
                    	
                    }
                    conn_tDBOutput_3.commit();
                    if(rowsToCommitCount_tDBOutput_3 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_3 = 0;
                    }
                    commitCounter_tDBOutput_3=0;
                }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "PURCHASE_ORDER_DETAIL_UPDATE_2"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_3", end_Hash.get("tDBInput_3")-start_Hash.get("tDBInput_3"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



	    try {
				int countSum_tDBOutput_3 = 0;
				if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {
						
					for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
						
				}
		    	
		    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_3){
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e_tDBOutput_3.getMessage());
	    	java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),sqle_tDBOutput_3=null;
	    	String errormessage_tDBOutput_3;
			if (ne_tDBOutput_3 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_3 = new java.sql.SQLException(e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(), ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
				errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
			}else{
				errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
			}
	    	
	    	int countSum_tDBOutput_3 = 0;
			for(int countEach_tDBOutput_3: e_tDBOutput_3.getUpdateCounts()) {
				countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
			}
			rowsToCommitCount_tDBOutput_3 += countSum_tDBOutput_3;
			
	    		updatedCount_tDBOutput_3 += countSum_tDBOutput_3;
	    	
	    	System.err.println(errormessage_tDBOutput_3);
	    	
		}
	    
        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);
			if(rowsToCommitCount_tDBOutput_3 != 0){
				
			}
			conn_tDBOutput_3.commit();
			if(rowsToCommitCount_tDBOutput_3 != 0){
				
				rowsToCommitCount_tDBOutput_3 = 0;
			}
			commitCounter_tDBOutput_3 = 0;
		
    	conn_tDBOutput_3 .close();
    	
    	resourceMap.put("finish_tDBOutput_3", true);
    	

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PURCHASE_ORDER_DETAIL_UPDATE_2");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_3", end_Hash.get("tDBOutput_3")-start_Hash.get("tDBOutput_3"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_3") == null){
            java.sql.Connection ctn_tDBOutput_3 = null;
            if((ctn_tDBOutput_3 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_3")) != null){
                try {
                    ctn_tDBOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_3) {
                    String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :" + sqlEx_tDBOutput_3.getMessage();
                    System.err.println(errorMessage_tDBOutput_3);
                }
            }
        }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";

	
		int tos_count_tJava_6 = 0;
		


System.out.println("Starting the Updating Data from IMHBV4PF_6 to PURCHASE_ORDER_DETAIL...........");
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());




/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";

	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public static class PURCHASE_ORDER_DETAIL_UPDATE_6Struct implements routines.system.IPersistableRow<PURCHASE_ORDER_DETAIL_UPDATE_6Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public BigDecimal SMS_MAJ_LINE_NO;

				public BigDecimal getSMS_MAJ_LINE_NO () {
					return this.SMS_MAJ_LINE_NO;
				}
				
			    public BigDecimal SMS_MIN_LINE_NO;

				public BigDecimal getSMS_MIN_LINE_NO () {
					return this.SMS_MIN_LINE_NO;
				}
				
			    public String VENDOR_CLASSIFICATION;

				public String getVENDOR_CLASSIFICATION () {
					return this.VENDOR_CLASSIFICATION;
				}
				
			    public BigDecimal SHIPPING_POINT_SHIP_FROM;

				public BigDecimal getSHIPPING_POINT_SHIP_FROM () {
					return this.SHIPPING_POINT_SHIP_FROM;
				}
				
			    public BigDecimal BUYING_GROUP;

				public BigDecimal getBUYING_GROUP () {
					return this.BUYING_GROUP;
				}
				
			    public String CUST_PREF_VENDOR;

				public String getCUST_PREF_VENDOR () {
					return this.CUST_PREF_VENDOR;
				}
				
			    public String SOURCE_VENDOR;

				public String getSOURCE_VENDOR () {
					return this.SOURCE_VENDOR;
				}
				
			    public String VENDOR_TERMS;

				public String getVENDOR_TERMS () {
					return this.VENDOR_TERMS;
				}
				
			    public String PO_PRIMARY_STATUS;

				public String getPO_PRIMARY_STATUS () {
					return this.PO_PRIMARY_STATUS;
				}
				
			    public String PO_SECONDARY_STATUS;

				public String getPO_SECONDARY_STATUS () {
					return this.PO_SECONDARY_STATUS;
				}
				
			    public String PO_TYPE;

				public String getPO_TYPE () {
					return this.PO_TYPE;
				}
				
			    public String WHSE_CHANGE_CODE;

				public String getWHSE_CHANGE_CODE () {
					return this.WHSE_CHANGE_CODE;
				}
				
			    public String CONF_STATUS;

				public String getCONF_STATUS () {
					return this.CONF_STATUS;
				}
				
			    public String PO_VALID_PRICING_FLAG;

				public String getPO_VALID_PRICING_FLAG () {
					return this.PO_VALID_PRICING_FLAG;
				}
				
			    public String PO_VALID_PRICING_APPROVAL;

				public String getPO_VALID_PRICING_APPROVAL () {
					return this.PO_VALID_PRICING_APPROVAL;
				}
				
			    public String PO_CHANGED_FLAG;

				public String getPO_CHANGED_FLAG () {
					return this.PO_CHANGED_FLAG;
				}
				
			    public String ALLOC_SCHEDULED_RECEIPT_FLAG;

				public String getALLOC_SCHEDULED_RECEIPT_FLAG () {
					return this.ALLOC_SCHEDULED_RECEIPT_FLAG;
				}
				
			    public String PRICE_OVERRIDE_FLAG;

				public String getPRICE_OVERRIDE_FLAG () {
					return this.PRICE_OVERRIDE_FLAG;
				}
				
			    public String MARKED_BY_MERCHANDISER_FLAG;

				public String getMARKED_BY_MERCHANDISER_FLAG () {
					return this.MARKED_BY_MERCHANDISER_FLAG;
				}
				
			    public String FAILED_SCORECARD_FLAG;

				public String getFAILED_SCORECARD_FLAG () {
					return this.FAILED_SCORECARD_FLAG;
				}
				
			    public String MANUALLY_ENTERED_LINE_FLAG;

				public String getMANUALLY_ENTERED_LINE_FLAG () {
					return this.MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public java.util.Date CALENDAR_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ANTICIPATED_RECEIPT () {
					return this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;

				public java.util.Date getCALENDAR_DATE_SCHEDULED_RECEIPT_DATE () {
					return this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
				}
				
			    public java.util.Date BUSINESS_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ANTICIPATED_RECEIPT () {
					return this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date AVAIL_TIMESTAMP;

				public java.util.Date getAVAIL_TIMESTAMP () {
					return this.AVAIL_TIMESTAMP;
				}
				
			    public java.util.Date BUSINESS_ORDER_DATE;

				public java.util.Date getBUSINESS_ORDER_DATE () {
					return this.BUSINESS_ORDER_DATE;
				}
				
			    public BigDecimal SUGGESTED_ORDER_QTY;

				public BigDecimal getSUGGESTED_ORDER_QTY () {
					return this.SUGGESTED_ORDER_QTY;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public BigDecimal CUST_ORDER_NO;

				public BigDecimal getCUST_ORDER_NO () {
					return this.CUST_ORDER_NO;
				}
				
			    public BigDecimal CUST_ORDER_LINE_NO;

				public BigDecimal getCUST_ORDER_LINE_NO () {
					return this.CUST_ORDER_LINE_NO;
				}
				
			    public BigDecimal ORIG_ORDER_QTY;

				public BigDecimal getORIG_ORDER_QTY () {
					return this.ORIG_ORDER_QTY;
				}
				
			    public BigDecimal ORIG_FOB_PER_ITEM;

				public BigDecimal getORIG_FOB_PER_ITEM () {
					return this.ORIG_FOB_PER_ITEM;
				}
				
			    public BigDecimal ORIG_FREIGHT_PER_ITEM;

				public BigDecimal getORIG_FREIGHT_PER_ITEM () {
					return this.ORIG_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal ORIG_AP_PER_ITEM;

				public BigDecimal getORIG_AP_PER_ITEM () {
					return this.ORIG_AP_PER_ITEM;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getORIG_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getORIG_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getORIG_FREIGHT_RATE_OVERRIDE () {
					return this.ORIG_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String ORIG_FREIGHT_TYPE_OVERRIDE;

				public String getORIG_FREIGHT_TYPE_OVERRIDE () {
					return this.ORIG_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getORIG_PICKUP_ALLOW_PER_ITEM () {
					return this.ORIG_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal ORIG_OFF_INV_ALLOW;

				public BigDecimal getORIG_OFF_INV_ALLOW () {
					return this.ORIG_OFF_INV_ALLOW;
				}
				
			    public String ORIG_UOM;

				public String getORIG_UOM () {
					return this.ORIG_UOM;
				}
				
			    public BigDecimal ORIG_ALT_DELV_PRICE;

				public BigDecimal getORIG_ALT_DELV_PRICE () {
					return this.ORIG_ALT_DELV_PRICE;
				}
				
			    public BigDecimal ORIG_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_MERCH_ALLOW_CHARGE () {
					return this.ORIG_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal ORIG_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getORIG_FREIGHT_ALLOW_CHARGE () {
					return this.ORIG_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal ALLOC_QTY;

				public BigDecimal getALLOC_QTY () {
					return this.ALLOC_QTY;
				}
				
			    public BigDecimal ALLOC_QTY_SPLITS;

				public BigDecimal getALLOC_QTY_SPLITS () {
					return this.ALLOC_QTY_SPLITS;
				}
				
			    public BigDecimal INV_UNIT_PRICE;

				public BigDecimal getINV_UNIT_PRICE () {
					return this.INV_UNIT_PRICE;
				}
				
			    public String FREE_GOODS_FLAG;

				public String getFREE_GOODS_FLAG () {
					return this.FREE_GOODS_FLAG;
				}
				
			    public String VENDOR_PRICE_LIST_UOM;

				public String getVENDOR_PRICE_LIST_UOM () {
					return this.VENDOR_PRICE_LIST_UOM;
				}
				
			    public BigDecimal CONFIRMED_ORDER_QTY;

				public BigDecimal getCONFIRMED_ORDER_QTY () {
					return this.CONFIRMED_ORDER_QTY;
				}
				
			    public BigDecimal CONFIRMED_FOB_PER_ITEM;

				public BigDecimal getCONFIRMED_FOB_PER_ITEM () {
					return this.CONFIRMED_FOB_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_PER_ITEM;

				public BigDecimal getCONFIRMED_FREIGHT_PER_ITEM () {
					return this.CONFIRMED_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_AP_PER_ITEM;

				public BigDecimal getCONFIRMED_AP_PER_ITEM () {
					return this.CONFIRMED_AP_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getCONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_FREIGHT_RATE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_FREIGHT_TYPE_OVERRIDE;

				public String getCONFIRMED_FREIGHT_TYPE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_PER_ITEM () {
					return this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_OFF_INV_ALLOW;

				public BigDecimal getCONFIRMED_OFF_INV_ALLOW () {
					return this.CONFIRMED_OFF_INV_ALLOW;
				}
				
			    public String CONFIRMED_UOM;

				public String getCONFIRMED_UOM () {
					return this.CONFIRMED_UOM;
				}
				
			    public BigDecimal CONFIRMED_ALT_DELV_PRICE;

				public BigDecimal getCONFIRMED_ALT_DELV_PRICE () {
					return this.CONFIRMED_ALT_DELV_PRICE;
				}
				
			    public BigDecimal CONF_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_MERCH_ALLOW_CHARGE () {
					return this.CONF_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONF_DIST_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_FREIGHT_ALLOW_CHARGE () {
					return this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_MRPT;

				public BigDecimal getCONFIRMED_MRPT () {
					return this.CONFIRMED_MRPT;
				}
				
			    public String CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;

				public String getCONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG () {
					return this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public String CONFIRMED_PRICE_OVERRIDE_FLAG;

				public String getCONFIRMED_PRICE_OVERRIDE_FLAG () {
					return this.CONFIRMED_PRICE_OVERRIDE_FLAG;
				}
				
			    public BigDecimal CARRIER_SHORT_QTY;

				public BigDecimal getCARRIER_SHORT_QTY () {
					return this.CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal RECVD_DAMAGED_ACCEPTED_QTY;

				public BigDecimal getRECVD_DAMAGED_ACCEPTED_QTY () {
					return this.RECVD_DAMAGED_ACCEPTED_QTY;
				}
				
			    public BigDecimal RECVD_QTY;

				public BigDecimal getRECVD_QTY () {
					return this.RECVD_QTY;
				}
				
			    public BigDecimal VENDOR_SHORT_QTY;

				public BigDecimal getVENDOR_SHORT_QTY () {
					return this.VENDOR_SHORT_QTY;
				}
				
			    public String CARRIER_SHORT_REASON_CODE;

				public String getCARRIER_SHORT_REASON_CODE () {
					return this.CARRIER_SHORT_REASON_CODE;
				}
				
			    public String VENDOR_SHORT_REASON_CODE;

				public String getVENDOR_SHORT_REASON_CODE () {
					return this.VENDOR_SHORT_REASON_CODE;
				}
				
			    public BigDecimal RECVD_WGT;

				public BigDecimal getRECVD_WGT () {
					return this.RECVD_WGT;
				}
				
			    public BigDecimal DAMAGED_RECVD_WGT;

				public BigDecimal getDAMAGED_RECVD_WGT () {
					return this.DAMAGED_RECVD_WGT;
				}
				
			    public String REVISED_PROFORMA_FLAG;

				public String getREVISED_PROFORMA_FLAG () {
					return this.REVISED_PROFORMA_FLAG;
				}
				
			    public String FREIGHT_PROFORMA_STATUS;

				public String getFREIGHT_PROFORMA_STATUS () {
					return this.FREIGHT_PROFORMA_STATUS;
				}
				
			    public String MERCH_PROFORMA_STATUS;

				public String getMERCH_PROFORMA_STATUS () {
					return this.MERCH_PROFORMA_STATUS;
				}
				
			    public BigDecimal MERCH_EXT_AMT_TOBE_PAID;

				public BigDecimal getMERCH_EXT_AMT_TOBE_PAID () {
					return this.MERCH_EXT_AMT_TOBE_PAID;
				}
				
			    public java.util.Date MERCH_INV_DATE;

				public java.util.Date getMERCH_INV_DATE () {
					return this.MERCH_INV_DATE;
				}
				
			    public String MERCH_INV_NO;

				public String getMERCH_INV_NO () {
					return this.MERCH_INV_NO;
				}
				
			    public String MERCH_PRICE_DIFF_STATUS;

				public String getMERCH_PRICE_DIFF_STATUS () {
					return this.MERCH_PRICE_DIFF_STATUS;
				}
				
			    public String MERCH_QTY_DIFF_STATUS;

				public String getMERCH_QTY_DIFF_STATUS () {
					return this.MERCH_QTY_DIFF_STATUS;
				}
				
			    public BigDecimal MERCH_QTY_TO_BE_PAID;

				public BigDecimal getMERCH_QTY_TO_BE_PAID () {
					return this.MERCH_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_WGT_TO_BE_PAID;

				public BigDecimal getMERCH_WGT_TO_BE_PAID () {
					return this.MERCH_WGT_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_CASH_DISC;

				public BigDecimal getMERCH_CASH_DISC () {
					return this.MERCH_CASH_DISC;
				}
				
			    public String FREIGHT_INV_NO;

				public String getFREIGHT_INV_NO () {
					return this.FREIGHT_INV_NO;
				}
				
			    public BigDecimal FREIGHT_EXT_AMT_TO_BE_PAID;

				public BigDecimal getFREIGHT_EXT_AMT_TO_BE_PAID () {
					return this.FREIGHT_EXT_AMT_TO_BE_PAID;
				}
				
			    public java.util.Date FREIGHT_INV_DATE;

				public java.util.Date getFREIGHT_INV_DATE () {
					return this.FREIGHT_INV_DATE;
				}
				
			    public BigDecimal FREIGHT_CHARGE_TO_BE_PAID;

				public BigDecimal getFREIGHT_CHARGE_TO_BE_PAID () {
					return this.FREIGHT_CHARGE_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CASH_DISC;

				public BigDecimal getFREIGHT_CASH_DISC () {
					return this.FREIGHT_CASH_DISC;
				}
				
			    public BigDecimal FREIGHT_QTY_TO_BE_PAID;

				public BigDecimal getFREIGHT_QTY_TO_BE_PAID () {
					return this.FREIGHT_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CLAIM_QTY;

				public BigDecimal getFREIGHT_CLAIM_QTY () {
					return this.FREIGHT_CLAIM_QTY;
				}
				
			    public String LOAD_CTRL_NO;

				public String getLOAD_CTRL_NO () {
					return this.LOAD_CTRL_NO;
				}
				
			    public String SPLIT_PO_FLAG;

				public String getSPLIT_PO_FLAG () {
					return this.SPLIT_PO_FLAG;
				}
				
			    public String TRUE_VENDOR;

				public String getTRUE_VENDOR () {
					return this.TRUE_VENDOR;
				}
				
			    public String MANIFEST_HIST_MFG_NO;

				public String getMANIFEST_HIST_MFG_NO () {
					return this.MANIFEST_HIST_MFG_NO;
				}
				
			    public String NOTE1;

				public String getNOTE1 () {
					return this.NOTE1;
				}
				
			    public BigDecimal TRUE_VENDOR_SHIP_FROM;

				public BigDecimal getTRUE_VENDOR_SHIP_FROM () {
					return this.TRUE_VENDOR_SHIP_FROM;
				}
				
			    public BigDecimal LAST_QTY_SENT_TO_DPR;

				public BigDecimal getLAST_QTY_SENT_TO_DPR () {
					return this.LAST_QTY_SENT_TO_DPR;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String V4PF_SVOP;

				public String getV4PF_SVOP () {
					return this.V4PF_SVOP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public BigDecimal ORIG_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getORIG_UNLOAD_CHARGE_PER_ITEM () {
					return this.ORIG_UNLOAD_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal CONF_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getCONF_UNLOAD_CHARGE_PER_ITEM () {
					return this.CONF_UNLOAD_CHARGE_PER_ITEM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.SMS_MAJ_LINE_NO == null) ? 0 : this.SMS_MAJ_LINE_NO.hashCode());
					
						result = prime * result + ((this.SMS_MIN_LINE_NO == null) ? 0 : this.SMS_MIN_LINE_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PURCHASE_ORDER_DETAIL_UPDATE_6Struct other = (PURCHASE_ORDER_DETAIL_UPDATE_6Struct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.SMS_MAJ_LINE_NO == null) {
							if (other.SMS_MAJ_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MAJ_LINE_NO.equals(other.SMS_MAJ_LINE_NO))
						
							return false;
					
						if (this.SMS_MIN_LINE_NO == null) {
							if (other.SMS_MIN_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MIN_LINE_NO.equals(other.SMS_MIN_LINE_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PURCHASE_ORDER_DETAIL_UPDATE_6Struct other) {

		other.SITE_ID = this.SITE_ID;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            other.VENDOR_CLASSIFICATION = this.VENDOR_CLASSIFICATION;
	            other.SHIPPING_POINT_SHIP_FROM = this.SHIPPING_POINT_SHIP_FROM;
	            other.BUYING_GROUP = this.BUYING_GROUP;
	            other.CUST_PREF_VENDOR = this.CUST_PREF_VENDOR;
	            other.SOURCE_VENDOR = this.SOURCE_VENDOR;
	            other.VENDOR_TERMS = this.VENDOR_TERMS;
	            other.PO_PRIMARY_STATUS = this.PO_PRIMARY_STATUS;
	            other.PO_SECONDARY_STATUS = this.PO_SECONDARY_STATUS;
	            other.PO_TYPE = this.PO_TYPE;
	            other.WHSE_CHANGE_CODE = this.WHSE_CHANGE_CODE;
	            other.CONF_STATUS = this.CONF_STATUS;
	            other.PO_VALID_PRICING_FLAG = this.PO_VALID_PRICING_FLAG;
	            other.PO_VALID_PRICING_APPROVAL = this.PO_VALID_PRICING_APPROVAL;
	            other.PO_CHANGED_FLAG = this.PO_CHANGED_FLAG;
	            other.ALLOC_SCHEDULED_RECEIPT_FLAG = this.ALLOC_SCHEDULED_RECEIPT_FLAG;
	            other.PRICE_OVERRIDE_FLAG = this.PRICE_OVERRIDE_FLAG;
	            other.MARKED_BY_MERCHANDISER_FLAG = this.MARKED_BY_MERCHANDISER_FLAG;
	            other.FAILED_SCORECARD_FLAG = this.FAILED_SCORECARD_FLAG;
	            other.MANUALLY_ENTERED_LINE_FLAG = this.MANUALLY_ENTERED_LINE_FLAG;
	            other.CALENDAR_DATE_ANTICIPATED_RECEIPT = this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
	            other.BUSINESS_DATE_ANTICIPATED_RECEIPT = this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
	            other.AVAIL_TIMESTAMP = this.AVAIL_TIMESTAMP;
	            other.BUSINESS_ORDER_DATE = this.BUSINESS_ORDER_DATE;
	            other.SUGGESTED_ORDER_QTY = this.SUGGESTED_ORDER_QTY;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.CUST_ORDER_NO = this.CUST_ORDER_NO;
	            other.CUST_ORDER_LINE_NO = this.CUST_ORDER_LINE_NO;
	            other.ORIG_ORDER_QTY = this.ORIG_ORDER_QTY;
	            other.ORIG_FOB_PER_ITEM = this.ORIG_FOB_PER_ITEM;
	            other.ORIG_FREIGHT_PER_ITEM = this.ORIG_FREIGHT_PER_ITEM;
	            other.ORIG_AP_PER_ITEM = this.ORIG_AP_PER_ITEM;
	            other.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.ORIG_FREIGHT_RATE_OVERRIDE = this.ORIG_FREIGHT_RATE_OVERRIDE;
	            other.ORIG_FREIGHT_TYPE_OVERRIDE = this.ORIG_FREIGHT_TYPE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_PER_ITEM = this.ORIG_PICKUP_ALLOW_PER_ITEM;
	            other.ORIG_OFF_INV_ALLOW = this.ORIG_OFF_INV_ALLOW;
	            other.ORIG_UOM = this.ORIG_UOM;
	            other.ORIG_ALT_DELV_PRICE = this.ORIG_ALT_DELV_PRICE;
	            other.ORIG_MERCH_ALLOW_CHARGE = this.ORIG_MERCH_ALLOW_CHARGE;
	            other.ORIG_FREIGHT_ALLOW_CHARGE = this.ORIG_FREIGHT_ALLOW_CHARGE;
	            other.ALLOC_QTY = this.ALLOC_QTY;
	            other.ALLOC_QTY_SPLITS = this.ALLOC_QTY_SPLITS;
	            other.INV_UNIT_PRICE = this.INV_UNIT_PRICE;
	            other.FREE_GOODS_FLAG = this.FREE_GOODS_FLAG;
	            other.VENDOR_PRICE_LIST_UOM = this.VENDOR_PRICE_LIST_UOM;
	            other.CONFIRMED_ORDER_QTY = this.CONFIRMED_ORDER_QTY;
	            other.CONFIRMED_FOB_PER_ITEM = this.CONFIRMED_FOB_PER_ITEM;
	            other.CONFIRMED_FREIGHT_PER_ITEM = this.CONFIRMED_FREIGHT_PER_ITEM;
	            other.CONFIRMED_AP_PER_ITEM = this.CONFIRMED_AP_PER_ITEM;
	            other.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_RATE_OVERRIDE = this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_TYPE_OVERRIDE = this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_PER_ITEM = this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
	            other.CONFIRMED_OFF_INV_ALLOW = this.CONFIRMED_OFF_INV_ALLOW;
	            other.CONFIRMED_UOM = this.CONFIRMED_UOM;
	            other.CONFIRMED_ALT_DELV_PRICE = this.CONFIRMED_ALT_DELV_PRICE;
	            other.CONF_DIST_MERCH_ALLOW_CHARGE = this.CONF_DIST_MERCH_ALLOW_CHARGE;
	            other.CONF_DIST_FREIGHT_ALLOW_CHARGE = this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_MRPT = this.CONFIRMED_MRPT;
	            other.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
	            other.CONFIRMED_PRICE_OVERRIDE_FLAG = this.CONFIRMED_PRICE_OVERRIDE_FLAG;
	            other.CARRIER_SHORT_QTY = this.CARRIER_SHORT_QTY;
	            other.RECVD_DAMAGED_ACCEPTED_QTY = this.RECVD_DAMAGED_ACCEPTED_QTY;
	            other.RECVD_QTY = this.RECVD_QTY;
	            other.VENDOR_SHORT_QTY = this.VENDOR_SHORT_QTY;
	            other.CARRIER_SHORT_REASON_CODE = this.CARRIER_SHORT_REASON_CODE;
	            other.VENDOR_SHORT_REASON_CODE = this.VENDOR_SHORT_REASON_CODE;
	            other.RECVD_WGT = this.RECVD_WGT;
	            other.DAMAGED_RECVD_WGT = this.DAMAGED_RECVD_WGT;
	            other.REVISED_PROFORMA_FLAG = this.REVISED_PROFORMA_FLAG;
	            other.FREIGHT_PROFORMA_STATUS = this.FREIGHT_PROFORMA_STATUS;
	            other.MERCH_PROFORMA_STATUS = this.MERCH_PROFORMA_STATUS;
	            other.MERCH_EXT_AMT_TOBE_PAID = this.MERCH_EXT_AMT_TOBE_PAID;
	            other.MERCH_INV_DATE = this.MERCH_INV_DATE;
	            other.MERCH_INV_NO = this.MERCH_INV_NO;
	            other.MERCH_PRICE_DIFF_STATUS = this.MERCH_PRICE_DIFF_STATUS;
	            other.MERCH_QTY_DIFF_STATUS = this.MERCH_QTY_DIFF_STATUS;
	            other.MERCH_QTY_TO_BE_PAID = this.MERCH_QTY_TO_BE_PAID;
	            other.MERCH_WGT_TO_BE_PAID = this.MERCH_WGT_TO_BE_PAID;
	            other.MERCH_CASH_DISC = this.MERCH_CASH_DISC;
	            other.FREIGHT_INV_NO = this.FREIGHT_INV_NO;
	            other.FREIGHT_EXT_AMT_TO_BE_PAID = this.FREIGHT_EXT_AMT_TO_BE_PAID;
	            other.FREIGHT_INV_DATE = this.FREIGHT_INV_DATE;
	            other.FREIGHT_CHARGE_TO_BE_PAID = this.FREIGHT_CHARGE_TO_BE_PAID;
	            other.FREIGHT_CASH_DISC = this.FREIGHT_CASH_DISC;
	            other.FREIGHT_QTY_TO_BE_PAID = this.FREIGHT_QTY_TO_BE_PAID;
	            other.FREIGHT_CLAIM_QTY = this.FREIGHT_CLAIM_QTY;
	            other.LOAD_CTRL_NO = this.LOAD_CTRL_NO;
	            other.SPLIT_PO_FLAG = this.SPLIT_PO_FLAG;
	            other.TRUE_VENDOR = this.TRUE_VENDOR;
	            other.MANIFEST_HIST_MFG_NO = this.MANIFEST_HIST_MFG_NO;
	            other.NOTE1 = this.NOTE1;
	            other.TRUE_VENDOR_SHIP_FROM = this.TRUE_VENDOR_SHIP_FROM;
	            other.LAST_QTY_SENT_TO_DPR = this.LAST_QTY_SENT_TO_DPR;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.V4PF_SVOP = this.V4PF_SVOP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.ORIG_UNLOAD_CHARGE_PER_ITEM = this.ORIG_UNLOAD_CHARGE_PER_ITEM;
	            other.CONF_UNLOAD_CHARGE_PER_ITEM = this.CONF_UNLOAD_CHARGE_PER_ITEM;
	            
	}

	public void copyKeysDataTo(PURCHASE_ORDER_DETAIL_UPDATE_6Struct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            	other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",SMS_MAJ_LINE_NO="+String.valueOf(SMS_MAJ_LINE_NO));
		sb.append(",SMS_MIN_LINE_NO="+String.valueOf(SMS_MIN_LINE_NO));
		sb.append(",VENDOR_CLASSIFICATION="+VENDOR_CLASSIFICATION);
		sb.append(",SHIPPING_POINT_SHIP_FROM="+String.valueOf(SHIPPING_POINT_SHIP_FROM));
		sb.append(",BUYING_GROUP="+String.valueOf(BUYING_GROUP));
		sb.append(",CUST_PREF_VENDOR="+CUST_PREF_VENDOR);
		sb.append(",SOURCE_VENDOR="+SOURCE_VENDOR);
		sb.append(",VENDOR_TERMS="+VENDOR_TERMS);
		sb.append(",PO_PRIMARY_STATUS="+PO_PRIMARY_STATUS);
		sb.append(",PO_SECONDARY_STATUS="+PO_SECONDARY_STATUS);
		sb.append(",PO_TYPE="+PO_TYPE);
		sb.append(",WHSE_CHANGE_CODE="+WHSE_CHANGE_CODE);
		sb.append(",CONF_STATUS="+CONF_STATUS);
		sb.append(",PO_VALID_PRICING_FLAG="+PO_VALID_PRICING_FLAG);
		sb.append(",PO_VALID_PRICING_APPROVAL="+PO_VALID_PRICING_APPROVAL);
		sb.append(",PO_CHANGED_FLAG="+PO_CHANGED_FLAG);
		sb.append(",ALLOC_SCHEDULED_RECEIPT_FLAG="+ALLOC_SCHEDULED_RECEIPT_FLAG);
		sb.append(",PRICE_OVERRIDE_FLAG="+PRICE_OVERRIDE_FLAG);
		sb.append(",MARKED_BY_MERCHANDISER_FLAG="+MARKED_BY_MERCHANDISER_FLAG);
		sb.append(",FAILED_SCORECARD_FLAG="+FAILED_SCORECARD_FLAG);
		sb.append(",MANUALLY_ENTERED_LINE_FLAG="+MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CALENDAR_DATE_ANTICIPATED_RECEIPT="+String.valueOf(CALENDAR_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_DATE_SCHEDULED_RECEIPT_DATE="+String.valueOf(CALENDAR_DATE_SCHEDULED_RECEIPT_DATE));
		sb.append(",BUSINESS_DATE_ANTICIPATED_RECEIPT="+String.valueOf(BUSINESS_DATE_ANTICIPATED_RECEIPT));
		sb.append(",AVAIL_TIMESTAMP="+String.valueOf(AVAIL_TIMESTAMP));
		sb.append(",BUSINESS_ORDER_DATE="+String.valueOf(BUSINESS_ORDER_DATE));
		sb.append(",SUGGESTED_ORDER_QTY="+String.valueOf(SUGGESTED_ORDER_QTY));
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",CUST_ORDER_NO="+String.valueOf(CUST_ORDER_NO));
		sb.append(",CUST_ORDER_LINE_NO="+String.valueOf(CUST_ORDER_LINE_NO));
		sb.append(",ORIG_ORDER_QTY="+String.valueOf(ORIG_ORDER_QTY));
		sb.append(",ORIG_FOB_PER_ITEM="+String.valueOf(ORIG_FOB_PER_ITEM));
		sb.append(",ORIG_FREIGHT_PER_ITEM="+String.valueOf(ORIG_FREIGHT_PER_ITEM));
		sb.append(",ORIG_AP_PER_ITEM="+String.valueOf(ORIG_AP_PER_ITEM));
		sb.append(",ORIG_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(ORIG_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",ORIG_PICKUP_ALLOW_TYPE_OVERRIDE="+ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",ORIG_FREIGHT_RATE_OVERRIDE="+String.valueOf(ORIG_FREIGHT_RATE_OVERRIDE));
		sb.append(",ORIG_FREIGHT_TYPE_OVERRIDE="+ORIG_FREIGHT_TYPE_OVERRIDE);
		sb.append(",ORIG_PICKUP_ALLOW_PER_ITEM="+String.valueOf(ORIG_PICKUP_ALLOW_PER_ITEM));
		sb.append(",ORIG_OFF_INV_ALLOW="+String.valueOf(ORIG_OFF_INV_ALLOW));
		sb.append(",ORIG_UOM="+ORIG_UOM);
		sb.append(",ORIG_ALT_DELV_PRICE="+String.valueOf(ORIG_ALT_DELV_PRICE));
		sb.append(",ORIG_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_MERCH_ALLOW_CHARGE));
		sb.append(",ORIG_FREIGHT_ALLOW_CHARGE="+String.valueOf(ORIG_FREIGHT_ALLOW_CHARGE));
		sb.append(",ALLOC_QTY="+String.valueOf(ALLOC_QTY));
		sb.append(",ALLOC_QTY_SPLITS="+String.valueOf(ALLOC_QTY_SPLITS));
		sb.append(",INV_UNIT_PRICE="+String.valueOf(INV_UNIT_PRICE));
		sb.append(",FREE_GOODS_FLAG="+FREE_GOODS_FLAG);
		sb.append(",VENDOR_PRICE_LIST_UOM="+VENDOR_PRICE_LIST_UOM);
		sb.append(",CONFIRMED_ORDER_QTY="+String.valueOf(CONFIRMED_ORDER_QTY));
		sb.append(",CONFIRMED_FOB_PER_ITEM="+String.valueOf(CONFIRMED_FOB_PER_ITEM));
		sb.append(",CONFIRMED_FREIGHT_PER_ITEM="+String.valueOf(CONFIRMED_FREIGHT_PER_ITEM));
		sb.append(",CONFIRMED_AP_PER_ITEM="+String.valueOf(CONFIRMED_AP_PER_ITEM));
		sb.append(",CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE="+CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_FREIGHT_RATE_OVERRIDE="+String.valueOf(CONFIRMED_FREIGHT_RATE_OVERRIDE));
		sb.append(",CONFIRMED_FREIGHT_TYPE_OVERRIDE="+CONFIRMED_FREIGHT_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_PER_ITEM="+String.valueOf(CONFIRMED_PICKUP_ALLOW_PER_ITEM));
		sb.append(",CONFIRMED_OFF_INV_ALLOW="+String.valueOf(CONFIRMED_OFF_INV_ALLOW));
		sb.append(",CONFIRMED_UOM="+CONFIRMED_UOM);
		sb.append(",CONFIRMED_ALT_DELV_PRICE="+String.valueOf(CONFIRMED_ALT_DELV_PRICE));
		sb.append(",CONF_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(CONF_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",CONF_DIST_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONF_DIST_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_MRPT="+String.valueOf(CONFIRMED_MRPT));
		sb.append(",CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG="+CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CONFIRMED_PRICE_OVERRIDE_FLAG="+CONFIRMED_PRICE_OVERRIDE_FLAG);
		sb.append(",CARRIER_SHORT_QTY="+String.valueOf(CARRIER_SHORT_QTY));
		sb.append(",RECVD_DAMAGED_ACCEPTED_QTY="+String.valueOf(RECVD_DAMAGED_ACCEPTED_QTY));
		sb.append(",RECVD_QTY="+String.valueOf(RECVD_QTY));
		sb.append(",VENDOR_SHORT_QTY="+String.valueOf(VENDOR_SHORT_QTY));
		sb.append(",CARRIER_SHORT_REASON_CODE="+CARRIER_SHORT_REASON_CODE);
		sb.append(",VENDOR_SHORT_REASON_CODE="+VENDOR_SHORT_REASON_CODE);
		sb.append(",RECVD_WGT="+String.valueOf(RECVD_WGT));
		sb.append(",DAMAGED_RECVD_WGT="+String.valueOf(DAMAGED_RECVD_WGT));
		sb.append(",REVISED_PROFORMA_FLAG="+REVISED_PROFORMA_FLAG);
		sb.append(",FREIGHT_PROFORMA_STATUS="+FREIGHT_PROFORMA_STATUS);
		sb.append(",MERCH_PROFORMA_STATUS="+MERCH_PROFORMA_STATUS);
		sb.append(",MERCH_EXT_AMT_TOBE_PAID="+String.valueOf(MERCH_EXT_AMT_TOBE_PAID));
		sb.append(",MERCH_INV_DATE="+String.valueOf(MERCH_INV_DATE));
		sb.append(",MERCH_INV_NO="+MERCH_INV_NO);
		sb.append(",MERCH_PRICE_DIFF_STATUS="+MERCH_PRICE_DIFF_STATUS);
		sb.append(",MERCH_QTY_DIFF_STATUS="+MERCH_QTY_DIFF_STATUS);
		sb.append(",MERCH_QTY_TO_BE_PAID="+String.valueOf(MERCH_QTY_TO_BE_PAID));
		sb.append(",MERCH_WGT_TO_BE_PAID="+String.valueOf(MERCH_WGT_TO_BE_PAID));
		sb.append(",MERCH_CASH_DISC="+String.valueOf(MERCH_CASH_DISC));
		sb.append(",FREIGHT_INV_NO="+FREIGHT_INV_NO);
		sb.append(",FREIGHT_EXT_AMT_TO_BE_PAID="+String.valueOf(FREIGHT_EXT_AMT_TO_BE_PAID));
		sb.append(",FREIGHT_INV_DATE="+String.valueOf(FREIGHT_INV_DATE));
		sb.append(",FREIGHT_CHARGE_TO_BE_PAID="+String.valueOf(FREIGHT_CHARGE_TO_BE_PAID));
		sb.append(",FREIGHT_CASH_DISC="+String.valueOf(FREIGHT_CASH_DISC));
		sb.append(",FREIGHT_QTY_TO_BE_PAID="+String.valueOf(FREIGHT_QTY_TO_BE_PAID));
		sb.append(",FREIGHT_CLAIM_QTY="+String.valueOf(FREIGHT_CLAIM_QTY));
		sb.append(",LOAD_CTRL_NO="+LOAD_CTRL_NO);
		sb.append(",SPLIT_PO_FLAG="+SPLIT_PO_FLAG);
		sb.append(",TRUE_VENDOR="+TRUE_VENDOR);
		sb.append(",MANIFEST_HIST_MFG_NO="+MANIFEST_HIST_MFG_NO);
		sb.append(",NOTE1="+NOTE1);
		sb.append(",TRUE_VENDOR_SHIP_FROM="+String.valueOf(TRUE_VENDOR_SHIP_FROM));
		sb.append(",LAST_QTY_SENT_TO_DPR="+String.valueOf(LAST_QTY_SENT_TO_DPR));
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",V4PF_SVOP="+V4PF_SVOP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",ORIG_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(ORIG_UNLOAD_CHARGE_PER_ITEM));
		sb.append(",CONF_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(CONF_UNLOAD_CHARGE_PER_ITEM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PURCHASE_ORDER_DETAIL_UPDATE_6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MAJ_LINE_NO, other.SMS_MAJ_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MIN_LINE_NO, other.SMS_MIN_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public String V4PO;

				public String getV4PO () {
					return this.V4PO;
				}
				
			    public String V4ITEM;

				public String getV4ITEM () {
					return this.V4ITEM;
				}
				
			    public BigDecimal V4ROSQ;

				public BigDecimal getV4ROSQ () {
					return this.V4ROSQ;
				}
				
			    public String V4OWID;

				public String getV4OWID () {
					return this.V4OWID;
				}
				
			    public String V4ARCO;

				public String getV4ARCO () {
					return this.V4ARCO;
				}
				
			    public String V4MNPC;

				public String getV4MNPC () {
					return this.V4MNPC;
				}
				
			    public String V4MUPC;

				public String getV4MUPC () {
					return this.V4MUPC;
				}
				
			    public String V4ITDS;

				public String getV4ITDS () {
					return this.V4ITDS;
				}
				
			    public String V4VCAT;

				public String getV4VCAT () {
					return this.V4VCAT;
				}
				
			    public String V4VNBR;

				public String getV4VNBR () {
					return this.V4VNBR;
				}
				
			    public BigDecimal V4ADCD;

				public BigDecimal getV4ADCD () {
					return this.V4ADCD;
				}
				
			    public BigDecimal V4BYGP;

				public BigDecimal getV4BYGP () {
					return this.V4BYGP;
				}
				
			    public String V4CPVN;

				public String getV4CPVN () {
					return this.V4CPVN;
				}
				
			    public String V4PVND;

				public String getV4PVND () {
					return this.V4PVND;
				}
				
			    public String V4TERM;

				public String getV4TERM () {
					return this.V4TERM;
				}
				
			    public String V4POST;

				public String getV4POST () {
					return this.V4POST;
				}
				
			    public String V4POSS;

				public String getV4POSS () {
					return this.V4POSS;
				}
				
			    public String V4ORTY;

				public String getV4ORTY () {
					return this.V4ORTY;
				}
				
			    public String V4WCCD;

				public String getV4WCCD () {
					return this.V4WCCD;
				}
				
			    public String V4CFST;

				public String getV4CFST () {
					return this.V4CFST;
				}
				
			    public String V4WHSE;

				public String getV4WHSE () {
					return this.V4WHSE;
				}
				
			    public String V4VLPF;

				public String getV4VLPF () {
					return this.V4VLPF;
				}
				
			    public String V4VLPA;

				public String getV4VLPA () {
					return this.V4VLPA;
				}
				
			    public String V4POCH;

				public String getV4POCH () {
					return this.V4POCH;
				}
				
			    public String V4KMFG;

				public String getV4KMFG () {
					return this.V4KMFG;
				}
				
			    public String V4ASRF;

				public String getV4ASRF () {
					return this.V4ASRF;
				}
				
			    public String V4POFL;

				public String getV4POFL () {
					return this.V4POFL;
				}
				
			    public String V4MKMF;

				public String getV4MKMF () {
					return this.V4MKMF;
				}
				
			    public String V4FSCF;

				public String getV4FSCF () {
					return this.V4FSCF;
				}
				
			    public String V4MELN;

				public String getV4MELN () {
					return this.V4MELN;
				}
				
			    public String V4IPCF;

				public String getV4IPCF () {
					return this.V4IPCF;
				}
				
			    public BigDecimal V4ARBD;

				public BigDecimal getV4ARBD () {
					return this.V4ARBD;
				}
				
			    public BigDecimal V4PSRD;

				public BigDecimal getV4PSRD () {
					return this.V4PSRD;
				}
				
			    public BigDecimal V4ARDE;

				public BigDecimal getV4ARDE () {
					return this.V4ARDE;
				}
				
			    public BigDecimal V4AVDT;

				public BigDecimal getV4AVDT () {
					return this.V4AVDT;
				}
				
			    public BigDecimal V4AVTM;

				public BigDecimal getV4AVTM () {
					return this.V4AVTM;
				}
				
			    public BigDecimal V4ORDT;

				public BigDecimal getV4ORDT () {
					return this.V4ORDT;
				}
				
			    public BigDecimal V4PSOQ;

				public BigDecimal getV4PSOQ () {
					return this.V4PSOQ;
				}
				
			    public String V4CUNO;

				public String getV4CUNO () {
					return this.V4CUNO;
				}
				
			    public BigDecimal V4ORNO;

				public BigDecimal getV4ORNO () {
					return this.V4ORNO;
				}
				
			    public BigDecimal V4ODLN;

				public BigDecimal getV4ODLN () {
					return this.V4ODLN;
				}
				
			    public String V4ITCI;

				public String getV4ITCI () {
					return this.V4ITCI;
				}
				
			    public BigDecimal V4POOQ;

				public BigDecimal getV4POOQ () {
					return this.V4POOQ;
				}
				
			    public BigDecimal V4POFB;

				public BigDecimal getV4POFB () {
					return this.V4POFB;
				}
				
			    public BigDecimal V4POFR;

				public BigDecimal getV4POFR () {
					return this.V4POFR;
				}
				
			    public BigDecimal V4POAP;

				public BigDecimal getV4POAP () {
					return this.V4POAP;
				}
				
			    public BigDecimal V4IPUO;

				public BigDecimal getV4IPUO () {
					return this.V4IPUO;
				}
				
			    public String V4IPUT;

				public String getV4IPUT () {
					return this.V4IPUT;
				}
				
			    public BigDecimal V4IFRO;

				public BigDecimal getV4IFRO () {
					return this.V4IFRO;
				}
				
			    public String V4IFRT;

				public String getV4IFRT () {
					return this.V4IFRT;
				}
				
			    public BigDecimal V4BDPI;

				public BigDecimal getV4BDPI () {
					return this.V4BDPI;
				}
				
			    public BigDecimal V4PAPI;

				public BigDecimal getV4PAPI () {
					return this.V4PAPI;
				}
				
			    public BigDecimal V4POAL;

				public BigDecimal getV4POAL () {
					return this.V4POAL;
				}
				
			    public String V4POUM;

				public String getV4POUM () {
					return this.V4POUM;
				}
				
			    public BigDecimal V4OUCI;

				public BigDecimal getV4OUCI () {
					return this.V4OUCI;
				}
				
			    public BigDecimal V4OADP;

				public BigDecimal getV4OADP () {
					return this.V4OADP;
				}
				
			    public BigDecimal V4ACDM;

				public BigDecimal getV4ACDM () {
					return this.V4ACDM;
				}
				
			    public BigDecimal V4ACDF;

				public BigDecimal getV4ACDF () {
					return this.V4ACDF;
				}
				
			    public BigDecimal V4ALQY;

				public BigDecimal getV4ALQY () {
					return this.V4ALQY;
				}
				
			    public BigDecimal V4ALQS;

				public BigDecimal getV4ALQS () {
					return this.V4ALQS;
				}
				
			    public BigDecimal V4MRPR;

				public BigDecimal getV4MRPR () {
					return this.V4MRPR;
				}
				
			    public BigDecimal V4IUPR;

				public BigDecimal getV4IUPR () {
					return this.V4IUPR;
				}
				
			    public String V4FEGD;

				public String getV4FEGD () {
					return this.V4FEGD;
				}
				
			    public String V4VPUM;

				public String getV4VPUM () {
					return this.V4VPUM;
				}
				
			    public BigDecimal V4PCOQ;

				public BigDecimal getV4PCOQ () {
					return this.V4PCOQ;
				}
				
			    public BigDecimal V4PCFB;

				public BigDecimal getV4PCFB () {
					return this.V4PCFB;
				}
				
			    public BigDecimal V4PCFR;

				public BigDecimal getV4PCFR () {
					return this.V4PCFR;
				}
				
			    public BigDecimal V4PCAP;

				public BigDecimal getV4PCAP () {
					return this.V4PCAP;
				}
				
			    public BigDecimal V4CPAL;

				public BigDecimal getV4CPAL () {
					return this.V4CPAL;
				}
				
			    public String V4CPUT;

				public String getV4CPUT () {
					return this.V4CPUT;
				}
				
			    public BigDecimal V4CFRO;

				public BigDecimal getV4CFRO () {
					return this.V4CFRO;
				}
				
			    public String V4CFTO;

				public String getV4CFTO () {
					return this.V4CFTO;
				}
				
			    public BigDecimal V4CPAP;

				public BigDecimal getV4CPAP () {
					return this.V4CPAP;
				}
				
			    public BigDecimal V4CBDP;

				public BigDecimal getV4CBDP () {
					return this.V4CBDP;
				}
				
			    public BigDecimal V4COIN;

				public BigDecimal getV4COIN () {
					return this.V4COIN;
				}
				
			    public String V4CUOM;

				public String getV4CUOM () {
					return this.V4CUOM;
				}
				
			    public BigDecimal V4CUCI;

				public BigDecimal getV4CUCI () {
					return this.V4CUCI;
				}
				
			    public BigDecimal V4CADP;

				public BigDecimal getV4CADP () {
					return this.V4CADP;
				}
				
			    public BigDecimal V4CACM;

				public BigDecimal getV4CACM () {
					return this.V4CACM;
				}
				
			    public BigDecimal V4CACF;

				public BigDecimal getV4CACF () {
					return this.V4CACF;
				}
				
			    public BigDecimal V4CMRP;

				public BigDecimal getV4CMRP () {
					return this.V4CMRP;
				}
				
			    public String V4CMEF;

				public String getV4CMEF () {
					return this.V4CMEF;
				}
				
			    public String V4CFTP;

				public String getV4CFTP () {
					return this.V4CFTP;
				}
				
			    public String V4CPOF;

				public String getV4CPOF () {
					return this.V4CPOF;
				}
				
			    public BigDecimal V4QYSH;

				public BigDecimal getV4QYSH () {
					return this.V4QYSH;
				}
				
			    public BigDecimal V4QYDA;

				public BigDecimal getV4QYDA () {
					return this.V4QYDA;
				}
				
			    public BigDecimal V4RCQT;

				public BigDecimal getV4RCQT () {
					return this.V4RCQT;
				}
				
			    public BigDecimal V4VSQY;

				public BigDecimal getV4VSQY () {
					return this.V4VSQY;
				}
				
			    public String V4CSRC;

				public String getV4CSRC () {
					return this.V4CSRC;
				}
				
			    public String V4VSRC;

				public String getV4VSRC () {
					return this.V4VSRC;
				}
				
			    public BigDecimal V4RVWT;

				public BigDecimal getV4RVWT () {
					return this.V4RVWT;
				}
				
			    public BigDecimal V4RVWK;

				public BigDecimal getV4RVWK () {
					return this.V4RVWK;
				}
				
			    public BigDecimal V4DRWT;

				public BigDecimal getV4DRWT () {
					return this.V4DRWT;
				}
				
			    public BigDecimal V4DRWK;

				public BigDecimal getV4DRWK () {
					return this.V4DRWK;
				}
				
			    public String V4RPFF;

				public String getV4RPFF () {
					return this.V4RPFF;
				}
				
			    public String V4PPFS;

				public String getV4PPFS () {
					return this.V4PPFS;
				}
				
			    public String V4PMPS;

				public String getV4PMPS () {
					return this.V4PMPS;
				}
				
			    public BigDecimal V4MEAP;

				public BigDecimal getV4MEAP () {
					return this.V4MEAP;
				}
				
			    public BigDecimal V4MIDT;

				public BigDecimal getV4MIDT () {
					return this.V4MIDT;
				}
				
			    public String V4MINV;

				public String getV4MINV () {
					return this.V4MINV;
				}
				
			    public String V4MPDD;

				public String getV4MPDD () {
					return this.V4MPDD;
				}
				
			    public String V4MQDD;

				public String getV4MQDD () {
					return this.V4MQDD;
				}
				
			    public BigDecimal V4MRQT;

				public BigDecimal getV4MRQT () {
					return this.V4MRQT;
				}
				
			    public BigDecimal V4MRCW;

				public BigDecimal getV4MRCW () {
					return this.V4MRCW;
				}
				
			    public BigDecimal V4MRCK;

				public BigDecimal getV4MRCK () {
					return this.V4MRCK;
				}
				
			    public BigDecimal V4PFMM;

				public BigDecimal getV4PFMM () {
					return this.V4PFMM;
				}
				
			    public BigDecimal V4MCSD;

				public BigDecimal getV4MCSD () {
					return this.V4MCSD;
				}
				
			    public String V4FINV;

				public String getV4FINV () {
					return this.V4FINV;
				}
				
			    public BigDecimal V4FEAP;

				public BigDecimal getV4FEAP () {
					return this.V4FEAP;
				}
				
			    public BigDecimal V4FIDT;

				public BigDecimal getV4FIDT () {
					return this.V4FIDT;
				}
				
			    public BigDecimal V4FRCW;

				public BigDecimal getV4FRCW () {
					return this.V4FRCW;
				}
				
			    public BigDecimal V4FCAD;

				public BigDecimal getV4FCAD () {
					return this.V4FCAD;
				}
				
			    public BigDecimal V4FRQT;

				public BigDecimal getV4FRQT () {
					return this.V4FRQT;
				}
				
			    public BigDecimal V4PFMD;

				public BigDecimal getV4PFMD () {
					return this.V4PFMD;
				}
				
			    public BigDecimal V4FTCQ;

				public BigDecimal getV4FTCQ () {
					return this.V4FTCQ;
				}
				
			    public String V4LCN;

				public String getV4LCN () {
					return this.V4LCN;
				}
				
			    public String V4SPOF;

				public String getV4SPOF () {
					return this.V4SPOF;
				}
				
			    public BigDecimal V4PCLN;

				public BigDecimal getV4PCLN () {
					return this.V4PCLN;
				}
				
			    public String V4MFVN;

				public String getV4MFVN () {
					return this.V4MFVN;
				}
				
			    public String V4MFID;

				public String getV4MFID () {
					return this.V4MFID;
				}
				
			    public String V4ERRF;

				public String getV4ERRF () {
					return this.V4ERRF;
				}
				
			    public String V4IMCC;

				public String getV4IMCC () {
					return this.V4IMCC;
				}
				
			    public String V4COD1;

				public String getV4COD1 () {
					return this.V4COD1;
				}
				
			    public String V4NTYP;

				public String getV4NTYP () {
					return this.V4NTYP;
				}
				
			    public BigDecimal V4TDCD;

				public BigDecimal getV4TDCD () {
					return this.V4TDCD;
				}
				
			    public BigDecimal V4QTIF;

				public BigDecimal getV4QTIF () {
					return this.V4QTIF;
				}
				
			    public BigDecimal V4EADT;

				public BigDecimal getV4EADT () {
					return this.V4EADT;
				}
				
			    public BigDecimal V4EATM;

				public BigDecimal getV4EATM () {
					return this.V4EATM;
				}
				
			    public String V4EAID;

				public String getV4EAID () {
					return this.V4EAID;
				}
				
			    public BigDecimal V4MODT;

				public BigDecimal getV4MODT () {
					return this.V4MODT;
				}
				
			    public BigDecimal V4MOTM;

				public BigDecimal getV4MOTM () {
					return this.V4MOTM;
				}
				
			    public String V4MOID;

				public String getV4MOID () {
					return this.V4MOID;
				}
				
			    public String V4MOPG;

				public String getV4MOPG () {
					return this.V4MOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("V4PO="+V4PO);
		sb.append(",V4ITEM="+V4ITEM);
		sb.append(",V4ROSQ="+String.valueOf(V4ROSQ));
		sb.append(",V4OWID="+V4OWID);
		sb.append(",V4ARCO="+V4ARCO);
		sb.append(",V4MNPC="+V4MNPC);
		sb.append(",V4MUPC="+V4MUPC);
		sb.append(",V4ITDS="+V4ITDS);
		sb.append(",V4VCAT="+V4VCAT);
		sb.append(",V4VNBR="+V4VNBR);
		sb.append(",V4ADCD="+String.valueOf(V4ADCD));
		sb.append(",V4BYGP="+String.valueOf(V4BYGP));
		sb.append(",V4CPVN="+V4CPVN);
		sb.append(",V4PVND="+V4PVND);
		sb.append(",V4TERM="+V4TERM);
		sb.append(",V4POST="+V4POST);
		sb.append(",V4POSS="+V4POSS);
		sb.append(",V4ORTY="+V4ORTY);
		sb.append(",V4WCCD="+V4WCCD);
		sb.append(",V4CFST="+V4CFST);
		sb.append(",V4WHSE="+V4WHSE);
		sb.append(",V4VLPF="+V4VLPF);
		sb.append(",V4VLPA="+V4VLPA);
		sb.append(",V4POCH="+V4POCH);
		sb.append(",V4KMFG="+V4KMFG);
		sb.append(",V4ASRF="+V4ASRF);
		sb.append(",V4POFL="+V4POFL);
		sb.append(",V4MKMF="+V4MKMF);
		sb.append(",V4FSCF="+V4FSCF);
		sb.append(",V4MELN="+V4MELN);
		sb.append(",V4IPCF="+V4IPCF);
		sb.append(",V4ARBD="+String.valueOf(V4ARBD));
		sb.append(",V4PSRD="+String.valueOf(V4PSRD));
		sb.append(",V4ARDE="+String.valueOf(V4ARDE));
		sb.append(",V4AVDT="+String.valueOf(V4AVDT));
		sb.append(",V4AVTM="+String.valueOf(V4AVTM));
		sb.append(",V4ORDT="+String.valueOf(V4ORDT));
		sb.append(",V4PSOQ="+String.valueOf(V4PSOQ));
		sb.append(",V4CUNO="+V4CUNO);
		sb.append(",V4ORNO="+String.valueOf(V4ORNO));
		sb.append(",V4ODLN="+String.valueOf(V4ODLN));
		sb.append(",V4ITCI="+V4ITCI);
		sb.append(",V4POOQ="+String.valueOf(V4POOQ));
		sb.append(",V4POFB="+String.valueOf(V4POFB));
		sb.append(",V4POFR="+String.valueOf(V4POFR));
		sb.append(",V4POAP="+String.valueOf(V4POAP));
		sb.append(",V4IPUO="+String.valueOf(V4IPUO));
		sb.append(",V4IPUT="+V4IPUT);
		sb.append(",V4IFRO="+String.valueOf(V4IFRO));
		sb.append(",V4IFRT="+V4IFRT);
		sb.append(",V4BDPI="+String.valueOf(V4BDPI));
		sb.append(",V4PAPI="+String.valueOf(V4PAPI));
		sb.append(",V4POAL="+String.valueOf(V4POAL));
		sb.append(",V4POUM="+V4POUM);
		sb.append(",V4OUCI="+String.valueOf(V4OUCI));
		sb.append(",V4OADP="+String.valueOf(V4OADP));
		sb.append(",V4ACDM="+String.valueOf(V4ACDM));
		sb.append(",V4ACDF="+String.valueOf(V4ACDF));
		sb.append(",V4ALQY="+String.valueOf(V4ALQY));
		sb.append(",V4ALQS="+String.valueOf(V4ALQS));
		sb.append(",V4MRPR="+String.valueOf(V4MRPR));
		sb.append(",V4IUPR="+String.valueOf(V4IUPR));
		sb.append(",V4FEGD="+V4FEGD);
		sb.append(",V4VPUM="+V4VPUM);
		sb.append(",V4PCOQ="+String.valueOf(V4PCOQ));
		sb.append(",V4PCFB="+String.valueOf(V4PCFB));
		sb.append(",V4PCFR="+String.valueOf(V4PCFR));
		sb.append(",V4PCAP="+String.valueOf(V4PCAP));
		sb.append(",V4CPAL="+String.valueOf(V4CPAL));
		sb.append(",V4CPUT="+V4CPUT);
		sb.append(",V4CFRO="+String.valueOf(V4CFRO));
		sb.append(",V4CFTO="+V4CFTO);
		sb.append(",V4CPAP="+String.valueOf(V4CPAP));
		sb.append(",V4CBDP="+String.valueOf(V4CBDP));
		sb.append(",V4COIN="+String.valueOf(V4COIN));
		sb.append(",V4CUOM="+V4CUOM);
		sb.append(",V4CUCI="+String.valueOf(V4CUCI));
		sb.append(",V4CADP="+String.valueOf(V4CADP));
		sb.append(",V4CACM="+String.valueOf(V4CACM));
		sb.append(",V4CACF="+String.valueOf(V4CACF));
		sb.append(",V4CMRP="+String.valueOf(V4CMRP));
		sb.append(",V4CMEF="+V4CMEF);
		sb.append(",V4CFTP="+V4CFTP);
		sb.append(",V4CPOF="+V4CPOF);
		sb.append(",V4QYSH="+String.valueOf(V4QYSH));
		sb.append(",V4QYDA="+String.valueOf(V4QYDA));
		sb.append(",V4RCQT="+String.valueOf(V4RCQT));
		sb.append(",V4VSQY="+String.valueOf(V4VSQY));
		sb.append(",V4CSRC="+V4CSRC);
		sb.append(",V4VSRC="+V4VSRC);
		sb.append(",V4RVWT="+String.valueOf(V4RVWT));
		sb.append(",V4RVWK="+String.valueOf(V4RVWK));
		sb.append(",V4DRWT="+String.valueOf(V4DRWT));
		sb.append(",V4DRWK="+String.valueOf(V4DRWK));
		sb.append(",V4RPFF="+V4RPFF);
		sb.append(",V4PPFS="+V4PPFS);
		sb.append(",V4PMPS="+V4PMPS);
		sb.append(",V4MEAP="+String.valueOf(V4MEAP));
		sb.append(",V4MIDT="+String.valueOf(V4MIDT));
		sb.append(",V4MINV="+V4MINV);
		sb.append(",V4MPDD="+V4MPDD);
		sb.append(",V4MQDD="+V4MQDD);
		sb.append(",V4MRQT="+String.valueOf(V4MRQT));
		sb.append(",V4MRCW="+String.valueOf(V4MRCW));
		sb.append(",V4MRCK="+String.valueOf(V4MRCK));
		sb.append(",V4PFMM="+String.valueOf(V4PFMM));
		sb.append(",V4MCSD="+String.valueOf(V4MCSD));
		sb.append(",V4FINV="+V4FINV);
		sb.append(",V4FEAP="+String.valueOf(V4FEAP));
		sb.append(",V4FIDT="+String.valueOf(V4FIDT));
		sb.append(",V4FRCW="+String.valueOf(V4FRCW));
		sb.append(",V4FCAD="+String.valueOf(V4FCAD));
		sb.append(",V4FRQT="+String.valueOf(V4FRQT));
		sb.append(",V4PFMD="+String.valueOf(V4PFMD));
		sb.append(",V4FTCQ="+String.valueOf(V4FTCQ));
		sb.append(",V4LCN="+V4LCN);
		sb.append(",V4SPOF="+V4SPOF);
		sb.append(",V4PCLN="+String.valueOf(V4PCLN));
		sb.append(",V4MFVN="+V4MFVN);
		sb.append(",V4MFID="+V4MFID);
		sb.append(",V4ERRF="+V4ERRF);
		sb.append(",V4IMCC="+V4IMCC);
		sb.append(",V4COD1="+V4COD1);
		sb.append(",V4NTYP="+V4NTYP);
		sb.append(",V4TDCD="+String.valueOf(V4TDCD));
		sb.append(",V4QTIF="+String.valueOf(V4QTIF));
		sb.append(",V4EADT="+String.valueOf(V4EADT));
		sb.append(",V4EATM="+String.valueOf(V4EATM));
		sb.append(",V4EAID="+V4EAID);
		sb.append(",V4MODT="+String.valueOf(V4MODT));
		sb.append(",V4MOTM="+String.valueOf(V4MOTM));
		sb.append(",V4MOID="+V4MOID);
		sb.append(",V4MOPG="+V4MOPG);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
PURCHASE_ORDER_DETAIL_UPDATE_6Struct PURCHASE_ORDER_DETAIL_UPDATE_6 = new PURCHASE_ORDER_DETAIL_UPDATE_6Struct();





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_6");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PURCHASE_ORDER_DETAIL_UPDATE_6");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("PURCHASE_ORDER_DETAIL");
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("PURCHASE_ORDER_DETAIL");
}

        int updateKeyCount_tDBOutput_6 = 4;
        if(updateKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_6 == 115 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_6 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_6 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_6 = context.GIM_Password; 

    String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;

    conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6,dbUser_tDBOutput_6,dbPwd_tDBOutput_6);
	
	resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
        conn_tDBOutput_6.setAutoCommit(false);
        int commitEvery_tDBOutput_6 = 1;
        int commitCounter_tDBOutput_6 = 0;


   int batchSize_tDBOutput_6 = 1;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
	    String update_tDBOutput_6 = "UPDATE \"" + tableName_tDBOutput_6 + "\" SET \"VENDOR_CLASSIFICATION\" = ?,\"SHIPPING_POINT_SHIP_FROM\" = ?,\"BUYING_GROUP\" = ?,\"CUST_PREF_VENDOR\" = ?,\"SOURCE_VENDOR\" = ?,\"VENDOR_TERMS\" = ?,\"PO_PRIMARY_STATUS\" = ?,\"PO_SECONDARY_STATUS\" = ?,\"PO_TYPE\" = ?,\"WHSE_CHANGE_CODE\" = ?,\"CONF_STATUS\" = ?,\"PO_VALID_PRICING_FLAG\" = ?,\"PO_VALID_PRICING_APPROVAL\" = ?,\"PO_CHANGED_FLAG\" = ?,\"ALLOC_SCHEDULED_RECEIPT_FLAG\" = ?,\"PRICE_OVERRIDE_FLAG\" = ?,\"MARKED_BY_MERCHANDISER_FLAG\" = ?,\"FAILED_SCORECARD_FLAG\" = ?,\"MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CALENDAR_DATE_ANTICIPATED_RECEIPT\" = ?,\"CALENDAR_DATE_SCHEDULED_RECEIPT_DATE\" = ?,\"BUSINESS_DATE_ANTICIPATED_RECEIPT\" = ?,\"AVAIL_TIMESTAMP\" = ?,\"BUSINESS_ORDER_DATE\" = ?,\"SUGGESTED_ORDER_QTY\" = ?,\"SHIP_TO_CUST\" = ?,\"CUST_ORDER_NO\" = ?,\"CUST_ORDER_LINE_NO\" = ?,\"ORIG_ORDER_QTY\" = ?,\"ORIG_FOB_PER_ITEM\" = ?,\"ORIG_FREIGHT_PER_ITEM\" = ?,\"ORIG_AP_PER_ITEM\" = ?,\"ORIG_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"ORIG_FREIGHT_RATE_OVERRIDE\" = ?,\"ORIG_FREIGHT_TYPE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_PER_ITEM\" = ?,\"ORIG_OFF_INV_ALLOW\" = ?,\"ORIG_UOM\" = ?,\"ORIG_ALT_DELV_PRICE\" = ?,\"ORIG_MERCH_ALLOW_CHARGE\" = ?,\"ORIG_FREIGHT_ALLOW_CHARGE\" = ?,\"ALLOC_QTY\" = ?,\"ALLOC_QTY_SPLITS\" = ?,\"INV_UNIT_PRICE\" = ?,\"FREE_GOODS_FLAG\" = ?,\"VENDOR_PRICE_LIST_UOM\" = ?,\"CONFIRMED_ORDER_QTY\" = ?,\"CONFIRMED_FOB_PER_ITEM\" = ?,\"CONFIRMED_FREIGHT_PER_ITEM\" = ?,\"CONFIRMED_AP_PER_ITEM\" = ?,\"CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_RATE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_TYPE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_PER_ITEM\" = ?,\"CONFIRMED_OFF_INV_ALLOW\" = ?,\"CONFIRMED_UOM\" = ?,\"CONFIRMED_ALT_DELV_PRICE\" = ?,\"CONF_DIST_MERCH_ALLOW_CHARGE\" = ?,\"CONF_DIST_FREIGHT_ALLOW_CHARGE\" = ?,\"CONFIRMED_MRPT\" = ?,\"CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CONFIRMED_PRICE_OVERRIDE_FLAG\" = ?,\"CARRIER_SHORT_QTY\" = ?,\"RECVD_DAMAGED_ACCEPTED_QTY\" = ?,\"RECVD_QTY\" = ?,\"VENDOR_SHORT_QTY\" = ?,\"CARRIER_SHORT_REASON_CODE\" = ?,\"VENDOR_SHORT_REASON_CODE\" = ?,\"RECVD_WGT\" = ?,\"DAMAGED_RECVD_WGT\" = ?,\"REVISED_PROFORMA_FLAG\" = ?,\"FREIGHT_PROFORMA_STATUS\" = ?,\"MERCH_PROFORMA_STATUS\" = ?,\"MERCH_EXT_AMT_TOBE_PAID\" = ?,\"MERCH_INV_DATE\" = ?,\"MERCH_INV_NO\" = ?,\"MERCH_PRICE_DIFF_STATUS\" = ?,\"MERCH_QTY_DIFF_STATUS\" = ?,\"MERCH_QTY_TO_BE_PAID\" = ?,\"MERCH_WGT_TO_BE_PAID\" = ?,\"MERCH_CASH_DISC\" = ?,\"FREIGHT_INV_NO\" = ?,\"FREIGHT_EXT_AMT_TO_BE_PAID\" = ?,\"FREIGHT_INV_DATE\" = ?,\"FREIGHT_CHARGE_TO_BE_PAID\" = ?,\"FREIGHT_CASH_DISC\" = ?,\"FREIGHT_QTY_TO_BE_PAID\" = ?,\"FREIGHT_CLAIM_QTY\" = ?,\"LOAD_CTRL_NO\" = ?,\"SPLIT_PO_FLAG\" = ?,\"TRUE_VENDOR\" = ?,\"MANIFEST_HIST_MFG_NO\" = ?,\"NOTE1\" = ?,\"TRUE_VENDOR_SHIP_FROM\" = ?,\"LAST_QTY_SENT_TO_DPR\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"IS_ACTIVE\" = ?,\"V4PF_SVOP\" = ?,\"UPDATED_USER_ID\" = ?,\"UPDATED_PROGRAM_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"ORIG_UNLOAD_CHARGE_PER_ITEM\" = ?,\"CONF_UNLOAD_CHARGE_PER_ITEM\" = ? WHERE \"SITE_ID\" = ? AND \"PURCHASE_ORDER_NO\" = ? AND \"SMS_MAJ_LINE_NO\" = ? AND \"SMS_MIN_LINE_NO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(update_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
	String V4ARBD;
	String V4PSRD;
	String V4ARDE;
	String V4MIDT;
	String V4FIDT;
	String V4ORDT;
	String AVAIL_TIMESTAMP;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
PURCHASE_ORDER_DETAIL_UPDATE_6Struct PURCHASE_ORDER_DETAIL_UPDATE_6_tmp = new PURCHASE_ORDER_DETAIL_UPDATE_6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_6");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_6 = context.SUS_Password; 
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				  
				String url_tDBInput_6 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT \n  IMHBV4PF.V4PO, \n  IMHBV4PF.V4ITEM, \n  IMHBV4PF.V4ROSQ, \n  IMHBV4PF.V4OWID, \n  IMHBV4PF.V4ARCO, \n  IMHBV"
+"4PF.V4MNPC, \n  IMHBV4PF.V4MUPC, \n  IMHBV4PF.V4ITDS, \n  IMHBV4PF.V4VCAT, \n  IMHBV4PF.V4VNBR, \n  IMHBV4PF.V4ADCD, \n "
+" IMHBV4PF.V4BYGP, \n  IMHBV4PF.V4CPVN, \n  IMHBV4PF.V4PVND, \n  IMHBV4PF.V4TERM, \n  IMHBV4PF.V4POST, \n  IMHBV4PF.V4POS"
+"S, \n  IMHBV4PF.V4ORTY, \n  IMHBV4PF.V4WCCD, \n  IMHBV4PF.V4CFST, \n  IMHBV4PF.V4WHSE, \n  IMHBV4PF.V4VLPF, \n  IMHBV4PF"
+".V4VLPA, \n  IMHBV4PF.V4POCH, \n  IMHBV4PF.V4KMFG, \n  IMHBV4PF.V4ASRF, \n  IMHBV4PF.V4POFL, \n  IMHBV4PF.V4MKMF, \n  IM"
+"HBV4PF.V4FSCF, \n  IMHBV4PF.V4MELN, \n  IMHBV4PF.V4IPCF, \n  IMHBV4PF.V4ARBD, \n  IMHBV4PF.V4PSRD, \n  IMHBV4PF.V4ARDE, "
+"\n  IMHBV4PF.V4AVDT, \n  IMHBV4PF.V4AVTM, \n  IMHBV4PF.V4ORDT, \n  IMHBV4PF.V4PSOQ, \n  IMHBV4PF.V4CUNO, \n  IMHBV4PF.V4"
+"ORNO, \n  IMHBV4PF.V4ODLN, \n  IMHBV4PF.V4ITCI, \n  IMHBV4PF.V4POOQ, \n  IMHBV4PF.V4POFB, \n  IMHBV4PF.V4POFR, \n  IMHBV"
+"4PF.V4POAP, \n  IMHBV4PF.V4IPUO, \n  IMHBV4PF.V4IPUT, \n  IMHBV4PF.V4IFRO, \n  IMHBV4PF.V4IFRT, \n  IMHBV4PF.V4BDPI, \n "
+" IMHBV4PF.V4PAPI, \n  IMHBV4PF.V4POAL, \n  IMHBV4PF.V4POUM, \n  IMHBV4PF.V4OUCI, \n  IMHBV4PF.V4OADP, \n  IMHBV4PF.V4ACD"
+"M, \n  IMHBV4PF.V4ACDF, \n  IMHBV4PF.V4ALQY, \n  IMHBV4PF.V4ALQS, \n  IMHBV4PF.V4MRPR, \n  IMHBV4PF.V4IUPR, \n  IMHBV4PF"
+".V4FEGD, \n  IMHBV4PF.V4VPUM, \n  IMHBV4PF.V4PCOQ, \n  IMHBV4PF.V4PCFB, \n  IMHBV4PF.V4PCFR, \n  IMHBV4PF.V4PCAP, \n  IM"
+"HBV4PF.V4CPAL, \n  IMHBV4PF.V4CPUT, \n  IMHBV4PF.V4CFRO, \n  IMHBV4PF.V4CFTO, \n  IMHBV4PF.V4CPAP, \n  IMHBV4PF.V4CBDP, "
+"\n  IMHBV4PF.V4COIN, \n  IMHBV4PF.V4CUOM, \n  IMHBV4PF.V4CUCI, \n  IMHBV4PF.V4CADP, \n  IMHBV4PF.V4CACM, \n  IMHBV4PF.V4"
+"CACF, \n  IMHBV4PF.V4CMRP, \n  IMHBV4PF.V4CMEF, \n  IMHBV4PF.V4CFTP, \n  IMHBV4PF.V4CPOF, \n  IMHBV4PF.V4QYSH, \n  IMHBV"
+"4PF.V4QYDA, \n  IMHBV4PF.V4RCQT, \n  IMHBV4PF.V4VSQY, \n  IMHBV4PF.V4CSRC, \n  IMHBV4PF.V4VSRC, \n  IMHBV4PF.V4RVWT, \n "
+" IMHBV4PF.V4RVWK, \n  IMHBV4PF.V4DRWT, \n  IMHBV4PF.V4DRWK, \n  IMHBV4PF.V4RPFF, \n  IMHBV4PF.V4PPFS, \n  IMHBV4PF.V4PMP"
+"S, \n  IMHBV4PF.V4MEAP, \n  IMHBV4PF.V4MIDT, \n  IMHBV4PF.V4MINV, \n  IMHBV4PF.V4MPDD, \n  IMHBV4PF.V4MQDD, \n  IMHBV4PF"
+".V4MRQT, \n  IMHBV4PF.V4MRCW, \n  IMHBV4PF.V4MRCK, \n  IMHBV4PF.V4PFMM, \n  IMHBV4PF.V4MCSD, \n  IMHBV4PF.V4FINV, \n  IM"
+"HBV4PF.V4FEAP, \n  IMHBV4PF.V4FIDT, \n  IMHBV4PF.V4FRCW, \n  IMHBV4PF.V4FCAD, \n  IMHBV4PF.V4FRQT, \n  IMHBV4PF.V4PFMD, "
+"\n  IMHBV4PF.V4FTCQ, \n  IMHBV4PF.V4LCN, \n  IMHBV4PF.V4SPOF, \n  IMHBV4PF.V4PCLN, \n  IMHBV4PF.V4MFVN, \n  IMHBV4PF.V4M"
+"FID, \n  IMHBV4PF.V4ERRF, \n  IMHBV4PF.V4IMCC, \n  IMHBV4PF.V4COD1, \n  IMHBV4PF.V4NTYP, \n  IMHBV4PF.V4TDCD, \n  IMHBV4"
+"PF.V4QTIF, \n  IMHBV4PF.V4EADT, \n  IMHBV4PF.V4EATM, \n  IMHBV4PF.V4EAID, \n  IMHBV4PF.V4MODT, \n  IMHBV4PF.V4MOTM, \n  "
+"IMHBV4PF.V4MOID, \n  IMHBV4PF.V4MOPG\nFROM IMHBV4PF WHERE IMHBV4PF.V4EADT BETWEEN 20221001 AND 20221231 \nORDER BY IMHBV"
+"4PF.V4EADT DESC";
		    

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row8.V4PO = null;
							} else {
	                         		
        	row8.V4PO = routines.system.JDBCUtil.getString(rs_tDBInput_6, 1, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row8.V4ITEM = null;
							} else {
	                         		
        	row8.V4ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row8.V4ROSQ = null;
							} else {
		                          
            row8.V4ROSQ = rs_tDBInput_6.getBigDecimal(3);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row8.V4OWID = null;
							} else {
	                         		
        	row8.V4OWID = routines.system.JDBCUtil.getString(rs_tDBInput_6, 4, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row8.V4ARCO = null;
							} else {
	                         		
        	row8.V4ARCO = routines.system.JDBCUtil.getString(rs_tDBInput_6, 5, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 6) {
								row8.V4MNPC = null;
							} else {
	                         		
        	row8.V4MNPC = routines.system.JDBCUtil.getString(rs_tDBInput_6, 6, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 7) {
								row8.V4MUPC = null;
							} else {
	                         		
        	row8.V4MUPC = routines.system.JDBCUtil.getString(rs_tDBInput_6, 7, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 8) {
								row8.V4ITDS = null;
							} else {
	                         		
        	row8.V4ITDS = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 9) {
								row8.V4VCAT = null;
							} else {
	                         		
        	row8.V4VCAT = routines.system.JDBCUtil.getString(rs_tDBInput_6, 9, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 10) {
								row8.V4VNBR = null;
							} else {
	                         		
        	row8.V4VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_6, 10, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 11) {
								row8.V4ADCD = null;
							} else {
		                          
            row8.V4ADCD = rs_tDBInput_6.getBigDecimal(11);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 12) {
								row8.V4BYGP = null;
							} else {
		                          
            row8.V4BYGP = rs_tDBInput_6.getBigDecimal(12);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 13) {
								row8.V4CPVN = null;
							} else {
	                         		
        	row8.V4CPVN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 13, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 14) {
								row8.V4PVND = null;
							} else {
	                         		
        	row8.V4PVND = routines.system.JDBCUtil.getString(rs_tDBInput_6, 14, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 15) {
								row8.V4TERM = null;
							} else {
	                         		
        	row8.V4TERM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 15, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 16) {
								row8.V4POST = null;
							} else {
	                         		
        	row8.V4POST = routines.system.JDBCUtil.getString(rs_tDBInput_6, 16, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 17) {
								row8.V4POSS = null;
							} else {
	                         		
        	row8.V4POSS = routines.system.JDBCUtil.getString(rs_tDBInput_6, 17, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 18) {
								row8.V4ORTY = null;
							} else {
	                         		
        	row8.V4ORTY = routines.system.JDBCUtil.getString(rs_tDBInput_6, 18, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 19) {
								row8.V4WCCD = null;
							} else {
	                         		
        	row8.V4WCCD = routines.system.JDBCUtil.getString(rs_tDBInput_6, 19, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 20) {
								row8.V4CFST = null;
							} else {
	                         		
        	row8.V4CFST = routines.system.JDBCUtil.getString(rs_tDBInput_6, 20, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 21) {
								row8.V4WHSE = null;
							} else {
	                         		
        	row8.V4WHSE = routines.system.JDBCUtil.getString(rs_tDBInput_6, 21, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 22) {
								row8.V4VLPF = null;
							} else {
	                         		
        	row8.V4VLPF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 22, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 23) {
								row8.V4VLPA = null;
							} else {
	                         		
        	row8.V4VLPA = routines.system.JDBCUtil.getString(rs_tDBInput_6, 23, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 24) {
								row8.V4POCH = null;
							} else {
	                         		
        	row8.V4POCH = routines.system.JDBCUtil.getString(rs_tDBInput_6, 24, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 25) {
								row8.V4KMFG = null;
							} else {
	                         		
        	row8.V4KMFG = routines.system.JDBCUtil.getString(rs_tDBInput_6, 25, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 26) {
								row8.V4ASRF = null;
							} else {
	                         		
        	row8.V4ASRF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 26, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 27) {
								row8.V4POFL = null;
							} else {
	                         		
        	row8.V4POFL = routines.system.JDBCUtil.getString(rs_tDBInput_6, 27, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 28) {
								row8.V4MKMF = null;
							} else {
	                         		
        	row8.V4MKMF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 28, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 29) {
								row8.V4FSCF = null;
							} else {
	                         		
        	row8.V4FSCF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 29, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 30) {
								row8.V4MELN = null;
							} else {
	                         		
        	row8.V4MELN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 30, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 31) {
								row8.V4IPCF = null;
							} else {
	                         		
        	row8.V4IPCF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 31, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 32) {
								row8.V4ARBD = null;
							} else {
		                          
            row8.V4ARBD = rs_tDBInput_6.getBigDecimal(32);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 33) {
								row8.V4PSRD = null;
							} else {
		                          
            row8.V4PSRD = rs_tDBInput_6.getBigDecimal(33);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 34) {
								row8.V4ARDE = null;
							} else {
		                          
            row8.V4ARDE = rs_tDBInput_6.getBigDecimal(34);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 35) {
								row8.V4AVDT = null;
							} else {
		                          
            row8.V4AVDT = rs_tDBInput_6.getBigDecimal(35);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 36) {
								row8.V4AVTM = null;
							} else {
		                          
            row8.V4AVTM = rs_tDBInput_6.getBigDecimal(36);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 37) {
								row8.V4ORDT = null;
							} else {
		                          
            row8.V4ORDT = rs_tDBInput_6.getBigDecimal(37);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 38) {
								row8.V4PSOQ = null;
							} else {
		                          
            row8.V4PSOQ = rs_tDBInput_6.getBigDecimal(38);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 39) {
								row8.V4CUNO = null;
							} else {
	                         		
        	row8.V4CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_6, 39, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 40) {
								row8.V4ORNO = null;
							} else {
		                          
            row8.V4ORNO = rs_tDBInput_6.getBigDecimal(40);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 41) {
								row8.V4ODLN = null;
							} else {
		                          
            row8.V4ODLN = rs_tDBInput_6.getBigDecimal(41);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 42) {
								row8.V4ITCI = null;
							} else {
	                         		
        	row8.V4ITCI = routines.system.JDBCUtil.getString(rs_tDBInput_6, 42, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 43) {
								row8.V4POOQ = null;
							} else {
		                          
            row8.V4POOQ = rs_tDBInput_6.getBigDecimal(43);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 44) {
								row8.V4POFB = null;
							} else {
		                          
            row8.V4POFB = rs_tDBInput_6.getBigDecimal(44);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 45) {
								row8.V4POFR = null;
							} else {
		                          
            row8.V4POFR = rs_tDBInput_6.getBigDecimal(45);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 46) {
								row8.V4POAP = null;
							} else {
		                          
            row8.V4POAP = rs_tDBInput_6.getBigDecimal(46);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 47) {
								row8.V4IPUO = null;
							} else {
		                          
            row8.V4IPUO = rs_tDBInput_6.getBigDecimal(47);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 48) {
								row8.V4IPUT = null;
							} else {
	                         		
        	row8.V4IPUT = routines.system.JDBCUtil.getString(rs_tDBInput_6, 48, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 49) {
								row8.V4IFRO = null;
							} else {
		                          
            row8.V4IFRO = rs_tDBInput_6.getBigDecimal(49);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 50) {
								row8.V4IFRT = null;
							} else {
	                         		
        	row8.V4IFRT = routines.system.JDBCUtil.getString(rs_tDBInput_6, 50, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 51) {
								row8.V4BDPI = null;
							} else {
		                          
            row8.V4BDPI = rs_tDBInput_6.getBigDecimal(51);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 52) {
								row8.V4PAPI = null;
							} else {
		                          
            row8.V4PAPI = rs_tDBInput_6.getBigDecimal(52);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 53) {
								row8.V4POAL = null;
							} else {
		                          
            row8.V4POAL = rs_tDBInput_6.getBigDecimal(53);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 54) {
								row8.V4POUM = null;
							} else {
	                         		
        	row8.V4POUM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 54, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 55) {
								row8.V4OUCI = null;
							} else {
		                          
            row8.V4OUCI = rs_tDBInput_6.getBigDecimal(55);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 56) {
								row8.V4OADP = null;
							} else {
		                          
            row8.V4OADP = rs_tDBInput_6.getBigDecimal(56);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 57) {
								row8.V4ACDM = null;
							} else {
		                          
            row8.V4ACDM = rs_tDBInput_6.getBigDecimal(57);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 58) {
								row8.V4ACDF = null;
							} else {
		                          
            row8.V4ACDF = rs_tDBInput_6.getBigDecimal(58);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 59) {
								row8.V4ALQY = null;
							} else {
		                          
            row8.V4ALQY = rs_tDBInput_6.getBigDecimal(59);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 60) {
								row8.V4ALQS = null;
							} else {
		                          
            row8.V4ALQS = rs_tDBInput_6.getBigDecimal(60);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 61) {
								row8.V4MRPR = null;
							} else {
		                          
            row8.V4MRPR = rs_tDBInput_6.getBigDecimal(61);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 62) {
								row8.V4IUPR = null;
							} else {
		                          
            row8.V4IUPR = rs_tDBInput_6.getBigDecimal(62);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 63) {
								row8.V4FEGD = null;
							} else {
	                         		
        	row8.V4FEGD = routines.system.JDBCUtil.getString(rs_tDBInput_6, 63, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 64) {
								row8.V4VPUM = null;
							} else {
	                         		
        	row8.V4VPUM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 64, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 65) {
								row8.V4PCOQ = null;
							} else {
		                          
            row8.V4PCOQ = rs_tDBInput_6.getBigDecimal(65);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 66) {
								row8.V4PCFB = null;
							} else {
		                          
            row8.V4PCFB = rs_tDBInput_6.getBigDecimal(66);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 67) {
								row8.V4PCFR = null;
							} else {
		                          
            row8.V4PCFR = rs_tDBInput_6.getBigDecimal(67);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 68) {
								row8.V4PCAP = null;
							} else {
		                          
            row8.V4PCAP = rs_tDBInput_6.getBigDecimal(68);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 69) {
								row8.V4CPAL = null;
							} else {
		                          
            row8.V4CPAL = rs_tDBInput_6.getBigDecimal(69);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 70) {
								row8.V4CPUT = null;
							} else {
	                         		
        	row8.V4CPUT = routines.system.JDBCUtil.getString(rs_tDBInput_6, 70, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 71) {
								row8.V4CFRO = null;
							} else {
		                          
            row8.V4CFRO = rs_tDBInput_6.getBigDecimal(71);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 72) {
								row8.V4CFTO = null;
							} else {
	                         		
        	row8.V4CFTO = routines.system.JDBCUtil.getString(rs_tDBInput_6, 72, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 73) {
								row8.V4CPAP = null;
							} else {
		                          
            row8.V4CPAP = rs_tDBInput_6.getBigDecimal(73);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 74) {
								row8.V4CBDP = null;
							} else {
		                          
            row8.V4CBDP = rs_tDBInput_6.getBigDecimal(74);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 75) {
								row8.V4COIN = null;
							} else {
		                          
            row8.V4COIN = rs_tDBInput_6.getBigDecimal(75);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 76) {
								row8.V4CUOM = null;
							} else {
	                         		
        	row8.V4CUOM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 76, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 77) {
								row8.V4CUCI = null;
							} else {
		                          
            row8.V4CUCI = rs_tDBInput_6.getBigDecimal(77);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 78) {
								row8.V4CADP = null;
							} else {
		                          
            row8.V4CADP = rs_tDBInput_6.getBigDecimal(78);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 79) {
								row8.V4CACM = null;
							} else {
		                          
            row8.V4CACM = rs_tDBInput_6.getBigDecimal(79);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 80) {
								row8.V4CACF = null;
							} else {
		                          
            row8.V4CACF = rs_tDBInput_6.getBigDecimal(80);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 81) {
								row8.V4CMRP = null;
							} else {
		                          
            row8.V4CMRP = rs_tDBInput_6.getBigDecimal(81);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 82) {
								row8.V4CMEF = null;
							} else {
	                         		
        	row8.V4CMEF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 82, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 83) {
								row8.V4CFTP = null;
							} else {
	                         		
        	row8.V4CFTP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 83, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 84) {
								row8.V4CPOF = null;
							} else {
	                         		
        	row8.V4CPOF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 84, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 85) {
								row8.V4QYSH = null;
							} else {
		                          
            row8.V4QYSH = rs_tDBInput_6.getBigDecimal(85);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 86) {
								row8.V4QYDA = null;
							} else {
		                          
            row8.V4QYDA = rs_tDBInput_6.getBigDecimal(86);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 87) {
								row8.V4RCQT = null;
							} else {
		                          
            row8.V4RCQT = rs_tDBInput_6.getBigDecimal(87);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 88) {
								row8.V4VSQY = null;
							} else {
		                          
            row8.V4VSQY = rs_tDBInput_6.getBigDecimal(88);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 89) {
								row8.V4CSRC = null;
							} else {
	                         		
        	row8.V4CSRC = routines.system.JDBCUtil.getString(rs_tDBInput_6, 89, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 90) {
								row8.V4VSRC = null;
							} else {
	                         		
        	row8.V4VSRC = routines.system.JDBCUtil.getString(rs_tDBInput_6, 90, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 91) {
								row8.V4RVWT = null;
							} else {
		                          
            row8.V4RVWT = rs_tDBInput_6.getBigDecimal(91);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 92) {
								row8.V4RVWK = null;
							} else {
		                          
            row8.V4RVWK = rs_tDBInput_6.getBigDecimal(92);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 93) {
								row8.V4DRWT = null;
							} else {
		                          
            row8.V4DRWT = rs_tDBInput_6.getBigDecimal(93);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 94) {
								row8.V4DRWK = null;
							} else {
		                          
            row8.V4DRWK = rs_tDBInput_6.getBigDecimal(94);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 95) {
								row8.V4RPFF = null;
							} else {
	                         		
        	row8.V4RPFF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 95, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 96) {
								row8.V4PPFS = null;
							} else {
	                         		
        	row8.V4PPFS = routines.system.JDBCUtil.getString(rs_tDBInput_6, 96, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 97) {
								row8.V4PMPS = null;
							} else {
	                         		
        	row8.V4PMPS = routines.system.JDBCUtil.getString(rs_tDBInput_6, 97, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 98) {
								row8.V4MEAP = null;
							} else {
		                          
            row8.V4MEAP = rs_tDBInput_6.getBigDecimal(98);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 99) {
								row8.V4MIDT = null;
							} else {
		                          
            row8.V4MIDT = rs_tDBInput_6.getBigDecimal(99);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 100) {
								row8.V4MINV = null;
							} else {
	                         		
        	row8.V4MINV = routines.system.JDBCUtil.getString(rs_tDBInput_6, 100, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 101) {
								row8.V4MPDD = null;
							} else {
	                         		
        	row8.V4MPDD = routines.system.JDBCUtil.getString(rs_tDBInput_6, 101, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 102) {
								row8.V4MQDD = null;
							} else {
	                         		
        	row8.V4MQDD = routines.system.JDBCUtil.getString(rs_tDBInput_6, 102, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 103) {
								row8.V4MRQT = null;
							} else {
		                          
            row8.V4MRQT = rs_tDBInput_6.getBigDecimal(103);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 104) {
								row8.V4MRCW = null;
							} else {
		                          
            row8.V4MRCW = rs_tDBInput_6.getBigDecimal(104);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 105) {
								row8.V4MRCK = null;
							} else {
		                          
            row8.V4MRCK = rs_tDBInput_6.getBigDecimal(105);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 106) {
								row8.V4PFMM = null;
							} else {
		                          
            row8.V4PFMM = rs_tDBInput_6.getBigDecimal(106);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 107) {
								row8.V4MCSD = null;
							} else {
		                          
            row8.V4MCSD = rs_tDBInput_6.getBigDecimal(107);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 108) {
								row8.V4FINV = null;
							} else {
	                         		
        	row8.V4FINV = routines.system.JDBCUtil.getString(rs_tDBInput_6, 108, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 109) {
								row8.V4FEAP = null;
							} else {
		                          
            row8.V4FEAP = rs_tDBInput_6.getBigDecimal(109);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 110) {
								row8.V4FIDT = null;
							} else {
		                          
            row8.V4FIDT = rs_tDBInput_6.getBigDecimal(110);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 111) {
								row8.V4FRCW = null;
							} else {
		                          
            row8.V4FRCW = rs_tDBInput_6.getBigDecimal(111);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 112) {
								row8.V4FCAD = null;
							} else {
		                          
            row8.V4FCAD = rs_tDBInput_6.getBigDecimal(112);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 113) {
								row8.V4FRQT = null;
							} else {
		                          
            row8.V4FRQT = rs_tDBInput_6.getBigDecimal(113);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 114) {
								row8.V4PFMD = null;
							} else {
		                          
            row8.V4PFMD = rs_tDBInput_6.getBigDecimal(114);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 115) {
								row8.V4FTCQ = null;
							} else {
		                          
            row8.V4FTCQ = rs_tDBInput_6.getBigDecimal(115);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 116) {
								row8.V4LCN = null;
							} else {
	                         		
        	row8.V4LCN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 116, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 117) {
								row8.V4SPOF = null;
							} else {
	                         		
        	row8.V4SPOF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 117, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 118) {
								row8.V4PCLN = null;
							} else {
		                          
            row8.V4PCLN = rs_tDBInput_6.getBigDecimal(118);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 119) {
								row8.V4MFVN = null;
							} else {
	                         		
        	row8.V4MFVN = routines.system.JDBCUtil.getString(rs_tDBInput_6, 119, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 120) {
								row8.V4MFID = null;
							} else {
	                         		
        	row8.V4MFID = routines.system.JDBCUtil.getString(rs_tDBInput_6, 120, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 121) {
								row8.V4ERRF = null;
							} else {
	                         		
        	row8.V4ERRF = routines.system.JDBCUtil.getString(rs_tDBInput_6, 121, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 122) {
								row8.V4IMCC = null;
							} else {
	                         		
        	row8.V4IMCC = routines.system.JDBCUtil.getString(rs_tDBInput_6, 122, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 123) {
								row8.V4COD1 = null;
							} else {
	                         		
        	row8.V4COD1 = routines.system.JDBCUtil.getString(rs_tDBInput_6, 123, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 124) {
								row8.V4NTYP = null;
							} else {
	                         		
        	row8.V4NTYP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 124, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 125) {
								row8.V4TDCD = null;
							} else {
		                          
            row8.V4TDCD = rs_tDBInput_6.getBigDecimal(125);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 126) {
								row8.V4QTIF = null;
							} else {
		                          
            row8.V4QTIF = rs_tDBInput_6.getBigDecimal(126);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 127) {
								row8.V4EADT = null;
							} else {
		                          
            row8.V4EADT = rs_tDBInput_6.getBigDecimal(127);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 128) {
								row8.V4EATM = null;
							} else {
		                          
            row8.V4EATM = rs_tDBInput_6.getBigDecimal(128);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 129) {
								row8.V4EAID = null;
							} else {
	                         		
        	row8.V4EAID = routines.system.JDBCUtil.getString(rs_tDBInput_6, 129, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 130) {
								row8.V4MODT = null;
							} else {
		                          
            row8.V4MODT = rs_tDBInput_6.getBigDecimal(130);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 131) {
								row8.V4MOTM = null;
							} else {
		                          
            row8.V4MOTM = rs_tDBInput_6.getBigDecimal(131);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 132) {
								row8.V4MOID = null;
							} else {
	                         		
        	row8.V4MOID = routines.system.JDBCUtil.getString(rs_tDBInput_6, 132, true);
		                    }
							if(colQtyInRs_tDBInput_6 < 133) {
								row8.V4MOPG = null;
							} else {
	                         		
        	row8.V4MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_6, 133, true);
		                    }
					



 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;
Var.V4ARBD = TimeStampConverting.convertToDate(row8.V4ARBD.toString()) ;
Var.V4PSRD = TimeStampConverting.convertToDate(row8.V4PSRD.toString()) ;
Var.V4ARDE = TimeStampConverting.convertToDate(row8.V4ARDE.toString()) ;
Var.V4MIDT = TimeStampConverting.convertToDate(row8.V4MIDT.toString()) ;
Var.V4FIDT = TimeStampConverting.convertToDate(row8.V4FIDT.toString()) ;
Var.V4ORDT = TimeStampConverting.convertToDate(row8.V4ORDT.toString()) ;
Var.AVAIL_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row8.V4AVDT.toString(),row8.V4AVTM.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row8.V4EADT.toString(),row8.V4EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row8.V4MODT.toString(),row8.V4MOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PURCHASE_ORDER_DETAIL_UPDATE_6 = null;


// # Output table : 'PURCHASE_ORDER_DETAIL_UPDATE_6'
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.SITE_ID = context.opco;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.PURCHASE_ORDER_NO = row8.V4PO ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.SMS_MAJ_LINE_NO = row8.V4ROSQ ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.SMS_MIN_LINE_NO = new BigDecimal("1");
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.VENDOR_CLASSIFICATION = row8.V4VCAT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.SHIPPING_POINT_SHIP_FROM = row8.V4ADCD;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.BUYING_GROUP = row8.V4BYGP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CUST_PREF_VENDOR = row8.V4CPVN ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.SOURCE_VENDOR = row8.V4PVND ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.VENDOR_TERMS = row8.V4TERM ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.PO_PRIMARY_STATUS = row8.V4POST ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.PO_SECONDARY_STATUS = row8.V4POSS ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.PO_TYPE = row8.V4ORTY ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.WHSE_CHANGE_CODE = row8.V4WCCD ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONF_STATUS = row8.V4CFST ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.PO_VALID_PRICING_FLAG = row8.V4VLPF ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.PO_VALID_PRICING_APPROVAL = row8.V4VLPA ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.PO_CHANGED_FLAG = row8.V4POCH ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ALLOC_SCHEDULED_RECEIPT_FLAG = row8.V4ASRF ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.PRICE_OVERRIDE_FLAG = row8.V4POFL ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MARKED_BY_MERCHANDISER_FLAG = row8.V4MKMF ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FAILED_SCORECARD_FLAG = row8.V4FSCF ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MANUALLY_ENTERED_LINE_FLAG = row8.V4MELN ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CALENDAR_DATE_ANTICIPATED_RECEIPT = Var.V4ARBD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARBD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = Var.V4PSRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4PSRD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.BUSINESS_DATE_ANTICIPATED_RECEIPT = Var.V4ARDE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARDE):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.AVAIL_TIMESTAMP = Var.AVAIL_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.AVAIL_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.BUSINESS_ORDER_DATE = Var.V4ORDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ORDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.SUGGESTED_ORDER_QTY = row8.V4PSOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.SHIP_TO_CUST = row8.V4CUNO ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CUST_ORDER_NO = row8.V4ORNO ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CUST_ORDER_LINE_NO = row8.V4ODLN ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_ORDER_QTY = row8.V4POOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_FOB_PER_ITEM = row8.V4POFB ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_FREIGHT_PER_ITEM = row8.V4POFR;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_AP_PER_ITEM = row8.V4POAP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = row8.V4IPUO;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = row8.V4IPUT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_FREIGHT_RATE_OVERRIDE = row8.V4IFRO;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_FREIGHT_TYPE_OVERRIDE = row8.V4IFRT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_PICKUP_ALLOW_PER_ITEM = row8.V4PAPI;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_OFF_INV_ALLOW = row8.V4POAL;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_UOM = row8.V4POUM;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_ALT_DELV_PRICE = row8.V4OADP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_MERCH_ALLOW_CHARGE = row8.V4ACDM ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_FREIGHT_ALLOW_CHARGE = row8.V4ACDF ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ALLOC_QTY = row8.V4ALQY ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ALLOC_QTY_SPLITS = row8.V4ALQS ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.INV_UNIT_PRICE = row8.V4IUPR ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREE_GOODS_FLAG = row8.V4FEGD ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.VENDOR_PRICE_LIST_UOM = row8.V4VPUM ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_ORDER_QTY = row8.V4PCOQ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_FOB_PER_ITEM = row8.V4PCFB;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_FREIGHT_PER_ITEM = row8.V4PCFR;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_AP_PER_ITEM = row8.V4PCAP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = row8.V4CPAL;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = row8.V4CPUT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_FREIGHT_RATE_OVERRIDE = row8.V4CFRO;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_FREIGHT_TYPE_OVERRIDE = row8.V4CFTO;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_PICKUP_ALLOW_PER_ITEM = row8.V4CPAP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_OFF_INV_ALLOW = row8.V4COIN;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_UOM = row8.V4CUOM;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_ALT_DELV_PRICE = row8.V4CADP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONF_DIST_MERCH_ALLOW_CHARGE = row8.V4CACM;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONF_DIST_FREIGHT_ALLOW_CHARGE = row8.V4CACF;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_MRPT = row8.V4CMRP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = row8.V4CMEF;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONFIRMED_PRICE_OVERRIDE_FLAG = row8.V4CPOF;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CARRIER_SHORT_QTY = row8.V4QYSH;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.RECVD_DAMAGED_ACCEPTED_QTY = row8.V4QYDA;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.RECVD_QTY = row8.V4RCQT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.VENDOR_SHORT_QTY = row8.V4VSQY;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CARRIER_SHORT_REASON_CODE = row8.V4CSRC;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.VENDOR_SHORT_REASON_CODE = row8.V4VSRC;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.RECVD_WGT = row8.V4RVWT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.DAMAGED_RECVD_WGT = row8.V4DRWT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.REVISED_PROFORMA_FLAG = row8.V4RPFF;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREIGHT_PROFORMA_STATUS = row8.V4PPFS;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_PROFORMA_STATUS = row8.V4PMPS;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_EXT_AMT_TOBE_PAID = row8.V4MEAP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_INV_DATE = Var.V4MIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4MIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_INV_NO = row8.V4MINV;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_PRICE_DIFF_STATUS = row8.V4MPDD;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_QTY_DIFF_STATUS = row8.V4MQDD;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_QTY_TO_BE_PAID = row8.V4MRQT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_WGT_TO_BE_PAID = row8.V4MRCW;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MERCH_CASH_DISC = row8.V4MCSD;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREIGHT_INV_NO = row8.V4FINV;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREIGHT_EXT_AMT_TO_BE_PAID = row8.V4FEAP;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREIGHT_INV_DATE = Var.V4FIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4FIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREIGHT_CHARGE_TO_BE_PAID = row8.V4FRCW;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREIGHT_CASH_DISC = row8.V4FCAD;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREIGHT_QTY_TO_BE_PAID = row8.V4FRQT;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.FREIGHT_CLAIM_QTY = row8.V4FTCQ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.LOAD_CTRL_NO = row8.V4LCN;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.SPLIT_PO_FLAG = row8.V4SPOF;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.TRUE_VENDOR = row8.V4MFVN;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.MANIFEST_HIST_MFG_NO = row8.V4MFID;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.NOTE1 = row8.V4COD1;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.TRUE_VENDOR_SHIP_FROM = row8.V4TDCD;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.LAST_QTY_SENT_TO_DPR = row8.V4QTIF;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CREATED_USER_ID = row8.V4EAID;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.IS_ACTIVE = true;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.V4PF_SVOP = context.svop;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.UPDATED_USER_ID = row8.V4MOID;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.UPDATED_PROGRAM_ID = row8.V4MOPG;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.IS_DELETED = false;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CREATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.UPDATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.ORIG_UNLOAD_CHARGE_PER_ITEM = row8.V4OUCI;
PURCHASE_ORDER_DETAIL_UPDATE_6_tmp.CONF_UNLOAD_CHARGE_PER_ITEM = row8.V4CUCI;
PURCHASE_ORDER_DETAIL_UPDATE_6 = PURCHASE_ORDER_DETAIL_UPDATE_6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "PURCHASE_ORDER_DETAIL_UPDATE_6"
if(PURCHASE_ORDER_DETAIL_UPDATE_6 != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PURCHASE_ORDER_DETAIL_UPDATE_6"
						
						);
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_CLASSIFICATION == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_CLASSIFICATION);
}

                    pstmt_tDBOutput_6.setBigDecimal(2, PURCHASE_ORDER_DETAIL_UPDATE_6.SHIPPING_POINT_SHIP_FROM);

                    pstmt_tDBOutput_6.setBigDecimal(3, PURCHASE_ORDER_DETAIL_UPDATE_6.BUYING_GROUP);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CUST_PREF_VENDOR == null) {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(4, PURCHASE_ORDER_DETAIL_UPDATE_6.CUST_PREF_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.SOURCE_VENDOR == null) {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(5, PURCHASE_ORDER_DETAIL_UPDATE_6.SOURCE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_TERMS == null) {
pstmt_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(6, PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.PO_PRIMARY_STATUS == null) {
pstmt_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(7, PURCHASE_ORDER_DETAIL_UPDATE_6.PO_PRIMARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.PO_SECONDARY_STATUS == null) {
pstmt_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(8, PURCHASE_ORDER_DETAIL_UPDATE_6.PO_SECONDARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.PO_TYPE == null) {
pstmt_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(9, PURCHASE_ORDER_DETAIL_UPDATE_6.PO_TYPE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.WHSE_CHANGE_CODE == null) {
pstmt_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(10, PURCHASE_ORDER_DETAIL_UPDATE_6.WHSE_CHANGE_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CONF_STATUS == null) {
pstmt_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(11, PURCHASE_ORDER_DETAIL_UPDATE_6.CONF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.PO_VALID_PRICING_FLAG == null) {
pstmt_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(12, PURCHASE_ORDER_DETAIL_UPDATE_6.PO_VALID_PRICING_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.PO_VALID_PRICING_APPROVAL == null) {
pstmt_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(13, PURCHASE_ORDER_DETAIL_UPDATE_6.PO_VALID_PRICING_APPROVAL);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.PO_CHANGED_FLAG == null) {
pstmt_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(14, PURCHASE_ORDER_DETAIL_UPDATE_6.PO_CHANGED_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.ALLOC_SCHEDULED_RECEIPT_FLAG == null) {
pstmt_tDBOutput_6.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(15, PURCHASE_ORDER_DETAIL_UPDATE_6.ALLOC_SCHEDULED_RECEIPT_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_6.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(16, PURCHASE_ORDER_DETAIL_UPDATE_6.PRICE_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.MARKED_BY_MERCHANDISER_FLAG == null) {
pstmt_tDBOutput_6.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(17, PURCHASE_ORDER_DETAIL_UPDATE_6.MARKED_BY_MERCHANDISER_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.FAILED_SCORECARD_FLAG == null) {
pstmt_tDBOutput_6.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(18, PURCHASE_ORDER_DETAIL_UPDATE_6.FAILED_SCORECARD_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_6.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(19, PURCHASE_ORDER_DETAIL_UPDATE_6.MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CALENDAR_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_6.setTimestamp(20, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.CALENDAR_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_6.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE != null) {
pstmt_tDBOutput_6.setTimestamp(21, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE.getTime()));
} else {
pstmt_tDBOutput_6.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.BUSINESS_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_6.setTimestamp(22, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.BUSINESS_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_6.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.AVAIL_TIMESTAMP != null) {
pstmt_tDBOutput_6.setTimestamp(23, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.AVAIL_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_6.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.BUSINESS_ORDER_DATE != null) {
pstmt_tDBOutput_6.setTimestamp(24, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.BUSINESS_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_6.setNull(24, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_6.setBigDecimal(25, PURCHASE_ORDER_DETAIL_UPDATE_6.SUGGESTED_ORDER_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.SHIP_TO_CUST == null) {
pstmt_tDBOutput_6.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(26, PURCHASE_ORDER_DETAIL_UPDATE_6.SHIP_TO_CUST);
}

                    pstmt_tDBOutput_6.setBigDecimal(27, PURCHASE_ORDER_DETAIL_UPDATE_6.CUST_ORDER_NO);

                    pstmt_tDBOutput_6.setBigDecimal(28, PURCHASE_ORDER_DETAIL_UPDATE_6.CUST_ORDER_LINE_NO);

                    pstmt_tDBOutput_6.setBigDecimal(29, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_ORDER_QTY);

                    pstmt_tDBOutput_6.setBigDecimal(30, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_FOB_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(31, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(32, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_AP_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(33, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_6.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(34, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_6.setBigDecimal(35, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_6.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(36, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_6.setBigDecimal(37, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(38, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_UOM == null) {
pstmt_tDBOutput_6.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(39, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_UOM);
}

                    pstmt_tDBOutput_6.setBigDecimal(40, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_ALT_DELV_PRICE);

                    pstmt_tDBOutput_6.setBigDecimal(41, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_6.setBigDecimal(42, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_6.setBigDecimal(43, PURCHASE_ORDER_DETAIL_UPDATE_6.ALLOC_QTY);

                    pstmt_tDBOutput_6.setBigDecimal(44, PURCHASE_ORDER_DETAIL_UPDATE_6.ALLOC_QTY_SPLITS);

                    pstmt_tDBOutput_6.setBigDecimal(45, PURCHASE_ORDER_DETAIL_UPDATE_6.INV_UNIT_PRICE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.FREE_GOODS_FLAG == null) {
pstmt_tDBOutput_6.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(46, PURCHASE_ORDER_DETAIL_UPDATE_6.FREE_GOODS_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_PRICE_LIST_UOM == null) {
pstmt_tDBOutput_6.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(47, PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_PRICE_LIST_UOM);
}

                    pstmt_tDBOutput_6.setBigDecimal(48, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_ORDER_QTY);

                    pstmt_tDBOutput_6.setBigDecimal(49, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_FOB_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(50, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(51, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_AP_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(52, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_6.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(53, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_6.setBigDecimal(54, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_6.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(55, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_6.setBigDecimal(56, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(57, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_UOM == null) {
pstmt_tDBOutput_6.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(58, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_UOM);
}

                    pstmt_tDBOutput_6.setBigDecimal(59, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_ALT_DELV_PRICE);

                    pstmt_tDBOutput_6.setBigDecimal(60, PURCHASE_ORDER_DETAIL_UPDATE_6.CONF_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_6.setBigDecimal(61, PURCHASE_ORDER_DETAIL_UPDATE_6.CONF_DIST_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_6.setBigDecimal(62, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_MRPT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_6.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(63, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_6.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(64, PURCHASE_ORDER_DETAIL_UPDATE_6.CONFIRMED_PRICE_OVERRIDE_FLAG);
}

                    pstmt_tDBOutput_6.setBigDecimal(65, PURCHASE_ORDER_DETAIL_UPDATE_6.CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_6.setBigDecimal(66, PURCHASE_ORDER_DETAIL_UPDATE_6.RECVD_DAMAGED_ACCEPTED_QTY);

                    pstmt_tDBOutput_6.setBigDecimal(67, PURCHASE_ORDER_DETAIL_UPDATE_6.RECVD_QTY);

                    pstmt_tDBOutput_6.setBigDecimal(68, PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_SHORT_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CARRIER_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_6.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(69, PURCHASE_ORDER_DETAIL_UPDATE_6.CARRIER_SHORT_REASON_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_6.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(70, PURCHASE_ORDER_DETAIL_UPDATE_6.VENDOR_SHORT_REASON_CODE);
}

                    pstmt_tDBOutput_6.setBigDecimal(71, PURCHASE_ORDER_DETAIL_UPDATE_6.RECVD_WGT);

                    pstmt_tDBOutput_6.setBigDecimal(72, PURCHASE_ORDER_DETAIL_UPDATE_6.DAMAGED_RECVD_WGT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.REVISED_PROFORMA_FLAG == null) {
pstmt_tDBOutput_6.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(73, PURCHASE_ORDER_DETAIL_UPDATE_6.REVISED_PROFORMA_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_PROFORMA_STATUS == null) {
pstmt_tDBOutput_6.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(74, PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_PROFORMA_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_PROFORMA_STATUS == null) {
pstmt_tDBOutput_6.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(75, PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_PROFORMA_STATUS);
}

                    pstmt_tDBOutput_6.setBigDecimal(76, PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_EXT_AMT_TOBE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_INV_DATE != null) {
pstmt_tDBOutput_6.setTimestamp(77, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_6.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_INV_NO == null) {
pstmt_tDBOutput_6.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(78, PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_INV_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_PRICE_DIFF_STATUS == null) {
pstmt_tDBOutput_6.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(79, PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_PRICE_DIFF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_QTY_DIFF_STATUS == null) {
pstmt_tDBOutput_6.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(80, PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_QTY_DIFF_STATUS);
}

                    pstmt_tDBOutput_6.setBigDecimal(81, PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_6.setBigDecimal(82, PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_WGT_TO_BE_PAID);

                    pstmt_tDBOutput_6.setBigDecimal(83, PURCHASE_ORDER_DETAIL_UPDATE_6.MERCH_CASH_DISC);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_INV_NO == null) {
pstmt_tDBOutput_6.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(84, PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_INV_NO);
}

                    pstmt_tDBOutput_6.setBigDecimal(85, PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_EXT_AMT_TO_BE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_INV_DATE != null) {
pstmt_tDBOutput_6.setTimestamp(86, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_6.setNull(86, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_6.setBigDecimal(87, PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_CHARGE_TO_BE_PAID);

                    pstmt_tDBOutput_6.setBigDecimal(88, PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_CASH_DISC);

                    pstmt_tDBOutput_6.setBigDecimal(89, PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_6.setBigDecimal(90, PURCHASE_ORDER_DETAIL_UPDATE_6.FREIGHT_CLAIM_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.LOAD_CTRL_NO == null) {
pstmt_tDBOutput_6.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(91, PURCHASE_ORDER_DETAIL_UPDATE_6.LOAD_CTRL_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.SPLIT_PO_FLAG == null) {
pstmt_tDBOutput_6.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(92, PURCHASE_ORDER_DETAIL_UPDATE_6.SPLIT_PO_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.TRUE_VENDOR == null) {
pstmt_tDBOutput_6.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(93, PURCHASE_ORDER_DETAIL_UPDATE_6.TRUE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.MANIFEST_HIST_MFG_NO == null) {
pstmt_tDBOutput_6.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(94, PURCHASE_ORDER_DETAIL_UPDATE_6.MANIFEST_HIST_MFG_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.NOTE1 == null) {
pstmt_tDBOutput_6.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(95, PURCHASE_ORDER_DETAIL_UPDATE_6.NOTE1);
}

                    pstmt_tDBOutput_6.setBigDecimal(96, PURCHASE_ORDER_DETAIL_UPDATE_6.TRUE_VENDOR_SHIP_FROM);

                    pstmt_tDBOutput_6.setBigDecimal(97, PURCHASE_ORDER_DETAIL_UPDATE_6.LAST_QTY_SENT_TO_DPR);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_6.setTimestamp(98, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_6.setNull(98, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CREATED_USER_ID == null) {
pstmt_tDBOutput_6.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(99, PURCHASE_ORDER_DETAIL_UPDATE_6.CREATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.IS_ACTIVE == null) {
pstmt_tDBOutput_6.setNull(100, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_6.setBoolean(100, PURCHASE_ORDER_DETAIL_UPDATE_6.IS_ACTIVE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.V4PF_SVOP == null) {
pstmt_tDBOutput_6.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(101, PURCHASE_ORDER_DETAIL_UPDATE_6.V4PF_SVOP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_USER_ID == null) {
pstmt_tDBOutput_6.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(102, PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_6.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(103, PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_PROGRAM_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_6.setTimestamp(104, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_6.setNull(104, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.IS_DELETED == null) {
pstmt_tDBOutput_6.setNull(105, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_6.setBoolean(105, PURCHASE_ORDER_DETAIL_UPDATE_6.IS_DELETED);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CREATED_ORIGIN == null) {
pstmt_tDBOutput_6.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(106, PURCHASE_ORDER_DETAIL_UPDATE_6.CREATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_6.setTimestamp(107, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_6.setNull(107, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_6.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(108, PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_6.setTimestamp(109, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_6.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_6.setNull(109, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_6.setBigDecimal(110, PURCHASE_ORDER_DETAIL_UPDATE_6.ORIG_UNLOAD_CHARGE_PER_ITEM);

                    pstmt_tDBOutput_6.setBigDecimal(111, PURCHASE_ORDER_DETAIL_UPDATE_6.CONF_UNLOAD_CHARGE_PER_ITEM);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.SITE_ID == null) {
pstmt_tDBOutput_6.setNull(112 + count_tDBOutput_6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(112 + count_tDBOutput_6, PURCHASE_ORDER_DETAIL_UPDATE_6.SITE_ID);
}


                    if(PURCHASE_ORDER_DETAIL_UPDATE_6.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_6.setNull(113 + count_tDBOutput_6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(113 + count_tDBOutput_6, PURCHASE_ORDER_DETAIL_UPDATE_6.PURCHASE_ORDER_NO);
}


                    pstmt_tDBOutput_6.setBigDecimal(114 + count_tDBOutput_6, PURCHASE_ORDER_DETAIL_UPDATE_6.SMS_MAJ_LINE_NO);


                    pstmt_tDBOutput_6.setBigDecimal(115 + count_tDBOutput_6, PURCHASE_ORDER_DETAIL_UPDATE_6.SMS_MIN_LINE_NO);


    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_6++;
                if(commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
                if ((batchSize_tDBOutput_6 > 0) && (batchSizeCounter_tDBOutput_6 > 0)) {
                try {
                		int countSum_tDBOutput_6 = 0;
                		    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
            	    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
            	    	
            	    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
            	    	
                batchSizeCounter_tDBOutput_6 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
			    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
			    	String errormessage_tDBOutput_6;
					if (ne_tDBOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
						errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
					}else{
						errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
					}
			    	
			    	int countSum_tDBOutput_6 = 0;
					for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
					
			    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
			    	
			    	System.err.println(errormessage_tDBOutput_6);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_6 != 0){
                    	
                    }
                    conn_tDBOutput_6.commit();
                    if(rowsToCommitCount_tDBOutput_6 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_6 = 0;
                    }
                    commitCounter_tDBOutput_6=0;
                }

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "PURCHASE_ORDER_DETAIL_UPDATE_6"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_6", end_Hash.get("tDBInput_6")-start_Hash.get("tDBInput_6"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				}
		    	
		    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
			
	    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);
			if(rowsToCommitCount_tDBOutput_6 != 0){
				
			}
			conn_tDBOutput_6.commit();
			if(rowsToCommitCount_tDBOutput_6 != 0){
				
				rowsToCommitCount_tDBOutput_6 = 0;
			}
			commitCounter_tDBOutput_6 = 0;
		
    	conn_tDBOutput_6 .close();
    	
    	resourceMap.put("finish_tDBOutput_6", true);
    	

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PURCHASE_ORDER_DETAIL_UPDATE_6");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_6", end_Hash.get("tDBOutput_6")-start_Hash.get("tDBOutput_6"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_6") == null){
            java.sql.Connection ctn_tDBOutput_6 = null;
            if((ctn_tDBOutput_6 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_6")) != null){
                try {
                    ctn_tDBOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_6) {
                    String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :" + sqlEx_tDBOutput_6.getMessage();
                    System.err.println(errorMessage_tDBOutput_6);
                }
            }
        }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	

public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";

	
		int tos_count_tJava_5 = 0;
		


System.out.println("Starting the Updating Data from IMHBV4PF_3 to PURCHASE_ORDER_DETAIL...........");
 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";

	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class PURCHASE_ORDER_DETAIL_UPDATE_3Struct implements routines.system.IPersistableRow<PURCHASE_ORDER_DETAIL_UPDATE_3Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public BigDecimal SMS_MAJ_LINE_NO;

				public BigDecimal getSMS_MAJ_LINE_NO () {
					return this.SMS_MAJ_LINE_NO;
				}
				
			    public BigDecimal SMS_MIN_LINE_NO;

				public BigDecimal getSMS_MIN_LINE_NO () {
					return this.SMS_MIN_LINE_NO;
				}
				
			    public String VENDOR_CLASSIFICATION;

				public String getVENDOR_CLASSIFICATION () {
					return this.VENDOR_CLASSIFICATION;
				}
				
			    public BigDecimal SHIPPING_POINT_SHIP_FROM;

				public BigDecimal getSHIPPING_POINT_SHIP_FROM () {
					return this.SHIPPING_POINT_SHIP_FROM;
				}
				
			    public BigDecimal BUYING_GROUP;

				public BigDecimal getBUYING_GROUP () {
					return this.BUYING_GROUP;
				}
				
			    public String CUST_PREF_VENDOR;

				public String getCUST_PREF_VENDOR () {
					return this.CUST_PREF_VENDOR;
				}
				
			    public String SOURCE_VENDOR;

				public String getSOURCE_VENDOR () {
					return this.SOURCE_VENDOR;
				}
				
			    public String VENDOR_TERMS;

				public String getVENDOR_TERMS () {
					return this.VENDOR_TERMS;
				}
				
			    public String PO_PRIMARY_STATUS;

				public String getPO_PRIMARY_STATUS () {
					return this.PO_PRIMARY_STATUS;
				}
				
			    public String PO_SECONDARY_STATUS;

				public String getPO_SECONDARY_STATUS () {
					return this.PO_SECONDARY_STATUS;
				}
				
			    public String PO_TYPE;

				public String getPO_TYPE () {
					return this.PO_TYPE;
				}
				
			    public String WHSE_CHANGE_CODE;

				public String getWHSE_CHANGE_CODE () {
					return this.WHSE_CHANGE_CODE;
				}
				
			    public String CONF_STATUS;

				public String getCONF_STATUS () {
					return this.CONF_STATUS;
				}
				
			    public String PO_VALID_PRICING_FLAG;

				public String getPO_VALID_PRICING_FLAG () {
					return this.PO_VALID_PRICING_FLAG;
				}
				
			    public String PO_VALID_PRICING_APPROVAL;

				public String getPO_VALID_PRICING_APPROVAL () {
					return this.PO_VALID_PRICING_APPROVAL;
				}
				
			    public String PO_CHANGED_FLAG;

				public String getPO_CHANGED_FLAG () {
					return this.PO_CHANGED_FLAG;
				}
				
			    public String ALLOC_SCHEDULED_RECEIPT_FLAG;

				public String getALLOC_SCHEDULED_RECEIPT_FLAG () {
					return this.ALLOC_SCHEDULED_RECEIPT_FLAG;
				}
				
			    public String PRICE_OVERRIDE_FLAG;

				public String getPRICE_OVERRIDE_FLAG () {
					return this.PRICE_OVERRIDE_FLAG;
				}
				
			    public String MARKED_BY_MERCHANDISER_FLAG;

				public String getMARKED_BY_MERCHANDISER_FLAG () {
					return this.MARKED_BY_MERCHANDISER_FLAG;
				}
				
			    public String FAILED_SCORECARD_FLAG;

				public String getFAILED_SCORECARD_FLAG () {
					return this.FAILED_SCORECARD_FLAG;
				}
				
			    public String MANUALLY_ENTERED_LINE_FLAG;

				public String getMANUALLY_ENTERED_LINE_FLAG () {
					return this.MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public java.util.Date CALENDAR_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ANTICIPATED_RECEIPT () {
					return this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;

				public java.util.Date getCALENDAR_DATE_SCHEDULED_RECEIPT_DATE () {
					return this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
				}
				
			    public java.util.Date BUSINESS_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ANTICIPATED_RECEIPT () {
					return this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date AVAIL_TIMESTAMP;

				public java.util.Date getAVAIL_TIMESTAMP () {
					return this.AVAIL_TIMESTAMP;
				}
				
			    public java.util.Date BUSINESS_ORDER_DATE;

				public java.util.Date getBUSINESS_ORDER_DATE () {
					return this.BUSINESS_ORDER_DATE;
				}
				
			    public BigDecimal SUGGESTED_ORDER_QTY;

				public BigDecimal getSUGGESTED_ORDER_QTY () {
					return this.SUGGESTED_ORDER_QTY;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public BigDecimal CUST_ORDER_NO;

				public BigDecimal getCUST_ORDER_NO () {
					return this.CUST_ORDER_NO;
				}
				
			    public BigDecimal CUST_ORDER_LINE_NO;

				public BigDecimal getCUST_ORDER_LINE_NO () {
					return this.CUST_ORDER_LINE_NO;
				}
				
			    public BigDecimal ORIG_ORDER_QTY;

				public BigDecimal getORIG_ORDER_QTY () {
					return this.ORIG_ORDER_QTY;
				}
				
			    public BigDecimal ORIG_FOB_PER_ITEM;

				public BigDecimal getORIG_FOB_PER_ITEM () {
					return this.ORIG_FOB_PER_ITEM;
				}
				
			    public BigDecimal ORIG_FREIGHT_PER_ITEM;

				public BigDecimal getORIG_FREIGHT_PER_ITEM () {
					return this.ORIG_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal ORIG_AP_PER_ITEM;

				public BigDecimal getORIG_AP_PER_ITEM () {
					return this.ORIG_AP_PER_ITEM;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getORIG_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getORIG_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getORIG_FREIGHT_RATE_OVERRIDE () {
					return this.ORIG_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String ORIG_FREIGHT_TYPE_OVERRIDE;

				public String getORIG_FREIGHT_TYPE_OVERRIDE () {
					return this.ORIG_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getORIG_PICKUP_ALLOW_PER_ITEM () {
					return this.ORIG_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal ORIG_OFF_INV_ALLOW;

				public BigDecimal getORIG_OFF_INV_ALLOW () {
					return this.ORIG_OFF_INV_ALLOW;
				}
				
			    public String ORIG_UOM;

				public String getORIG_UOM () {
					return this.ORIG_UOM;
				}
				
			    public BigDecimal ORIG_ALT_DELV_PRICE;

				public BigDecimal getORIG_ALT_DELV_PRICE () {
					return this.ORIG_ALT_DELV_PRICE;
				}
				
			    public BigDecimal ORIG_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_MERCH_ALLOW_CHARGE () {
					return this.ORIG_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal ORIG_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getORIG_FREIGHT_ALLOW_CHARGE () {
					return this.ORIG_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal ALLOC_QTY;

				public BigDecimal getALLOC_QTY () {
					return this.ALLOC_QTY;
				}
				
			    public BigDecimal ALLOC_QTY_SPLITS;

				public BigDecimal getALLOC_QTY_SPLITS () {
					return this.ALLOC_QTY_SPLITS;
				}
				
			    public BigDecimal INV_UNIT_PRICE;

				public BigDecimal getINV_UNIT_PRICE () {
					return this.INV_UNIT_PRICE;
				}
				
			    public String FREE_GOODS_FLAG;

				public String getFREE_GOODS_FLAG () {
					return this.FREE_GOODS_FLAG;
				}
				
			    public String VENDOR_PRICE_LIST_UOM;

				public String getVENDOR_PRICE_LIST_UOM () {
					return this.VENDOR_PRICE_LIST_UOM;
				}
				
			    public BigDecimal CONFIRMED_ORDER_QTY;

				public BigDecimal getCONFIRMED_ORDER_QTY () {
					return this.CONFIRMED_ORDER_QTY;
				}
				
			    public BigDecimal CONFIRMED_FOB_PER_ITEM;

				public BigDecimal getCONFIRMED_FOB_PER_ITEM () {
					return this.CONFIRMED_FOB_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_PER_ITEM;

				public BigDecimal getCONFIRMED_FREIGHT_PER_ITEM () {
					return this.CONFIRMED_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_AP_PER_ITEM;

				public BigDecimal getCONFIRMED_AP_PER_ITEM () {
					return this.CONFIRMED_AP_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getCONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_FREIGHT_RATE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_FREIGHT_TYPE_OVERRIDE;

				public String getCONFIRMED_FREIGHT_TYPE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_PER_ITEM () {
					return this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_OFF_INV_ALLOW;

				public BigDecimal getCONFIRMED_OFF_INV_ALLOW () {
					return this.CONFIRMED_OFF_INV_ALLOW;
				}
				
			    public String CONFIRMED_UOM;

				public String getCONFIRMED_UOM () {
					return this.CONFIRMED_UOM;
				}
				
			    public BigDecimal CONFIRMED_ALT_DELV_PRICE;

				public BigDecimal getCONFIRMED_ALT_DELV_PRICE () {
					return this.CONFIRMED_ALT_DELV_PRICE;
				}
				
			    public BigDecimal CONF_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_MERCH_ALLOW_CHARGE () {
					return this.CONF_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONF_DIST_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_FREIGHT_ALLOW_CHARGE () {
					return this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_MRPT;

				public BigDecimal getCONFIRMED_MRPT () {
					return this.CONFIRMED_MRPT;
				}
				
			    public String CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;

				public String getCONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG () {
					return this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public String CONFIRMED_PRICE_OVERRIDE_FLAG;

				public String getCONFIRMED_PRICE_OVERRIDE_FLAG () {
					return this.CONFIRMED_PRICE_OVERRIDE_FLAG;
				}
				
			    public BigDecimal CARRIER_SHORT_QTY;

				public BigDecimal getCARRIER_SHORT_QTY () {
					return this.CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal RECVD_DAMAGED_ACCEPTED_QTY;

				public BigDecimal getRECVD_DAMAGED_ACCEPTED_QTY () {
					return this.RECVD_DAMAGED_ACCEPTED_QTY;
				}
				
			    public BigDecimal RECVD_QTY;

				public BigDecimal getRECVD_QTY () {
					return this.RECVD_QTY;
				}
				
			    public BigDecimal VENDOR_SHORT_QTY;

				public BigDecimal getVENDOR_SHORT_QTY () {
					return this.VENDOR_SHORT_QTY;
				}
				
			    public String CARRIER_SHORT_REASON_CODE;

				public String getCARRIER_SHORT_REASON_CODE () {
					return this.CARRIER_SHORT_REASON_CODE;
				}
				
			    public String VENDOR_SHORT_REASON_CODE;

				public String getVENDOR_SHORT_REASON_CODE () {
					return this.VENDOR_SHORT_REASON_CODE;
				}
				
			    public BigDecimal RECVD_WGT;

				public BigDecimal getRECVD_WGT () {
					return this.RECVD_WGT;
				}
				
			    public BigDecimal DAMAGED_RECVD_WGT;

				public BigDecimal getDAMAGED_RECVD_WGT () {
					return this.DAMAGED_RECVD_WGT;
				}
				
			    public String REVISED_PROFORMA_FLAG;

				public String getREVISED_PROFORMA_FLAG () {
					return this.REVISED_PROFORMA_FLAG;
				}
				
			    public String FREIGHT_PROFORMA_STATUS;

				public String getFREIGHT_PROFORMA_STATUS () {
					return this.FREIGHT_PROFORMA_STATUS;
				}
				
			    public String MERCH_PROFORMA_STATUS;

				public String getMERCH_PROFORMA_STATUS () {
					return this.MERCH_PROFORMA_STATUS;
				}
				
			    public BigDecimal MERCH_EXT_AMT_TOBE_PAID;

				public BigDecimal getMERCH_EXT_AMT_TOBE_PAID () {
					return this.MERCH_EXT_AMT_TOBE_PAID;
				}
				
			    public java.util.Date MERCH_INV_DATE;

				public java.util.Date getMERCH_INV_DATE () {
					return this.MERCH_INV_DATE;
				}
				
			    public String MERCH_INV_NO;

				public String getMERCH_INV_NO () {
					return this.MERCH_INV_NO;
				}
				
			    public String MERCH_PRICE_DIFF_STATUS;

				public String getMERCH_PRICE_DIFF_STATUS () {
					return this.MERCH_PRICE_DIFF_STATUS;
				}
				
			    public String MERCH_QTY_DIFF_STATUS;

				public String getMERCH_QTY_DIFF_STATUS () {
					return this.MERCH_QTY_DIFF_STATUS;
				}
				
			    public BigDecimal MERCH_QTY_TO_BE_PAID;

				public BigDecimal getMERCH_QTY_TO_BE_PAID () {
					return this.MERCH_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_WGT_TO_BE_PAID;

				public BigDecimal getMERCH_WGT_TO_BE_PAID () {
					return this.MERCH_WGT_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_CASH_DISC;

				public BigDecimal getMERCH_CASH_DISC () {
					return this.MERCH_CASH_DISC;
				}
				
			    public String FREIGHT_INV_NO;

				public String getFREIGHT_INV_NO () {
					return this.FREIGHT_INV_NO;
				}
				
			    public BigDecimal FREIGHT_EXT_AMT_TO_BE_PAID;

				public BigDecimal getFREIGHT_EXT_AMT_TO_BE_PAID () {
					return this.FREIGHT_EXT_AMT_TO_BE_PAID;
				}
				
			    public java.util.Date FREIGHT_INV_DATE;

				public java.util.Date getFREIGHT_INV_DATE () {
					return this.FREIGHT_INV_DATE;
				}
				
			    public BigDecimal FREIGHT_CHARGE_TO_BE_PAID;

				public BigDecimal getFREIGHT_CHARGE_TO_BE_PAID () {
					return this.FREIGHT_CHARGE_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CASH_DISC;

				public BigDecimal getFREIGHT_CASH_DISC () {
					return this.FREIGHT_CASH_DISC;
				}
				
			    public BigDecimal FREIGHT_QTY_TO_BE_PAID;

				public BigDecimal getFREIGHT_QTY_TO_BE_PAID () {
					return this.FREIGHT_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CLAIM_QTY;

				public BigDecimal getFREIGHT_CLAIM_QTY () {
					return this.FREIGHT_CLAIM_QTY;
				}
				
			    public String LOAD_CTRL_NO;

				public String getLOAD_CTRL_NO () {
					return this.LOAD_CTRL_NO;
				}
				
			    public String SPLIT_PO_FLAG;

				public String getSPLIT_PO_FLAG () {
					return this.SPLIT_PO_FLAG;
				}
				
			    public String TRUE_VENDOR;

				public String getTRUE_VENDOR () {
					return this.TRUE_VENDOR;
				}
				
			    public String MANIFEST_HIST_MFG_NO;

				public String getMANIFEST_HIST_MFG_NO () {
					return this.MANIFEST_HIST_MFG_NO;
				}
				
			    public String NOTE1;

				public String getNOTE1 () {
					return this.NOTE1;
				}
				
			    public BigDecimal TRUE_VENDOR_SHIP_FROM;

				public BigDecimal getTRUE_VENDOR_SHIP_FROM () {
					return this.TRUE_VENDOR_SHIP_FROM;
				}
				
			    public BigDecimal LAST_QTY_SENT_TO_DPR;

				public BigDecimal getLAST_QTY_SENT_TO_DPR () {
					return this.LAST_QTY_SENT_TO_DPR;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String V4PF_SVOP;

				public String getV4PF_SVOP () {
					return this.V4PF_SVOP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public BigDecimal ORIG_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getORIG_UNLOAD_CHARGE_PER_ITEM () {
					return this.ORIG_UNLOAD_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal CONF_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getCONF_UNLOAD_CHARGE_PER_ITEM () {
					return this.CONF_UNLOAD_CHARGE_PER_ITEM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.SMS_MAJ_LINE_NO == null) ? 0 : this.SMS_MAJ_LINE_NO.hashCode());
					
						result = prime * result + ((this.SMS_MIN_LINE_NO == null) ? 0 : this.SMS_MIN_LINE_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PURCHASE_ORDER_DETAIL_UPDATE_3Struct other = (PURCHASE_ORDER_DETAIL_UPDATE_3Struct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.SMS_MAJ_LINE_NO == null) {
							if (other.SMS_MAJ_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MAJ_LINE_NO.equals(other.SMS_MAJ_LINE_NO))
						
							return false;
					
						if (this.SMS_MIN_LINE_NO == null) {
							if (other.SMS_MIN_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MIN_LINE_NO.equals(other.SMS_MIN_LINE_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PURCHASE_ORDER_DETAIL_UPDATE_3Struct other) {

		other.SITE_ID = this.SITE_ID;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            other.VENDOR_CLASSIFICATION = this.VENDOR_CLASSIFICATION;
	            other.SHIPPING_POINT_SHIP_FROM = this.SHIPPING_POINT_SHIP_FROM;
	            other.BUYING_GROUP = this.BUYING_GROUP;
	            other.CUST_PREF_VENDOR = this.CUST_PREF_VENDOR;
	            other.SOURCE_VENDOR = this.SOURCE_VENDOR;
	            other.VENDOR_TERMS = this.VENDOR_TERMS;
	            other.PO_PRIMARY_STATUS = this.PO_PRIMARY_STATUS;
	            other.PO_SECONDARY_STATUS = this.PO_SECONDARY_STATUS;
	            other.PO_TYPE = this.PO_TYPE;
	            other.WHSE_CHANGE_CODE = this.WHSE_CHANGE_CODE;
	            other.CONF_STATUS = this.CONF_STATUS;
	            other.PO_VALID_PRICING_FLAG = this.PO_VALID_PRICING_FLAG;
	            other.PO_VALID_PRICING_APPROVAL = this.PO_VALID_PRICING_APPROVAL;
	            other.PO_CHANGED_FLAG = this.PO_CHANGED_FLAG;
	            other.ALLOC_SCHEDULED_RECEIPT_FLAG = this.ALLOC_SCHEDULED_RECEIPT_FLAG;
	            other.PRICE_OVERRIDE_FLAG = this.PRICE_OVERRIDE_FLAG;
	            other.MARKED_BY_MERCHANDISER_FLAG = this.MARKED_BY_MERCHANDISER_FLAG;
	            other.FAILED_SCORECARD_FLAG = this.FAILED_SCORECARD_FLAG;
	            other.MANUALLY_ENTERED_LINE_FLAG = this.MANUALLY_ENTERED_LINE_FLAG;
	            other.CALENDAR_DATE_ANTICIPATED_RECEIPT = this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
	            other.BUSINESS_DATE_ANTICIPATED_RECEIPT = this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
	            other.AVAIL_TIMESTAMP = this.AVAIL_TIMESTAMP;
	            other.BUSINESS_ORDER_DATE = this.BUSINESS_ORDER_DATE;
	            other.SUGGESTED_ORDER_QTY = this.SUGGESTED_ORDER_QTY;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.CUST_ORDER_NO = this.CUST_ORDER_NO;
	            other.CUST_ORDER_LINE_NO = this.CUST_ORDER_LINE_NO;
	            other.ORIG_ORDER_QTY = this.ORIG_ORDER_QTY;
	            other.ORIG_FOB_PER_ITEM = this.ORIG_FOB_PER_ITEM;
	            other.ORIG_FREIGHT_PER_ITEM = this.ORIG_FREIGHT_PER_ITEM;
	            other.ORIG_AP_PER_ITEM = this.ORIG_AP_PER_ITEM;
	            other.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.ORIG_FREIGHT_RATE_OVERRIDE = this.ORIG_FREIGHT_RATE_OVERRIDE;
	            other.ORIG_FREIGHT_TYPE_OVERRIDE = this.ORIG_FREIGHT_TYPE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_PER_ITEM = this.ORIG_PICKUP_ALLOW_PER_ITEM;
	            other.ORIG_OFF_INV_ALLOW = this.ORIG_OFF_INV_ALLOW;
	            other.ORIG_UOM = this.ORIG_UOM;
	            other.ORIG_ALT_DELV_PRICE = this.ORIG_ALT_DELV_PRICE;
	            other.ORIG_MERCH_ALLOW_CHARGE = this.ORIG_MERCH_ALLOW_CHARGE;
	            other.ORIG_FREIGHT_ALLOW_CHARGE = this.ORIG_FREIGHT_ALLOW_CHARGE;
	            other.ALLOC_QTY = this.ALLOC_QTY;
	            other.ALLOC_QTY_SPLITS = this.ALLOC_QTY_SPLITS;
	            other.INV_UNIT_PRICE = this.INV_UNIT_PRICE;
	            other.FREE_GOODS_FLAG = this.FREE_GOODS_FLAG;
	            other.VENDOR_PRICE_LIST_UOM = this.VENDOR_PRICE_LIST_UOM;
	            other.CONFIRMED_ORDER_QTY = this.CONFIRMED_ORDER_QTY;
	            other.CONFIRMED_FOB_PER_ITEM = this.CONFIRMED_FOB_PER_ITEM;
	            other.CONFIRMED_FREIGHT_PER_ITEM = this.CONFIRMED_FREIGHT_PER_ITEM;
	            other.CONFIRMED_AP_PER_ITEM = this.CONFIRMED_AP_PER_ITEM;
	            other.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_RATE_OVERRIDE = this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_TYPE_OVERRIDE = this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_PER_ITEM = this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
	            other.CONFIRMED_OFF_INV_ALLOW = this.CONFIRMED_OFF_INV_ALLOW;
	            other.CONFIRMED_UOM = this.CONFIRMED_UOM;
	            other.CONFIRMED_ALT_DELV_PRICE = this.CONFIRMED_ALT_DELV_PRICE;
	            other.CONF_DIST_MERCH_ALLOW_CHARGE = this.CONF_DIST_MERCH_ALLOW_CHARGE;
	            other.CONF_DIST_FREIGHT_ALLOW_CHARGE = this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_MRPT = this.CONFIRMED_MRPT;
	            other.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
	            other.CONFIRMED_PRICE_OVERRIDE_FLAG = this.CONFIRMED_PRICE_OVERRIDE_FLAG;
	            other.CARRIER_SHORT_QTY = this.CARRIER_SHORT_QTY;
	            other.RECVD_DAMAGED_ACCEPTED_QTY = this.RECVD_DAMAGED_ACCEPTED_QTY;
	            other.RECVD_QTY = this.RECVD_QTY;
	            other.VENDOR_SHORT_QTY = this.VENDOR_SHORT_QTY;
	            other.CARRIER_SHORT_REASON_CODE = this.CARRIER_SHORT_REASON_CODE;
	            other.VENDOR_SHORT_REASON_CODE = this.VENDOR_SHORT_REASON_CODE;
	            other.RECVD_WGT = this.RECVD_WGT;
	            other.DAMAGED_RECVD_WGT = this.DAMAGED_RECVD_WGT;
	            other.REVISED_PROFORMA_FLAG = this.REVISED_PROFORMA_FLAG;
	            other.FREIGHT_PROFORMA_STATUS = this.FREIGHT_PROFORMA_STATUS;
	            other.MERCH_PROFORMA_STATUS = this.MERCH_PROFORMA_STATUS;
	            other.MERCH_EXT_AMT_TOBE_PAID = this.MERCH_EXT_AMT_TOBE_PAID;
	            other.MERCH_INV_DATE = this.MERCH_INV_DATE;
	            other.MERCH_INV_NO = this.MERCH_INV_NO;
	            other.MERCH_PRICE_DIFF_STATUS = this.MERCH_PRICE_DIFF_STATUS;
	            other.MERCH_QTY_DIFF_STATUS = this.MERCH_QTY_DIFF_STATUS;
	            other.MERCH_QTY_TO_BE_PAID = this.MERCH_QTY_TO_BE_PAID;
	            other.MERCH_WGT_TO_BE_PAID = this.MERCH_WGT_TO_BE_PAID;
	            other.MERCH_CASH_DISC = this.MERCH_CASH_DISC;
	            other.FREIGHT_INV_NO = this.FREIGHT_INV_NO;
	            other.FREIGHT_EXT_AMT_TO_BE_PAID = this.FREIGHT_EXT_AMT_TO_BE_PAID;
	            other.FREIGHT_INV_DATE = this.FREIGHT_INV_DATE;
	            other.FREIGHT_CHARGE_TO_BE_PAID = this.FREIGHT_CHARGE_TO_BE_PAID;
	            other.FREIGHT_CASH_DISC = this.FREIGHT_CASH_DISC;
	            other.FREIGHT_QTY_TO_BE_PAID = this.FREIGHT_QTY_TO_BE_PAID;
	            other.FREIGHT_CLAIM_QTY = this.FREIGHT_CLAIM_QTY;
	            other.LOAD_CTRL_NO = this.LOAD_CTRL_NO;
	            other.SPLIT_PO_FLAG = this.SPLIT_PO_FLAG;
	            other.TRUE_VENDOR = this.TRUE_VENDOR;
	            other.MANIFEST_HIST_MFG_NO = this.MANIFEST_HIST_MFG_NO;
	            other.NOTE1 = this.NOTE1;
	            other.TRUE_VENDOR_SHIP_FROM = this.TRUE_VENDOR_SHIP_FROM;
	            other.LAST_QTY_SENT_TO_DPR = this.LAST_QTY_SENT_TO_DPR;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.V4PF_SVOP = this.V4PF_SVOP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.ORIG_UNLOAD_CHARGE_PER_ITEM = this.ORIG_UNLOAD_CHARGE_PER_ITEM;
	            other.CONF_UNLOAD_CHARGE_PER_ITEM = this.CONF_UNLOAD_CHARGE_PER_ITEM;
	            
	}

	public void copyKeysDataTo(PURCHASE_ORDER_DETAIL_UPDATE_3Struct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            	other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",SMS_MAJ_LINE_NO="+String.valueOf(SMS_MAJ_LINE_NO));
		sb.append(",SMS_MIN_LINE_NO="+String.valueOf(SMS_MIN_LINE_NO));
		sb.append(",VENDOR_CLASSIFICATION="+VENDOR_CLASSIFICATION);
		sb.append(",SHIPPING_POINT_SHIP_FROM="+String.valueOf(SHIPPING_POINT_SHIP_FROM));
		sb.append(",BUYING_GROUP="+String.valueOf(BUYING_GROUP));
		sb.append(",CUST_PREF_VENDOR="+CUST_PREF_VENDOR);
		sb.append(",SOURCE_VENDOR="+SOURCE_VENDOR);
		sb.append(",VENDOR_TERMS="+VENDOR_TERMS);
		sb.append(",PO_PRIMARY_STATUS="+PO_PRIMARY_STATUS);
		sb.append(",PO_SECONDARY_STATUS="+PO_SECONDARY_STATUS);
		sb.append(",PO_TYPE="+PO_TYPE);
		sb.append(",WHSE_CHANGE_CODE="+WHSE_CHANGE_CODE);
		sb.append(",CONF_STATUS="+CONF_STATUS);
		sb.append(",PO_VALID_PRICING_FLAG="+PO_VALID_PRICING_FLAG);
		sb.append(",PO_VALID_PRICING_APPROVAL="+PO_VALID_PRICING_APPROVAL);
		sb.append(",PO_CHANGED_FLAG="+PO_CHANGED_FLAG);
		sb.append(",ALLOC_SCHEDULED_RECEIPT_FLAG="+ALLOC_SCHEDULED_RECEIPT_FLAG);
		sb.append(",PRICE_OVERRIDE_FLAG="+PRICE_OVERRIDE_FLAG);
		sb.append(",MARKED_BY_MERCHANDISER_FLAG="+MARKED_BY_MERCHANDISER_FLAG);
		sb.append(",FAILED_SCORECARD_FLAG="+FAILED_SCORECARD_FLAG);
		sb.append(",MANUALLY_ENTERED_LINE_FLAG="+MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CALENDAR_DATE_ANTICIPATED_RECEIPT="+String.valueOf(CALENDAR_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_DATE_SCHEDULED_RECEIPT_DATE="+String.valueOf(CALENDAR_DATE_SCHEDULED_RECEIPT_DATE));
		sb.append(",BUSINESS_DATE_ANTICIPATED_RECEIPT="+String.valueOf(BUSINESS_DATE_ANTICIPATED_RECEIPT));
		sb.append(",AVAIL_TIMESTAMP="+String.valueOf(AVAIL_TIMESTAMP));
		sb.append(",BUSINESS_ORDER_DATE="+String.valueOf(BUSINESS_ORDER_DATE));
		sb.append(",SUGGESTED_ORDER_QTY="+String.valueOf(SUGGESTED_ORDER_QTY));
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",CUST_ORDER_NO="+String.valueOf(CUST_ORDER_NO));
		sb.append(",CUST_ORDER_LINE_NO="+String.valueOf(CUST_ORDER_LINE_NO));
		sb.append(",ORIG_ORDER_QTY="+String.valueOf(ORIG_ORDER_QTY));
		sb.append(",ORIG_FOB_PER_ITEM="+String.valueOf(ORIG_FOB_PER_ITEM));
		sb.append(",ORIG_FREIGHT_PER_ITEM="+String.valueOf(ORIG_FREIGHT_PER_ITEM));
		sb.append(",ORIG_AP_PER_ITEM="+String.valueOf(ORIG_AP_PER_ITEM));
		sb.append(",ORIG_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(ORIG_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",ORIG_PICKUP_ALLOW_TYPE_OVERRIDE="+ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",ORIG_FREIGHT_RATE_OVERRIDE="+String.valueOf(ORIG_FREIGHT_RATE_OVERRIDE));
		sb.append(",ORIG_FREIGHT_TYPE_OVERRIDE="+ORIG_FREIGHT_TYPE_OVERRIDE);
		sb.append(",ORIG_PICKUP_ALLOW_PER_ITEM="+String.valueOf(ORIG_PICKUP_ALLOW_PER_ITEM));
		sb.append(",ORIG_OFF_INV_ALLOW="+String.valueOf(ORIG_OFF_INV_ALLOW));
		sb.append(",ORIG_UOM="+ORIG_UOM);
		sb.append(",ORIG_ALT_DELV_PRICE="+String.valueOf(ORIG_ALT_DELV_PRICE));
		sb.append(",ORIG_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_MERCH_ALLOW_CHARGE));
		sb.append(",ORIG_FREIGHT_ALLOW_CHARGE="+String.valueOf(ORIG_FREIGHT_ALLOW_CHARGE));
		sb.append(",ALLOC_QTY="+String.valueOf(ALLOC_QTY));
		sb.append(",ALLOC_QTY_SPLITS="+String.valueOf(ALLOC_QTY_SPLITS));
		sb.append(",INV_UNIT_PRICE="+String.valueOf(INV_UNIT_PRICE));
		sb.append(",FREE_GOODS_FLAG="+FREE_GOODS_FLAG);
		sb.append(",VENDOR_PRICE_LIST_UOM="+VENDOR_PRICE_LIST_UOM);
		sb.append(",CONFIRMED_ORDER_QTY="+String.valueOf(CONFIRMED_ORDER_QTY));
		sb.append(",CONFIRMED_FOB_PER_ITEM="+String.valueOf(CONFIRMED_FOB_PER_ITEM));
		sb.append(",CONFIRMED_FREIGHT_PER_ITEM="+String.valueOf(CONFIRMED_FREIGHT_PER_ITEM));
		sb.append(",CONFIRMED_AP_PER_ITEM="+String.valueOf(CONFIRMED_AP_PER_ITEM));
		sb.append(",CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE="+CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_FREIGHT_RATE_OVERRIDE="+String.valueOf(CONFIRMED_FREIGHT_RATE_OVERRIDE));
		sb.append(",CONFIRMED_FREIGHT_TYPE_OVERRIDE="+CONFIRMED_FREIGHT_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_PER_ITEM="+String.valueOf(CONFIRMED_PICKUP_ALLOW_PER_ITEM));
		sb.append(",CONFIRMED_OFF_INV_ALLOW="+String.valueOf(CONFIRMED_OFF_INV_ALLOW));
		sb.append(",CONFIRMED_UOM="+CONFIRMED_UOM);
		sb.append(",CONFIRMED_ALT_DELV_PRICE="+String.valueOf(CONFIRMED_ALT_DELV_PRICE));
		sb.append(",CONF_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(CONF_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",CONF_DIST_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONF_DIST_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_MRPT="+String.valueOf(CONFIRMED_MRPT));
		sb.append(",CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG="+CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CONFIRMED_PRICE_OVERRIDE_FLAG="+CONFIRMED_PRICE_OVERRIDE_FLAG);
		sb.append(",CARRIER_SHORT_QTY="+String.valueOf(CARRIER_SHORT_QTY));
		sb.append(",RECVD_DAMAGED_ACCEPTED_QTY="+String.valueOf(RECVD_DAMAGED_ACCEPTED_QTY));
		sb.append(",RECVD_QTY="+String.valueOf(RECVD_QTY));
		sb.append(",VENDOR_SHORT_QTY="+String.valueOf(VENDOR_SHORT_QTY));
		sb.append(",CARRIER_SHORT_REASON_CODE="+CARRIER_SHORT_REASON_CODE);
		sb.append(",VENDOR_SHORT_REASON_CODE="+VENDOR_SHORT_REASON_CODE);
		sb.append(",RECVD_WGT="+String.valueOf(RECVD_WGT));
		sb.append(",DAMAGED_RECVD_WGT="+String.valueOf(DAMAGED_RECVD_WGT));
		sb.append(",REVISED_PROFORMA_FLAG="+REVISED_PROFORMA_FLAG);
		sb.append(",FREIGHT_PROFORMA_STATUS="+FREIGHT_PROFORMA_STATUS);
		sb.append(",MERCH_PROFORMA_STATUS="+MERCH_PROFORMA_STATUS);
		sb.append(",MERCH_EXT_AMT_TOBE_PAID="+String.valueOf(MERCH_EXT_AMT_TOBE_PAID));
		sb.append(",MERCH_INV_DATE="+String.valueOf(MERCH_INV_DATE));
		sb.append(",MERCH_INV_NO="+MERCH_INV_NO);
		sb.append(",MERCH_PRICE_DIFF_STATUS="+MERCH_PRICE_DIFF_STATUS);
		sb.append(",MERCH_QTY_DIFF_STATUS="+MERCH_QTY_DIFF_STATUS);
		sb.append(",MERCH_QTY_TO_BE_PAID="+String.valueOf(MERCH_QTY_TO_BE_PAID));
		sb.append(",MERCH_WGT_TO_BE_PAID="+String.valueOf(MERCH_WGT_TO_BE_PAID));
		sb.append(",MERCH_CASH_DISC="+String.valueOf(MERCH_CASH_DISC));
		sb.append(",FREIGHT_INV_NO="+FREIGHT_INV_NO);
		sb.append(",FREIGHT_EXT_AMT_TO_BE_PAID="+String.valueOf(FREIGHT_EXT_AMT_TO_BE_PAID));
		sb.append(",FREIGHT_INV_DATE="+String.valueOf(FREIGHT_INV_DATE));
		sb.append(",FREIGHT_CHARGE_TO_BE_PAID="+String.valueOf(FREIGHT_CHARGE_TO_BE_PAID));
		sb.append(",FREIGHT_CASH_DISC="+String.valueOf(FREIGHT_CASH_DISC));
		sb.append(",FREIGHT_QTY_TO_BE_PAID="+String.valueOf(FREIGHT_QTY_TO_BE_PAID));
		sb.append(",FREIGHT_CLAIM_QTY="+String.valueOf(FREIGHT_CLAIM_QTY));
		sb.append(",LOAD_CTRL_NO="+LOAD_CTRL_NO);
		sb.append(",SPLIT_PO_FLAG="+SPLIT_PO_FLAG);
		sb.append(",TRUE_VENDOR="+TRUE_VENDOR);
		sb.append(",MANIFEST_HIST_MFG_NO="+MANIFEST_HIST_MFG_NO);
		sb.append(",NOTE1="+NOTE1);
		sb.append(",TRUE_VENDOR_SHIP_FROM="+String.valueOf(TRUE_VENDOR_SHIP_FROM));
		sb.append(",LAST_QTY_SENT_TO_DPR="+String.valueOf(LAST_QTY_SENT_TO_DPR));
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",V4PF_SVOP="+V4PF_SVOP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",ORIG_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(ORIG_UNLOAD_CHARGE_PER_ITEM));
		sb.append(",CONF_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(CONF_UNLOAD_CHARGE_PER_ITEM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PURCHASE_ORDER_DETAIL_UPDATE_3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MAJ_LINE_NO, other.SMS_MAJ_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MIN_LINE_NO, other.SMS_MIN_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public String V4PO;

				public String getV4PO () {
					return this.V4PO;
				}
				
			    public String V4ITEM;

				public String getV4ITEM () {
					return this.V4ITEM;
				}
				
			    public BigDecimal V4ROSQ;

				public BigDecimal getV4ROSQ () {
					return this.V4ROSQ;
				}
				
			    public String V4OWID;

				public String getV4OWID () {
					return this.V4OWID;
				}
				
			    public String V4ARCO;

				public String getV4ARCO () {
					return this.V4ARCO;
				}
				
			    public String V4MNPC;

				public String getV4MNPC () {
					return this.V4MNPC;
				}
				
			    public String V4MUPC;

				public String getV4MUPC () {
					return this.V4MUPC;
				}
				
			    public String V4ITDS;

				public String getV4ITDS () {
					return this.V4ITDS;
				}
				
			    public String V4VCAT;

				public String getV4VCAT () {
					return this.V4VCAT;
				}
				
			    public String V4VNBR;

				public String getV4VNBR () {
					return this.V4VNBR;
				}
				
			    public BigDecimal V4ADCD;

				public BigDecimal getV4ADCD () {
					return this.V4ADCD;
				}
				
			    public BigDecimal V4BYGP;

				public BigDecimal getV4BYGP () {
					return this.V4BYGP;
				}
				
			    public String V4CPVN;

				public String getV4CPVN () {
					return this.V4CPVN;
				}
				
			    public String V4PVND;

				public String getV4PVND () {
					return this.V4PVND;
				}
				
			    public String V4TERM;

				public String getV4TERM () {
					return this.V4TERM;
				}
				
			    public String V4POST;

				public String getV4POST () {
					return this.V4POST;
				}
				
			    public String V4POSS;

				public String getV4POSS () {
					return this.V4POSS;
				}
				
			    public String V4ORTY;

				public String getV4ORTY () {
					return this.V4ORTY;
				}
				
			    public String V4WCCD;

				public String getV4WCCD () {
					return this.V4WCCD;
				}
				
			    public String V4CFST;

				public String getV4CFST () {
					return this.V4CFST;
				}
				
			    public String V4WHSE;

				public String getV4WHSE () {
					return this.V4WHSE;
				}
				
			    public String V4VLPF;

				public String getV4VLPF () {
					return this.V4VLPF;
				}
				
			    public String V4VLPA;

				public String getV4VLPA () {
					return this.V4VLPA;
				}
				
			    public String V4POCH;

				public String getV4POCH () {
					return this.V4POCH;
				}
				
			    public String V4KMFG;

				public String getV4KMFG () {
					return this.V4KMFG;
				}
				
			    public String V4ASRF;

				public String getV4ASRF () {
					return this.V4ASRF;
				}
				
			    public String V4POFL;

				public String getV4POFL () {
					return this.V4POFL;
				}
				
			    public String V4MKMF;

				public String getV4MKMF () {
					return this.V4MKMF;
				}
				
			    public String V4FSCF;

				public String getV4FSCF () {
					return this.V4FSCF;
				}
				
			    public String V4MELN;

				public String getV4MELN () {
					return this.V4MELN;
				}
				
			    public String V4IPCF;

				public String getV4IPCF () {
					return this.V4IPCF;
				}
				
			    public BigDecimal V4ARBD;

				public BigDecimal getV4ARBD () {
					return this.V4ARBD;
				}
				
			    public BigDecimal V4PSRD;

				public BigDecimal getV4PSRD () {
					return this.V4PSRD;
				}
				
			    public BigDecimal V4ARDE;

				public BigDecimal getV4ARDE () {
					return this.V4ARDE;
				}
				
			    public BigDecimal V4AVDT;

				public BigDecimal getV4AVDT () {
					return this.V4AVDT;
				}
				
			    public BigDecimal V4AVTM;

				public BigDecimal getV4AVTM () {
					return this.V4AVTM;
				}
				
			    public BigDecimal V4ORDT;

				public BigDecimal getV4ORDT () {
					return this.V4ORDT;
				}
				
			    public BigDecimal V4PSOQ;

				public BigDecimal getV4PSOQ () {
					return this.V4PSOQ;
				}
				
			    public String V4CUNO;

				public String getV4CUNO () {
					return this.V4CUNO;
				}
				
			    public BigDecimal V4ORNO;

				public BigDecimal getV4ORNO () {
					return this.V4ORNO;
				}
				
			    public BigDecimal V4ODLN;

				public BigDecimal getV4ODLN () {
					return this.V4ODLN;
				}
				
			    public String V4ITCI;

				public String getV4ITCI () {
					return this.V4ITCI;
				}
				
			    public BigDecimal V4POOQ;

				public BigDecimal getV4POOQ () {
					return this.V4POOQ;
				}
				
			    public BigDecimal V4POFB;

				public BigDecimal getV4POFB () {
					return this.V4POFB;
				}
				
			    public BigDecimal V4POFR;

				public BigDecimal getV4POFR () {
					return this.V4POFR;
				}
				
			    public BigDecimal V4POAP;

				public BigDecimal getV4POAP () {
					return this.V4POAP;
				}
				
			    public BigDecimal V4IPUO;

				public BigDecimal getV4IPUO () {
					return this.V4IPUO;
				}
				
			    public String V4IPUT;

				public String getV4IPUT () {
					return this.V4IPUT;
				}
				
			    public BigDecimal V4IFRO;

				public BigDecimal getV4IFRO () {
					return this.V4IFRO;
				}
				
			    public String V4IFRT;

				public String getV4IFRT () {
					return this.V4IFRT;
				}
				
			    public BigDecimal V4BDPI;

				public BigDecimal getV4BDPI () {
					return this.V4BDPI;
				}
				
			    public BigDecimal V4PAPI;

				public BigDecimal getV4PAPI () {
					return this.V4PAPI;
				}
				
			    public BigDecimal V4POAL;

				public BigDecimal getV4POAL () {
					return this.V4POAL;
				}
				
			    public String V4POUM;

				public String getV4POUM () {
					return this.V4POUM;
				}
				
			    public BigDecimal V4OUCI;

				public BigDecimal getV4OUCI () {
					return this.V4OUCI;
				}
				
			    public BigDecimal V4OADP;

				public BigDecimal getV4OADP () {
					return this.V4OADP;
				}
				
			    public BigDecimal V4ACDM;

				public BigDecimal getV4ACDM () {
					return this.V4ACDM;
				}
				
			    public BigDecimal V4ACDF;

				public BigDecimal getV4ACDF () {
					return this.V4ACDF;
				}
				
			    public BigDecimal V4ALQY;

				public BigDecimal getV4ALQY () {
					return this.V4ALQY;
				}
				
			    public BigDecimal V4ALQS;

				public BigDecimal getV4ALQS () {
					return this.V4ALQS;
				}
				
			    public BigDecimal V4MRPR;

				public BigDecimal getV4MRPR () {
					return this.V4MRPR;
				}
				
			    public BigDecimal V4IUPR;

				public BigDecimal getV4IUPR () {
					return this.V4IUPR;
				}
				
			    public String V4FEGD;

				public String getV4FEGD () {
					return this.V4FEGD;
				}
				
			    public String V4VPUM;

				public String getV4VPUM () {
					return this.V4VPUM;
				}
				
			    public BigDecimal V4PCOQ;

				public BigDecimal getV4PCOQ () {
					return this.V4PCOQ;
				}
				
			    public BigDecimal V4PCFB;

				public BigDecimal getV4PCFB () {
					return this.V4PCFB;
				}
				
			    public BigDecimal V4PCFR;

				public BigDecimal getV4PCFR () {
					return this.V4PCFR;
				}
				
			    public BigDecimal V4PCAP;

				public BigDecimal getV4PCAP () {
					return this.V4PCAP;
				}
				
			    public BigDecimal V4CPAL;

				public BigDecimal getV4CPAL () {
					return this.V4CPAL;
				}
				
			    public String V4CPUT;

				public String getV4CPUT () {
					return this.V4CPUT;
				}
				
			    public BigDecimal V4CFRO;

				public BigDecimal getV4CFRO () {
					return this.V4CFRO;
				}
				
			    public String V4CFTO;

				public String getV4CFTO () {
					return this.V4CFTO;
				}
				
			    public BigDecimal V4CPAP;

				public BigDecimal getV4CPAP () {
					return this.V4CPAP;
				}
				
			    public BigDecimal V4CBDP;

				public BigDecimal getV4CBDP () {
					return this.V4CBDP;
				}
				
			    public BigDecimal V4COIN;

				public BigDecimal getV4COIN () {
					return this.V4COIN;
				}
				
			    public String V4CUOM;

				public String getV4CUOM () {
					return this.V4CUOM;
				}
				
			    public BigDecimal V4CUCI;

				public BigDecimal getV4CUCI () {
					return this.V4CUCI;
				}
				
			    public BigDecimal V4CADP;

				public BigDecimal getV4CADP () {
					return this.V4CADP;
				}
				
			    public BigDecimal V4CACM;

				public BigDecimal getV4CACM () {
					return this.V4CACM;
				}
				
			    public BigDecimal V4CACF;

				public BigDecimal getV4CACF () {
					return this.V4CACF;
				}
				
			    public BigDecimal V4CMRP;

				public BigDecimal getV4CMRP () {
					return this.V4CMRP;
				}
				
			    public String V4CMEF;

				public String getV4CMEF () {
					return this.V4CMEF;
				}
				
			    public String V4CFTP;

				public String getV4CFTP () {
					return this.V4CFTP;
				}
				
			    public String V4CPOF;

				public String getV4CPOF () {
					return this.V4CPOF;
				}
				
			    public BigDecimal V4QYSH;

				public BigDecimal getV4QYSH () {
					return this.V4QYSH;
				}
				
			    public BigDecimal V4QYDA;

				public BigDecimal getV4QYDA () {
					return this.V4QYDA;
				}
				
			    public BigDecimal V4RCQT;

				public BigDecimal getV4RCQT () {
					return this.V4RCQT;
				}
				
			    public BigDecimal V4VSQY;

				public BigDecimal getV4VSQY () {
					return this.V4VSQY;
				}
				
			    public String V4CSRC;

				public String getV4CSRC () {
					return this.V4CSRC;
				}
				
			    public String V4VSRC;

				public String getV4VSRC () {
					return this.V4VSRC;
				}
				
			    public BigDecimal V4RVWT;

				public BigDecimal getV4RVWT () {
					return this.V4RVWT;
				}
				
			    public BigDecimal V4RVWK;

				public BigDecimal getV4RVWK () {
					return this.V4RVWK;
				}
				
			    public BigDecimal V4DRWT;

				public BigDecimal getV4DRWT () {
					return this.V4DRWT;
				}
				
			    public BigDecimal V4DRWK;

				public BigDecimal getV4DRWK () {
					return this.V4DRWK;
				}
				
			    public String V4RPFF;

				public String getV4RPFF () {
					return this.V4RPFF;
				}
				
			    public String V4PPFS;

				public String getV4PPFS () {
					return this.V4PPFS;
				}
				
			    public String V4PMPS;

				public String getV4PMPS () {
					return this.V4PMPS;
				}
				
			    public BigDecimal V4MEAP;

				public BigDecimal getV4MEAP () {
					return this.V4MEAP;
				}
				
			    public BigDecimal V4MIDT;

				public BigDecimal getV4MIDT () {
					return this.V4MIDT;
				}
				
			    public String V4MINV;

				public String getV4MINV () {
					return this.V4MINV;
				}
				
			    public String V4MPDD;

				public String getV4MPDD () {
					return this.V4MPDD;
				}
				
			    public String V4MQDD;

				public String getV4MQDD () {
					return this.V4MQDD;
				}
				
			    public BigDecimal V4MRQT;

				public BigDecimal getV4MRQT () {
					return this.V4MRQT;
				}
				
			    public BigDecimal V4MRCW;

				public BigDecimal getV4MRCW () {
					return this.V4MRCW;
				}
				
			    public BigDecimal V4MRCK;

				public BigDecimal getV4MRCK () {
					return this.V4MRCK;
				}
				
			    public BigDecimal V4PFMM;

				public BigDecimal getV4PFMM () {
					return this.V4PFMM;
				}
				
			    public BigDecimal V4MCSD;

				public BigDecimal getV4MCSD () {
					return this.V4MCSD;
				}
				
			    public String V4FINV;

				public String getV4FINV () {
					return this.V4FINV;
				}
				
			    public BigDecimal V4FEAP;

				public BigDecimal getV4FEAP () {
					return this.V4FEAP;
				}
				
			    public BigDecimal V4FIDT;

				public BigDecimal getV4FIDT () {
					return this.V4FIDT;
				}
				
			    public BigDecimal V4FRCW;

				public BigDecimal getV4FRCW () {
					return this.V4FRCW;
				}
				
			    public BigDecimal V4FCAD;

				public BigDecimal getV4FCAD () {
					return this.V4FCAD;
				}
				
			    public BigDecimal V4FRQT;

				public BigDecimal getV4FRQT () {
					return this.V4FRQT;
				}
				
			    public BigDecimal V4PFMD;

				public BigDecimal getV4PFMD () {
					return this.V4PFMD;
				}
				
			    public BigDecimal V4FTCQ;

				public BigDecimal getV4FTCQ () {
					return this.V4FTCQ;
				}
				
			    public String V4LCN;

				public String getV4LCN () {
					return this.V4LCN;
				}
				
			    public String V4SPOF;

				public String getV4SPOF () {
					return this.V4SPOF;
				}
				
			    public BigDecimal V4PCLN;

				public BigDecimal getV4PCLN () {
					return this.V4PCLN;
				}
				
			    public String V4MFVN;

				public String getV4MFVN () {
					return this.V4MFVN;
				}
				
			    public String V4MFID;

				public String getV4MFID () {
					return this.V4MFID;
				}
				
			    public String V4ERRF;

				public String getV4ERRF () {
					return this.V4ERRF;
				}
				
			    public String V4IMCC;

				public String getV4IMCC () {
					return this.V4IMCC;
				}
				
			    public String V4COD1;

				public String getV4COD1 () {
					return this.V4COD1;
				}
				
			    public String V4NTYP;

				public String getV4NTYP () {
					return this.V4NTYP;
				}
				
			    public BigDecimal V4TDCD;

				public BigDecimal getV4TDCD () {
					return this.V4TDCD;
				}
				
			    public BigDecimal V4QTIF;

				public BigDecimal getV4QTIF () {
					return this.V4QTIF;
				}
				
			    public BigDecimal V4EADT;

				public BigDecimal getV4EADT () {
					return this.V4EADT;
				}
				
			    public BigDecimal V4EATM;

				public BigDecimal getV4EATM () {
					return this.V4EATM;
				}
				
			    public String V4EAID;

				public String getV4EAID () {
					return this.V4EAID;
				}
				
			    public BigDecimal V4MODT;

				public BigDecimal getV4MODT () {
					return this.V4MODT;
				}
				
			    public BigDecimal V4MOTM;

				public BigDecimal getV4MOTM () {
					return this.V4MOTM;
				}
				
			    public String V4MOID;

				public String getV4MOID () {
					return this.V4MOID;
				}
				
			    public String V4MOPG;

				public String getV4MOPG () {
					return this.V4MOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("V4PO="+V4PO);
		sb.append(",V4ITEM="+V4ITEM);
		sb.append(",V4ROSQ="+String.valueOf(V4ROSQ));
		sb.append(",V4OWID="+V4OWID);
		sb.append(",V4ARCO="+V4ARCO);
		sb.append(",V4MNPC="+V4MNPC);
		sb.append(",V4MUPC="+V4MUPC);
		sb.append(",V4ITDS="+V4ITDS);
		sb.append(",V4VCAT="+V4VCAT);
		sb.append(",V4VNBR="+V4VNBR);
		sb.append(",V4ADCD="+String.valueOf(V4ADCD));
		sb.append(",V4BYGP="+String.valueOf(V4BYGP));
		sb.append(",V4CPVN="+V4CPVN);
		sb.append(",V4PVND="+V4PVND);
		sb.append(",V4TERM="+V4TERM);
		sb.append(",V4POST="+V4POST);
		sb.append(",V4POSS="+V4POSS);
		sb.append(",V4ORTY="+V4ORTY);
		sb.append(",V4WCCD="+V4WCCD);
		sb.append(",V4CFST="+V4CFST);
		sb.append(",V4WHSE="+V4WHSE);
		sb.append(",V4VLPF="+V4VLPF);
		sb.append(",V4VLPA="+V4VLPA);
		sb.append(",V4POCH="+V4POCH);
		sb.append(",V4KMFG="+V4KMFG);
		sb.append(",V4ASRF="+V4ASRF);
		sb.append(",V4POFL="+V4POFL);
		sb.append(",V4MKMF="+V4MKMF);
		sb.append(",V4FSCF="+V4FSCF);
		sb.append(",V4MELN="+V4MELN);
		sb.append(",V4IPCF="+V4IPCF);
		sb.append(",V4ARBD="+String.valueOf(V4ARBD));
		sb.append(",V4PSRD="+String.valueOf(V4PSRD));
		sb.append(",V4ARDE="+String.valueOf(V4ARDE));
		sb.append(",V4AVDT="+String.valueOf(V4AVDT));
		sb.append(",V4AVTM="+String.valueOf(V4AVTM));
		sb.append(",V4ORDT="+String.valueOf(V4ORDT));
		sb.append(",V4PSOQ="+String.valueOf(V4PSOQ));
		sb.append(",V4CUNO="+V4CUNO);
		sb.append(",V4ORNO="+String.valueOf(V4ORNO));
		sb.append(",V4ODLN="+String.valueOf(V4ODLN));
		sb.append(",V4ITCI="+V4ITCI);
		sb.append(",V4POOQ="+String.valueOf(V4POOQ));
		sb.append(",V4POFB="+String.valueOf(V4POFB));
		sb.append(",V4POFR="+String.valueOf(V4POFR));
		sb.append(",V4POAP="+String.valueOf(V4POAP));
		sb.append(",V4IPUO="+String.valueOf(V4IPUO));
		sb.append(",V4IPUT="+V4IPUT);
		sb.append(",V4IFRO="+String.valueOf(V4IFRO));
		sb.append(",V4IFRT="+V4IFRT);
		sb.append(",V4BDPI="+String.valueOf(V4BDPI));
		sb.append(",V4PAPI="+String.valueOf(V4PAPI));
		sb.append(",V4POAL="+String.valueOf(V4POAL));
		sb.append(",V4POUM="+V4POUM);
		sb.append(",V4OUCI="+String.valueOf(V4OUCI));
		sb.append(",V4OADP="+String.valueOf(V4OADP));
		sb.append(",V4ACDM="+String.valueOf(V4ACDM));
		sb.append(",V4ACDF="+String.valueOf(V4ACDF));
		sb.append(",V4ALQY="+String.valueOf(V4ALQY));
		sb.append(",V4ALQS="+String.valueOf(V4ALQS));
		sb.append(",V4MRPR="+String.valueOf(V4MRPR));
		sb.append(",V4IUPR="+String.valueOf(V4IUPR));
		sb.append(",V4FEGD="+V4FEGD);
		sb.append(",V4VPUM="+V4VPUM);
		sb.append(",V4PCOQ="+String.valueOf(V4PCOQ));
		sb.append(",V4PCFB="+String.valueOf(V4PCFB));
		sb.append(",V4PCFR="+String.valueOf(V4PCFR));
		sb.append(",V4PCAP="+String.valueOf(V4PCAP));
		sb.append(",V4CPAL="+String.valueOf(V4CPAL));
		sb.append(",V4CPUT="+V4CPUT);
		sb.append(",V4CFRO="+String.valueOf(V4CFRO));
		sb.append(",V4CFTO="+V4CFTO);
		sb.append(",V4CPAP="+String.valueOf(V4CPAP));
		sb.append(",V4CBDP="+String.valueOf(V4CBDP));
		sb.append(",V4COIN="+String.valueOf(V4COIN));
		sb.append(",V4CUOM="+V4CUOM);
		sb.append(",V4CUCI="+String.valueOf(V4CUCI));
		sb.append(",V4CADP="+String.valueOf(V4CADP));
		sb.append(",V4CACM="+String.valueOf(V4CACM));
		sb.append(",V4CACF="+String.valueOf(V4CACF));
		sb.append(",V4CMRP="+String.valueOf(V4CMRP));
		sb.append(",V4CMEF="+V4CMEF);
		sb.append(",V4CFTP="+V4CFTP);
		sb.append(",V4CPOF="+V4CPOF);
		sb.append(",V4QYSH="+String.valueOf(V4QYSH));
		sb.append(",V4QYDA="+String.valueOf(V4QYDA));
		sb.append(",V4RCQT="+String.valueOf(V4RCQT));
		sb.append(",V4VSQY="+String.valueOf(V4VSQY));
		sb.append(",V4CSRC="+V4CSRC);
		sb.append(",V4VSRC="+V4VSRC);
		sb.append(",V4RVWT="+String.valueOf(V4RVWT));
		sb.append(",V4RVWK="+String.valueOf(V4RVWK));
		sb.append(",V4DRWT="+String.valueOf(V4DRWT));
		sb.append(",V4DRWK="+String.valueOf(V4DRWK));
		sb.append(",V4RPFF="+V4RPFF);
		sb.append(",V4PPFS="+V4PPFS);
		sb.append(",V4PMPS="+V4PMPS);
		sb.append(",V4MEAP="+String.valueOf(V4MEAP));
		sb.append(",V4MIDT="+String.valueOf(V4MIDT));
		sb.append(",V4MINV="+V4MINV);
		sb.append(",V4MPDD="+V4MPDD);
		sb.append(",V4MQDD="+V4MQDD);
		sb.append(",V4MRQT="+String.valueOf(V4MRQT));
		sb.append(",V4MRCW="+String.valueOf(V4MRCW));
		sb.append(",V4MRCK="+String.valueOf(V4MRCK));
		sb.append(",V4PFMM="+String.valueOf(V4PFMM));
		sb.append(",V4MCSD="+String.valueOf(V4MCSD));
		sb.append(",V4FINV="+V4FINV);
		sb.append(",V4FEAP="+String.valueOf(V4FEAP));
		sb.append(",V4FIDT="+String.valueOf(V4FIDT));
		sb.append(",V4FRCW="+String.valueOf(V4FRCW));
		sb.append(",V4FCAD="+String.valueOf(V4FCAD));
		sb.append(",V4FRQT="+String.valueOf(V4FRQT));
		sb.append(",V4PFMD="+String.valueOf(V4PFMD));
		sb.append(",V4FTCQ="+String.valueOf(V4FTCQ));
		sb.append(",V4LCN="+V4LCN);
		sb.append(",V4SPOF="+V4SPOF);
		sb.append(",V4PCLN="+String.valueOf(V4PCLN));
		sb.append(",V4MFVN="+V4MFVN);
		sb.append(",V4MFID="+V4MFID);
		sb.append(",V4ERRF="+V4ERRF);
		sb.append(",V4IMCC="+V4IMCC);
		sb.append(",V4COD1="+V4COD1);
		sb.append(",V4NTYP="+V4NTYP);
		sb.append(",V4TDCD="+String.valueOf(V4TDCD));
		sb.append(",V4QTIF="+String.valueOf(V4QTIF));
		sb.append(",V4EADT="+String.valueOf(V4EADT));
		sb.append(",V4EATM="+String.valueOf(V4EATM));
		sb.append(",V4EAID="+V4EAID);
		sb.append(",V4MODT="+String.valueOf(V4MODT));
		sb.append(",V4MOTM="+String.valueOf(V4MOTM));
		sb.append(",V4MOID="+V4MOID);
		sb.append(",V4MOPG="+V4MOPG);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
PURCHASE_ORDER_DETAIL_UPDATE_3Struct PURCHASE_ORDER_DETAIL_UPDATE_3 = new PURCHASE_ORDER_DETAIL_UPDATE_3Struct();





	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_5");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PURCHASE_ORDER_DETAIL_UPDATE_3");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("PURCHASE_ORDER_DETAIL");
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("PURCHASE_ORDER_DETAIL");
}

        int updateKeyCount_tDBOutput_5 = 4;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_5 == 115 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_5 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_5 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_5 = context.GIM_Password; 

    String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

    conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5,dbUser_tDBOutput_5,dbPwd_tDBOutput_5);
	
	resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
        conn_tDBOutput_5.setAutoCommit(false);
        int commitEvery_tDBOutput_5 = 1;
        int commitCounter_tDBOutput_5 = 0;


   int batchSize_tDBOutput_5 = 1;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"VENDOR_CLASSIFICATION\" = ?,\"SHIPPING_POINT_SHIP_FROM\" = ?,\"BUYING_GROUP\" = ?,\"CUST_PREF_VENDOR\" = ?,\"SOURCE_VENDOR\" = ?,\"VENDOR_TERMS\" = ?,\"PO_PRIMARY_STATUS\" = ?,\"PO_SECONDARY_STATUS\" = ?,\"PO_TYPE\" = ?,\"WHSE_CHANGE_CODE\" = ?,\"CONF_STATUS\" = ?,\"PO_VALID_PRICING_FLAG\" = ?,\"PO_VALID_PRICING_APPROVAL\" = ?,\"PO_CHANGED_FLAG\" = ?,\"ALLOC_SCHEDULED_RECEIPT_FLAG\" = ?,\"PRICE_OVERRIDE_FLAG\" = ?,\"MARKED_BY_MERCHANDISER_FLAG\" = ?,\"FAILED_SCORECARD_FLAG\" = ?,\"MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CALENDAR_DATE_ANTICIPATED_RECEIPT\" = ?,\"CALENDAR_DATE_SCHEDULED_RECEIPT_DATE\" = ?,\"BUSINESS_DATE_ANTICIPATED_RECEIPT\" = ?,\"AVAIL_TIMESTAMP\" = ?,\"BUSINESS_ORDER_DATE\" = ?,\"SUGGESTED_ORDER_QTY\" = ?,\"SHIP_TO_CUST\" = ?,\"CUST_ORDER_NO\" = ?,\"CUST_ORDER_LINE_NO\" = ?,\"ORIG_ORDER_QTY\" = ?,\"ORIG_FOB_PER_ITEM\" = ?,\"ORIG_FREIGHT_PER_ITEM\" = ?,\"ORIG_AP_PER_ITEM\" = ?,\"ORIG_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"ORIG_FREIGHT_RATE_OVERRIDE\" = ?,\"ORIG_FREIGHT_TYPE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_PER_ITEM\" = ?,\"ORIG_OFF_INV_ALLOW\" = ?,\"ORIG_UOM\" = ?,\"ORIG_ALT_DELV_PRICE\" = ?,\"ORIG_MERCH_ALLOW_CHARGE\" = ?,\"ORIG_FREIGHT_ALLOW_CHARGE\" = ?,\"ALLOC_QTY\" = ?,\"ALLOC_QTY_SPLITS\" = ?,\"INV_UNIT_PRICE\" = ?,\"FREE_GOODS_FLAG\" = ?,\"VENDOR_PRICE_LIST_UOM\" = ?,\"CONFIRMED_ORDER_QTY\" = ?,\"CONFIRMED_FOB_PER_ITEM\" = ?,\"CONFIRMED_FREIGHT_PER_ITEM\" = ?,\"CONFIRMED_AP_PER_ITEM\" = ?,\"CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_RATE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_TYPE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_PER_ITEM\" = ?,\"CONFIRMED_OFF_INV_ALLOW\" = ?,\"CONFIRMED_UOM\" = ?,\"CONFIRMED_ALT_DELV_PRICE\" = ?,\"CONF_DIST_MERCH_ALLOW_CHARGE\" = ?,\"CONF_DIST_FREIGHT_ALLOW_CHARGE\" = ?,\"CONFIRMED_MRPT\" = ?,\"CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CONFIRMED_PRICE_OVERRIDE_FLAG\" = ?,\"CARRIER_SHORT_QTY\" = ?,\"RECVD_DAMAGED_ACCEPTED_QTY\" = ?,\"RECVD_QTY\" = ?,\"VENDOR_SHORT_QTY\" = ?,\"CARRIER_SHORT_REASON_CODE\" = ?,\"VENDOR_SHORT_REASON_CODE\" = ?,\"RECVD_WGT\" = ?,\"DAMAGED_RECVD_WGT\" = ?,\"REVISED_PROFORMA_FLAG\" = ?,\"FREIGHT_PROFORMA_STATUS\" = ?,\"MERCH_PROFORMA_STATUS\" = ?,\"MERCH_EXT_AMT_TOBE_PAID\" = ?,\"MERCH_INV_DATE\" = ?,\"MERCH_INV_NO\" = ?,\"MERCH_PRICE_DIFF_STATUS\" = ?,\"MERCH_QTY_DIFF_STATUS\" = ?,\"MERCH_QTY_TO_BE_PAID\" = ?,\"MERCH_WGT_TO_BE_PAID\" = ?,\"MERCH_CASH_DISC\" = ?,\"FREIGHT_INV_NO\" = ?,\"FREIGHT_EXT_AMT_TO_BE_PAID\" = ?,\"FREIGHT_INV_DATE\" = ?,\"FREIGHT_CHARGE_TO_BE_PAID\" = ?,\"FREIGHT_CASH_DISC\" = ?,\"FREIGHT_QTY_TO_BE_PAID\" = ?,\"FREIGHT_CLAIM_QTY\" = ?,\"LOAD_CTRL_NO\" = ?,\"SPLIT_PO_FLAG\" = ?,\"TRUE_VENDOR\" = ?,\"MANIFEST_HIST_MFG_NO\" = ?,\"NOTE1\" = ?,\"TRUE_VENDOR_SHIP_FROM\" = ?,\"LAST_QTY_SENT_TO_DPR\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"IS_ACTIVE\" = ?,\"V4PF_SVOP\" = ?,\"UPDATED_USER_ID\" = ?,\"UPDATED_PROGRAM_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"ORIG_UNLOAD_CHARGE_PER_ITEM\" = ?,\"CONF_UNLOAD_CHARGE_PER_ITEM\" = ? WHERE \"SITE_ID\" = ? AND \"PURCHASE_ORDER_NO\" = ? AND \"SMS_MAJ_LINE_NO\" = ? AND \"SMS_MIN_LINE_NO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
	String V4ARBD;
	String V4PSRD;
	String V4ARDE;
	String V4MIDT;
	String V4FIDT;
	String V4ORDT;
	String AVAIL_TIMESTAMP;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
PURCHASE_ORDER_DETAIL_UPDATE_3Struct PURCHASE_ORDER_DETAIL_UPDATE_3_tmp = new PURCHASE_ORDER_DETAIL_UPDATE_3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_5");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_5 = context.SUS_Password; 
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				  
				String url_tDBInput_5 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  IMHBV4PF.V4PO, \n  IMHBV4PF.V4ITEM, \n  IMHBV4PF.V4ROSQ, \n  IMHBV4PF.V4OWID, \n  IMHBV4PF.V4ARCO, \n  IMHBV"
+"4PF.V4MNPC, \n  IMHBV4PF.V4MUPC, \n  IMHBV4PF.V4ITDS, \n  IMHBV4PF.V4VCAT, \n  IMHBV4PF.V4VNBR, \n  IMHBV4PF.V4ADCD, \n "
+" IMHBV4PF.V4BYGP, \n  IMHBV4PF.V4CPVN, \n  IMHBV4PF.V4PVND, \n  IMHBV4PF.V4TERM, \n  IMHBV4PF.V4POST, \n  IMHBV4PF.V4POS"
+"S, \n  IMHBV4PF.V4ORTY, \n  IMHBV4PF.V4WCCD, \n  IMHBV4PF.V4CFST, \n  IMHBV4PF.V4WHSE, \n  IMHBV4PF.V4VLPF, \n  IMHBV4PF"
+".V4VLPA, \n  IMHBV4PF.V4POCH, \n  IMHBV4PF.V4KMFG, \n  IMHBV4PF.V4ASRF, \n  IMHBV4PF.V4POFL, \n  IMHBV4PF.V4MKMF, \n  IM"
+"HBV4PF.V4FSCF, \n  IMHBV4PF.V4MELN, \n  IMHBV4PF.V4IPCF, \n  IMHBV4PF.V4ARBD, \n  IMHBV4PF.V4PSRD, \n  IMHBV4PF.V4ARDE, "
+"\n  IMHBV4PF.V4AVDT, \n  IMHBV4PF.V4AVTM, \n  IMHBV4PF.V4ORDT, \n  IMHBV4PF.V4PSOQ, \n  IMHBV4PF.V4CUNO, \n  IMHBV4PF.V4"
+"ORNO, \n  IMHBV4PF.V4ODLN, \n  IMHBV4PF.V4ITCI, \n  IMHBV4PF.V4POOQ, \n  IMHBV4PF.V4POFB, \n  IMHBV4PF.V4POFR, \n  IMHBV"
+"4PF.V4POAP, \n  IMHBV4PF.V4IPUO, \n  IMHBV4PF.V4IPUT, \n  IMHBV4PF.V4IFRO, \n  IMHBV4PF.V4IFRT, \n  IMHBV4PF.V4BDPI, \n "
+" IMHBV4PF.V4PAPI, \n  IMHBV4PF.V4POAL, \n  IMHBV4PF.V4POUM, \n  IMHBV4PF.V4OUCI, \n  IMHBV4PF.V4OADP, \n  IMHBV4PF.V4ACD"
+"M, \n  IMHBV4PF.V4ACDF, \n  IMHBV4PF.V4ALQY, \n  IMHBV4PF.V4ALQS, \n  IMHBV4PF.V4MRPR, \n  IMHBV4PF.V4IUPR, \n  IMHBV4PF"
+".V4FEGD, \n  IMHBV4PF.V4VPUM, \n  IMHBV4PF.V4PCOQ, \n  IMHBV4PF.V4PCFB, \n  IMHBV4PF.V4PCFR, \n  IMHBV4PF.V4PCAP, \n  IM"
+"HBV4PF.V4CPAL, \n  IMHBV4PF.V4CPUT, \n  IMHBV4PF.V4CFRO, \n  IMHBV4PF.V4CFTO, \n  IMHBV4PF.V4CPAP, \n  IMHBV4PF.V4CBDP, "
+"\n  IMHBV4PF.V4COIN, \n  IMHBV4PF.V4CUOM, \n  IMHBV4PF.V4CUCI, \n  IMHBV4PF.V4CADP, \n  IMHBV4PF.V4CACM, \n  IMHBV4PF.V4"
+"CACF, \n  IMHBV4PF.V4CMRP, \n  IMHBV4PF.V4CMEF, \n  IMHBV4PF.V4CFTP, \n  IMHBV4PF.V4CPOF, \n  IMHBV4PF.V4QYSH, \n  IMHBV"
+"4PF.V4QYDA, \n  IMHBV4PF.V4RCQT, \n  IMHBV4PF.V4VSQY, \n  IMHBV4PF.V4CSRC, \n  IMHBV4PF.V4VSRC, \n  IMHBV4PF.V4RVWT, \n "
+" IMHBV4PF.V4RVWK, \n  IMHBV4PF.V4DRWT, \n  IMHBV4PF.V4DRWK, \n  IMHBV4PF.V4RPFF, \n  IMHBV4PF.V4PPFS, \n  IMHBV4PF.V4PMP"
+"S, \n  IMHBV4PF.V4MEAP, \n  IMHBV4PF.V4MIDT, \n  IMHBV4PF.V4MINV, \n  IMHBV4PF.V4MPDD, \n  IMHBV4PF.V4MQDD, \n  IMHBV4PF"
+".V4MRQT, \n  IMHBV4PF.V4MRCW, \n  IMHBV4PF.V4MRCK, \n  IMHBV4PF.V4PFMM, \n  IMHBV4PF.V4MCSD, \n  IMHBV4PF.V4FINV, \n  IM"
+"HBV4PF.V4FEAP, \n  IMHBV4PF.V4FIDT, \n  IMHBV4PF.V4FRCW, \n  IMHBV4PF.V4FCAD, \n  IMHBV4PF.V4FRQT, \n  IMHBV4PF.V4PFMD, "
+"\n  IMHBV4PF.V4FTCQ, \n  IMHBV4PF.V4LCN, \n  IMHBV4PF.V4SPOF, \n  IMHBV4PF.V4PCLN, \n  IMHBV4PF.V4MFVN, \n  IMHBV4PF.V4M"
+"FID, \n  IMHBV4PF.V4ERRF, \n  IMHBV4PF.V4IMCC, \n  IMHBV4PF.V4COD1, \n  IMHBV4PF.V4NTYP, \n  IMHBV4PF.V4TDCD, \n  IMHBV4"
+"PF.V4QTIF, \n  IMHBV4PF.V4EADT, \n  IMHBV4PF.V4EATM, \n  IMHBV4PF.V4EAID, \n  IMHBV4PF.V4MODT, \n  IMHBV4PF.V4MOTM, \n  "
+"IMHBV4PF.V4MOID, \n  IMHBV4PF.V4MOPG\nFROM IMHBV4PF WHERE IMHBV4PF.V4EADT BETWEEN 20220101 AND 20220331 \nORDER BY IMHBV"
+"4PF.V4EADT DESC";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row7.V4PO = null;
							} else {
	                         		
        	row7.V4PO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row7.V4ITEM = null;
							} else {
	                         		
        	row7.V4ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row7.V4ROSQ = null;
							} else {
		                          
            row7.V4ROSQ = rs_tDBInput_5.getBigDecimal(3);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row7.V4OWID = null;
							} else {
	                         		
        	row7.V4OWID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row7.V4ARCO = null;
							} else {
	                         		
        	row7.V4ARCO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row7.V4MNPC = null;
							} else {
	                         		
        	row7.V4MNPC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 6, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row7.V4MUPC = null;
							} else {
	                         		
        	row7.V4MUPC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 7, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row7.V4ITDS = null;
							} else {
	                         		
        	row7.V4ITDS = routines.system.JDBCUtil.getString(rs_tDBInput_5, 8, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row7.V4VCAT = null;
							} else {
	                         		
        	row7.V4VCAT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 9, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row7.V4VNBR = null;
							} else {
	                         		
        	row7.V4VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_5, 10, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row7.V4ADCD = null;
							} else {
		                          
            row7.V4ADCD = rs_tDBInput_5.getBigDecimal(11);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row7.V4BYGP = null;
							} else {
		                          
            row7.V4BYGP = rs_tDBInput_5.getBigDecimal(12);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row7.V4CPVN = null;
							} else {
	                         		
        	row7.V4CPVN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 13, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row7.V4PVND = null;
							} else {
	                         		
        	row7.V4PVND = routines.system.JDBCUtil.getString(rs_tDBInput_5, 14, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row7.V4TERM = null;
							} else {
	                         		
        	row7.V4TERM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 15, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row7.V4POST = null;
							} else {
	                         		
        	row7.V4POST = routines.system.JDBCUtil.getString(rs_tDBInput_5, 16, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row7.V4POSS = null;
							} else {
	                         		
        	row7.V4POSS = routines.system.JDBCUtil.getString(rs_tDBInput_5, 17, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row7.V4ORTY = null;
							} else {
	                         		
        	row7.V4ORTY = routines.system.JDBCUtil.getString(rs_tDBInput_5, 18, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row7.V4WCCD = null;
							} else {
	                         		
        	row7.V4WCCD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 19, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row7.V4CFST = null;
							} else {
	                         		
        	row7.V4CFST = routines.system.JDBCUtil.getString(rs_tDBInput_5, 20, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row7.V4WHSE = null;
							} else {
	                         		
        	row7.V4WHSE = routines.system.JDBCUtil.getString(rs_tDBInput_5, 21, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row7.V4VLPF = null;
							} else {
	                         		
        	row7.V4VLPF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 22, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 23) {
								row7.V4VLPA = null;
							} else {
	                         		
        	row7.V4VLPA = routines.system.JDBCUtil.getString(rs_tDBInput_5, 23, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 24) {
								row7.V4POCH = null;
							} else {
	                         		
        	row7.V4POCH = routines.system.JDBCUtil.getString(rs_tDBInput_5, 24, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 25) {
								row7.V4KMFG = null;
							} else {
	                         		
        	row7.V4KMFG = routines.system.JDBCUtil.getString(rs_tDBInput_5, 25, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 26) {
								row7.V4ASRF = null;
							} else {
	                         		
        	row7.V4ASRF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 26, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 27) {
								row7.V4POFL = null;
							} else {
	                         		
        	row7.V4POFL = routines.system.JDBCUtil.getString(rs_tDBInput_5, 27, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 28) {
								row7.V4MKMF = null;
							} else {
	                         		
        	row7.V4MKMF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 28, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 29) {
								row7.V4FSCF = null;
							} else {
	                         		
        	row7.V4FSCF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 29, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 30) {
								row7.V4MELN = null;
							} else {
	                         		
        	row7.V4MELN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 30, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 31) {
								row7.V4IPCF = null;
							} else {
	                         		
        	row7.V4IPCF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 31, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 32) {
								row7.V4ARBD = null;
							} else {
		                          
            row7.V4ARBD = rs_tDBInput_5.getBigDecimal(32);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 33) {
								row7.V4PSRD = null;
							} else {
		                          
            row7.V4PSRD = rs_tDBInput_5.getBigDecimal(33);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 34) {
								row7.V4ARDE = null;
							} else {
		                          
            row7.V4ARDE = rs_tDBInput_5.getBigDecimal(34);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 35) {
								row7.V4AVDT = null;
							} else {
		                          
            row7.V4AVDT = rs_tDBInput_5.getBigDecimal(35);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 36) {
								row7.V4AVTM = null;
							} else {
		                          
            row7.V4AVTM = rs_tDBInput_5.getBigDecimal(36);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 37) {
								row7.V4ORDT = null;
							} else {
		                          
            row7.V4ORDT = rs_tDBInput_5.getBigDecimal(37);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 38) {
								row7.V4PSOQ = null;
							} else {
		                          
            row7.V4PSOQ = rs_tDBInput_5.getBigDecimal(38);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 39) {
								row7.V4CUNO = null;
							} else {
	                         		
        	row7.V4CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 39, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 40) {
								row7.V4ORNO = null;
							} else {
		                          
            row7.V4ORNO = rs_tDBInput_5.getBigDecimal(40);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 41) {
								row7.V4ODLN = null;
							} else {
		                          
            row7.V4ODLN = rs_tDBInput_5.getBigDecimal(41);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 42) {
								row7.V4ITCI = null;
							} else {
	                         		
        	row7.V4ITCI = routines.system.JDBCUtil.getString(rs_tDBInput_5, 42, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 43) {
								row7.V4POOQ = null;
							} else {
		                          
            row7.V4POOQ = rs_tDBInput_5.getBigDecimal(43);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 44) {
								row7.V4POFB = null;
							} else {
		                          
            row7.V4POFB = rs_tDBInput_5.getBigDecimal(44);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 45) {
								row7.V4POFR = null;
							} else {
		                          
            row7.V4POFR = rs_tDBInput_5.getBigDecimal(45);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 46) {
								row7.V4POAP = null;
							} else {
		                          
            row7.V4POAP = rs_tDBInput_5.getBigDecimal(46);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 47) {
								row7.V4IPUO = null;
							} else {
		                          
            row7.V4IPUO = rs_tDBInput_5.getBigDecimal(47);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 48) {
								row7.V4IPUT = null;
							} else {
	                         		
        	row7.V4IPUT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 48, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 49) {
								row7.V4IFRO = null;
							} else {
		                          
            row7.V4IFRO = rs_tDBInput_5.getBigDecimal(49);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 50) {
								row7.V4IFRT = null;
							} else {
	                         		
        	row7.V4IFRT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 50, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 51) {
								row7.V4BDPI = null;
							} else {
		                          
            row7.V4BDPI = rs_tDBInput_5.getBigDecimal(51);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 52) {
								row7.V4PAPI = null;
							} else {
		                          
            row7.V4PAPI = rs_tDBInput_5.getBigDecimal(52);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 53) {
								row7.V4POAL = null;
							} else {
		                          
            row7.V4POAL = rs_tDBInput_5.getBigDecimal(53);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 54) {
								row7.V4POUM = null;
							} else {
	                         		
        	row7.V4POUM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 54, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 55) {
								row7.V4OUCI = null;
							} else {
		                          
            row7.V4OUCI = rs_tDBInput_5.getBigDecimal(55);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 56) {
								row7.V4OADP = null;
							} else {
		                          
            row7.V4OADP = rs_tDBInput_5.getBigDecimal(56);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 57) {
								row7.V4ACDM = null;
							} else {
		                          
            row7.V4ACDM = rs_tDBInput_5.getBigDecimal(57);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 58) {
								row7.V4ACDF = null;
							} else {
		                          
            row7.V4ACDF = rs_tDBInput_5.getBigDecimal(58);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 59) {
								row7.V4ALQY = null;
							} else {
		                          
            row7.V4ALQY = rs_tDBInput_5.getBigDecimal(59);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 60) {
								row7.V4ALQS = null;
							} else {
		                          
            row7.V4ALQS = rs_tDBInput_5.getBigDecimal(60);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 61) {
								row7.V4MRPR = null;
							} else {
		                          
            row7.V4MRPR = rs_tDBInput_5.getBigDecimal(61);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 62) {
								row7.V4IUPR = null;
							} else {
		                          
            row7.V4IUPR = rs_tDBInput_5.getBigDecimal(62);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 63) {
								row7.V4FEGD = null;
							} else {
	                         		
        	row7.V4FEGD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 63, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 64) {
								row7.V4VPUM = null;
							} else {
	                         		
        	row7.V4VPUM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 64, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 65) {
								row7.V4PCOQ = null;
							} else {
		                          
            row7.V4PCOQ = rs_tDBInput_5.getBigDecimal(65);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 66) {
								row7.V4PCFB = null;
							} else {
		                          
            row7.V4PCFB = rs_tDBInput_5.getBigDecimal(66);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 67) {
								row7.V4PCFR = null;
							} else {
		                          
            row7.V4PCFR = rs_tDBInput_5.getBigDecimal(67);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 68) {
								row7.V4PCAP = null;
							} else {
		                          
            row7.V4PCAP = rs_tDBInput_5.getBigDecimal(68);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 69) {
								row7.V4CPAL = null;
							} else {
		                          
            row7.V4CPAL = rs_tDBInput_5.getBigDecimal(69);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 70) {
								row7.V4CPUT = null;
							} else {
	                         		
        	row7.V4CPUT = routines.system.JDBCUtil.getString(rs_tDBInput_5, 70, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 71) {
								row7.V4CFRO = null;
							} else {
		                          
            row7.V4CFRO = rs_tDBInput_5.getBigDecimal(71);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 72) {
								row7.V4CFTO = null;
							} else {
	                         		
        	row7.V4CFTO = routines.system.JDBCUtil.getString(rs_tDBInput_5, 72, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 73) {
								row7.V4CPAP = null;
							} else {
		                          
            row7.V4CPAP = rs_tDBInput_5.getBigDecimal(73);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 74) {
								row7.V4CBDP = null;
							} else {
		                          
            row7.V4CBDP = rs_tDBInput_5.getBigDecimal(74);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 75) {
								row7.V4COIN = null;
							} else {
		                          
            row7.V4COIN = rs_tDBInput_5.getBigDecimal(75);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 76) {
								row7.V4CUOM = null;
							} else {
	                         		
        	row7.V4CUOM = routines.system.JDBCUtil.getString(rs_tDBInput_5, 76, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 77) {
								row7.V4CUCI = null;
							} else {
		                          
            row7.V4CUCI = rs_tDBInput_5.getBigDecimal(77);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 78) {
								row7.V4CADP = null;
							} else {
		                          
            row7.V4CADP = rs_tDBInput_5.getBigDecimal(78);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 79) {
								row7.V4CACM = null;
							} else {
		                          
            row7.V4CACM = rs_tDBInput_5.getBigDecimal(79);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 80) {
								row7.V4CACF = null;
							} else {
		                          
            row7.V4CACF = rs_tDBInput_5.getBigDecimal(80);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 81) {
								row7.V4CMRP = null;
							} else {
		                          
            row7.V4CMRP = rs_tDBInput_5.getBigDecimal(81);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 82) {
								row7.V4CMEF = null;
							} else {
	                         		
        	row7.V4CMEF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 82, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 83) {
								row7.V4CFTP = null;
							} else {
	                         		
        	row7.V4CFTP = routines.system.JDBCUtil.getString(rs_tDBInput_5, 83, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 84) {
								row7.V4CPOF = null;
							} else {
	                         		
        	row7.V4CPOF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 84, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 85) {
								row7.V4QYSH = null;
							} else {
		                          
            row7.V4QYSH = rs_tDBInput_5.getBigDecimal(85);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 86) {
								row7.V4QYDA = null;
							} else {
		                          
            row7.V4QYDA = rs_tDBInput_5.getBigDecimal(86);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 87) {
								row7.V4RCQT = null;
							} else {
		                          
            row7.V4RCQT = rs_tDBInput_5.getBigDecimal(87);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 88) {
								row7.V4VSQY = null;
							} else {
		                          
            row7.V4VSQY = rs_tDBInput_5.getBigDecimal(88);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 89) {
								row7.V4CSRC = null;
							} else {
	                         		
        	row7.V4CSRC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 89, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 90) {
								row7.V4VSRC = null;
							} else {
	                         		
        	row7.V4VSRC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 90, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 91) {
								row7.V4RVWT = null;
							} else {
		                          
            row7.V4RVWT = rs_tDBInput_5.getBigDecimal(91);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 92) {
								row7.V4RVWK = null;
							} else {
		                          
            row7.V4RVWK = rs_tDBInput_5.getBigDecimal(92);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 93) {
								row7.V4DRWT = null;
							} else {
		                          
            row7.V4DRWT = rs_tDBInput_5.getBigDecimal(93);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 94) {
								row7.V4DRWK = null;
							} else {
		                          
            row7.V4DRWK = rs_tDBInput_5.getBigDecimal(94);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 95) {
								row7.V4RPFF = null;
							} else {
	                         		
        	row7.V4RPFF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 95, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 96) {
								row7.V4PPFS = null;
							} else {
	                         		
        	row7.V4PPFS = routines.system.JDBCUtil.getString(rs_tDBInput_5, 96, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 97) {
								row7.V4PMPS = null;
							} else {
	                         		
        	row7.V4PMPS = routines.system.JDBCUtil.getString(rs_tDBInput_5, 97, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 98) {
								row7.V4MEAP = null;
							} else {
		                          
            row7.V4MEAP = rs_tDBInput_5.getBigDecimal(98);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 99) {
								row7.V4MIDT = null;
							} else {
		                          
            row7.V4MIDT = rs_tDBInput_5.getBigDecimal(99);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 100) {
								row7.V4MINV = null;
							} else {
	                         		
        	row7.V4MINV = routines.system.JDBCUtil.getString(rs_tDBInput_5, 100, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 101) {
								row7.V4MPDD = null;
							} else {
	                         		
        	row7.V4MPDD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 101, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 102) {
								row7.V4MQDD = null;
							} else {
	                         		
        	row7.V4MQDD = routines.system.JDBCUtil.getString(rs_tDBInput_5, 102, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 103) {
								row7.V4MRQT = null;
							} else {
		                          
            row7.V4MRQT = rs_tDBInput_5.getBigDecimal(103);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 104) {
								row7.V4MRCW = null;
							} else {
		                          
            row7.V4MRCW = rs_tDBInput_5.getBigDecimal(104);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 105) {
								row7.V4MRCK = null;
							} else {
		                          
            row7.V4MRCK = rs_tDBInput_5.getBigDecimal(105);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 106) {
								row7.V4PFMM = null;
							} else {
		                          
            row7.V4PFMM = rs_tDBInput_5.getBigDecimal(106);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 107) {
								row7.V4MCSD = null;
							} else {
		                          
            row7.V4MCSD = rs_tDBInput_5.getBigDecimal(107);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 108) {
								row7.V4FINV = null;
							} else {
	                         		
        	row7.V4FINV = routines.system.JDBCUtil.getString(rs_tDBInput_5, 108, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 109) {
								row7.V4FEAP = null;
							} else {
		                          
            row7.V4FEAP = rs_tDBInput_5.getBigDecimal(109);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 110) {
								row7.V4FIDT = null;
							} else {
		                          
            row7.V4FIDT = rs_tDBInput_5.getBigDecimal(110);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 111) {
								row7.V4FRCW = null;
							} else {
		                          
            row7.V4FRCW = rs_tDBInput_5.getBigDecimal(111);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 112) {
								row7.V4FCAD = null;
							} else {
		                          
            row7.V4FCAD = rs_tDBInput_5.getBigDecimal(112);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 113) {
								row7.V4FRQT = null;
							} else {
		                          
            row7.V4FRQT = rs_tDBInput_5.getBigDecimal(113);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 114) {
								row7.V4PFMD = null;
							} else {
		                          
            row7.V4PFMD = rs_tDBInput_5.getBigDecimal(114);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 115) {
								row7.V4FTCQ = null;
							} else {
		                          
            row7.V4FTCQ = rs_tDBInput_5.getBigDecimal(115);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 116) {
								row7.V4LCN = null;
							} else {
	                         		
        	row7.V4LCN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 116, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 117) {
								row7.V4SPOF = null;
							} else {
	                         		
        	row7.V4SPOF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 117, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 118) {
								row7.V4PCLN = null;
							} else {
		                          
            row7.V4PCLN = rs_tDBInput_5.getBigDecimal(118);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 119) {
								row7.V4MFVN = null;
							} else {
	                         		
        	row7.V4MFVN = routines.system.JDBCUtil.getString(rs_tDBInput_5, 119, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 120) {
								row7.V4MFID = null;
							} else {
	                         		
        	row7.V4MFID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 120, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 121) {
								row7.V4ERRF = null;
							} else {
	                         		
        	row7.V4ERRF = routines.system.JDBCUtil.getString(rs_tDBInput_5, 121, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 122) {
								row7.V4IMCC = null;
							} else {
	                         		
        	row7.V4IMCC = routines.system.JDBCUtil.getString(rs_tDBInput_5, 122, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 123) {
								row7.V4COD1 = null;
							} else {
	                         		
        	row7.V4COD1 = routines.system.JDBCUtil.getString(rs_tDBInput_5, 123, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 124) {
								row7.V4NTYP = null;
							} else {
	                         		
        	row7.V4NTYP = routines.system.JDBCUtil.getString(rs_tDBInput_5, 124, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 125) {
								row7.V4TDCD = null;
							} else {
		                          
            row7.V4TDCD = rs_tDBInput_5.getBigDecimal(125);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 126) {
								row7.V4QTIF = null;
							} else {
		                          
            row7.V4QTIF = rs_tDBInput_5.getBigDecimal(126);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 127) {
								row7.V4EADT = null;
							} else {
		                          
            row7.V4EADT = rs_tDBInput_5.getBigDecimal(127);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 128) {
								row7.V4EATM = null;
							} else {
		                          
            row7.V4EATM = rs_tDBInput_5.getBigDecimal(128);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 129) {
								row7.V4EAID = null;
							} else {
	                         		
        	row7.V4EAID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 129, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 130) {
								row7.V4MODT = null;
							} else {
		                          
            row7.V4MODT = rs_tDBInput_5.getBigDecimal(130);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 131) {
								row7.V4MOTM = null;
							} else {
		                          
            row7.V4MOTM = rs_tDBInput_5.getBigDecimal(131);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 132) {
								row7.V4MOID = null;
							} else {
	                         		
        	row7.V4MOID = routines.system.JDBCUtil.getString(rs_tDBInput_5, 132, true);
		                    }
							if(colQtyInRs_tDBInput_5 < 133) {
								row7.V4MOPG = null;
							} else {
	                         		
        	row7.V4MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_5, 133, true);
		                    }
					



 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;
Var.V4ARBD = TimeStampConverting.convertToDate(row7.V4ARBD.toString()) ;
Var.V4PSRD = TimeStampConverting.convertToDate(row7.V4PSRD.toString()) ;
Var.V4ARDE = TimeStampConverting.convertToDate(row7.V4ARDE.toString()) ;
Var.V4MIDT = TimeStampConverting.convertToDate(row7.V4MIDT.toString()) ;
Var.V4FIDT = TimeStampConverting.convertToDate(row7.V4FIDT.toString()) ;
Var.V4ORDT = TimeStampConverting.convertToDate(row7.V4ORDT.toString()) ;
Var.AVAIL_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row7.V4AVDT.toString(),row7.V4AVTM.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row7.V4EADT.toString(),row7.V4EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row7.V4MODT.toString(),row7.V4MOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PURCHASE_ORDER_DETAIL_UPDATE_3 = null;


// # Output table : 'PURCHASE_ORDER_DETAIL_UPDATE_3'
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.SITE_ID = context.opco;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.PURCHASE_ORDER_NO = row7.V4PO ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.SMS_MAJ_LINE_NO = row7.V4ROSQ ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.SMS_MIN_LINE_NO = new BigDecimal("1");
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.VENDOR_CLASSIFICATION = row7.V4VCAT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.SHIPPING_POINT_SHIP_FROM = row7.V4ADCD;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.BUYING_GROUP = row7.V4BYGP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CUST_PREF_VENDOR = row7.V4CPVN ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.SOURCE_VENDOR = row7.V4PVND ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.VENDOR_TERMS = row7.V4TERM ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.PO_PRIMARY_STATUS = row7.V4POST ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.PO_SECONDARY_STATUS = row7.V4POSS ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.PO_TYPE = row7.V4ORTY ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.WHSE_CHANGE_CODE = row7.V4WCCD ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONF_STATUS = row7.V4CFST ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.PO_VALID_PRICING_FLAG = row7.V4VLPF ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.PO_VALID_PRICING_APPROVAL = row7.V4VLPA ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.PO_CHANGED_FLAG = row7.V4POCH ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ALLOC_SCHEDULED_RECEIPT_FLAG = row7.V4ASRF ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.PRICE_OVERRIDE_FLAG = row7.V4POFL ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MARKED_BY_MERCHANDISER_FLAG = row7.V4MKMF ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FAILED_SCORECARD_FLAG = row7.V4FSCF ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MANUALLY_ENTERED_LINE_FLAG = row7.V4MELN ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CALENDAR_DATE_ANTICIPATED_RECEIPT = Var.V4ARBD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARBD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = Var.V4PSRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4PSRD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.BUSINESS_DATE_ANTICIPATED_RECEIPT = Var.V4ARDE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARDE):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.AVAIL_TIMESTAMP = Var.AVAIL_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.AVAIL_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.BUSINESS_ORDER_DATE = Var.V4ORDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ORDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.SUGGESTED_ORDER_QTY = row7.V4PSOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.SHIP_TO_CUST = row7.V4CUNO ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CUST_ORDER_NO = row7.V4ORNO ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CUST_ORDER_LINE_NO = row7.V4ODLN ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_ORDER_QTY = row7.V4POOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_FOB_PER_ITEM = row7.V4POFB ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_FREIGHT_PER_ITEM = row7.V4POFR;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_AP_PER_ITEM = row7.V4POAP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = row7.V4IPUO;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = row7.V4IPUT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_FREIGHT_RATE_OVERRIDE = row7.V4IFRO;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_FREIGHT_TYPE_OVERRIDE = row7.V4IFRT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_PICKUP_ALLOW_PER_ITEM = row7.V4PAPI;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_OFF_INV_ALLOW = row7.V4POAL;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_UOM = row7.V4POUM;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_ALT_DELV_PRICE = row7.V4OADP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_MERCH_ALLOW_CHARGE = row7.V4ACDM ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_FREIGHT_ALLOW_CHARGE = row7.V4ACDF ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ALLOC_QTY = row7.V4ALQY ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ALLOC_QTY_SPLITS = row7.V4ALQS ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.INV_UNIT_PRICE = row7.V4IUPR ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREE_GOODS_FLAG = row7.V4FEGD ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.VENDOR_PRICE_LIST_UOM = row7.V4VPUM ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_ORDER_QTY = row7.V4PCOQ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_FOB_PER_ITEM = row7.V4PCFB;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_FREIGHT_PER_ITEM = row7.V4PCFR;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_AP_PER_ITEM = row7.V4PCAP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = row7.V4CPAL;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = row7.V4CPUT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_FREIGHT_RATE_OVERRIDE = row7.V4CFRO;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_FREIGHT_TYPE_OVERRIDE = row7.V4CFTO;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_PICKUP_ALLOW_PER_ITEM = row7.V4CPAP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_OFF_INV_ALLOW = row7.V4COIN;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_UOM = row7.V4CUOM;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_ALT_DELV_PRICE = row7.V4CADP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONF_DIST_MERCH_ALLOW_CHARGE = row7.V4CACM;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONF_DIST_FREIGHT_ALLOW_CHARGE = row7.V4CACF;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_MRPT = row7.V4CMRP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = row7.V4CMEF;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONFIRMED_PRICE_OVERRIDE_FLAG = row7.V4CPOF;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CARRIER_SHORT_QTY = row7.V4QYSH;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.RECVD_DAMAGED_ACCEPTED_QTY = row7.V4QYDA;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.RECVD_QTY = row7.V4RCQT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.VENDOR_SHORT_QTY = row7.V4VSQY;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CARRIER_SHORT_REASON_CODE = row7.V4CSRC;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.VENDOR_SHORT_REASON_CODE = row7.V4VSRC;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.RECVD_WGT = row7.V4RVWT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.DAMAGED_RECVD_WGT = row7.V4DRWT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.REVISED_PROFORMA_FLAG = row7.V4RPFF;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREIGHT_PROFORMA_STATUS = row7.V4PPFS;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_PROFORMA_STATUS = row7.V4PMPS;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_EXT_AMT_TOBE_PAID = row7.V4MEAP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_INV_DATE = Var.V4MIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4MIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_INV_NO = row7.V4MINV;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_PRICE_DIFF_STATUS = row7.V4MPDD;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_QTY_DIFF_STATUS = row7.V4MQDD;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_QTY_TO_BE_PAID = row7.V4MRQT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_WGT_TO_BE_PAID = row7.V4MRCW;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MERCH_CASH_DISC = row7.V4MCSD;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREIGHT_INV_NO = row7.V4FINV;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREIGHT_EXT_AMT_TO_BE_PAID = row7.V4FEAP;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREIGHT_INV_DATE = Var.V4FIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4FIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREIGHT_CHARGE_TO_BE_PAID = row7.V4FRCW;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREIGHT_CASH_DISC = row7.V4FCAD;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREIGHT_QTY_TO_BE_PAID = row7.V4FRQT;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.FREIGHT_CLAIM_QTY = row7.V4FTCQ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.LOAD_CTRL_NO = row7.V4LCN;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.SPLIT_PO_FLAG = row7.V4SPOF;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.TRUE_VENDOR = row7.V4MFVN;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.MANIFEST_HIST_MFG_NO = row7.V4MFID;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.NOTE1 = row7.V4COD1;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.TRUE_VENDOR_SHIP_FROM = row7.V4TDCD;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.LAST_QTY_SENT_TO_DPR = row7.V4QTIF;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CREATED_USER_ID = row7.V4EAID;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.IS_ACTIVE = true;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.V4PF_SVOP = context.svop;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.UPDATED_USER_ID = row7.V4MOID;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.UPDATED_PROGRAM_ID = row7.V4MOPG;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.IS_DELETED = false;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CREATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.UPDATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.ORIG_UNLOAD_CHARGE_PER_ITEM = row7.V4OUCI;
PURCHASE_ORDER_DETAIL_UPDATE_3_tmp.CONF_UNLOAD_CHARGE_PER_ITEM = row7.V4CUCI;
PURCHASE_ORDER_DETAIL_UPDATE_3 = PURCHASE_ORDER_DETAIL_UPDATE_3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "PURCHASE_ORDER_DETAIL_UPDATE_3"
if(PURCHASE_ORDER_DETAIL_UPDATE_3 != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PURCHASE_ORDER_DETAIL_UPDATE_3"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_CLASSIFICATION == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_CLASSIFICATION);
}

                    pstmt_tDBOutput_5.setBigDecimal(2, PURCHASE_ORDER_DETAIL_UPDATE_3.SHIPPING_POINT_SHIP_FROM);

                    pstmt_tDBOutput_5.setBigDecimal(3, PURCHASE_ORDER_DETAIL_UPDATE_3.BUYING_GROUP);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CUST_PREF_VENDOR == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4, PURCHASE_ORDER_DETAIL_UPDATE_3.CUST_PREF_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.SOURCE_VENDOR == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(5, PURCHASE_ORDER_DETAIL_UPDATE_3.SOURCE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_TERMS == null) {
pstmt_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(6, PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.PO_PRIMARY_STATUS == null) {
pstmt_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(7, PURCHASE_ORDER_DETAIL_UPDATE_3.PO_PRIMARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.PO_SECONDARY_STATUS == null) {
pstmt_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(8, PURCHASE_ORDER_DETAIL_UPDATE_3.PO_SECONDARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.PO_TYPE == null) {
pstmt_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(9, PURCHASE_ORDER_DETAIL_UPDATE_3.PO_TYPE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.WHSE_CHANGE_CODE == null) {
pstmt_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(10, PURCHASE_ORDER_DETAIL_UPDATE_3.WHSE_CHANGE_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CONF_STATUS == null) {
pstmt_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(11, PURCHASE_ORDER_DETAIL_UPDATE_3.CONF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.PO_VALID_PRICING_FLAG == null) {
pstmt_tDBOutput_5.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(12, PURCHASE_ORDER_DETAIL_UPDATE_3.PO_VALID_PRICING_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.PO_VALID_PRICING_APPROVAL == null) {
pstmt_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(13, PURCHASE_ORDER_DETAIL_UPDATE_3.PO_VALID_PRICING_APPROVAL);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.PO_CHANGED_FLAG == null) {
pstmt_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(14, PURCHASE_ORDER_DETAIL_UPDATE_3.PO_CHANGED_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.ALLOC_SCHEDULED_RECEIPT_FLAG == null) {
pstmt_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(15, PURCHASE_ORDER_DETAIL_UPDATE_3.ALLOC_SCHEDULED_RECEIPT_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(16, PURCHASE_ORDER_DETAIL_UPDATE_3.PRICE_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.MARKED_BY_MERCHANDISER_FLAG == null) {
pstmt_tDBOutput_5.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(17, PURCHASE_ORDER_DETAIL_UPDATE_3.MARKED_BY_MERCHANDISER_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.FAILED_SCORECARD_FLAG == null) {
pstmt_tDBOutput_5.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(18, PURCHASE_ORDER_DETAIL_UPDATE_3.FAILED_SCORECARD_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(19, PURCHASE_ORDER_DETAIL_UPDATE_3.MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CALENDAR_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_5.setTimestamp(20, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.CALENDAR_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_5.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE != null) {
pstmt_tDBOutput_5.setTimestamp(21, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE.getTime()));
} else {
pstmt_tDBOutput_5.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.BUSINESS_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_5.setTimestamp(22, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.BUSINESS_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_5.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.AVAIL_TIMESTAMP != null) {
pstmt_tDBOutput_5.setTimestamp(23, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.AVAIL_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_5.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.BUSINESS_ORDER_DATE != null) {
pstmt_tDBOutput_5.setTimestamp(24, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.BUSINESS_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_5.setNull(24, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_5.setBigDecimal(25, PURCHASE_ORDER_DETAIL_UPDATE_3.SUGGESTED_ORDER_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.SHIP_TO_CUST == null) {
pstmt_tDBOutput_5.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(26, PURCHASE_ORDER_DETAIL_UPDATE_3.SHIP_TO_CUST);
}

                    pstmt_tDBOutput_5.setBigDecimal(27, PURCHASE_ORDER_DETAIL_UPDATE_3.CUST_ORDER_NO);

                    pstmt_tDBOutput_5.setBigDecimal(28, PURCHASE_ORDER_DETAIL_UPDATE_3.CUST_ORDER_LINE_NO);

                    pstmt_tDBOutput_5.setBigDecimal(29, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_ORDER_QTY);

                    pstmt_tDBOutput_5.setBigDecimal(30, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_FOB_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(31, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(32, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_AP_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(33, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_5.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(34, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_5.setBigDecimal(35, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_5.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(36, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_5.setBigDecimal(37, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(38, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_UOM == null) {
pstmt_tDBOutput_5.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(39, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_UOM);
}

                    pstmt_tDBOutput_5.setBigDecimal(40, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_ALT_DELV_PRICE);

                    pstmt_tDBOutput_5.setBigDecimal(41, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_5.setBigDecimal(42, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_5.setBigDecimal(43, PURCHASE_ORDER_DETAIL_UPDATE_3.ALLOC_QTY);

                    pstmt_tDBOutput_5.setBigDecimal(44, PURCHASE_ORDER_DETAIL_UPDATE_3.ALLOC_QTY_SPLITS);

                    pstmt_tDBOutput_5.setBigDecimal(45, PURCHASE_ORDER_DETAIL_UPDATE_3.INV_UNIT_PRICE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.FREE_GOODS_FLAG == null) {
pstmt_tDBOutput_5.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(46, PURCHASE_ORDER_DETAIL_UPDATE_3.FREE_GOODS_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_PRICE_LIST_UOM == null) {
pstmt_tDBOutput_5.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(47, PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_PRICE_LIST_UOM);
}

                    pstmt_tDBOutput_5.setBigDecimal(48, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_ORDER_QTY);

                    pstmt_tDBOutput_5.setBigDecimal(49, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_FOB_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(50, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(51, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_AP_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(52, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_5.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(53, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_5.setBigDecimal(54, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_5.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(55, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_5.setBigDecimal(56, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(57, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_UOM == null) {
pstmt_tDBOutput_5.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(58, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_UOM);
}

                    pstmt_tDBOutput_5.setBigDecimal(59, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_ALT_DELV_PRICE);

                    pstmt_tDBOutput_5.setBigDecimal(60, PURCHASE_ORDER_DETAIL_UPDATE_3.CONF_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_5.setBigDecimal(61, PURCHASE_ORDER_DETAIL_UPDATE_3.CONF_DIST_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_5.setBigDecimal(62, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_MRPT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_5.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(63, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_5.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(64, PURCHASE_ORDER_DETAIL_UPDATE_3.CONFIRMED_PRICE_OVERRIDE_FLAG);
}

                    pstmt_tDBOutput_5.setBigDecimal(65, PURCHASE_ORDER_DETAIL_UPDATE_3.CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_5.setBigDecimal(66, PURCHASE_ORDER_DETAIL_UPDATE_3.RECVD_DAMAGED_ACCEPTED_QTY);

                    pstmt_tDBOutput_5.setBigDecimal(67, PURCHASE_ORDER_DETAIL_UPDATE_3.RECVD_QTY);

                    pstmt_tDBOutput_5.setBigDecimal(68, PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_SHORT_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CARRIER_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_5.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(69, PURCHASE_ORDER_DETAIL_UPDATE_3.CARRIER_SHORT_REASON_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_5.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(70, PURCHASE_ORDER_DETAIL_UPDATE_3.VENDOR_SHORT_REASON_CODE);
}

                    pstmt_tDBOutput_5.setBigDecimal(71, PURCHASE_ORDER_DETAIL_UPDATE_3.RECVD_WGT);

                    pstmt_tDBOutput_5.setBigDecimal(72, PURCHASE_ORDER_DETAIL_UPDATE_3.DAMAGED_RECVD_WGT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.REVISED_PROFORMA_FLAG == null) {
pstmt_tDBOutput_5.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(73, PURCHASE_ORDER_DETAIL_UPDATE_3.REVISED_PROFORMA_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_PROFORMA_STATUS == null) {
pstmt_tDBOutput_5.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(74, PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_PROFORMA_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_PROFORMA_STATUS == null) {
pstmt_tDBOutput_5.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(75, PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_PROFORMA_STATUS);
}

                    pstmt_tDBOutput_5.setBigDecimal(76, PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_EXT_AMT_TOBE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_INV_DATE != null) {
pstmt_tDBOutput_5.setTimestamp(77, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_5.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_INV_NO == null) {
pstmt_tDBOutput_5.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(78, PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_INV_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_PRICE_DIFF_STATUS == null) {
pstmt_tDBOutput_5.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(79, PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_PRICE_DIFF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_QTY_DIFF_STATUS == null) {
pstmt_tDBOutput_5.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(80, PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_QTY_DIFF_STATUS);
}

                    pstmt_tDBOutput_5.setBigDecimal(81, PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_5.setBigDecimal(82, PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_WGT_TO_BE_PAID);

                    pstmt_tDBOutput_5.setBigDecimal(83, PURCHASE_ORDER_DETAIL_UPDATE_3.MERCH_CASH_DISC);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_INV_NO == null) {
pstmt_tDBOutput_5.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(84, PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_INV_NO);
}

                    pstmt_tDBOutput_5.setBigDecimal(85, PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_EXT_AMT_TO_BE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_INV_DATE != null) {
pstmt_tDBOutput_5.setTimestamp(86, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_5.setNull(86, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_5.setBigDecimal(87, PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_CHARGE_TO_BE_PAID);

                    pstmt_tDBOutput_5.setBigDecimal(88, PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_CASH_DISC);

                    pstmt_tDBOutput_5.setBigDecimal(89, PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_5.setBigDecimal(90, PURCHASE_ORDER_DETAIL_UPDATE_3.FREIGHT_CLAIM_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.LOAD_CTRL_NO == null) {
pstmt_tDBOutput_5.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(91, PURCHASE_ORDER_DETAIL_UPDATE_3.LOAD_CTRL_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.SPLIT_PO_FLAG == null) {
pstmt_tDBOutput_5.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(92, PURCHASE_ORDER_DETAIL_UPDATE_3.SPLIT_PO_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.TRUE_VENDOR == null) {
pstmt_tDBOutput_5.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(93, PURCHASE_ORDER_DETAIL_UPDATE_3.TRUE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.MANIFEST_HIST_MFG_NO == null) {
pstmt_tDBOutput_5.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(94, PURCHASE_ORDER_DETAIL_UPDATE_3.MANIFEST_HIST_MFG_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.NOTE1 == null) {
pstmt_tDBOutput_5.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(95, PURCHASE_ORDER_DETAIL_UPDATE_3.NOTE1);
}

                    pstmt_tDBOutput_5.setBigDecimal(96, PURCHASE_ORDER_DETAIL_UPDATE_3.TRUE_VENDOR_SHIP_FROM);

                    pstmt_tDBOutput_5.setBigDecimal(97, PURCHASE_ORDER_DETAIL_UPDATE_3.LAST_QTY_SENT_TO_DPR);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_5.setTimestamp(98, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_5.setNull(98, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CREATED_USER_ID == null) {
pstmt_tDBOutput_5.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(99, PURCHASE_ORDER_DETAIL_UPDATE_3.CREATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.IS_ACTIVE == null) {
pstmt_tDBOutput_5.setNull(100, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(100, PURCHASE_ORDER_DETAIL_UPDATE_3.IS_ACTIVE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.V4PF_SVOP == null) {
pstmt_tDBOutput_5.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(101, PURCHASE_ORDER_DETAIL_UPDATE_3.V4PF_SVOP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_USER_ID == null) {
pstmt_tDBOutput_5.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(102, PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_5.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(103, PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_PROGRAM_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_5.setTimestamp(104, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_5.setNull(104, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.IS_DELETED == null) {
pstmt_tDBOutput_5.setNull(105, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_5.setBoolean(105, PURCHASE_ORDER_DETAIL_UPDATE_3.IS_DELETED);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CREATED_ORIGIN == null) {
pstmt_tDBOutput_5.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(106, PURCHASE_ORDER_DETAIL_UPDATE_3.CREATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_5.setTimestamp(107, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_5.setNull(107, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_5.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(108, PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_5.setTimestamp(109, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE_3.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_5.setNull(109, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_5.setBigDecimal(110, PURCHASE_ORDER_DETAIL_UPDATE_3.ORIG_UNLOAD_CHARGE_PER_ITEM);

                    pstmt_tDBOutput_5.setBigDecimal(111, PURCHASE_ORDER_DETAIL_UPDATE_3.CONF_UNLOAD_CHARGE_PER_ITEM);

                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.SITE_ID == null) {
pstmt_tDBOutput_5.setNull(112 + count_tDBOutput_5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(112 + count_tDBOutput_5, PURCHASE_ORDER_DETAIL_UPDATE_3.SITE_ID);
}


                    if(PURCHASE_ORDER_DETAIL_UPDATE_3.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_5.setNull(113 + count_tDBOutput_5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(113 + count_tDBOutput_5, PURCHASE_ORDER_DETAIL_UPDATE_3.PURCHASE_ORDER_NO);
}


                    pstmt_tDBOutput_5.setBigDecimal(114 + count_tDBOutput_5, PURCHASE_ORDER_DETAIL_UPDATE_3.SMS_MAJ_LINE_NO);


                    pstmt_tDBOutput_5.setBigDecimal(115 + count_tDBOutput_5, PURCHASE_ORDER_DETAIL_UPDATE_3.SMS_MIN_LINE_NO);


    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_5++;
                if(commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
                if ((batchSize_tDBOutput_5 > 0) && (batchSizeCounter_tDBOutput_5 > 0)) {
                try {
                		int countSum_tDBOutput_5 = 0;
                		    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
            	    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
            	    	
            	    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
            	    	
                batchSizeCounter_tDBOutput_5 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
			    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
			    	String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					}else{
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}
			    	
			    	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
					
			    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
			    	
			    	System.err.println(errormessage_tDBOutput_5);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_5 != 0){
                    	
                    }
                    conn_tDBOutput_5.commit();
                    if(rowsToCommitCount_tDBOutput_5 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_5 = 0;
                    }
                    commitCounter_tDBOutput_5=0;
                }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "PURCHASE_ORDER_DETAIL_UPDATE_3"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_5", end_Hash.get("tDBInput_5")-start_Hash.get("tDBInput_5"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				}
		    	
		    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
			
	    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);
			if(rowsToCommitCount_tDBOutput_5 != 0){
				
			}
			conn_tDBOutput_5.commit();
			if(rowsToCommitCount_tDBOutput_5 != 0){
				
				rowsToCommitCount_tDBOutput_5 = 0;
			}
			commitCounter_tDBOutput_5 = 0;
		
    	conn_tDBOutput_5 .close();
    	
    	resourceMap.put("finish_tDBOutput_5", true);
    	

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PURCHASE_ORDER_DETAIL_UPDATE_3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_5", end_Hash.get("tDBOutput_5")-start_Hash.get("tDBOutput_5"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_5 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_5") == null){
            java.sql.Connection ctn_tDBOutput_5 = null;
            if((ctn_tDBOutput_5 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_5")) != null){
                try {
                    ctn_tDBOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_5) {
                    String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :" + sqlEx_tDBOutput_5.getMessage();
                    System.err.println(errorMessage_tDBOutput_5);
                }
            }
        }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Starting the Updating Data from IMHBV4PF_1 to PURCHASE_ORDER_DETAIL...........");
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class PURCHASE_ORDER_DETAIL_UPDATEStruct implements routines.system.IPersistableRow<PURCHASE_ORDER_DETAIL_UPDATEStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public BigDecimal SMS_MAJ_LINE_NO;

				public BigDecimal getSMS_MAJ_LINE_NO () {
					return this.SMS_MAJ_LINE_NO;
				}
				
			    public BigDecimal SMS_MIN_LINE_NO;

				public BigDecimal getSMS_MIN_LINE_NO () {
					return this.SMS_MIN_LINE_NO;
				}
				
			    public String VENDOR_CLASSIFICATION;

				public String getVENDOR_CLASSIFICATION () {
					return this.VENDOR_CLASSIFICATION;
				}
				
			    public BigDecimal SHIPPING_POINT_SHIP_FROM;

				public BigDecimal getSHIPPING_POINT_SHIP_FROM () {
					return this.SHIPPING_POINT_SHIP_FROM;
				}
				
			    public BigDecimal BUYING_GROUP;

				public BigDecimal getBUYING_GROUP () {
					return this.BUYING_GROUP;
				}
				
			    public String CUST_PREF_VENDOR;

				public String getCUST_PREF_VENDOR () {
					return this.CUST_PREF_VENDOR;
				}
				
			    public String SOURCE_VENDOR;

				public String getSOURCE_VENDOR () {
					return this.SOURCE_VENDOR;
				}
				
			    public String VENDOR_TERMS;

				public String getVENDOR_TERMS () {
					return this.VENDOR_TERMS;
				}
				
			    public String PO_PRIMARY_STATUS;

				public String getPO_PRIMARY_STATUS () {
					return this.PO_PRIMARY_STATUS;
				}
				
			    public String PO_SECONDARY_STATUS;

				public String getPO_SECONDARY_STATUS () {
					return this.PO_SECONDARY_STATUS;
				}
				
			    public String PO_TYPE;

				public String getPO_TYPE () {
					return this.PO_TYPE;
				}
				
			    public String WHSE_CHANGE_CODE;

				public String getWHSE_CHANGE_CODE () {
					return this.WHSE_CHANGE_CODE;
				}
				
			    public String CONF_STATUS;

				public String getCONF_STATUS () {
					return this.CONF_STATUS;
				}
				
			    public String PO_VALID_PRICING_FLAG;

				public String getPO_VALID_PRICING_FLAG () {
					return this.PO_VALID_PRICING_FLAG;
				}
				
			    public String PO_VALID_PRICING_APPROVAL;

				public String getPO_VALID_PRICING_APPROVAL () {
					return this.PO_VALID_PRICING_APPROVAL;
				}
				
			    public String PO_CHANGED_FLAG;

				public String getPO_CHANGED_FLAG () {
					return this.PO_CHANGED_FLAG;
				}
				
			    public String ALLOC_SCHEDULED_RECEIPT_FLAG;

				public String getALLOC_SCHEDULED_RECEIPT_FLAG () {
					return this.ALLOC_SCHEDULED_RECEIPT_FLAG;
				}
				
			    public String PRICE_OVERRIDE_FLAG;

				public String getPRICE_OVERRIDE_FLAG () {
					return this.PRICE_OVERRIDE_FLAG;
				}
				
			    public String MARKED_BY_MERCHANDISER_FLAG;

				public String getMARKED_BY_MERCHANDISER_FLAG () {
					return this.MARKED_BY_MERCHANDISER_FLAG;
				}
				
			    public String FAILED_SCORECARD_FLAG;

				public String getFAILED_SCORECARD_FLAG () {
					return this.FAILED_SCORECARD_FLAG;
				}
				
			    public String MANUALLY_ENTERED_LINE_FLAG;

				public String getMANUALLY_ENTERED_LINE_FLAG () {
					return this.MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public java.util.Date CALENDAR_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getCALENDAR_DATE_ANTICIPATED_RECEIPT () {
					return this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;

				public java.util.Date getCALENDAR_DATE_SCHEDULED_RECEIPT_DATE () {
					return this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
				}
				
			    public java.util.Date BUSINESS_DATE_ANTICIPATED_RECEIPT;

				public java.util.Date getBUSINESS_DATE_ANTICIPATED_RECEIPT () {
					return this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
				}
				
			    public java.util.Date AVAIL_TIMESTAMP;

				public java.util.Date getAVAIL_TIMESTAMP () {
					return this.AVAIL_TIMESTAMP;
				}
				
			    public java.util.Date BUSINESS_ORDER_DATE;

				public java.util.Date getBUSINESS_ORDER_DATE () {
					return this.BUSINESS_ORDER_DATE;
				}
				
			    public BigDecimal SUGGESTED_ORDER_QTY;

				public BigDecimal getSUGGESTED_ORDER_QTY () {
					return this.SUGGESTED_ORDER_QTY;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public BigDecimal CUST_ORDER_NO;

				public BigDecimal getCUST_ORDER_NO () {
					return this.CUST_ORDER_NO;
				}
				
			    public BigDecimal CUST_ORDER_LINE_NO;

				public BigDecimal getCUST_ORDER_LINE_NO () {
					return this.CUST_ORDER_LINE_NO;
				}
				
			    public BigDecimal ORIG_ORDER_QTY;

				public BigDecimal getORIG_ORDER_QTY () {
					return this.ORIG_ORDER_QTY;
				}
				
			    public BigDecimal ORIG_FOB_PER_ITEM;

				public BigDecimal getORIG_FOB_PER_ITEM () {
					return this.ORIG_FOB_PER_ITEM;
				}
				
			    public BigDecimal ORIG_FREIGHT_PER_ITEM;

				public BigDecimal getORIG_FREIGHT_PER_ITEM () {
					return this.ORIG_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal ORIG_AP_PER_ITEM;

				public BigDecimal getORIG_AP_PER_ITEM () {
					return this.ORIG_AP_PER_ITEM;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getORIG_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getORIG_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getORIG_FREIGHT_RATE_OVERRIDE () {
					return this.ORIG_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String ORIG_FREIGHT_TYPE_OVERRIDE;

				public String getORIG_FREIGHT_TYPE_OVERRIDE () {
					return this.ORIG_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal ORIG_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getORIG_PICKUP_ALLOW_PER_ITEM () {
					return this.ORIG_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal ORIG_OFF_INV_ALLOW;

				public BigDecimal getORIG_OFF_INV_ALLOW () {
					return this.ORIG_OFF_INV_ALLOW;
				}
				
			    public String ORIG_UOM;

				public String getORIG_UOM () {
					return this.ORIG_UOM;
				}
				
			    public BigDecimal ORIG_ALT_DELV_PRICE;

				public BigDecimal getORIG_ALT_DELV_PRICE () {
					return this.ORIG_ALT_DELV_PRICE;
				}
				
			    public BigDecimal ORIG_MERCH_ALLOW_CHARGE;

				public BigDecimal getORIG_MERCH_ALLOW_CHARGE () {
					return this.ORIG_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal ORIG_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getORIG_FREIGHT_ALLOW_CHARGE () {
					return this.ORIG_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal ALLOC_QTY;

				public BigDecimal getALLOC_QTY () {
					return this.ALLOC_QTY;
				}
				
			    public BigDecimal ALLOC_QTY_SPLITS;

				public BigDecimal getALLOC_QTY_SPLITS () {
					return this.ALLOC_QTY_SPLITS;
				}
				
			    public BigDecimal INV_UNIT_PRICE;

				public BigDecimal getINV_UNIT_PRICE () {
					return this.INV_UNIT_PRICE;
				}
				
			    public String FREE_GOODS_FLAG;

				public String getFREE_GOODS_FLAG () {
					return this.FREE_GOODS_FLAG;
				}
				
			    public String VENDOR_PRICE_LIST_UOM;

				public String getVENDOR_PRICE_LIST_UOM () {
					return this.VENDOR_PRICE_LIST_UOM;
				}
				
			    public BigDecimal CONFIRMED_ORDER_QTY;

				public BigDecimal getCONFIRMED_ORDER_QTY () {
					return this.CONFIRMED_ORDER_QTY;
				}
				
			    public BigDecimal CONFIRMED_FOB_PER_ITEM;

				public BigDecimal getCONFIRMED_FOB_PER_ITEM () {
					return this.CONFIRMED_FOB_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_PER_ITEM;

				public BigDecimal getCONFIRMED_FREIGHT_PER_ITEM () {
					return this.CONFIRMED_FREIGHT_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_AP_PER_ITEM;

				public BigDecimal getCONFIRMED_AP_PER_ITEM () {
					return this.CONFIRMED_AP_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;

				public String getCONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE () {
					return this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_FREIGHT_RATE_OVERRIDE;

				public BigDecimal getCONFIRMED_FREIGHT_RATE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
				}
				
			    public String CONFIRMED_FREIGHT_TYPE_OVERRIDE;

				public String getCONFIRMED_FREIGHT_TYPE_OVERRIDE () {
					return this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
				}
				
			    public BigDecimal CONFIRMED_PICKUP_ALLOW_PER_ITEM;

				public BigDecimal getCONFIRMED_PICKUP_ALLOW_PER_ITEM () {
					return this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
				}
				
			    public BigDecimal CONFIRMED_OFF_INV_ALLOW;

				public BigDecimal getCONFIRMED_OFF_INV_ALLOW () {
					return this.CONFIRMED_OFF_INV_ALLOW;
				}
				
			    public String CONFIRMED_UOM;

				public String getCONFIRMED_UOM () {
					return this.CONFIRMED_UOM;
				}
				
			    public BigDecimal CONFIRMED_ALT_DELV_PRICE;

				public BigDecimal getCONFIRMED_ALT_DELV_PRICE () {
					return this.CONFIRMED_ALT_DELV_PRICE;
				}
				
			    public BigDecimal CONF_DIST_MERCH_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_MERCH_ALLOW_CHARGE () {
					return this.CONF_DIST_MERCH_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONF_DIST_FREIGHT_ALLOW_CHARGE;

				public BigDecimal getCONF_DIST_FREIGHT_ALLOW_CHARGE () {
					return this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
				}
				
			    public BigDecimal CONFIRMED_MRPT;

				public BigDecimal getCONFIRMED_MRPT () {
					return this.CONFIRMED_MRPT;
				}
				
			    public String CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;

				public String getCONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG () {
					return this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
				}
				
			    public String CONFIRMED_PRICE_OVERRIDE_FLAG;

				public String getCONFIRMED_PRICE_OVERRIDE_FLAG () {
					return this.CONFIRMED_PRICE_OVERRIDE_FLAG;
				}
				
			    public BigDecimal CARRIER_SHORT_QTY;

				public BigDecimal getCARRIER_SHORT_QTY () {
					return this.CARRIER_SHORT_QTY;
				}
				
			    public BigDecimal RECVD_DAMAGED_ACCEPTED_QTY;

				public BigDecimal getRECVD_DAMAGED_ACCEPTED_QTY () {
					return this.RECVD_DAMAGED_ACCEPTED_QTY;
				}
				
			    public BigDecimal RECVD_QTY;

				public BigDecimal getRECVD_QTY () {
					return this.RECVD_QTY;
				}
				
			    public BigDecimal VENDOR_SHORT_QTY;

				public BigDecimal getVENDOR_SHORT_QTY () {
					return this.VENDOR_SHORT_QTY;
				}
				
			    public String CARRIER_SHORT_REASON_CODE;

				public String getCARRIER_SHORT_REASON_CODE () {
					return this.CARRIER_SHORT_REASON_CODE;
				}
				
			    public String VENDOR_SHORT_REASON_CODE;

				public String getVENDOR_SHORT_REASON_CODE () {
					return this.VENDOR_SHORT_REASON_CODE;
				}
				
			    public BigDecimal RECVD_WGT;

				public BigDecimal getRECVD_WGT () {
					return this.RECVD_WGT;
				}
				
			    public BigDecimal DAMAGED_RECVD_WGT;

				public BigDecimal getDAMAGED_RECVD_WGT () {
					return this.DAMAGED_RECVD_WGT;
				}
				
			    public String REVISED_PROFORMA_FLAG;

				public String getREVISED_PROFORMA_FLAG () {
					return this.REVISED_PROFORMA_FLAG;
				}
				
			    public String FREIGHT_PROFORMA_STATUS;

				public String getFREIGHT_PROFORMA_STATUS () {
					return this.FREIGHT_PROFORMA_STATUS;
				}
				
			    public String MERCH_PROFORMA_STATUS;

				public String getMERCH_PROFORMA_STATUS () {
					return this.MERCH_PROFORMA_STATUS;
				}
				
			    public BigDecimal MERCH_EXT_AMT_TOBE_PAID;

				public BigDecimal getMERCH_EXT_AMT_TOBE_PAID () {
					return this.MERCH_EXT_AMT_TOBE_PAID;
				}
				
			    public java.util.Date MERCH_INV_DATE;

				public java.util.Date getMERCH_INV_DATE () {
					return this.MERCH_INV_DATE;
				}
				
			    public String MERCH_INV_NO;

				public String getMERCH_INV_NO () {
					return this.MERCH_INV_NO;
				}
				
			    public String MERCH_PRICE_DIFF_STATUS;

				public String getMERCH_PRICE_DIFF_STATUS () {
					return this.MERCH_PRICE_DIFF_STATUS;
				}
				
			    public String MERCH_QTY_DIFF_STATUS;

				public String getMERCH_QTY_DIFF_STATUS () {
					return this.MERCH_QTY_DIFF_STATUS;
				}
				
			    public BigDecimal MERCH_QTY_TO_BE_PAID;

				public BigDecimal getMERCH_QTY_TO_BE_PAID () {
					return this.MERCH_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_WGT_TO_BE_PAID;

				public BigDecimal getMERCH_WGT_TO_BE_PAID () {
					return this.MERCH_WGT_TO_BE_PAID;
				}
				
			    public BigDecimal MERCH_CASH_DISC;

				public BigDecimal getMERCH_CASH_DISC () {
					return this.MERCH_CASH_DISC;
				}
				
			    public String FREIGHT_INV_NO;

				public String getFREIGHT_INV_NO () {
					return this.FREIGHT_INV_NO;
				}
				
			    public BigDecimal FREIGHT_EXT_AMT_TO_BE_PAID;

				public BigDecimal getFREIGHT_EXT_AMT_TO_BE_PAID () {
					return this.FREIGHT_EXT_AMT_TO_BE_PAID;
				}
				
			    public java.util.Date FREIGHT_INV_DATE;

				public java.util.Date getFREIGHT_INV_DATE () {
					return this.FREIGHT_INV_DATE;
				}
				
			    public BigDecimal FREIGHT_CHARGE_TO_BE_PAID;

				public BigDecimal getFREIGHT_CHARGE_TO_BE_PAID () {
					return this.FREIGHT_CHARGE_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CASH_DISC;

				public BigDecimal getFREIGHT_CASH_DISC () {
					return this.FREIGHT_CASH_DISC;
				}
				
			    public BigDecimal FREIGHT_QTY_TO_BE_PAID;

				public BigDecimal getFREIGHT_QTY_TO_BE_PAID () {
					return this.FREIGHT_QTY_TO_BE_PAID;
				}
				
			    public BigDecimal FREIGHT_CLAIM_QTY;

				public BigDecimal getFREIGHT_CLAIM_QTY () {
					return this.FREIGHT_CLAIM_QTY;
				}
				
			    public String LOAD_CTRL_NO;

				public String getLOAD_CTRL_NO () {
					return this.LOAD_CTRL_NO;
				}
				
			    public String SPLIT_PO_FLAG;

				public String getSPLIT_PO_FLAG () {
					return this.SPLIT_PO_FLAG;
				}
				
			    public String TRUE_VENDOR;

				public String getTRUE_VENDOR () {
					return this.TRUE_VENDOR;
				}
				
			    public String MANIFEST_HIST_MFG_NO;

				public String getMANIFEST_HIST_MFG_NO () {
					return this.MANIFEST_HIST_MFG_NO;
				}
				
			    public String NOTE1;

				public String getNOTE1 () {
					return this.NOTE1;
				}
				
			    public BigDecimal TRUE_VENDOR_SHIP_FROM;

				public BigDecimal getTRUE_VENDOR_SHIP_FROM () {
					return this.TRUE_VENDOR_SHIP_FROM;
				}
				
			    public BigDecimal LAST_QTY_SENT_TO_DPR;

				public BigDecimal getLAST_QTY_SENT_TO_DPR () {
					return this.LAST_QTY_SENT_TO_DPR;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public Boolean IS_ACTIVE;

				public Boolean getIS_ACTIVE () {
					return this.IS_ACTIVE;
				}
				
			    public String V4PF_SVOP;

				public String getV4PF_SVOP () {
					return this.V4PF_SVOP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public String UPDATED_PROGRAM_ID;

				public String getUPDATED_PROGRAM_ID () {
					return this.UPDATED_PROGRAM_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public Boolean IS_DELETED;

				public Boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public BigDecimal ORIG_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getORIG_UNLOAD_CHARGE_PER_ITEM () {
					return this.ORIG_UNLOAD_CHARGE_PER_ITEM;
				}
				
			    public BigDecimal CONF_UNLOAD_CHARGE_PER_ITEM;

				public BigDecimal getCONF_UNLOAD_CHARGE_PER_ITEM () {
					return this.CONF_UNLOAD_CHARGE_PER_ITEM;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.PURCHASE_ORDER_NO == null) ? 0 : this.PURCHASE_ORDER_NO.hashCode());
					
						result = prime * result + ((this.SMS_MAJ_LINE_NO == null) ? 0 : this.SMS_MAJ_LINE_NO.hashCode());
					
						result = prime * result + ((this.SMS_MIN_LINE_NO == null) ? 0 : this.SMS_MIN_LINE_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final PURCHASE_ORDER_DETAIL_UPDATEStruct other = (PURCHASE_ORDER_DETAIL_UPDATEStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.PURCHASE_ORDER_NO == null) {
							if (other.PURCHASE_ORDER_NO != null)
								return false;
						
						} else if (!this.PURCHASE_ORDER_NO.equals(other.PURCHASE_ORDER_NO))
						
							return false;
					
						if (this.SMS_MAJ_LINE_NO == null) {
							if (other.SMS_MAJ_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MAJ_LINE_NO.equals(other.SMS_MAJ_LINE_NO))
						
							return false;
					
						if (this.SMS_MIN_LINE_NO == null) {
							if (other.SMS_MIN_LINE_NO != null)
								return false;
						
						} else if (!this.SMS_MIN_LINE_NO.equals(other.SMS_MIN_LINE_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(PURCHASE_ORDER_DETAIL_UPDATEStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            other.VENDOR_CLASSIFICATION = this.VENDOR_CLASSIFICATION;
	            other.SHIPPING_POINT_SHIP_FROM = this.SHIPPING_POINT_SHIP_FROM;
	            other.BUYING_GROUP = this.BUYING_GROUP;
	            other.CUST_PREF_VENDOR = this.CUST_PREF_VENDOR;
	            other.SOURCE_VENDOR = this.SOURCE_VENDOR;
	            other.VENDOR_TERMS = this.VENDOR_TERMS;
	            other.PO_PRIMARY_STATUS = this.PO_PRIMARY_STATUS;
	            other.PO_SECONDARY_STATUS = this.PO_SECONDARY_STATUS;
	            other.PO_TYPE = this.PO_TYPE;
	            other.WHSE_CHANGE_CODE = this.WHSE_CHANGE_CODE;
	            other.CONF_STATUS = this.CONF_STATUS;
	            other.PO_VALID_PRICING_FLAG = this.PO_VALID_PRICING_FLAG;
	            other.PO_VALID_PRICING_APPROVAL = this.PO_VALID_PRICING_APPROVAL;
	            other.PO_CHANGED_FLAG = this.PO_CHANGED_FLAG;
	            other.ALLOC_SCHEDULED_RECEIPT_FLAG = this.ALLOC_SCHEDULED_RECEIPT_FLAG;
	            other.PRICE_OVERRIDE_FLAG = this.PRICE_OVERRIDE_FLAG;
	            other.MARKED_BY_MERCHANDISER_FLAG = this.MARKED_BY_MERCHANDISER_FLAG;
	            other.FAILED_SCORECARD_FLAG = this.FAILED_SCORECARD_FLAG;
	            other.MANUALLY_ENTERED_LINE_FLAG = this.MANUALLY_ENTERED_LINE_FLAG;
	            other.CALENDAR_DATE_ANTICIPATED_RECEIPT = this.CALENDAR_DATE_ANTICIPATED_RECEIPT;
	            other.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE;
	            other.BUSINESS_DATE_ANTICIPATED_RECEIPT = this.BUSINESS_DATE_ANTICIPATED_RECEIPT;
	            other.AVAIL_TIMESTAMP = this.AVAIL_TIMESTAMP;
	            other.BUSINESS_ORDER_DATE = this.BUSINESS_ORDER_DATE;
	            other.SUGGESTED_ORDER_QTY = this.SUGGESTED_ORDER_QTY;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.CUST_ORDER_NO = this.CUST_ORDER_NO;
	            other.CUST_ORDER_LINE_NO = this.CUST_ORDER_LINE_NO;
	            other.ORIG_ORDER_QTY = this.ORIG_ORDER_QTY;
	            other.ORIG_FOB_PER_ITEM = this.ORIG_FOB_PER_ITEM;
	            other.ORIG_FREIGHT_PER_ITEM = this.ORIG_FREIGHT_PER_ITEM;
	            other.ORIG_AP_PER_ITEM = this.ORIG_AP_PER_ITEM;
	            other.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.ORIG_FREIGHT_RATE_OVERRIDE = this.ORIG_FREIGHT_RATE_OVERRIDE;
	            other.ORIG_FREIGHT_TYPE_OVERRIDE = this.ORIG_FREIGHT_TYPE_OVERRIDE;
	            other.ORIG_PICKUP_ALLOW_PER_ITEM = this.ORIG_PICKUP_ALLOW_PER_ITEM;
	            other.ORIG_OFF_INV_ALLOW = this.ORIG_OFF_INV_ALLOW;
	            other.ORIG_UOM = this.ORIG_UOM;
	            other.ORIG_ALT_DELV_PRICE = this.ORIG_ALT_DELV_PRICE;
	            other.ORIG_MERCH_ALLOW_CHARGE = this.ORIG_MERCH_ALLOW_CHARGE;
	            other.ORIG_FREIGHT_ALLOW_CHARGE = this.ORIG_FREIGHT_ALLOW_CHARGE;
	            other.ALLOC_QTY = this.ALLOC_QTY;
	            other.ALLOC_QTY_SPLITS = this.ALLOC_QTY_SPLITS;
	            other.INV_UNIT_PRICE = this.INV_UNIT_PRICE;
	            other.FREE_GOODS_FLAG = this.FREE_GOODS_FLAG;
	            other.VENDOR_PRICE_LIST_UOM = this.VENDOR_PRICE_LIST_UOM;
	            other.CONFIRMED_ORDER_QTY = this.CONFIRMED_ORDER_QTY;
	            other.CONFIRMED_FOB_PER_ITEM = this.CONFIRMED_FOB_PER_ITEM;
	            other.CONFIRMED_FREIGHT_PER_ITEM = this.CONFIRMED_FREIGHT_PER_ITEM;
	            other.CONFIRMED_AP_PER_ITEM = this.CONFIRMED_AP_PER_ITEM;
	            other.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_RATE_OVERRIDE = this.CONFIRMED_FREIGHT_RATE_OVERRIDE;
	            other.CONFIRMED_FREIGHT_TYPE_OVERRIDE = this.CONFIRMED_FREIGHT_TYPE_OVERRIDE;
	            other.CONFIRMED_PICKUP_ALLOW_PER_ITEM = this.CONFIRMED_PICKUP_ALLOW_PER_ITEM;
	            other.CONFIRMED_OFF_INV_ALLOW = this.CONFIRMED_OFF_INV_ALLOW;
	            other.CONFIRMED_UOM = this.CONFIRMED_UOM;
	            other.CONFIRMED_ALT_DELV_PRICE = this.CONFIRMED_ALT_DELV_PRICE;
	            other.CONF_DIST_MERCH_ALLOW_CHARGE = this.CONF_DIST_MERCH_ALLOW_CHARGE;
	            other.CONF_DIST_FREIGHT_ALLOW_CHARGE = this.CONF_DIST_FREIGHT_ALLOW_CHARGE;
	            other.CONFIRMED_MRPT = this.CONFIRMED_MRPT;
	            other.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG;
	            other.CONFIRMED_PRICE_OVERRIDE_FLAG = this.CONFIRMED_PRICE_OVERRIDE_FLAG;
	            other.CARRIER_SHORT_QTY = this.CARRIER_SHORT_QTY;
	            other.RECVD_DAMAGED_ACCEPTED_QTY = this.RECVD_DAMAGED_ACCEPTED_QTY;
	            other.RECVD_QTY = this.RECVD_QTY;
	            other.VENDOR_SHORT_QTY = this.VENDOR_SHORT_QTY;
	            other.CARRIER_SHORT_REASON_CODE = this.CARRIER_SHORT_REASON_CODE;
	            other.VENDOR_SHORT_REASON_CODE = this.VENDOR_SHORT_REASON_CODE;
	            other.RECVD_WGT = this.RECVD_WGT;
	            other.DAMAGED_RECVD_WGT = this.DAMAGED_RECVD_WGT;
	            other.REVISED_PROFORMA_FLAG = this.REVISED_PROFORMA_FLAG;
	            other.FREIGHT_PROFORMA_STATUS = this.FREIGHT_PROFORMA_STATUS;
	            other.MERCH_PROFORMA_STATUS = this.MERCH_PROFORMA_STATUS;
	            other.MERCH_EXT_AMT_TOBE_PAID = this.MERCH_EXT_AMT_TOBE_PAID;
	            other.MERCH_INV_DATE = this.MERCH_INV_DATE;
	            other.MERCH_INV_NO = this.MERCH_INV_NO;
	            other.MERCH_PRICE_DIFF_STATUS = this.MERCH_PRICE_DIFF_STATUS;
	            other.MERCH_QTY_DIFF_STATUS = this.MERCH_QTY_DIFF_STATUS;
	            other.MERCH_QTY_TO_BE_PAID = this.MERCH_QTY_TO_BE_PAID;
	            other.MERCH_WGT_TO_BE_PAID = this.MERCH_WGT_TO_BE_PAID;
	            other.MERCH_CASH_DISC = this.MERCH_CASH_DISC;
	            other.FREIGHT_INV_NO = this.FREIGHT_INV_NO;
	            other.FREIGHT_EXT_AMT_TO_BE_PAID = this.FREIGHT_EXT_AMT_TO_BE_PAID;
	            other.FREIGHT_INV_DATE = this.FREIGHT_INV_DATE;
	            other.FREIGHT_CHARGE_TO_BE_PAID = this.FREIGHT_CHARGE_TO_BE_PAID;
	            other.FREIGHT_CASH_DISC = this.FREIGHT_CASH_DISC;
	            other.FREIGHT_QTY_TO_BE_PAID = this.FREIGHT_QTY_TO_BE_PAID;
	            other.FREIGHT_CLAIM_QTY = this.FREIGHT_CLAIM_QTY;
	            other.LOAD_CTRL_NO = this.LOAD_CTRL_NO;
	            other.SPLIT_PO_FLAG = this.SPLIT_PO_FLAG;
	            other.TRUE_VENDOR = this.TRUE_VENDOR;
	            other.MANIFEST_HIST_MFG_NO = this.MANIFEST_HIST_MFG_NO;
	            other.NOTE1 = this.NOTE1;
	            other.TRUE_VENDOR_SHIP_FROM = this.TRUE_VENDOR_SHIP_FROM;
	            other.LAST_QTY_SENT_TO_DPR = this.LAST_QTY_SENT_TO_DPR;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.IS_ACTIVE = this.IS_ACTIVE;
	            other.V4PF_SVOP = this.V4PF_SVOP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.UPDATED_PROGRAM_ID = this.UPDATED_PROGRAM_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.ORIG_UNLOAD_CHARGE_PER_ITEM = this.ORIG_UNLOAD_CHARGE_PER_ITEM;
	            other.CONF_UNLOAD_CHARGE_PER_ITEM = this.CONF_UNLOAD_CHARGE_PER_ITEM;
	            
	}

	public void copyKeysDataTo(PURCHASE_ORDER_DETAIL_UPDATEStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            	other.SMS_MAJ_LINE_NO = this.SMS_MAJ_LINE_NO;
	            	other.SMS_MIN_LINE_NO = this.SMS_MIN_LINE_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.SMS_MAJ_LINE_NO = (BigDecimal) dis.readObject();
					
						this.SMS_MIN_LINE_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_CLASSIFICATION = readString(dis);
					
						this.SHIPPING_POINT_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.BUYING_GROUP = (BigDecimal) dis.readObject();
					
					this.CUST_PREF_VENDOR = readString(dis);
					
					this.SOURCE_VENDOR = readString(dis);
					
					this.VENDOR_TERMS = readString(dis);
					
					this.PO_PRIMARY_STATUS = readString(dis);
					
					this.PO_SECONDARY_STATUS = readString(dis);
					
					this.PO_TYPE = readString(dis);
					
					this.WHSE_CHANGE_CODE = readString(dis);
					
					this.CONF_STATUS = readString(dis);
					
					this.PO_VALID_PRICING_FLAG = readString(dis);
					
					this.PO_VALID_PRICING_APPROVAL = readString(dis);
					
					this.PO_CHANGED_FLAG = readString(dis);
					
					this.ALLOC_SCHEDULED_RECEIPT_FLAG = readString(dis);
					
					this.PRICE_OVERRIDE_FLAG = readString(dis);
					
					this.MARKED_BY_MERCHANDISER_FLAG = readString(dis);
					
					this.FAILED_SCORECARD_FLAG = readString(dis);
					
					this.MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CALENDAR_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = readDate(dis);
					
					this.BUSINESS_DATE_ANTICIPATED_RECEIPT = readDate(dis);
					
					this.AVAIL_TIMESTAMP = readDate(dis);
					
					this.BUSINESS_ORDER_DATE = readDate(dis);
					
						this.SUGGESTED_ORDER_QTY = (BigDecimal) dis.readObject();
					
					this.SHIP_TO_CUST = readString(dis);
					
						this.CUST_ORDER_NO = (BigDecimal) dis.readObject();
					
						this.CUST_ORDER_LINE_NO = (BigDecimal) dis.readObject();
					
						this.ORIG_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.ORIG_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.ORIG_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.ORIG_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.ORIG_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.ORIG_UOM = readString(dis);
					
						this.ORIG_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.ORIG_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ORIG_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY = (BigDecimal) dis.readObject();
					
						this.ALLOC_QTY_SPLITS = (BigDecimal) dis.readObject();
					
						this.INV_UNIT_PRICE = (BigDecimal) dis.readObject();
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.VENDOR_PRICE_LIST_UOM = readString(dis);
					
						this.CONFIRMED_ORDER_QTY = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FOB_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_FREIGHT_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_AP_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_FREIGHT_RATE_OVERRIDE = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_FREIGHT_TYPE_OVERRIDE = readString(dis);
					
						this.CONFIRMED_PICKUP_ALLOW_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_OFF_INV_ALLOW = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_UOM = readString(dis);
					
						this.CONFIRMED_ALT_DELV_PRICE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_MERCH_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONF_DIST_FREIGHT_ALLOW_CHARGE = (BigDecimal) dis.readObject();
					
						this.CONFIRMED_MRPT = (BigDecimal) dis.readObject();
					
					this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = readString(dis);
					
					this.CONFIRMED_PRICE_OVERRIDE_FLAG = readString(dis);
					
						this.CARRIER_SHORT_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_DAMAGED_ACCEPTED_QTY = (BigDecimal) dis.readObject();
					
						this.RECVD_QTY = (BigDecimal) dis.readObject();
					
						this.VENDOR_SHORT_QTY = (BigDecimal) dis.readObject();
					
					this.CARRIER_SHORT_REASON_CODE = readString(dis);
					
					this.VENDOR_SHORT_REASON_CODE = readString(dis);
					
						this.RECVD_WGT = (BigDecimal) dis.readObject();
					
						this.DAMAGED_RECVD_WGT = (BigDecimal) dis.readObject();
					
					this.REVISED_PROFORMA_FLAG = readString(dis);
					
					this.FREIGHT_PROFORMA_STATUS = readString(dis);
					
					this.MERCH_PROFORMA_STATUS = readString(dis);
					
						this.MERCH_EXT_AMT_TOBE_PAID = (BigDecimal) dis.readObject();
					
					this.MERCH_INV_DATE = readDate(dis);
					
					this.MERCH_INV_NO = readString(dis);
					
					this.MERCH_PRICE_DIFF_STATUS = readString(dis);
					
					this.MERCH_QTY_DIFF_STATUS = readString(dis);
					
						this.MERCH_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_WGT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.MERCH_CASH_DISC = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_NO = readString(dis);
					
						this.FREIGHT_EXT_AMT_TO_BE_PAID = (BigDecimal) dis.readObject();
					
					this.FREIGHT_INV_DATE = readDate(dis);
					
						this.FREIGHT_CHARGE_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CASH_DISC = (BigDecimal) dis.readObject();
					
						this.FREIGHT_QTY_TO_BE_PAID = (BigDecimal) dis.readObject();
					
						this.FREIGHT_CLAIM_QTY = (BigDecimal) dis.readObject();
					
					this.LOAD_CTRL_NO = readString(dis);
					
					this.SPLIT_PO_FLAG = readString(dis);
					
					this.TRUE_VENDOR = readString(dis);
					
					this.MANIFEST_HIST_MFG_NO = readString(dis);
					
					this.NOTE1 = readString(dis);
					
						this.TRUE_VENDOR_SHIP_FROM = (BigDecimal) dis.readObject();
					
						this.LAST_QTY_SENT_TO_DPR = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_ACTIVE = null;
           				} else {
           			    	this.IS_ACTIVE = dis.readBoolean();
           				}
					
					this.V4PF_SVOP = readString(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
					this.UPDATED_PROGRAM_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.IS_DELETED = null;
           				} else {
           			    	this.IS_DELETED = dis.readBoolean();
           				}
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
						this.ORIG_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
						this.CONF_UNLOAD_CHARGE_PER_ITEM = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MAJ_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SMS_MIN_LINE_NO);
					
					// String
				
						writeString(this.VENDOR_CLASSIFICATION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPING_POINT_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BUYING_GROUP);
					
					// String
				
						writeString(this.CUST_PREF_VENDOR,dos);
					
					// String
				
						writeString(this.SOURCE_VENDOR,dos);
					
					// String
				
						writeString(this.VENDOR_TERMS,dos);
					
					// String
				
						writeString(this.PO_PRIMARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_SECONDARY_STATUS,dos);
					
					// String
				
						writeString(this.PO_TYPE,dos);
					
					// String
				
						writeString(this.WHSE_CHANGE_CODE,dos);
					
					// String
				
						writeString(this.CONF_STATUS,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_FLAG,dos);
					
					// String
				
						writeString(this.PO_VALID_PRICING_APPROVAL,dos);
					
					// String
				
						writeString(this.PO_CHANGED_FLAG,dos);
					
					// String
				
						writeString(this.ALLOC_SCHEDULED_RECEIPT_FLAG,dos);
					
					// String
				
						writeString(this.PRICE_OVERRIDE_FLAG,dos);
					
					// String
				
						writeString(this.MARKED_BY_MERCHANDISER_FLAG,dos);
					
					// String
				
						writeString(this.FAILED_SCORECARD_FLAG,dos);
					
					// String
				
						writeString(this.MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_DATE_ANTICIPATED_RECEIPT,dos);
					
					// java.util.Date
				
						writeDate(this.AVAIL_TIMESTAMP,dos);
					
					// java.util.Date
				
						writeDate(this.BUSINESS_ORDER_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_ORDER_QTY);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUST_ORDER_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.ORIG_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.ORIG_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALLOC_QTY_SPLITS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INV_UNIT_PRICE);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.VENDOR_PRICE_LIST_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ORDER_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FOB_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_AP_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_FREIGHT_RATE_OVERRIDE);
					
					// String
				
						writeString(this.CONFIRMED_FREIGHT_TYPE_OVERRIDE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_PICKUP_ALLOW_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_OFF_INV_ALLOW);
					
					// String
				
						writeString(this.CONFIRMED_UOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_ALT_DELV_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_MERCH_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_DIST_FREIGHT_ALLOW_CHARGE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFIRMED_MRPT);
					
					// String
				
						writeString(this.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG,dos);
					
					// String
				
						writeString(this.CONFIRMED_PRICE_OVERRIDE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARRIER_SHORT_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_DAMAGED_ACCEPTED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VENDOR_SHORT_QTY);
					
					// String
				
						writeString(this.CARRIER_SHORT_REASON_CODE,dos);
					
					// String
				
						writeString(this.VENDOR_SHORT_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECVD_WGT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DAMAGED_RECVD_WGT);
					
					// String
				
						writeString(this.REVISED_PROFORMA_FLAG,dos);
					
					// String
				
						writeString(this.FREIGHT_PROFORMA_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_PROFORMA_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_EXT_AMT_TOBE_PAID);
					
					// java.util.Date
				
						writeDate(this.MERCH_INV_DATE,dos);
					
					// String
				
						writeString(this.MERCH_INV_NO,dos);
					
					// String
				
						writeString(this.MERCH_PRICE_DIFF_STATUS,dos);
					
					// String
				
						writeString(this.MERCH_QTY_DIFF_STATUS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_WGT_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MERCH_CASH_DISC);
					
					// String
				
						writeString(this.FREIGHT_INV_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_EXT_AMT_TO_BE_PAID);
					
					// java.util.Date
				
						writeDate(this.FREIGHT_INV_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CHARGE_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CASH_DISC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_QTY_TO_BE_PAID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FREIGHT_CLAIM_QTY);
					
					// String
				
						writeString(this.LOAD_CTRL_NO,dos);
					
					// String
				
						writeString(this.SPLIT_PO_FLAG,dos);
					
					// String
				
						writeString(this.TRUE_VENDOR,dos);
					
					// String
				
						writeString(this.MANIFEST_HIST_MFG_NO,dos);
					
					// String
				
						writeString(this.NOTE1,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRUE_VENDOR_SHIP_FROM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LAST_QTY_SENT_TO_DPR);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// Boolean
				
						if(this.IS_ACTIVE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_ACTIVE);
		            	}
					
					// String
				
						writeString(this.V4PF_SVOP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// String
				
						writeString(this.UPDATED_PROGRAM_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// Boolean
				
						if(this.IS_DELETED == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.IS_DELETED);
		            	}
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIG_UNLOAD_CHARGE_PER_ITEM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONF_UNLOAD_CHARGE_PER_ITEM);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",SMS_MAJ_LINE_NO="+String.valueOf(SMS_MAJ_LINE_NO));
		sb.append(",SMS_MIN_LINE_NO="+String.valueOf(SMS_MIN_LINE_NO));
		sb.append(",VENDOR_CLASSIFICATION="+VENDOR_CLASSIFICATION);
		sb.append(",SHIPPING_POINT_SHIP_FROM="+String.valueOf(SHIPPING_POINT_SHIP_FROM));
		sb.append(",BUYING_GROUP="+String.valueOf(BUYING_GROUP));
		sb.append(",CUST_PREF_VENDOR="+CUST_PREF_VENDOR);
		sb.append(",SOURCE_VENDOR="+SOURCE_VENDOR);
		sb.append(",VENDOR_TERMS="+VENDOR_TERMS);
		sb.append(",PO_PRIMARY_STATUS="+PO_PRIMARY_STATUS);
		sb.append(",PO_SECONDARY_STATUS="+PO_SECONDARY_STATUS);
		sb.append(",PO_TYPE="+PO_TYPE);
		sb.append(",WHSE_CHANGE_CODE="+WHSE_CHANGE_CODE);
		sb.append(",CONF_STATUS="+CONF_STATUS);
		sb.append(",PO_VALID_PRICING_FLAG="+PO_VALID_PRICING_FLAG);
		sb.append(",PO_VALID_PRICING_APPROVAL="+PO_VALID_PRICING_APPROVAL);
		sb.append(",PO_CHANGED_FLAG="+PO_CHANGED_FLAG);
		sb.append(",ALLOC_SCHEDULED_RECEIPT_FLAG="+ALLOC_SCHEDULED_RECEIPT_FLAG);
		sb.append(",PRICE_OVERRIDE_FLAG="+PRICE_OVERRIDE_FLAG);
		sb.append(",MARKED_BY_MERCHANDISER_FLAG="+MARKED_BY_MERCHANDISER_FLAG);
		sb.append(",FAILED_SCORECARD_FLAG="+FAILED_SCORECARD_FLAG);
		sb.append(",MANUALLY_ENTERED_LINE_FLAG="+MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CALENDAR_DATE_ANTICIPATED_RECEIPT="+String.valueOf(CALENDAR_DATE_ANTICIPATED_RECEIPT));
		sb.append(",CALENDAR_DATE_SCHEDULED_RECEIPT_DATE="+String.valueOf(CALENDAR_DATE_SCHEDULED_RECEIPT_DATE));
		sb.append(",BUSINESS_DATE_ANTICIPATED_RECEIPT="+String.valueOf(BUSINESS_DATE_ANTICIPATED_RECEIPT));
		sb.append(",AVAIL_TIMESTAMP="+String.valueOf(AVAIL_TIMESTAMP));
		sb.append(",BUSINESS_ORDER_DATE="+String.valueOf(BUSINESS_ORDER_DATE));
		sb.append(",SUGGESTED_ORDER_QTY="+String.valueOf(SUGGESTED_ORDER_QTY));
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",CUST_ORDER_NO="+String.valueOf(CUST_ORDER_NO));
		sb.append(",CUST_ORDER_LINE_NO="+String.valueOf(CUST_ORDER_LINE_NO));
		sb.append(",ORIG_ORDER_QTY="+String.valueOf(ORIG_ORDER_QTY));
		sb.append(",ORIG_FOB_PER_ITEM="+String.valueOf(ORIG_FOB_PER_ITEM));
		sb.append(",ORIG_FREIGHT_PER_ITEM="+String.valueOf(ORIG_FREIGHT_PER_ITEM));
		sb.append(",ORIG_AP_PER_ITEM="+String.valueOf(ORIG_AP_PER_ITEM));
		sb.append(",ORIG_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(ORIG_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",ORIG_PICKUP_ALLOW_TYPE_OVERRIDE="+ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",ORIG_FREIGHT_RATE_OVERRIDE="+String.valueOf(ORIG_FREIGHT_RATE_OVERRIDE));
		sb.append(",ORIG_FREIGHT_TYPE_OVERRIDE="+ORIG_FREIGHT_TYPE_OVERRIDE);
		sb.append(",ORIG_PICKUP_ALLOW_PER_ITEM="+String.valueOf(ORIG_PICKUP_ALLOW_PER_ITEM));
		sb.append(",ORIG_OFF_INV_ALLOW="+String.valueOf(ORIG_OFF_INV_ALLOW));
		sb.append(",ORIG_UOM="+ORIG_UOM);
		sb.append(",ORIG_ALT_DELV_PRICE="+String.valueOf(ORIG_ALT_DELV_PRICE));
		sb.append(",ORIG_MERCH_ALLOW_CHARGE="+String.valueOf(ORIG_MERCH_ALLOW_CHARGE));
		sb.append(",ORIG_FREIGHT_ALLOW_CHARGE="+String.valueOf(ORIG_FREIGHT_ALLOW_CHARGE));
		sb.append(",ALLOC_QTY="+String.valueOf(ALLOC_QTY));
		sb.append(",ALLOC_QTY_SPLITS="+String.valueOf(ALLOC_QTY_SPLITS));
		sb.append(",INV_UNIT_PRICE="+String.valueOf(INV_UNIT_PRICE));
		sb.append(",FREE_GOODS_FLAG="+FREE_GOODS_FLAG);
		sb.append(",VENDOR_PRICE_LIST_UOM="+VENDOR_PRICE_LIST_UOM);
		sb.append(",CONFIRMED_ORDER_QTY="+String.valueOf(CONFIRMED_ORDER_QTY));
		sb.append(",CONFIRMED_FOB_PER_ITEM="+String.valueOf(CONFIRMED_FOB_PER_ITEM));
		sb.append(",CONFIRMED_FREIGHT_PER_ITEM="+String.valueOf(CONFIRMED_FREIGHT_PER_ITEM));
		sb.append(",CONFIRMED_AP_PER_ITEM="+String.valueOf(CONFIRMED_AP_PER_ITEM));
		sb.append(",CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE="+String.valueOf(CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE));
		sb.append(",CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE="+CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_FREIGHT_RATE_OVERRIDE="+String.valueOf(CONFIRMED_FREIGHT_RATE_OVERRIDE));
		sb.append(",CONFIRMED_FREIGHT_TYPE_OVERRIDE="+CONFIRMED_FREIGHT_TYPE_OVERRIDE);
		sb.append(",CONFIRMED_PICKUP_ALLOW_PER_ITEM="+String.valueOf(CONFIRMED_PICKUP_ALLOW_PER_ITEM));
		sb.append(",CONFIRMED_OFF_INV_ALLOW="+String.valueOf(CONFIRMED_OFF_INV_ALLOW));
		sb.append(",CONFIRMED_UOM="+CONFIRMED_UOM);
		sb.append(",CONFIRMED_ALT_DELV_PRICE="+String.valueOf(CONFIRMED_ALT_DELV_PRICE));
		sb.append(",CONF_DIST_MERCH_ALLOW_CHARGE="+String.valueOf(CONF_DIST_MERCH_ALLOW_CHARGE));
		sb.append(",CONF_DIST_FREIGHT_ALLOW_CHARGE="+String.valueOf(CONF_DIST_FREIGHT_ALLOW_CHARGE));
		sb.append(",CONFIRMED_MRPT="+String.valueOf(CONFIRMED_MRPT));
		sb.append(",CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG="+CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
		sb.append(",CONFIRMED_PRICE_OVERRIDE_FLAG="+CONFIRMED_PRICE_OVERRIDE_FLAG);
		sb.append(",CARRIER_SHORT_QTY="+String.valueOf(CARRIER_SHORT_QTY));
		sb.append(",RECVD_DAMAGED_ACCEPTED_QTY="+String.valueOf(RECVD_DAMAGED_ACCEPTED_QTY));
		sb.append(",RECVD_QTY="+String.valueOf(RECVD_QTY));
		sb.append(",VENDOR_SHORT_QTY="+String.valueOf(VENDOR_SHORT_QTY));
		sb.append(",CARRIER_SHORT_REASON_CODE="+CARRIER_SHORT_REASON_CODE);
		sb.append(",VENDOR_SHORT_REASON_CODE="+VENDOR_SHORT_REASON_CODE);
		sb.append(",RECVD_WGT="+String.valueOf(RECVD_WGT));
		sb.append(",DAMAGED_RECVD_WGT="+String.valueOf(DAMAGED_RECVD_WGT));
		sb.append(",REVISED_PROFORMA_FLAG="+REVISED_PROFORMA_FLAG);
		sb.append(",FREIGHT_PROFORMA_STATUS="+FREIGHT_PROFORMA_STATUS);
		sb.append(",MERCH_PROFORMA_STATUS="+MERCH_PROFORMA_STATUS);
		sb.append(",MERCH_EXT_AMT_TOBE_PAID="+String.valueOf(MERCH_EXT_AMT_TOBE_PAID));
		sb.append(",MERCH_INV_DATE="+String.valueOf(MERCH_INV_DATE));
		sb.append(",MERCH_INV_NO="+MERCH_INV_NO);
		sb.append(",MERCH_PRICE_DIFF_STATUS="+MERCH_PRICE_DIFF_STATUS);
		sb.append(",MERCH_QTY_DIFF_STATUS="+MERCH_QTY_DIFF_STATUS);
		sb.append(",MERCH_QTY_TO_BE_PAID="+String.valueOf(MERCH_QTY_TO_BE_PAID));
		sb.append(",MERCH_WGT_TO_BE_PAID="+String.valueOf(MERCH_WGT_TO_BE_PAID));
		sb.append(",MERCH_CASH_DISC="+String.valueOf(MERCH_CASH_DISC));
		sb.append(",FREIGHT_INV_NO="+FREIGHT_INV_NO);
		sb.append(",FREIGHT_EXT_AMT_TO_BE_PAID="+String.valueOf(FREIGHT_EXT_AMT_TO_BE_PAID));
		sb.append(",FREIGHT_INV_DATE="+String.valueOf(FREIGHT_INV_DATE));
		sb.append(",FREIGHT_CHARGE_TO_BE_PAID="+String.valueOf(FREIGHT_CHARGE_TO_BE_PAID));
		sb.append(",FREIGHT_CASH_DISC="+String.valueOf(FREIGHT_CASH_DISC));
		sb.append(",FREIGHT_QTY_TO_BE_PAID="+String.valueOf(FREIGHT_QTY_TO_BE_PAID));
		sb.append(",FREIGHT_CLAIM_QTY="+String.valueOf(FREIGHT_CLAIM_QTY));
		sb.append(",LOAD_CTRL_NO="+LOAD_CTRL_NO);
		sb.append(",SPLIT_PO_FLAG="+SPLIT_PO_FLAG);
		sb.append(",TRUE_VENDOR="+TRUE_VENDOR);
		sb.append(",MANIFEST_HIST_MFG_NO="+MANIFEST_HIST_MFG_NO);
		sb.append(",NOTE1="+NOTE1);
		sb.append(",TRUE_VENDOR_SHIP_FROM="+String.valueOf(TRUE_VENDOR_SHIP_FROM));
		sb.append(",LAST_QTY_SENT_TO_DPR="+String.valueOf(LAST_QTY_SENT_TO_DPR));
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",IS_ACTIVE="+String.valueOf(IS_ACTIVE));
		sb.append(",V4PF_SVOP="+V4PF_SVOP);
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",UPDATED_PROGRAM_ID="+UPDATED_PROGRAM_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",ORIG_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(ORIG_UNLOAD_CHARGE_PER_ITEM));
		sb.append(",CONF_UNLOAD_CHARGE_PER_ITEM="+String.valueOf(CONF_UNLOAD_CHARGE_PER_ITEM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(PURCHASE_ORDER_DETAIL_UPDATEStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PURCHASE_ORDER_NO, other.PURCHASE_ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MAJ_LINE_NO, other.SMS_MAJ_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SMS_MIN_LINE_NO, other.SMS_MIN_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[0];

	
			    public String V4PO;

				public String getV4PO () {
					return this.V4PO;
				}
				
			    public String V4ITEM;

				public String getV4ITEM () {
					return this.V4ITEM;
				}
				
			    public BigDecimal V4ROSQ;

				public BigDecimal getV4ROSQ () {
					return this.V4ROSQ;
				}
				
			    public String V4OWID;

				public String getV4OWID () {
					return this.V4OWID;
				}
				
			    public String V4ARCO;

				public String getV4ARCO () {
					return this.V4ARCO;
				}
				
			    public String V4MNPC;

				public String getV4MNPC () {
					return this.V4MNPC;
				}
				
			    public String V4MUPC;

				public String getV4MUPC () {
					return this.V4MUPC;
				}
				
			    public String V4ITDS;

				public String getV4ITDS () {
					return this.V4ITDS;
				}
				
			    public String V4VCAT;

				public String getV4VCAT () {
					return this.V4VCAT;
				}
				
			    public String V4VNBR;

				public String getV4VNBR () {
					return this.V4VNBR;
				}
				
			    public BigDecimal V4ADCD;

				public BigDecimal getV4ADCD () {
					return this.V4ADCD;
				}
				
			    public BigDecimal V4BYGP;

				public BigDecimal getV4BYGP () {
					return this.V4BYGP;
				}
				
			    public String V4CPVN;

				public String getV4CPVN () {
					return this.V4CPVN;
				}
				
			    public String V4PVND;

				public String getV4PVND () {
					return this.V4PVND;
				}
				
			    public String V4TERM;

				public String getV4TERM () {
					return this.V4TERM;
				}
				
			    public String V4POST;

				public String getV4POST () {
					return this.V4POST;
				}
				
			    public String V4POSS;

				public String getV4POSS () {
					return this.V4POSS;
				}
				
			    public String V4ORTY;

				public String getV4ORTY () {
					return this.V4ORTY;
				}
				
			    public String V4WCCD;

				public String getV4WCCD () {
					return this.V4WCCD;
				}
				
			    public String V4CFST;

				public String getV4CFST () {
					return this.V4CFST;
				}
				
			    public String V4WHSE;

				public String getV4WHSE () {
					return this.V4WHSE;
				}
				
			    public String V4VLPF;

				public String getV4VLPF () {
					return this.V4VLPF;
				}
				
			    public String V4VLPA;

				public String getV4VLPA () {
					return this.V4VLPA;
				}
				
			    public String V4POCH;

				public String getV4POCH () {
					return this.V4POCH;
				}
				
			    public String V4KMFG;

				public String getV4KMFG () {
					return this.V4KMFG;
				}
				
			    public String V4ASRF;

				public String getV4ASRF () {
					return this.V4ASRF;
				}
				
			    public String V4POFL;

				public String getV4POFL () {
					return this.V4POFL;
				}
				
			    public String V4MKMF;

				public String getV4MKMF () {
					return this.V4MKMF;
				}
				
			    public String V4FSCF;

				public String getV4FSCF () {
					return this.V4FSCF;
				}
				
			    public String V4MELN;

				public String getV4MELN () {
					return this.V4MELN;
				}
				
			    public String V4IPCF;

				public String getV4IPCF () {
					return this.V4IPCF;
				}
				
			    public BigDecimal V4ARBD;

				public BigDecimal getV4ARBD () {
					return this.V4ARBD;
				}
				
			    public BigDecimal V4PSRD;

				public BigDecimal getV4PSRD () {
					return this.V4PSRD;
				}
				
			    public BigDecimal V4ARDE;

				public BigDecimal getV4ARDE () {
					return this.V4ARDE;
				}
				
			    public BigDecimal V4AVDT;

				public BigDecimal getV4AVDT () {
					return this.V4AVDT;
				}
				
			    public BigDecimal V4AVTM;

				public BigDecimal getV4AVTM () {
					return this.V4AVTM;
				}
				
			    public BigDecimal V4ORDT;

				public BigDecimal getV4ORDT () {
					return this.V4ORDT;
				}
				
			    public BigDecimal V4PSOQ;

				public BigDecimal getV4PSOQ () {
					return this.V4PSOQ;
				}
				
			    public String V4CUNO;

				public String getV4CUNO () {
					return this.V4CUNO;
				}
				
			    public BigDecimal V4ORNO;

				public BigDecimal getV4ORNO () {
					return this.V4ORNO;
				}
				
			    public BigDecimal V4ODLN;

				public BigDecimal getV4ODLN () {
					return this.V4ODLN;
				}
				
			    public String V4ITCI;

				public String getV4ITCI () {
					return this.V4ITCI;
				}
				
			    public BigDecimal V4POOQ;

				public BigDecimal getV4POOQ () {
					return this.V4POOQ;
				}
				
			    public BigDecimal V4POFB;

				public BigDecimal getV4POFB () {
					return this.V4POFB;
				}
				
			    public BigDecimal V4POFR;

				public BigDecimal getV4POFR () {
					return this.V4POFR;
				}
				
			    public BigDecimal V4POAP;

				public BigDecimal getV4POAP () {
					return this.V4POAP;
				}
				
			    public BigDecimal V4IPUO;

				public BigDecimal getV4IPUO () {
					return this.V4IPUO;
				}
				
			    public String V4IPUT;

				public String getV4IPUT () {
					return this.V4IPUT;
				}
				
			    public BigDecimal V4IFRO;

				public BigDecimal getV4IFRO () {
					return this.V4IFRO;
				}
				
			    public String V4IFRT;

				public String getV4IFRT () {
					return this.V4IFRT;
				}
				
			    public BigDecimal V4BDPI;

				public BigDecimal getV4BDPI () {
					return this.V4BDPI;
				}
				
			    public BigDecimal V4PAPI;

				public BigDecimal getV4PAPI () {
					return this.V4PAPI;
				}
				
			    public BigDecimal V4POAL;

				public BigDecimal getV4POAL () {
					return this.V4POAL;
				}
				
			    public String V4POUM;

				public String getV4POUM () {
					return this.V4POUM;
				}
				
			    public BigDecimal V4OUCI;

				public BigDecimal getV4OUCI () {
					return this.V4OUCI;
				}
				
			    public BigDecimal V4OADP;

				public BigDecimal getV4OADP () {
					return this.V4OADP;
				}
				
			    public BigDecimal V4ACDM;

				public BigDecimal getV4ACDM () {
					return this.V4ACDM;
				}
				
			    public BigDecimal V4ACDF;

				public BigDecimal getV4ACDF () {
					return this.V4ACDF;
				}
				
			    public BigDecimal V4ALQY;

				public BigDecimal getV4ALQY () {
					return this.V4ALQY;
				}
				
			    public BigDecimal V4ALQS;

				public BigDecimal getV4ALQS () {
					return this.V4ALQS;
				}
				
			    public BigDecimal V4MRPR;

				public BigDecimal getV4MRPR () {
					return this.V4MRPR;
				}
				
			    public BigDecimal V4IUPR;

				public BigDecimal getV4IUPR () {
					return this.V4IUPR;
				}
				
			    public String V4FEGD;

				public String getV4FEGD () {
					return this.V4FEGD;
				}
				
			    public String V4VPUM;

				public String getV4VPUM () {
					return this.V4VPUM;
				}
				
			    public BigDecimal V4PCOQ;

				public BigDecimal getV4PCOQ () {
					return this.V4PCOQ;
				}
				
			    public BigDecimal V4PCFB;

				public BigDecimal getV4PCFB () {
					return this.V4PCFB;
				}
				
			    public BigDecimal V4PCFR;

				public BigDecimal getV4PCFR () {
					return this.V4PCFR;
				}
				
			    public BigDecimal V4PCAP;

				public BigDecimal getV4PCAP () {
					return this.V4PCAP;
				}
				
			    public BigDecimal V4CPAL;

				public BigDecimal getV4CPAL () {
					return this.V4CPAL;
				}
				
			    public String V4CPUT;

				public String getV4CPUT () {
					return this.V4CPUT;
				}
				
			    public BigDecimal V4CFRO;

				public BigDecimal getV4CFRO () {
					return this.V4CFRO;
				}
				
			    public String V4CFTO;

				public String getV4CFTO () {
					return this.V4CFTO;
				}
				
			    public BigDecimal V4CPAP;

				public BigDecimal getV4CPAP () {
					return this.V4CPAP;
				}
				
			    public BigDecimal V4CBDP;

				public BigDecimal getV4CBDP () {
					return this.V4CBDP;
				}
				
			    public BigDecimal V4COIN;

				public BigDecimal getV4COIN () {
					return this.V4COIN;
				}
				
			    public String V4CUOM;

				public String getV4CUOM () {
					return this.V4CUOM;
				}
				
			    public BigDecimal V4CUCI;

				public BigDecimal getV4CUCI () {
					return this.V4CUCI;
				}
				
			    public BigDecimal V4CADP;

				public BigDecimal getV4CADP () {
					return this.V4CADP;
				}
				
			    public BigDecimal V4CACM;

				public BigDecimal getV4CACM () {
					return this.V4CACM;
				}
				
			    public BigDecimal V4CACF;

				public BigDecimal getV4CACF () {
					return this.V4CACF;
				}
				
			    public BigDecimal V4CMRP;

				public BigDecimal getV4CMRP () {
					return this.V4CMRP;
				}
				
			    public String V4CMEF;

				public String getV4CMEF () {
					return this.V4CMEF;
				}
				
			    public String V4CFTP;

				public String getV4CFTP () {
					return this.V4CFTP;
				}
				
			    public String V4CPOF;

				public String getV4CPOF () {
					return this.V4CPOF;
				}
				
			    public BigDecimal V4QYSH;

				public BigDecimal getV4QYSH () {
					return this.V4QYSH;
				}
				
			    public BigDecimal V4QYDA;

				public BigDecimal getV4QYDA () {
					return this.V4QYDA;
				}
				
			    public BigDecimal V4RCQT;

				public BigDecimal getV4RCQT () {
					return this.V4RCQT;
				}
				
			    public BigDecimal V4VSQY;

				public BigDecimal getV4VSQY () {
					return this.V4VSQY;
				}
				
			    public String V4CSRC;

				public String getV4CSRC () {
					return this.V4CSRC;
				}
				
			    public String V4VSRC;

				public String getV4VSRC () {
					return this.V4VSRC;
				}
				
			    public BigDecimal V4RVWT;

				public BigDecimal getV4RVWT () {
					return this.V4RVWT;
				}
				
			    public BigDecimal V4RVWK;

				public BigDecimal getV4RVWK () {
					return this.V4RVWK;
				}
				
			    public BigDecimal V4DRWT;

				public BigDecimal getV4DRWT () {
					return this.V4DRWT;
				}
				
			    public BigDecimal V4DRWK;

				public BigDecimal getV4DRWK () {
					return this.V4DRWK;
				}
				
			    public String V4RPFF;

				public String getV4RPFF () {
					return this.V4RPFF;
				}
				
			    public String V4PPFS;

				public String getV4PPFS () {
					return this.V4PPFS;
				}
				
			    public String V4PMPS;

				public String getV4PMPS () {
					return this.V4PMPS;
				}
				
			    public BigDecimal V4MEAP;

				public BigDecimal getV4MEAP () {
					return this.V4MEAP;
				}
				
			    public BigDecimal V4MIDT;

				public BigDecimal getV4MIDT () {
					return this.V4MIDT;
				}
				
			    public String V4MINV;

				public String getV4MINV () {
					return this.V4MINV;
				}
				
			    public String V4MPDD;

				public String getV4MPDD () {
					return this.V4MPDD;
				}
				
			    public String V4MQDD;

				public String getV4MQDD () {
					return this.V4MQDD;
				}
				
			    public BigDecimal V4MRQT;

				public BigDecimal getV4MRQT () {
					return this.V4MRQT;
				}
				
			    public BigDecimal V4MRCW;

				public BigDecimal getV4MRCW () {
					return this.V4MRCW;
				}
				
			    public BigDecimal V4MRCK;

				public BigDecimal getV4MRCK () {
					return this.V4MRCK;
				}
				
			    public BigDecimal V4PFMM;

				public BigDecimal getV4PFMM () {
					return this.V4PFMM;
				}
				
			    public BigDecimal V4MCSD;

				public BigDecimal getV4MCSD () {
					return this.V4MCSD;
				}
				
			    public String V4FINV;

				public String getV4FINV () {
					return this.V4FINV;
				}
				
			    public BigDecimal V4FEAP;

				public BigDecimal getV4FEAP () {
					return this.V4FEAP;
				}
				
			    public BigDecimal V4FIDT;

				public BigDecimal getV4FIDT () {
					return this.V4FIDT;
				}
				
			    public BigDecimal V4FRCW;

				public BigDecimal getV4FRCW () {
					return this.V4FRCW;
				}
				
			    public BigDecimal V4FCAD;

				public BigDecimal getV4FCAD () {
					return this.V4FCAD;
				}
				
			    public BigDecimal V4FRQT;

				public BigDecimal getV4FRQT () {
					return this.V4FRQT;
				}
				
			    public BigDecimal V4PFMD;

				public BigDecimal getV4PFMD () {
					return this.V4PFMD;
				}
				
			    public BigDecimal V4FTCQ;

				public BigDecimal getV4FTCQ () {
					return this.V4FTCQ;
				}
				
			    public String V4LCN;

				public String getV4LCN () {
					return this.V4LCN;
				}
				
			    public String V4SPOF;

				public String getV4SPOF () {
					return this.V4SPOF;
				}
				
			    public BigDecimal V4PCLN;

				public BigDecimal getV4PCLN () {
					return this.V4PCLN;
				}
				
			    public String V4MFVN;

				public String getV4MFVN () {
					return this.V4MFVN;
				}
				
			    public String V4MFID;

				public String getV4MFID () {
					return this.V4MFID;
				}
				
			    public String V4ERRF;

				public String getV4ERRF () {
					return this.V4ERRF;
				}
				
			    public String V4IMCC;

				public String getV4IMCC () {
					return this.V4IMCC;
				}
				
			    public String V4COD1;

				public String getV4COD1 () {
					return this.V4COD1;
				}
				
			    public String V4NTYP;

				public String getV4NTYP () {
					return this.V4NTYP;
				}
				
			    public BigDecimal V4TDCD;

				public BigDecimal getV4TDCD () {
					return this.V4TDCD;
				}
				
			    public BigDecimal V4QTIF;

				public BigDecimal getV4QTIF () {
					return this.V4QTIF;
				}
				
			    public BigDecimal V4EADT;

				public BigDecimal getV4EADT () {
					return this.V4EADT;
				}
				
			    public BigDecimal V4EATM;

				public BigDecimal getV4EATM () {
					return this.V4EATM;
				}
				
			    public String V4EAID;

				public String getV4EAID () {
					return this.V4EAID;
				}
				
			    public BigDecimal V4MODT;

				public BigDecimal getV4MODT () {
					return this.V4MODT;
				}
				
			    public BigDecimal V4MOTM;

				public BigDecimal getV4MOTM () {
					return this.V4MOTM;
				}
				
			    public String V4MOID;

				public String getV4MOID () {
					return this.V4MOID;
				}
				
			    public String V4MOPG;

				public String getV4MOPG () {
					return this.V4MOPG;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Purchase_Order_Detail_Update_Inbound) {

        	try {

        		int length = 0;
		
					this.V4PO = readString(dis);
					
					this.V4ITEM = readString(dis);
					
						this.V4ROSQ = (BigDecimal) dis.readObject();
					
					this.V4OWID = readString(dis);
					
					this.V4ARCO = readString(dis);
					
					this.V4MNPC = readString(dis);
					
					this.V4MUPC = readString(dis);
					
					this.V4ITDS = readString(dis);
					
					this.V4VCAT = readString(dis);
					
					this.V4VNBR = readString(dis);
					
						this.V4ADCD = (BigDecimal) dis.readObject();
					
						this.V4BYGP = (BigDecimal) dis.readObject();
					
					this.V4CPVN = readString(dis);
					
					this.V4PVND = readString(dis);
					
					this.V4TERM = readString(dis);
					
					this.V4POST = readString(dis);
					
					this.V4POSS = readString(dis);
					
					this.V4ORTY = readString(dis);
					
					this.V4WCCD = readString(dis);
					
					this.V4CFST = readString(dis);
					
					this.V4WHSE = readString(dis);
					
					this.V4VLPF = readString(dis);
					
					this.V4VLPA = readString(dis);
					
					this.V4POCH = readString(dis);
					
					this.V4KMFG = readString(dis);
					
					this.V4ASRF = readString(dis);
					
					this.V4POFL = readString(dis);
					
					this.V4MKMF = readString(dis);
					
					this.V4FSCF = readString(dis);
					
					this.V4MELN = readString(dis);
					
					this.V4IPCF = readString(dis);
					
						this.V4ARBD = (BigDecimal) dis.readObject();
					
						this.V4PSRD = (BigDecimal) dis.readObject();
					
						this.V4ARDE = (BigDecimal) dis.readObject();
					
						this.V4AVDT = (BigDecimal) dis.readObject();
					
						this.V4AVTM = (BigDecimal) dis.readObject();
					
						this.V4ORDT = (BigDecimal) dis.readObject();
					
						this.V4PSOQ = (BigDecimal) dis.readObject();
					
					this.V4CUNO = readString(dis);
					
						this.V4ORNO = (BigDecimal) dis.readObject();
					
						this.V4ODLN = (BigDecimal) dis.readObject();
					
					this.V4ITCI = readString(dis);
					
						this.V4POOQ = (BigDecimal) dis.readObject();
					
						this.V4POFB = (BigDecimal) dis.readObject();
					
						this.V4POFR = (BigDecimal) dis.readObject();
					
						this.V4POAP = (BigDecimal) dis.readObject();
					
						this.V4IPUO = (BigDecimal) dis.readObject();
					
					this.V4IPUT = readString(dis);
					
						this.V4IFRO = (BigDecimal) dis.readObject();
					
					this.V4IFRT = readString(dis);
					
						this.V4BDPI = (BigDecimal) dis.readObject();
					
						this.V4PAPI = (BigDecimal) dis.readObject();
					
						this.V4POAL = (BigDecimal) dis.readObject();
					
					this.V4POUM = readString(dis);
					
						this.V4OUCI = (BigDecimal) dis.readObject();
					
						this.V4OADP = (BigDecimal) dis.readObject();
					
						this.V4ACDM = (BigDecimal) dis.readObject();
					
						this.V4ACDF = (BigDecimal) dis.readObject();
					
						this.V4ALQY = (BigDecimal) dis.readObject();
					
						this.V4ALQS = (BigDecimal) dis.readObject();
					
						this.V4MRPR = (BigDecimal) dis.readObject();
					
						this.V4IUPR = (BigDecimal) dis.readObject();
					
					this.V4FEGD = readString(dis);
					
					this.V4VPUM = readString(dis);
					
						this.V4PCOQ = (BigDecimal) dis.readObject();
					
						this.V4PCFB = (BigDecimal) dis.readObject();
					
						this.V4PCFR = (BigDecimal) dis.readObject();
					
						this.V4PCAP = (BigDecimal) dis.readObject();
					
						this.V4CPAL = (BigDecimal) dis.readObject();
					
					this.V4CPUT = readString(dis);
					
						this.V4CFRO = (BigDecimal) dis.readObject();
					
					this.V4CFTO = readString(dis);
					
						this.V4CPAP = (BigDecimal) dis.readObject();
					
						this.V4CBDP = (BigDecimal) dis.readObject();
					
						this.V4COIN = (BigDecimal) dis.readObject();
					
					this.V4CUOM = readString(dis);
					
						this.V4CUCI = (BigDecimal) dis.readObject();
					
						this.V4CADP = (BigDecimal) dis.readObject();
					
						this.V4CACM = (BigDecimal) dis.readObject();
					
						this.V4CACF = (BigDecimal) dis.readObject();
					
						this.V4CMRP = (BigDecimal) dis.readObject();
					
					this.V4CMEF = readString(dis);
					
					this.V4CFTP = readString(dis);
					
					this.V4CPOF = readString(dis);
					
						this.V4QYSH = (BigDecimal) dis.readObject();
					
						this.V4QYDA = (BigDecimal) dis.readObject();
					
						this.V4RCQT = (BigDecimal) dis.readObject();
					
						this.V4VSQY = (BigDecimal) dis.readObject();
					
					this.V4CSRC = readString(dis);
					
					this.V4VSRC = readString(dis);
					
						this.V4RVWT = (BigDecimal) dis.readObject();
					
						this.V4RVWK = (BigDecimal) dis.readObject();
					
						this.V4DRWT = (BigDecimal) dis.readObject();
					
						this.V4DRWK = (BigDecimal) dis.readObject();
					
					this.V4RPFF = readString(dis);
					
					this.V4PPFS = readString(dis);
					
					this.V4PMPS = readString(dis);
					
						this.V4MEAP = (BigDecimal) dis.readObject();
					
						this.V4MIDT = (BigDecimal) dis.readObject();
					
					this.V4MINV = readString(dis);
					
					this.V4MPDD = readString(dis);
					
					this.V4MQDD = readString(dis);
					
						this.V4MRQT = (BigDecimal) dis.readObject();
					
						this.V4MRCW = (BigDecimal) dis.readObject();
					
						this.V4MRCK = (BigDecimal) dis.readObject();
					
						this.V4PFMM = (BigDecimal) dis.readObject();
					
						this.V4MCSD = (BigDecimal) dis.readObject();
					
					this.V4FINV = readString(dis);
					
						this.V4FEAP = (BigDecimal) dis.readObject();
					
						this.V4FIDT = (BigDecimal) dis.readObject();
					
						this.V4FRCW = (BigDecimal) dis.readObject();
					
						this.V4FCAD = (BigDecimal) dis.readObject();
					
						this.V4FRQT = (BigDecimal) dis.readObject();
					
						this.V4PFMD = (BigDecimal) dis.readObject();
					
						this.V4FTCQ = (BigDecimal) dis.readObject();
					
					this.V4LCN = readString(dis);
					
					this.V4SPOF = readString(dis);
					
						this.V4PCLN = (BigDecimal) dis.readObject();
					
					this.V4MFVN = readString(dis);
					
					this.V4MFID = readString(dis);
					
					this.V4ERRF = readString(dis);
					
					this.V4IMCC = readString(dis);
					
					this.V4COD1 = readString(dis);
					
					this.V4NTYP = readString(dis);
					
						this.V4TDCD = (BigDecimal) dis.readObject();
					
						this.V4QTIF = (BigDecimal) dis.readObject();
					
						this.V4EADT = (BigDecimal) dis.readObject();
					
						this.V4EATM = (BigDecimal) dis.readObject();
					
					this.V4EAID = readString(dis);
					
						this.V4MODT = (BigDecimal) dis.readObject();
					
						this.V4MOTM = (BigDecimal) dis.readObject();
					
					this.V4MOID = readString(dis);
					
					this.V4MOPG = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.V4PO,dos);
					
					// String
				
						writeString(this.V4ITEM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ROSQ);
					
					// String
				
						writeString(this.V4OWID,dos);
					
					// String
				
						writeString(this.V4ARCO,dos);
					
					// String
				
						writeString(this.V4MNPC,dos);
					
					// String
				
						writeString(this.V4MUPC,dos);
					
					// String
				
						writeString(this.V4ITDS,dos);
					
					// String
				
						writeString(this.V4VCAT,dos);
					
					// String
				
						writeString(this.V4VNBR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ADCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BYGP);
					
					// String
				
						writeString(this.V4CPVN,dos);
					
					// String
				
						writeString(this.V4PVND,dos);
					
					// String
				
						writeString(this.V4TERM,dos);
					
					// String
				
						writeString(this.V4POST,dos);
					
					// String
				
						writeString(this.V4POSS,dos);
					
					// String
				
						writeString(this.V4ORTY,dos);
					
					// String
				
						writeString(this.V4WCCD,dos);
					
					// String
				
						writeString(this.V4CFST,dos);
					
					// String
				
						writeString(this.V4WHSE,dos);
					
					// String
				
						writeString(this.V4VLPF,dos);
					
					// String
				
						writeString(this.V4VLPA,dos);
					
					// String
				
						writeString(this.V4POCH,dos);
					
					// String
				
						writeString(this.V4KMFG,dos);
					
					// String
				
						writeString(this.V4ASRF,dos);
					
					// String
				
						writeString(this.V4POFL,dos);
					
					// String
				
						writeString(this.V4MKMF,dos);
					
					// String
				
						writeString(this.V4FSCF,dos);
					
					// String
				
						writeString(this.V4MELN,dos);
					
					// String
				
						writeString(this.V4IPCF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARBD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSRD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ARDE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4AVTM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PSOQ);
					
					// String
				
						writeString(this.V4CUNO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ODLN);
					
					// String
				
						writeString(this.V4ITCI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IPUO);
					
					// String
				
						writeString(this.V4IPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IFRO);
					
					// String
				
						writeString(this.V4IFRT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4BDPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PAPI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4POAL);
					
					// String
				
						writeString(this.V4POUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4OADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ACDF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4ALQS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRPR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4IUPR);
					
					// String
				
						writeString(this.V4FEGD,dos);
					
					// String
				
						writeString(this.V4VPUM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCOQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFB);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCFR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAL);
					
					// String
				
						writeString(this.V4CPUT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CFRO);
					
					// String
				
						writeString(this.V4CFTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CPAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CBDP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4COIN);
					
					// String
				
						writeString(this.V4CUOM,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CUCI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CADP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CACF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4CMRP);
					
					// String
				
						writeString(this.V4CMEF,dos);
					
					// String
				
						writeString(this.V4CFTP,dos);
					
					// String
				
						writeString(this.V4CPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYSH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QYDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RCQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4VSQY);
					
					// String
				
						writeString(this.V4CSRC,dos);
					
					// String
				
						writeString(this.V4VSRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4RVWK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4DRWK);
					
					// String
				
						writeString(this.V4RPFF,dos);
					
					// String
				
						writeString(this.V4PPFS,dos);
					
					// String
				
						writeString(this.V4PMPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MIDT);
					
					// String
				
						writeString(this.V4MINV,dos);
					
					// String
				
						writeString(this.V4MPDD,dos);
					
					// String
				
						writeString(this.V4MQDD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MRCK);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMM);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MCSD);
					
					// String
				
						writeString(this.V4FINV,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FEAP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FIDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRCW);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FCAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FRQT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PFMD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4FTCQ);
					
					// String
				
						writeString(this.V4LCN,dos);
					
					// String
				
						writeString(this.V4SPOF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4PCLN);
					
					// String
				
						writeString(this.V4MFVN,dos);
					
					// String
				
						writeString(this.V4MFID,dos);
					
					// String
				
						writeString(this.V4ERRF,dos);
					
					// String
				
						writeString(this.V4IMCC,dos);
					
					// String
				
						writeString(this.V4COD1,dos);
					
					// String
				
						writeString(this.V4NTYP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4TDCD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4QTIF);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4EATM);
					
					// String
				
						writeString(this.V4EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.V4MOTM);
					
					// String
				
						writeString(this.V4MOID,dos);
					
					// String
				
						writeString(this.V4MOPG,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("V4PO="+V4PO);
		sb.append(",V4ITEM="+V4ITEM);
		sb.append(",V4ROSQ="+String.valueOf(V4ROSQ));
		sb.append(",V4OWID="+V4OWID);
		sb.append(",V4ARCO="+V4ARCO);
		sb.append(",V4MNPC="+V4MNPC);
		sb.append(",V4MUPC="+V4MUPC);
		sb.append(",V4ITDS="+V4ITDS);
		sb.append(",V4VCAT="+V4VCAT);
		sb.append(",V4VNBR="+V4VNBR);
		sb.append(",V4ADCD="+String.valueOf(V4ADCD));
		sb.append(",V4BYGP="+String.valueOf(V4BYGP));
		sb.append(",V4CPVN="+V4CPVN);
		sb.append(",V4PVND="+V4PVND);
		sb.append(",V4TERM="+V4TERM);
		sb.append(",V4POST="+V4POST);
		sb.append(",V4POSS="+V4POSS);
		sb.append(",V4ORTY="+V4ORTY);
		sb.append(",V4WCCD="+V4WCCD);
		sb.append(",V4CFST="+V4CFST);
		sb.append(",V4WHSE="+V4WHSE);
		sb.append(",V4VLPF="+V4VLPF);
		sb.append(",V4VLPA="+V4VLPA);
		sb.append(",V4POCH="+V4POCH);
		sb.append(",V4KMFG="+V4KMFG);
		sb.append(",V4ASRF="+V4ASRF);
		sb.append(",V4POFL="+V4POFL);
		sb.append(",V4MKMF="+V4MKMF);
		sb.append(",V4FSCF="+V4FSCF);
		sb.append(",V4MELN="+V4MELN);
		sb.append(",V4IPCF="+V4IPCF);
		sb.append(",V4ARBD="+String.valueOf(V4ARBD));
		sb.append(",V4PSRD="+String.valueOf(V4PSRD));
		sb.append(",V4ARDE="+String.valueOf(V4ARDE));
		sb.append(",V4AVDT="+String.valueOf(V4AVDT));
		sb.append(",V4AVTM="+String.valueOf(V4AVTM));
		sb.append(",V4ORDT="+String.valueOf(V4ORDT));
		sb.append(",V4PSOQ="+String.valueOf(V4PSOQ));
		sb.append(",V4CUNO="+V4CUNO);
		sb.append(",V4ORNO="+String.valueOf(V4ORNO));
		sb.append(",V4ODLN="+String.valueOf(V4ODLN));
		sb.append(",V4ITCI="+V4ITCI);
		sb.append(",V4POOQ="+String.valueOf(V4POOQ));
		sb.append(",V4POFB="+String.valueOf(V4POFB));
		sb.append(",V4POFR="+String.valueOf(V4POFR));
		sb.append(",V4POAP="+String.valueOf(V4POAP));
		sb.append(",V4IPUO="+String.valueOf(V4IPUO));
		sb.append(",V4IPUT="+V4IPUT);
		sb.append(",V4IFRO="+String.valueOf(V4IFRO));
		sb.append(",V4IFRT="+V4IFRT);
		sb.append(",V4BDPI="+String.valueOf(V4BDPI));
		sb.append(",V4PAPI="+String.valueOf(V4PAPI));
		sb.append(",V4POAL="+String.valueOf(V4POAL));
		sb.append(",V4POUM="+V4POUM);
		sb.append(",V4OUCI="+String.valueOf(V4OUCI));
		sb.append(",V4OADP="+String.valueOf(V4OADP));
		sb.append(",V4ACDM="+String.valueOf(V4ACDM));
		sb.append(",V4ACDF="+String.valueOf(V4ACDF));
		sb.append(",V4ALQY="+String.valueOf(V4ALQY));
		sb.append(",V4ALQS="+String.valueOf(V4ALQS));
		sb.append(",V4MRPR="+String.valueOf(V4MRPR));
		sb.append(",V4IUPR="+String.valueOf(V4IUPR));
		sb.append(",V4FEGD="+V4FEGD);
		sb.append(",V4VPUM="+V4VPUM);
		sb.append(",V4PCOQ="+String.valueOf(V4PCOQ));
		sb.append(",V4PCFB="+String.valueOf(V4PCFB));
		sb.append(",V4PCFR="+String.valueOf(V4PCFR));
		sb.append(",V4PCAP="+String.valueOf(V4PCAP));
		sb.append(",V4CPAL="+String.valueOf(V4CPAL));
		sb.append(",V4CPUT="+V4CPUT);
		sb.append(",V4CFRO="+String.valueOf(V4CFRO));
		sb.append(",V4CFTO="+V4CFTO);
		sb.append(",V4CPAP="+String.valueOf(V4CPAP));
		sb.append(",V4CBDP="+String.valueOf(V4CBDP));
		sb.append(",V4COIN="+String.valueOf(V4COIN));
		sb.append(",V4CUOM="+V4CUOM);
		sb.append(",V4CUCI="+String.valueOf(V4CUCI));
		sb.append(",V4CADP="+String.valueOf(V4CADP));
		sb.append(",V4CACM="+String.valueOf(V4CACM));
		sb.append(",V4CACF="+String.valueOf(V4CACF));
		sb.append(",V4CMRP="+String.valueOf(V4CMRP));
		sb.append(",V4CMEF="+V4CMEF);
		sb.append(",V4CFTP="+V4CFTP);
		sb.append(",V4CPOF="+V4CPOF);
		sb.append(",V4QYSH="+String.valueOf(V4QYSH));
		sb.append(",V4QYDA="+String.valueOf(V4QYDA));
		sb.append(",V4RCQT="+String.valueOf(V4RCQT));
		sb.append(",V4VSQY="+String.valueOf(V4VSQY));
		sb.append(",V4CSRC="+V4CSRC);
		sb.append(",V4VSRC="+V4VSRC);
		sb.append(",V4RVWT="+String.valueOf(V4RVWT));
		sb.append(",V4RVWK="+String.valueOf(V4RVWK));
		sb.append(",V4DRWT="+String.valueOf(V4DRWT));
		sb.append(",V4DRWK="+String.valueOf(V4DRWK));
		sb.append(",V4RPFF="+V4RPFF);
		sb.append(",V4PPFS="+V4PPFS);
		sb.append(",V4PMPS="+V4PMPS);
		sb.append(",V4MEAP="+String.valueOf(V4MEAP));
		sb.append(",V4MIDT="+String.valueOf(V4MIDT));
		sb.append(",V4MINV="+V4MINV);
		sb.append(",V4MPDD="+V4MPDD);
		sb.append(",V4MQDD="+V4MQDD);
		sb.append(",V4MRQT="+String.valueOf(V4MRQT));
		sb.append(",V4MRCW="+String.valueOf(V4MRCW));
		sb.append(",V4MRCK="+String.valueOf(V4MRCK));
		sb.append(",V4PFMM="+String.valueOf(V4PFMM));
		sb.append(",V4MCSD="+String.valueOf(V4MCSD));
		sb.append(",V4FINV="+V4FINV);
		sb.append(",V4FEAP="+String.valueOf(V4FEAP));
		sb.append(",V4FIDT="+String.valueOf(V4FIDT));
		sb.append(",V4FRCW="+String.valueOf(V4FRCW));
		sb.append(",V4FCAD="+String.valueOf(V4FCAD));
		sb.append(",V4FRQT="+String.valueOf(V4FRQT));
		sb.append(",V4PFMD="+String.valueOf(V4PFMD));
		sb.append(",V4FTCQ="+String.valueOf(V4FTCQ));
		sb.append(",V4LCN="+V4LCN);
		sb.append(",V4SPOF="+V4SPOF);
		sb.append(",V4PCLN="+String.valueOf(V4PCLN));
		sb.append(",V4MFVN="+V4MFVN);
		sb.append(",V4MFID="+V4MFID);
		sb.append(",V4ERRF="+V4ERRF);
		sb.append(",V4IMCC="+V4IMCC);
		sb.append(",V4COD1="+V4COD1);
		sb.append(",V4NTYP="+V4NTYP);
		sb.append(",V4TDCD="+String.valueOf(V4TDCD));
		sb.append(",V4QTIF="+String.valueOf(V4QTIF));
		sb.append(",V4EADT="+String.valueOf(V4EADT));
		sb.append(",V4EATM="+String.valueOf(V4EATM));
		sb.append(",V4EAID="+V4EAID);
		sb.append(",V4MODT="+String.valueOf(V4MODT));
		sb.append(",V4MOTM="+String.valueOf(V4MOTM));
		sb.append(",V4MOID="+V4MOID);
		sb.append(",V4MOPG="+V4MOPG);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
PURCHASE_ORDER_DETAIL_UPDATEStruct PURCHASE_ORDER_DETAIL_UPDATE = new PURCHASE_ORDER_DETAIL_UPDATEStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBOutput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"PURCHASE_ORDER_DETAIL_UPDATE");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = context.GIM_Schema_PO;
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("PURCHASE_ORDER_DETAIL");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("PURCHASE_ORDER_DETAIL");
}

        int updateKeyCount_tDBOutput_2 = 4;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 115 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_2 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_2 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_2 = context.GIM_Password; 

    String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

    conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2,dbUser_tDBOutput_2,dbPwd_tDBOutput_2);
	
	resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
        conn_tDBOutput_2.setAutoCommit(false);
        int commitEvery_tDBOutput_2 = 1;
        int commitCounter_tDBOutput_2 = 0;


   int batchSize_tDBOutput_2 = 1;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"VENDOR_CLASSIFICATION\" = ?,\"SHIPPING_POINT_SHIP_FROM\" = ?,\"BUYING_GROUP\" = ?,\"CUST_PREF_VENDOR\" = ?,\"SOURCE_VENDOR\" = ?,\"VENDOR_TERMS\" = ?,\"PO_PRIMARY_STATUS\" = ?,\"PO_SECONDARY_STATUS\" = ?,\"PO_TYPE\" = ?,\"WHSE_CHANGE_CODE\" = ?,\"CONF_STATUS\" = ?,\"PO_VALID_PRICING_FLAG\" = ?,\"PO_VALID_PRICING_APPROVAL\" = ?,\"PO_CHANGED_FLAG\" = ?,\"ALLOC_SCHEDULED_RECEIPT_FLAG\" = ?,\"PRICE_OVERRIDE_FLAG\" = ?,\"MARKED_BY_MERCHANDISER_FLAG\" = ?,\"FAILED_SCORECARD_FLAG\" = ?,\"MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CALENDAR_DATE_ANTICIPATED_RECEIPT\" = ?,\"CALENDAR_DATE_SCHEDULED_RECEIPT_DATE\" = ?,\"BUSINESS_DATE_ANTICIPATED_RECEIPT\" = ?,\"AVAIL_TIMESTAMP\" = ?,\"BUSINESS_ORDER_DATE\" = ?,\"SUGGESTED_ORDER_QTY\" = ?,\"SHIP_TO_CUST\" = ?,\"CUST_ORDER_NO\" = ?,\"CUST_ORDER_LINE_NO\" = ?,\"ORIG_ORDER_QTY\" = ?,\"ORIG_FOB_PER_ITEM\" = ?,\"ORIG_FREIGHT_PER_ITEM\" = ?,\"ORIG_AP_PER_ITEM\" = ?,\"ORIG_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"ORIG_FREIGHT_RATE_OVERRIDE\" = ?,\"ORIG_FREIGHT_TYPE_OVERRIDE\" = ?,\"ORIG_PICKUP_ALLOW_PER_ITEM\" = ?,\"ORIG_OFF_INV_ALLOW\" = ?,\"ORIG_UOM\" = ?,\"ORIG_ALT_DELV_PRICE\" = ?,\"ORIG_MERCH_ALLOW_CHARGE\" = ?,\"ORIG_FREIGHT_ALLOW_CHARGE\" = ?,\"ALLOC_QTY\" = ?,\"ALLOC_QTY_SPLITS\" = ?,\"INV_UNIT_PRICE\" = ?,\"FREE_GOODS_FLAG\" = ?,\"VENDOR_PRICE_LIST_UOM\" = ?,\"CONFIRMED_ORDER_QTY\" = ?,\"CONFIRMED_FOB_PER_ITEM\" = ?,\"CONFIRMED_FREIGHT_PER_ITEM\" = ?,\"CONFIRMED_AP_PER_ITEM\" = ?,\"CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_RATE_OVERRIDE\" = ?,\"CONFIRMED_FREIGHT_TYPE_OVERRIDE\" = ?,\"CONFIRMED_PICKUP_ALLOW_PER_ITEM\" = ?,\"CONFIRMED_OFF_INV_ALLOW\" = ?,\"CONFIRMED_UOM\" = ?,\"CONFIRMED_ALT_DELV_PRICE\" = ?,\"CONF_DIST_MERCH_ALLOW_CHARGE\" = ?,\"CONF_DIST_FREIGHT_ALLOW_CHARGE\" = ?,\"CONFIRMED_MRPT\" = ?,\"CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG\" = ?,\"CONFIRMED_PRICE_OVERRIDE_FLAG\" = ?,\"CARRIER_SHORT_QTY\" = ?,\"RECVD_DAMAGED_ACCEPTED_QTY\" = ?,\"RECVD_QTY\" = ?,\"VENDOR_SHORT_QTY\" = ?,\"CARRIER_SHORT_REASON_CODE\" = ?,\"VENDOR_SHORT_REASON_CODE\" = ?,\"RECVD_WGT\" = ?,\"DAMAGED_RECVD_WGT\" = ?,\"REVISED_PROFORMA_FLAG\" = ?,\"FREIGHT_PROFORMA_STATUS\" = ?,\"MERCH_PROFORMA_STATUS\" = ?,\"MERCH_EXT_AMT_TOBE_PAID\" = ?,\"MERCH_INV_DATE\" = ?,\"MERCH_INV_NO\" = ?,\"MERCH_PRICE_DIFF_STATUS\" = ?,\"MERCH_QTY_DIFF_STATUS\" = ?,\"MERCH_QTY_TO_BE_PAID\" = ?,\"MERCH_WGT_TO_BE_PAID\" = ?,\"MERCH_CASH_DISC\" = ?,\"FREIGHT_INV_NO\" = ?,\"FREIGHT_EXT_AMT_TO_BE_PAID\" = ?,\"FREIGHT_INV_DATE\" = ?,\"FREIGHT_CHARGE_TO_BE_PAID\" = ?,\"FREIGHT_CASH_DISC\" = ?,\"FREIGHT_QTY_TO_BE_PAID\" = ?,\"FREIGHT_CLAIM_QTY\" = ?,\"LOAD_CTRL_NO\" = ?,\"SPLIT_PO_FLAG\" = ?,\"TRUE_VENDOR\" = ?,\"MANIFEST_HIST_MFG_NO\" = ?,\"NOTE1\" = ?,\"TRUE_VENDOR_SHIP_FROM\" = ?,\"LAST_QTY_SENT_TO_DPR\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"IS_ACTIVE\" = ?,\"V4PF_SVOP\" = ?,\"UPDATED_USER_ID\" = ?,\"UPDATED_PROGRAM_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"IS_DELETED\" = ?,\"CREATED_ORIGIN\" = ?,\"CREATED_ORIGIN_TIMESTAMP\" = ?,\"UPDATED_ORIGIN\" = ?,\"UPDATED_ORIGIN_TIMESTAMP\" = ?,\"ORIG_UNLOAD_CHARGE_PER_ITEM\" = ?,\"CONF_UNLOAD_CHARGE_PER_ITEM\" = ? WHERE \"SITE_ID\" = ? AND \"PURCHASE_ORDER_NO\" = ? AND \"SMS_MAJ_LINE_NO\" = ? AND \"SMS_MIN_LINE_NO\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String V4ARBD;
	String V4PSRD;
	String V4ARDE;
	String V4MIDT;
	String V4FIDT;
	String V4ORDT;
	String AVAIL_TIMESTAMP;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
PURCHASE_ORDER_DETAIL_UPDATEStruct PURCHASE_ORDER_DETAIL_UPDATE_tmp = new PURCHASE_ORDER_DETAIL_UPDATEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_2");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_2 = context.SUS_Password; 
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				  
				String url_tDBInput_2 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  IMHBV4PF.V4PO, \n  IMHBV4PF.V4ITEM, \n  IMHBV4PF.V4ROSQ, \n  IMHBV4PF.V4OWID, \n  IMHBV4PF.V4ARCO, \n  IMHBV"
+"4PF.V4MNPC, \n  IMHBV4PF.V4MUPC, \n  IMHBV4PF.V4ITDS, \n  IMHBV4PF.V4VCAT, \n  IMHBV4PF.V4VNBR, \n  IMHBV4PF.V4ADCD, \n "
+" IMHBV4PF.V4BYGP, \n  IMHBV4PF.V4CPVN, \n  IMHBV4PF.V4PVND, \n  IMHBV4PF.V4TERM, \n  IMHBV4PF.V4POST, \n  IMHBV4PF.V4POS"
+"S, \n  IMHBV4PF.V4ORTY, \n  IMHBV4PF.V4WCCD, \n  IMHBV4PF.V4CFST, \n  IMHBV4PF.V4WHSE, \n  IMHBV4PF.V4VLPF, \n  IMHBV4PF"
+".V4VLPA, \n  IMHBV4PF.V4POCH, \n  IMHBV4PF.V4KMFG, \n  IMHBV4PF.V4ASRF, \n  IMHBV4PF.V4POFL, \n  IMHBV4PF.V4MKMF, \n  IM"
+"HBV4PF.V4FSCF, \n  IMHBV4PF.V4MELN, \n  IMHBV4PF.V4IPCF, \n  IMHBV4PF.V4ARBD, \n  IMHBV4PF.V4PSRD, \n  IMHBV4PF.V4ARDE, "
+"\n  IMHBV4PF.V4AVDT, \n  IMHBV4PF.V4AVTM, \n  IMHBV4PF.V4ORDT, \n  IMHBV4PF.V4PSOQ, \n  IMHBV4PF.V4CUNO, \n  IMHBV4PF.V4"
+"ORNO, \n  IMHBV4PF.V4ODLN, \n  IMHBV4PF.V4ITCI, \n  IMHBV4PF.V4POOQ, \n  IMHBV4PF.V4POFB, \n  IMHBV4PF.V4POFR, \n  IMHBV"
+"4PF.V4POAP, \n  IMHBV4PF.V4IPUO, \n  IMHBV4PF.V4IPUT, \n  IMHBV4PF.V4IFRO, \n  IMHBV4PF.V4IFRT, \n  IMHBV4PF.V4BDPI, \n "
+" IMHBV4PF.V4PAPI, \n  IMHBV4PF.V4POAL, \n  IMHBV4PF.V4POUM, \n  IMHBV4PF.V4OUCI, \n  IMHBV4PF.V4OADP, \n  IMHBV4PF.V4ACD"
+"M, \n  IMHBV4PF.V4ACDF, \n  IMHBV4PF.V4ALQY, \n  IMHBV4PF.V4ALQS, \n  IMHBV4PF.V4MRPR, \n  IMHBV4PF.V4IUPR, \n  IMHBV4PF"
+".V4FEGD, \n  IMHBV4PF.V4VPUM, \n  IMHBV4PF.V4PCOQ, \n  IMHBV4PF.V4PCFB, \n  IMHBV4PF.V4PCFR, \n  IMHBV4PF.V4PCAP, \n  IM"
+"HBV4PF.V4CPAL, \n  IMHBV4PF.V4CPUT, \n  IMHBV4PF.V4CFRO, \n  IMHBV4PF.V4CFTO, \n  IMHBV4PF.V4CPAP, \n  IMHBV4PF.V4CBDP, "
+"\n  IMHBV4PF.V4COIN, \n  IMHBV4PF.V4CUOM, \n  IMHBV4PF.V4CUCI, \n  IMHBV4PF.V4CADP, \n  IMHBV4PF.V4CACM, \n  IMHBV4PF.V4"
+"CACF, \n  IMHBV4PF.V4CMRP, \n  IMHBV4PF.V4CMEF, \n  IMHBV4PF.V4CFTP, \n  IMHBV4PF.V4CPOF, \n  IMHBV4PF.V4QYSH, \n  IMHBV"
+"4PF.V4QYDA, \n  IMHBV4PF.V4RCQT, \n  IMHBV4PF.V4VSQY, \n  IMHBV4PF.V4CSRC, \n  IMHBV4PF.V4VSRC, \n  IMHBV4PF.V4RVWT, \n "
+" IMHBV4PF.V4RVWK, \n  IMHBV4PF.V4DRWT, \n  IMHBV4PF.V4DRWK, \n  IMHBV4PF.V4RPFF, \n  IMHBV4PF.V4PPFS, \n  IMHBV4PF.V4PMP"
+"S, \n  IMHBV4PF.V4MEAP, \n  IMHBV4PF.V4MIDT, \n  IMHBV4PF.V4MINV, \n  IMHBV4PF.V4MPDD, \n  IMHBV4PF.V4MQDD, \n  IMHBV4PF"
+".V4MRQT, \n  IMHBV4PF.V4MRCW, \n  IMHBV4PF.V4MRCK, \n  IMHBV4PF.V4PFMM, \n  IMHBV4PF.V4MCSD, \n  IMHBV4PF.V4FINV, \n  IM"
+"HBV4PF.V4FEAP, \n  IMHBV4PF.V4FIDT, \n  IMHBV4PF.V4FRCW, \n  IMHBV4PF.V4FCAD, \n  IMHBV4PF.V4FRQT, \n  IMHBV4PF.V4PFMD, "
+"\n  IMHBV4PF.V4FTCQ, \n  IMHBV4PF.V4LCN, \n  IMHBV4PF.V4SPOF, \n  IMHBV4PF.V4PCLN, \n  IMHBV4PF.V4MFVN, \n  IMHBV4PF.V4M"
+"FID, \n  IMHBV4PF.V4ERRF, \n  IMHBV4PF.V4IMCC, \n  IMHBV4PF.V4COD1, \n  IMHBV4PF.V4NTYP, \n  IMHBV4PF.V4TDCD, \n  IMHBV4"
+"PF.V4QTIF, \n  IMHBV4PF.V4EADT, \n  IMHBV4PF.V4EATM, \n  IMHBV4PF.V4EAID, \n  IMHBV4PF.V4MODT, \n  IMHBV4PF.V4MOTM, \n  "
+"IMHBV4PF.V4MOID, \n  IMHBV4PF.V4MOPG\nFROM IMHBV4PF WHERE IMHBV4PF.V4EADT BETWEEN 0 AND 20191231 \nORDER BY IMHBV4PF.V4E"
+"ADT DESC";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.V4PO = null;
							} else {
	                         		
        	row2.V4PO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.V4ITEM = null;
							} else {
	                         		
        	row2.V4ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.V4ROSQ = null;
							} else {
		                          
            row2.V4ROSQ = rs_tDBInput_2.getBigDecimal(3);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row2.V4OWID = null;
							} else {
	                         		
        	row2.V4OWID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row2.V4ARCO = null;
							} else {
	                         		
        	row2.V4ARCO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row2.V4MNPC = null;
							} else {
	                         		
        	row2.V4MNPC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row2.V4MUPC = null;
							} else {
	                         		
        	row2.V4MUPC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row2.V4ITDS = null;
							} else {
	                         		
        	row2.V4ITDS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row2.V4VCAT = null;
							} else {
	                         		
        	row2.V4VCAT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row2.V4VNBR = null;
							} else {
	                         		
        	row2.V4VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row2.V4ADCD = null;
							} else {
		                          
            row2.V4ADCD = rs_tDBInput_2.getBigDecimal(11);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row2.V4BYGP = null;
							} else {
		                          
            row2.V4BYGP = rs_tDBInput_2.getBigDecimal(12);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row2.V4CPVN = null;
							} else {
	                         		
        	row2.V4CPVN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row2.V4PVND = null;
							} else {
	                         		
        	row2.V4PVND = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row2.V4TERM = null;
							} else {
	                         		
        	row2.V4TERM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row2.V4POST = null;
							} else {
	                         		
        	row2.V4POST = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 17) {
								row2.V4POSS = null;
							} else {
	                         		
        	row2.V4POSS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 17, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 18) {
								row2.V4ORTY = null;
							} else {
	                         		
        	row2.V4ORTY = routines.system.JDBCUtil.getString(rs_tDBInput_2, 18, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 19) {
								row2.V4WCCD = null;
							} else {
	                         		
        	row2.V4WCCD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 20) {
								row2.V4CFST = null;
							} else {
	                         		
        	row2.V4CFST = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 21) {
								row2.V4WHSE = null;
							} else {
	                         		
        	row2.V4WHSE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 21, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 22) {
								row2.V4VLPF = null;
							} else {
	                         		
        	row2.V4VLPF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 23) {
								row2.V4VLPA = null;
							} else {
	                         		
        	row2.V4VLPA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 24) {
								row2.V4POCH = null;
							} else {
	                         		
        	row2.V4POCH = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 25) {
								row2.V4KMFG = null;
							} else {
	                         		
        	row2.V4KMFG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 25, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 26) {
								row2.V4ASRF = null;
							} else {
	                         		
        	row2.V4ASRF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 27) {
								row2.V4POFL = null;
							} else {
	                         		
        	row2.V4POFL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 28) {
								row2.V4MKMF = null;
							} else {
	                         		
        	row2.V4MKMF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 28, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 29) {
								row2.V4FSCF = null;
							} else {
	                         		
        	row2.V4FSCF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 29, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 30) {
								row2.V4MELN = null;
							} else {
	                         		
        	row2.V4MELN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 30, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 31) {
								row2.V4IPCF = null;
							} else {
	                         		
        	row2.V4IPCF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 31, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 32) {
								row2.V4ARBD = null;
							} else {
		                          
            row2.V4ARBD = rs_tDBInput_2.getBigDecimal(32);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 33) {
								row2.V4PSRD = null;
							} else {
		                          
            row2.V4PSRD = rs_tDBInput_2.getBigDecimal(33);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 34) {
								row2.V4ARDE = null;
							} else {
		                          
            row2.V4ARDE = rs_tDBInput_2.getBigDecimal(34);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 35) {
								row2.V4AVDT = null;
							} else {
		                          
            row2.V4AVDT = rs_tDBInput_2.getBigDecimal(35);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 36) {
								row2.V4AVTM = null;
							} else {
		                          
            row2.V4AVTM = rs_tDBInput_2.getBigDecimal(36);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 37) {
								row2.V4ORDT = null;
							} else {
		                          
            row2.V4ORDT = rs_tDBInput_2.getBigDecimal(37);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 38) {
								row2.V4PSOQ = null;
							} else {
		                          
            row2.V4PSOQ = rs_tDBInput_2.getBigDecimal(38);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 39) {
								row2.V4CUNO = null;
							} else {
	                         		
        	row2.V4CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 39, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 40) {
								row2.V4ORNO = null;
							} else {
		                          
            row2.V4ORNO = rs_tDBInput_2.getBigDecimal(40);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 41) {
								row2.V4ODLN = null;
							} else {
		                          
            row2.V4ODLN = rs_tDBInput_2.getBigDecimal(41);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 42) {
								row2.V4ITCI = null;
							} else {
	                         		
        	row2.V4ITCI = routines.system.JDBCUtil.getString(rs_tDBInput_2, 42, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 43) {
								row2.V4POOQ = null;
							} else {
		                          
            row2.V4POOQ = rs_tDBInput_2.getBigDecimal(43);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 44) {
								row2.V4POFB = null;
							} else {
		                          
            row2.V4POFB = rs_tDBInput_2.getBigDecimal(44);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 45) {
								row2.V4POFR = null;
							} else {
		                          
            row2.V4POFR = rs_tDBInput_2.getBigDecimal(45);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 46) {
								row2.V4POAP = null;
							} else {
		                          
            row2.V4POAP = rs_tDBInput_2.getBigDecimal(46);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 47) {
								row2.V4IPUO = null;
							} else {
		                          
            row2.V4IPUO = rs_tDBInput_2.getBigDecimal(47);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 48) {
								row2.V4IPUT = null;
							} else {
	                         		
        	row2.V4IPUT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 48, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 49) {
								row2.V4IFRO = null;
							} else {
		                          
            row2.V4IFRO = rs_tDBInput_2.getBigDecimal(49);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 50) {
								row2.V4IFRT = null;
							} else {
	                         		
        	row2.V4IFRT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 50, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 51) {
								row2.V4BDPI = null;
							} else {
		                          
            row2.V4BDPI = rs_tDBInput_2.getBigDecimal(51);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 52) {
								row2.V4PAPI = null;
							} else {
		                          
            row2.V4PAPI = rs_tDBInput_2.getBigDecimal(52);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 53) {
								row2.V4POAL = null;
							} else {
		                          
            row2.V4POAL = rs_tDBInput_2.getBigDecimal(53);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 54) {
								row2.V4POUM = null;
							} else {
	                         		
        	row2.V4POUM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 54, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 55) {
								row2.V4OUCI = null;
							} else {
		                          
            row2.V4OUCI = rs_tDBInput_2.getBigDecimal(55);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 56) {
								row2.V4OADP = null;
							} else {
		                          
            row2.V4OADP = rs_tDBInput_2.getBigDecimal(56);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 57) {
								row2.V4ACDM = null;
							} else {
		                          
            row2.V4ACDM = rs_tDBInput_2.getBigDecimal(57);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 58) {
								row2.V4ACDF = null;
							} else {
		                          
            row2.V4ACDF = rs_tDBInput_2.getBigDecimal(58);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 59) {
								row2.V4ALQY = null;
							} else {
		                          
            row2.V4ALQY = rs_tDBInput_2.getBigDecimal(59);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 60) {
								row2.V4ALQS = null;
							} else {
		                          
            row2.V4ALQS = rs_tDBInput_2.getBigDecimal(60);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 61) {
								row2.V4MRPR = null;
							} else {
		                          
            row2.V4MRPR = rs_tDBInput_2.getBigDecimal(61);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 62) {
								row2.V4IUPR = null;
							} else {
		                          
            row2.V4IUPR = rs_tDBInput_2.getBigDecimal(62);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 63) {
								row2.V4FEGD = null;
							} else {
	                         		
        	row2.V4FEGD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 63, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 64) {
								row2.V4VPUM = null;
							} else {
	                         		
        	row2.V4VPUM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 64, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 65) {
								row2.V4PCOQ = null;
							} else {
		                          
            row2.V4PCOQ = rs_tDBInput_2.getBigDecimal(65);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 66) {
								row2.V4PCFB = null;
							} else {
		                          
            row2.V4PCFB = rs_tDBInput_2.getBigDecimal(66);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 67) {
								row2.V4PCFR = null;
							} else {
		                          
            row2.V4PCFR = rs_tDBInput_2.getBigDecimal(67);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 68) {
								row2.V4PCAP = null;
							} else {
		                          
            row2.V4PCAP = rs_tDBInput_2.getBigDecimal(68);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 69) {
								row2.V4CPAL = null;
							} else {
		                          
            row2.V4CPAL = rs_tDBInput_2.getBigDecimal(69);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 70) {
								row2.V4CPUT = null;
							} else {
	                         		
        	row2.V4CPUT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 70, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 71) {
								row2.V4CFRO = null;
							} else {
		                          
            row2.V4CFRO = rs_tDBInput_2.getBigDecimal(71);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 72) {
								row2.V4CFTO = null;
							} else {
	                         		
        	row2.V4CFTO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 72, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 73) {
								row2.V4CPAP = null;
							} else {
		                          
            row2.V4CPAP = rs_tDBInput_2.getBigDecimal(73);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 74) {
								row2.V4CBDP = null;
							} else {
		                          
            row2.V4CBDP = rs_tDBInput_2.getBigDecimal(74);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 75) {
								row2.V4COIN = null;
							} else {
		                          
            row2.V4COIN = rs_tDBInput_2.getBigDecimal(75);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 76) {
								row2.V4CUOM = null;
							} else {
	                         		
        	row2.V4CUOM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 76, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 77) {
								row2.V4CUCI = null;
							} else {
		                          
            row2.V4CUCI = rs_tDBInput_2.getBigDecimal(77);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 78) {
								row2.V4CADP = null;
							} else {
		                          
            row2.V4CADP = rs_tDBInput_2.getBigDecimal(78);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 79) {
								row2.V4CACM = null;
							} else {
		                          
            row2.V4CACM = rs_tDBInput_2.getBigDecimal(79);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 80) {
								row2.V4CACF = null;
							} else {
		                          
            row2.V4CACF = rs_tDBInput_2.getBigDecimal(80);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 81) {
								row2.V4CMRP = null;
							} else {
		                          
            row2.V4CMRP = rs_tDBInput_2.getBigDecimal(81);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 82) {
								row2.V4CMEF = null;
							} else {
	                         		
        	row2.V4CMEF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 82, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 83) {
								row2.V4CFTP = null;
							} else {
	                         		
        	row2.V4CFTP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 83, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 84) {
								row2.V4CPOF = null;
							} else {
	                         		
        	row2.V4CPOF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 84, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 85) {
								row2.V4QYSH = null;
							} else {
		                          
            row2.V4QYSH = rs_tDBInput_2.getBigDecimal(85);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 86) {
								row2.V4QYDA = null;
							} else {
		                          
            row2.V4QYDA = rs_tDBInput_2.getBigDecimal(86);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 87) {
								row2.V4RCQT = null;
							} else {
		                          
            row2.V4RCQT = rs_tDBInput_2.getBigDecimal(87);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 88) {
								row2.V4VSQY = null;
							} else {
		                          
            row2.V4VSQY = rs_tDBInput_2.getBigDecimal(88);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 89) {
								row2.V4CSRC = null;
							} else {
	                         		
        	row2.V4CSRC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 89, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 90) {
								row2.V4VSRC = null;
							} else {
	                         		
        	row2.V4VSRC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 90, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 91) {
								row2.V4RVWT = null;
							} else {
		                          
            row2.V4RVWT = rs_tDBInput_2.getBigDecimal(91);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 92) {
								row2.V4RVWK = null;
							} else {
		                          
            row2.V4RVWK = rs_tDBInput_2.getBigDecimal(92);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 93) {
								row2.V4DRWT = null;
							} else {
		                          
            row2.V4DRWT = rs_tDBInput_2.getBigDecimal(93);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 94) {
								row2.V4DRWK = null;
							} else {
		                          
            row2.V4DRWK = rs_tDBInput_2.getBigDecimal(94);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 95) {
								row2.V4RPFF = null;
							} else {
	                         		
        	row2.V4RPFF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 95, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 96) {
								row2.V4PPFS = null;
							} else {
	                         		
        	row2.V4PPFS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 96, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 97) {
								row2.V4PMPS = null;
							} else {
	                         		
        	row2.V4PMPS = routines.system.JDBCUtil.getString(rs_tDBInput_2, 97, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 98) {
								row2.V4MEAP = null;
							} else {
		                          
            row2.V4MEAP = rs_tDBInput_2.getBigDecimal(98);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 99) {
								row2.V4MIDT = null;
							} else {
		                          
            row2.V4MIDT = rs_tDBInput_2.getBigDecimal(99);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 100) {
								row2.V4MINV = null;
							} else {
	                         		
        	row2.V4MINV = routines.system.JDBCUtil.getString(rs_tDBInput_2, 100, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 101) {
								row2.V4MPDD = null;
							} else {
	                         		
        	row2.V4MPDD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 101, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 102) {
								row2.V4MQDD = null;
							} else {
	                         		
        	row2.V4MQDD = routines.system.JDBCUtil.getString(rs_tDBInput_2, 102, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 103) {
								row2.V4MRQT = null;
							} else {
		                          
            row2.V4MRQT = rs_tDBInput_2.getBigDecimal(103);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 104) {
								row2.V4MRCW = null;
							} else {
		                          
            row2.V4MRCW = rs_tDBInput_2.getBigDecimal(104);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 105) {
								row2.V4MRCK = null;
							} else {
		                          
            row2.V4MRCK = rs_tDBInput_2.getBigDecimal(105);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 106) {
								row2.V4PFMM = null;
							} else {
		                          
            row2.V4PFMM = rs_tDBInput_2.getBigDecimal(106);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 107) {
								row2.V4MCSD = null;
							} else {
		                          
            row2.V4MCSD = rs_tDBInput_2.getBigDecimal(107);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 108) {
								row2.V4FINV = null;
							} else {
	                         		
        	row2.V4FINV = routines.system.JDBCUtil.getString(rs_tDBInput_2, 108, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 109) {
								row2.V4FEAP = null;
							} else {
		                          
            row2.V4FEAP = rs_tDBInput_2.getBigDecimal(109);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 110) {
								row2.V4FIDT = null;
							} else {
		                          
            row2.V4FIDT = rs_tDBInput_2.getBigDecimal(110);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 111) {
								row2.V4FRCW = null;
							} else {
		                          
            row2.V4FRCW = rs_tDBInput_2.getBigDecimal(111);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 112) {
								row2.V4FCAD = null;
							} else {
		                          
            row2.V4FCAD = rs_tDBInput_2.getBigDecimal(112);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 113) {
								row2.V4FRQT = null;
							} else {
		                          
            row2.V4FRQT = rs_tDBInput_2.getBigDecimal(113);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 114) {
								row2.V4PFMD = null;
							} else {
		                          
            row2.V4PFMD = rs_tDBInput_2.getBigDecimal(114);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 115) {
								row2.V4FTCQ = null;
							} else {
		                          
            row2.V4FTCQ = rs_tDBInput_2.getBigDecimal(115);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 116) {
								row2.V4LCN = null;
							} else {
	                         		
        	row2.V4LCN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 116, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 117) {
								row2.V4SPOF = null;
							} else {
	                         		
        	row2.V4SPOF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 117, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 118) {
								row2.V4PCLN = null;
							} else {
		                          
            row2.V4PCLN = rs_tDBInput_2.getBigDecimal(118);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 119) {
								row2.V4MFVN = null;
							} else {
	                         		
        	row2.V4MFVN = routines.system.JDBCUtil.getString(rs_tDBInput_2, 119, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 120) {
								row2.V4MFID = null;
							} else {
	                         		
        	row2.V4MFID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 120, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 121) {
								row2.V4ERRF = null;
							} else {
	                         		
        	row2.V4ERRF = routines.system.JDBCUtil.getString(rs_tDBInput_2, 121, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 122) {
								row2.V4IMCC = null;
							} else {
	                         		
        	row2.V4IMCC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 122, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 123) {
								row2.V4COD1 = null;
							} else {
	                         		
        	row2.V4COD1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 123, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 124) {
								row2.V4NTYP = null;
							} else {
	                         		
        	row2.V4NTYP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 124, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 125) {
								row2.V4TDCD = null;
							} else {
		                          
            row2.V4TDCD = rs_tDBInput_2.getBigDecimal(125);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 126) {
								row2.V4QTIF = null;
							} else {
		                          
            row2.V4QTIF = rs_tDBInput_2.getBigDecimal(126);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 127) {
								row2.V4EADT = null;
							} else {
		                          
            row2.V4EADT = rs_tDBInput_2.getBigDecimal(127);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 128) {
								row2.V4EATM = null;
							} else {
		                          
            row2.V4EATM = rs_tDBInput_2.getBigDecimal(128);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 129) {
								row2.V4EAID = null;
							} else {
	                         		
        	row2.V4EAID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 129, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 130) {
								row2.V4MODT = null;
							} else {
		                          
            row2.V4MODT = rs_tDBInput_2.getBigDecimal(130);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 131) {
								row2.V4MOTM = null;
							} else {
		                          
            row2.V4MOTM = rs_tDBInput_2.getBigDecimal(131);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 132) {
								row2.V4MOID = null;
							} else {
	                         		
        	row2.V4MOID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 132, true);
		                    }
							if(colQtyInRs_tDBInput_2 < 133) {
								row2.V4MOPG = null;
							} else {
	                         		
        	row2.V4MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 133, true);
		                    }
					



 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.V4ARBD = TimeStampConverting.convertToDate(row2.V4ARBD.toString()) ;
Var.V4PSRD = TimeStampConverting.convertToDate(row2.V4PSRD.toString()) ;
Var.V4ARDE = TimeStampConverting.convertToDate(row2.V4ARDE.toString()) ;
Var.V4MIDT = TimeStampConverting.convertToDate(row2.V4MIDT.toString()) ;
Var.V4FIDT = TimeStampConverting.convertToDate(row2.V4FIDT.toString()) ;
Var.V4ORDT = TimeStampConverting.convertToDate(row2.V4ORDT.toString()) ;
Var.AVAIL_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row2.V4AVDT.toString(),row2.V4AVTM.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row2.V4EADT.toString(),row2.V4EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row2.V4MODT.toString(),row2.V4MOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

PURCHASE_ORDER_DETAIL_UPDATE = null;


// # Output table : 'PURCHASE_ORDER_DETAIL_UPDATE'
PURCHASE_ORDER_DETAIL_UPDATE_tmp.SITE_ID = context.opco;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.PURCHASE_ORDER_NO = row2.V4PO ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.SMS_MAJ_LINE_NO = row2.V4ROSQ ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.SMS_MIN_LINE_NO = new BigDecimal("1");
PURCHASE_ORDER_DETAIL_UPDATE_tmp.VENDOR_CLASSIFICATION = row2.V4VCAT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.SHIPPING_POINT_SHIP_FROM = row2.V4ADCD;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.BUYING_GROUP = row2.V4BYGP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CUST_PREF_VENDOR = row2.V4CPVN ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.SOURCE_VENDOR = row2.V4PVND ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.VENDOR_TERMS = row2.V4TERM ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.PO_PRIMARY_STATUS = row2.V4POST ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.PO_SECONDARY_STATUS = row2.V4POSS ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.PO_TYPE = row2.V4ORTY ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.WHSE_CHANGE_CODE = row2.V4WCCD ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONF_STATUS = row2.V4CFST ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.PO_VALID_PRICING_FLAG = row2.V4VLPF ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.PO_VALID_PRICING_APPROVAL = row2.V4VLPA ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.PO_CHANGED_FLAG = row2.V4POCH ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ALLOC_SCHEDULED_RECEIPT_FLAG = row2.V4ASRF ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.PRICE_OVERRIDE_FLAG = row2.V4POFL ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MARKED_BY_MERCHANDISER_FLAG = row2.V4MKMF ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FAILED_SCORECARD_FLAG = row2.V4FSCF ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MANUALLY_ENTERED_LINE_FLAG = row2.V4MELN ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CALENDAR_DATE_ANTICIPATED_RECEIPT = Var.V4ARBD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARBD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE = Var.V4PSRD!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4PSRD):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.BUSINESS_DATE_ANTICIPATED_RECEIPT = Var.V4ARDE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ARDE):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.AVAIL_TIMESTAMP = Var.AVAIL_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.AVAIL_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.BUSINESS_ORDER_DATE = Var.V4ORDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4ORDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.SUGGESTED_ORDER_QTY = row2.V4PSOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.SHIP_TO_CUST = row2.V4CUNO ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CUST_ORDER_NO = row2.V4ORNO ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CUST_ORDER_LINE_NO = row2.V4ODLN ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_ORDER_QTY = row2.V4POOQ ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_FOB_PER_ITEM = row2.V4POFB ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_FREIGHT_PER_ITEM = row2.V4POFR;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_AP_PER_ITEM = row2.V4POAP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_PICKUP_ALLOW_RATE_OVERRIDE = row2.V4IPUO;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE = row2.V4IPUT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_FREIGHT_RATE_OVERRIDE = row2.V4IFRO;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_FREIGHT_TYPE_OVERRIDE = row2.V4IFRT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_PICKUP_ALLOW_PER_ITEM = row2.V4PAPI;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_OFF_INV_ALLOW = row2.V4POAL;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_UOM = row2.V4POUM;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_ALT_DELV_PRICE = row2.V4OADP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_MERCH_ALLOW_CHARGE = row2.V4ACDM ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_FREIGHT_ALLOW_CHARGE = row2.V4ACDF ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ALLOC_QTY = row2.V4ALQY ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ALLOC_QTY_SPLITS = row2.V4ALQS ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.INV_UNIT_PRICE = row2.V4IUPR ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREE_GOODS_FLAG = row2.V4FEGD ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.VENDOR_PRICE_LIST_UOM = row2.V4VPUM ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_ORDER_QTY = row2.V4PCOQ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_FOB_PER_ITEM = row2.V4PCFB;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_FREIGHT_PER_ITEM = row2.V4PCFR;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_AP_PER_ITEM = row2.V4PCAP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE = row2.V4CPAL;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE = row2.V4CPUT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_FREIGHT_RATE_OVERRIDE = row2.V4CFRO;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_FREIGHT_TYPE_OVERRIDE = row2.V4CFTO;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_PICKUP_ALLOW_PER_ITEM = row2.V4CPAP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_OFF_INV_ALLOW = row2.V4COIN;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_UOM = row2.V4CUOM;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_ALT_DELV_PRICE = row2.V4CADP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONF_DIST_MERCH_ALLOW_CHARGE = row2.V4CACM;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONF_DIST_FREIGHT_ALLOW_CHARGE = row2.V4CACF;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_MRPT = row2.V4CMRP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG = row2.V4CMEF;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONFIRMED_PRICE_OVERRIDE_FLAG = row2.V4CPOF;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CARRIER_SHORT_QTY = row2.V4QYSH;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.RECVD_DAMAGED_ACCEPTED_QTY = row2.V4QYDA;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.RECVD_QTY = row2.V4RCQT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.VENDOR_SHORT_QTY = row2.V4VSQY;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CARRIER_SHORT_REASON_CODE = row2.V4CSRC;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.VENDOR_SHORT_REASON_CODE = row2.V4VSRC;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.RECVD_WGT = row2.V4RVWT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.DAMAGED_RECVD_WGT = row2.V4DRWT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.REVISED_PROFORMA_FLAG = row2.V4RPFF;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREIGHT_PROFORMA_STATUS = row2.V4PPFS;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_PROFORMA_STATUS = row2.V4PMPS;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_EXT_AMT_TOBE_PAID = row2.V4MEAP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_INV_DATE = Var.V4MIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4MIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_INV_NO = row2.V4MINV;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_PRICE_DIFF_STATUS = row2.V4MPDD;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_QTY_DIFF_STATUS = row2.V4MQDD;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_QTY_TO_BE_PAID = row2.V4MRQT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_WGT_TO_BE_PAID = row2.V4MRCW;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MERCH_CASH_DISC = row2.V4MCSD;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREIGHT_INV_NO = row2.V4FINV;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREIGHT_EXT_AMT_TO_BE_PAID = row2.V4FEAP;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREIGHT_INV_DATE = Var.V4FIDT!=""? TalendDate.parseDate("dd-MM-yyyy",Var.V4FIDT):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREIGHT_CHARGE_TO_BE_PAID = row2.V4FRCW;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREIGHT_CASH_DISC = row2.V4FCAD;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREIGHT_QTY_TO_BE_PAID = row2.V4FRQT;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.FREIGHT_CLAIM_QTY = row2.V4FTCQ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.LOAD_CTRL_NO = row2.V4LCN;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.SPLIT_PO_FLAG = row2.V4SPOF;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.TRUE_VENDOR = row2.V4MFVN;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.MANIFEST_HIST_MFG_NO = row2.V4MFID;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.NOTE1 = row2.V4COD1;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.TRUE_VENDOR_SHIP_FROM = row2.V4TDCD;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.LAST_QTY_SENT_TO_DPR = row2.V4QTIF;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CREATED_USER_ID = row2.V4EAID;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.IS_ACTIVE = true;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.V4PF_SVOP = context.svop;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.UPDATED_USER_ID = row2.V4MOID;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.UPDATED_PROGRAM_ID = row2.V4MOPG;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.IS_DELETED = false;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CREATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.UPDATED_ORIGIN = "SUS";
PURCHASE_ORDER_DETAIL_UPDATE_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.ORIG_UNLOAD_CHARGE_PER_ITEM = row2.V4OUCI;
PURCHASE_ORDER_DETAIL_UPDATE_tmp.CONF_UNLOAD_CHARGE_PER_ITEM = row2.V4CUCI;
PURCHASE_ORDER_DETAIL_UPDATE = PURCHASE_ORDER_DETAIL_UPDATE_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "PURCHASE_ORDER_DETAIL_UPDATE"
if(PURCHASE_ORDER_DETAIL_UPDATE != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"PURCHASE_ORDER_DETAIL_UPDATE"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_CLASSIFICATION == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_CLASSIFICATION);
}

                    pstmt_tDBOutput_2.setBigDecimal(2, PURCHASE_ORDER_DETAIL_UPDATE.SHIPPING_POINT_SHIP_FROM);

                    pstmt_tDBOutput_2.setBigDecimal(3, PURCHASE_ORDER_DETAIL_UPDATE.BUYING_GROUP);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CUST_PREF_VENDOR == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, PURCHASE_ORDER_DETAIL_UPDATE.CUST_PREF_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.SOURCE_VENDOR == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, PURCHASE_ORDER_DETAIL_UPDATE.SOURCE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_TERMS == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_TERMS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.PO_PRIMARY_STATUS == null) {
pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(7, PURCHASE_ORDER_DETAIL_UPDATE.PO_PRIMARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.PO_SECONDARY_STATUS == null) {
pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(8, PURCHASE_ORDER_DETAIL_UPDATE.PO_SECONDARY_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.PO_TYPE == null) {
pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(9, PURCHASE_ORDER_DETAIL_UPDATE.PO_TYPE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.WHSE_CHANGE_CODE == null) {
pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(10, PURCHASE_ORDER_DETAIL_UPDATE.WHSE_CHANGE_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CONF_STATUS == null) {
pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(11, PURCHASE_ORDER_DETAIL_UPDATE.CONF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.PO_VALID_PRICING_FLAG == null) {
pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(12, PURCHASE_ORDER_DETAIL_UPDATE.PO_VALID_PRICING_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.PO_VALID_PRICING_APPROVAL == null) {
pstmt_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(13, PURCHASE_ORDER_DETAIL_UPDATE.PO_VALID_PRICING_APPROVAL);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.PO_CHANGED_FLAG == null) {
pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(14, PURCHASE_ORDER_DETAIL_UPDATE.PO_CHANGED_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.ALLOC_SCHEDULED_RECEIPT_FLAG == null) {
pstmt_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(15, PURCHASE_ORDER_DETAIL_UPDATE.ALLOC_SCHEDULED_RECEIPT_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(16, PURCHASE_ORDER_DETAIL_UPDATE.PRICE_OVERRIDE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.MARKED_BY_MERCHANDISER_FLAG == null) {
pstmt_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(17, PURCHASE_ORDER_DETAIL_UPDATE.MARKED_BY_MERCHANDISER_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.FAILED_SCORECARD_FLAG == null) {
pstmt_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(18, PURCHASE_ORDER_DETAIL_UPDATE.FAILED_SCORECARD_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(19, PURCHASE_ORDER_DETAIL_UPDATE.MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CALENDAR_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_2.setTimestamp(20, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.CALENDAR_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(20, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(21, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.CALENDAR_DATE_SCHEDULED_RECEIPT_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(21, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.BUSINESS_DATE_ANTICIPATED_RECEIPT != null) {
pstmt_tDBOutput_2.setTimestamp(22, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.BUSINESS_DATE_ANTICIPATED_RECEIPT.getTime()));
} else {
pstmt_tDBOutput_2.setNull(22, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.AVAIL_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(23, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.AVAIL_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(23, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.BUSINESS_ORDER_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(24, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.BUSINESS_ORDER_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(24, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_2.setBigDecimal(25, PURCHASE_ORDER_DETAIL_UPDATE.SUGGESTED_ORDER_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.SHIP_TO_CUST == null) {
pstmt_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(26, PURCHASE_ORDER_DETAIL_UPDATE.SHIP_TO_CUST);
}

                    pstmt_tDBOutput_2.setBigDecimal(27, PURCHASE_ORDER_DETAIL_UPDATE.CUST_ORDER_NO);

                    pstmt_tDBOutput_2.setBigDecimal(28, PURCHASE_ORDER_DETAIL_UPDATE.CUST_ORDER_LINE_NO);

                    pstmt_tDBOutput_2.setBigDecimal(29, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_ORDER_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(30, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_FOB_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(31, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(32, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_AP_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(33, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_2.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(34, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_2.setBigDecimal(35, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.ORIG_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(36, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_2.setBigDecimal(37, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(38, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.ORIG_UOM == null) {
pstmt_tDBOutput_2.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(39, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_UOM);
}

                    pstmt_tDBOutput_2.setBigDecimal(40, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_ALT_DELV_PRICE);

                    pstmt_tDBOutput_2.setBigDecimal(41, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(42, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(43, PURCHASE_ORDER_DETAIL_UPDATE.ALLOC_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(44, PURCHASE_ORDER_DETAIL_UPDATE.ALLOC_QTY_SPLITS);

                    pstmt_tDBOutput_2.setBigDecimal(45, PURCHASE_ORDER_DETAIL_UPDATE.INV_UNIT_PRICE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.FREE_GOODS_FLAG == null) {
pstmt_tDBOutput_2.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(46, PURCHASE_ORDER_DETAIL_UPDATE.FREE_GOODS_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_PRICE_LIST_UOM == null) {
pstmt_tDBOutput_2.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(47, PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_PRICE_LIST_UOM);
}

                    pstmt_tDBOutput_2.setBigDecimal(48, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_ORDER_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(49, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_FOB_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(50, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_FREIGHT_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(51, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_AP_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(52, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_PICKUP_ALLOW_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_2.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(53, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_PICKUP_ALLOW_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_2.setBigDecimal(54, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_FREIGHT_RATE_OVERRIDE);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_FREIGHT_TYPE_OVERRIDE == null) {
pstmt_tDBOutput_2.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(55, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_FREIGHT_TYPE_OVERRIDE);
}

                    pstmt_tDBOutput_2.setBigDecimal(56, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_PICKUP_ALLOW_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(57, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_OFF_INV_ALLOW);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_UOM == null) {
pstmt_tDBOutput_2.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(58, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_UOM);
}

                    pstmt_tDBOutput_2.setBigDecimal(59, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_ALT_DELV_PRICE);

                    pstmt_tDBOutput_2.setBigDecimal(60, PURCHASE_ORDER_DETAIL_UPDATE.CONF_DIST_MERCH_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(61, PURCHASE_ORDER_DETAIL_UPDATE.CONF_DIST_FREIGHT_ALLOW_CHARGE);

                    pstmt_tDBOutput_2.setBigDecimal(62, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_MRPT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG == null) {
pstmt_tDBOutput_2.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(63, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_AS_MANUALLY_ENTERED_LINE_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_PRICE_OVERRIDE_FLAG == null) {
pstmt_tDBOutput_2.setNull(64, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(64, PURCHASE_ORDER_DETAIL_UPDATE.CONFIRMED_PRICE_OVERRIDE_FLAG);
}

                    pstmt_tDBOutput_2.setBigDecimal(65, PURCHASE_ORDER_DETAIL_UPDATE.CARRIER_SHORT_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(66, PURCHASE_ORDER_DETAIL_UPDATE.RECVD_DAMAGED_ACCEPTED_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(67, PURCHASE_ORDER_DETAIL_UPDATE.RECVD_QTY);

                    pstmt_tDBOutput_2.setBigDecimal(68, PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_SHORT_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CARRIER_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_2.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(69, PURCHASE_ORDER_DETAIL_UPDATE.CARRIER_SHORT_REASON_CODE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_SHORT_REASON_CODE == null) {
pstmt_tDBOutput_2.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(70, PURCHASE_ORDER_DETAIL_UPDATE.VENDOR_SHORT_REASON_CODE);
}

                    pstmt_tDBOutput_2.setBigDecimal(71, PURCHASE_ORDER_DETAIL_UPDATE.RECVD_WGT);

                    pstmt_tDBOutput_2.setBigDecimal(72, PURCHASE_ORDER_DETAIL_UPDATE.DAMAGED_RECVD_WGT);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.REVISED_PROFORMA_FLAG == null) {
pstmt_tDBOutput_2.setNull(73, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(73, PURCHASE_ORDER_DETAIL_UPDATE.REVISED_PROFORMA_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_PROFORMA_STATUS == null) {
pstmt_tDBOutput_2.setNull(74, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(74, PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_PROFORMA_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.MERCH_PROFORMA_STATUS == null) {
pstmt_tDBOutput_2.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(75, PURCHASE_ORDER_DETAIL_UPDATE.MERCH_PROFORMA_STATUS);
}

                    pstmt_tDBOutput_2.setBigDecimal(76, PURCHASE_ORDER_DETAIL_UPDATE.MERCH_EXT_AMT_TOBE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.MERCH_INV_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(77, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.MERCH_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(77, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.MERCH_INV_NO == null) {
pstmt_tDBOutput_2.setNull(78, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(78, PURCHASE_ORDER_DETAIL_UPDATE.MERCH_INV_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.MERCH_PRICE_DIFF_STATUS == null) {
pstmt_tDBOutput_2.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(79, PURCHASE_ORDER_DETAIL_UPDATE.MERCH_PRICE_DIFF_STATUS);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.MERCH_QTY_DIFF_STATUS == null) {
pstmt_tDBOutput_2.setNull(80, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(80, PURCHASE_ORDER_DETAIL_UPDATE.MERCH_QTY_DIFF_STATUS);
}

                    pstmt_tDBOutput_2.setBigDecimal(81, PURCHASE_ORDER_DETAIL_UPDATE.MERCH_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_2.setBigDecimal(82, PURCHASE_ORDER_DETAIL_UPDATE.MERCH_WGT_TO_BE_PAID);

                    pstmt_tDBOutput_2.setBigDecimal(83, PURCHASE_ORDER_DETAIL_UPDATE.MERCH_CASH_DISC);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_INV_NO == null) {
pstmt_tDBOutput_2.setNull(84, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(84, PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_INV_NO);
}

                    pstmt_tDBOutput_2.setBigDecimal(85, PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_EXT_AMT_TO_BE_PAID);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_INV_DATE != null) {
pstmt_tDBOutput_2.setTimestamp(86, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_INV_DATE.getTime()));
} else {
pstmt_tDBOutput_2.setNull(86, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_2.setBigDecimal(87, PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_CHARGE_TO_BE_PAID);

                    pstmt_tDBOutput_2.setBigDecimal(88, PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_CASH_DISC);

                    pstmt_tDBOutput_2.setBigDecimal(89, PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_QTY_TO_BE_PAID);

                    pstmt_tDBOutput_2.setBigDecimal(90, PURCHASE_ORDER_DETAIL_UPDATE.FREIGHT_CLAIM_QTY);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.LOAD_CTRL_NO == null) {
pstmt_tDBOutput_2.setNull(91, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(91, PURCHASE_ORDER_DETAIL_UPDATE.LOAD_CTRL_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.SPLIT_PO_FLAG == null) {
pstmt_tDBOutput_2.setNull(92, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(92, PURCHASE_ORDER_DETAIL_UPDATE.SPLIT_PO_FLAG);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.TRUE_VENDOR == null) {
pstmt_tDBOutput_2.setNull(93, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(93, PURCHASE_ORDER_DETAIL_UPDATE.TRUE_VENDOR);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.MANIFEST_HIST_MFG_NO == null) {
pstmt_tDBOutput_2.setNull(94, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(94, PURCHASE_ORDER_DETAIL_UPDATE.MANIFEST_HIST_MFG_NO);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.NOTE1 == null) {
pstmt_tDBOutput_2.setNull(95, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(95, PURCHASE_ORDER_DETAIL_UPDATE.NOTE1);
}

                    pstmt_tDBOutput_2.setBigDecimal(96, PURCHASE_ORDER_DETAIL_UPDATE.TRUE_VENDOR_SHIP_FROM);

                    pstmt_tDBOutput_2.setBigDecimal(97, PURCHASE_ORDER_DETAIL_UPDATE.LAST_QTY_SENT_TO_DPR);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(98, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(98, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CREATED_USER_ID == null) {
pstmt_tDBOutput_2.setNull(99, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(99, PURCHASE_ORDER_DETAIL_UPDATE.CREATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.IS_ACTIVE == null) {
pstmt_tDBOutput_2.setNull(100, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_2.setBoolean(100, PURCHASE_ORDER_DETAIL_UPDATE.IS_ACTIVE);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.V4PF_SVOP == null) {
pstmt_tDBOutput_2.setNull(101, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(101, PURCHASE_ORDER_DETAIL_UPDATE.V4PF_SVOP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_USER_ID == null) {
pstmt_tDBOutput_2.setNull(102, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(102, PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_USER_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_PROGRAM_ID == null) {
pstmt_tDBOutput_2.setNull(103, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(103, PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_PROGRAM_ID);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(104, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(104, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.IS_DELETED == null) {
pstmt_tDBOutput_2.setNull(105, java.sql.Types.BOOLEAN);
} else {pstmt_tDBOutput_2.setBoolean(105, PURCHASE_ORDER_DETAIL_UPDATE.IS_DELETED);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CREATED_ORIGIN == null) {
pstmt_tDBOutput_2.setNull(106, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(106, PURCHASE_ORDER_DETAIL_UPDATE.CREATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(107, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(107, java.sql.Types.TIMESTAMP);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_2.setNull(108, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(108, PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_ORIGIN);
}

                    if(PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_2.setTimestamp(109, new java.sql.Timestamp(PURCHASE_ORDER_DETAIL_UPDATE.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_2.setNull(109, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_2.setBigDecimal(110, PURCHASE_ORDER_DETAIL_UPDATE.ORIG_UNLOAD_CHARGE_PER_ITEM);

                    pstmt_tDBOutput_2.setBigDecimal(111, PURCHASE_ORDER_DETAIL_UPDATE.CONF_UNLOAD_CHARGE_PER_ITEM);

                    if(PURCHASE_ORDER_DETAIL_UPDATE.SITE_ID == null) {
pstmt_tDBOutput_2.setNull(112 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(112 + count_tDBOutput_2, PURCHASE_ORDER_DETAIL_UPDATE.SITE_ID);
}


                    if(PURCHASE_ORDER_DETAIL_UPDATE.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_2.setNull(113 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(113 + count_tDBOutput_2, PURCHASE_ORDER_DETAIL_UPDATE.PURCHASE_ORDER_NO);
}


                    pstmt_tDBOutput_2.setBigDecimal(114 + count_tDBOutput_2, PURCHASE_ORDER_DETAIL_UPDATE.SMS_MAJ_LINE_NO);


                    pstmt_tDBOutput_2.setBigDecimal(115 + count_tDBOutput_2, PURCHASE_ORDER_DETAIL_UPDATE.SMS_MIN_LINE_NO);


    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_2++;
                if(commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
                try {
                		int countSum_tDBOutput_2 = 0;
                		    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
            	    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
            	    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
            	    	
                batchSizeCounter_tDBOutput_2 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
			    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
			    	String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					}else{
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}
			    	
			    	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
					
			    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
			    	
			    	System.err.println(errormessage_tDBOutput_2);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                    }
                    conn_tDBOutput_2.commit();
                    if(rowsToCommitCount_tDBOutput_2 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_2 = 0;
                    }
                    commitCounter_tDBOutput_2=0;
                }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "PURCHASE_ORDER_DETAIL_UPDATE"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_2", end_Hash.get("tDBInput_2")-start_Hash.get("tDBInput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
			}
			conn_tDBOutput_2.commit();
			if(rowsToCommitCount_tDBOutput_2 != 0){
				
				rowsToCommitCount_tDBOutput_2 = 0;
			}
			commitCounter_tDBOutput_2 = 0;
		
    	conn_tDBOutput_2 .close();
    	
    	resourceMap.put("finish_tDBOutput_2", true);
    	

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"PURCHASE_ORDER_DETAIL_UPDATE");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBOutput_2", end_Hash.get("tDBOutput_2")-start_Hash.get("tDBOutput_2"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_2") == null){
            java.sql.Connection ctn_tDBOutput_2 = null;
            if((ctn_tDBOutput_2 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_2")) != null){
                try {
                    ctn_tDBOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                    String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                    System.err.println(errorMessage_tDBOutput_2);
                }
            }
        }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Purchase_Order_Detail_Update_Inbound Purchase_Order_Detail_Update_InboundClass = new Purchase_Order_Detail_Update_Inbound();

        int exitCode = Purchase_Order_Detail_Update_InboundClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Purchase_Order_Detail_Update_Inbound.class.getClassLoader().getResourceAsStream("sus_sli_etl/purchase_order_detail_update_inbound_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Purchase_Order_Detail_Update_Inbound.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("opco", "id_String");
                        if(context.getStringValue("opco") == null) {
                            context.opco = null;
                        } else {
                            context.opco=(String) context.getProperty("opco");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("sopco", "id_String");
                        if(context.getStringValue("sopco") == null) {
                            context.sopco = null;
                        } else {
                            context.sopco=(String) context.getProperty("sopco");
                        }
                        context.setContextType("svop", "id_String");
                        if(context.getStringValue("svop") == null) {
                            context.svop = null;
                        } else {
                            context.svop=(String) context.getProperty("svop");
                        }
                        context.setContextType("GIM_AdditionalParams", "id_String");
                        if(context.getStringValue("GIM_AdditionalParams") == null) {
                            context.GIM_AdditionalParams = null;
                        } else {
                            context.GIM_AdditionalParams=(String) context.getProperty("GIM_AdditionalParams");
                        }
                        context.setContextType("GIM_Database", "id_String");
                        if(context.getStringValue("GIM_Database") == null) {
                            context.GIM_Database = null;
                        } else {
                            context.GIM_Database=(String) context.getProperty("GIM_Database");
                        }
                        context.setContextType("GIM_Login", "id_String");
                        if(context.getStringValue("GIM_Login") == null) {
                            context.GIM_Login = null;
                        } else {
                            context.GIM_Login=(String) context.getProperty("GIM_Login");
                        }
                        context.setContextType("GIM_Password", "id_Password");
                        if(context.getStringValue("GIM_Password") == null) {
                            context.GIM_Password = null;
                        } else {
                            String pwd_GIM_Password_value = context.getProperty("GIM_Password");
                            context.GIM_Password = null;
                            if(pwd_GIM_Password_value!=null) {
                                if(context_param.containsKey("GIM_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.GIM_Password = pwd_GIM_Password_value;
                                } else if (!pwd_GIM_Password_value.isEmpty()) {
                                    try {
                                        context.GIM_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_GIM_Password_value);
                                        context.put("GIM_Password",context.GIM_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("GIM_Port", "id_String");
                        if(context.getStringValue("GIM_Port") == null) {
                            context.GIM_Port = null;
                        } else {
                            context.GIM_Port=(String) context.getProperty("GIM_Port");
                        }
                        context.setContextType("GIM_Schema_Demand", "id_String");
                        if(context.getStringValue("GIM_Schema_Demand") == null) {
                            context.GIM_Schema_Demand = null;
                        } else {
                            context.GIM_Schema_Demand=(String) context.getProperty("GIM_Schema_Demand");
                        }
                        context.setContextType("GIM_Schema_Inventory", "id_String");
                        if(context.getStringValue("GIM_Schema_Inventory") == null) {
                            context.GIM_Schema_Inventory = null;
                        } else {
                            context.GIM_Schema_Inventory=(String) context.getProperty("GIM_Schema_Inventory");
                        }
                        context.setContextType("GIM_Schema_Master", "id_String");
                        if(context.getStringValue("GIM_Schema_Master") == null) {
                            context.GIM_Schema_Master = null;
                        } else {
                            context.GIM_Schema_Master=(String) context.getProperty("GIM_Schema_Master");
                        }
                        context.setContextType("GIM_Schema_Migrating_Test", "id_String");
                        if(context.getStringValue("GIM_Schema_Migrating_Test") == null) {
                            context.GIM_Schema_Migrating_Test = null;
                        } else {
                            context.GIM_Schema_Migrating_Test=(String) context.getProperty("GIM_Schema_Migrating_Test");
                        }
                        context.setContextType("GIM_Schema_Order_Processing", "id_String");
                        if(context.getStringValue("GIM_Schema_Order_Processing") == null) {
                            context.GIM_Schema_Order_Processing = null;
                        } else {
                            context.GIM_Schema_Order_Processing=(String) context.getProperty("GIM_Schema_Order_Processing");
                        }
                        context.setContextType("GIM_Schema_PO", "id_String");
                        if(context.getStringValue("GIM_Schema_PO") == null) {
                            context.GIM_Schema_PO = null;
                        } else {
                            context.GIM_Schema_PO=(String) context.getProperty("GIM_Schema_PO");
                        }
                        context.setContextType("GIM_Schema_System", "id_String");
                        if(context.getStringValue("GIM_Schema_System") == null) {
                            context.GIM_Schema_System = null;
                        } else {
                            context.GIM_Schema_System=(String) context.getProperty("GIM_Schema_System");
                        }
                        context.setContextType("GIM_Server", "id_String");
                        if(context.getStringValue("GIM_Server") == null) {
                            context.GIM_Server = null;
                        } else {
                            context.GIM_Server=(String) context.getProperty("GIM_Server");
                        }
                        context.setContextType("SUS_Additional_Params", "id_String");
                        if(context.getStringValue("SUS_Additional_Params") == null) {
                            context.SUS_Additional_Params = null;
                        } else {
                            context.SUS_Additional_Params=(String) context.getProperty("SUS_Additional_Params");
                        }
                        context.setContextType("SUS_Database", "id_String");
                        if(context.getStringValue("SUS_Database") == null) {
                            context.SUS_Database = null;
                        } else {
                            context.SUS_Database=(String) context.getProperty("SUS_Database");
                        }
                        context.setContextType("SUS_Database_ARDBFA", "id_String");
                        if(context.getStringValue("SUS_Database_ARDBFA") == null) {
                            context.SUS_Database_ARDBFA = null;
                        } else {
                            context.SUS_Database_ARDBFA=(String) context.getProperty("SUS_Database_ARDBFA");
                        }
                        context.setContextType("SUS_Login", "id_String");
                        if(context.getStringValue("SUS_Login") == null) {
                            context.SUS_Login = null;
                        } else {
                            context.SUS_Login=(String) context.getProperty("SUS_Login");
                        }
                        context.setContextType("SUS_Password", "id_Password");
                        if(context.getStringValue("SUS_Password") == null) {
                            context.SUS_Password = null;
                        } else {
                            String pwd_SUS_Password_value = context.getProperty("SUS_Password");
                            context.SUS_Password = null;
                            if(pwd_SUS_Password_value!=null) {
                                if(context_param.containsKey("SUS_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SUS_Password = pwd_SUS_Password_value;
                                } else if (!pwd_SUS_Password_value.isEmpty()) {
                                    try {
                                        context.SUS_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SUS_Password_value);
                                        context.put("SUS_Password",context.SUS_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SUS_Port", "id_String");
                        if(context.getStringValue("SUS_Port") == null) {
                            context.SUS_Port = null;
                        } else {
                            context.SUS_Port=(String) context.getProperty("SUS_Port");
                        }
                        context.setContextType("SUS_Schema", "id_String");
                        if(context.getStringValue("SUS_Schema") == null) {
                            context.SUS_Schema = null;
                        } else {
                            context.SUS_Schema=(String) context.getProperty("SUS_Schema");
                        }
                        context.setContextType("SUS_Server", "id_String");
                        if(context.getStringValue("SUS_Server") == null) {
                            context.SUS_Server = null;
                        } else {
                            context.SUS_Server=(String) context.getProperty("SUS_Server");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("opco")) {
                context.opco = (String) parentContextMap.get("opco");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("sopco")) {
                context.sopco = (String) parentContextMap.get("sopco");
            }if (parentContextMap.containsKey("svop")) {
                context.svop = (String) parentContextMap.get("svop");
            }if (parentContextMap.containsKey("GIM_AdditionalParams")) {
                context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
            }if (parentContextMap.containsKey("GIM_Database")) {
                context.GIM_Database = (String) parentContextMap.get("GIM_Database");
            }if (parentContextMap.containsKey("GIM_Login")) {
                context.GIM_Login = (String) parentContextMap.get("GIM_Login");
            }if (parentContextMap.containsKey("GIM_Password")) {
                context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
            }if (parentContextMap.containsKey("GIM_Port")) {
                context.GIM_Port = (String) parentContextMap.get("GIM_Port");
            }if (parentContextMap.containsKey("GIM_Schema_Demand")) {
                context.GIM_Schema_Demand = (String) parentContextMap.get("GIM_Schema_Demand");
            }if (parentContextMap.containsKey("GIM_Schema_Inventory")) {
                context.GIM_Schema_Inventory = (String) parentContextMap.get("GIM_Schema_Inventory");
            }if (parentContextMap.containsKey("GIM_Schema_Master")) {
                context.GIM_Schema_Master = (String) parentContextMap.get("GIM_Schema_Master");
            }if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
                context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
            }if (parentContextMap.containsKey("GIM_Schema_Order_Processing")) {
                context.GIM_Schema_Order_Processing = (String) parentContextMap.get("GIM_Schema_Order_Processing");
            }if (parentContextMap.containsKey("GIM_Schema_PO")) {
                context.GIM_Schema_PO = (String) parentContextMap.get("GIM_Schema_PO");
            }if (parentContextMap.containsKey("GIM_Schema_System")) {
                context.GIM_Schema_System = (String) parentContextMap.get("GIM_Schema_System");
            }if (parentContextMap.containsKey("GIM_Server")) {
                context.GIM_Server = (String) parentContextMap.get("GIM_Server");
            }if (parentContextMap.containsKey("SUS_Additional_Params")) {
                context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
            }if (parentContextMap.containsKey("SUS_Database")) {
                context.SUS_Database = (String) parentContextMap.get("SUS_Database");
            }if (parentContextMap.containsKey("SUS_Database_ARDBFA")) {
                context.SUS_Database_ARDBFA = (String) parentContextMap.get("SUS_Database_ARDBFA");
            }if (parentContextMap.containsKey("SUS_Login")) {
                context.SUS_Login = (String) parentContextMap.get("SUS_Login");
            }if (parentContextMap.containsKey("SUS_Password")) {
                context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
            }if (parentContextMap.containsKey("SUS_Port")) {
                context.SUS_Port = (String) parentContextMap.get("SUS_Port");
            }if (parentContextMap.containsKey("SUS_Schema")) {
                context.SUS_Schema = (String) parentContextMap.get("SUS_Schema");
            }if (parentContextMap.containsKey("SUS_Server")) {
                context.SUS_Server = (String) parentContextMap.get("SUS_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("GIM_Password");
			parametersToEncrypt.add("SUS_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_4Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_4) {
globalMap.put("tJava_4_SUBPROCESS_STATE", -1);

e_tJava_4.printStackTrace();

}catch (java.lang.Error e_tJava_4) {
globalMap.put("tJava_4_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_4;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_3) {
globalMap.put("tJava_3_SUBPROCESS_STATE", -1);

e_tJava_3.printStackTrace();

}catch (java.lang.Error e_tJava_3) {
globalMap.put("tJava_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_6Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_6) {
globalMap.put("tJava_6_SUBPROCESS_STATE", -1);

e_tJava_6.printStackTrace();

}catch (java.lang.Error e_tJava_6) {
globalMap.put("tJava_6_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_6;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_5Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_5) {
globalMap.put("tJava_5_SUBPROCESS_STATE", -1);

e_tJava_5.printStackTrace();

}catch (java.lang.Error e_tJava_5) {
globalMap.put("tJava_5_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_5;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

e_tJava_2.printStackTrace();

}catch (java.lang.Error e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Purchase_Order_Detail_Update_Inbound");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1610906 characters generated by Talend Open Studio for Data Integration 
 *     on the November 22, 2022 at 1:53:04 PM IST
 ************************************************************************************************/