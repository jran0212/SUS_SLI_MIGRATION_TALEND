// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sus_sli_etl.vendor_ship_from_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Vendor_Ship_From_Inbound Purpose: Migrating Data From USVFA6PF and
 * USVBMJRF to VENDOR_SHIP_FROM<br>
 * Description: Migrating Data From USVFA6PF and USVBMJRF to VENDOR_SHIP_FROM
 * <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Vendor_Ship_From_Inbound implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (SUS_Login != null) {

				this.setProperty("SUS_Login", SUS_Login.toString());

			}

			if (SUS_Password != null) {

				this.setProperty("SUS_Password", SUS_Password.toString());

			}

			if (SUS_Database != null) {

				this.setProperty("SUS_Database", SUS_Database.toString());

			}

			if (SUS_Server != null) {

				this.setProperty("SUS_Server", SUS_Server.toString());

			}

			if (SUS_Additional_Params != null) {

				this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());

			}

			if (GIM_Schema_Migrating_Test != null) {

				this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());

			}

			if (GIM_AdditionalParams != null) {

				this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());

			}

			if (GIM_Password != null) {

				this.setProperty("GIM_Password", GIM_Password.toString());

			}

			if (GIM_Server != null) {

				this.setProperty("GIM_Server", GIM_Server.toString());

			}

			if (GIM_Database != null) {

				this.setProperty("GIM_Database", GIM_Database.toString());

			}

			if (GIM_Port != null) {

				this.setProperty("GIM_Port", GIM_Port.toString());

			}

			if (GIM_Login != null) {

				this.setProperty("GIM_Login", GIM_Login.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String SUS_Login;

		public String getSUS_Login() {
			return this.SUS_Login;
		}

		public java.lang.String SUS_Password;

		public java.lang.String getSUS_Password() {
			return this.SUS_Password;
		}

		public String SUS_Database;

		public String getSUS_Database() {
			return this.SUS_Database;
		}

		public String SUS_Server;

		public String getSUS_Server() {
			return this.SUS_Server;
		}

		public String SUS_Additional_Params;

		public String getSUS_Additional_Params() {
			return this.SUS_Additional_Params;
		}

		public String GIM_Schema_Migrating_Test;

		public String getGIM_Schema_Migrating_Test() {
			return this.GIM_Schema_Migrating_Test;
		}

		public String GIM_AdditionalParams;

		public String getGIM_AdditionalParams() {
			return this.GIM_AdditionalParams;
		}

		public java.lang.String GIM_Password;

		public java.lang.String getGIM_Password() {
			return this.GIM_Password;
		}

		public String GIM_Server;

		public String getGIM_Server() {
			return this.GIM_Server;
		}

		public String GIM_Database;

		public String getGIM_Database() {
			return this.GIM_Database;
		}

		public String GIM_Port;

		public String getGIM_Port() {
			return this.GIM_Port;
		}

		public String GIM_Login;

		public String getGIM_Login() {
			return this.GIM_Login;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Vendor_Ship_From_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Vendor_Ship_From_Inbound.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Vendor_Ship_From_Inbound.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public String ADDRESS_LINE_1;

		public String getADDRESS_LINE_1() {
			return this.ADDRESS_LINE_1;
		}

		public String ADDRESS_LINE_2;

		public String getADDRESS_LINE_2() {
			return this.ADDRESS_LINE_2;
		}

		public String ADDRESS_LINE_3;

		public String getADDRESS_LINE_3() {
			return this.ADDRESS_LINE_3;
		}

		public String ADDRESS_LINE_4;

		public String getADDRESS_LINE_4() {
			return this.ADDRESS_LINE_4;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String COUNTRY_NAME;

		public String getCOUNTRY_NAME() {
			return this.COUNTRY_NAME;
		}

		public String VENDOR_NO;

		public String getVENDOR_NO() {
			return this.VENDOR_NO;
		}

		public BigDecimal VENDOR_SUFFIX;

		public BigDecimal getVENDOR_SUFFIX() {
			return this.VENDOR_SUFFIX;
		}

		public String SHIP_FROM_NAME;

		public String getSHIP_FROM_NAME() {
			return this.SHIP_FROM_NAME;
		}

		public String SHIPPED_VIA;

		public String getSHIPPED_VIA() {
			return this.SHIPPED_VIA;
		}

		public String BROKER_ID;

		public String getBROKER_ID() {
			return this.BROKER_ID;
		}

		public String PAY_TO_VENDOR_NO;

		public String getPAY_TO_VENDOR_NO() {
			return this.PAY_TO_VENDOR_NO;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());

				result = prime * result + ((this.VENDOR_NO == null) ? 0 : this.VENDOR_NO.hashCode());

				result = prime * result + ((this.VENDOR_SUFFIX == null) ? 0 : this.VENDOR_SUFFIX.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.SITE_ID == null) {
				if (other.SITE_ID != null)
					return false;

			} else if (!this.SITE_ID.equals(other.SITE_ID))

				return false;

			if (this.VENDOR_NO == null) {
				if (other.VENDOR_NO != null)
					return false;

			} else if (!this.VENDOR_NO.equals(other.VENDOR_NO))

				return false;

			if (this.VENDOR_SUFFIX == null) {
				if (other.VENDOR_SUFFIX != null)
					return false;

			} else if (!this.VENDOR_SUFFIX.equals(other.VENDOR_SUFFIX))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.SITE_ID = this.SITE_ID;
			other.ADDRESS_LINE_1 = this.ADDRESS_LINE_1;
			other.ADDRESS_LINE_2 = this.ADDRESS_LINE_2;
			other.ADDRESS_LINE_3 = this.ADDRESS_LINE_3;
			other.ADDRESS_LINE_4 = this.ADDRESS_LINE_4;
			other.CITY = this.CITY;
			other.STATE = this.STATE;
			other.ZIP_CODE = this.ZIP_CODE;
			other.COUNTRY_NAME = this.COUNTRY_NAME;
			other.VENDOR_NO = this.VENDOR_NO;
			other.VENDOR_SUFFIX = this.VENDOR_SUFFIX;
			other.SHIP_FROM_NAME = this.SHIP_FROM_NAME;
			other.SHIPPED_VIA = this.SHIPPED_VIA;
			other.BROKER_ID = this.BROKER_ID;
			other.PAY_TO_VENDOR_NO = this.PAY_TO_VENDOR_NO;
			other.IS_DELETED = this.IS_DELETED;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.SITE_ID = this.SITE_ID;
			other.VENDOR_NO = this.VENDOR_NO;
			other.VENDOR_SUFFIX = this.VENDOR_SUFFIX;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ADDRESS_LINE_1 = readString(dis);

					this.ADDRESS_LINE_2 = readString(dis);

					this.ADDRESS_LINE_3 = readString(dis);

					this.ADDRESS_LINE_4 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.COUNTRY_NAME = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.VENDOR_SUFFIX = (BigDecimal) dis.readObject();

					this.SHIP_FROM_NAME = readString(dis);

					this.SHIPPED_VIA = readString(dis);

					this.BROKER_ID = readString(dis);

					this.PAY_TO_VENDOR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ADDRESS_LINE_1 = readString(dis);

					this.ADDRESS_LINE_2 = readString(dis);

					this.ADDRESS_LINE_3 = readString(dis);

					this.ADDRESS_LINE_4 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.COUNTRY_NAME = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.VENDOR_SUFFIX = (BigDecimal) dis.readObject();

					this.SHIP_FROM_NAME = readString(dis);

					this.SHIPPED_VIA = readString(dis);

					this.BROKER_ID = readString(dis);

					this.PAY_TO_VENDOR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.ADDRESS_LINE_1, dos);

				// String

				writeString(this.ADDRESS_LINE_2, dos);

				// String

				writeString(this.ADDRESS_LINE_3, dos);

				// String

				writeString(this.ADDRESS_LINE_4, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.COUNTRY_NAME, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// BigDecimal

				dos.writeObject(this.VENDOR_SUFFIX);

				// String

				writeString(this.SHIP_FROM_NAME, dos);

				// String

				writeString(this.SHIPPED_VIA, dos);

				// String

				writeString(this.BROKER_ID, dos);

				// String

				writeString(this.PAY_TO_VENDOR_NO, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.ADDRESS_LINE_1, dos);

				// String

				writeString(this.ADDRESS_LINE_2, dos);

				// String

				writeString(this.ADDRESS_LINE_3, dos);

				// String

				writeString(this.ADDRESS_LINE_4, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.COUNTRY_NAME, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// BigDecimal

				dos.writeObject(this.VENDOR_SUFFIX);

				// String

				writeString(this.SHIP_FROM_NAME, dos);

				// String

				writeString(this.SHIPPED_VIA, dos);

				// String

				writeString(this.BROKER_ID, dos);

				// String

				writeString(this.PAY_TO_VENDOR_NO, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",ADDRESS_LINE_1=" + ADDRESS_LINE_1);
			sb.append(",ADDRESS_LINE_2=" + ADDRESS_LINE_2);
			sb.append(",ADDRESS_LINE_3=" + ADDRESS_LINE_3);
			sb.append(",ADDRESS_LINE_4=" + ADDRESS_LINE_4);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE=" + STATE);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",COUNTRY_NAME=" + COUNTRY_NAME);
			sb.append(",VENDOR_NO=" + VENDOR_NO);
			sb.append(",VENDOR_SUFFIX=" + String.valueOf(VENDOR_SUFFIX));
			sb.append(",SHIP_FROM_NAME=" + SHIP_FROM_NAME);
			sb.append(",SHIPPED_VIA=" + SHIPPED_VIA);
			sb.append(",BROKER_ID=" + BROKER_ID);
			sb.append(",PAY_TO_VENDOR_NO=" + PAY_TO_VENDOR_NO);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.VENDOR_NO, other.VENDOR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.VENDOR_SUFFIX, other.VENDOR_SUFFIX);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class VENDOR_SHIP_FROMStruct implements routines.system.IPersistableRow<VENDOR_SHIP_FROMStruct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public String ADDRESS_LINE_1;

		public String getADDRESS_LINE_1() {
			return this.ADDRESS_LINE_1;
		}

		public String ADDRESS_LINE_2;

		public String getADDRESS_LINE_2() {
			return this.ADDRESS_LINE_2;
		}

		public String ADDRESS_LINE_3;

		public String getADDRESS_LINE_3() {
			return this.ADDRESS_LINE_3;
		}

		public String ADDRESS_LINE_4;

		public String getADDRESS_LINE_4() {
			return this.ADDRESS_LINE_4;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE;

		public String getSTATE() {
			return this.STATE;
		}

		public String ZIP_CODE;

		public String getZIP_CODE() {
			return this.ZIP_CODE;
		}

		public String COUNTRY_NAME;

		public String getCOUNTRY_NAME() {
			return this.COUNTRY_NAME;
		}

		public String VENDOR_NO;

		public String getVENDOR_NO() {
			return this.VENDOR_NO;
		}

		public BigDecimal VENDOR_SUFFIX;

		public BigDecimal getVENDOR_SUFFIX() {
			return this.VENDOR_SUFFIX;
		}

		public String SHIP_FROM_NAME;

		public String getSHIP_FROM_NAME() {
			return this.SHIP_FROM_NAME;
		}

		public String SHIPPED_VIA;

		public String getSHIPPED_VIA() {
			return this.SHIPPED_VIA;
		}

		public String BROKER_ID;

		public String getBROKER_ID() {
			return this.BROKER_ID;
		}

		public String PAY_TO_VENDOR_NO;

		public String getPAY_TO_VENDOR_NO() {
			return this.PAY_TO_VENDOR_NO;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());

				result = prime * result + ((this.VENDOR_NO == null) ? 0 : this.VENDOR_NO.hashCode());

				result = prime * result + ((this.VENDOR_SUFFIX == null) ? 0 : this.VENDOR_SUFFIX.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final VENDOR_SHIP_FROMStruct other = (VENDOR_SHIP_FROMStruct) obj;

			if (this.SITE_ID == null) {
				if (other.SITE_ID != null)
					return false;

			} else if (!this.SITE_ID.equals(other.SITE_ID))

				return false;

			if (this.VENDOR_NO == null) {
				if (other.VENDOR_NO != null)
					return false;

			} else if (!this.VENDOR_NO.equals(other.VENDOR_NO))

				return false;

			if (this.VENDOR_SUFFIX == null) {
				if (other.VENDOR_SUFFIX != null)
					return false;

			} else if (!this.VENDOR_SUFFIX.equals(other.VENDOR_SUFFIX))

				return false;

			return true;
		}

		public void copyDataTo(VENDOR_SHIP_FROMStruct other) {

			other.SITE_ID = this.SITE_ID;
			other.ADDRESS_LINE_1 = this.ADDRESS_LINE_1;
			other.ADDRESS_LINE_2 = this.ADDRESS_LINE_2;
			other.ADDRESS_LINE_3 = this.ADDRESS_LINE_3;
			other.ADDRESS_LINE_4 = this.ADDRESS_LINE_4;
			other.CITY = this.CITY;
			other.STATE = this.STATE;
			other.ZIP_CODE = this.ZIP_CODE;
			other.COUNTRY_NAME = this.COUNTRY_NAME;
			other.VENDOR_NO = this.VENDOR_NO;
			other.VENDOR_SUFFIX = this.VENDOR_SUFFIX;
			other.SHIP_FROM_NAME = this.SHIP_FROM_NAME;
			other.SHIPPED_VIA = this.SHIPPED_VIA;
			other.BROKER_ID = this.BROKER_ID;
			other.PAY_TO_VENDOR_NO = this.PAY_TO_VENDOR_NO;
			other.IS_DELETED = this.IS_DELETED;

		}

		public void copyKeysDataTo(VENDOR_SHIP_FROMStruct other) {

			other.SITE_ID = this.SITE_ID;
			other.VENDOR_NO = this.VENDOR_NO;
			other.VENDOR_SUFFIX = this.VENDOR_SUFFIX;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ADDRESS_LINE_1 = readString(dis);

					this.ADDRESS_LINE_2 = readString(dis);

					this.ADDRESS_LINE_3 = readString(dis);

					this.ADDRESS_LINE_4 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.COUNTRY_NAME = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.VENDOR_SUFFIX = (BigDecimal) dis.readObject();

					this.SHIP_FROM_NAME = readString(dis);

					this.SHIPPED_VIA = readString(dis);

					this.BROKER_ID = readString(dis);

					this.PAY_TO_VENDOR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ADDRESS_LINE_1 = readString(dis);

					this.ADDRESS_LINE_2 = readString(dis);

					this.ADDRESS_LINE_3 = readString(dis);

					this.ADDRESS_LINE_4 = readString(dis);

					this.CITY = readString(dis);

					this.STATE = readString(dis);

					this.ZIP_CODE = readString(dis);

					this.COUNTRY_NAME = readString(dis);

					this.VENDOR_NO = readString(dis);

					this.VENDOR_SUFFIX = (BigDecimal) dis.readObject();

					this.SHIP_FROM_NAME = readString(dis);

					this.SHIPPED_VIA = readString(dis);

					this.BROKER_ID = readString(dis);

					this.PAY_TO_VENDOR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.ADDRESS_LINE_1, dos);

				// String

				writeString(this.ADDRESS_LINE_2, dos);

				// String

				writeString(this.ADDRESS_LINE_3, dos);

				// String

				writeString(this.ADDRESS_LINE_4, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.COUNTRY_NAME, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// BigDecimal

				dos.writeObject(this.VENDOR_SUFFIX);

				// String

				writeString(this.SHIP_FROM_NAME, dos);

				// String

				writeString(this.SHIPPED_VIA, dos);

				// String

				writeString(this.BROKER_ID, dos);

				// String

				writeString(this.PAY_TO_VENDOR_NO, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.ADDRESS_LINE_1, dos);

				// String

				writeString(this.ADDRESS_LINE_2, dos);

				// String

				writeString(this.ADDRESS_LINE_3, dos);

				// String

				writeString(this.ADDRESS_LINE_4, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE, dos);

				// String

				writeString(this.ZIP_CODE, dos);

				// String

				writeString(this.COUNTRY_NAME, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// BigDecimal

				dos.writeObject(this.VENDOR_SUFFIX);

				// String

				writeString(this.SHIP_FROM_NAME, dos);

				// String

				writeString(this.SHIPPED_VIA, dos);

				// String

				writeString(this.BROKER_ID, dos);

				// String

				writeString(this.PAY_TO_VENDOR_NO, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",ADDRESS_LINE_1=" + ADDRESS_LINE_1);
			sb.append(",ADDRESS_LINE_2=" + ADDRESS_LINE_2);
			sb.append(",ADDRESS_LINE_3=" + ADDRESS_LINE_3);
			sb.append(",ADDRESS_LINE_4=" + ADDRESS_LINE_4);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE=" + STATE);
			sb.append(",ZIP_CODE=" + ZIP_CODE);
			sb.append(",COUNTRY_NAME=" + COUNTRY_NAME);
			sb.append(",VENDOR_NO=" + VENDOR_NO);
			sb.append(",VENDOR_SUFFIX=" + String.valueOf(VENDOR_SUFFIX));
			sb.append(",SHIP_FROM_NAME=" + SHIP_FROM_NAME);
			sb.append(",SHIPPED_VIA=" + SHIPPED_VIA);
			sb.append(",BROKER_ID=" + BROKER_ID);
			sb.append(",PAY_TO_VENDOR_NO=" + PAY_TO_VENDOR_NO);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(VENDOR_SHIP_FROMStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.VENDOR_NO, other.VENDOR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.VENDOR_SUFFIX, other.VENDOR_SUFFIX);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];

		public String A6ADR1;

		public String getA6ADR1() {
			return this.A6ADR1;
		}

		public String A6ADR2;

		public String getA6ADR2() {
			return this.A6ADR2;
		}

		public String A6ADR3;

		public String getA6ADR3() {
			return this.A6ADR3;
		}

		public String A6ADR4;

		public String getA6ADR4() {
			return this.A6ADR4;
		}

		public String A6CIT;

		public String getA6CIT() {
			return this.A6CIT;
		}

		public String A6STAE;

		public String getA6STAE() {
			return this.A6STAE;
		}

		public String A6ZIP;

		public String getA6ZIP() {
			return this.A6ZIP;
		}

		public String A6CY20;

		public String getA6CY20() {
			return this.A6CY20;
		}

		public String A6CONT;

		public String getA6CONT() {
			return this.A6CONT;
		}

		public String A6TEL;

		public String getA6TEL() {
			return this.A6TEL;
		}

		public String A6FAX;

		public String getA6FAX() {
			return this.A6FAX;
		}

		public String A6VNBR;

		public String getA6VNBR() {
			return this.A6VNBR;
		}

		public BigDecimal A6ADCD;

		public BigDecimal getA6ADCD() {
			return this.A6ADCD;
		}

		public String A6TERM;

		public String getA6TERM() {
			return this.A6TERM;
		}

		public String A6EDIP;

		public String getA6EDIP() {
			return this.A6EDIP;
		}

		public String A6SHNM;

		public String getA6SHNM() {
			return this.A6SHNM;
		}

		public String A6CUNO;

		public String getA6CUNO() {
			return this.A6CUNO;
		}

		public String A6SHFI;

		public String getA6SHFI() {
			return this.A6SHFI;
		}

		public String A6VCLD;

		public String getA6VCLD() {
			return this.A6VCLD;
		}

		public String A6SHVI;

		public String getA6SHVI() {
			return this.A6SHVI;
		}

		public String A6APCO;

		public String getA6APCO() {
			return this.A6APCO;
		}

		public String A6VSFS;

		public String getA6VSFS() {
			return this.A6VSFS;
		}

		public String A6BRID;

		public String getA6BRID() {
			return this.A6BRID;
		}

		public String A6VCNS;

		public String getA6VCNS() {
			return this.A6VCNS;
		}

		public String A6MFGI;

		public String getA6MFGI() {
			return this.A6MFGI;
		}

		public String A6SRSQ;

		public String getA6SRSQ() {
			return this.A6SRSQ;
		}

		public String A6CDOI;

		public String getA6CDOI() {
			return this.A6CDOI;
		}

		public String A6VASR;

		public String getA6VASR() {
			return this.A6VASR;
		}

		public String A6BROL;

		public String getA6BROL() {
			return this.A6BROL;
		}

		public String A6PVND;

		public String getA6PVND() {
			return this.A6PVND;
		}

		public String A6RSVF;

		public String getA6RSVF() {
			return this.A6RSVF;
		}

		public BigDecimal A6TDCD;

		public BigDecimal getA6TDCD() {
			return this.A6TDCD;
		}

		public String A6TVND;

		public String getA6TVND() {
			return this.A6TVND;
		}

		public String A6TVFL;

		public String getA6TVFL() {
			return this.A6TVFL;
		}

		public String A6POTT;

		public String getA6POTT() {
			return this.A6POTT;
		}

		public String A6AFAX;

		public String getA6AFAX() {
			return this.A6AFAX;
		}

		public String A6RPOT;

		public String getA6RPOT() {
			return this.A6RPOT;
		}

		public BigDecimal A6EADT;

		public BigDecimal getA6EADT() {
			return this.A6EADT;
		}

		public BigDecimal A6EATM;

		public BigDecimal getA6EATM() {
			return this.A6EATM;
		}

		public String A6EAID;

		public String getA6EAID() {
			return this.A6EAID;
		}

		public BigDecimal A6MODT;

		public BigDecimal getA6MODT() {
			return this.A6MODT;
		}

		public BigDecimal A6MOTM;

		public BigDecimal getA6MOTM() {
			return this.A6MOTM;
		}

		public String A6MOID;

		public String getA6MOID() {
			return this.A6MOID;
		}

		public String A6MOPG;

		public String getA6MOPG() {
			return this.A6MOPG;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.A6ADR1 = readString(dis);

					this.A6ADR2 = readString(dis);

					this.A6ADR3 = readString(dis);

					this.A6ADR4 = readString(dis);

					this.A6CIT = readString(dis);

					this.A6STAE = readString(dis);

					this.A6ZIP = readString(dis);

					this.A6CY20 = readString(dis);

					this.A6CONT = readString(dis);

					this.A6TEL = readString(dis);

					this.A6FAX = readString(dis);

					this.A6VNBR = readString(dis);

					this.A6ADCD = (BigDecimal) dis.readObject();

					this.A6TERM = readString(dis);

					this.A6EDIP = readString(dis);

					this.A6SHNM = readString(dis);

					this.A6CUNO = readString(dis);

					this.A6SHFI = readString(dis);

					this.A6VCLD = readString(dis);

					this.A6SHVI = readString(dis);

					this.A6APCO = readString(dis);

					this.A6VSFS = readString(dis);

					this.A6BRID = readString(dis);

					this.A6VCNS = readString(dis);

					this.A6MFGI = readString(dis);

					this.A6SRSQ = readString(dis);

					this.A6CDOI = readString(dis);

					this.A6VASR = readString(dis);

					this.A6BROL = readString(dis);

					this.A6PVND = readString(dis);

					this.A6RSVF = readString(dis);

					this.A6TDCD = (BigDecimal) dis.readObject();

					this.A6TVND = readString(dis);

					this.A6TVFL = readString(dis);

					this.A6POTT = readString(dis);

					this.A6AFAX = readString(dis);

					this.A6RPOT = readString(dis);

					this.A6EADT = (BigDecimal) dis.readObject();

					this.A6EATM = (BigDecimal) dis.readObject();

					this.A6EAID = readString(dis);

					this.A6MODT = (BigDecimal) dis.readObject();

					this.A6MOTM = (BigDecimal) dis.readObject();

					this.A6MOID = readString(dis);

					this.A6MOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.A6ADR1 = readString(dis);

					this.A6ADR2 = readString(dis);

					this.A6ADR3 = readString(dis);

					this.A6ADR4 = readString(dis);

					this.A6CIT = readString(dis);

					this.A6STAE = readString(dis);

					this.A6ZIP = readString(dis);

					this.A6CY20 = readString(dis);

					this.A6CONT = readString(dis);

					this.A6TEL = readString(dis);

					this.A6FAX = readString(dis);

					this.A6VNBR = readString(dis);

					this.A6ADCD = (BigDecimal) dis.readObject();

					this.A6TERM = readString(dis);

					this.A6EDIP = readString(dis);

					this.A6SHNM = readString(dis);

					this.A6CUNO = readString(dis);

					this.A6SHFI = readString(dis);

					this.A6VCLD = readString(dis);

					this.A6SHVI = readString(dis);

					this.A6APCO = readString(dis);

					this.A6VSFS = readString(dis);

					this.A6BRID = readString(dis);

					this.A6VCNS = readString(dis);

					this.A6MFGI = readString(dis);

					this.A6SRSQ = readString(dis);

					this.A6CDOI = readString(dis);

					this.A6VASR = readString(dis);

					this.A6BROL = readString(dis);

					this.A6PVND = readString(dis);

					this.A6RSVF = readString(dis);

					this.A6TDCD = (BigDecimal) dis.readObject();

					this.A6TVND = readString(dis);

					this.A6TVFL = readString(dis);

					this.A6POTT = readString(dis);

					this.A6AFAX = readString(dis);

					this.A6RPOT = readString(dis);

					this.A6EADT = (BigDecimal) dis.readObject();

					this.A6EATM = (BigDecimal) dis.readObject();

					this.A6EAID = readString(dis);

					this.A6MODT = (BigDecimal) dis.readObject();

					this.A6MOTM = (BigDecimal) dis.readObject();

					this.A6MOID = readString(dis);

					this.A6MOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.A6ADR1, dos);

				// String

				writeString(this.A6ADR2, dos);

				// String

				writeString(this.A6ADR3, dos);

				// String

				writeString(this.A6ADR4, dos);

				// String

				writeString(this.A6CIT, dos);

				// String

				writeString(this.A6STAE, dos);

				// String

				writeString(this.A6ZIP, dos);

				// String

				writeString(this.A6CY20, dos);

				// String

				writeString(this.A6CONT, dos);

				// String

				writeString(this.A6TEL, dos);

				// String

				writeString(this.A6FAX, dos);

				// String

				writeString(this.A6VNBR, dos);

				// BigDecimal

				dos.writeObject(this.A6ADCD);

				// String

				writeString(this.A6TERM, dos);

				// String

				writeString(this.A6EDIP, dos);

				// String

				writeString(this.A6SHNM, dos);

				// String

				writeString(this.A6CUNO, dos);

				// String

				writeString(this.A6SHFI, dos);

				// String

				writeString(this.A6VCLD, dos);

				// String

				writeString(this.A6SHVI, dos);

				// String

				writeString(this.A6APCO, dos);

				// String

				writeString(this.A6VSFS, dos);

				// String

				writeString(this.A6BRID, dos);

				// String

				writeString(this.A6VCNS, dos);

				// String

				writeString(this.A6MFGI, dos);

				// String

				writeString(this.A6SRSQ, dos);

				// String

				writeString(this.A6CDOI, dos);

				// String

				writeString(this.A6VASR, dos);

				// String

				writeString(this.A6BROL, dos);

				// String

				writeString(this.A6PVND, dos);

				// String

				writeString(this.A6RSVF, dos);

				// BigDecimal

				dos.writeObject(this.A6TDCD);

				// String

				writeString(this.A6TVND, dos);

				// String

				writeString(this.A6TVFL, dos);

				// String

				writeString(this.A6POTT, dos);

				// String

				writeString(this.A6AFAX, dos);

				// String

				writeString(this.A6RPOT, dos);

				// BigDecimal

				dos.writeObject(this.A6EADT);

				// BigDecimal

				dos.writeObject(this.A6EATM);

				// String

				writeString(this.A6EAID, dos);

				// BigDecimal

				dos.writeObject(this.A6MODT);

				// BigDecimal

				dos.writeObject(this.A6MOTM);

				// String

				writeString(this.A6MOID, dos);

				// String

				writeString(this.A6MOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.A6ADR1, dos);

				// String

				writeString(this.A6ADR2, dos);

				// String

				writeString(this.A6ADR3, dos);

				// String

				writeString(this.A6ADR4, dos);

				// String

				writeString(this.A6CIT, dos);

				// String

				writeString(this.A6STAE, dos);

				// String

				writeString(this.A6ZIP, dos);

				// String

				writeString(this.A6CY20, dos);

				// String

				writeString(this.A6CONT, dos);

				// String

				writeString(this.A6TEL, dos);

				// String

				writeString(this.A6FAX, dos);

				// String

				writeString(this.A6VNBR, dos);

				// BigDecimal

				dos.writeObject(this.A6ADCD);

				// String

				writeString(this.A6TERM, dos);

				// String

				writeString(this.A6EDIP, dos);

				// String

				writeString(this.A6SHNM, dos);

				// String

				writeString(this.A6CUNO, dos);

				// String

				writeString(this.A6SHFI, dos);

				// String

				writeString(this.A6VCLD, dos);

				// String

				writeString(this.A6SHVI, dos);

				// String

				writeString(this.A6APCO, dos);

				// String

				writeString(this.A6VSFS, dos);

				// String

				writeString(this.A6BRID, dos);

				// String

				writeString(this.A6VCNS, dos);

				// String

				writeString(this.A6MFGI, dos);

				// String

				writeString(this.A6SRSQ, dos);

				// String

				writeString(this.A6CDOI, dos);

				// String

				writeString(this.A6VASR, dos);

				// String

				writeString(this.A6BROL, dos);

				// String

				writeString(this.A6PVND, dos);

				// String

				writeString(this.A6RSVF, dos);

				// BigDecimal

				dos.writeObject(this.A6TDCD);

				// String

				writeString(this.A6TVND, dos);

				// String

				writeString(this.A6TVFL, dos);

				// String

				writeString(this.A6POTT, dos);

				// String

				writeString(this.A6AFAX, dos);

				// String

				writeString(this.A6RPOT, dos);

				// BigDecimal

				dos.writeObject(this.A6EADT);

				// BigDecimal

				dos.writeObject(this.A6EATM);

				// String

				writeString(this.A6EAID, dos);

				// BigDecimal

				dos.writeObject(this.A6MODT);

				// BigDecimal

				dos.writeObject(this.A6MOTM);

				// String

				writeString(this.A6MOID, dos);

				// String

				writeString(this.A6MOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A6ADR1=" + A6ADR1);
			sb.append(",A6ADR2=" + A6ADR2);
			sb.append(",A6ADR3=" + A6ADR3);
			sb.append(",A6ADR4=" + A6ADR4);
			sb.append(",A6CIT=" + A6CIT);
			sb.append(",A6STAE=" + A6STAE);
			sb.append(",A6ZIP=" + A6ZIP);
			sb.append(",A6CY20=" + A6CY20);
			sb.append(",A6CONT=" + A6CONT);
			sb.append(",A6TEL=" + A6TEL);
			sb.append(",A6FAX=" + A6FAX);
			sb.append(",A6VNBR=" + A6VNBR);
			sb.append(",A6ADCD=" + String.valueOf(A6ADCD));
			sb.append(",A6TERM=" + A6TERM);
			sb.append(",A6EDIP=" + A6EDIP);
			sb.append(",A6SHNM=" + A6SHNM);
			sb.append(",A6CUNO=" + A6CUNO);
			sb.append(",A6SHFI=" + A6SHFI);
			sb.append(",A6VCLD=" + A6VCLD);
			sb.append(",A6SHVI=" + A6SHVI);
			sb.append(",A6APCO=" + A6APCO);
			sb.append(",A6VSFS=" + A6VSFS);
			sb.append(",A6BRID=" + A6BRID);
			sb.append(",A6VCNS=" + A6VCNS);
			sb.append(",A6MFGI=" + A6MFGI);
			sb.append(",A6SRSQ=" + A6SRSQ);
			sb.append(",A6CDOI=" + A6CDOI);
			sb.append(",A6VASR=" + A6VASR);
			sb.append(",A6BROL=" + A6BROL);
			sb.append(",A6PVND=" + A6PVND);
			sb.append(",A6RSVF=" + A6RSVF);
			sb.append(",A6TDCD=" + String.valueOf(A6TDCD));
			sb.append(",A6TVND=" + A6TVND);
			sb.append(",A6TVFL=" + A6TVFL);
			sb.append(",A6POTT=" + A6POTT);
			sb.append(",A6AFAX=" + A6AFAX);
			sb.append(",A6RPOT=" + A6RPOT);
			sb.append(",A6EADT=" + String.valueOf(A6EADT));
			sb.append(",A6EATM=" + String.valueOf(A6EATM));
			sb.append(",A6EAID=" + A6EAID);
			sb.append(",A6MODT=" + String.valueOf(A6MODT));
			sb.append(",A6MOTM=" + String.valueOf(A6MOTM));
			sb.append(",A6MOID=" + A6MOID);
			sb.append(",A6MOPG=" + A6MOPG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];

		public String A6ADR1;

		public String getA6ADR1() {
			return this.A6ADR1;
		}

		public String A6ADR2;

		public String getA6ADR2() {
			return this.A6ADR2;
		}

		public String A6ADR3;

		public String getA6ADR3() {
			return this.A6ADR3;
		}

		public String A6ADR4;

		public String getA6ADR4() {
			return this.A6ADR4;
		}

		public String A6CIT;

		public String getA6CIT() {
			return this.A6CIT;
		}

		public String A6STAE;

		public String getA6STAE() {
			return this.A6STAE;
		}

		public String A6ZIP;

		public String getA6ZIP() {
			return this.A6ZIP;
		}

		public String A6CY20;

		public String getA6CY20() {
			return this.A6CY20;
		}

		public String A6CONT;

		public String getA6CONT() {
			return this.A6CONT;
		}

		public String A6TEL;

		public String getA6TEL() {
			return this.A6TEL;
		}

		public String A6FAX;

		public String getA6FAX() {
			return this.A6FAX;
		}

		public String A6VNBR;

		public String getA6VNBR() {
			return this.A6VNBR;
		}

		public BigDecimal A6ADCD;

		public BigDecimal getA6ADCD() {
			return this.A6ADCD;
		}

		public String A6TERM;

		public String getA6TERM() {
			return this.A6TERM;
		}

		public String A6EDIP;

		public String getA6EDIP() {
			return this.A6EDIP;
		}

		public String A6SHNM;

		public String getA6SHNM() {
			return this.A6SHNM;
		}

		public String A6CUNO;

		public String getA6CUNO() {
			return this.A6CUNO;
		}

		public String A6SHFI;

		public String getA6SHFI() {
			return this.A6SHFI;
		}

		public String A6VCLD;

		public String getA6VCLD() {
			return this.A6VCLD;
		}

		public String A6SHVI;

		public String getA6SHVI() {
			return this.A6SHVI;
		}

		public String A6APCO;

		public String getA6APCO() {
			return this.A6APCO;
		}

		public String A6VSFS;

		public String getA6VSFS() {
			return this.A6VSFS;
		}

		public String A6BRID;

		public String getA6BRID() {
			return this.A6BRID;
		}

		public String A6VCNS;

		public String getA6VCNS() {
			return this.A6VCNS;
		}

		public String A6MFGI;

		public String getA6MFGI() {
			return this.A6MFGI;
		}

		public String A6SRSQ;

		public String getA6SRSQ() {
			return this.A6SRSQ;
		}

		public String A6CDOI;

		public String getA6CDOI() {
			return this.A6CDOI;
		}

		public String A6VASR;

		public String getA6VASR() {
			return this.A6VASR;
		}

		public String A6BROL;

		public String getA6BROL() {
			return this.A6BROL;
		}

		public String A6PVND;

		public String getA6PVND() {
			return this.A6PVND;
		}

		public String A6RSVF;

		public String getA6RSVF() {
			return this.A6RSVF;
		}

		public BigDecimal A6TDCD;

		public BigDecimal getA6TDCD() {
			return this.A6TDCD;
		}

		public String A6TVND;

		public String getA6TVND() {
			return this.A6TVND;
		}

		public String A6TVFL;

		public String getA6TVFL() {
			return this.A6TVFL;
		}

		public String A6POTT;

		public String getA6POTT() {
			return this.A6POTT;
		}

		public String A6AFAX;

		public String getA6AFAX() {
			return this.A6AFAX;
		}

		public String A6RPOT;

		public String getA6RPOT() {
			return this.A6RPOT;
		}

		public BigDecimal A6EADT;

		public BigDecimal getA6EADT() {
			return this.A6EADT;
		}

		public BigDecimal A6EATM;

		public BigDecimal getA6EATM() {
			return this.A6EATM;
		}

		public String A6EAID;

		public String getA6EAID() {
			return this.A6EAID;
		}

		public BigDecimal A6MODT;

		public BigDecimal getA6MODT() {
			return this.A6MODT;
		}

		public BigDecimal A6MOTM;

		public BigDecimal getA6MOTM() {
			return this.A6MOTM;
		}

		public String A6MOID;

		public String getA6MOID() {
			return this.A6MOID;
		}

		public String A6MOPG;

		public String getA6MOPG() {
			return this.A6MOPG;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.A6ADR1 = readString(dis);

					this.A6ADR2 = readString(dis);

					this.A6ADR3 = readString(dis);

					this.A6ADR4 = readString(dis);

					this.A6CIT = readString(dis);

					this.A6STAE = readString(dis);

					this.A6ZIP = readString(dis);

					this.A6CY20 = readString(dis);

					this.A6CONT = readString(dis);

					this.A6TEL = readString(dis);

					this.A6FAX = readString(dis);

					this.A6VNBR = readString(dis);

					this.A6ADCD = (BigDecimal) dis.readObject();

					this.A6TERM = readString(dis);

					this.A6EDIP = readString(dis);

					this.A6SHNM = readString(dis);

					this.A6CUNO = readString(dis);

					this.A6SHFI = readString(dis);

					this.A6VCLD = readString(dis);

					this.A6SHVI = readString(dis);

					this.A6APCO = readString(dis);

					this.A6VSFS = readString(dis);

					this.A6BRID = readString(dis);

					this.A6VCNS = readString(dis);

					this.A6MFGI = readString(dis);

					this.A6SRSQ = readString(dis);

					this.A6CDOI = readString(dis);

					this.A6VASR = readString(dis);

					this.A6BROL = readString(dis);

					this.A6PVND = readString(dis);

					this.A6RSVF = readString(dis);

					this.A6TDCD = (BigDecimal) dis.readObject();

					this.A6TVND = readString(dis);

					this.A6TVFL = readString(dis);

					this.A6POTT = readString(dis);

					this.A6AFAX = readString(dis);

					this.A6RPOT = readString(dis);

					this.A6EADT = (BigDecimal) dis.readObject();

					this.A6EATM = (BigDecimal) dis.readObject();

					this.A6EAID = readString(dis);

					this.A6MODT = (BigDecimal) dis.readObject();

					this.A6MOTM = (BigDecimal) dis.readObject();

					this.A6MOID = readString(dis);

					this.A6MOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.A6ADR1 = readString(dis);

					this.A6ADR2 = readString(dis);

					this.A6ADR3 = readString(dis);

					this.A6ADR4 = readString(dis);

					this.A6CIT = readString(dis);

					this.A6STAE = readString(dis);

					this.A6ZIP = readString(dis);

					this.A6CY20 = readString(dis);

					this.A6CONT = readString(dis);

					this.A6TEL = readString(dis);

					this.A6FAX = readString(dis);

					this.A6VNBR = readString(dis);

					this.A6ADCD = (BigDecimal) dis.readObject();

					this.A6TERM = readString(dis);

					this.A6EDIP = readString(dis);

					this.A6SHNM = readString(dis);

					this.A6CUNO = readString(dis);

					this.A6SHFI = readString(dis);

					this.A6VCLD = readString(dis);

					this.A6SHVI = readString(dis);

					this.A6APCO = readString(dis);

					this.A6VSFS = readString(dis);

					this.A6BRID = readString(dis);

					this.A6VCNS = readString(dis);

					this.A6MFGI = readString(dis);

					this.A6SRSQ = readString(dis);

					this.A6CDOI = readString(dis);

					this.A6VASR = readString(dis);

					this.A6BROL = readString(dis);

					this.A6PVND = readString(dis);

					this.A6RSVF = readString(dis);

					this.A6TDCD = (BigDecimal) dis.readObject();

					this.A6TVND = readString(dis);

					this.A6TVFL = readString(dis);

					this.A6POTT = readString(dis);

					this.A6AFAX = readString(dis);

					this.A6RPOT = readString(dis);

					this.A6EADT = (BigDecimal) dis.readObject();

					this.A6EATM = (BigDecimal) dis.readObject();

					this.A6EAID = readString(dis);

					this.A6MODT = (BigDecimal) dis.readObject();

					this.A6MOTM = (BigDecimal) dis.readObject();

					this.A6MOID = readString(dis);

					this.A6MOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.A6ADR1, dos);

				// String

				writeString(this.A6ADR2, dos);

				// String

				writeString(this.A6ADR3, dos);

				// String

				writeString(this.A6ADR4, dos);

				// String

				writeString(this.A6CIT, dos);

				// String

				writeString(this.A6STAE, dos);

				// String

				writeString(this.A6ZIP, dos);

				// String

				writeString(this.A6CY20, dos);

				// String

				writeString(this.A6CONT, dos);

				// String

				writeString(this.A6TEL, dos);

				// String

				writeString(this.A6FAX, dos);

				// String

				writeString(this.A6VNBR, dos);

				// BigDecimal

				dos.writeObject(this.A6ADCD);

				// String

				writeString(this.A6TERM, dos);

				// String

				writeString(this.A6EDIP, dos);

				// String

				writeString(this.A6SHNM, dos);

				// String

				writeString(this.A6CUNO, dos);

				// String

				writeString(this.A6SHFI, dos);

				// String

				writeString(this.A6VCLD, dos);

				// String

				writeString(this.A6SHVI, dos);

				// String

				writeString(this.A6APCO, dos);

				// String

				writeString(this.A6VSFS, dos);

				// String

				writeString(this.A6BRID, dos);

				// String

				writeString(this.A6VCNS, dos);

				// String

				writeString(this.A6MFGI, dos);

				// String

				writeString(this.A6SRSQ, dos);

				// String

				writeString(this.A6CDOI, dos);

				// String

				writeString(this.A6VASR, dos);

				// String

				writeString(this.A6BROL, dos);

				// String

				writeString(this.A6PVND, dos);

				// String

				writeString(this.A6RSVF, dos);

				// BigDecimal

				dos.writeObject(this.A6TDCD);

				// String

				writeString(this.A6TVND, dos);

				// String

				writeString(this.A6TVFL, dos);

				// String

				writeString(this.A6POTT, dos);

				// String

				writeString(this.A6AFAX, dos);

				// String

				writeString(this.A6RPOT, dos);

				// BigDecimal

				dos.writeObject(this.A6EADT);

				// BigDecimal

				dos.writeObject(this.A6EATM);

				// String

				writeString(this.A6EAID, dos);

				// BigDecimal

				dos.writeObject(this.A6MODT);

				// BigDecimal

				dos.writeObject(this.A6MOTM);

				// String

				writeString(this.A6MOID, dos);

				// String

				writeString(this.A6MOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.A6ADR1, dos);

				// String

				writeString(this.A6ADR2, dos);

				// String

				writeString(this.A6ADR3, dos);

				// String

				writeString(this.A6ADR4, dos);

				// String

				writeString(this.A6CIT, dos);

				// String

				writeString(this.A6STAE, dos);

				// String

				writeString(this.A6ZIP, dos);

				// String

				writeString(this.A6CY20, dos);

				// String

				writeString(this.A6CONT, dos);

				// String

				writeString(this.A6TEL, dos);

				// String

				writeString(this.A6FAX, dos);

				// String

				writeString(this.A6VNBR, dos);

				// BigDecimal

				dos.writeObject(this.A6ADCD);

				// String

				writeString(this.A6TERM, dos);

				// String

				writeString(this.A6EDIP, dos);

				// String

				writeString(this.A6SHNM, dos);

				// String

				writeString(this.A6CUNO, dos);

				// String

				writeString(this.A6SHFI, dos);

				// String

				writeString(this.A6VCLD, dos);

				// String

				writeString(this.A6SHVI, dos);

				// String

				writeString(this.A6APCO, dos);

				// String

				writeString(this.A6VSFS, dos);

				// String

				writeString(this.A6BRID, dos);

				// String

				writeString(this.A6VCNS, dos);

				// String

				writeString(this.A6MFGI, dos);

				// String

				writeString(this.A6SRSQ, dos);

				// String

				writeString(this.A6CDOI, dos);

				// String

				writeString(this.A6VASR, dos);

				// String

				writeString(this.A6BROL, dos);

				// String

				writeString(this.A6PVND, dos);

				// String

				writeString(this.A6RSVF, dos);

				// BigDecimal

				dos.writeObject(this.A6TDCD);

				// String

				writeString(this.A6TVND, dos);

				// String

				writeString(this.A6TVFL, dos);

				// String

				writeString(this.A6POTT, dos);

				// String

				writeString(this.A6AFAX, dos);

				// String

				writeString(this.A6RPOT, dos);

				// BigDecimal

				dos.writeObject(this.A6EADT);

				// BigDecimal

				dos.writeObject(this.A6EATM);

				// String

				writeString(this.A6EAID, dos);

				// BigDecimal

				dos.writeObject(this.A6MODT);

				// BigDecimal

				dos.writeObject(this.A6MOTM);

				// String

				writeString(this.A6MOID, dos);

				// String

				writeString(this.A6MOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A6ADR1=" + A6ADR1);
			sb.append(",A6ADR2=" + A6ADR2);
			sb.append(",A6ADR3=" + A6ADR3);
			sb.append(",A6ADR4=" + A6ADR4);
			sb.append(",A6CIT=" + A6CIT);
			sb.append(",A6STAE=" + A6STAE);
			sb.append(",A6ZIP=" + A6ZIP);
			sb.append(",A6CY20=" + A6CY20);
			sb.append(",A6CONT=" + A6CONT);
			sb.append(",A6TEL=" + A6TEL);
			sb.append(",A6FAX=" + A6FAX);
			sb.append(",A6VNBR=" + A6VNBR);
			sb.append(",A6ADCD=" + String.valueOf(A6ADCD));
			sb.append(",A6TERM=" + A6TERM);
			sb.append(",A6EDIP=" + A6EDIP);
			sb.append(",A6SHNM=" + A6SHNM);
			sb.append(",A6CUNO=" + A6CUNO);
			sb.append(",A6SHFI=" + A6SHFI);
			sb.append(",A6VCLD=" + A6VCLD);
			sb.append(",A6SHVI=" + A6SHVI);
			sb.append(",A6APCO=" + A6APCO);
			sb.append(",A6VSFS=" + A6VSFS);
			sb.append(",A6BRID=" + A6BRID);
			sb.append(",A6VCNS=" + A6VCNS);
			sb.append(",A6MFGI=" + A6MFGI);
			sb.append(",A6SRSQ=" + A6SRSQ);
			sb.append(",A6CDOI=" + A6CDOI);
			sb.append(",A6VASR=" + A6VASR);
			sb.append(",A6BROL=" + A6BROL);
			sb.append(",A6PVND=" + A6PVND);
			sb.append(",A6RSVF=" + A6RSVF);
			sb.append(",A6TDCD=" + String.valueOf(A6TDCD));
			sb.append(",A6TVND=" + A6TVND);
			sb.append(",A6TVFL=" + A6TVFL);
			sb.append(",A6POTT=" + A6POTT);
			sb.append(",A6AFAX=" + A6AFAX);
			sb.append(",A6RPOT=" + A6RPOT);
			sb.append(",A6EADT=" + String.valueOf(A6EADT));
			sb.append(",A6EATM=" + String.valueOf(A6EATM));
			sb.append(",A6EAID=" + A6EAID);
			sb.append(",A6MODT=" + String.valueOf(A6MODT));
			sb.append(",A6MOTM=" + String.valueOf(A6MOTM));
			sb.append(",A6MOID=" + A6MOID);
			sb.append(",A6MOPG=" + A6MOPG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				VENDOR_SHIP_FROMStruct VENDOR_SHIP_FROM = new VENDOR_SHIP_FROMStruct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[18];

					public void addRow(String[] row) {

						for (int i = 0; i < 18; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 17 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 17 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[17] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "SITE_ID", "ADDRESS_LINE_1", "ADDRESS_LINE_2", "ADDRESS_LINE_3",
						"ADDRESS_LINE_4", "CITY", "STATE", "ZIP_CODE", "COUNTRY_NAME", "VENDOR_NO", "VENDOR_SUFFIX",
						"SHIP_FROM_NAME", "SHIPPED_VIA", "BROKER_ID", "PAY_TO_VENDOR_NO", "IS_DELETED", "errorCode",
						"errorMessage", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "VENDOR_SHIP_FROM");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = context.GIM_Schema_Migrating_Test;

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("VENDOR_SHIP_FROM");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("VENDOR_SHIP_FROM");
				}

				int updateKeyCount_tDBOutput_1 = 3;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 16 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + context.GIM_Server + ":" + context.GIM_Port + "/"
						+ context.GIM_Database + "?" + context.GIM_AdditionalParams;
				dbUser_tDBOutput_1 = context.GIM_Login;

				final String decryptedPassword_tDBOutput_1 = context.GIM_Password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 1;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1
								+ "\" WHERE \"SITE_ID\" = ? AND \"VENDOR_NO\" = ? AND \"VENDOR_SUFFIX\" = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"SITE_ID\",\"ADDRESS_LINE_1\",\"ADDRESS_LINE_2\",\"ADDRESS_LINE_3\",\"ADDRESS_LINE_4\",\"CITY\",\"STATE\",\"ZIP_CODE\",\"COUNTRY_NAME\",\"VENDOR_NO\",\"VENDOR_SUFFIX\",\"SHIP_FROM_NAME\",\"SHIPPED_VIA\",\"BROKER_ID\",\"PAY_TO_VENDOR_NO\",\"IS_DELETED\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"ADDRESS_LINE_1\" = ?,\"ADDRESS_LINE_2\" = ?,\"ADDRESS_LINE_3\" = ?,\"ADDRESS_LINE_4\" = ?,\"CITY\" = ?,\"STATE\" = ?,\"ZIP_CODE\" = ?,\"COUNTRY_NAME\" = ?,\"SHIP_FROM_NAME\" = ?,\"SHIPPED_VIA\" = ?,\"BROKER_ID\" = ?,\"PAY_TO_VENDOR_NO\" = ?,\"IS_DELETED\" = ? WHERE \"SITE_ID\" = ? AND \"VENDOR_NO\" = ? AND \"VENDOR_SUFFIX\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				VENDOR_SHIP_FROMStruct VENDOR_SHIP_FROM_tmp = new VENDOR_SHIP_FROMStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;

				final String decryptedPassword_tDBInput_1 = context.SUS_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";"
						+ context.SUS_Additional_Params;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  USVFA6PF.A6ADR1, \n  USVFA6PF.A6ADR2, \n  USVFA6PF.A6ADR3, \n  USVFA6PF.A6ADR4, \n  USVFA6PF.A6CIT, \n  USVFA6PF.A"
						+ "6STAE, \n  USVFA6PF.A6ZIP, \n  USVFA6PF.A6CY20, \n  USVFA6PF.A6CONT, \n  USVFA6PF.A6TEL, \n  USVFA6PF.A6FAX, \n  USVFA6PF.A6VN"
						+ "BR, \n  USVFA6PF.A6ADCD, \n  USVFA6PF.A6TERM, \n  USVFA6PF.A6EDIP, \n  USVFA6PF.A6SHNM, \n  USVFA6PF.A6CUNO, \n  USVFA6PF.A6SH"
						+ "FI, \n  USVFA6PF.A6VCLD, \n  USVFA6PF.A6SHVI, \n  USVFA6PF.A6APCO, \n  USVFA6PF.A6VSFS, \n  USVFA6PF.A6BRID, \n  USVFA6PF.A6VC"
						+ "NS, \n  USVFA6PF.A6MFGI, \n  USVFA6PF.A6SRSQ, \n  USVFA6PF.A6CDOI, \n  USVFA6PF.A6VASR, \n  USVFA6PF.A6BROL, \n  USVFA6PF.A6PV"
						+ "ND, \n  USVFA6PF.A6RSVF, \n  USVFA6PF.A6TDCD, \n  USVFA6PF.A6TVND, \n  USVFA6PF.A6TVFL, \n  USVFA6PF.A6POTT, \n  USVFA6PF.A6AF"
						+ "AX, \n  USVFA6PF.A6RPOT, \n  USVFA6PF.A6EADT, \n  USVFA6PF.A6EATM, \n  USVFA6PF.A6EAID, \n  USVFA6PF.A6MODT, \n  USVFA6PF.A6MO"
						+ "TM, \n  USVFA6PF.A6MOID, \n  USVFA6PF.A6MOPG\nFROM USVFA6PF LIMIT 100";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.A6ADR1 = null;
						} else {

							row1.A6ADR1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.A6ADR2 = null;
						} else {

							row1.A6ADR2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.A6ADR3 = null;
						} else {

							row1.A6ADR3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.A6ADR4 = null;
						} else {

							row1.A6ADR4 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.A6CIT = null;
						} else {

							row1.A6CIT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.A6STAE = null;
						} else {

							row1.A6STAE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.A6ZIP = null;
						} else {

							row1.A6ZIP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.A6CY20 = null;
						} else {

							row1.A6CY20 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, true);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.A6CONT = null;
						} else {

							row1.A6CONT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.A6TEL = null;
						} else {

							row1.A6TEL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.A6FAX = null;
						} else {

							row1.A6FAX = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, true);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.A6VNBR = null;
						} else {

							row1.A6VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.A6ADCD = null;
						} else {

							row1.A6ADCD = rs_tDBInput_1.getBigDecimal(13);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.A6TERM = null;
						} else {

							row1.A6TERM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.A6EDIP = null;
						} else {

							row1.A6EDIP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, true);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.A6SHNM = null;
						} else {

							row1.A6SHNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.A6CUNO = null;
						} else {

							row1.A6CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.A6SHFI = null;
						} else {

							row1.A6SHFI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, true);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.A6VCLD = null;
						} else {

							row1.A6VCLD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, true);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.A6SHVI = null;
						} else {

							row1.A6SHVI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.A6APCO = null;
						} else {

							row1.A6APCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, true);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.A6VSFS = null;
						} else {

							row1.A6VSFS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, true);
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.A6BRID = null;
						} else {

							row1.A6BRID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, true);
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.A6VCNS = null;
						} else {

							row1.A6VCNS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, true);
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.A6MFGI = null;
						} else {

							row1.A6MFGI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, true);
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.A6SRSQ = null;
						} else {

							row1.A6SRSQ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.A6CDOI = null;
						} else {

							row1.A6CDOI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, true);
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.A6VASR = null;
						} else {

							row1.A6VASR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, true);
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.A6BROL = null;
						} else {

							row1.A6BROL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, true);
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.A6PVND = null;
						} else {

							row1.A6PVND = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, true);
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.A6RSVF = null;
						} else {

							row1.A6RSVF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, true);
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.A6TDCD = null;
						} else {

							row1.A6TDCD = rs_tDBInput_1.getBigDecimal(32);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.A6TVND = null;
						} else {

							row1.A6TVND = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, true);
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.A6TVFL = null;
						} else {

							row1.A6TVFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.A6POTT = null;
						} else {

							row1.A6POTT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.A6AFAX = null;
						} else {

							row1.A6AFAX = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, true);
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.A6RPOT = null;
						} else {

							row1.A6RPOT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, true);
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.A6EADT = null;
						} else {

							row1.A6EADT = rs_tDBInput_1.getBigDecimal(38);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.A6EATM = null;
						} else {

							row1.A6EATM = rs_tDBInput_1.getBigDecimal(39);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.A6EAID = null;
						} else {

							row1.A6EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, true);
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.A6MODT = null;
						} else {

							row1.A6MODT = rs_tDBInput_1.getBigDecimal(41);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.A6MOTM = null;
						} else {

							row1.A6MOTM = rs_tDBInput_1.getBigDecimal(42);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.A6MOID = null;
						} else {

							row1.A6MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.A6MOPG = null;
						} else {

							row1.A6MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row2"
						///////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.MJVNBR = row1.A6VNBR;

							row2HashKey.MJADCD = row1.A6ADCD;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
							// and it contains more one result from keys : row2.MJVNBR = '" +
							// row2HashKey.MJVNBR + "', row2.MJADCD = '" + row2HashKey.MJADCD + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							VENDOR_SHIP_FROM = null;

// # Output table : 'VENDOR_SHIP_FROM'
							VENDOR_SHIP_FROM_tmp.SITE_ID = row2.MJCOCO;
							VENDOR_SHIP_FROM_tmp.ADDRESS_LINE_1 = row1.A6ADR1;
							VENDOR_SHIP_FROM_tmp.ADDRESS_LINE_2 = row1.A6ADR2;
							VENDOR_SHIP_FROM_tmp.ADDRESS_LINE_3 = row1.A6ADR3;
							VENDOR_SHIP_FROM_tmp.ADDRESS_LINE_4 = row1.A6ADR4;
							VENDOR_SHIP_FROM_tmp.CITY = row1.A6CIT;
							VENDOR_SHIP_FROM_tmp.STATE = row1.A6STAE;
							VENDOR_SHIP_FROM_tmp.ZIP_CODE = row1.A6ZIP;
							VENDOR_SHIP_FROM_tmp.COUNTRY_NAME = row1.A6CY20;
							VENDOR_SHIP_FROM_tmp.VENDOR_NO = row1.A6VNBR;
							VENDOR_SHIP_FROM_tmp.VENDOR_SUFFIX = row1.A6ADCD;
							VENDOR_SHIP_FROM_tmp.SHIP_FROM_NAME = row1.A6SHNM;
							VENDOR_SHIP_FROM_tmp.SHIPPED_VIA = row1.A6SHVI;
							VENDOR_SHIP_FROM_tmp.BROKER_ID = row1.A6BRID;
							VENDOR_SHIP_FROM_tmp.PAY_TO_VENDOR_NO = row1.A6PVND;
							VENDOR_SHIP_FROM_tmp.IS_DELETED = false;
							VENDOR_SHIP_FROM = VENDOR_SHIP_FROM_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "VENDOR_SHIP_FROM"
						if (VENDOR_SHIP_FROM != null) {
							row3 = null;

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "VENDOR_SHIP_FROM"

								);
							}

							row3 = null;
							whetherReject_tDBOutput_1 = false;
							if (VENDOR_SHIP_FROM.SITE_ID == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, VENDOR_SHIP_FROM.SITE_ID);
							}

							if (VENDOR_SHIP_FROM.VENDOR_NO == null) {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2, VENDOR_SHIP_FROM.VENDOR_NO);
							}

							pstmt_tDBOutput_1.setBigDecimal(3, VENDOR_SHIP_FROM.VENDOR_SUFFIX);

							int checkCount_tDBOutput_1 = -1;
							try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
								}
							}
							if (checkCount_tDBOutput_1 > 0) {
								if (VENDOR_SHIP_FROM.ADDRESS_LINE_1 == null) {
									pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(1, VENDOR_SHIP_FROM.ADDRESS_LINE_1);
								}

								if (VENDOR_SHIP_FROM.ADDRESS_LINE_2 == null) {
									pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(2, VENDOR_SHIP_FROM.ADDRESS_LINE_2);
								}

								if (VENDOR_SHIP_FROM.ADDRESS_LINE_3 == null) {
									pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(3, VENDOR_SHIP_FROM.ADDRESS_LINE_3);
								}

								if (VENDOR_SHIP_FROM.ADDRESS_LINE_4 == null) {
									pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(4, VENDOR_SHIP_FROM.ADDRESS_LINE_4);
								}

								if (VENDOR_SHIP_FROM.CITY == null) {
									pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(5, VENDOR_SHIP_FROM.CITY);
								}

								if (VENDOR_SHIP_FROM.STATE == null) {
									pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(6, VENDOR_SHIP_FROM.STATE);
								}

								if (VENDOR_SHIP_FROM.ZIP_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(7, VENDOR_SHIP_FROM.ZIP_CODE);
								}

								if (VENDOR_SHIP_FROM.COUNTRY_NAME == null) {
									pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(8, VENDOR_SHIP_FROM.COUNTRY_NAME);
								}

								if (VENDOR_SHIP_FROM.SHIP_FROM_NAME == null) {
									pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(9, VENDOR_SHIP_FROM.SHIP_FROM_NAME);
								}

								if (VENDOR_SHIP_FROM.SHIPPED_VIA == null) {
									pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(10, VENDOR_SHIP_FROM.SHIPPED_VIA);
								}

								if (VENDOR_SHIP_FROM.BROKER_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(11, VENDOR_SHIP_FROM.BROKER_ID);
								}

								if (VENDOR_SHIP_FROM.PAY_TO_VENDOR_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(12, VENDOR_SHIP_FROM.PAY_TO_VENDOR_NO);
								}

								if (VENDOR_SHIP_FROM.IS_DELETED == null) {
									pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tDBOutput_1.setBoolean(13, VENDOR_SHIP_FROM.IS_DELETED);
								}

								if (VENDOR_SHIP_FROM.SITE_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(14 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(14 + count_tDBOutput_1, VENDOR_SHIP_FROM.SITE_ID);
								}

								if (VENDOR_SHIP_FROM.VENDOR_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(15 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(15 + count_tDBOutput_1,
											VENDOR_SHIP_FROM.VENDOR_NO);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(16 + count_tDBOutput_1,
										VENDOR_SHIP_FROM.VENDOR_SUFFIX);

								try {

									int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
									updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row3 = new row3Struct();
									row3.SITE_ID = VENDOR_SHIP_FROM.SITE_ID;
									row3.ADDRESS_LINE_1 = VENDOR_SHIP_FROM.ADDRESS_LINE_1;
									row3.ADDRESS_LINE_2 = VENDOR_SHIP_FROM.ADDRESS_LINE_2;
									row3.ADDRESS_LINE_3 = VENDOR_SHIP_FROM.ADDRESS_LINE_3;
									row3.ADDRESS_LINE_4 = VENDOR_SHIP_FROM.ADDRESS_LINE_4;
									row3.CITY = VENDOR_SHIP_FROM.CITY;
									row3.STATE = VENDOR_SHIP_FROM.STATE;
									row3.ZIP_CODE = VENDOR_SHIP_FROM.ZIP_CODE;
									row3.COUNTRY_NAME = VENDOR_SHIP_FROM.COUNTRY_NAME;
									row3.VENDOR_NO = VENDOR_SHIP_FROM.VENDOR_NO;
									row3.VENDOR_SUFFIX = VENDOR_SHIP_FROM.VENDOR_SUFFIX;
									row3.SHIP_FROM_NAME = VENDOR_SHIP_FROM.SHIP_FROM_NAME;
									row3.SHIPPED_VIA = VENDOR_SHIP_FROM.SHIPPED_VIA;
									row3.BROKER_ID = VENDOR_SHIP_FROM.BROKER_ID;
									row3.PAY_TO_VENDOR_NO = VENDOR_SHIP_FROM.PAY_TO_VENDOR_NO;
									row3.IS_DELETED = VENDOR_SHIP_FROM.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row3.errorCode = ((java.sql.SQLException) e).getSQLState();
									row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							} else {
								if (VENDOR_SHIP_FROM.SITE_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(1, VENDOR_SHIP_FROM.SITE_ID);
								}

								if (VENDOR_SHIP_FROM.ADDRESS_LINE_1 == null) {
									pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(2, VENDOR_SHIP_FROM.ADDRESS_LINE_1);
								}

								if (VENDOR_SHIP_FROM.ADDRESS_LINE_2 == null) {
									pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(3, VENDOR_SHIP_FROM.ADDRESS_LINE_2);
								}

								if (VENDOR_SHIP_FROM.ADDRESS_LINE_3 == null) {
									pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(4, VENDOR_SHIP_FROM.ADDRESS_LINE_3);
								}

								if (VENDOR_SHIP_FROM.ADDRESS_LINE_4 == null) {
									pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(5, VENDOR_SHIP_FROM.ADDRESS_LINE_4);
								}

								if (VENDOR_SHIP_FROM.CITY == null) {
									pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(6, VENDOR_SHIP_FROM.CITY);
								}

								if (VENDOR_SHIP_FROM.STATE == null) {
									pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(7, VENDOR_SHIP_FROM.STATE);
								}

								if (VENDOR_SHIP_FROM.ZIP_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(8, VENDOR_SHIP_FROM.ZIP_CODE);
								}

								if (VENDOR_SHIP_FROM.COUNTRY_NAME == null) {
									pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(9, VENDOR_SHIP_FROM.COUNTRY_NAME);
								}

								if (VENDOR_SHIP_FROM.VENDOR_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(10, VENDOR_SHIP_FROM.VENDOR_NO);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(11, VENDOR_SHIP_FROM.VENDOR_SUFFIX);

								if (VENDOR_SHIP_FROM.SHIP_FROM_NAME == null) {
									pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(12, VENDOR_SHIP_FROM.SHIP_FROM_NAME);
								}

								if (VENDOR_SHIP_FROM.SHIPPED_VIA == null) {
									pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(13, VENDOR_SHIP_FROM.SHIPPED_VIA);
								}

								if (VENDOR_SHIP_FROM.BROKER_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(14, VENDOR_SHIP_FROM.BROKER_ID);
								}

								if (VENDOR_SHIP_FROM.PAY_TO_VENDOR_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(15, VENDOR_SHIP_FROM.PAY_TO_VENDOR_NO);
								}

								if (VENDOR_SHIP_FROM.IS_DELETED == null) {
									pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.BOOLEAN);
								} else {
									pstmtInsert_tDBOutput_1.setBoolean(16, VENDOR_SHIP_FROM.IS_DELETED);
								}

								try {

									int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
									insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row3 = new row3Struct();
									row3.SITE_ID = VENDOR_SHIP_FROM.SITE_ID;
									row3.ADDRESS_LINE_1 = VENDOR_SHIP_FROM.ADDRESS_LINE_1;
									row3.ADDRESS_LINE_2 = VENDOR_SHIP_FROM.ADDRESS_LINE_2;
									row3.ADDRESS_LINE_3 = VENDOR_SHIP_FROM.ADDRESS_LINE_3;
									row3.ADDRESS_LINE_4 = VENDOR_SHIP_FROM.ADDRESS_LINE_4;
									row3.CITY = VENDOR_SHIP_FROM.CITY;
									row3.STATE = VENDOR_SHIP_FROM.STATE;
									row3.ZIP_CODE = VENDOR_SHIP_FROM.ZIP_CODE;
									row3.COUNTRY_NAME = VENDOR_SHIP_FROM.COUNTRY_NAME;
									row3.VENDOR_NO = VENDOR_SHIP_FROM.VENDOR_NO;
									row3.VENDOR_SUFFIX = VENDOR_SHIP_FROM.VENDOR_SUFFIX;
									row3.SHIP_FROM_NAME = VENDOR_SHIP_FROM.SHIP_FROM_NAME;
									row3.SHIPPED_VIA = VENDOR_SHIP_FROM.SHIPPED_VIA;
									row3.BROKER_ID = VENDOR_SHIP_FROM.BROKER_ID;
									row3.PAY_TO_VENDOR_NO = VENDOR_SHIP_FROM.PAY_TO_VENDOR_NO;
									row3.IS_DELETED = VENDOR_SHIP_FROM.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row3.errorCode = ((java.sql.SQLException) e).getSQLState();
									row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							}
							if (!whetherReject_tDBOutput_1) {
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if (rowsToCommitCount_tDBOutput_1 != 0) {

								}
								conn_tDBOutput_1.commit();
								if (rowsToCommitCount_tDBOutput_1 != 0) {

									rowsToCommitCount_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[18];

								if (row3.SITE_ID != null) { //
									row_tLogRow_1[0] = String.valueOf(row3.SITE_ID);

								} //

								if (row3.ADDRESS_LINE_1 != null) { //
									row_tLogRow_1[1] = String.valueOf(row3.ADDRESS_LINE_1);

								} //

								if (row3.ADDRESS_LINE_2 != null) { //
									row_tLogRow_1[2] = String.valueOf(row3.ADDRESS_LINE_2);

								} //

								if (row3.ADDRESS_LINE_3 != null) { //
									row_tLogRow_1[3] = String.valueOf(row3.ADDRESS_LINE_3);

								} //

								if (row3.ADDRESS_LINE_4 != null) { //
									row_tLogRow_1[4] = String.valueOf(row3.ADDRESS_LINE_4);

								} //

								if (row3.CITY != null) { //
									row_tLogRow_1[5] = String.valueOf(row3.CITY);

								} //

								if (row3.STATE != null) { //
									row_tLogRow_1[6] = String.valueOf(row3.STATE);

								} //

								if (row3.ZIP_CODE != null) { //
									row_tLogRow_1[7] = String.valueOf(row3.ZIP_CODE);

								} //

								if (row3.COUNTRY_NAME != null) { //
									row_tLogRow_1[8] = String.valueOf(row3.COUNTRY_NAME);

								} //

								if (row3.VENDOR_NO != null) { //
									row_tLogRow_1[9] = String.valueOf(row3.VENDOR_NO);

								} //

								if (row3.VENDOR_SUFFIX != null) { //
									row_tLogRow_1[10] = row3.VENDOR_SUFFIX.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.SHIP_FROM_NAME != null) { //
									row_tLogRow_1[11] = String.valueOf(row3.SHIP_FROM_NAME);

								} //

								if (row3.SHIPPED_VIA != null) { //
									row_tLogRow_1[12] = String.valueOf(row3.SHIPPED_VIA);

								} //

								if (row3.BROKER_ID != null) { //
									row_tLogRow_1[13] = String.valueOf(row3.BROKER_ID);

								} //

								if (row3.PAY_TO_VENDOR_NO != null) { //
									row_tLogRow_1[14] = String.valueOf(row3.PAY_TO_VENDOR_NO);

								} //

								if (row3.IS_DELETED != null) { //
									row_tLogRow_1[15] = String.valueOf(row3.IS_DELETED);

								} //

								if (row3.errorCode != null) { //
									row_tLogRow_1[16] = String.valueOf(row3.errorCode);

								} //

								if (row3.errorMessage != null) { //
									row_tLogRow_1[17] = String.valueOf(row3.errorMessage);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "VENDOR_SHIP_FROM"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "VENDOR_SHIP_FROM");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MJCOCO;

		public String getMJCOCO() {
			return this.MJCOCO;
		}

		public String MJVNBR;

		public String getMJVNBR() {
			return this.MJVNBR;
		}

		public BigDecimal MJADCD;

		public BigDecimal getMJADCD() {
			return this.MJADCD;
		}

		public String MJSHNM;

		public String getMJSHNM() {
			return this.MJSHNM;
		}

		public String MJSAAC;

		public String getMJSAAC() {
			return this.MJSAAC;
		}

		public BigDecimal MJGLN;

		public BigDecimal getMJGLN() {
			return this.MJGLN;
		}

		public String MJFATY;

		public String getMJFATY() {
			return this.MJFATY;
		}

		public String MJMGLO;

		public String getMJMGLO() {
			return this.MJMGLO;
		}

		public String MJEMAL;

		public String getMJEMAL() {
			return this.MJEMAL;
		}

		public String MJUDNM;

		public String getMJUDNM() {
			return this.MJUDNM;
		}

		public String MJFUA1;

		public String getMJFUA1() {
			return this.MJFUA1;
		}

		public String MJFUA2;

		public String getMJFUA2() {
			return this.MJFUA2;
		}

		public String MJFUA3;

		public String getMJFUA3() {
			return this.MJFUA3;
		}

		public String MJFUF1;

		public String getMJFUF1() {
			return this.MJFUF1;
		}

		public String MJFUF2;

		public String getMJFUF2() {
			return this.MJFUF2;
		}

		public String MJFUF3;

		public String getMJFUF3() {
			return this.MJFUF3;
		}

		public BigDecimal MJFUN1;

		public BigDecimal getMJFUN1() {
			return this.MJFUN1;
		}

		public BigDecimal MJFUN2;

		public BigDecimal getMJFUN2() {
			return this.MJFUN2;
		}

		public BigDecimal MJFUN3;

		public BigDecimal getMJFUN3() {
			return this.MJFUN3;
		}

		public BigDecimal MJEADT;

		public BigDecimal getMJEADT() {
			return this.MJEADT;
		}

		public BigDecimal MJEATM;

		public BigDecimal getMJEATM() {
			return this.MJEATM;
		}

		public String MJEAID;

		public String getMJEAID() {
			return this.MJEAID;
		}

		public String MJEAPG;

		public String getMJEAPG() {
			return this.MJEAPG;
		}

		public BigDecimal MJMODT;

		public BigDecimal getMJMODT() {
			return this.MJMODT;
		}

		public BigDecimal MJMOTM;

		public BigDecimal getMJMOTM() {
			return this.MJMOTM;
		}

		public String MJMOID;

		public String getMJMOID() {
			return this.MJMOID;
		}

		public String MJMOPG;

		public String getMJMOPG() {
			return this.MJMOPG;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.MJVNBR == null) ? 0 : this.MJVNBR.hashCode());

				result = prime * result
						+ ((this.MJADCD == null) ? 0 : new Double(this.MJADCD.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.MJVNBR == null) {
				if (other.MJVNBR != null)
					return false;

			} else if (!this.MJVNBR.equals(other.MJVNBR))

				return false;

			if (this.MJADCD == null) {
				if (other.MJADCD != null)
					return false;

			} else if ((other.MJADCD == null) || (this.MJADCD.compareTo(other.MJADCD) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.MJCOCO = this.MJCOCO;
			other.MJVNBR = this.MJVNBR;
			other.MJADCD = this.MJADCD;
			other.MJSHNM = this.MJSHNM;
			other.MJSAAC = this.MJSAAC;
			other.MJGLN = this.MJGLN;
			other.MJFATY = this.MJFATY;
			other.MJMGLO = this.MJMGLO;
			other.MJEMAL = this.MJEMAL;
			other.MJUDNM = this.MJUDNM;
			other.MJFUA1 = this.MJFUA1;
			other.MJFUA2 = this.MJFUA2;
			other.MJFUA3 = this.MJFUA3;
			other.MJFUF1 = this.MJFUF1;
			other.MJFUF2 = this.MJFUF2;
			other.MJFUF3 = this.MJFUF3;
			other.MJFUN1 = this.MJFUN1;
			other.MJFUN2 = this.MJFUN2;
			other.MJFUN3 = this.MJFUN3;
			other.MJEADT = this.MJEADT;
			other.MJEATM = this.MJEATM;
			other.MJEAID = this.MJEAID;
			other.MJEAPG = this.MJEAPG;
			other.MJMODT = this.MJMODT;
			other.MJMOTM = this.MJMOTM;
			other.MJMOID = this.MJMOID;
			other.MJMOPG = this.MJMOPG;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.MJVNBR = this.MJVNBR;
			other.MJADCD = this.MJADCD;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Ship_From_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.MJVNBR = readString(dis);

					this.MJADCD = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Ship_From_Inbound) {

				try {

					int length = 0;

					this.MJVNBR = readString(dis);

					this.MJADCD = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MJVNBR, dos);

				// BigDecimal

				dos.writeObject(this.MJADCD);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.MJVNBR, dos);

				// BigDecimal

				dos.writeObject(this.MJADCD);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MJCOCO = readString(dis, ois);

				this.MJSHNM = readString(dis, ois);

				this.MJSAAC = readString(dis, ois);

				this.MJGLN = (BigDecimal) ois.readObject();

				this.MJFATY = readString(dis, ois);

				this.MJMGLO = readString(dis, ois);

				this.MJEMAL = readString(dis, ois);

				this.MJUDNM = readString(dis, ois);

				this.MJFUA1 = readString(dis, ois);

				this.MJFUA2 = readString(dis, ois);

				this.MJFUA3 = readString(dis, ois);

				this.MJFUF1 = readString(dis, ois);

				this.MJFUF2 = readString(dis, ois);

				this.MJFUF3 = readString(dis, ois);

				this.MJFUN1 = (BigDecimal) ois.readObject();

				this.MJFUN2 = (BigDecimal) ois.readObject();

				this.MJFUN3 = (BigDecimal) ois.readObject();

				this.MJEADT = (BigDecimal) ois.readObject();

				this.MJEATM = (BigDecimal) ois.readObject();

				this.MJEAID = readString(dis, ois);

				this.MJEAPG = readString(dis, ois);

				this.MJMODT = (BigDecimal) ois.readObject();

				this.MJMOTM = (BigDecimal) ois.readObject();

				this.MJMOID = readString(dis, ois);

				this.MJMOPG = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.MJCOCO = readString(dis, objectIn);

				this.MJSHNM = readString(dis, objectIn);

				this.MJSAAC = readString(dis, objectIn);

				this.MJGLN = (BigDecimal) objectIn.readObject();

				this.MJFATY = readString(dis, objectIn);

				this.MJMGLO = readString(dis, objectIn);

				this.MJEMAL = readString(dis, objectIn);

				this.MJUDNM = readString(dis, objectIn);

				this.MJFUA1 = readString(dis, objectIn);

				this.MJFUA2 = readString(dis, objectIn);

				this.MJFUA3 = readString(dis, objectIn);

				this.MJFUF1 = readString(dis, objectIn);

				this.MJFUF2 = readString(dis, objectIn);

				this.MJFUF3 = readString(dis, objectIn);

				this.MJFUN1 = (BigDecimal) objectIn.readObject();

				this.MJFUN2 = (BigDecimal) objectIn.readObject();

				this.MJFUN3 = (BigDecimal) objectIn.readObject();

				this.MJEADT = (BigDecimal) objectIn.readObject();

				this.MJEATM = (BigDecimal) objectIn.readObject();

				this.MJEAID = readString(dis, objectIn);

				this.MJEAPG = readString(dis, objectIn);

				this.MJMODT = (BigDecimal) objectIn.readObject();

				this.MJMOTM = (BigDecimal) objectIn.readObject();

				this.MJMOID = readString(dis, objectIn);

				this.MJMOPG = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MJCOCO, dos, oos);

				writeString(this.MJSHNM, dos, oos);

				writeString(this.MJSAAC, dos, oos);

				oos.writeObject(this.MJGLN);

				writeString(this.MJFATY, dos, oos);

				writeString(this.MJMGLO, dos, oos);

				writeString(this.MJEMAL, dos, oos);

				writeString(this.MJUDNM, dos, oos);

				writeString(this.MJFUA1, dos, oos);

				writeString(this.MJFUA2, dos, oos);

				writeString(this.MJFUA3, dos, oos);

				writeString(this.MJFUF1, dos, oos);

				writeString(this.MJFUF2, dos, oos);

				writeString(this.MJFUF3, dos, oos);

				oos.writeObject(this.MJFUN1);

				oos.writeObject(this.MJFUN2);

				oos.writeObject(this.MJFUN3);

				oos.writeObject(this.MJEADT);

				oos.writeObject(this.MJEATM);

				writeString(this.MJEAID, dos, oos);

				writeString(this.MJEAPG, dos, oos);

				oos.writeObject(this.MJMODT);

				oos.writeObject(this.MJMOTM);

				writeString(this.MJMOID, dos, oos);

				writeString(this.MJMOPG, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.MJCOCO, dos, objectOut);

				writeString(this.MJSHNM, dos, objectOut);

				writeString(this.MJSAAC, dos, objectOut);

				objectOut.writeObject(this.MJGLN);

				writeString(this.MJFATY, dos, objectOut);

				writeString(this.MJMGLO, dos, objectOut);

				writeString(this.MJEMAL, dos, objectOut);

				writeString(this.MJUDNM, dos, objectOut);

				writeString(this.MJFUA1, dos, objectOut);

				writeString(this.MJFUA2, dos, objectOut);

				writeString(this.MJFUA3, dos, objectOut);

				writeString(this.MJFUF1, dos, objectOut);

				writeString(this.MJFUF2, dos, objectOut);

				writeString(this.MJFUF3, dos, objectOut);

				objectOut.writeObject(this.MJFUN1);

				objectOut.writeObject(this.MJFUN2);

				objectOut.writeObject(this.MJFUN3);

				objectOut.writeObject(this.MJEADT);

				objectOut.writeObject(this.MJEATM);

				writeString(this.MJEAID, dos, objectOut);

				writeString(this.MJEAPG, dos, objectOut);

				objectOut.writeObject(this.MJMODT);

				objectOut.writeObject(this.MJMOTM);

				writeString(this.MJMOID, dos, objectOut);

				writeString(this.MJMOPG, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MJCOCO=" + MJCOCO);
			sb.append(",MJVNBR=" + MJVNBR);
			sb.append(",MJADCD=" + String.valueOf(MJADCD));
			sb.append(",MJSHNM=" + MJSHNM);
			sb.append(",MJSAAC=" + MJSAAC);
			sb.append(",MJGLN=" + String.valueOf(MJGLN));
			sb.append(",MJFATY=" + MJFATY);
			sb.append(",MJMGLO=" + MJMGLO);
			sb.append(",MJEMAL=" + MJEMAL);
			sb.append(",MJUDNM=" + MJUDNM);
			sb.append(",MJFUA1=" + MJFUA1);
			sb.append(",MJFUA2=" + MJFUA2);
			sb.append(",MJFUA3=" + MJFUA3);
			sb.append(",MJFUF1=" + MJFUF1);
			sb.append(",MJFUF2=" + MJFUF2);
			sb.append(",MJFUF3=" + MJFUF3);
			sb.append(",MJFUN1=" + String.valueOf(MJFUN1));
			sb.append(",MJFUN2=" + String.valueOf(MJFUN2));
			sb.append(",MJFUN3=" + String.valueOf(MJFUN3));
			sb.append(",MJEADT=" + String.valueOf(MJEADT));
			sb.append(",MJEATM=" + String.valueOf(MJEATM));
			sb.append(",MJEAID=" + MJEAID);
			sb.append(",MJEAPG=" + MJEAPG);
			sb.append(",MJMODT=" + String.valueOf(MJMODT));
			sb.append(",MJMOTM=" + String.valueOf(MJMOTM));
			sb.append(",MJMOID=" + MJMOID);
			sb.append(",MJMOPG=" + MJMOPG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MJVNBR, other.MJVNBR);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MJADCD, other.MJADCD);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(VENDOR_SHIP_FROM)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.SUS_Login;

				final String decryptedPassword_tDBInput_2 = context.SUS_Password;

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";"
						+ context.SUS_Additional_Params;

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  USVBMJRF.MJCOCO, \n  USVBMJRF.MJVNBR, \n  USVBMJRF.MJADCD, \n  USVBMJRF.MJSHNM, \n  USVBMJRF.MJSAAC, \n  USVBMJRF."
						+ "MJGLN, \n  USVBMJRF.MJFATY, \n  USVBMJRF.MJMGLO, \n  USVBMJRF.MJEMAL, \n  USVBMJRF.MJUDNM, \n  USVBMJRF.MJFUA1, \n  USVBMJRF.M"
						+ "JFUA2, \n  USVBMJRF.MJFUA3, \n  USVBMJRF.MJFUF1, \n  USVBMJRF.MJFUF2, \n  USVBMJRF.MJFUF3, \n  USVBMJRF.MJFUN1, \n  USVBMJRF.M"
						+ "JFUN2, \n  USVBMJRF.MJFUN3, \n  USVBMJRF.MJEADT, \n  USVBMJRF.MJEATM, \n  USVBMJRF.MJEAID, \n  USVBMJRF.MJEAPG, \n  USVBMJRF.M"
						+ "JMODT, \n  USVBMJRF.MJMOTM, \n  USVBMJRF.MJMOID, \n  USVBMJRF.MJMOPG\nFROM USVBMJRF";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.MJCOCO = null;
						} else {

							row2.MJCOCO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, true);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.MJVNBR = null;
						} else {

							row2.MJVNBR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, true);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.MJADCD = null;
						} else {

							row2.MJADCD = rs_tDBInput_2.getBigDecimal(3);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.MJSHNM = null;
						} else {

							row2.MJSHNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, true);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.MJSAAC = null;
						} else {

							row2.MJSAAC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, true);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.MJGLN = null;
						} else {

							row2.MJGLN = rs_tDBInput_2.getBigDecimal(6);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.MJFATY = null;
						} else {

							row2.MJFATY = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, true);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.MJMGLO = null;
						} else {

							row2.MJMGLO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, true);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.MJEMAL = null;
						} else {

							row2.MJEMAL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, true);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.MJUDNM = null;
						} else {

							row2.MJUDNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, true);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.MJFUA1 = null;
						} else {

							row2.MJFUA1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, true);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.MJFUA2 = null;
						} else {

							row2.MJFUA2 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, true);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.MJFUA3 = null;
						} else {

							row2.MJFUA3 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, true);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.MJFUF1 = null;
						} else {

							row2.MJFUF1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 14, true);
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.MJFUF2 = null;
						} else {

							row2.MJFUF2 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 15, true);
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.MJFUF3 = null;
						} else {

							row2.MJFUF3 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 16, true);
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.MJFUN1 = null;
						} else {

							row2.MJFUN1 = rs_tDBInput_2.getBigDecimal(17);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.MJFUN2 = null;
						} else {

							row2.MJFUN2 = rs_tDBInput_2.getBigDecimal(18);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.MJFUN3 = null;
						} else {

							row2.MJFUN3 = rs_tDBInput_2.getBigDecimal(19);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.MJEADT = null;
						} else {

							row2.MJEADT = rs_tDBInput_2.getBigDecimal(20);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.MJEATM = null;
						} else {

							row2.MJEATM = rs_tDBInput_2.getBigDecimal(21);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.MJEAID = null;
						} else {

							row2.MJEAID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 22, true);
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.MJEAPG = null;
						} else {

							row2.MJEAPG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, true);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.MJMODT = null;
						} else {

							row2.MJMODT = rs_tDBInput_2.getBigDecimal(24);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row2.MJMOTM = null;
						} else {

							row2.MJMOTM = rs_tDBInput_2.getBigDecimal(25);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row2.MJMOID = null;
						} else {

							row2.MJMOID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 26, true);
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row2.MJMOPG = null;
						} else {

							row2.MJMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 27, true);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.MJCOCO = row2.MJCOCO;

						row2_HashRow.MJVNBR = row2.MJVNBR;

						row2_HashRow.MJADCD = row2.MJADCD;

						row2_HashRow.MJSHNM = row2.MJSHNM;

						row2_HashRow.MJSAAC = row2.MJSAAC;

						row2_HashRow.MJGLN = row2.MJGLN;

						row2_HashRow.MJFATY = row2.MJFATY;

						row2_HashRow.MJMGLO = row2.MJMGLO;

						row2_HashRow.MJEMAL = row2.MJEMAL;

						row2_HashRow.MJUDNM = row2.MJUDNM;

						row2_HashRow.MJFUA1 = row2.MJFUA1;

						row2_HashRow.MJFUA2 = row2.MJFUA2;

						row2_HashRow.MJFUA3 = row2.MJFUA3;

						row2_HashRow.MJFUF1 = row2.MJFUF1;

						row2_HashRow.MJFUF2 = row2.MJFUF2;

						row2_HashRow.MJFUF3 = row2.MJFUF3;

						row2_HashRow.MJFUN1 = row2.MJFUN1;

						row2_HashRow.MJFUN2 = row2.MJFUN2;

						row2_HashRow.MJFUN3 = row2.MJFUN3;

						row2_HashRow.MJEADT = row2.MJEADT;

						row2_HashRow.MJEATM = row2.MJEATM;

						row2_HashRow.MJEAID = row2.MJEAID;

						row2_HashRow.MJEAPG = row2.MJEAPG;

						row2_HashRow.MJMODT = row2.MJMODT;

						row2_HashRow.MJMOTM = row2.MJMOTM;

						row2_HashRow.MJMOID = row2.MJMOID;

						row2_HashRow.MJMOPG = row2.MJMOPG;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Vendor_Ship_From_Inbound Vendor_Ship_From_InboundClass = new Vendor_Ship_From_Inbound();

		int exitCode = Vendor_Ship_From_InboundClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Vendor_Ship_From_Inbound.class.getClassLoader().getResourceAsStream(
					"sus_sli_etl/vendor_ship_from_inbound_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Vendor_Ship_From_Inbound.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("SUS_Login", "id_String");
					if (context.getStringValue("SUS_Login") == null) {
						context.SUS_Login = null;
					} else {
						context.SUS_Login = (String) context.getProperty("SUS_Login");
					}
					context.setContextType("SUS_Password", "id_Password");
					if (context.getStringValue("SUS_Password") == null) {
						context.SUS_Password = null;
					} else {
						String pwd_SUS_Password_value = context.getProperty("SUS_Password");
						context.SUS_Password = null;
						if (pwd_SUS_Password_value != null) {
							if (context_param.containsKey("SUS_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.SUS_Password = pwd_SUS_Password_value;
							} else if (!pwd_SUS_Password_value.isEmpty()) {
								try {
									context.SUS_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_SUS_Password_value);
									context.put("SUS_Password", context.SUS_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("SUS_Database", "id_String");
					if (context.getStringValue("SUS_Database") == null) {
						context.SUS_Database = null;
					} else {
						context.SUS_Database = (String) context.getProperty("SUS_Database");
					}
					context.setContextType("SUS_Server", "id_String");
					if (context.getStringValue("SUS_Server") == null) {
						context.SUS_Server = null;
					} else {
						context.SUS_Server = (String) context.getProperty("SUS_Server");
					}
					context.setContextType("SUS_Additional_Params", "id_String");
					if (context.getStringValue("SUS_Additional_Params") == null) {
						context.SUS_Additional_Params = null;
					} else {
						context.SUS_Additional_Params = (String) context.getProperty("SUS_Additional_Params");
					}
					context.setContextType("GIM_Schema_Migrating_Test", "id_String");
					if (context.getStringValue("GIM_Schema_Migrating_Test") == null) {
						context.GIM_Schema_Migrating_Test = null;
					} else {
						context.GIM_Schema_Migrating_Test = (String) context.getProperty("GIM_Schema_Migrating_Test");
					}
					context.setContextType("GIM_AdditionalParams", "id_String");
					if (context.getStringValue("GIM_AdditionalParams") == null) {
						context.GIM_AdditionalParams = null;
					} else {
						context.GIM_AdditionalParams = (String) context.getProperty("GIM_AdditionalParams");
					}
					context.setContextType("GIM_Password", "id_Password");
					if (context.getStringValue("GIM_Password") == null) {
						context.GIM_Password = null;
					} else {
						String pwd_GIM_Password_value = context.getProperty("GIM_Password");
						context.GIM_Password = null;
						if (pwd_GIM_Password_value != null) {
							if (context_param.containsKey("GIM_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.GIM_Password = pwd_GIM_Password_value;
							} else if (!pwd_GIM_Password_value.isEmpty()) {
								try {
									context.GIM_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_GIM_Password_value);
									context.put("GIM_Password", context.GIM_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("GIM_Server", "id_String");
					if (context.getStringValue("GIM_Server") == null) {
						context.GIM_Server = null;
					} else {
						context.GIM_Server = (String) context.getProperty("GIM_Server");
					}
					context.setContextType("GIM_Database", "id_String");
					if (context.getStringValue("GIM_Database") == null) {
						context.GIM_Database = null;
					} else {
						context.GIM_Database = (String) context.getProperty("GIM_Database");
					}
					context.setContextType("GIM_Port", "id_String");
					if (context.getStringValue("GIM_Port") == null) {
						context.GIM_Port = null;
					} else {
						context.GIM_Port = (String) context.getProperty("GIM_Port");
					}
					context.setContextType("GIM_Login", "id_String");
					if (context.getStringValue("GIM_Login") == null) {
						context.GIM_Login = null;
					} else {
						context.GIM_Login = (String) context.getProperty("GIM_Login");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("SUS_Login")) {
				context.SUS_Login = (String) parentContextMap.get("SUS_Login");
			}
			if (parentContextMap.containsKey("SUS_Password")) {
				context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
			}
			if (parentContextMap.containsKey("SUS_Database")) {
				context.SUS_Database = (String) parentContextMap.get("SUS_Database");
			}
			if (parentContextMap.containsKey("SUS_Server")) {
				context.SUS_Server = (String) parentContextMap.get("SUS_Server");
			}
			if (parentContextMap.containsKey("SUS_Additional_Params")) {
				context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
			}
			if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
				context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
			}
			if (parentContextMap.containsKey("GIM_AdditionalParams")) {
				context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
			}
			if (parentContextMap.containsKey("GIM_Password")) {
				context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
			}
			if (parentContextMap.containsKey("GIM_Server")) {
				context.GIM_Server = (String) parentContextMap.get("GIM_Server");
			}
			if (parentContextMap.containsKey("GIM_Database")) {
				context.GIM_Database = (String) parentContextMap.get("GIM_Database");
			}
			if (parentContextMap.containsKey("GIM_Port")) {
				context.GIM_Port = (String) parentContextMap.get("GIM_Port");
			}
			if (parentContextMap.containsKey("GIM_Login")) {
				context.GIM_Login = (String) parentContextMap.get("GIM_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SUS_Password");
		parametersToEncrypt.add("GIM_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Vendor_Ship_From_Inbound");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 208728 characters generated by Talend Open Studio for Data Integration on the
 * July 25, 2022 at 3:29:01 PM IST
 ************************************************************************************************/