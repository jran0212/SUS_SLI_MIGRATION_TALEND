// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sus_sli_etl.order_process_header_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.CharSetHandling;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: Order_Process_Header_Inbound Purpose: Migrating Data from OPNJB6PF to
 * Order Process Header<br>
 * Description: Migrating Data from OPNJB6PF to Order Process Header <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Order_Process_Header_Inbound implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (SUS_Login != null) {

				this.setProperty("SUS_Login", SUS_Login.toString());

			}

			if (SUS_Password != null) {

				this.setProperty("SUS_Password", SUS_Password.toString());

			}

			if (SUS_Database != null) {

				this.setProperty("SUS_Database", SUS_Database.toString());

			}

			if (SUS_Server != null) {

				this.setProperty("SUS_Server", SUS_Server.toString());

			}

			if (SUS_Additional_Params != null) {

				this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());

			}

			if (GIM_Schema_Migrating_Test != null) {

				this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());

			}

			if (GIM_AdditionalParams != null) {

				this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());

			}

			if (GIM_Password != null) {

				this.setProperty("GIM_Password", GIM_Password.toString());

			}

			if (GIM_Server != null) {

				this.setProperty("GIM_Server", GIM_Server.toString());

			}

			if (GIM_Database != null) {

				this.setProperty("GIM_Database", GIM_Database.toString());

			}

			if (GIM_Port != null) {

				this.setProperty("GIM_Port", GIM_Port.toString());

			}

			if (GIM_Login != null) {

				this.setProperty("GIM_Login", GIM_Login.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String SUS_Login;

		public String getSUS_Login() {
			return this.SUS_Login;
		}

		public java.lang.String SUS_Password;

		public java.lang.String getSUS_Password() {
			return this.SUS_Password;
		}

		public String SUS_Database;

		public String getSUS_Database() {
			return this.SUS_Database;
		}

		public String SUS_Server;

		public String getSUS_Server() {
			return this.SUS_Server;
		}

		public String SUS_Additional_Params;

		public String getSUS_Additional_Params() {
			return this.SUS_Additional_Params;
		}

		public String GIM_Schema_Migrating_Test;

		public String getGIM_Schema_Migrating_Test() {
			return this.GIM_Schema_Migrating_Test;
		}

		public String GIM_AdditionalParams;

		public String getGIM_AdditionalParams() {
			return this.GIM_AdditionalParams;
		}

		public java.lang.String GIM_Password;

		public java.lang.String getGIM_Password() {
			return this.GIM_Password;
		}

		public String GIM_Server;

		public String getGIM_Server() {
			return this.GIM_Server;
		}

		public String GIM_Database;

		public String getGIM_Database() {
			return this.GIM_Database;
		}

		public String GIM_Port;

		public String getGIM_Port() {
			return this.GIM_Port;
		}

		public String GIM_Login;

		public String getGIM_Login() {
			return this.GIM_Login;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Order_Process_Header_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Order_Process_Header_Inbound.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Order_Process_Header_Inbound.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public BigDecimal ORDER_NO;

		public BigDecimal getORDER_NO() {
			return this.ORDER_NO;
		}

		public String ORDER_TYPE;

		public String getORDER_TYPE() {
			return this.ORDER_TYPE;
		}

		public String SHIP_TO_CUST;

		public String getSHIP_TO_CUST() {
			return this.SHIP_TO_CUST;
		}

		public String SHIPPING_ADDRESS_ID;

		public String getSHIPPING_ADDRESS_ID() {
			return this.SHIPPING_ADDRESS_ID;
		}

		public String NATIONAL_ACCOUNT_NO;

		public String getNATIONAL_ACCOUNT_NO() {
			return this.NATIONAL_ACCOUNT_NO;
		}

		public String PURCHASE_ORDER_NO;

		public String getPURCHASE_ORDER_NO() {
			return this.PURCHASE_ORDER_NO;
		}

		public String CUSTOMER_CATEGORY_CODE;

		public String getCUSTOMER_CATEGORY_CODE() {
			return this.CUSTOMER_CATEGORY_CODE;
		}

		public BigDecimal ROUTING_GROUP_CODE;

		public BigDecimal getROUTING_GROUP_CODE() {
			return this.ROUTING_GROUP_CODE;
		}

		public String ALLOCATION_TYPE;

		public String getALLOCATION_TYPE() {
			return this.ALLOCATION_TYPE;
		}

		public String ROUTE_TO_NO;

		public String getROUTE_TO_NO() {
			return this.ROUTE_TO_NO;
		}

		public String ROUTE_NO;

		public String getROUTE_NO() {
			return this.ROUTE_NO;
		}

		public String WILL_CALL_NAME;

		public String getWILL_CALL_NAME() {
			return this.WILL_CALL_NAME;
		}

		public BigDecimal WILL_CALL_START_TIME;

		public BigDecimal getWILL_CALL_START_TIME() {
			return this.WILL_CALL_START_TIME;
		}

		public String SEPARATE_INVOICE;

		public String getSEPARATE_INVOICE() {
			return this.SEPARATE_INVOICE;
		}

		public java.util.Date ORDER_DATE;

		public java.util.Date getORDER_DATE() {
			return this.ORDER_DATE;
		}

		public java.util.Date SHIP_OR_PICKUP_DATE;

		public java.util.Date getSHIP_OR_PICKUP_DATE() {
			return this.SHIP_OR_PICKUP_DATE;
		}

		public String NEXT_ORDER_INDICATOR;

		public String getNEXT_ORDER_INDICATOR() {
			return this.NEXT_ORDER_INDICATOR;
		}

		public String CONFIRMATION_NO;

		public String getCONFIRMATION_NO() {
			return this.CONFIRMATION_NO;
		}

		public String ORDER_CONFIRMATION_PRINTED_FLAG;

		public String getORDER_CONFIRMATION_PRINTED_FLAG() {
			return this.ORDER_CONFIRMATION_PRINTED_FLAG;
		}

		public String ORDER_STATUS_CODE;

		public String getORDER_STATUS_CODE() {
			return this.ORDER_STATUS_CODE;
		}

		public BigDecimal TOTAL_FREEZER_CASES;

		public BigDecimal getTOTAL_FREEZER_CASES() {
			return this.TOTAL_FREEZER_CASES;
		}

		public BigDecimal TOTAL_FREEZER_SPLITS;

		public BigDecimal getTOTAL_FREEZER_SPLITS() {
			return this.TOTAL_FREEZER_SPLITS;
		}

		public BigDecimal TOTAL_COOLER_CASES;

		public BigDecimal getTOTAL_COOLER_CASES() {
			return this.TOTAL_COOLER_CASES;
		}

		public BigDecimal TOTAL_COOLER_SPLITS;

		public BigDecimal getTOTAL_COOLER_SPLITS() {
			return this.TOTAL_COOLER_SPLITS;
		}

		public BigDecimal TOTAL_DRY_CASES;

		public BigDecimal getTOTAL_DRY_CASES() {
			return this.TOTAL_DRY_CASES;
		}

		public BigDecimal TOTAL_DRY_SPLITS;

		public BigDecimal getTOTAL_DRY_SPLITS() {
			return this.TOTAL_DRY_SPLITS;
		}

		public BigDecimal TOTAL_NO_CASES_ORDER;

		public BigDecimal getTOTAL_NO_CASES_ORDER() {
			return this.TOTAL_NO_CASES_ORDER;
		}

		public BigDecimal TOTAL_NO_SPLITS_ORDER;

		public BigDecimal getTOTAL_NO_SPLITS_ORDER() {
			return this.TOTAL_NO_SPLITS_ORDER;
		}

		public BigDecimal TOTAL_ORDER_WEIGHT;

		public BigDecimal getTOTAL_ORDER_WEIGHT() {
			return this.TOTAL_ORDER_WEIGHT;
		}

		public BigDecimal TOTAL_CUBE;

		public BigDecimal getTOTAL_CUBE() {
			return this.TOTAL_CUBE;
		}

		public BigDecimal TOTAL_LINES;

		public BigDecimal getTOTAL_LINES() {
			return this.TOTAL_LINES;
		}

		public BigDecimal ORDER_TOTAL;

		public BigDecimal getORDER_TOTAL() {
			return this.ORDER_TOTAL;
		}

		public BigDecimal ORDER_GRAND_TOTAL;

		public BigDecimal getORDER_GRAND_TOTAL() {
			return this.ORDER_GRAND_TOTAL;
		}

		public BigDecimal ORDER_ENTRY_TIME;

		public BigDecimal getORDER_ENTRY_TIME() {
			return this.ORDER_ENTRY_TIME;
		}

		public String RECORD_TYPE_INDICATOR;

		public String getRECORD_TYPE_INDICATOR() {
			return this.RECORD_TYPE_INDICATOR;
		}

		public String DELIVERY_METHOD;

		public String getDELIVERY_METHOD() {
			return this.DELIVERY_METHOD;
		}

		public BigDecimal MANIFEST_NO;

		public BigDecimal getMANIFEST_NO() {
			return this.MANIFEST_NO;
		}

		public String IMMEDIATE_ORDER_FLAG;

		public String getIMMEDIATE_ORDER_FLAG() {
			return this.IMMEDIATE_ORDER_FLAG;
		}

		public BigDecimal BOOKING_ID;

		public BigDecimal getBOOKING_ID() {
			return this.BOOKING_ID;
		}

		public String INCOMPLETE_ORDER_FLAG;

		public String getINCOMPLETE_ORDER_FLAG() {
			return this.INCOMPLETE_ORDER_FLAG;
		}

		public String FOODSHOW_PROMOTION_ID;

		public String getFOODSHOW_PROMOTION_ID() {
			return this.FOODSHOW_PROMOTION_ID;
		}

		public java.util.Date LAPTOP_ORDER_DATE;

		public java.util.Date getLAPTOP_ORDER_DATE() {
			return this.LAPTOP_ORDER_DATE;
		}

		public String ACCOUNT_NO;

		public String getACCOUNT_NO() {
			return this.ACCOUNT_NO;
		}

		public String USER_FIELD_1;

		public String getUSER_FIELD_1() {
			return this.USER_FIELD_1;
		}

		public java.util.Date DELIVERY_DATE;

		public java.util.Date getDELIVERY_DATE() {
			return this.DELIVERY_DATE;
		}

		public String EMPLOYEE_NO;

		public String getEMPLOYEE_NO() {
			return this.EMPLOYEE_NO;
		}

		public String RESHIP_STATUS;

		public String getRESHIP_STATUS() {
			return this.RESHIP_STATUS;
		}

		public String HOLD_ORDER_FLAG;

		public String getHOLD_ORDER_FLAG() {
			return this.HOLD_ORDER_FLAG;
		}

		public String RELEASE_ORDER_FLAG;

		public String getRELEASE_ORDER_FLAG() {
			return this.RELEASE_ORDER_FLAG;
		}

		public String HOLD_ORDER_REASON_CODE;

		public String getHOLD_ORDER_REASON_CODE() {
			return this.HOLD_ORDER_REASON_CODE;
		}

		public String RELEASE_ORDER_REASON_CODE;

		public String getRELEASE_ORDER_REASON_CODE() {
			return this.RELEASE_ORDER_REASON_CODE;
		}

		public BigDecimal TAX_AMOUNT;

		public BigDecimal getTAX_AMOUNT() {
			return this.TAX_AMOUNT;
		}

		public String SEND_IMMEDIATE_ORDER_ROUTING;

		public String getSEND_IMMEDIATE_ORDER_ROUTING() {
			return this.SEND_IMMEDIATE_ORDER_ROUTING;
		}

		public String REMOTE_ORDER_ENTRY_MODE;

		public String getREMOTE_ORDER_ENTRY_MODE() {
			return this.REMOTE_ORDER_ENTRY_MODE;
		}

		public BigDecimal REMOTE_ORDER_CONFIRMATION_NO;

		public BigDecimal getREMOTE_ORDER_CONFIRMATION_NO() {
			return this.REMOTE_ORDER_CONFIRMATION_NO;
		}

		public String FAX_NO;

		public String getFAX_NO() {
			return this.FAX_NO;
		}

		public String PRIMARY_MA;

		public String getPRIMARY_MA() {
			return this.PRIMARY_MA;
		}

		public BigDecimal GENERIC_LAST_USED_NO;

		public BigDecimal getGENERIC_LAST_USED_NO() {
			return this.GENERIC_LAST_USED_NO;
		}

		public BigDecimal CALL_END_TIME;

		public BigDecimal getCALL_END_TIME() {
			return this.CALL_END_TIME;
		}

		public String CALL_START_TIME_INDICATOR;

		public String getCALL_START_TIME_INDICATOR() {
			return this.CALL_START_TIME_INDICATOR;
		}

		public String CALL_END_TIME_INDICATOR;

		public String getCALL_END_TIME_INDICATOR() {
			return this.CALL_END_TIME_INDICATOR;
		}

		public String RECORD_LOGICALLY_LOCKED_FLAG;

		public String getRECORD_LOGICALLY_LOCKED_FLAG() {
			return this.RECORD_LOGICALLY_LOCKED_FLAG;
		}

		public String ERROR_STATUS_FLAG;

		public String getERROR_STATUS_FLAG() {
			return this.ERROR_STATUS_FLAG;
		}

		public String REQUEST_STATUS_FLAG;

		public String getREQUEST_STATUS_FLAG() {
			return this.REQUEST_STATUS_FLAG;
		}

		public BigDecimal ORDER_DETAIL_LINE_NO;

		public BigDecimal getORDER_DETAIL_LINE_NO() {
			return this.ORDER_DETAIL_LINE_NO;
		}

		public String ENTITY_ID;

		public String getENTITY_ID() {
			return this.ENTITY_ID;
		}

		public String PARENT_ENTITY_1;

		public String getPARENT_ENTITY_1() {
			return this.PARENT_ENTITY_1;
		}

		public String PARENT_ENTITY_2;

		public String getPARENT_ENTITY_2() {
			return this.PARENT_ENTITY_2;
		}

		public String PARENT_ENTITY_3;

		public String getPARENT_ENTITY_3() {
			return this.PARENT_ENTITY_3;
		}

		public java.util.Date CANCEL_DATE;

		public java.util.Date getCANCEL_DATE() {
			return this.CANCEL_DATE;
		}

		public BigDecimal SERVICE_ORDER_NO;

		public BigDecimal getSERVICE_ORDER_NO() {
			return this.SERVICE_ORDER_NO;
		}

		public String CREATE_TARGET_INDICATOR;

		public String getCREATE_TARGET_INDICATOR() {
			return this.CREATE_TARGET_INDICATOR;
		}

		public String VENDOR_APPROVAL_NO;

		public String getVENDOR_APPROVAL_NO() {
			return this.VENDOR_APPROVAL_NO;
		}

		public String REQUESTED_BY;

		public String getREQUESTED_BY() {
			return this.REQUESTED_BY;
		}

		public String TARGET_DESC;

		public String getTARGET_DESC() {
			return this.TARGET_DESC;
		}

		public String BILL_BACK_VENDOR_FLAG;

		public String getBILL_BACK_VENDOR_FLAG() {
			return this.BILL_BACK_VENDOR_FLAG;
		}

		public BigDecimal NO_OF_AP_ROLL_DAYS;

		public BigDecimal getNO_OF_AP_ROLL_DAYS() {
			return this.NO_OF_AP_ROLL_DAYS;
		}

		public String RETURN_AUTH_NO;

		public String getRETURN_AUTH_NO() {
			return this.RETURN_AUTH_NO;
		}

		public String DISPENSER_EQUIPMENT_ITEM;

		public String getDISPENSER_EQUIPMENT_ITEM() {
			return this.DISPENSER_EQUIPMENT_ITEM;
		}

		public String LAPTOP_USER_FLAG;

		public String getLAPTOP_USER_FLAG() {
			return this.LAPTOP_USER_FLAG;
		}

		public BigDecimal LAPTOP_ORDER_NO;

		public BigDecimal getLAPTOP_ORDER_NO() {
			return this.LAPTOP_ORDER_NO;
		}

		public String LAPTOP_ZID_NO;

		public String getLAPTOP_ZID_NO() {
			return this.LAPTOP_ZID_NO;
		}

		public BigDecimal STOP_NO;

		public BigDecimal getSTOP_NO() {
			return this.STOP_NO;
		}

		public String ENTITY_UPDATED_FLAG;

		public String getENTITY_UPDATED_FLAG() {
			return this.ENTITY_UPDATED_FLAG;
		}

		public String MAJOR_CLASS;

		public String getMAJOR_CLASS() {
			return this.MAJOR_CLASS;
		}

		public String SWMS_RECOVERY_INVOICE_NO;

		public String getSWMS_RECOVERY_INVOICE_NO() {
			return this.SWMS_RECOVERY_INVOICE_NO;
		}

		public String DEFAULT_ROUTE_NO;

		public String getDEFAULT_ROUTE_NO() {
			return this.DEFAULT_ROUTE_NO;
		}

		public BigDecimal CONFIRM_NO;

		public BigDecimal getCONFIRM_NO() {
			return this.CONFIRM_NO;
		}

		public String CONTAINER_GROUP_ID;

		public String getCONTAINER_GROUP_ID() {
			return this.CONTAINER_GROUP_ID;
		}

		public String SEPARATE_CONTAINER_FLAG;

		public String getSEPARATE_CONTAINER_FLAG() {
			return this.SEPARATE_CONTAINER_FLAG;
		}

		public java.util.Date CREATED_TIMESTAMP;

		public java.util.Date getCREATED_TIMESTAMP() {
			return this.CREATED_TIMESTAMP;
		}

		public String CREATED_USER_ID;

		public String getCREATED_USER_ID() {
			return this.CREATED_USER_ID;
		}

		public java.util.Date UPDATED_TIMESTAMP;

		public java.util.Date getUPDATED_TIMESTAMP() {
			return this.UPDATED_TIMESTAMP;
		}

		public String UPDATED_USER_ID;

		public String getUPDATED_USER_ID() {
			return this.UPDATED_USER_ID;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());

				result = prime * result + ((this.ORDER_NO == null) ? 0 : this.ORDER_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.SITE_ID == null) {
				if (other.SITE_ID != null)
					return false;

			} else if (!this.SITE_ID.equals(other.SITE_ID))

				return false;

			if (this.ORDER_NO == null) {
				if (other.ORDER_NO != null)
					return false;

			} else if (!this.ORDER_NO.equals(other.ORDER_NO))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.SITE_ID = this.SITE_ID;
			other.ORDER_NO = this.ORDER_NO;
			other.ORDER_TYPE = this.ORDER_TYPE;
			other.SHIP_TO_CUST = this.SHIP_TO_CUST;
			other.SHIPPING_ADDRESS_ID = this.SHIPPING_ADDRESS_ID;
			other.NATIONAL_ACCOUNT_NO = this.NATIONAL_ACCOUNT_NO;
			other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
			other.CUSTOMER_CATEGORY_CODE = this.CUSTOMER_CATEGORY_CODE;
			other.ROUTING_GROUP_CODE = this.ROUTING_GROUP_CODE;
			other.ALLOCATION_TYPE = this.ALLOCATION_TYPE;
			other.ROUTE_TO_NO = this.ROUTE_TO_NO;
			other.ROUTE_NO = this.ROUTE_NO;
			other.WILL_CALL_NAME = this.WILL_CALL_NAME;
			other.WILL_CALL_START_TIME = this.WILL_CALL_START_TIME;
			other.SEPARATE_INVOICE = this.SEPARATE_INVOICE;
			other.ORDER_DATE = this.ORDER_DATE;
			other.SHIP_OR_PICKUP_DATE = this.SHIP_OR_PICKUP_DATE;
			other.NEXT_ORDER_INDICATOR = this.NEXT_ORDER_INDICATOR;
			other.CONFIRMATION_NO = this.CONFIRMATION_NO;
			other.ORDER_CONFIRMATION_PRINTED_FLAG = this.ORDER_CONFIRMATION_PRINTED_FLAG;
			other.ORDER_STATUS_CODE = this.ORDER_STATUS_CODE;
			other.TOTAL_FREEZER_CASES = this.TOTAL_FREEZER_CASES;
			other.TOTAL_FREEZER_SPLITS = this.TOTAL_FREEZER_SPLITS;
			other.TOTAL_COOLER_CASES = this.TOTAL_COOLER_CASES;
			other.TOTAL_COOLER_SPLITS = this.TOTAL_COOLER_SPLITS;
			other.TOTAL_DRY_CASES = this.TOTAL_DRY_CASES;
			other.TOTAL_DRY_SPLITS = this.TOTAL_DRY_SPLITS;
			other.TOTAL_NO_CASES_ORDER = this.TOTAL_NO_CASES_ORDER;
			other.TOTAL_NO_SPLITS_ORDER = this.TOTAL_NO_SPLITS_ORDER;
			other.TOTAL_ORDER_WEIGHT = this.TOTAL_ORDER_WEIGHT;
			other.TOTAL_CUBE = this.TOTAL_CUBE;
			other.TOTAL_LINES = this.TOTAL_LINES;
			other.ORDER_TOTAL = this.ORDER_TOTAL;
			other.ORDER_GRAND_TOTAL = this.ORDER_GRAND_TOTAL;
			other.ORDER_ENTRY_TIME = this.ORDER_ENTRY_TIME;
			other.RECORD_TYPE_INDICATOR = this.RECORD_TYPE_INDICATOR;
			other.DELIVERY_METHOD = this.DELIVERY_METHOD;
			other.MANIFEST_NO = this.MANIFEST_NO;
			other.IMMEDIATE_ORDER_FLAG = this.IMMEDIATE_ORDER_FLAG;
			other.BOOKING_ID = this.BOOKING_ID;
			other.INCOMPLETE_ORDER_FLAG = this.INCOMPLETE_ORDER_FLAG;
			other.FOODSHOW_PROMOTION_ID = this.FOODSHOW_PROMOTION_ID;
			other.LAPTOP_ORDER_DATE = this.LAPTOP_ORDER_DATE;
			other.ACCOUNT_NO = this.ACCOUNT_NO;
			other.USER_FIELD_1 = this.USER_FIELD_1;
			other.DELIVERY_DATE = this.DELIVERY_DATE;
			other.EMPLOYEE_NO = this.EMPLOYEE_NO;
			other.RESHIP_STATUS = this.RESHIP_STATUS;
			other.HOLD_ORDER_FLAG = this.HOLD_ORDER_FLAG;
			other.RELEASE_ORDER_FLAG = this.RELEASE_ORDER_FLAG;
			other.HOLD_ORDER_REASON_CODE = this.HOLD_ORDER_REASON_CODE;
			other.RELEASE_ORDER_REASON_CODE = this.RELEASE_ORDER_REASON_CODE;
			other.TAX_AMOUNT = this.TAX_AMOUNT;
			other.SEND_IMMEDIATE_ORDER_ROUTING = this.SEND_IMMEDIATE_ORDER_ROUTING;
			other.REMOTE_ORDER_ENTRY_MODE = this.REMOTE_ORDER_ENTRY_MODE;
			other.REMOTE_ORDER_CONFIRMATION_NO = this.REMOTE_ORDER_CONFIRMATION_NO;
			other.FAX_NO = this.FAX_NO;
			other.PRIMARY_MA = this.PRIMARY_MA;
			other.GENERIC_LAST_USED_NO = this.GENERIC_LAST_USED_NO;
			other.CALL_END_TIME = this.CALL_END_TIME;
			other.CALL_START_TIME_INDICATOR = this.CALL_START_TIME_INDICATOR;
			other.CALL_END_TIME_INDICATOR = this.CALL_END_TIME_INDICATOR;
			other.RECORD_LOGICALLY_LOCKED_FLAG = this.RECORD_LOGICALLY_LOCKED_FLAG;
			other.ERROR_STATUS_FLAG = this.ERROR_STATUS_FLAG;
			other.REQUEST_STATUS_FLAG = this.REQUEST_STATUS_FLAG;
			other.ORDER_DETAIL_LINE_NO = this.ORDER_DETAIL_LINE_NO;
			other.ENTITY_ID = this.ENTITY_ID;
			other.PARENT_ENTITY_1 = this.PARENT_ENTITY_1;
			other.PARENT_ENTITY_2 = this.PARENT_ENTITY_2;
			other.PARENT_ENTITY_3 = this.PARENT_ENTITY_3;
			other.CANCEL_DATE = this.CANCEL_DATE;
			other.SERVICE_ORDER_NO = this.SERVICE_ORDER_NO;
			other.CREATE_TARGET_INDICATOR = this.CREATE_TARGET_INDICATOR;
			other.VENDOR_APPROVAL_NO = this.VENDOR_APPROVAL_NO;
			other.REQUESTED_BY = this.REQUESTED_BY;
			other.TARGET_DESC = this.TARGET_DESC;
			other.BILL_BACK_VENDOR_FLAG = this.BILL_BACK_VENDOR_FLAG;
			other.NO_OF_AP_ROLL_DAYS = this.NO_OF_AP_ROLL_DAYS;
			other.RETURN_AUTH_NO = this.RETURN_AUTH_NO;
			other.DISPENSER_EQUIPMENT_ITEM = this.DISPENSER_EQUIPMENT_ITEM;
			other.LAPTOP_USER_FLAG = this.LAPTOP_USER_FLAG;
			other.LAPTOP_ORDER_NO = this.LAPTOP_ORDER_NO;
			other.LAPTOP_ZID_NO = this.LAPTOP_ZID_NO;
			other.STOP_NO = this.STOP_NO;
			other.ENTITY_UPDATED_FLAG = this.ENTITY_UPDATED_FLAG;
			other.MAJOR_CLASS = this.MAJOR_CLASS;
			other.SWMS_RECOVERY_INVOICE_NO = this.SWMS_RECOVERY_INVOICE_NO;
			other.DEFAULT_ROUTE_NO = this.DEFAULT_ROUTE_NO;
			other.CONFIRM_NO = this.CONFIRM_NO;
			other.CONTAINER_GROUP_ID = this.CONTAINER_GROUP_ID;
			other.SEPARATE_CONTAINER_FLAG = this.SEPARATE_CONTAINER_FLAG;
			other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
			other.CREATED_USER_ID = this.CREATED_USER_ID;
			other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
			other.UPDATED_USER_ID = this.UPDATED_USER_ID;
			other.IS_DELETED = this.IS_DELETED;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.SITE_ID = this.SITE_ID;
			other.ORDER_NO = this.ORDER_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ORDER_NO = (BigDecimal) dis.readObject();

					this.ORDER_TYPE = readString(dis);

					this.SHIP_TO_CUST = readString(dis);

					this.SHIPPING_ADDRESS_ID = readString(dis);

					this.NATIONAL_ACCOUNT_NO = readString(dis);

					this.PURCHASE_ORDER_NO = readString(dis);

					this.CUSTOMER_CATEGORY_CODE = readString(dis);

					this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();

					this.ALLOCATION_TYPE = readString(dis);

					this.ROUTE_TO_NO = readString(dis);

					this.ROUTE_NO = readString(dis);

					this.WILL_CALL_NAME = readString(dis);

					this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();

					this.SEPARATE_INVOICE = readString(dis);

					this.ORDER_DATE = readDate(dis);

					this.SHIP_OR_PICKUP_DATE = readDate(dis);

					this.NEXT_ORDER_INDICATOR = readString(dis);

					this.CONFIRMATION_NO = readString(dis);

					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);

					this.ORDER_STATUS_CODE = readString(dis);

					this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();

					this.TOTAL_CUBE = (BigDecimal) dis.readObject();

					this.TOTAL_LINES = (BigDecimal) dis.readObject();

					this.ORDER_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();

					this.RECORD_TYPE_INDICATOR = readString(dis);

					this.DELIVERY_METHOD = readString(dis);

					this.MANIFEST_NO = (BigDecimal) dis.readObject();

					this.IMMEDIATE_ORDER_FLAG = readString(dis);

					this.BOOKING_ID = (BigDecimal) dis.readObject();

					this.INCOMPLETE_ORDER_FLAG = readString(dis);

					this.FOODSHOW_PROMOTION_ID = readString(dis);

					this.LAPTOP_ORDER_DATE = readDate(dis);

					this.ACCOUNT_NO = readString(dis);

					this.USER_FIELD_1 = readString(dis);

					this.DELIVERY_DATE = readDate(dis);

					this.EMPLOYEE_NO = readString(dis);

					this.RESHIP_STATUS = readString(dis);

					this.HOLD_ORDER_FLAG = readString(dis);

					this.RELEASE_ORDER_FLAG = readString(dis);

					this.HOLD_ORDER_REASON_CODE = readString(dis);

					this.RELEASE_ORDER_REASON_CODE = readString(dis);

					this.TAX_AMOUNT = (BigDecimal) dis.readObject();

					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);

					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);

					this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();

					this.FAX_NO = readString(dis);

					this.PRIMARY_MA = readString(dis);

					this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();

					this.CALL_END_TIME = (BigDecimal) dis.readObject();

					this.CALL_START_TIME_INDICATOR = readString(dis);

					this.CALL_END_TIME_INDICATOR = readString(dis);

					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);

					this.ERROR_STATUS_FLAG = readString(dis);

					this.REQUEST_STATUS_FLAG = readString(dis);

					this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();

					this.ENTITY_ID = readString(dis);

					this.PARENT_ENTITY_1 = readString(dis);

					this.PARENT_ENTITY_2 = readString(dis);

					this.PARENT_ENTITY_3 = readString(dis);

					this.CANCEL_DATE = readDate(dis);

					this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();

					this.CREATE_TARGET_INDICATOR = readString(dis);

					this.VENDOR_APPROVAL_NO = readString(dis);

					this.REQUESTED_BY = readString(dis);

					this.TARGET_DESC = readString(dis);

					this.BILL_BACK_VENDOR_FLAG = readString(dis);

					this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();

					this.RETURN_AUTH_NO = readString(dis);

					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);

					this.LAPTOP_USER_FLAG = readString(dis);

					this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();

					this.LAPTOP_ZID_NO = readString(dis);

					this.STOP_NO = (BigDecimal) dis.readObject();

					this.ENTITY_UPDATED_FLAG = readString(dis);

					this.MAJOR_CLASS = readString(dis);

					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);

					this.DEFAULT_ROUTE_NO = readString(dis);

					this.CONFIRM_NO = (BigDecimal) dis.readObject();

					this.CONTAINER_GROUP_ID = readString(dis);

					this.SEPARATE_CONTAINER_FLAG = readString(dis);

					this.CREATED_TIMESTAMP = readDate(dis);

					this.CREATED_USER_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readDate(dis);

					this.UPDATED_USER_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ORDER_NO = (BigDecimal) dis.readObject();

					this.ORDER_TYPE = readString(dis);

					this.SHIP_TO_CUST = readString(dis);

					this.SHIPPING_ADDRESS_ID = readString(dis);

					this.NATIONAL_ACCOUNT_NO = readString(dis);

					this.PURCHASE_ORDER_NO = readString(dis);

					this.CUSTOMER_CATEGORY_CODE = readString(dis);

					this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();

					this.ALLOCATION_TYPE = readString(dis);

					this.ROUTE_TO_NO = readString(dis);

					this.ROUTE_NO = readString(dis);

					this.WILL_CALL_NAME = readString(dis);

					this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();

					this.SEPARATE_INVOICE = readString(dis);

					this.ORDER_DATE = readDate(dis);

					this.SHIP_OR_PICKUP_DATE = readDate(dis);

					this.NEXT_ORDER_INDICATOR = readString(dis);

					this.CONFIRMATION_NO = readString(dis);

					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);

					this.ORDER_STATUS_CODE = readString(dis);

					this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();

					this.TOTAL_CUBE = (BigDecimal) dis.readObject();

					this.TOTAL_LINES = (BigDecimal) dis.readObject();

					this.ORDER_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();

					this.RECORD_TYPE_INDICATOR = readString(dis);

					this.DELIVERY_METHOD = readString(dis);

					this.MANIFEST_NO = (BigDecimal) dis.readObject();

					this.IMMEDIATE_ORDER_FLAG = readString(dis);

					this.BOOKING_ID = (BigDecimal) dis.readObject();

					this.INCOMPLETE_ORDER_FLAG = readString(dis);

					this.FOODSHOW_PROMOTION_ID = readString(dis);

					this.LAPTOP_ORDER_DATE = readDate(dis);

					this.ACCOUNT_NO = readString(dis);

					this.USER_FIELD_1 = readString(dis);

					this.DELIVERY_DATE = readDate(dis);

					this.EMPLOYEE_NO = readString(dis);

					this.RESHIP_STATUS = readString(dis);

					this.HOLD_ORDER_FLAG = readString(dis);

					this.RELEASE_ORDER_FLAG = readString(dis);

					this.HOLD_ORDER_REASON_CODE = readString(dis);

					this.RELEASE_ORDER_REASON_CODE = readString(dis);

					this.TAX_AMOUNT = (BigDecimal) dis.readObject();

					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);

					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);

					this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();

					this.FAX_NO = readString(dis);

					this.PRIMARY_MA = readString(dis);

					this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();

					this.CALL_END_TIME = (BigDecimal) dis.readObject();

					this.CALL_START_TIME_INDICATOR = readString(dis);

					this.CALL_END_TIME_INDICATOR = readString(dis);

					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);

					this.ERROR_STATUS_FLAG = readString(dis);

					this.REQUEST_STATUS_FLAG = readString(dis);

					this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();

					this.ENTITY_ID = readString(dis);

					this.PARENT_ENTITY_1 = readString(dis);

					this.PARENT_ENTITY_2 = readString(dis);

					this.PARENT_ENTITY_3 = readString(dis);

					this.CANCEL_DATE = readDate(dis);

					this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();

					this.CREATE_TARGET_INDICATOR = readString(dis);

					this.VENDOR_APPROVAL_NO = readString(dis);

					this.REQUESTED_BY = readString(dis);

					this.TARGET_DESC = readString(dis);

					this.BILL_BACK_VENDOR_FLAG = readString(dis);

					this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();

					this.RETURN_AUTH_NO = readString(dis);

					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);

					this.LAPTOP_USER_FLAG = readString(dis);

					this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();

					this.LAPTOP_ZID_NO = readString(dis);

					this.STOP_NO = (BigDecimal) dis.readObject();

					this.ENTITY_UPDATED_FLAG = readString(dis);

					this.MAJOR_CLASS = readString(dis);

					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);

					this.DEFAULT_ROUTE_NO = readString(dis);

					this.CONFIRM_NO = (BigDecimal) dis.readObject();

					this.CONTAINER_GROUP_ID = readString(dis);

					this.SEPARATE_CONTAINER_FLAG = readString(dis);

					this.CREATED_TIMESTAMP = readDate(dis);

					this.CREATED_USER_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readDate(dis);

					this.UPDATED_USER_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_NO);

				// String

				writeString(this.ORDER_TYPE, dos);

				// String

				writeString(this.SHIP_TO_CUST, dos);

				// String

				writeString(this.SHIPPING_ADDRESS_ID, dos);

				// String

				writeString(this.NATIONAL_ACCOUNT_NO, dos);

				// String

				writeString(this.PURCHASE_ORDER_NO, dos);

				// String

				writeString(this.CUSTOMER_CATEGORY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.ROUTING_GROUP_CODE);

				// String

				writeString(this.ALLOCATION_TYPE, dos);

				// String

				writeString(this.ROUTE_TO_NO, dos);

				// String

				writeString(this.ROUTE_NO, dos);

				// String

				writeString(this.WILL_CALL_NAME, dos);

				// BigDecimal

				dos.writeObject(this.WILL_CALL_START_TIME);

				// String

				writeString(this.SEPARATE_INVOICE, dos);

				// java.util.Date

				writeDate(this.ORDER_DATE, dos);

				// java.util.Date

				writeDate(this.SHIP_OR_PICKUP_DATE, dos);

				// String

				writeString(this.NEXT_ORDER_INDICATOR, dos);

				// String

				writeString(this.CONFIRMATION_NO, dos);

				// String

				writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG, dos);

				// String

				writeString(this.ORDER_STATUS_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_CASES_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_ORDER_WEIGHT);

				// BigDecimal

				dos.writeObject(this.TOTAL_CUBE);

				// BigDecimal

				dos.writeObject(this.TOTAL_LINES);

				// BigDecimal

				dos.writeObject(this.ORDER_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_GRAND_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_ENTRY_TIME);

				// String

				writeString(this.RECORD_TYPE_INDICATOR, dos);

				// String

				writeString(this.DELIVERY_METHOD, dos);

				// BigDecimal

				dos.writeObject(this.MANIFEST_NO);

				// String

				writeString(this.IMMEDIATE_ORDER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.BOOKING_ID);

				// String

				writeString(this.INCOMPLETE_ORDER_FLAG, dos);

				// String

				writeString(this.FOODSHOW_PROMOTION_ID, dos);

				// java.util.Date

				writeDate(this.LAPTOP_ORDER_DATE, dos);

				// String

				writeString(this.ACCOUNT_NO, dos);

				// String

				writeString(this.USER_FIELD_1, dos);

				// java.util.Date

				writeDate(this.DELIVERY_DATE, dos);

				// String

				writeString(this.EMPLOYEE_NO, dos);

				// String

				writeString(this.RESHIP_STATUS, dos);

				// String

				writeString(this.HOLD_ORDER_FLAG, dos);

				// String

				writeString(this.RELEASE_ORDER_FLAG, dos);

				// String

				writeString(this.HOLD_ORDER_REASON_CODE, dos);

				// String

				writeString(this.RELEASE_ORDER_REASON_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TAX_AMOUNT);

				// String

				writeString(this.SEND_IMMEDIATE_ORDER_ROUTING, dos);

				// String

				writeString(this.REMOTE_ORDER_ENTRY_MODE, dos);

				// BigDecimal

				dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);

				// String

				writeString(this.FAX_NO, dos);

				// String

				writeString(this.PRIMARY_MA, dos);

				// BigDecimal

				dos.writeObject(this.GENERIC_LAST_USED_NO);

				// BigDecimal

				dos.writeObject(this.CALL_END_TIME);

				// String

				writeString(this.CALL_START_TIME_INDICATOR, dos);

				// String

				writeString(this.CALL_END_TIME_INDICATOR, dos);

				// String

				writeString(this.RECORD_LOGICALLY_LOCKED_FLAG, dos);

				// String

				writeString(this.ERROR_STATUS_FLAG, dos);

				// String

				writeString(this.REQUEST_STATUS_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_DETAIL_LINE_NO);

				// String

				writeString(this.ENTITY_ID, dos);

				// String

				writeString(this.PARENT_ENTITY_1, dos);

				// String

				writeString(this.PARENT_ENTITY_2, dos);

				// String

				writeString(this.PARENT_ENTITY_3, dos);

				// java.util.Date

				writeDate(this.CANCEL_DATE, dos);

				// BigDecimal

				dos.writeObject(this.SERVICE_ORDER_NO);

				// String

				writeString(this.CREATE_TARGET_INDICATOR, dos);

				// String

				writeString(this.VENDOR_APPROVAL_NO, dos);

				// String

				writeString(this.REQUESTED_BY, dos);

				// String

				writeString(this.TARGET_DESC, dos);

				// String

				writeString(this.BILL_BACK_VENDOR_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.NO_OF_AP_ROLL_DAYS);

				// String

				writeString(this.RETURN_AUTH_NO, dos);

				// String

				writeString(this.DISPENSER_EQUIPMENT_ITEM, dos);

				// String

				writeString(this.LAPTOP_USER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.LAPTOP_ORDER_NO);

				// String

				writeString(this.LAPTOP_ZID_NO, dos);

				// BigDecimal

				dos.writeObject(this.STOP_NO);

				// String

				writeString(this.ENTITY_UPDATED_FLAG, dos);

				// String

				writeString(this.MAJOR_CLASS, dos);

				// String

				writeString(this.SWMS_RECOVERY_INVOICE_NO, dos);

				// String

				writeString(this.DEFAULT_ROUTE_NO, dos);

				// BigDecimal

				dos.writeObject(this.CONFIRM_NO);

				// String

				writeString(this.CONTAINER_GROUP_ID, dos);

				// String

				writeString(this.SEPARATE_CONTAINER_FLAG, dos);

				// java.util.Date

				writeDate(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// java.util.Date

				writeDate(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_NO);

				// String

				writeString(this.ORDER_TYPE, dos);

				// String

				writeString(this.SHIP_TO_CUST, dos);

				// String

				writeString(this.SHIPPING_ADDRESS_ID, dos);

				// String

				writeString(this.NATIONAL_ACCOUNT_NO, dos);

				// String

				writeString(this.PURCHASE_ORDER_NO, dos);

				// String

				writeString(this.CUSTOMER_CATEGORY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.ROUTING_GROUP_CODE);

				// String

				writeString(this.ALLOCATION_TYPE, dos);

				// String

				writeString(this.ROUTE_TO_NO, dos);

				// String

				writeString(this.ROUTE_NO, dos);

				// String

				writeString(this.WILL_CALL_NAME, dos);

				// BigDecimal

				dos.writeObject(this.WILL_CALL_START_TIME);

				// String

				writeString(this.SEPARATE_INVOICE, dos);

				// java.util.Date

				writeDate(this.ORDER_DATE, dos);

				// java.util.Date

				writeDate(this.SHIP_OR_PICKUP_DATE, dos);

				// String

				writeString(this.NEXT_ORDER_INDICATOR, dos);

				// String

				writeString(this.CONFIRMATION_NO, dos);

				// String

				writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG, dos);

				// String

				writeString(this.ORDER_STATUS_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_CASES_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_ORDER_WEIGHT);

				// BigDecimal

				dos.writeObject(this.TOTAL_CUBE);

				// BigDecimal

				dos.writeObject(this.TOTAL_LINES);

				// BigDecimal

				dos.writeObject(this.ORDER_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_GRAND_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_ENTRY_TIME);

				// String

				writeString(this.RECORD_TYPE_INDICATOR, dos);

				// String

				writeString(this.DELIVERY_METHOD, dos);

				// BigDecimal

				dos.writeObject(this.MANIFEST_NO);

				// String

				writeString(this.IMMEDIATE_ORDER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.BOOKING_ID);

				// String

				writeString(this.INCOMPLETE_ORDER_FLAG, dos);

				// String

				writeString(this.FOODSHOW_PROMOTION_ID, dos);

				// java.util.Date

				writeDate(this.LAPTOP_ORDER_DATE, dos);

				// String

				writeString(this.ACCOUNT_NO, dos);

				// String

				writeString(this.USER_FIELD_1, dos);

				// java.util.Date

				writeDate(this.DELIVERY_DATE, dos);

				// String

				writeString(this.EMPLOYEE_NO, dos);

				// String

				writeString(this.RESHIP_STATUS, dos);

				// String

				writeString(this.HOLD_ORDER_FLAG, dos);

				// String

				writeString(this.RELEASE_ORDER_FLAG, dos);

				// String

				writeString(this.HOLD_ORDER_REASON_CODE, dos);

				// String

				writeString(this.RELEASE_ORDER_REASON_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TAX_AMOUNT);

				// String

				writeString(this.SEND_IMMEDIATE_ORDER_ROUTING, dos);

				// String

				writeString(this.REMOTE_ORDER_ENTRY_MODE, dos);

				// BigDecimal

				dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);

				// String

				writeString(this.FAX_NO, dos);

				// String

				writeString(this.PRIMARY_MA, dos);

				// BigDecimal

				dos.writeObject(this.GENERIC_LAST_USED_NO);

				// BigDecimal

				dos.writeObject(this.CALL_END_TIME);

				// String

				writeString(this.CALL_START_TIME_INDICATOR, dos);

				// String

				writeString(this.CALL_END_TIME_INDICATOR, dos);

				// String

				writeString(this.RECORD_LOGICALLY_LOCKED_FLAG, dos);

				// String

				writeString(this.ERROR_STATUS_FLAG, dos);

				// String

				writeString(this.REQUEST_STATUS_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_DETAIL_LINE_NO);

				// String

				writeString(this.ENTITY_ID, dos);

				// String

				writeString(this.PARENT_ENTITY_1, dos);

				// String

				writeString(this.PARENT_ENTITY_2, dos);

				// String

				writeString(this.PARENT_ENTITY_3, dos);

				// java.util.Date

				writeDate(this.CANCEL_DATE, dos);

				// BigDecimal

				dos.writeObject(this.SERVICE_ORDER_NO);

				// String

				writeString(this.CREATE_TARGET_INDICATOR, dos);

				// String

				writeString(this.VENDOR_APPROVAL_NO, dos);

				// String

				writeString(this.REQUESTED_BY, dos);

				// String

				writeString(this.TARGET_DESC, dos);

				// String

				writeString(this.BILL_BACK_VENDOR_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.NO_OF_AP_ROLL_DAYS);

				// String

				writeString(this.RETURN_AUTH_NO, dos);

				// String

				writeString(this.DISPENSER_EQUIPMENT_ITEM, dos);

				// String

				writeString(this.LAPTOP_USER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.LAPTOP_ORDER_NO);

				// String

				writeString(this.LAPTOP_ZID_NO, dos);

				// BigDecimal

				dos.writeObject(this.STOP_NO);

				// String

				writeString(this.ENTITY_UPDATED_FLAG, dos);

				// String

				writeString(this.MAJOR_CLASS, dos);

				// String

				writeString(this.SWMS_RECOVERY_INVOICE_NO, dos);

				// String

				writeString(this.DEFAULT_ROUTE_NO, dos);

				// BigDecimal

				dos.writeObject(this.CONFIRM_NO);

				// String

				writeString(this.CONTAINER_GROUP_ID, dos);

				// String

				writeString(this.SEPARATE_CONTAINER_FLAG, dos);

				// java.util.Date

				writeDate(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// java.util.Date

				writeDate(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",ORDER_NO=" + String.valueOf(ORDER_NO));
			sb.append(",ORDER_TYPE=" + ORDER_TYPE);
			sb.append(",SHIP_TO_CUST=" + SHIP_TO_CUST);
			sb.append(",SHIPPING_ADDRESS_ID=" + SHIPPING_ADDRESS_ID);
			sb.append(",NATIONAL_ACCOUNT_NO=" + NATIONAL_ACCOUNT_NO);
			sb.append(",PURCHASE_ORDER_NO=" + PURCHASE_ORDER_NO);
			sb.append(",CUSTOMER_CATEGORY_CODE=" + CUSTOMER_CATEGORY_CODE);
			sb.append(",ROUTING_GROUP_CODE=" + String.valueOf(ROUTING_GROUP_CODE));
			sb.append(",ALLOCATION_TYPE=" + ALLOCATION_TYPE);
			sb.append(",ROUTE_TO_NO=" + ROUTE_TO_NO);
			sb.append(",ROUTE_NO=" + ROUTE_NO);
			sb.append(",WILL_CALL_NAME=" + WILL_CALL_NAME);
			sb.append(",WILL_CALL_START_TIME=" + String.valueOf(WILL_CALL_START_TIME));
			sb.append(",SEPARATE_INVOICE=" + SEPARATE_INVOICE);
			sb.append(",ORDER_DATE=" + String.valueOf(ORDER_DATE));
			sb.append(",SHIP_OR_PICKUP_DATE=" + String.valueOf(SHIP_OR_PICKUP_DATE));
			sb.append(",NEXT_ORDER_INDICATOR=" + NEXT_ORDER_INDICATOR);
			sb.append(",CONFIRMATION_NO=" + CONFIRMATION_NO);
			sb.append(",ORDER_CONFIRMATION_PRINTED_FLAG=" + ORDER_CONFIRMATION_PRINTED_FLAG);
			sb.append(",ORDER_STATUS_CODE=" + ORDER_STATUS_CODE);
			sb.append(",TOTAL_FREEZER_CASES=" + String.valueOf(TOTAL_FREEZER_CASES));
			sb.append(",TOTAL_FREEZER_SPLITS=" + String.valueOf(TOTAL_FREEZER_SPLITS));
			sb.append(",TOTAL_COOLER_CASES=" + String.valueOf(TOTAL_COOLER_CASES));
			sb.append(",TOTAL_COOLER_SPLITS=" + String.valueOf(TOTAL_COOLER_SPLITS));
			sb.append(",TOTAL_DRY_CASES=" + String.valueOf(TOTAL_DRY_CASES));
			sb.append(",TOTAL_DRY_SPLITS=" + String.valueOf(TOTAL_DRY_SPLITS));
			sb.append(",TOTAL_NO_CASES_ORDER=" + String.valueOf(TOTAL_NO_CASES_ORDER));
			sb.append(",TOTAL_NO_SPLITS_ORDER=" + String.valueOf(TOTAL_NO_SPLITS_ORDER));
			sb.append(",TOTAL_ORDER_WEIGHT=" + String.valueOf(TOTAL_ORDER_WEIGHT));
			sb.append(",TOTAL_CUBE=" + String.valueOf(TOTAL_CUBE));
			sb.append(",TOTAL_LINES=" + String.valueOf(TOTAL_LINES));
			sb.append(",ORDER_TOTAL=" + String.valueOf(ORDER_TOTAL));
			sb.append(",ORDER_GRAND_TOTAL=" + String.valueOf(ORDER_GRAND_TOTAL));
			sb.append(",ORDER_ENTRY_TIME=" + String.valueOf(ORDER_ENTRY_TIME));
			sb.append(",RECORD_TYPE_INDICATOR=" + RECORD_TYPE_INDICATOR);
			sb.append(",DELIVERY_METHOD=" + DELIVERY_METHOD);
			sb.append(",MANIFEST_NO=" + String.valueOf(MANIFEST_NO));
			sb.append(",IMMEDIATE_ORDER_FLAG=" + IMMEDIATE_ORDER_FLAG);
			sb.append(",BOOKING_ID=" + String.valueOf(BOOKING_ID));
			sb.append(",INCOMPLETE_ORDER_FLAG=" + INCOMPLETE_ORDER_FLAG);
			sb.append(",FOODSHOW_PROMOTION_ID=" + FOODSHOW_PROMOTION_ID);
			sb.append(",LAPTOP_ORDER_DATE=" + String.valueOf(LAPTOP_ORDER_DATE));
			sb.append(",ACCOUNT_NO=" + ACCOUNT_NO);
			sb.append(",USER_FIELD_1=" + USER_FIELD_1);
			sb.append(",DELIVERY_DATE=" + String.valueOf(DELIVERY_DATE));
			sb.append(",EMPLOYEE_NO=" + EMPLOYEE_NO);
			sb.append(",RESHIP_STATUS=" + RESHIP_STATUS);
			sb.append(",HOLD_ORDER_FLAG=" + HOLD_ORDER_FLAG);
			sb.append(",RELEASE_ORDER_FLAG=" + RELEASE_ORDER_FLAG);
			sb.append(",HOLD_ORDER_REASON_CODE=" + HOLD_ORDER_REASON_CODE);
			sb.append(",RELEASE_ORDER_REASON_CODE=" + RELEASE_ORDER_REASON_CODE);
			sb.append(",TAX_AMOUNT=" + String.valueOf(TAX_AMOUNT));
			sb.append(",SEND_IMMEDIATE_ORDER_ROUTING=" + SEND_IMMEDIATE_ORDER_ROUTING);
			sb.append(",REMOTE_ORDER_ENTRY_MODE=" + REMOTE_ORDER_ENTRY_MODE);
			sb.append(",REMOTE_ORDER_CONFIRMATION_NO=" + String.valueOf(REMOTE_ORDER_CONFIRMATION_NO));
			sb.append(",FAX_NO=" + FAX_NO);
			sb.append(",PRIMARY_MA=" + PRIMARY_MA);
			sb.append(",GENERIC_LAST_USED_NO=" + String.valueOf(GENERIC_LAST_USED_NO));
			sb.append(",CALL_END_TIME=" + String.valueOf(CALL_END_TIME));
			sb.append(",CALL_START_TIME_INDICATOR=" + CALL_START_TIME_INDICATOR);
			sb.append(",CALL_END_TIME_INDICATOR=" + CALL_END_TIME_INDICATOR);
			sb.append(",RECORD_LOGICALLY_LOCKED_FLAG=" + RECORD_LOGICALLY_LOCKED_FLAG);
			sb.append(",ERROR_STATUS_FLAG=" + ERROR_STATUS_FLAG);
			sb.append(",REQUEST_STATUS_FLAG=" + REQUEST_STATUS_FLAG);
			sb.append(",ORDER_DETAIL_LINE_NO=" + String.valueOf(ORDER_DETAIL_LINE_NO));
			sb.append(",ENTITY_ID=" + ENTITY_ID);
			sb.append(",PARENT_ENTITY_1=" + PARENT_ENTITY_1);
			sb.append(",PARENT_ENTITY_2=" + PARENT_ENTITY_2);
			sb.append(",PARENT_ENTITY_3=" + PARENT_ENTITY_3);
			sb.append(",CANCEL_DATE=" + String.valueOf(CANCEL_DATE));
			sb.append(",SERVICE_ORDER_NO=" + String.valueOf(SERVICE_ORDER_NO));
			sb.append(",CREATE_TARGET_INDICATOR=" + CREATE_TARGET_INDICATOR);
			sb.append(",VENDOR_APPROVAL_NO=" + VENDOR_APPROVAL_NO);
			sb.append(",REQUESTED_BY=" + REQUESTED_BY);
			sb.append(",TARGET_DESC=" + TARGET_DESC);
			sb.append(",BILL_BACK_VENDOR_FLAG=" + BILL_BACK_VENDOR_FLAG);
			sb.append(",NO_OF_AP_ROLL_DAYS=" + String.valueOf(NO_OF_AP_ROLL_DAYS));
			sb.append(",RETURN_AUTH_NO=" + RETURN_AUTH_NO);
			sb.append(",DISPENSER_EQUIPMENT_ITEM=" + DISPENSER_EQUIPMENT_ITEM);
			sb.append(",LAPTOP_USER_FLAG=" + LAPTOP_USER_FLAG);
			sb.append(",LAPTOP_ORDER_NO=" + String.valueOf(LAPTOP_ORDER_NO));
			sb.append(",LAPTOP_ZID_NO=" + LAPTOP_ZID_NO);
			sb.append(",STOP_NO=" + String.valueOf(STOP_NO));
			sb.append(",ENTITY_UPDATED_FLAG=" + ENTITY_UPDATED_FLAG);
			sb.append(",MAJOR_CLASS=" + MAJOR_CLASS);
			sb.append(",SWMS_RECOVERY_INVOICE_NO=" + SWMS_RECOVERY_INVOICE_NO);
			sb.append(",DEFAULT_ROUTE_NO=" + DEFAULT_ROUTE_NO);
			sb.append(",CONFIRM_NO=" + String.valueOf(CONFIRM_NO));
			sb.append(",CONTAINER_GROUP_ID=" + CONTAINER_GROUP_ID);
			sb.append(",SEPARATE_CONTAINER_FLAG=" + SEPARATE_CONTAINER_FLAG);
			sb.append(",CREATED_TIMESTAMP=" + String.valueOf(CREATED_TIMESTAMP));
			sb.append(",CREATED_USER_ID=" + CREATED_USER_ID);
			sb.append(",UPDATED_TIMESTAMP=" + String.valueOf(UPDATED_TIMESTAMP));
			sb.append(",UPDATED_USER_ID=" + UPDATED_USER_ID);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ORDER_NO, other.ORDER_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ORDER_PROCESS_HEADERStruct
			implements routines.system.IPersistableRow<ORDER_PROCESS_HEADERStruct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public BigDecimal ORDER_NO;

		public BigDecimal getORDER_NO() {
			return this.ORDER_NO;
		}

		public String ORDER_TYPE;

		public String getORDER_TYPE() {
			return this.ORDER_TYPE;
		}

		public String SHIP_TO_CUST;

		public String getSHIP_TO_CUST() {
			return this.SHIP_TO_CUST;
		}

		public String SHIPPING_ADDRESS_ID;

		public String getSHIPPING_ADDRESS_ID() {
			return this.SHIPPING_ADDRESS_ID;
		}

		public String NATIONAL_ACCOUNT_NO;

		public String getNATIONAL_ACCOUNT_NO() {
			return this.NATIONAL_ACCOUNT_NO;
		}

		public String PURCHASE_ORDER_NO;

		public String getPURCHASE_ORDER_NO() {
			return this.PURCHASE_ORDER_NO;
		}

		public String CUSTOMER_CATEGORY_CODE;

		public String getCUSTOMER_CATEGORY_CODE() {
			return this.CUSTOMER_CATEGORY_CODE;
		}

		public BigDecimal ROUTING_GROUP_CODE;

		public BigDecimal getROUTING_GROUP_CODE() {
			return this.ROUTING_GROUP_CODE;
		}

		public String ALLOCATION_TYPE;

		public String getALLOCATION_TYPE() {
			return this.ALLOCATION_TYPE;
		}

		public String ROUTE_TO_NO;

		public String getROUTE_TO_NO() {
			return this.ROUTE_TO_NO;
		}

		public String ROUTE_NO;

		public String getROUTE_NO() {
			return this.ROUTE_NO;
		}

		public String WILL_CALL_NAME;

		public String getWILL_CALL_NAME() {
			return this.WILL_CALL_NAME;
		}

		public BigDecimal WILL_CALL_START_TIME;

		public BigDecimal getWILL_CALL_START_TIME() {
			return this.WILL_CALL_START_TIME;
		}

		public String SEPARATE_INVOICE;

		public String getSEPARATE_INVOICE() {
			return this.SEPARATE_INVOICE;
		}

		public java.util.Date ORDER_DATE;

		public java.util.Date getORDER_DATE() {
			return this.ORDER_DATE;
		}

		public java.util.Date SHIP_OR_PICKUP_DATE;

		public java.util.Date getSHIP_OR_PICKUP_DATE() {
			return this.SHIP_OR_PICKUP_DATE;
		}

		public String NEXT_ORDER_INDICATOR;

		public String getNEXT_ORDER_INDICATOR() {
			return this.NEXT_ORDER_INDICATOR;
		}

		public String CONFIRMATION_NO;

		public String getCONFIRMATION_NO() {
			return this.CONFIRMATION_NO;
		}

		public String ORDER_CONFIRMATION_PRINTED_FLAG;

		public String getORDER_CONFIRMATION_PRINTED_FLAG() {
			return this.ORDER_CONFIRMATION_PRINTED_FLAG;
		}

		public String ORDER_STATUS_CODE;

		public String getORDER_STATUS_CODE() {
			return this.ORDER_STATUS_CODE;
		}

		public BigDecimal TOTAL_FREEZER_CASES;

		public BigDecimal getTOTAL_FREEZER_CASES() {
			return this.TOTAL_FREEZER_CASES;
		}

		public BigDecimal TOTAL_FREEZER_SPLITS;

		public BigDecimal getTOTAL_FREEZER_SPLITS() {
			return this.TOTAL_FREEZER_SPLITS;
		}

		public BigDecimal TOTAL_COOLER_CASES;

		public BigDecimal getTOTAL_COOLER_CASES() {
			return this.TOTAL_COOLER_CASES;
		}

		public BigDecimal TOTAL_COOLER_SPLITS;

		public BigDecimal getTOTAL_COOLER_SPLITS() {
			return this.TOTAL_COOLER_SPLITS;
		}

		public BigDecimal TOTAL_DRY_CASES;

		public BigDecimal getTOTAL_DRY_CASES() {
			return this.TOTAL_DRY_CASES;
		}

		public BigDecimal TOTAL_DRY_SPLITS;

		public BigDecimal getTOTAL_DRY_SPLITS() {
			return this.TOTAL_DRY_SPLITS;
		}

		public BigDecimal TOTAL_NO_CASES_ORDER;

		public BigDecimal getTOTAL_NO_CASES_ORDER() {
			return this.TOTAL_NO_CASES_ORDER;
		}

		public BigDecimal TOTAL_NO_SPLITS_ORDER;

		public BigDecimal getTOTAL_NO_SPLITS_ORDER() {
			return this.TOTAL_NO_SPLITS_ORDER;
		}

		public BigDecimal TOTAL_ORDER_WEIGHT;

		public BigDecimal getTOTAL_ORDER_WEIGHT() {
			return this.TOTAL_ORDER_WEIGHT;
		}

		public BigDecimal TOTAL_CUBE;

		public BigDecimal getTOTAL_CUBE() {
			return this.TOTAL_CUBE;
		}

		public BigDecimal TOTAL_LINES;

		public BigDecimal getTOTAL_LINES() {
			return this.TOTAL_LINES;
		}

		public BigDecimal ORDER_TOTAL;

		public BigDecimal getORDER_TOTAL() {
			return this.ORDER_TOTAL;
		}

		public BigDecimal ORDER_GRAND_TOTAL;

		public BigDecimal getORDER_GRAND_TOTAL() {
			return this.ORDER_GRAND_TOTAL;
		}

		public BigDecimal ORDER_ENTRY_TIME;

		public BigDecimal getORDER_ENTRY_TIME() {
			return this.ORDER_ENTRY_TIME;
		}

		public String RECORD_TYPE_INDICATOR;

		public String getRECORD_TYPE_INDICATOR() {
			return this.RECORD_TYPE_INDICATOR;
		}

		public String DELIVERY_METHOD;

		public String getDELIVERY_METHOD() {
			return this.DELIVERY_METHOD;
		}

		public BigDecimal MANIFEST_NO;

		public BigDecimal getMANIFEST_NO() {
			return this.MANIFEST_NO;
		}

		public String IMMEDIATE_ORDER_FLAG;

		public String getIMMEDIATE_ORDER_FLAG() {
			return this.IMMEDIATE_ORDER_FLAG;
		}

		public BigDecimal BOOKING_ID;

		public BigDecimal getBOOKING_ID() {
			return this.BOOKING_ID;
		}

		public String INCOMPLETE_ORDER_FLAG;

		public String getINCOMPLETE_ORDER_FLAG() {
			return this.INCOMPLETE_ORDER_FLAG;
		}

		public String FOODSHOW_PROMOTION_ID;

		public String getFOODSHOW_PROMOTION_ID() {
			return this.FOODSHOW_PROMOTION_ID;
		}

		public java.util.Date LAPTOP_ORDER_DATE;

		public java.util.Date getLAPTOP_ORDER_DATE() {
			return this.LAPTOP_ORDER_DATE;
		}

		public String ACCOUNT_NO;

		public String getACCOUNT_NO() {
			return this.ACCOUNT_NO;
		}

		public String USER_FIELD_1;

		public String getUSER_FIELD_1() {
			return this.USER_FIELD_1;
		}

		public java.util.Date DELIVERY_DATE;

		public java.util.Date getDELIVERY_DATE() {
			return this.DELIVERY_DATE;
		}

		public String EMPLOYEE_NO;

		public String getEMPLOYEE_NO() {
			return this.EMPLOYEE_NO;
		}

		public String RESHIP_STATUS;

		public String getRESHIP_STATUS() {
			return this.RESHIP_STATUS;
		}

		public String HOLD_ORDER_FLAG;

		public String getHOLD_ORDER_FLAG() {
			return this.HOLD_ORDER_FLAG;
		}

		public String RELEASE_ORDER_FLAG;

		public String getRELEASE_ORDER_FLAG() {
			return this.RELEASE_ORDER_FLAG;
		}

		public String HOLD_ORDER_REASON_CODE;

		public String getHOLD_ORDER_REASON_CODE() {
			return this.HOLD_ORDER_REASON_CODE;
		}

		public String RELEASE_ORDER_REASON_CODE;

		public String getRELEASE_ORDER_REASON_CODE() {
			return this.RELEASE_ORDER_REASON_CODE;
		}

		public BigDecimal TAX_AMOUNT;

		public BigDecimal getTAX_AMOUNT() {
			return this.TAX_AMOUNT;
		}

		public String SEND_IMMEDIATE_ORDER_ROUTING;

		public String getSEND_IMMEDIATE_ORDER_ROUTING() {
			return this.SEND_IMMEDIATE_ORDER_ROUTING;
		}

		public String REMOTE_ORDER_ENTRY_MODE;

		public String getREMOTE_ORDER_ENTRY_MODE() {
			return this.REMOTE_ORDER_ENTRY_MODE;
		}

		public BigDecimal REMOTE_ORDER_CONFIRMATION_NO;

		public BigDecimal getREMOTE_ORDER_CONFIRMATION_NO() {
			return this.REMOTE_ORDER_CONFIRMATION_NO;
		}

		public String FAX_NO;

		public String getFAX_NO() {
			return this.FAX_NO;
		}

		public String PRIMARY_MA;

		public String getPRIMARY_MA() {
			return this.PRIMARY_MA;
		}

		public BigDecimal GENERIC_LAST_USED_NO;

		public BigDecimal getGENERIC_LAST_USED_NO() {
			return this.GENERIC_LAST_USED_NO;
		}

		public BigDecimal CALL_END_TIME;

		public BigDecimal getCALL_END_TIME() {
			return this.CALL_END_TIME;
		}

		public String CALL_START_TIME_INDICATOR;

		public String getCALL_START_TIME_INDICATOR() {
			return this.CALL_START_TIME_INDICATOR;
		}

		public String CALL_END_TIME_INDICATOR;

		public String getCALL_END_TIME_INDICATOR() {
			return this.CALL_END_TIME_INDICATOR;
		}

		public String RECORD_LOGICALLY_LOCKED_FLAG;

		public String getRECORD_LOGICALLY_LOCKED_FLAG() {
			return this.RECORD_LOGICALLY_LOCKED_FLAG;
		}

		public String ERROR_STATUS_FLAG;

		public String getERROR_STATUS_FLAG() {
			return this.ERROR_STATUS_FLAG;
		}

		public String REQUEST_STATUS_FLAG;

		public String getREQUEST_STATUS_FLAG() {
			return this.REQUEST_STATUS_FLAG;
		}

		public BigDecimal ORDER_DETAIL_LINE_NO;

		public BigDecimal getORDER_DETAIL_LINE_NO() {
			return this.ORDER_DETAIL_LINE_NO;
		}

		public String ENTITY_ID;

		public String getENTITY_ID() {
			return this.ENTITY_ID;
		}

		public String PARENT_ENTITY_1;

		public String getPARENT_ENTITY_1() {
			return this.PARENT_ENTITY_1;
		}

		public String PARENT_ENTITY_2;

		public String getPARENT_ENTITY_2() {
			return this.PARENT_ENTITY_2;
		}

		public String PARENT_ENTITY_3;

		public String getPARENT_ENTITY_3() {
			return this.PARENT_ENTITY_3;
		}

		public java.util.Date CANCEL_DATE;

		public java.util.Date getCANCEL_DATE() {
			return this.CANCEL_DATE;
		}

		public BigDecimal SERVICE_ORDER_NO;

		public BigDecimal getSERVICE_ORDER_NO() {
			return this.SERVICE_ORDER_NO;
		}

		public String CREATE_TARGET_INDICATOR;

		public String getCREATE_TARGET_INDICATOR() {
			return this.CREATE_TARGET_INDICATOR;
		}

		public String VENDOR_APPROVAL_NO;

		public String getVENDOR_APPROVAL_NO() {
			return this.VENDOR_APPROVAL_NO;
		}

		public String REQUESTED_BY;

		public String getREQUESTED_BY() {
			return this.REQUESTED_BY;
		}

		public String TARGET_DESC;

		public String getTARGET_DESC() {
			return this.TARGET_DESC;
		}

		public String BILL_BACK_VENDOR_FLAG;

		public String getBILL_BACK_VENDOR_FLAG() {
			return this.BILL_BACK_VENDOR_FLAG;
		}

		public BigDecimal NO_OF_AP_ROLL_DAYS;

		public BigDecimal getNO_OF_AP_ROLL_DAYS() {
			return this.NO_OF_AP_ROLL_DAYS;
		}

		public String RETURN_AUTH_NO;

		public String getRETURN_AUTH_NO() {
			return this.RETURN_AUTH_NO;
		}

		public String DISPENSER_EQUIPMENT_ITEM;

		public String getDISPENSER_EQUIPMENT_ITEM() {
			return this.DISPENSER_EQUIPMENT_ITEM;
		}

		public String LAPTOP_USER_FLAG;

		public String getLAPTOP_USER_FLAG() {
			return this.LAPTOP_USER_FLAG;
		}

		public BigDecimal LAPTOP_ORDER_NO;

		public BigDecimal getLAPTOP_ORDER_NO() {
			return this.LAPTOP_ORDER_NO;
		}

		public String LAPTOP_ZID_NO;

		public String getLAPTOP_ZID_NO() {
			return this.LAPTOP_ZID_NO;
		}

		public BigDecimal STOP_NO;

		public BigDecimal getSTOP_NO() {
			return this.STOP_NO;
		}

		public String ENTITY_UPDATED_FLAG;

		public String getENTITY_UPDATED_FLAG() {
			return this.ENTITY_UPDATED_FLAG;
		}

		public String MAJOR_CLASS;

		public String getMAJOR_CLASS() {
			return this.MAJOR_CLASS;
		}

		public String SWMS_RECOVERY_INVOICE_NO;

		public String getSWMS_RECOVERY_INVOICE_NO() {
			return this.SWMS_RECOVERY_INVOICE_NO;
		}

		public String DEFAULT_ROUTE_NO;

		public String getDEFAULT_ROUTE_NO() {
			return this.DEFAULT_ROUTE_NO;
		}

		public BigDecimal CONFIRM_NO;

		public BigDecimal getCONFIRM_NO() {
			return this.CONFIRM_NO;
		}

		public String CONTAINER_GROUP_ID;

		public String getCONTAINER_GROUP_ID() {
			return this.CONTAINER_GROUP_ID;
		}

		public String SEPARATE_CONTAINER_FLAG;

		public String getSEPARATE_CONTAINER_FLAG() {
			return this.SEPARATE_CONTAINER_FLAG;
		}

		public java.util.Date CREATED_TIMESTAMP;

		public java.util.Date getCREATED_TIMESTAMP() {
			return this.CREATED_TIMESTAMP;
		}

		public String CREATED_USER_ID;

		public String getCREATED_USER_ID() {
			return this.CREATED_USER_ID;
		}

		public java.util.Date UPDATED_TIMESTAMP;

		public java.util.Date getUPDATED_TIMESTAMP() {
			return this.UPDATED_TIMESTAMP;
		}

		public String UPDATED_USER_ID;

		public String getUPDATED_USER_ID() {
			return this.UPDATED_USER_ID;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());

				result = prime * result + ((this.ORDER_NO == null) ? 0 : this.ORDER_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ORDER_PROCESS_HEADERStruct other = (ORDER_PROCESS_HEADERStruct) obj;

			if (this.SITE_ID == null) {
				if (other.SITE_ID != null)
					return false;

			} else if (!this.SITE_ID.equals(other.SITE_ID))

				return false;

			if (this.ORDER_NO == null) {
				if (other.ORDER_NO != null)
					return false;

			} else if (!this.ORDER_NO.equals(other.ORDER_NO))

				return false;

			return true;
		}

		public void copyDataTo(ORDER_PROCESS_HEADERStruct other) {

			other.SITE_ID = this.SITE_ID;
			other.ORDER_NO = this.ORDER_NO;
			other.ORDER_TYPE = this.ORDER_TYPE;
			other.SHIP_TO_CUST = this.SHIP_TO_CUST;
			other.SHIPPING_ADDRESS_ID = this.SHIPPING_ADDRESS_ID;
			other.NATIONAL_ACCOUNT_NO = this.NATIONAL_ACCOUNT_NO;
			other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
			other.CUSTOMER_CATEGORY_CODE = this.CUSTOMER_CATEGORY_CODE;
			other.ROUTING_GROUP_CODE = this.ROUTING_GROUP_CODE;
			other.ALLOCATION_TYPE = this.ALLOCATION_TYPE;
			other.ROUTE_TO_NO = this.ROUTE_TO_NO;
			other.ROUTE_NO = this.ROUTE_NO;
			other.WILL_CALL_NAME = this.WILL_CALL_NAME;
			other.WILL_CALL_START_TIME = this.WILL_CALL_START_TIME;
			other.SEPARATE_INVOICE = this.SEPARATE_INVOICE;
			other.ORDER_DATE = this.ORDER_DATE;
			other.SHIP_OR_PICKUP_DATE = this.SHIP_OR_PICKUP_DATE;
			other.NEXT_ORDER_INDICATOR = this.NEXT_ORDER_INDICATOR;
			other.CONFIRMATION_NO = this.CONFIRMATION_NO;
			other.ORDER_CONFIRMATION_PRINTED_FLAG = this.ORDER_CONFIRMATION_PRINTED_FLAG;
			other.ORDER_STATUS_CODE = this.ORDER_STATUS_CODE;
			other.TOTAL_FREEZER_CASES = this.TOTAL_FREEZER_CASES;
			other.TOTAL_FREEZER_SPLITS = this.TOTAL_FREEZER_SPLITS;
			other.TOTAL_COOLER_CASES = this.TOTAL_COOLER_CASES;
			other.TOTAL_COOLER_SPLITS = this.TOTAL_COOLER_SPLITS;
			other.TOTAL_DRY_CASES = this.TOTAL_DRY_CASES;
			other.TOTAL_DRY_SPLITS = this.TOTAL_DRY_SPLITS;
			other.TOTAL_NO_CASES_ORDER = this.TOTAL_NO_CASES_ORDER;
			other.TOTAL_NO_SPLITS_ORDER = this.TOTAL_NO_SPLITS_ORDER;
			other.TOTAL_ORDER_WEIGHT = this.TOTAL_ORDER_WEIGHT;
			other.TOTAL_CUBE = this.TOTAL_CUBE;
			other.TOTAL_LINES = this.TOTAL_LINES;
			other.ORDER_TOTAL = this.ORDER_TOTAL;
			other.ORDER_GRAND_TOTAL = this.ORDER_GRAND_TOTAL;
			other.ORDER_ENTRY_TIME = this.ORDER_ENTRY_TIME;
			other.RECORD_TYPE_INDICATOR = this.RECORD_TYPE_INDICATOR;
			other.DELIVERY_METHOD = this.DELIVERY_METHOD;
			other.MANIFEST_NO = this.MANIFEST_NO;
			other.IMMEDIATE_ORDER_FLAG = this.IMMEDIATE_ORDER_FLAG;
			other.BOOKING_ID = this.BOOKING_ID;
			other.INCOMPLETE_ORDER_FLAG = this.INCOMPLETE_ORDER_FLAG;
			other.FOODSHOW_PROMOTION_ID = this.FOODSHOW_PROMOTION_ID;
			other.LAPTOP_ORDER_DATE = this.LAPTOP_ORDER_DATE;
			other.ACCOUNT_NO = this.ACCOUNT_NO;
			other.USER_FIELD_1 = this.USER_FIELD_1;
			other.DELIVERY_DATE = this.DELIVERY_DATE;
			other.EMPLOYEE_NO = this.EMPLOYEE_NO;
			other.RESHIP_STATUS = this.RESHIP_STATUS;
			other.HOLD_ORDER_FLAG = this.HOLD_ORDER_FLAG;
			other.RELEASE_ORDER_FLAG = this.RELEASE_ORDER_FLAG;
			other.HOLD_ORDER_REASON_CODE = this.HOLD_ORDER_REASON_CODE;
			other.RELEASE_ORDER_REASON_CODE = this.RELEASE_ORDER_REASON_CODE;
			other.TAX_AMOUNT = this.TAX_AMOUNT;
			other.SEND_IMMEDIATE_ORDER_ROUTING = this.SEND_IMMEDIATE_ORDER_ROUTING;
			other.REMOTE_ORDER_ENTRY_MODE = this.REMOTE_ORDER_ENTRY_MODE;
			other.REMOTE_ORDER_CONFIRMATION_NO = this.REMOTE_ORDER_CONFIRMATION_NO;
			other.FAX_NO = this.FAX_NO;
			other.PRIMARY_MA = this.PRIMARY_MA;
			other.GENERIC_LAST_USED_NO = this.GENERIC_LAST_USED_NO;
			other.CALL_END_TIME = this.CALL_END_TIME;
			other.CALL_START_TIME_INDICATOR = this.CALL_START_TIME_INDICATOR;
			other.CALL_END_TIME_INDICATOR = this.CALL_END_TIME_INDICATOR;
			other.RECORD_LOGICALLY_LOCKED_FLAG = this.RECORD_LOGICALLY_LOCKED_FLAG;
			other.ERROR_STATUS_FLAG = this.ERROR_STATUS_FLAG;
			other.REQUEST_STATUS_FLAG = this.REQUEST_STATUS_FLAG;
			other.ORDER_DETAIL_LINE_NO = this.ORDER_DETAIL_LINE_NO;
			other.ENTITY_ID = this.ENTITY_ID;
			other.PARENT_ENTITY_1 = this.PARENT_ENTITY_1;
			other.PARENT_ENTITY_2 = this.PARENT_ENTITY_2;
			other.PARENT_ENTITY_3 = this.PARENT_ENTITY_3;
			other.CANCEL_DATE = this.CANCEL_DATE;
			other.SERVICE_ORDER_NO = this.SERVICE_ORDER_NO;
			other.CREATE_TARGET_INDICATOR = this.CREATE_TARGET_INDICATOR;
			other.VENDOR_APPROVAL_NO = this.VENDOR_APPROVAL_NO;
			other.REQUESTED_BY = this.REQUESTED_BY;
			other.TARGET_DESC = this.TARGET_DESC;
			other.BILL_BACK_VENDOR_FLAG = this.BILL_BACK_VENDOR_FLAG;
			other.NO_OF_AP_ROLL_DAYS = this.NO_OF_AP_ROLL_DAYS;
			other.RETURN_AUTH_NO = this.RETURN_AUTH_NO;
			other.DISPENSER_EQUIPMENT_ITEM = this.DISPENSER_EQUIPMENT_ITEM;
			other.LAPTOP_USER_FLAG = this.LAPTOP_USER_FLAG;
			other.LAPTOP_ORDER_NO = this.LAPTOP_ORDER_NO;
			other.LAPTOP_ZID_NO = this.LAPTOP_ZID_NO;
			other.STOP_NO = this.STOP_NO;
			other.ENTITY_UPDATED_FLAG = this.ENTITY_UPDATED_FLAG;
			other.MAJOR_CLASS = this.MAJOR_CLASS;
			other.SWMS_RECOVERY_INVOICE_NO = this.SWMS_RECOVERY_INVOICE_NO;
			other.DEFAULT_ROUTE_NO = this.DEFAULT_ROUTE_NO;
			other.CONFIRM_NO = this.CONFIRM_NO;
			other.CONTAINER_GROUP_ID = this.CONTAINER_GROUP_ID;
			other.SEPARATE_CONTAINER_FLAG = this.SEPARATE_CONTAINER_FLAG;
			other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
			other.CREATED_USER_ID = this.CREATED_USER_ID;
			other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
			other.UPDATED_USER_ID = this.UPDATED_USER_ID;
			other.IS_DELETED = this.IS_DELETED;

		}

		public void copyKeysDataTo(ORDER_PROCESS_HEADERStruct other) {

			other.SITE_ID = this.SITE_ID;
			other.ORDER_NO = this.ORDER_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ORDER_NO = (BigDecimal) dis.readObject();

					this.ORDER_TYPE = readString(dis);

					this.SHIP_TO_CUST = readString(dis);

					this.SHIPPING_ADDRESS_ID = readString(dis);

					this.NATIONAL_ACCOUNT_NO = readString(dis);

					this.PURCHASE_ORDER_NO = readString(dis);

					this.CUSTOMER_CATEGORY_CODE = readString(dis);

					this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();

					this.ALLOCATION_TYPE = readString(dis);

					this.ROUTE_TO_NO = readString(dis);

					this.ROUTE_NO = readString(dis);

					this.WILL_CALL_NAME = readString(dis);

					this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();

					this.SEPARATE_INVOICE = readString(dis);

					this.ORDER_DATE = readDate(dis);

					this.SHIP_OR_PICKUP_DATE = readDate(dis);

					this.NEXT_ORDER_INDICATOR = readString(dis);

					this.CONFIRMATION_NO = readString(dis);

					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);

					this.ORDER_STATUS_CODE = readString(dis);

					this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();

					this.TOTAL_CUBE = (BigDecimal) dis.readObject();

					this.TOTAL_LINES = (BigDecimal) dis.readObject();

					this.ORDER_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();

					this.RECORD_TYPE_INDICATOR = readString(dis);

					this.DELIVERY_METHOD = readString(dis);

					this.MANIFEST_NO = (BigDecimal) dis.readObject();

					this.IMMEDIATE_ORDER_FLAG = readString(dis);

					this.BOOKING_ID = (BigDecimal) dis.readObject();

					this.INCOMPLETE_ORDER_FLAG = readString(dis);

					this.FOODSHOW_PROMOTION_ID = readString(dis);

					this.LAPTOP_ORDER_DATE = readDate(dis);

					this.ACCOUNT_NO = readString(dis);

					this.USER_FIELD_1 = readString(dis);

					this.DELIVERY_DATE = readDate(dis);

					this.EMPLOYEE_NO = readString(dis);

					this.RESHIP_STATUS = readString(dis);

					this.HOLD_ORDER_FLAG = readString(dis);

					this.RELEASE_ORDER_FLAG = readString(dis);

					this.HOLD_ORDER_REASON_CODE = readString(dis);

					this.RELEASE_ORDER_REASON_CODE = readString(dis);

					this.TAX_AMOUNT = (BigDecimal) dis.readObject();

					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);

					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);

					this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();

					this.FAX_NO = readString(dis);

					this.PRIMARY_MA = readString(dis);

					this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();

					this.CALL_END_TIME = (BigDecimal) dis.readObject();

					this.CALL_START_TIME_INDICATOR = readString(dis);

					this.CALL_END_TIME_INDICATOR = readString(dis);

					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);

					this.ERROR_STATUS_FLAG = readString(dis);

					this.REQUEST_STATUS_FLAG = readString(dis);

					this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();

					this.ENTITY_ID = readString(dis);

					this.PARENT_ENTITY_1 = readString(dis);

					this.PARENT_ENTITY_2 = readString(dis);

					this.PARENT_ENTITY_3 = readString(dis);

					this.CANCEL_DATE = readDate(dis);

					this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();

					this.CREATE_TARGET_INDICATOR = readString(dis);

					this.VENDOR_APPROVAL_NO = readString(dis);

					this.REQUESTED_BY = readString(dis);

					this.TARGET_DESC = readString(dis);

					this.BILL_BACK_VENDOR_FLAG = readString(dis);

					this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();

					this.RETURN_AUTH_NO = readString(dis);

					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);

					this.LAPTOP_USER_FLAG = readString(dis);

					this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();

					this.LAPTOP_ZID_NO = readString(dis);

					this.STOP_NO = (BigDecimal) dis.readObject();

					this.ENTITY_UPDATED_FLAG = readString(dis);

					this.MAJOR_CLASS = readString(dis);

					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);

					this.DEFAULT_ROUTE_NO = readString(dis);

					this.CONFIRM_NO = (BigDecimal) dis.readObject();

					this.CONTAINER_GROUP_ID = readString(dis);

					this.SEPARATE_CONTAINER_FLAG = readString(dis);

					this.CREATED_TIMESTAMP = readDate(dis);

					this.CREATED_USER_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readDate(dis);

					this.UPDATED_USER_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ORDER_NO = (BigDecimal) dis.readObject();

					this.ORDER_TYPE = readString(dis);

					this.SHIP_TO_CUST = readString(dis);

					this.SHIPPING_ADDRESS_ID = readString(dis);

					this.NATIONAL_ACCOUNT_NO = readString(dis);

					this.PURCHASE_ORDER_NO = readString(dis);

					this.CUSTOMER_CATEGORY_CODE = readString(dis);

					this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();

					this.ALLOCATION_TYPE = readString(dis);

					this.ROUTE_TO_NO = readString(dis);

					this.ROUTE_NO = readString(dis);

					this.WILL_CALL_NAME = readString(dis);

					this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();

					this.SEPARATE_INVOICE = readString(dis);

					this.ORDER_DATE = readDate(dis);

					this.SHIP_OR_PICKUP_DATE = readDate(dis);

					this.NEXT_ORDER_INDICATOR = readString(dis);

					this.CONFIRMATION_NO = readString(dis);

					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);

					this.ORDER_STATUS_CODE = readString(dis);

					this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();

					this.TOTAL_CUBE = (BigDecimal) dis.readObject();

					this.TOTAL_LINES = (BigDecimal) dis.readObject();

					this.ORDER_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();

					this.RECORD_TYPE_INDICATOR = readString(dis);

					this.DELIVERY_METHOD = readString(dis);

					this.MANIFEST_NO = (BigDecimal) dis.readObject();

					this.IMMEDIATE_ORDER_FLAG = readString(dis);

					this.BOOKING_ID = (BigDecimal) dis.readObject();

					this.INCOMPLETE_ORDER_FLAG = readString(dis);

					this.FOODSHOW_PROMOTION_ID = readString(dis);

					this.LAPTOP_ORDER_DATE = readDate(dis);

					this.ACCOUNT_NO = readString(dis);

					this.USER_FIELD_1 = readString(dis);

					this.DELIVERY_DATE = readDate(dis);

					this.EMPLOYEE_NO = readString(dis);

					this.RESHIP_STATUS = readString(dis);

					this.HOLD_ORDER_FLAG = readString(dis);

					this.RELEASE_ORDER_FLAG = readString(dis);

					this.HOLD_ORDER_REASON_CODE = readString(dis);

					this.RELEASE_ORDER_REASON_CODE = readString(dis);

					this.TAX_AMOUNT = (BigDecimal) dis.readObject();

					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);

					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);

					this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();

					this.FAX_NO = readString(dis);

					this.PRIMARY_MA = readString(dis);

					this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();

					this.CALL_END_TIME = (BigDecimal) dis.readObject();

					this.CALL_START_TIME_INDICATOR = readString(dis);

					this.CALL_END_TIME_INDICATOR = readString(dis);

					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);

					this.ERROR_STATUS_FLAG = readString(dis);

					this.REQUEST_STATUS_FLAG = readString(dis);

					this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();

					this.ENTITY_ID = readString(dis);

					this.PARENT_ENTITY_1 = readString(dis);

					this.PARENT_ENTITY_2 = readString(dis);

					this.PARENT_ENTITY_3 = readString(dis);

					this.CANCEL_DATE = readDate(dis);

					this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();

					this.CREATE_TARGET_INDICATOR = readString(dis);

					this.VENDOR_APPROVAL_NO = readString(dis);

					this.REQUESTED_BY = readString(dis);

					this.TARGET_DESC = readString(dis);

					this.BILL_BACK_VENDOR_FLAG = readString(dis);

					this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();

					this.RETURN_AUTH_NO = readString(dis);

					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);

					this.LAPTOP_USER_FLAG = readString(dis);

					this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();

					this.LAPTOP_ZID_NO = readString(dis);

					this.STOP_NO = (BigDecimal) dis.readObject();

					this.ENTITY_UPDATED_FLAG = readString(dis);

					this.MAJOR_CLASS = readString(dis);

					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);

					this.DEFAULT_ROUTE_NO = readString(dis);

					this.CONFIRM_NO = (BigDecimal) dis.readObject();

					this.CONTAINER_GROUP_ID = readString(dis);

					this.SEPARATE_CONTAINER_FLAG = readString(dis);

					this.CREATED_TIMESTAMP = readDate(dis);

					this.CREATED_USER_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readDate(dis);

					this.UPDATED_USER_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_NO);

				// String

				writeString(this.ORDER_TYPE, dos);

				// String

				writeString(this.SHIP_TO_CUST, dos);

				// String

				writeString(this.SHIPPING_ADDRESS_ID, dos);

				// String

				writeString(this.NATIONAL_ACCOUNT_NO, dos);

				// String

				writeString(this.PURCHASE_ORDER_NO, dos);

				// String

				writeString(this.CUSTOMER_CATEGORY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.ROUTING_GROUP_CODE);

				// String

				writeString(this.ALLOCATION_TYPE, dos);

				// String

				writeString(this.ROUTE_TO_NO, dos);

				// String

				writeString(this.ROUTE_NO, dos);

				// String

				writeString(this.WILL_CALL_NAME, dos);

				// BigDecimal

				dos.writeObject(this.WILL_CALL_START_TIME);

				// String

				writeString(this.SEPARATE_INVOICE, dos);

				// java.util.Date

				writeDate(this.ORDER_DATE, dos);

				// java.util.Date

				writeDate(this.SHIP_OR_PICKUP_DATE, dos);

				// String

				writeString(this.NEXT_ORDER_INDICATOR, dos);

				// String

				writeString(this.CONFIRMATION_NO, dos);

				// String

				writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG, dos);

				// String

				writeString(this.ORDER_STATUS_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_CASES_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_ORDER_WEIGHT);

				// BigDecimal

				dos.writeObject(this.TOTAL_CUBE);

				// BigDecimal

				dos.writeObject(this.TOTAL_LINES);

				// BigDecimal

				dos.writeObject(this.ORDER_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_GRAND_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_ENTRY_TIME);

				// String

				writeString(this.RECORD_TYPE_INDICATOR, dos);

				// String

				writeString(this.DELIVERY_METHOD, dos);

				// BigDecimal

				dos.writeObject(this.MANIFEST_NO);

				// String

				writeString(this.IMMEDIATE_ORDER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.BOOKING_ID);

				// String

				writeString(this.INCOMPLETE_ORDER_FLAG, dos);

				// String

				writeString(this.FOODSHOW_PROMOTION_ID, dos);

				// java.util.Date

				writeDate(this.LAPTOP_ORDER_DATE, dos);

				// String

				writeString(this.ACCOUNT_NO, dos);

				// String

				writeString(this.USER_FIELD_1, dos);

				// java.util.Date

				writeDate(this.DELIVERY_DATE, dos);

				// String

				writeString(this.EMPLOYEE_NO, dos);

				// String

				writeString(this.RESHIP_STATUS, dos);

				// String

				writeString(this.HOLD_ORDER_FLAG, dos);

				// String

				writeString(this.RELEASE_ORDER_FLAG, dos);

				// String

				writeString(this.HOLD_ORDER_REASON_CODE, dos);

				// String

				writeString(this.RELEASE_ORDER_REASON_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TAX_AMOUNT);

				// String

				writeString(this.SEND_IMMEDIATE_ORDER_ROUTING, dos);

				// String

				writeString(this.REMOTE_ORDER_ENTRY_MODE, dos);

				// BigDecimal

				dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);

				// String

				writeString(this.FAX_NO, dos);

				// String

				writeString(this.PRIMARY_MA, dos);

				// BigDecimal

				dos.writeObject(this.GENERIC_LAST_USED_NO);

				// BigDecimal

				dos.writeObject(this.CALL_END_TIME);

				// String

				writeString(this.CALL_START_TIME_INDICATOR, dos);

				// String

				writeString(this.CALL_END_TIME_INDICATOR, dos);

				// String

				writeString(this.RECORD_LOGICALLY_LOCKED_FLAG, dos);

				// String

				writeString(this.ERROR_STATUS_FLAG, dos);

				// String

				writeString(this.REQUEST_STATUS_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_DETAIL_LINE_NO);

				// String

				writeString(this.ENTITY_ID, dos);

				// String

				writeString(this.PARENT_ENTITY_1, dos);

				// String

				writeString(this.PARENT_ENTITY_2, dos);

				// String

				writeString(this.PARENT_ENTITY_3, dos);

				// java.util.Date

				writeDate(this.CANCEL_DATE, dos);

				// BigDecimal

				dos.writeObject(this.SERVICE_ORDER_NO);

				// String

				writeString(this.CREATE_TARGET_INDICATOR, dos);

				// String

				writeString(this.VENDOR_APPROVAL_NO, dos);

				// String

				writeString(this.REQUESTED_BY, dos);

				// String

				writeString(this.TARGET_DESC, dos);

				// String

				writeString(this.BILL_BACK_VENDOR_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.NO_OF_AP_ROLL_DAYS);

				// String

				writeString(this.RETURN_AUTH_NO, dos);

				// String

				writeString(this.DISPENSER_EQUIPMENT_ITEM, dos);

				// String

				writeString(this.LAPTOP_USER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.LAPTOP_ORDER_NO);

				// String

				writeString(this.LAPTOP_ZID_NO, dos);

				// BigDecimal

				dos.writeObject(this.STOP_NO);

				// String

				writeString(this.ENTITY_UPDATED_FLAG, dos);

				// String

				writeString(this.MAJOR_CLASS, dos);

				// String

				writeString(this.SWMS_RECOVERY_INVOICE_NO, dos);

				// String

				writeString(this.DEFAULT_ROUTE_NO, dos);

				// BigDecimal

				dos.writeObject(this.CONFIRM_NO);

				// String

				writeString(this.CONTAINER_GROUP_ID, dos);

				// String

				writeString(this.SEPARATE_CONTAINER_FLAG, dos);

				// java.util.Date

				writeDate(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// java.util.Date

				writeDate(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_NO);

				// String

				writeString(this.ORDER_TYPE, dos);

				// String

				writeString(this.SHIP_TO_CUST, dos);

				// String

				writeString(this.SHIPPING_ADDRESS_ID, dos);

				// String

				writeString(this.NATIONAL_ACCOUNT_NO, dos);

				// String

				writeString(this.PURCHASE_ORDER_NO, dos);

				// String

				writeString(this.CUSTOMER_CATEGORY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.ROUTING_GROUP_CODE);

				// String

				writeString(this.ALLOCATION_TYPE, dos);

				// String

				writeString(this.ROUTE_TO_NO, dos);

				// String

				writeString(this.ROUTE_NO, dos);

				// String

				writeString(this.WILL_CALL_NAME, dos);

				// BigDecimal

				dos.writeObject(this.WILL_CALL_START_TIME);

				// String

				writeString(this.SEPARATE_INVOICE, dos);

				// java.util.Date

				writeDate(this.ORDER_DATE, dos);

				// java.util.Date

				writeDate(this.SHIP_OR_PICKUP_DATE, dos);

				// String

				writeString(this.NEXT_ORDER_INDICATOR, dos);

				// String

				writeString(this.CONFIRMATION_NO, dos);

				// String

				writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG, dos);

				// String

				writeString(this.ORDER_STATUS_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_CASES_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_ORDER_WEIGHT);

				// BigDecimal

				dos.writeObject(this.TOTAL_CUBE);

				// BigDecimal

				dos.writeObject(this.TOTAL_LINES);

				// BigDecimal

				dos.writeObject(this.ORDER_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_GRAND_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_ENTRY_TIME);

				// String

				writeString(this.RECORD_TYPE_INDICATOR, dos);

				// String

				writeString(this.DELIVERY_METHOD, dos);

				// BigDecimal

				dos.writeObject(this.MANIFEST_NO);

				// String

				writeString(this.IMMEDIATE_ORDER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.BOOKING_ID);

				// String

				writeString(this.INCOMPLETE_ORDER_FLAG, dos);

				// String

				writeString(this.FOODSHOW_PROMOTION_ID, dos);

				// java.util.Date

				writeDate(this.LAPTOP_ORDER_DATE, dos);

				// String

				writeString(this.ACCOUNT_NO, dos);

				// String

				writeString(this.USER_FIELD_1, dos);

				// java.util.Date

				writeDate(this.DELIVERY_DATE, dos);

				// String

				writeString(this.EMPLOYEE_NO, dos);

				// String

				writeString(this.RESHIP_STATUS, dos);

				// String

				writeString(this.HOLD_ORDER_FLAG, dos);

				// String

				writeString(this.RELEASE_ORDER_FLAG, dos);

				// String

				writeString(this.HOLD_ORDER_REASON_CODE, dos);

				// String

				writeString(this.RELEASE_ORDER_REASON_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TAX_AMOUNT);

				// String

				writeString(this.SEND_IMMEDIATE_ORDER_ROUTING, dos);

				// String

				writeString(this.REMOTE_ORDER_ENTRY_MODE, dos);

				// BigDecimal

				dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);

				// String

				writeString(this.FAX_NO, dos);

				// String

				writeString(this.PRIMARY_MA, dos);

				// BigDecimal

				dos.writeObject(this.GENERIC_LAST_USED_NO);

				// BigDecimal

				dos.writeObject(this.CALL_END_TIME);

				// String

				writeString(this.CALL_START_TIME_INDICATOR, dos);

				// String

				writeString(this.CALL_END_TIME_INDICATOR, dos);

				// String

				writeString(this.RECORD_LOGICALLY_LOCKED_FLAG, dos);

				// String

				writeString(this.ERROR_STATUS_FLAG, dos);

				// String

				writeString(this.REQUEST_STATUS_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_DETAIL_LINE_NO);

				// String

				writeString(this.ENTITY_ID, dos);

				// String

				writeString(this.PARENT_ENTITY_1, dos);

				// String

				writeString(this.PARENT_ENTITY_2, dos);

				// String

				writeString(this.PARENT_ENTITY_3, dos);

				// java.util.Date

				writeDate(this.CANCEL_DATE, dos);

				// BigDecimal

				dos.writeObject(this.SERVICE_ORDER_NO);

				// String

				writeString(this.CREATE_TARGET_INDICATOR, dos);

				// String

				writeString(this.VENDOR_APPROVAL_NO, dos);

				// String

				writeString(this.REQUESTED_BY, dos);

				// String

				writeString(this.TARGET_DESC, dos);

				// String

				writeString(this.BILL_BACK_VENDOR_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.NO_OF_AP_ROLL_DAYS);

				// String

				writeString(this.RETURN_AUTH_NO, dos);

				// String

				writeString(this.DISPENSER_EQUIPMENT_ITEM, dos);

				// String

				writeString(this.LAPTOP_USER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.LAPTOP_ORDER_NO);

				// String

				writeString(this.LAPTOP_ZID_NO, dos);

				// BigDecimal

				dos.writeObject(this.STOP_NO);

				// String

				writeString(this.ENTITY_UPDATED_FLAG, dos);

				// String

				writeString(this.MAJOR_CLASS, dos);

				// String

				writeString(this.SWMS_RECOVERY_INVOICE_NO, dos);

				// String

				writeString(this.DEFAULT_ROUTE_NO, dos);

				// BigDecimal

				dos.writeObject(this.CONFIRM_NO);

				// String

				writeString(this.CONTAINER_GROUP_ID, dos);

				// String

				writeString(this.SEPARATE_CONTAINER_FLAG, dos);

				// java.util.Date

				writeDate(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// java.util.Date

				writeDate(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",ORDER_NO=" + String.valueOf(ORDER_NO));
			sb.append(",ORDER_TYPE=" + ORDER_TYPE);
			sb.append(",SHIP_TO_CUST=" + SHIP_TO_CUST);
			sb.append(",SHIPPING_ADDRESS_ID=" + SHIPPING_ADDRESS_ID);
			sb.append(",NATIONAL_ACCOUNT_NO=" + NATIONAL_ACCOUNT_NO);
			sb.append(",PURCHASE_ORDER_NO=" + PURCHASE_ORDER_NO);
			sb.append(",CUSTOMER_CATEGORY_CODE=" + CUSTOMER_CATEGORY_CODE);
			sb.append(",ROUTING_GROUP_CODE=" + String.valueOf(ROUTING_GROUP_CODE));
			sb.append(",ALLOCATION_TYPE=" + ALLOCATION_TYPE);
			sb.append(",ROUTE_TO_NO=" + ROUTE_TO_NO);
			sb.append(",ROUTE_NO=" + ROUTE_NO);
			sb.append(",WILL_CALL_NAME=" + WILL_CALL_NAME);
			sb.append(",WILL_CALL_START_TIME=" + String.valueOf(WILL_CALL_START_TIME));
			sb.append(",SEPARATE_INVOICE=" + SEPARATE_INVOICE);
			sb.append(",ORDER_DATE=" + String.valueOf(ORDER_DATE));
			sb.append(",SHIP_OR_PICKUP_DATE=" + String.valueOf(SHIP_OR_PICKUP_DATE));
			sb.append(",NEXT_ORDER_INDICATOR=" + NEXT_ORDER_INDICATOR);
			sb.append(",CONFIRMATION_NO=" + CONFIRMATION_NO);
			sb.append(",ORDER_CONFIRMATION_PRINTED_FLAG=" + ORDER_CONFIRMATION_PRINTED_FLAG);
			sb.append(",ORDER_STATUS_CODE=" + ORDER_STATUS_CODE);
			sb.append(",TOTAL_FREEZER_CASES=" + String.valueOf(TOTAL_FREEZER_CASES));
			sb.append(",TOTAL_FREEZER_SPLITS=" + String.valueOf(TOTAL_FREEZER_SPLITS));
			sb.append(",TOTAL_COOLER_CASES=" + String.valueOf(TOTAL_COOLER_CASES));
			sb.append(",TOTAL_COOLER_SPLITS=" + String.valueOf(TOTAL_COOLER_SPLITS));
			sb.append(",TOTAL_DRY_CASES=" + String.valueOf(TOTAL_DRY_CASES));
			sb.append(",TOTAL_DRY_SPLITS=" + String.valueOf(TOTAL_DRY_SPLITS));
			sb.append(",TOTAL_NO_CASES_ORDER=" + String.valueOf(TOTAL_NO_CASES_ORDER));
			sb.append(",TOTAL_NO_SPLITS_ORDER=" + String.valueOf(TOTAL_NO_SPLITS_ORDER));
			sb.append(",TOTAL_ORDER_WEIGHT=" + String.valueOf(TOTAL_ORDER_WEIGHT));
			sb.append(",TOTAL_CUBE=" + String.valueOf(TOTAL_CUBE));
			sb.append(",TOTAL_LINES=" + String.valueOf(TOTAL_LINES));
			sb.append(",ORDER_TOTAL=" + String.valueOf(ORDER_TOTAL));
			sb.append(",ORDER_GRAND_TOTAL=" + String.valueOf(ORDER_GRAND_TOTAL));
			sb.append(",ORDER_ENTRY_TIME=" + String.valueOf(ORDER_ENTRY_TIME));
			sb.append(",RECORD_TYPE_INDICATOR=" + RECORD_TYPE_INDICATOR);
			sb.append(",DELIVERY_METHOD=" + DELIVERY_METHOD);
			sb.append(",MANIFEST_NO=" + String.valueOf(MANIFEST_NO));
			sb.append(",IMMEDIATE_ORDER_FLAG=" + IMMEDIATE_ORDER_FLAG);
			sb.append(",BOOKING_ID=" + String.valueOf(BOOKING_ID));
			sb.append(",INCOMPLETE_ORDER_FLAG=" + INCOMPLETE_ORDER_FLAG);
			sb.append(",FOODSHOW_PROMOTION_ID=" + FOODSHOW_PROMOTION_ID);
			sb.append(",LAPTOP_ORDER_DATE=" + String.valueOf(LAPTOP_ORDER_DATE));
			sb.append(",ACCOUNT_NO=" + ACCOUNT_NO);
			sb.append(",USER_FIELD_1=" + USER_FIELD_1);
			sb.append(",DELIVERY_DATE=" + String.valueOf(DELIVERY_DATE));
			sb.append(",EMPLOYEE_NO=" + EMPLOYEE_NO);
			sb.append(",RESHIP_STATUS=" + RESHIP_STATUS);
			sb.append(",HOLD_ORDER_FLAG=" + HOLD_ORDER_FLAG);
			sb.append(",RELEASE_ORDER_FLAG=" + RELEASE_ORDER_FLAG);
			sb.append(",HOLD_ORDER_REASON_CODE=" + HOLD_ORDER_REASON_CODE);
			sb.append(",RELEASE_ORDER_REASON_CODE=" + RELEASE_ORDER_REASON_CODE);
			sb.append(",TAX_AMOUNT=" + String.valueOf(TAX_AMOUNT));
			sb.append(",SEND_IMMEDIATE_ORDER_ROUTING=" + SEND_IMMEDIATE_ORDER_ROUTING);
			sb.append(",REMOTE_ORDER_ENTRY_MODE=" + REMOTE_ORDER_ENTRY_MODE);
			sb.append(",REMOTE_ORDER_CONFIRMATION_NO=" + String.valueOf(REMOTE_ORDER_CONFIRMATION_NO));
			sb.append(",FAX_NO=" + FAX_NO);
			sb.append(",PRIMARY_MA=" + PRIMARY_MA);
			sb.append(",GENERIC_LAST_USED_NO=" + String.valueOf(GENERIC_LAST_USED_NO));
			sb.append(",CALL_END_TIME=" + String.valueOf(CALL_END_TIME));
			sb.append(",CALL_START_TIME_INDICATOR=" + CALL_START_TIME_INDICATOR);
			sb.append(",CALL_END_TIME_INDICATOR=" + CALL_END_TIME_INDICATOR);
			sb.append(",RECORD_LOGICALLY_LOCKED_FLAG=" + RECORD_LOGICALLY_LOCKED_FLAG);
			sb.append(",ERROR_STATUS_FLAG=" + ERROR_STATUS_FLAG);
			sb.append(",REQUEST_STATUS_FLAG=" + REQUEST_STATUS_FLAG);
			sb.append(",ORDER_DETAIL_LINE_NO=" + String.valueOf(ORDER_DETAIL_LINE_NO));
			sb.append(",ENTITY_ID=" + ENTITY_ID);
			sb.append(",PARENT_ENTITY_1=" + PARENT_ENTITY_1);
			sb.append(",PARENT_ENTITY_2=" + PARENT_ENTITY_2);
			sb.append(",PARENT_ENTITY_3=" + PARENT_ENTITY_3);
			sb.append(",CANCEL_DATE=" + String.valueOf(CANCEL_DATE));
			sb.append(",SERVICE_ORDER_NO=" + String.valueOf(SERVICE_ORDER_NO));
			sb.append(",CREATE_TARGET_INDICATOR=" + CREATE_TARGET_INDICATOR);
			sb.append(",VENDOR_APPROVAL_NO=" + VENDOR_APPROVAL_NO);
			sb.append(",REQUESTED_BY=" + REQUESTED_BY);
			sb.append(",TARGET_DESC=" + TARGET_DESC);
			sb.append(",BILL_BACK_VENDOR_FLAG=" + BILL_BACK_VENDOR_FLAG);
			sb.append(",NO_OF_AP_ROLL_DAYS=" + String.valueOf(NO_OF_AP_ROLL_DAYS));
			sb.append(",RETURN_AUTH_NO=" + RETURN_AUTH_NO);
			sb.append(",DISPENSER_EQUIPMENT_ITEM=" + DISPENSER_EQUIPMENT_ITEM);
			sb.append(",LAPTOP_USER_FLAG=" + LAPTOP_USER_FLAG);
			sb.append(",LAPTOP_ORDER_NO=" + String.valueOf(LAPTOP_ORDER_NO));
			sb.append(",LAPTOP_ZID_NO=" + LAPTOP_ZID_NO);
			sb.append(",STOP_NO=" + String.valueOf(STOP_NO));
			sb.append(",ENTITY_UPDATED_FLAG=" + ENTITY_UPDATED_FLAG);
			sb.append(",MAJOR_CLASS=" + MAJOR_CLASS);
			sb.append(",SWMS_RECOVERY_INVOICE_NO=" + SWMS_RECOVERY_INVOICE_NO);
			sb.append(",DEFAULT_ROUTE_NO=" + DEFAULT_ROUTE_NO);
			sb.append(",CONFIRM_NO=" + String.valueOf(CONFIRM_NO));
			sb.append(",CONTAINER_GROUP_ID=" + CONTAINER_GROUP_ID);
			sb.append(",SEPARATE_CONTAINER_FLAG=" + SEPARATE_CONTAINER_FLAG);
			sb.append(",CREATED_TIMESTAMP=" + String.valueOf(CREATED_TIMESTAMP));
			sb.append(",CREATED_USER_ID=" + CREATED_USER_ID);
			sb.append(",UPDATED_TIMESTAMP=" + String.valueOf(UPDATED_TIMESTAMP));
			sb.append(",UPDATED_USER_ID=" + UPDATED_USER_ID);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ORDER_PROCESS_HEADERStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ORDER_NO, other.ORDER_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public BigDecimal ORDER_NO;

		public BigDecimal getORDER_NO() {
			return this.ORDER_NO;
		}

		public String ORDER_TYPE;

		public String getORDER_TYPE() {
			return this.ORDER_TYPE;
		}

		public String SHIP_TO_CUST;

		public String getSHIP_TO_CUST() {
			return this.SHIP_TO_CUST;
		}

		public String SHIPPING_ADDRESS_ID;

		public String getSHIPPING_ADDRESS_ID() {
			return this.SHIPPING_ADDRESS_ID;
		}

		public String NATIONAL_ACCOUNT_NO;

		public String getNATIONAL_ACCOUNT_NO() {
			return this.NATIONAL_ACCOUNT_NO;
		}

		public String PURCHASE_ORDER_NO;

		public String getPURCHASE_ORDER_NO() {
			return this.PURCHASE_ORDER_NO;
		}

		public String CUSTOMER_CATEGORY_CODE;

		public String getCUSTOMER_CATEGORY_CODE() {
			return this.CUSTOMER_CATEGORY_CODE;
		}

		public BigDecimal ROUTING_GROUP_CODE;

		public BigDecimal getROUTING_GROUP_CODE() {
			return this.ROUTING_GROUP_CODE;
		}

		public String ALLOCATION_TYPE;

		public String getALLOCATION_TYPE() {
			return this.ALLOCATION_TYPE;
		}

		public String ROUTE_TO_NO;

		public String getROUTE_TO_NO() {
			return this.ROUTE_TO_NO;
		}

		public String ROUTE_NO;

		public String getROUTE_NO() {
			return this.ROUTE_NO;
		}

		public String WILL_CALL_NAME;

		public String getWILL_CALL_NAME() {
			return this.WILL_CALL_NAME;
		}

		public BigDecimal WILL_CALL_START_TIME;

		public BigDecimal getWILL_CALL_START_TIME() {
			return this.WILL_CALL_START_TIME;
		}

		public String SEPARATE_INVOICE;

		public String getSEPARATE_INVOICE() {
			return this.SEPARATE_INVOICE;
		}

		public String ORDER_DATE;

		public String getORDER_DATE() {
			return this.ORDER_DATE;
		}

		public String SHIP_OR_PICKUP_DATE;

		public String getSHIP_OR_PICKUP_DATE() {
			return this.SHIP_OR_PICKUP_DATE;
		}

		public String NEXT_ORDER_INDICATOR;

		public String getNEXT_ORDER_INDICATOR() {
			return this.NEXT_ORDER_INDICATOR;
		}

		public String CONFIRMATION_NO;

		public String getCONFIRMATION_NO() {
			return this.CONFIRMATION_NO;
		}

		public String ORDER_CONFIRMATION_PRINTED_FLAG;

		public String getORDER_CONFIRMATION_PRINTED_FLAG() {
			return this.ORDER_CONFIRMATION_PRINTED_FLAG;
		}

		public String ORDER_STATUS_CODE;

		public String getORDER_STATUS_CODE() {
			return this.ORDER_STATUS_CODE;
		}

		public BigDecimal TOTAL_FREEZER_CASES;

		public BigDecimal getTOTAL_FREEZER_CASES() {
			return this.TOTAL_FREEZER_CASES;
		}

		public BigDecimal TOTAL_FREEZER_SPLITS;

		public BigDecimal getTOTAL_FREEZER_SPLITS() {
			return this.TOTAL_FREEZER_SPLITS;
		}

		public BigDecimal TOTAL_COOLER_CASES;

		public BigDecimal getTOTAL_COOLER_CASES() {
			return this.TOTAL_COOLER_CASES;
		}

		public BigDecimal TOTAL_COOLER_SPLITS;

		public BigDecimal getTOTAL_COOLER_SPLITS() {
			return this.TOTAL_COOLER_SPLITS;
		}

		public BigDecimal TOTAL_DRY_CASES;

		public BigDecimal getTOTAL_DRY_CASES() {
			return this.TOTAL_DRY_CASES;
		}

		public BigDecimal TOTAL_DRY_SPLITS;

		public BigDecimal getTOTAL_DRY_SPLITS() {
			return this.TOTAL_DRY_SPLITS;
		}

		public BigDecimal TOTAL_NO_CASES_ORDER;

		public BigDecimal getTOTAL_NO_CASES_ORDER() {
			return this.TOTAL_NO_CASES_ORDER;
		}

		public BigDecimal TOTAL_NO_SPLITS_ORDER;

		public BigDecimal getTOTAL_NO_SPLITS_ORDER() {
			return this.TOTAL_NO_SPLITS_ORDER;
		}

		public BigDecimal TOTAL_ORDER_WEIGHT;

		public BigDecimal getTOTAL_ORDER_WEIGHT() {
			return this.TOTAL_ORDER_WEIGHT;
		}

		public BigDecimal TOTAL_CUBE;

		public BigDecimal getTOTAL_CUBE() {
			return this.TOTAL_CUBE;
		}

		public BigDecimal TOTAL_LINES;

		public BigDecimal getTOTAL_LINES() {
			return this.TOTAL_LINES;
		}

		public BigDecimal ORDER_TOTAL;

		public BigDecimal getORDER_TOTAL() {
			return this.ORDER_TOTAL;
		}

		public BigDecimal ORDER_GRAND_TOTAL;

		public BigDecimal getORDER_GRAND_TOTAL() {
			return this.ORDER_GRAND_TOTAL;
		}

		public BigDecimal ORDER_ENTRY_TIME;

		public BigDecimal getORDER_ENTRY_TIME() {
			return this.ORDER_ENTRY_TIME;
		}

		public String RECORD_TYPE_INDICATOR;

		public String getRECORD_TYPE_INDICATOR() {
			return this.RECORD_TYPE_INDICATOR;
		}

		public String DELIVERY_METHOD;

		public String getDELIVERY_METHOD() {
			return this.DELIVERY_METHOD;
		}

		public BigDecimal MANIFEST_NO;

		public BigDecimal getMANIFEST_NO() {
			return this.MANIFEST_NO;
		}

		public String IMMEDIATE_ORDER_FLAG;

		public String getIMMEDIATE_ORDER_FLAG() {
			return this.IMMEDIATE_ORDER_FLAG;
		}

		public BigDecimal BOOKING_ID;

		public BigDecimal getBOOKING_ID() {
			return this.BOOKING_ID;
		}

		public String INCOMPLETE_ORDER_FLAG;

		public String getINCOMPLETE_ORDER_FLAG() {
			return this.INCOMPLETE_ORDER_FLAG;
		}

		public String FOODSHOW_PROMOTION_ID;

		public String getFOODSHOW_PROMOTION_ID() {
			return this.FOODSHOW_PROMOTION_ID;
		}

		public String LAPTOP_ORDER_DATE;

		public String getLAPTOP_ORDER_DATE() {
			return this.LAPTOP_ORDER_DATE;
		}

		public String ACCOUNT_NO;

		public String getACCOUNT_NO() {
			return this.ACCOUNT_NO;
		}

		public String USER_FIELD_1;

		public String getUSER_FIELD_1() {
			return this.USER_FIELD_1;
		}

		public String DELIVERY_DATE;

		public String getDELIVERY_DATE() {
			return this.DELIVERY_DATE;
		}

		public String EMPLOYEE_NO;

		public String getEMPLOYEE_NO() {
			return this.EMPLOYEE_NO;
		}

		public String RESHIP_STATUS;

		public String getRESHIP_STATUS() {
			return this.RESHIP_STATUS;
		}

		public String HOLD_ORDER_FLAG;

		public String getHOLD_ORDER_FLAG() {
			return this.HOLD_ORDER_FLAG;
		}

		public String RELEASE_ORDER_FLAG;

		public String getRELEASE_ORDER_FLAG() {
			return this.RELEASE_ORDER_FLAG;
		}

		public String HOLD_ORDER_REASON_CODE;

		public String getHOLD_ORDER_REASON_CODE() {
			return this.HOLD_ORDER_REASON_CODE;
		}

		public String RELEASE_ORDER_REASON_CODE;

		public String getRELEASE_ORDER_REASON_CODE() {
			return this.RELEASE_ORDER_REASON_CODE;
		}

		public BigDecimal TAX_AMOUNT;

		public BigDecimal getTAX_AMOUNT() {
			return this.TAX_AMOUNT;
		}

		public String SEND_IMMEDIATE_ORDER_ROUTING;

		public String getSEND_IMMEDIATE_ORDER_ROUTING() {
			return this.SEND_IMMEDIATE_ORDER_ROUTING;
		}

		public String REMOTE_ORDER_ENTRY_MODE;

		public String getREMOTE_ORDER_ENTRY_MODE() {
			return this.REMOTE_ORDER_ENTRY_MODE;
		}

		public BigDecimal REMOTE_ORDER_CONFIRMATION_NO;

		public BigDecimal getREMOTE_ORDER_CONFIRMATION_NO() {
			return this.REMOTE_ORDER_CONFIRMATION_NO;
		}

		public String FAX_NO;

		public String getFAX_NO() {
			return this.FAX_NO;
		}

		public String PRIMARY_MA;

		public String getPRIMARY_MA() {
			return this.PRIMARY_MA;
		}

		public BigDecimal GENERIC_LAST_USED_NO;

		public BigDecimal getGENERIC_LAST_USED_NO() {
			return this.GENERIC_LAST_USED_NO;
		}

		public BigDecimal CALL_END_TIME;

		public BigDecimal getCALL_END_TIME() {
			return this.CALL_END_TIME;
		}

		public String CALL_START_TIME_INDICATOR;

		public String getCALL_START_TIME_INDICATOR() {
			return this.CALL_START_TIME_INDICATOR;
		}

		public String CALL_END_TIME_INDICATOR;

		public String getCALL_END_TIME_INDICATOR() {
			return this.CALL_END_TIME_INDICATOR;
		}

		public String RECORD_LOGICALLY_LOCKED_FLAG;

		public String getRECORD_LOGICALLY_LOCKED_FLAG() {
			return this.RECORD_LOGICALLY_LOCKED_FLAG;
		}

		public String ERROR_STATUS_FLAG;

		public String getERROR_STATUS_FLAG() {
			return this.ERROR_STATUS_FLAG;
		}

		public String REQUEST_STATUS_FLAG;

		public String getREQUEST_STATUS_FLAG() {
			return this.REQUEST_STATUS_FLAG;
		}

		public BigDecimal ORDER_DETAIL_LINE_NO;

		public BigDecimal getORDER_DETAIL_LINE_NO() {
			return this.ORDER_DETAIL_LINE_NO;
		}

		public String ENTITY_ID;

		public String getENTITY_ID() {
			return this.ENTITY_ID;
		}

		public String PARENT_ENTITY_1;

		public String getPARENT_ENTITY_1() {
			return this.PARENT_ENTITY_1;
		}

		public String PARENT_ENTITY_2;

		public String getPARENT_ENTITY_2() {
			return this.PARENT_ENTITY_2;
		}

		public String PARENT_ENTITY_3;

		public String getPARENT_ENTITY_3() {
			return this.PARENT_ENTITY_3;
		}

		public String CANCEL_DATE;

		public String getCANCEL_DATE() {
			return this.CANCEL_DATE;
		}

		public BigDecimal SERVICE_ORDER_NO;

		public BigDecimal getSERVICE_ORDER_NO() {
			return this.SERVICE_ORDER_NO;
		}

		public String CREATE_TARGET_INDICATOR;

		public String getCREATE_TARGET_INDICATOR() {
			return this.CREATE_TARGET_INDICATOR;
		}

		public String VENDOR_APPROVAL_NO;

		public String getVENDOR_APPROVAL_NO() {
			return this.VENDOR_APPROVAL_NO;
		}

		public String REQUESTED_BY;

		public String getREQUESTED_BY() {
			return this.REQUESTED_BY;
		}

		public String TARGET_DESC;

		public String getTARGET_DESC() {
			return this.TARGET_DESC;
		}

		public String BILL_BACK_VENDOR_FLAG;

		public String getBILL_BACK_VENDOR_FLAG() {
			return this.BILL_BACK_VENDOR_FLAG;
		}

		public BigDecimal NO_OF_AP_ROLL_DAYS;

		public BigDecimal getNO_OF_AP_ROLL_DAYS() {
			return this.NO_OF_AP_ROLL_DAYS;
		}

		public String RETURN_AUTH_NO;

		public String getRETURN_AUTH_NO() {
			return this.RETURN_AUTH_NO;
		}

		public String DISPENSER_EQUIPMENT_ITEM;

		public String getDISPENSER_EQUIPMENT_ITEM() {
			return this.DISPENSER_EQUIPMENT_ITEM;
		}

		public String LAPTOP_USER_FLAG;

		public String getLAPTOP_USER_FLAG() {
			return this.LAPTOP_USER_FLAG;
		}

		public BigDecimal LAPTOP_ORDER_NO;

		public BigDecimal getLAPTOP_ORDER_NO() {
			return this.LAPTOP_ORDER_NO;
		}

		public String LAPTOP_ZID_NO;

		public String getLAPTOP_ZID_NO() {
			return this.LAPTOP_ZID_NO;
		}

		public BigDecimal STOP_NO;

		public BigDecimal getSTOP_NO() {
			return this.STOP_NO;
		}

		public String ENTITY_UPDATED_FLAG;

		public String getENTITY_UPDATED_FLAG() {
			return this.ENTITY_UPDATED_FLAG;
		}

		public String MAJOR_CLASS;

		public String getMAJOR_CLASS() {
			return this.MAJOR_CLASS;
		}

		public String SWMS_RECOVERY_INVOICE_NO;

		public String getSWMS_RECOVERY_INVOICE_NO() {
			return this.SWMS_RECOVERY_INVOICE_NO;
		}

		public String DEFAULT_ROUTE_NO;

		public String getDEFAULT_ROUTE_NO() {
			return this.DEFAULT_ROUTE_NO;
		}

		public BigDecimal CONFIRM_NO;

		public BigDecimal getCONFIRM_NO() {
			return this.CONFIRM_NO;
		}

		public String CONTAINER_GROUP_ID;

		public String getCONTAINER_GROUP_ID() {
			return this.CONTAINER_GROUP_ID;
		}

		public String SEPARATE_CONTAINER_FLAG;

		public String getSEPARATE_CONTAINER_FLAG() {
			return this.SEPARATE_CONTAINER_FLAG;
		}

		public String CREATED_TIMESTAMP;

		public String getCREATED_TIMESTAMP() {
			return this.CREATED_TIMESTAMP;
		}

		public String CREATED_USER_ID;

		public String getCREATED_USER_ID() {
			return this.CREATED_USER_ID;
		}

		public String UPDATED_TIMESTAMP;

		public String getUPDATED_TIMESTAMP() {
			return this.UPDATED_TIMESTAMP;
		}

		public String UPDATED_USER_ID;

		public String getUPDATED_USER_ID() {
			return this.UPDATED_USER_ID;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ORDER_NO = (BigDecimal) dis.readObject();

					this.ORDER_TYPE = readString(dis);

					this.SHIP_TO_CUST = readString(dis);

					this.SHIPPING_ADDRESS_ID = readString(dis);

					this.NATIONAL_ACCOUNT_NO = readString(dis);

					this.PURCHASE_ORDER_NO = readString(dis);

					this.CUSTOMER_CATEGORY_CODE = readString(dis);

					this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();

					this.ALLOCATION_TYPE = readString(dis);

					this.ROUTE_TO_NO = readString(dis);

					this.ROUTE_NO = readString(dis);

					this.WILL_CALL_NAME = readString(dis);

					this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();

					this.SEPARATE_INVOICE = readString(dis);

					this.ORDER_DATE = readString(dis);

					this.SHIP_OR_PICKUP_DATE = readString(dis);

					this.NEXT_ORDER_INDICATOR = readString(dis);

					this.CONFIRMATION_NO = readString(dis);

					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);

					this.ORDER_STATUS_CODE = readString(dis);

					this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();

					this.TOTAL_CUBE = (BigDecimal) dis.readObject();

					this.TOTAL_LINES = (BigDecimal) dis.readObject();

					this.ORDER_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();

					this.RECORD_TYPE_INDICATOR = readString(dis);

					this.DELIVERY_METHOD = readString(dis);

					this.MANIFEST_NO = (BigDecimal) dis.readObject();

					this.IMMEDIATE_ORDER_FLAG = readString(dis);

					this.BOOKING_ID = (BigDecimal) dis.readObject();

					this.INCOMPLETE_ORDER_FLAG = readString(dis);

					this.FOODSHOW_PROMOTION_ID = readString(dis);

					this.LAPTOP_ORDER_DATE = readString(dis);

					this.ACCOUNT_NO = readString(dis);

					this.USER_FIELD_1 = readString(dis);

					this.DELIVERY_DATE = readString(dis);

					this.EMPLOYEE_NO = readString(dis);

					this.RESHIP_STATUS = readString(dis);

					this.HOLD_ORDER_FLAG = readString(dis);

					this.RELEASE_ORDER_FLAG = readString(dis);

					this.HOLD_ORDER_REASON_CODE = readString(dis);

					this.RELEASE_ORDER_REASON_CODE = readString(dis);

					this.TAX_AMOUNT = (BigDecimal) dis.readObject();

					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);

					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);

					this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();

					this.FAX_NO = readString(dis);

					this.PRIMARY_MA = readString(dis);

					this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();

					this.CALL_END_TIME = (BigDecimal) dis.readObject();

					this.CALL_START_TIME_INDICATOR = readString(dis);

					this.CALL_END_TIME_INDICATOR = readString(dis);

					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);

					this.ERROR_STATUS_FLAG = readString(dis);

					this.REQUEST_STATUS_FLAG = readString(dis);

					this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();

					this.ENTITY_ID = readString(dis);

					this.PARENT_ENTITY_1 = readString(dis);

					this.PARENT_ENTITY_2 = readString(dis);

					this.PARENT_ENTITY_3 = readString(dis);

					this.CANCEL_DATE = readString(dis);

					this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();

					this.CREATE_TARGET_INDICATOR = readString(dis);

					this.VENDOR_APPROVAL_NO = readString(dis);

					this.REQUESTED_BY = readString(dis);

					this.TARGET_DESC = readString(dis);

					this.BILL_BACK_VENDOR_FLAG = readString(dis);

					this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();

					this.RETURN_AUTH_NO = readString(dis);

					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);

					this.LAPTOP_USER_FLAG = readString(dis);

					this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();

					this.LAPTOP_ZID_NO = readString(dis);

					this.STOP_NO = (BigDecimal) dis.readObject();

					this.ENTITY_UPDATED_FLAG = readString(dis);

					this.MAJOR_CLASS = readString(dis);

					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);

					this.DEFAULT_ROUTE_NO = readString(dis);

					this.CONFIRM_NO = (BigDecimal) dis.readObject();

					this.CONTAINER_GROUP_ID = readString(dis);

					this.SEPARATE_CONTAINER_FLAG = readString(dis);

					this.CREATED_TIMESTAMP = readString(dis);

					this.CREATED_USER_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readString(dis);

					this.UPDATED_USER_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.ORDER_NO = (BigDecimal) dis.readObject();

					this.ORDER_TYPE = readString(dis);

					this.SHIP_TO_CUST = readString(dis);

					this.SHIPPING_ADDRESS_ID = readString(dis);

					this.NATIONAL_ACCOUNT_NO = readString(dis);

					this.PURCHASE_ORDER_NO = readString(dis);

					this.CUSTOMER_CATEGORY_CODE = readString(dis);

					this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();

					this.ALLOCATION_TYPE = readString(dis);

					this.ROUTE_TO_NO = readString(dis);

					this.ROUTE_NO = readString(dis);

					this.WILL_CALL_NAME = readString(dis);

					this.WILL_CALL_START_TIME = (BigDecimal) dis.readObject();

					this.SEPARATE_INVOICE = readString(dis);

					this.ORDER_DATE = readString(dis);

					this.SHIP_OR_PICKUP_DATE = readString(dis);

					this.NEXT_ORDER_INDICATOR = readString(dis);

					this.CONFIRMATION_NO = readString(dis);

					this.ORDER_CONFIRMATION_PRINTED_FLAG = readString(dis);

					this.ORDER_STATUS_CODE = readString(dis);

					this.TOTAL_FREEZER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_FREEZER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_COOLER_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_CASES = (BigDecimal) dis.readObject();

					this.TOTAL_DRY_SPLITS = (BigDecimal) dis.readObject();

					this.TOTAL_NO_CASES_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_NO_SPLITS_ORDER = (BigDecimal) dis.readObject();

					this.TOTAL_ORDER_WEIGHT = (BigDecimal) dis.readObject();

					this.TOTAL_CUBE = (BigDecimal) dis.readObject();

					this.TOTAL_LINES = (BigDecimal) dis.readObject();

					this.ORDER_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_GRAND_TOTAL = (BigDecimal) dis.readObject();

					this.ORDER_ENTRY_TIME = (BigDecimal) dis.readObject();

					this.RECORD_TYPE_INDICATOR = readString(dis);

					this.DELIVERY_METHOD = readString(dis);

					this.MANIFEST_NO = (BigDecimal) dis.readObject();

					this.IMMEDIATE_ORDER_FLAG = readString(dis);

					this.BOOKING_ID = (BigDecimal) dis.readObject();

					this.INCOMPLETE_ORDER_FLAG = readString(dis);

					this.FOODSHOW_PROMOTION_ID = readString(dis);

					this.LAPTOP_ORDER_DATE = readString(dis);

					this.ACCOUNT_NO = readString(dis);

					this.USER_FIELD_1 = readString(dis);

					this.DELIVERY_DATE = readString(dis);

					this.EMPLOYEE_NO = readString(dis);

					this.RESHIP_STATUS = readString(dis);

					this.HOLD_ORDER_FLAG = readString(dis);

					this.RELEASE_ORDER_FLAG = readString(dis);

					this.HOLD_ORDER_REASON_CODE = readString(dis);

					this.RELEASE_ORDER_REASON_CODE = readString(dis);

					this.TAX_AMOUNT = (BigDecimal) dis.readObject();

					this.SEND_IMMEDIATE_ORDER_ROUTING = readString(dis);

					this.REMOTE_ORDER_ENTRY_MODE = readString(dis);

					this.REMOTE_ORDER_CONFIRMATION_NO = (BigDecimal) dis.readObject();

					this.FAX_NO = readString(dis);

					this.PRIMARY_MA = readString(dis);

					this.GENERIC_LAST_USED_NO = (BigDecimal) dis.readObject();

					this.CALL_END_TIME = (BigDecimal) dis.readObject();

					this.CALL_START_TIME_INDICATOR = readString(dis);

					this.CALL_END_TIME_INDICATOR = readString(dis);

					this.RECORD_LOGICALLY_LOCKED_FLAG = readString(dis);

					this.ERROR_STATUS_FLAG = readString(dis);

					this.REQUEST_STATUS_FLAG = readString(dis);

					this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();

					this.ENTITY_ID = readString(dis);

					this.PARENT_ENTITY_1 = readString(dis);

					this.PARENT_ENTITY_2 = readString(dis);

					this.PARENT_ENTITY_3 = readString(dis);

					this.CANCEL_DATE = readString(dis);

					this.SERVICE_ORDER_NO = (BigDecimal) dis.readObject();

					this.CREATE_TARGET_INDICATOR = readString(dis);

					this.VENDOR_APPROVAL_NO = readString(dis);

					this.REQUESTED_BY = readString(dis);

					this.TARGET_DESC = readString(dis);

					this.BILL_BACK_VENDOR_FLAG = readString(dis);

					this.NO_OF_AP_ROLL_DAYS = (BigDecimal) dis.readObject();

					this.RETURN_AUTH_NO = readString(dis);

					this.DISPENSER_EQUIPMENT_ITEM = readString(dis);

					this.LAPTOP_USER_FLAG = readString(dis);

					this.LAPTOP_ORDER_NO = (BigDecimal) dis.readObject();

					this.LAPTOP_ZID_NO = readString(dis);

					this.STOP_NO = (BigDecimal) dis.readObject();

					this.ENTITY_UPDATED_FLAG = readString(dis);

					this.MAJOR_CLASS = readString(dis);

					this.SWMS_RECOVERY_INVOICE_NO = readString(dis);

					this.DEFAULT_ROUTE_NO = readString(dis);

					this.CONFIRM_NO = (BigDecimal) dis.readObject();

					this.CONTAINER_GROUP_ID = readString(dis);

					this.SEPARATE_CONTAINER_FLAG = readString(dis);

					this.CREATED_TIMESTAMP = readString(dis);

					this.CREATED_USER_ID = readString(dis);

					this.UPDATED_TIMESTAMP = readString(dis);

					this.UPDATED_USER_ID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_NO);

				// String

				writeString(this.ORDER_TYPE, dos);

				// String

				writeString(this.SHIP_TO_CUST, dos);

				// String

				writeString(this.SHIPPING_ADDRESS_ID, dos);

				// String

				writeString(this.NATIONAL_ACCOUNT_NO, dos);

				// String

				writeString(this.PURCHASE_ORDER_NO, dos);

				// String

				writeString(this.CUSTOMER_CATEGORY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.ROUTING_GROUP_CODE);

				// String

				writeString(this.ALLOCATION_TYPE, dos);

				// String

				writeString(this.ROUTE_TO_NO, dos);

				// String

				writeString(this.ROUTE_NO, dos);

				// String

				writeString(this.WILL_CALL_NAME, dos);

				// BigDecimal

				dos.writeObject(this.WILL_CALL_START_TIME);

				// String

				writeString(this.SEPARATE_INVOICE, dos);

				// String

				writeString(this.ORDER_DATE, dos);

				// String

				writeString(this.SHIP_OR_PICKUP_DATE, dos);

				// String

				writeString(this.NEXT_ORDER_INDICATOR, dos);

				// String

				writeString(this.CONFIRMATION_NO, dos);

				// String

				writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG, dos);

				// String

				writeString(this.ORDER_STATUS_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_CASES_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_ORDER_WEIGHT);

				// BigDecimal

				dos.writeObject(this.TOTAL_CUBE);

				// BigDecimal

				dos.writeObject(this.TOTAL_LINES);

				// BigDecimal

				dos.writeObject(this.ORDER_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_GRAND_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_ENTRY_TIME);

				// String

				writeString(this.RECORD_TYPE_INDICATOR, dos);

				// String

				writeString(this.DELIVERY_METHOD, dos);

				// BigDecimal

				dos.writeObject(this.MANIFEST_NO);

				// String

				writeString(this.IMMEDIATE_ORDER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.BOOKING_ID);

				// String

				writeString(this.INCOMPLETE_ORDER_FLAG, dos);

				// String

				writeString(this.FOODSHOW_PROMOTION_ID, dos);

				// String

				writeString(this.LAPTOP_ORDER_DATE, dos);

				// String

				writeString(this.ACCOUNT_NO, dos);

				// String

				writeString(this.USER_FIELD_1, dos);

				// String

				writeString(this.DELIVERY_DATE, dos);

				// String

				writeString(this.EMPLOYEE_NO, dos);

				// String

				writeString(this.RESHIP_STATUS, dos);

				// String

				writeString(this.HOLD_ORDER_FLAG, dos);

				// String

				writeString(this.RELEASE_ORDER_FLAG, dos);

				// String

				writeString(this.HOLD_ORDER_REASON_CODE, dos);

				// String

				writeString(this.RELEASE_ORDER_REASON_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TAX_AMOUNT);

				// String

				writeString(this.SEND_IMMEDIATE_ORDER_ROUTING, dos);

				// String

				writeString(this.REMOTE_ORDER_ENTRY_MODE, dos);

				// BigDecimal

				dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);

				// String

				writeString(this.FAX_NO, dos);

				// String

				writeString(this.PRIMARY_MA, dos);

				// BigDecimal

				dos.writeObject(this.GENERIC_LAST_USED_NO);

				// BigDecimal

				dos.writeObject(this.CALL_END_TIME);

				// String

				writeString(this.CALL_START_TIME_INDICATOR, dos);

				// String

				writeString(this.CALL_END_TIME_INDICATOR, dos);

				// String

				writeString(this.RECORD_LOGICALLY_LOCKED_FLAG, dos);

				// String

				writeString(this.ERROR_STATUS_FLAG, dos);

				// String

				writeString(this.REQUEST_STATUS_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_DETAIL_LINE_NO);

				// String

				writeString(this.ENTITY_ID, dos);

				// String

				writeString(this.PARENT_ENTITY_1, dos);

				// String

				writeString(this.PARENT_ENTITY_2, dos);

				// String

				writeString(this.PARENT_ENTITY_3, dos);

				// String

				writeString(this.CANCEL_DATE, dos);

				// BigDecimal

				dos.writeObject(this.SERVICE_ORDER_NO);

				// String

				writeString(this.CREATE_TARGET_INDICATOR, dos);

				// String

				writeString(this.VENDOR_APPROVAL_NO, dos);

				// String

				writeString(this.REQUESTED_BY, dos);

				// String

				writeString(this.TARGET_DESC, dos);

				// String

				writeString(this.BILL_BACK_VENDOR_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.NO_OF_AP_ROLL_DAYS);

				// String

				writeString(this.RETURN_AUTH_NO, dos);

				// String

				writeString(this.DISPENSER_EQUIPMENT_ITEM, dos);

				// String

				writeString(this.LAPTOP_USER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.LAPTOP_ORDER_NO);

				// String

				writeString(this.LAPTOP_ZID_NO, dos);

				// BigDecimal

				dos.writeObject(this.STOP_NO);

				// String

				writeString(this.ENTITY_UPDATED_FLAG, dos);

				// String

				writeString(this.MAJOR_CLASS, dos);

				// String

				writeString(this.SWMS_RECOVERY_INVOICE_NO, dos);

				// String

				writeString(this.DEFAULT_ROUTE_NO, dos);

				// BigDecimal

				dos.writeObject(this.CONFIRM_NO);

				// String

				writeString(this.CONTAINER_GROUP_ID, dos);

				// String

				writeString(this.SEPARATE_CONTAINER_FLAG, dos);

				// String

				writeString(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// String

				writeString(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_NO);

				// String

				writeString(this.ORDER_TYPE, dos);

				// String

				writeString(this.SHIP_TO_CUST, dos);

				// String

				writeString(this.SHIPPING_ADDRESS_ID, dos);

				// String

				writeString(this.NATIONAL_ACCOUNT_NO, dos);

				// String

				writeString(this.PURCHASE_ORDER_NO, dos);

				// String

				writeString(this.CUSTOMER_CATEGORY_CODE, dos);

				// BigDecimal

				dos.writeObject(this.ROUTING_GROUP_CODE);

				// String

				writeString(this.ALLOCATION_TYPE, dos);

				// String

				writeString(this.ROUTE_TO_NO, dos);

				// String

				writeString(this.ROUTE_NO, dos);

				// String

				writeString(this.WILL_CALL_NAME, dos);

				// BigDecimal

				dos.writeObject(this.WILL_CALL_START_TIME);

				// String

				writeString(this.SEPARATE_INVOICE, dos);

				// String

				writeString(this.ORDER_DATE, dos);

				// String

				writeString(this.SHIP_OR_PICKUP_DATE, dos);

				// String

				writeString(this.NEXT_ORDER_INDICATOR, dos);

				// String

				writeString(this.CONFIRMATION_NO, dos);

				// String

				writeString(this.ORDER_CONFIRMATION_PRINTED_FLAG, dos);

				// String

				writeString(this.ORDER_STATUS_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_FREEZER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_COOLER_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_CASES);

				// BigDecimal

				dos.writeObject(this.TOTAL_DRY_SPLITS);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_CASES_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_NO_SPLITS_ORDER);

				// BigDecimal

				dos.writeObject(this.TOTAL_ORDER_WEIGHT);

				// BigDecimal

				dos.writeObject(this.TOTAL_CUBE);

				// BigDecimal

				dos.writeObject(this.TOTAL_LINES);

				// BigDecimal

				dos.writeObject(this.ORDER_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_GRAND_TOTAL);

				// BigDecimal

				dos.writeObject(this.ORDER_ENTRY_TIME);

				// String

				writeString(this.RECORD_TYPE_INDICATOR, dos);

				// String

				writeString(this.DELIVERY_METHOD, dos);

				// BigDecimal

				dos.writeObject(this.MANIFEST_NO);

				// String

				writeString(this.IMMEDIATE_ORDER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.BOOKING_ID);

				// String

				writeString(this.INCOMPLETE_ORDER_FLAG, dos);

				// String

				writeString(this.FOODSHOW_PROMOTION_ID, dos);

				// String

				writeString(this.LAPTOP_ORDER_DATE, dos);

				// String

				writeString(this.ACCOUNT_NO, dos);

				// String

				writeString(this.USER_FIELD_1, dos);

				// String

				writeString(this.DELIVERY_DATE, dos);

				// String

				writeString(this.EMPLOYEE_NO, dos);

				// String

				writeString(this.RESHIP_STATUS, dos);

				// String

				writeString(this.HOLD_ORDER_FLAG, dos);

				// String

				writeString(this.RELEASE_ORDER_FLAG, dos);

				// String

				writeString(this.HOLD_ORDER_REASON_CODE, dos);

				// String

				writeString(this.RELEASE_ORDER_REASON_CODE, dos);

				// BigDecimal

				dos.writeObject(this.TAX_AMOUNT);

				// String

				writeString(this.SEND_IMMEDIATE_ORDER_ROUTING, dos);

				// String

				writeString(this.REMOTE_ORDER_ENTRY_MODE, dos);

				// BigDecimal

				dos.writeObject(this.REMOTE_ORDER_CONFIRMATION_NO);

				// String

				writeString(this.FAX_NO, dos);

				// String

				writeString(this.PRIMARY_MA, dos);

				// BigDecimal

				dos.writeObject(this.GENERIC_LAST_USED_NO);

				// BigDecimal

				dos.writeObject(this.CALL_END_TIME);

				// String

				writeString(this.CALL_START_TIME_INDICATOR, dos);

				// String

				writeString(this.CALL_END_TIME_INDICATOR, dos);

				// String

				writeString(this.RECORD_LOGICALLY_LOCKED_FLAG, dos);

				// String

				writeString(this.ERROR_STATUS_FLAG, dos);

				// String

				writeString(this.REQUEST_STATUS_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.ORDER_DETAIL_LINE_NO);

				// String

				writeString(this.ENTITY_ID, dos);

				// String

				writeString(this.PARENT_ENTITY_1, dos);

				// String

				writeString(this.PARENT_ENTITY_2, dos);

				// String

				writeString(this.PARENT_ENTITY_3, dos);

				// String

				writeString(this.CANCEL_DATE, dos);

				// BigDecimal

				dos.writeObject(this.SERVICE_ORDER_NO);

				// String

				writeString(this.CREATE_TARGET_INDICATOR, dos);

				// String

				writeString(this.VENDOR_APPROVAL_NO, dos);

				// String

				writeString(this.REQUESTED_BY, dos);

				// String

				writeString(this.TARGET_DESC, dos);

				// String

				writeString(this.BILL_BACK_VENDOR_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.NO_OF_AP_ROLL_DAYS);

				// String

				writeString(this.RETURN_AUTH_NO, dos);

				// String

				writeString(this.DISPENSER_EQUIPMENT_ITEM, dos);

				// String

				writeString(this.LAPTOP_USER_FLAG, dos);

				// BigDecimal

				dos.writeObject(this.LAPTOP_ORDER_NO);

				// String

				writeString(this.LAPTOP_ZID_NO, dos);

				// BigDecimal

				dos.writeObject(this.STOP_NO);

				// String

				writeString(this.ENTITY_UPDATED_FLAG, dos);

				// String

				writeString(this.MAJOR_CLASS, dos);

				// String

				writeString(this.SWMS_RECOVERY_INVOICE_NO, dos);

				// String

				writeString(this.DEFAULT_ROUTE_NO, dos);

				// BigDecimal

				dos.writeObject(this.CONFIRM_NO);

				// String

				writeString(this.CONTAINER_GROUP_ID, dos);

				// String

				writeString(this.SEPARATE_CONTAINER_FLAG, dos);

				// String

				writeString(this.CREATED_TIMESTAMP, dos);

				// String

				writeString(this.CREATED_USER_ID, dos);

				// String

				writeString(this.UPDATED_TIMESTAMP, dos);

				// String

				writeString(this.UPDATED_USER_ID, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",ORDER_NO=" + String.valueOf(ORDER_NO));
			sb.append(",ORDER_TYPE=" + ORDER_TYPE);
			sb.append(",SHIP_TO_CUST=" + SHIP_TO_CUST);
			sb.append(",SHIPPING_ADDRESS_ID=" + SHIPPING_ADDRESS_ID);
			sb.append(",NATIONAL_ACCOUNT_NO=" + NATIONAL_ACCOUNT_NO);
			sb.append(",PURCHASE_ORDER_NO=" + PURCHASE_ORDER_NO);
			sb.append(",CUSTOMER_CATEGORY_CODE=" + CUSTOMER_CATEGORY_CODE);
			sb.append(",ROUTING_GROUP_CODE=" + String.valueOf(ROUTING_GROUP_CODE));
			sb.append(",ALLOCATION_TYPE=" + ALLOCATION_TYPE);
			sb.append(",ROUTE_TO_NO=" + ROUTE_TO_NO);
			sb.append(",ROUTE_NO=" + ROUTE_NO);
			sb.append(",WILL_CALL_NAME=" + WILL_CALL_NAME);
			sb.append(",WILL_CALL_START_TIME=" + String.valueOf(WILL_CALL_START_TIME));
			sb.append(",SEPARATE_INVOICE=" + SEPARATE_INVOICE);
			sb.append(",ORDER_DATE=" + ORDER_DATE);
			sb.append(",SHIP_OR_PICKUP_DATE=" + SHIP_OR_PICKUP_DATE);
			sb.append(",NEXT_ORDER_INDICATOR=" + NEXT_ORDER_INDICATOR);
			sb.append(",CONFIRMATION_NO=" + CONFIRMATION_NO);
			sb.append(",ORDER_CONFIRMATION_PRINTED_FLAG=" + ORDER_CONFIRMATION_PRINTED_FLAG);
			sb.append(",ORDER_STATUS_CODE=" + ORDER_STATUS_CODE);
			sb.append(",TOTAL_FREEZER_CASES=" + String.valueOf(TOTAL_FREEZER_CASES));
			sb.append(",TOTAL_FREEZER_SPLITS=" + String.valueOf(TOTAL_FREEZER_SPLITS));
			sb.append(",TOTAL_COOLER_CASES=" + String.valueOf(TOTAL_COOLER_CASES));
			sb.append(",TOTAL_COOLER_SPLITS=" + String.valueOf(TOTAL_COOLER_SPLITS));
			sb.append(",TOTAL_DRY_CASES=" + String.valueOf(TOTAL_DRY_CASES));
			sb.append(",TOTAL_DRY_SPLITS=" + String.valueOf(TOTAL_DRY_SPLITS));
			sb.append(",TOTAL_NO_CASES_ORDER=" + String.valueOf(TOTAL_NO_CASES_ORDER));
			sb.append(",TOTAL_NO_SPLITS_ORDER=" + String.valueOf(TOTAL_NO_SPLITS_ORDER));
			sb.append(",TOTAL_ORDER_WEIGHT=" + String.valueOf(TOTAL_ORDER_WEIGHT));
			sb.append(",TOTAL_CUBE=" + String.valueOf(TOTAL_CUBE));
			sb.append(",TOTAL_LINES=" + String.valueOf(TOTAL_LINES));
			sb.append(",ORDER_TOTAL=" + String.valueOf(ORDER_TOTAL));
			sb.append(",ORDER_GRAND_TOTAL=" + String.valueOf(ORDER_GRAND_TOTAL));
			sb.append(",ORDER_ENTRY_TIME=" + String.valueOf(ORDER_ENTRY_TIME));
			sb.append(",RECORD_TYPE_INDICATOR=" + RECORD_TYPE_INDICATOR);
			sb.append(",DELIVERY_METHOD=" + DELIVERY_METHOD);
			sb.append(",MANIFEST_NO=" + String.valueOf(MANIFEST_NO));
			sb.append(",IMMEDIATE_ORDER_FLAG=" + IMMEDIATE_ORDER_FLAG);
			sb.append(",BOOKING_ID=" + String.valueOf(BOOKING_ID));
			sb.append(",INCOMPLETE_ORDER_FLAG=" + INCOMPLETE_ORDER_FLAG);
			sb.append(",FOODSHOW_PROMOTION_ID=" + FOODSHOW_PROMOTION_ID);
			sb.append(",LAPTOP_ORDER_DATE=" + LAPTOP_ORDER_DATE);
			sb.append(",ACCOUNT_NO=" + ACCOUNT_NO);
			sb.append(",USER_FIELD_1=" + USER_FIELD_1);
			sb.append(",DELIVERY_DATE=" + DELIVERY_DATE);
			sb.append(",EMPLOYEE_NO=" + EMPLOYEE_NO);
			sb.append(",RESHIP_STATUS=" + RESHIP_STATUS);
			sb.append(",HOLD_ORDER_FLAG=" + HOLD_ORDER_FLAG);
			sb.append(",RELEASE_ORDER_FLAG=" + RELEASE_ORDER_FLAG);
			sb.append(",HOLD_ORDER_REASON_CODE=" + HOLD_ORDER_REASON_CODE);
			sb.append(",RELEASE_ORDER_REASON_CODE=" + RELEASE_ORDER_REASON_CODE);
			sb.append(",TAX_AMOUNT=" + String.valueOf(TAX_AMOUNT));
			sb.append(",SEND_IMMEDIATE_ORDER_ROUTING=" + SEND_IMMEDIATE_ORDER_ROUTING);
			sb.append(",REMOTE_ORDER_ENTRY_MODE=" + REMOTE_ORDER_ENTRY_MODE);
			sb.append(",REMOTE_ORDER_CONFIRMATION_NO=" + String.valueOf(REMOTE_ORDER_CONFIRMATION_NO));
			sb.append(",FAX_NO=" + FAX_NO);
			sb.append(",PRIMARY_MA=" + PRIMARY_MA);
			sb.append(",GENERIC_LAST_USED_NO=" + String.valueOf(GENERIC_LAST_USED_NO));
			sb.append(",CALL_END_TIME=" + String.valueOf(CALL_END_TIME));
			sb.append(",CALL_START_TIME_INDICATOR=" + CALL_START_TIME_INDICATOR);
			sb.append(",CALL_END_TIME_INDICATOR=" + CALL_END_TIME_INDICATOR);
			sb.append(",RECORD_LOGICALLY_LOCKED_FLAG=" + RECORD_LOGICALLY_LOCKED_FLAG);
			sb.append(",ERROR_STATUS_FLAG=" + ERROR_STATUS_FLAG);
			sb.append(",REQUEST_STATUS_FLAG=" + REQUEST_STATUS_FLAG);
			sb.append(",ORDER_DETAIL_LINE_NO=" + String.valueOf(ORDER_DETAIL_LINE_NO));
			sb.append(",ENTITY_ID=" + ENTITY_ID);
			sb.append(",PARENT_ENTITY_1=" + PARENT_ENTITY_1);
			sb.append(",PARENT_ENTITY_2=" + PARENT_ENTITY_2);
			sb.append(",PARENT_ENTITY_3=" + PARENT_ENTITY_3);
			sb.append(",CANCEL_DATE=" + CANCEL_DATE);
			sb.append(",SERVICE_ORDER_NO=" + String.valueOf(SERVICE_ORDER_NO));
			sb.append(",CREATE_TARGET_INDICATOR=" + CREATE_TARGET_INDICATOR);
			sb.append(",VENDOR_APPROVAL_NO=" + VENDOR_APPROVAL_NO);
			sb.append(",REQUESTED_BY=" + REQUESTED_BY);
			sb.append(",TARGET_DESC=" + TARGET_DESC);
			sb.append(",BILL_BACK_VENDOR_FLAG=" + BILL_BACK_VENDOR_FLAG);
			sb.append(",NO_OF_AP_ROLL_DAYS=" + String.valueOf(NO_OF_AP_ROLL_DAYS));
			sb.append(",RETURN_AUTH_NO=" + RETURN_AUTH_NO);
			sb.append(",DISPENSER_EQUIPMENT_ITEM=" + DISPENSER_EQUIPMENT_ITEM);
			sb.append(",LAPTOP_USER_FLAG=" + LAPTOP_USER_FLAG);
			sb.append(",LAPTOP_ORDER_NO=" + String.valueOf(LAPTOP_ORDER_NO));
			sb.append(",LAPTOP_ZID_NO=" + LAPTOP_ZID_NO);
			sb.append(",STOP_NO=" + String.valueOf(STOP_NO));
			sb.append(",ENTITY_UPDATED_FLAG=" + ENTITY_UPDATED_FLAG);
			sb.append(",MAJOR_CLASS=" + MAJOR_CLASS);
			sb.append(",SWMS_RECOVERY_INVOICE_NO=" + SWMS_RECOVERY_INVOICE_NO);
			sb.append(",DEFAULT_ROUTE_NO=" + DEFAULT_ROUTE_NO);
			sb.append(",CONFIRM_NO=" + String.valueOf(CONFIRM_NO));
			sb.append(",CONTAINER_GROUP_ID=" + CONTAINER_GROUP_ID);
			sb.append(",SEPARATE_CONTAINER_FLAG=" + SEPARATE_CONTAINER_FLAG);
			sb.append(",CREATED_TIMESTAMP=" + CREATED_TIMESTAMP);
			sb.append(",CREATED_USER_ID=" + CREATED_USER_ID);
			sb.append(",UPDATED_TIMESTAMP=" + UPDATED_TIMESTAMP);
			sb.append(",UPDATED_USER_ID=" + UPDATED_USER_ID);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[0];

		public BigDecimal B6ORNO;

		public BigDecimal getB6ORNO() {
			return this.B6ORNO;
		}

		public String B6ORTY;

		public String getB6ORTY() {
			return this.B6ORTY;
		}

		public String B6CUNO;

		public String getB6CUNO() {
			return this.B6CUNO;
		}

		public String B6SADD;

		public String getB6SADD() {
			return this.B6SADD;
		}

		public String B6NANO;

		public String getB6NANO() {
			return this.B6NANO;
		}

		public String B6PONU;

		public String getB6PONU() {
			return this.B6PONU;
		}

		public String B6CATG;

		public String getB6CATG() {
			return this.B6CATG;
		}

		public BigDecimal B6TZNU;

		public BigDecimal getB6TZNU() {
			return this.B6TZNU;
		}

		public String B6ALTY;

		public String getB6ALTY() {
			return this.B6ALTY;
		}

		public String B6RTNO;

		public String getB6RTNO() {
			return this.B6RTNO;
		}

		public String B6RTNU;

		public String getB6RTNU() {
			return this.B6RTNU;
		}

		public String B6WCNM;

		public String getB6WCNM() {
			return this.B6WCNM;
		}

		public BigDecimal B6WCTM;

		public BigDecimal getB6WCTM() {
			return this.B6WCTM;
		}

		public String B6SEIN;

		public String getB6SEIN() {
			return this.B6SEIN;
		}

		public BigDecimal B6ORDT;

		public BigDecimal getB6ORDT() {
			return this.B6ORDT;
		}

		public BigDecimal B6SHDT;

		public BigDecimal getB6SHDT() {
			return this.B6SHDT;
		}

		public String B6WNOI;

		public String getB6WNOI() {
			return this.B6WNOI;
		}

		public String B6TCFN;

		public String getB6TCFN() {
			return this.B6TCFN;
		}

		public String B6OCFP;

		public String getB6OCFP() {
			return this.B6OCFP;
		}

		public String B6ORST;

		public String getB6ORST() {
			return this.B6ORST;
		}

		public BigDecimal B6TFZC;

		public BigDecimal getB6TFZC() {
			return this.B6TFZC;
		}

		public BigDecimal B6TFZS;

		public BigDecimal getB6TFZS() {
			return this.B6TFZS;
		}

		public BigDecimal B6TCLC;

		public BigDecimal getB6TCLC() {
			return this.B6TCLC;
		}

		public BigDecimal B6TCLS;

		public BigDecimal getB6TCLS() {
			return this.B6TCLS;
		}

		public BigDecimal B6TDRC;

		public BigDecimal getB6TDRC() {
			return this.B6TDRC;
		}

		public BigDecimal B6TDRS;

		public BigDecimal getB6TDRS() {
			return this.B6TDRS;
		}

		public BigDecimal B6TTNC;

		public BigDecimal getB6TTNC() {
			return this.B6TTNC;
		}

		public BigDecimal B6TTSP;

		public BigDecimal getB6TTSP() {
			return this.B6TTSP;
		}

		public BigDecimal B6TTOW;

		public BigDecimal getB6TTOW() {
			return this.B6TTOW;
		}

		public BigDecimal B6TTOC;

		public BigDecimal getB6TTOC() {
			return this.B6TTOC;
		}

		public BigDecimal B6TTL1;

		public BigDecimal getB6TTL1() {
			return this.B6TTL1;
		}

		public BigDecimal B6TTOR;

		public BigDecimal getB6TTOR() {
			return this.B6TTOR;
		}

		public BigDecimal B6TTOG;

		public BigDecimal getB6TTOG() {
			return this.B6TTOG;
		}

		public BigDecimal B6ORTM;

		public BigDecimal getB6ORTM() {
			return this.B6ORTM;
		}

		public String B6BTRT;

		public String getB6BTRT() {
			return this.B6BTRT;
		}

		public String B6DELM;

		public String getB6DELM() {
			return this.B6DELM;
		}

		public BigDecimal B6MNFS;

		public BigDecimal getB6MNFS() {
			return this.B6MNFS;
		}

		public String B6IOFL;

		public String getB6IOFL() {
			return this.B6IOFL;
		}

		public BigDecimal B6BOKI;

		public BigDecimal getB6BOKI() {
			return this.B6BOKI;
		}

		public String B6IORF;

		public String getB6IORF() {
			return this.B6IORF;
		}

		public String B6IDFP;

		public String getB6IDFP() {
			return this.B6IDFP;
		}

		public BigDecimal B6LODT;

		public BigDecimal getB6LODT() {
			return this.B6LODT;
		}

		public String B6ACT1;

		public String getB6ACT1() {
			return this.B6ACT1;
		}

		public String B6USR1;

		public String getB6USR1() {
			return this.B6USR1;
		}

		public BigDecimal B6DLDT;

		public BigDecimal getB6DLDT() {
			return this.B6DLDT;
		}

		public String B6EMP;

		public String getB6EMP() {
			return this.B6EMP;
		}

		public String B6STRE;

		public String getB6STRE() {
			return this.B6STRE;
		}

		public String B6HOFL;

		public String getB6HOFL() {
			return this.B6HOFL;
		}

		public String B6ROFL;

		public String getB6ROFL() {
			return this.B6ROFL;
		}

		public String B6HORC;

		public String getB6HORC() {
			return this.B6HORC;
		}

		public String B6RORC;

		public String getB6RORC() {
			return this.B6RORC;
		}

		public BigDecimal B6TXAM;

		public BigDecimal getB6TXAM() {
			return this.B6TXAM;
		}

		public String B6SIOR;

		public String getB6SIOR() {
			return this.B6SIOR;
		}

		public String B6ROEM;

		public String getB6ROEM() {
			return this.B6ROEM;
		}

		public BigDecimal B6RMCN;

		public BigDecimal getB6RMCN() {
			return this.B6RMCN;
		}

		public String B6FAX;

		public String getB6FAX() {
			return this.B6FAX;
		}

		public String B6PRMA;

		public String getB6PRMA() {
			return this.B6PRMA;
		}

		public BigDecimal B6GCNO;

		public BigDecimal getB6GCNO() {
			return this.B6GCNO;
		}

		public BigDecimal B6WCET;

		public BigDecimal getB6WCET() {
			return this.B6WCET;
		}

		public String B6WCST;

		public String getB6WCST() {
			return this.B6WCST;
		}

		public String B6WCEN;

		public String getB6WCEN() {
			return this.B6WCEN;
		}

		public String B6RLLF;

		public String getB6RLLF() {
			return this.B6RLLF;
		}

		public String B6PEFL;

		public String getB6PEFL() {
			return this.B6PEFL;
		}

		public String B6RQSF;

		public String getB6RQSF() {
			return this.B6RQSF;
		}

		public BigDecimal B6ODLN;

		public BigDecimal getB6ODLN() {
			return this.B6ODLN;
		}

		public String B6ENID;

		public String getB6ENID() {
			return this.B6ENID;
		}

		public String B6ENT1;

		public String getB6ENT1() {
			return this.B6ENT1;
		}

		public String B6ENT2;

		public String getB6ENT2() {
			return this.B6ENT2;
		}

		public String B6ENT3;

		public String getB6ENT3() {
			return this.B6ENT3;
		}

		public BigDecimal B6CNDT;

		public BigDecimal getB6CNDT() {
			return this.B6CNDT;
		}

		public BigDecimal B6SORD;

		public BigDecimal getB6SORD() {
			return this.B6SORD;
		}

		public String B6TGCI;

		public String getB6TGCI() {
			return this.B6TGCI;
		}

		public String B6VPAN;

		public String getB6VPAN() {
			return this.B6VPAN;
		}

		public String B6RQBY;

		public String getB6RQBY() {
			return this.B6RQBY;
		}

		public String B6TDES;

		public String getB6TDES() {
			return this.B6TDES;
		}

		public String B6BBVF;

		public String getB6BBVF() {
			return this.B6BBVF;
		}

		public BigDecimal B6APRD;

		public BigDecimal getB6APRD() {
			return this.B6APRD;
		}

		public String B6RANO;

		public String getB6RANO() {
			return this.B6RANO;
		}

		public String B6ITDE;

		public String getB6ITDE() {
			return this.B6ITDE;
		}

		public String B6LTUF;

		public String getB6LTUF() {
			return this.B6LTUF;
		}

		public BigDecimal B6LODN;

		public BigDecimal getB6LODN() {
			return this.B6LODN;
		}

		public String B6LTZN;

		public String getB6LTZN() {
			return this.B6LTZN;
		}

		public BigDecimal B6STOP;

		public BigDecimal getB6STOP() {
			return this.B6STOP;
		}

		public String B6ENUF;

		public String getB6ENUF() {
			return this.B6ENUF;
		}

		public String B6MACL;

		public String getB6MACL() {
			return this.B6MACL;
		}

		public String B6SRIN;

		public String getB6SRIN() {
			return this.B6SRIN;
		}

		public String B6DFRN;

		public String getB6DFRN() {
			return this.B6DFRN;
		}

		public BigDecimal B6M6CN;

		public BigDecimal getB6M6CN() {
			return this.B6M6CN;
		}

		public String B6CNTN;

		public String getB6CNTN() {
			return this.B6CNTN;
		}

		public String B6CTFG;

		public String getB6CTFG() {
			return this.B6CTFG;
		}

		public BigDecimal B6EADT;

		public BigDecimal getB6EADT() {
			return this.B6EADT;
		}

		public BigDecimal B6EATM;

		public BigDecimal getB6EATM() {
			return this.B6EATM;
		}

		public String B6EAID;

		public String getB6EAID() {
			return this.B6EAID;
		}

		public BigDecimal B6MODT;

		public BigDecimal getB6MODT() {
			return this.B6MODT;
		}

		public BigDecimal B6MOTM;

		public BigDecimal getB6MOTM() {
			return this.B6MOTM;
		}

		public String B6MOID;

		public String getB6MOID() {
			return this.B6MOID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Header_Inbound, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

				try {

					int length = 0;

					this.B6ORNO = (BigDecimal) dis.readObject();

					this.B6ORTY = readString(dis);

					this.B6CUNO = readString(dis);

					this.B6SADD = readString(dis);

					this.B6NANO = readString(dis);

					this.B6PONU = readString(dis);

					this.B6CATG = readString(dis);

					this.B6TZNU = (BigDecimal) dis.readObject();

					this.B6ALTY = readString(dis);

					this.B6RTNO = readString(dis);

					this.B6RTNU = readString(dis);

					this.B6WCNM = readString(dis);

					this.B6WCTM = (BigDecimal) dis.readObject();

					this.B6SEIN = readString(dis);

					this.B6ORDT = (BigDecimal) dis.readObject();

					this.B6SHDT = (BigDecimal) dis.readObject();

					this.B6WNOI = readString(dis);

					this.B6TCFN = readString(dis);

					this.B6OCFP = readString(dis);

					this.B6ORST = readString(dis);

					this.B6TFZC = (BigDecimal) dis.readObject();

					this.B6TFZS = (BigDecimal) dis.readObject();

					this.B6TCLC = (BigDecimal) dis.readObject();

					this.B6TCLS = (BigDecimal) dis.readObject();

					this.B6TDRC = (BigDecimal) dis.readObject();

					this.B6TDRS = (BigDecimal) dis.readObject();

					this.B6TTNC = (BigDecimal) dis.readObject();

					this.B6TTSP = (BigDecimal) dis.readObject();

					this.B6TTOW = (BigDecimal) dis.readObject();

					this.B6TTOC = (BigDecimal) dis.readObject();

					this.B6TTL1 = (BigDecimal) dis.readObject();

					this.B6TTOR = (BigDecimal) dis.readObject();

					this.B6TTOG = (BigDecimal) dis.readObject();

					this.B6ORTM = (BigDecimal) dis.readObject();

					this.B6BTRT = readString(dis);

					this.B6DELM = readString(dis);

					this.B6MNFS = (BigDecimal) dis.readObject();

					this.B6IOFL = readString(dis);

					this.B6BOKI = (BigDecimal) dis.readObject();

					this.B6IORF = readString(dis);

					this.B6IDFP = readString(dis);

					this.B6LODT = (BigDecimal) dis.readObject();

					this.B6ACT1 = readString(dis);

					this.B6USR1 = readString(dis);

					this.B6DLDT = (BigDecimal) dis.readObject();

					this.B6EMP = readString(dis);

					this.B6STRE = readString(dis);

					this.B6HOFL = readString(dis);

					this.B6ROFL = readString(dis);

					this.B6HORC = readString(dis);

					this.B6RORC = readString(dis);

					this.B6TXAM = (BigDecimal) dis.readObject();

					this.B6SIOR = readString(dis);

					this.B6ROEM = readString(dis);

					this.B6RMCN = (BigDecimal) dis.readObject();

					this.B6FAX = readString(dis);

					this.B6PRMA = readString(dis);

					this.B6GCNO = (BigDecimal) dis.readObject();

					this.B6WCET = (BigDecimal) dis.readObject();

					this.B6WCST = readString(dis);

					this.B6WCEN = readString(dis);

					this.B6RLLF = readString(dis);

					this.B6PEFL = readString(dis);

					this.B6RQSF = readString(dis);

					this.B6ODLN = (BigDecimal) dis.readObject();

					this.B6ENID = readString(dis);

					this.B6ENT1 = readString(dis);

					this.B6ENT2 = readString(dis);

					this.B6ENT3 = readString(dis);

					this.B6CNDT = (BigDecimal) dis.readObject();

					this.B6SORD = (BigDecimal) dis.readObject();

					this.B6TGCI = readString(dis);

					this.B6VPAN = readString(dis);

					this.B6RQBY = readString(dis);

					this.B6TDES = readString(dis);

					this.B6BBVF = readString(dis);

					this.B6APRD = (BigDecimal) dis.readObject();

					this.B6RANO = readString(dis);

					this.B6ITDE = readString(dis);

					this.B6LTUF = readString(dis);

					this.B6LODN = (BigDecimal) dis.readObject();

					this.B6LTZN = readString(dis);

					this.B6STOP = (BigDecimal) dis.readObject();

					this.B6ENUF = readString(dis);

					this.B6MACL = readString(dis);

					this.B6SRIN = readString(dis);

					this.B6DFRN = readString(dis);

					this.B6M6CN = (BigDecimal) dis.readObject();

					this.B6CNTN = readString(dis);

					this.B6CTFG = readString(dis);

					this.B6EADT = (BigDecimal) dis.readObject();

					this.B6EATM = (BigDecimal) dis.readObject();

					this.B6EAID = readString(dis);

					this.B6MODT = (BigDecimal) dis.readObject();

					this.B6MOTM = (BigDecimal) dis.readObject();

					this.B6MOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Order_Process_Header_Inbound) {

				try {

					int length = 0;

					this.B6ORNO = (BigDecimal) dis.readObject();

					this.B6ORTY = readString(dis);

					this.B6CUNO = readString(dis);

					this.B6SADD = readString(dis);

					this.B6NANO = readString(dis);

					this.B6PONU = readString(dis);

					this.B6CATG = readString(dis);

					this.B6TZNU = (BigDecimal) dis.readObject();

					this.B6ALTY = readString(dis);

					this.B6RTNO = readString(dis);

					this.B6RTNU = readString(dis);

					this.B6WCNM = readString(dis);

					this.B6WCTM = (BigDecimal) dis.readObject();

					this.B6SEIN = readString(dis);

					this.B6ORDT = (BigDecimal) dis.readObject();

					this.B6SHDT = (BigDecimal) dis.readObject();

					this.B6WNOI = readString(dis);

					this.B6TCFN = readString(dis);

					this.B6OCFP = readString(dis);

					this.B6ORST = readString(dis);

					this.B6TFZC = (BigDecimal) dis.readObject();

					this.B6TFZS = (BigDecimal) dis.readObject();

					this.B6TCLC = (BigDecimal) dis.readObject();

					this.B6TCLS = (BigDecimal) dis.readObject();

					this.B6TDRC = (BigDecimal) dis.readObject();

					this.B6TDRS = (BigDecimal) dis.readObject();

					this.B6TTNC = (BigDecimal) dis.readObject();

					this.B6TTSP = (BigDecimal) dis.readObject();

					this.B6TTOW = (BigDecimal) dis.readObject();

					this.B6TTOC = (BigDecimal) dis.readObject();

					this.B6TTL1 = (BigDecimal) dis.readObject();

					this.B6TTOR = (BigDecimal) dis.readObject();

					this.B6TTOG = (BigDecimal) dis.readObject();

					this.B6ORTM = (BigDecimal) dis.readObject();

					this.B6BTRT = readString(dis);

					this.B6DELM = readString(dis);

					this.B6MNFS = (BigDecimal) dis.readObject();

					this.B6IOFL = readString(dis);

					this.B6BOKI = (BigDecimal) dis.readObject();

					this.B6IORF = readString(dis);

					this.B6IDFP = readString(dis);

					this.B6LODT = (BigDecimal) dis.readObject();

					this.B6ACT1 = readString(dis);

					this.B6USR1 = readString(dis);

					this.B6DLDT = (BigDecimal) dis.readObject();

					this.B6EMP = readString(dis);

					this.B6STRE = readString(dis);

					this.B6HOFL = readString(dis);

					this.B6ROFL = readString(dis);

					this.B6HORC = readString(dis);

					this.B6RORC = readString(dis);

					this.B6TXAM = (BigDecimal) dis.readObject();

					this.B6SIOR = readString(dis);

					this.B6ROEM = readString(dis);

					this.B6RMCN = (BigDecimal) dis.readObject();

					this.B6FAX = readString(dis);

					this.B6PRMA = readString(dis);

					this.B6GCNO = (BigDecimal) dis.readObject();

					this.B6WCET = (BigDecimal) dis.readObject();

					this.B6WCST = readString(dis);

					this.B6WCEN = readString(dis);

					this.B6RLLF = readString(dis);

					this.B6PEFL = readString(dis);

					this.B6RQSF = readString(dis);

					this.B6ODLN = (BigDecimal) dis.readObject();

					this.B6ENID = readString(dis);

					this.B6ENT1 = readString(dis);

					this.B6ENT2 = readString(dis);

					this.B6ENT3 = readString(dis);

					this.B6CNDT = (BigDecimal) dis.readObject();

					this.B6SORD = (BigDecimal) dis.readObject();

					this.B6TGCI = readString(dis);

					this.B6VPAN = readString(dis);

					this.B6RQBY = readString(dis);

					this.B6TDES = readString(dis);

					this.B6BBVF = readString(dis);

					this.B6APRD = (BigDecimal) dis.readObject();

					this.B6RANO = readString(dis);

					this.B6ITDE = readString(dis);

					this.B6LTUF = readString(dis);

					this.B6LODN = (BigDecimal) dis.readObject();

					this.B6LTZN = readString(dis);

					this.B6STOP = (BigDecimal) dis.readObject();

					this.B6ENUF = readString(dis);

					this.B6MACL = readString(dis);

					this.B6SRIN = readString(dis);

					this.B6DFRN = readString(dis);

					this.B6M6CN = (BigDecimal) dis.readObject();

					this.B6CNTN = readString(dis);

					this.B6CTFG = readString(dis);

					this.B6EADT = (BigDecimal) dis.readObject();

					this.B6EATM = (BigDecimal) dis.readObject();

					this.B6EAID = readString(dis);

					this.B6MODT = (BigDecimal) dis.readObject();

					this.B6MOTM = (BigDecimal) dis.readObject();

					this.B6MOID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.B6ORNO);

				// String

				writeString(this.B6ORTY, dos);

				// String

				writeString(this.B6CUNO, dos);

				// String

				writeString(this.B6SADD, dos);

				// String

				writeString(this.B6NANO, dos);

				// String

				writeString(this.B6PONU, dos);

				// String

				writeString(this.B6CATG, dos);

				// BigDecimal

				dos.writeObject(this.B6TZNU);

				// String

				writeString(this.B6ALTY, dos);

				// String

				writeString(this.B6RTNO, dos);

				// String

				writeString(this.B6RTNU, dos);

				// String

				writeString(this.B6WCNM, dos);

				// BigDecimal

				dos.writeObject(this.B6WCTM);

				// String

				writeString(this.B6SEIN, dos);

				// BigDecimal

				dos.writeObject(this.B6ORDT);

				// BigDecimal

				dos.writeObject(this.B6SHDT);

				// String

				writeString(this.B6WNOI, dos);

				// String

				writeString(this.B6TCFN, dos);

				// String

				writeString(this.B6OCFP, dos);

				// String

				writeString(this.B6ORST, dos);

				// BigDecimal

				dos.writeObject(this.B6TFZC);

				// BigDecimal

				dos.writeObject(this.B6TFZS);

				// BigDecimal

				dos.writeObject(this.B6TCLC);

				// BigDecimal

				dos.writeObject(this.B6TCLS);

				// BigDecimal

				dos.writeObject(this.B6TDRC);

				// BigDecimal

				dos.writeObject(this.B6TDRS);

				// BigDecimal

				dos.writeObject(this.B6TTNC);

				// BigDecimal

				dos.writeObject(this.B6TTSP);

				// BigDecimal

				dos.writeObject(this.B6TTOW);

				// BigDecimal

				dos.writeObject(this.B6TTOC);

				// BigDecimal

				dos.writeObject(this.B6TTL1);

				// BigDecimal

				dos.writeObject(this.B6TTOR);

				// BigDecimal

				dos.writeObject(this.B6TTOG);

				// BigDecimal

				dos.writeObject(this.B6ORTM);

				// String

				writeString(this.B6BTRT, dos);

				// String

				writeString(this.B6DELM, dos);

				// BigDecimal

				dos.writeObject(this.B6MNFS);

				// String

				writeString(this.B6IOFL, dos);

				// BigDecimal

				dos.writeObject(this.B6BOKI);

				// String

				writeString(this.B6IORF, dos);

				// String

				writeString(this.B6IDFP, dos);

				// BigDecimal

				dos.writeObject(this.B6LODT);

				// String

				writeString(this.B6ACT1, dos);

				// String

				writeString(this.B6USR1, dos);

				// BigDecimal

				dos.writeObject(this.B6DLDT);

				// String

				writeString(this.B6EMP, dos);

				// String

				writeString(this.B6STRE, dos);

				// String

				writeString(this.B6HOFL, dos);

				// String

				writeString(this.B6ROFL, dos);

				// String

				writeString(this.B6HORC, dos);

				// String

				writeString(this.B6RORC, dos);

				// BigDecimal

				dos.writeObject(this.B6TXAM);

				// String

				writeString(this.B6SIOR, dos);

				// String

				writeString(this.B6ROEM, dos);

				// BigDecimal

				dos.writeObject(this.B6RMCN);

				// String

				writeString(this.B6FAX, dos);

				// String

				writeString(this.B6PRMA, dos);

				// BigDecimal

				dos.writeObject(this.B6GCNO);

				// BigDecimal

				dos.writeObject(this.B6WCET);

				// String

				writeString(this.B6WCST, dos);

				// String

				writeString(this.B6WCEN, dos);

				// String

				writeString(this.B6RLLF, dos);

				// String

				writeString(this.B6PEFL, dos);

				// String

				writeString(this.B6RQSF, dos);

				// BigDecimal

				dos.writeObject(this.B6ODLN);

				// String

				writeString(this.B6ENID, dos);

				// String

				writeString(this.B6ENT1, dos);

				// String

				writeString(this.B6ENT2, dos);

				// String

				writeString(this.B6ENT3, dos);

				// BigDecimal

				dos.writeObject(this.B6CNDT);

				// BigDecimal

				dos.writeObject(this.B6SORD);

				// String

				writeString(this.B6TGCI, dos);

				// String

				writeString(this.B6VPAN, dos);

				// String

				writeString(this.B6RQBY, dos);

				// String

				writeString(this.B6TDES, dos);

				// String

				writeString(this.B6BBVF, dos);

				// BigDecimal

				dos.writeObject(this.B6APRD);

				// String

				writeString(this.B6RANO, dos);

				// String

				writeString(this.B6ITDE, dos);

				// String

				writeString(this.B6LTUF, dos);

				// BigDecimal

				dos.writeObject(this.B6LODN);

				// String

				writeString(this.B6LTZN, dos);

				// BigDecimal

				dos.writeObject(this.B6STOP);

				// String

				writeString(this.B6ENUF, dos);

				// String

				writeString(this.B6MACL, dos);

				// String

				writeString(this.B6SRIN, dos);

				// String

				writeString(this.B6DFRN, dos);

				// BigDecimal

				dos.writeObject(this.B6M6CN);

				// String

				writeString(this.B6CNTN, dos);

				// String

				writeString(this.B6CTFG, dos);

				// BigDecimal

				dos.writeObject(this.B6EADT);

				// BigDecimal

				dos.writeObject(this.B6EATM);

				// String

				writeString(this.B6EAID, dos);

				// BigDecimal

				dos.writeObject(this.B6MODT);

				// BigDecimal

				dos.writeObject(this.B6MOTM);

				// String

				writeString(this.B6MOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.B6ORNO);

				// String

				writeString(this.B6ORTY, dos);

				// String

				writeString(this.B6CUNO, dos);

				// String

				writeString(this.B6SADD, dos);

				// String

				writeString(this.B6NANO, dos);

				// String

				writeString(this.B6PONU, dos);

				// String

				writeString(this.B6CATG, dos);

				// BigDecimal

				dos.writeObject(this.B6TZNU);

				// String

				writeString(this.B6ALTY, dos);

				// String

				writeString(this.B6RTNO, dos);

				// String

				writeString(this.B6RTNU, dos);

				// String

				writeString(this.B6WCNM, dos);

				// BigDecimal

				dos.writeObject(this.B6WCTM);

				// String

				writeString(this.B6SEIN, dos);

				// BigDecimal

				dos.writeObject(this.B6ORDT);

				// BigDecimal

				dos.writeObject(this.B6SHDT);

				// String

				writeString(this.B6WNOI, dos);

				// String

				writeString(this.B6TCFN, dos);

				// String

				writeString(this.B6OCFP, dos);

				// String

				writeString(this.B6ORST, dos);

				// BigDecimal

				dos.writeObject(this.B6TFZC);

				// BigDecimal

				dos.writeObject(this.B6TFZS);

				// BigDecimal

				dos.writeObject(this.B6TCLC);

				// BigDecimal

				dos.writeObject(this.B6TCLS);

				// BigDecimal

				dos.writeObject(this.B6TDRC);

				// BigDecimal

				dos.writeObject(this.B6TDRS);

				// BigDecimal

				dos.writeObject(this.B6TTNC);

				// BigDecimal

				dos.writeObject(this.B6TTSP);

				// BigDecimal

				dos.writeObject(this.B6TTOW);

				// BigDecimal

				dos.writeObject(this.B6TTOC);

				// BigDecimal

				dos.writeObject(this.B6TTL1);

				// BigDecimal

				dos.writeObject(this.B6TTOR);

				// BigDecimal

				dos.writeObject(this.B6TTOG);

				// BigDecimal

				dos.writeObject(this.B6ORTM);

				// String

				writeString(this.B6BTRT, dos);

				// String

				writeString(this.B6DELM, dos);

				// BigDecimal

				dos.writeObject(this.B6MNFS);

				// String

				writeString(this.B6IOFL, dos);

				// BigDecimal

				dos.writeObject(this.B6BOKI);

				// String

				writeString(this.B6IORF, dos);

				// String

				writeString(this.B6IDFP, dos);

				// BigDecimal

				dos.writeObject(this.B6LODT);

				// String

				writeString(this.B6ACT1, dos);

				// String

				writeString(this.B6USR1, dos);

				// BigDecimal

				dos.writeObject(this.B6DLDT);

				// String

				writeString(this.B6EMP, dos);

				// String

				writeString(this.B6STRE, dos);

				// String

				writeString(this.B6HOFL, dos);

				// String

				writeString(this.B6ROFL, dos);

				// String

				writeString(this.B6HORC, dos);

				// String

				writeString(this.B6RORC, dos);

				// BigDecimal

				dos.writeObject(this.B6TXAM);

				// String

				writeString(this.B6SIOR, dos);

				// String

				writeString(this.B6ROEM, dos);

				// BigDecimal

				dos.writeObject(this.B6RMCN);

				// String

				writeString(this.B6FAX, dos);

				// String

				writeString(this.B6PRMA, dos);

				// BigDecimal

				dos.writeObject(this.B6GCNO);

				// BigDecimal

				dos.writeObject(this.B6WCET);

				// String

				writeString(this.B6WCST, dos);

				// String

				writeString(this.B6WCEN, dos);

				// String

				writeString(this.B6RLLF, dos);

				// String

				writeString(this.B6PEFL, dos);

				// String

				writeString(this.B6RQSF, dos);

				// BigDecimal

				dos.writeObject(this.B6ODLN);

				// String

				writeString(this.B6ENID, dos);

				// String

				writeString(this.B6ENT1, dos);

				// String

				writeString(this.B6ENT2, dos);

				// String

				writeString(this.B6ENT3, dos);

				// BigDecimal

				dos.writeObject(this.B6CNDT);

				// BigDecimal

				dos.writeObject(this.B6SORD);

				// String

				writeString(this.B6TGCI, dos);

				// String

				writeString(this.B6VPAN, dos);

				// String

				writeString(this.B6RQBY, dos);

				// String

				writeString(this.B6TDES, dos);

				// String

				writeString(this.B6BBVF, dos);

				// BigDecimal

				dos.writeObject(this.B6APRD);

				// String

				writeString(this.B6RANO, dos);

				// String

				writeString(this.B6ITDE, dos);

				// String

				writeString(this.B6LTUF, dos);

				// BigDecimal

				dos.writeObject(this.B6LODN);

				// String

				writeString(this.B6LTZN, dos);

				// BigDecimal

				dos.writeObject(this.B6STOP);

				// String

				writeString(this.B6ENUF, dos);

				// String

				writeString(this.B6MACL, dos);

				// String

				writeString(this.B6SRIN, dos);

				// String

				writeString(this.B6DFRN, dos);

				// BigDecimal

				dos.writeObject(this.B6M6CN);

				// String

				writeString(this.B6CNTN, dos);

				// String

				writeString(this.B6CTFG, dos);

				// BigDecimal

				dos.writeObject(this.B6EADT);

				// BigDecimal

				dos.writeObject(this.B6EATM);

				// String

				writeString(this.B6EAID, dos);

				// BigDecimal

				dos.writeObject(this.B6MODT);

				// BigDecimal

				dos.writeObject(this.B6MOTM);

				// String

				writeString(this.B6MOID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("B6ORNO=" + String.valueOf(B6ORNO));
			sb.append(",B6ORTY=" + B6ORTY);
			sb.append(",B6CUNO=" + B6CUNO);
			sb.append(",B6SADD=" + B6SADD);
			sb.append(",B6NANO=" + B6NANO);
			sb.append(",B6PONU=" + B6PONU);
			sb.append(",B6CATG=" + B6CATG);
			sb.append(",B6TZNU=" + String.valueOf(B6TZNU));
			sb.append(",B6ALTY=" + B6ALTY);
			sb.append(",B6RTNO=" + B6RTNO);
			sb.append(",B6RTNU=" + B6RTNU);
			sb.append(",B6WCNM=" + B6WCNM);
			sb.append(",B6WCTM=" + String.valueOf(B6WCTM));
			sb.append(",B6SEIN=" + B6SEIN);
			sb.append(",B6ORDT=" + String.valueOf(B6ORDT));
			sb.append(",B6SHDT=" + String.valueOf(B6SHDT));
			sb.append(",B6WNOI=" + B6WNOI);
			sb.append(",B6TCFN=" + B6TCFN);
			sb.append(",B6OCFP=" + B6OCFP);
			sb.append(",B6ORST=" + B6ORST);
			sb.append(",B6TFZC=" + String.valueOf(B6TFZC));
			sb.append(",B6TFZS=" + String.valueOf(B6TFZS));
			sb.append(",B6TCLC=" + String.valueOf(B6TCLC));
			sb.append(",B6TCLS=" + String.valueOf(B6TCLS));
			sb.append(",B6TDRC=" + String.valueOf(B6TDRC));
			sb.append(",B6TDRS=" + String.valueOf(B6TDRS));
			sb.append(",B6TTNC=" + String.valueOf(B6TTNC));
			sb.append(",B6TTSP=" + String.valueOf(B6TTSP));
			sb.append(",B6TTOW=" + String.valueOf(B6TTOW));
			sb.append(",B6TTOC=" + String.valueOf(B6TTOC));
			sb.append(",B6TTL1=" + String.valueOf(B6TTL1));
			sb.append(",B6TTOR=" + String.valueOf(B6TTOR));
			sb.append(",B6TTOG=" + String.valueOf(B6TTOG));
			sb.append(",B6ORTM=" + String.valueOf(B6ORTM));
			sb.append(",B6BTRT=" + B6BTRT);
			sb.append(",B6DELM=" + B6DELM);
			sb.append(",B6MNFS=" + String.valueOf(B6MNFS));
			sb.append(",B6IOFL=" + B6IOFL);
			sb.append(",B6BOKI=" + String.valueOf(B6BOKI));
			sb.append(",B6IORF=" + B6IORF);
			sb.append(",B6IDFP=" + B6IDFP);
			sb.append(",B6LODT=" + String.valueOf(B6LODT));
			sb.append(",B6ACT1=" + B6ACT1);
			sb.append(",B6USR1=" + B6USR1);
			sb.append(",B6DLDT=" + String.valueOf(B6DLDT));
			sb.append(",B6EMP=" + B6EMP);
			sb.append(",B6STRE=" + B6STRE);
			sb.append(",B6HOFL=" + B6HOFL);
			sb.append(",B6ROFL=" + B6ROFL);
			sb.append(",B6HORC=" + B6HORC);
			sb.append(",B6RORC=" + B6RORC);
			sb.append(",B6TXAM=" + String.valueOf(B6TXAM));
			sb.append(",B6SIOR=" + B6SIOR);
			sb.append(",B6ROEM=" + B6ROEM);
			sb.append(",B6RMCN=" + String.valueOf(B6RMCN));
			sb.append(",B6FAX=" + B6FAX);
			sb.append(",B6PRMA=" + B6PRMA);
			sb.append(",B6GCNO=" + String.valueOf(B6GCNO));
			sb.append(",B6WCET=" + String.valueOf(B6WCET));
			sb.append(",B6WCST=" + B6WCST);
			sb.append(",B6WCEN=" + B6WCEN);
			sb.append(",B6RLLF=" + B6RLLF);
			sb.append(",B6PEFL=" + B6PEFL);
			sb.append(",B6RQSF=" + B6RQSF);
			sb.append(",B6ODLN=" + String.valueOf(B6ODLN));
			sb.append(",B6ENID=" + B6ENID);
			sb.append(",B6ENT1=" + B6ENT1);
			sb.append(",B6ENT2=" + B6ENT2);
			sb.append(",B6ENT3=" + B6ENT3);
			sb.append(",B6CNDT=" + String.valueOf(B6CNDT));
			sb.append(",B6SORD=" + String.valueOf(B6SORD));
			sb.append(",B6TGCI=" + B6TGCI);
			sb.append(",B6VPAN=" + B6VPAN);
			sb.append(",B6RQBY=" + B6RQBY);
			sb.append(",B6TDES=" + B6TDES);
			sb.append(",B6BBVF=" + B6BBVF);
			sb.append(",B6APRD=" + String.valueOf(B6APRD));
			sb.append(",B6RANO=" + B6RANO);
			sb.append(",B6ITDE=" + B6ITDE);
			sb.append(",B6LTUF=" + B6LTUF);
			sb.append(",B6LODN=" + String.valueOf(B6LODN));
			sb.append(",B6LTZN=" + B6LTZN);
			sb.append(",B6STOP=" + String.valueOf(B6STOP));
			sb.append(",B6ENUF=" + B6ENUF);
			sb.append(",B6MACL=" + B6MACL);
			sb.append(",B6SRIN=" + B6SRIN);
			sb.append(",B6DFRN=" + B6DFRN);
			sb.append(",B6M6CN=" + String.valueOf(B6M6CN));
			sb.append(",B6CNTN=" + B6CNTN);
			sb.append(",B6CTFG=" + B6CTFG);
			sb.append(",B6EADT=" + String.valueOf(B6EADT));
			sb.append(",B6EATM=" + String.valueOf(B6EATM));
			sb.append(",B6EAID=" + B6EAID);
			sb.append(",B6MODT=" + String.valueOf(B6MODT));
			sb.append(",B6MOTM=" + String.valueOf(B6MOTM));
			sb.append(",B6MOID=" + B6MOID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				ORDER_PROCESS_HEADERStruct ORDER_PROCESS_HEADER = new ORDER_PROCESS_HEADERStruct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[98];

					public void addRow(String[] row) {

						for (int i = 0; i < 98; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 97 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 97 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|%28$-");
							sbformat.append(colLengths[27]);
							sbformat.append("s");

							sbformat.append("|%29$-");
							sbformat.append(colLengths[28]);
							sbformat.append("s");

							sbformat.append("|%30$-");
							sbformat.append(colLengths[29]);
							sbformat.append("s");

							sbformat.append("|%31$-");
							sbformat.append(colLengths[30]);
							sbformat.append("s");

							sbformat.append("|%32$-");
							sbformat.append(colLengths[31]);
							sbformat.append("s");

							sbformat.append("|%33$-");
							sbformat.append(colLengths[32]);
							sbformat.append("s");

							sbformat.append("|%34$-");
							sbformat.append(colLengths[33]);
							sbformat.append("s");

							sbformat.append("|%35$-");
							sbformat.append(colLengths[34]);
							sbformat.append("s");

							sbformat.append("|%36$-");
							sbformat.append(colLengths[35]);
							sbformat.append("s");

							sbformat.append("|%37$-");
							sbformat.append(colLengths[36]);
							sbformat.append("s");

							sbformat.append("|%38$-");
							sbformat.append(colLengths[37]);
							sbformat.append("s");

							sbformat.append("|%39$-");
							sbformat.append(colLengths[38]);
							sbformat.append("s");

							sbformat.append("|%40$-");
							sbformat.append(colLengths[39]);
							sbformat.append("s");

							sbformat.append("|%41$-");
							sbformat.append(colLengths[40]);
							sbformat.append("s");

							sbformat.append("|%42$-");
							sbformat.append(colLengths[41]);
							sbformat.append("s");

							sbformat.append("|%43$-");
							sbformat.append(colLengths[42]);
							sbformat.append("s");

							sbformat.append("|%44$-");
							sbformat.append(colLengths[43]);
							sbformat.append("s");

							sbformat.append("|%45$-");
							sbformat.append(colLengths[44]);
							sbformat.append("s");

							sbformat.append("|%46$-");
							sbformat.append(colLengths[45]);
							sbformat.append("s");

							sbformat.append("|%47$-");
							sbformat.append(colLengths[46]);
							sbformat.append("s");

							sbformat.append("|%48$-");
							sbformat.append(colLengths[47]);
							sbformat.append("s");

							sbformat.append("|%49$-");
							sbformat.append(colLengths[48]);
							sbformat.append("s");

							sbformat.append("|%50$-");
							sbformat.append(colLengths[49]);
							sbformat.append("s");

							sbformat.append("|%51$-");
							sbformat.append(colLengths[50]);
							sbformat.append("s");

							sbformat.append("|%52$-");
							sbformat.append(colLengths[51]);
							sbformat.append("s");

							sbformat.append("|%53$-");
							sbformat.append(colLengths[52]);
							sbformat.append("s");

							sbformat.append("|%54$-");
							sbformat.append(colLengths[53]);
							sbformat.append("s");

							sbformat.append("|%55$-");
							sbformat.append(colLengths[54]);
							sbformat.append("s");

							sbformat.append("|%56$-");
							sbformat.append(colLengths[55]);
							sbformat.append("s");

							sbformat.append("|%57$-");
							sbformat.append(colLengths[56]);
							sbformat.append("s");

							sbformat.append("|%58$-");
							sbformat.append(colLengths[57]);
							sbformat.append("s");

							sbformat.append("|%59$-");
							sbformat.append(colLengths[58]);
							sbformat.append("s");

							sbformat.append("|%60$-");
							sbformat.append(colLengths[59]);
							sbformat.append("s");

							sbformat.append("|%61$-");
							sbformat.append(colLengths[60]);
							sbformat.append("s");

							sbformat.append("|%62$-");
							sbformat.append(colLengths[61]);
							sbformat.append("s");

							sbformat.append("|%63$-");
							sbformat.append(colLengths[62]);
							sbformat.append("s");

							sbformat.append("|%64$-");
							sbformat.append(colLengths[63]);
							sbformat.append("s");

							sbformat.append("|%65$-");
							sbformat.append(colLengths[64]);
							sbformat.append("s");

							sbformat.append("|%66$-");
							sbformat.append(colLengths[65]);
							sbformat.append("s");

							sbformat.append("|%67$-");
							sbformat.append(colLengths[66]);
							sbformat.append("s");

							sbformat.append("|%68$-");
							sbformat.append(colLengths[67]);
							sbformat.append("s");

							sbformat.append("|%69$-");
							sbformat.append(colLengths[68]);
							sbformat.append("s");

							sbformat.append("|%70$-");
							sbformat.append(colLengths[69]);
							sbformat.append("s");

							sbformat.append("|%71$-");
							sbformat.append(colLengths[70]);
							sbformat.append("s");

							sbformat.append("|%72$-");
							sbformat.append(colLengths[71]);
							sbformat.append("s");

							sbformat.append("|%73$-");
							sbformat.append(colLengths[72]);
							sbformat.append("s");

							sbformat.append("|%74$-");
							sbformat.append(colLengths[73]);
							sbformat.append("s");

							sbformat.append("|%75$-");
							sbformat.append(colLengths[74]);
							sbformat.append("s");

							sbformat.append("|%76$-");
							sbformat.append(colLengths[75]);
							sbformat.append("s");

							sbformat.append("|%77$-");
							sbformat.append(colLengths[76]);
							sbformat.append("s");

							sbformat.append("|%78$-");
							sbformat.append(colLengths[77]);
							sbformat.append("s");

							sbformat.append("|%79$-");
							sbformat.append(colLengths[78]);
							sbformat.append("s");

							sbformat.append("|%80$-");
							sbformat.append(colLengths[79]);
							sbformat.append("s");

							sbformat.append("|%81$-");
							sbformat.append(colLengths[80]);
							sbformat.append("s");

							sbformat.append("|%82$-");
							sbformat.append(colLengths[81]);
							sbformat.append("s");

							sbformat.append("|%83$-");
							sbformat.append(colLengths[82]);
							sbformat.append("s");

							sbformat.append("|%84$-");
							sbformat.append(colLengths[83]);
							sbformat.append("s");

							sbformat.append("|%85$-");
							sbformat.append(colLengths[84]);
							sbformat.append("s");

							sbformat.append("|%86$-");
							sbformat.append(colLengths[85]);
							sbformat.append("s");

							sbformat.append("|%87$-");
							sbformat.append(colLengths[86]);
							sbformat.append("s");

							sbformat.append("|%88$-");
							sbformat.append(colLengths[87]);
							sbformat.append("s");

							sbformat.append("|%89$-");
							sbformat.append(colLengths[88]);
							sbformat.append("s");

							sbformat.append("|%90$-");
							sbformat.append(colLengths[89]);
							sbformat.append("s");

							sbformat.append("|%91$-");
							sbformat.append(colLengths[90]);
							sbformat.append("s");

							sbformat.append("|%92$-");
							sbformat.append(colLengths[91]);
							sbformat.append("s");

							sbformat.append("|%93$-");
							sbformat.append(colLengths[92]);
							sbformat.append("s");

							sbformat.append("|%94$-");
							sbformat.append(colLengths[93]);
							sbformat.append("s");

							sbformat.append("|%95$-");
							sbformat.append(colLengths[94]);
							sbformat.append("s");

							sbformat.append("|%96$-");
							sbformat.append(colLengths[95]);
							sbformat.append("s");

							sbformat.append("|%97$-");
							sbformat.append(colLengths[96]);
							sbformat.append("s");

							sbformat.append("|%98$-");
							sbformat.append(colLengths[97]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[71] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[72] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[73] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[74] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[75] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[76] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[77] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[78] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[79] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[80] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[81] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[82] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[83] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[84] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[85] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[86] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[87] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[88] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[89] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[90] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[91] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[92] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[93] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[94] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[95] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[96] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[97] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "SITE_ID", "ORDER_NO", "ORDER_TYPE", "SHIP_TO_CUST",
						"SHIPPING_ADDRESS_ID", "NATIONAL_ACCOUNT_NO", "PURCHASE_ORDER_NO", "CUSTOMER_CATEGORY_CODE",
						"ROUTING_GROUP_CODE", "ALLOCATION_TYPE", "ROUTE_TO_NO", "ROUTE_NO", "WILL_CALL_NAME",
						"WILL_CALL_START_TIME", "SEPARATE_INVOICE", "ORDER_DATE", "SHIP_OR_PICKUP_DATE",
						"NEXT_ORDER_INDICATOR", "CONFIRMATION_NO", "ORDER_CONFIRMATION_PRINTED_FLAG",
						"ORDER_STATUS_CODE", "TOTAL_FREEZER_CASES", "TOTAL_FREEZER_SPLITS", "TOTAL_COOLER_CASES",
						"TOTAL_COOLER_SPLITS", "TOTAL_DRY_CASES", "TOTAL_DRY_SPLITS", "TOTAL_NO_CASES_ORDER",
						"TOTAL_NO_SPLITS_ORDER", "TOTAL_ORDER_WEIGHT", "TOTAL_CUBE", "TOTAL_LINES", "ORDER_TOTAL",
						"ORDER_GRAND_TOTAL", "ORDER_ENTRY_TIME", "RECORD_TYPE_INDICATOR", "DELIVERY_METHOD",
						"MANIFEST_NO", "IMMEDIATE_ORDER_FLAG", "BOOKING_ID", "INCOMPLETE_ORDER_FLAG",
						"FOODSHOW_PROMOTION_ID", "LAPTOP_ORDER_DATE", "ACCOUNT_NO", "USER_FIELD_1", "DELIVERY_DATE",
						"EMPLOYEE_NO", "RESHIP_STATUS", "HOLD_ORDER_FLAG", "RELEASE_ORDER_FLAG",
						"HOLD_ORDER_REASON_CODE", "RELEASE_ORDER_REASON_CODE", "TAX_AMOUNT",
						"SEND_IMMEDIATE_ORDER_ROUTING", "REMOTE_ORDER_ENTRY_MODE", "REMOTE_ORDER_CONFIRMATION_NO",
						"FAX_NO", "PRIMARY_MA", "GENERIC_LAST_USED_NO", "CALL_END_TIME", "CALL_START_TIME_INDICATOR",
						"CALL_END_TIME_INDICATOR", "RECORD_LOGICALLY_LOCKED_FLAG", "ERROR_STATUS_FLAG",
						"REQUEST_STATUS_FLAG", "ORDER_DETAIL_LINE_NO", "ENTITY_ID", "PARENT_ENTITY_1",
						"PARENT_ENTITY_2", "PARENT_ENTITY_3", "CANCEL_DATE", "SERVICE_ORDER_NO",
						"CREATE_TARGET_INDICATOR", "VENDOR_APPROVAL_NO", "REQUESTED_BY", "TARGET_DESC",
						"BILL_BACK_VENDOR_FLAG", "NO_OF_AP_ROLL_DAYS", "RETURN_AUTH_NO", "DISPENSER_EQUIPMENT_ITEM",
						"LAPTOP_USER_FLAG", "LAPTOP_ORDER_NO", "LAPTOP_ZID_NO", "STOP_NO", "ENTITY_UPDATED_FLAG",
						"MAJOR_CLASS", "SWMS_RECOVERY_INVOICE_NO", "DEFAULT_ROUTE_NO", "CONFIRM_NO",
						"CONTAINER_GROUP_ID", "SEPARATE_CONTAINER_FLAG", "CREATED_TIMESTAMP", "CREATED_USER_ID",
						"UPDATED_TIMESTAMP", "UPDATED_USER_ID", "IS_DELETED", "errorCode", "errorMessage", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ORDER_PROCESS_HEADER");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = context.GIM_Schema_Migrating_Test;

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("ORDER_PROCESS_HEADER");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("ORDER_PROCESS_HEADER");
				}

				int updateKeyCount_tDBOutput_1 = 2;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 96 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + context.GIM_Server + ":" + context.GIM_Port + "/"
						+ context.GIM_Database + "?" + context.GIM_AdditionalParams;
				dbUser_tDBOutput_1 = context.GIM_Login;

				final String decryptedPassword_tDBOutput_1 = context.GIM_Password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 1;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1
								+ "\" WHERE \"SITE_ID\" = ? AND \"ORDER_NO\" = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"SITE_ID\",\"ORDER_NO\",\"ORDER_TYPE\",\"SHIP_TO_CUST\",\"SHIPPING_ADDRESS_ID\",\"NATIONAL_ACCOUNT_NO\",\"PURCHASE_ORDER_NO\",\"CUSTOMER_CATEGORY_CODE\",\"ROUTING_GROUP_CODE\",\"ALLOCATION_TYPE\",\"ROUTE_TO_NO\",\"ROUTE_NO\",\"WILL_CALL_NAME\",\"WILL_CALL_START_TIME\",\"SEPARATE_INVOICE\",\"ORDER_DATE\",\"SHIP_OR_PICKUP_DATE\",\"NEXT_ORDER_INDICATOR\",\"CONFIRMATION_NO\",\"ORDER_CONFIRMATION_PRINTED_FLAG\",\"ORDER_STATUS_CODE\",\"TOTAL_FREEZER_CASES\",\"TOTAL_FREEZER_SPLITS\",\"TOTAL_COOLER_CASES\",\"TOTAL_COOLER_SPLITS\",\"TOTAL_DRY_CASES\",\"TOTAL_DRY_SPLITS\",\"TOTAL_NO_CASES_ORDER\",\"TOTAL_NO_SPLITS_ORDER\",\"TOTAL_ORDER_WEIGHT\",\"TOTAL_CUBE\",\"TOTAL_LINES\",\"ORDER_TOTAL\",\"ORDER_GRAND_TOTAL\",\"ORDER_ENTRY_TIME\",\"RECORD_TYPE_INDICATOR\",\"DELIVERY_METHOD\",\"MANIFEST_NO\",\"IMMEDIATE_ORDER_FLAG\",\"BOOKING_ID\",\"INCOMPLETE_ORDER_FLAG\",\"FOODSHOW_PROMOTION_ID\",\"LAPTOP_ORDER_DATE\",\"ACCOUNT_NO\",\"USER_FIELD_1\",\"DELIVERY_DATE\",\"EMPLOYEE_NO\",\"RESHIP_STATUS\",\"HOLD_ORDER_FLAG\",\"RELEASE_ORDER_FLAG\",\"HOLD_ORDER_REASON_CODE\",\"RELEASE_ORDER_REASON_CODE\",\"TAX_AMOUNT\",\"SEND_IMMEDIATE_ORDER_ROUTING\",\"REMOTE_ORDER_ENTRY_MODE\",\"REMOTE_ORDER_CONFIRMATION_NO\",\"FAX_NO\",\"PRIMARY_MA\",\"GENERIC_LAST_USED_NO\",\"CALL_END_TIME\",\"CALL_START_TIME_INDICATOR\",\"CALL_END_TIME_INDICATOR\",\"RECORD_LOGICALLY_LOCKED_FLAG\",\"ERROR_STATUS_FLAG\",\"REQUEST_STATUS_FLAG\",\"ORDER_DETAIL_LINE_NO\",\"ENTITY_ID\",\"PARENT_ENTITY_1\",\"PARENT_ENTITY_2\",\"PARENT_ENTITY_3\",\"CANCEL_DATE\",\"SERVICE_ORDER_NO\",\"CREATE_TARGET_INDICATOR\",\"VENDOR_APPROVAL_NO\",\"REQUESTED_BY\",\"TARGET_DESC\",\"BILL_BACK_VENDOR_FLAG\",\"NO_OF_AP_ROLL_DAYS\",\"RETURN_AUTH_NO\",\"DISPENSER_EQUIPMENT_ITEM\",\"LAPTOP_USER_FLAG\",\"LAPTOP_ORDER_NO\",\"LAPTOP_ZID_NO\",\"STOP_NO\",\"ENTITY_UPDATED_FLAG\",\"MAJOR_CLASS\",\"SWMS_RECOVERY_INVOICE_NO\",\"DEFAULT_ROUTE_NO\",\"CONFIRM_NO\",\"CONTAINER_GROUP_ID\",\"SEPARATE_CONTAINER_FLAG\",\"CREATED_TIMESTAMP\",\"CREATED_USER_ID\",\"UPDATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"IS_DELETED\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"ORDER_TYPE\" = ?,\"SHIP_TO_CUST\" = ?,\"SHIPPING_ADDRESS_ID\" = ?,\"NATIONAL_ACCOUNT_NO\" = ?,\"PURCHASE_ORDER_NO\" = ?,\"CUSTOMER_CATEGORY_CODE\" = ?,\"ROUTING_GROUP_CODE\" = ?,\"ALLOCATION_TYPE\" = ?,\"ROUTE_TO_NO\" = ?,\"ROUTE_NO\" = ?,\"WILL_CALL_NAME\" = ?,\"WILL_CALL_START_TIME\" = ?,\"SEPARATE_INVOICE\" = ?,\"ORDER_DATE\" = ?,\"SHIP_OR_PICKUP_DATE\" = ?,\"NEXT_ORDER_INDICATOR\" = ?,\"CONFIRMATION_NO\" = ?,\"ORDER_CONFIRMATION_PRINTED_FLAG\" = ?,\"ORDER_STATUS_CODE\" = ?,\"TOTAL_FREEZER_CASES\" = ?,\"TOTAL_FREEZER_SPLITS\" = ?,\"TOTAL_COOLER_CASES\" = ?,\"TOTAL_COOLER_SPLITS\" = ?,\"TOTAL_DRY_CASES\" = ?,\"TOTAL_DRY_SPLITS\" = ?,\"TOTAL_NO_CASES_ORDER\" = ?,\"TOTAL_NO_SPLITS_ORDER\" = ?,\"TOTAL_ORDER_WEIGHT\" = ?,\"TOTAL_CUBE\" = ?,\"TOTAL_LINES\" = ?,\"ORDER_TOTAL\" = ?,\"ORDER_GRAND_TOTAL\" = ?,\"ORDER_ENTRY_TIME\" = ?,\"RECORD_TYPE_INDICATOR\" = ?,\"DELIVERY_METHOD\" = ?,\"MANIFEST_NO\" = ?,\"IMMEDIATE_ORDER_FLAG\" = ?,\"BOOKING_ID\" = ?,\"INCOMPLETE_ORDER_FLAG\" = ?,\"FOODSHOW_PROMOTION_ID\" = ?,\"LAPTOP_ORDER_DATE\" = ?,\"ACCOUNT_NO\" = ?,\"USER_FIELD_1\" = ?,\"DELIVERY_DATE\" = ?,\"EMPLOYEE_NO\" = ?,\"RESHIP_STATUS\" = ?,\"HOLD_ORDER_FLAG\" = ?,\"RELEASE_ORDER_FLAG\" = ?,\"HOLD_ORDER_REASON_CODE\" = ?,\"RELEASE_ORDER_REASON_CODE\" = ?,\"TAX_AMOUNT\" = ?,\"SEND_IMMEDIATE_ORDER_ROUTING\" = ?,\"REMOTE_ORDER_ENTRY_MODE\" = ?,\"REMOTE_ORDER_CONFIRMATION_NO\" = ?,\"FAX_NO\" = ?,\"PRIMARY_MA\" = ?,\"GENERIC_LAST_USED_NO\" = ?,\"CALL_END_TIME\" = ?,\"CALL_START_TIME_INDICATOR\" = ?,\"CALL_END_TIME_INDICATOR\" = ?,\"RECORD_LOGICALLY_LOCKED_FLAG\" = ?,\"ERROR_STATUS_FLAG\" = ?,\"REQUEST_STATUS_FLAG\" = ?,\"ORDER_DETAIL_LINE_NO\" = ?,\"ENTITY_ID\" = ?,\"PARENT_ENTITY_1\" = ?,\"PARENT_ENTITY_2\" = ?,\"PARENT_ENTITY_3\" = ?,\"CANCEL_DATE\" = ?,\"SERVICE_ORDER_NO\" = ?,\"CREATE_TARGET_INDICATOR\" = ?,\"VENDOR_APPROVAL_NO\" = ?,\"REQUESTED_BY\" = ?,\"TARGET_DESC\" = ?,\"BILL_BACK_VENDOR_FLAG\" = ?,\"NO_OF_AP_ROLL_DAYS\" = ?,\"RETURN_AUTH_NO\" = ?,\"DISPENSER_EQUIPMENT_ITEM\" = ?,\"LAPTOP_USER_FLAG\" = ?,\"LAPTOP_ORDER_NO\" = ?,\"LAPTOP_ZID_NO\" = ?,\"STOP_NO\" = ?,\"ENTITY_UPDATED_FLAG\" = ?,\"MAJOR_CLASS\" = ?,\"SWMS_RECOVERY_INVOICE_NO\" = ?,\"DEFAULT_ROUTE_NO\" = ?,\"CONFIRM_NO\" = ?,\"CONTAINER_GROUP_ID\" = ?,\"SEPARATE_CONTAINER_FLAG\" = ?,\"CREATED_TIMESTAMP\" = ?,\"CREATED_USER_ID\" = ?,\"UPDATED_TIMESTAMP\" = ?,\"UPDATED_USER_ID\" = ?,\"IS_DELETED\" = ? WHERE \"SITE_ID\" = ? AND \"ORDER_NO\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				ORDER_PROCESS_HEADERStruct ORDER_PROCESS_HEADER_tmp = new ORDER_PROCESS_HEADERStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;

				final String decryptedPassword_tDBInput_1 = context.SUS_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";"
						+ context.SUS_Additional_Params;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  OPNJB6PF.B6ORNO, \n  OPNJB6PF.B6ORTY, \n  OPNJB6PF.B6CUNO, \n  OPNJB6PF.B6SADD, \n  OPNJB6PF.B6NANO, \n  OPNJB6PF."
						+ "B6PONU, \n  OPNJB6PF.B6CATG, \n  OPNJB6PF.B6TZNU, \n  OPNJB6PF.B6ALTY, \n  OPNJB6PF.B6RTNO, \n  OPNJB6PF.B6RTNU, \n  OPNJB6PF."
						+ "B6WCNM, \n  OPNJB6PF.B6WCTM, \n  OPNJB6PF.B6SEIN, \n  OPNJB6PF.B6ORDT, \n  OPNJB6PF.B6SHDT, \n  OPNJB6PF.B6WNOI, \n  OPNJB6PF."
						+ "B6TCFN, \n  OPNJB6PF.B6OCFP, \n  OPNJB6PF.B6ORST, \n  OPNJB6PF.B6TFZC, \n  OPNJB6PF.B6TFZS, \n  OPNJB6PF.B6TCLC, \n  OPNJB6PF."
						+ "B6TCLS, \n  OPNJB6PF.B6TDRC, \n  OPNJB6PF.B6TDRS, \n  OPNJB6PF.B6TTNC, \n  OPNJB6PF.B6TTSP, \n  OPNJB6PF.B6TTOW, \n  OPNJB6PF."
						+ "B6TTOC, \n  OPNJB6PF.B6TTL1, \n  OPNJB6PF.B6TTOR, \n  OPNJB6PF.B6TTOG, \n  OPNJB6PF.B6ORTM, \n  OPNJB6PF.B6BTRT, \n  OPNJB6PF."
						+ "B6DELM, \n  OPNJB6PF.B6MNFS, \n  OPNJB6PF.B6IOFL, \n  OPNJB6PF.B6BOKI, \n  OPNJB6PF.B6IORF, \n  OPNJB6PF.B6IDFP, \n  OPNJB6PF."
						+ "B6LODT, \n  OPNJB6PF.B6ACT1, \n  OPNJB6PF.B6USR1, \n  OPNJB6PF.B6DLDT, \n  OPNJB6PF.\"B6EMP#\", \n  OPNJB6PF.B6STRE, \n  OPNJB"
						+ "6PF.B6HOFL, \n  OPNJB6PF.B6ROFL, \n  OPNJB6PF.B6HORC, \n  OPNJB6PF.B6RORC, \n  OPNJB6PF.B6TXAM, \n  OPNJB6PF.B6SIOR, \n  OPNJB"
						+ "6PF.B6ROEM, \n  OPNJB6PF.B6RMCN, \n  OPNJB6PF.B6FAX, \n  OPNJB6PF.B6PRMA, \n  OPNJB6PF.B6GCNO, \n  OPNJB6PF.B6WCET, \n  OPNJB6"
						+ "PF.B6WCST, \n  OPNJB6PF.B6WCEN, \n  OPNJB6PF.B6RLLF, \n  OPNJB6PF.B6PEFL, \n  OPNJB6PF.B6RQSF, \n  OPNJB6PF.B6ODLN, \n  OPNJB6"
						+ "PF.B6ENID, \n  OPNJB6PF.B6ENT1, \n  OPNJB6PF.B6ENT2, \n  OPNJB6PF.B6ENT3, \n  OPNJB6PF.B6CNDT, \n  OPNJB6PF.B6SORD, \n  OPNJB6"
						+ "PF.B6TGCI, \n  OPNJB6PF.B6VPAN, \n  OPNJB6PF.B6RQBY, \n  OPNJB6PF.B6TDES, \n  OPNJB6PF.B6BBVF, \n  OPNJB6PF.B6APRD, \n  OPNJB6"
						+ "PF.B6RANO, \n  OPNJB6PF.B6ITDE, \n  OPNJB6PF.B6LTUF, \n  OPNJB6PF.B6LODN, \n  OPNJB6PF.B6LTZN, \n  OPNJB6PF.B6STOP, \n  OPNJB6"
						+ "PF.B6ENUF, \n  OPNJB6PF.B6MACL, \n  OPNJB6PF.B6SRIN, \n  OPNJB6PF.B6DFRN, \n  OPNJB6PF.B6M6CN, \n  OPNJB6PF.B6CNTN, \n  OPNJB6"
						+ "PF.B6CTFG, \n  OPNJB6PF.B6EADT, \n  OPNJB6PF.B6EATM, \n  OPNJB6PF.B6EAID, \n  OPNJB6PF.B6MODT, \n  OPNJB6PF.B6MOTM, \n  OPNJB6"
						+ "PF.B6MOID\nFROM OPNJB6PF LIMIT 100";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.B6ORNO = null;
						} else {

							row1.B6ORNO = rs_tDBInput_1.getBigDecimal(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.B6ORTY = null;
						} else {

							row1.B6ORTY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.B6CUNO = null;
						} else {

							row1.B6CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.B6SADD = null;
						} else {

							row1.B6SADD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.B6NANO = null;
						} else {

							row1.B6NANO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.B6PONU = null;
						} else {

							row1.B6PONU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.B6CATG = null;
						} else {

							row1.B6CATG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.B6TZNU = null;
						} else {

							row1.B6TZNU = rs_tDBInput_1.getBigDecimal(8);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.B6ALTY = null;
						} else {

							row1.B6ALTY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.B6RTNO = null;
						} else {

							row1.B6RTNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.B6RTNU = null;
						} else {

							row1.B6RTNU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, true);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.B6WCNM = null;
						} else {

							row1.B6WCNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.B6WCTM = null;
						} else {

							row1.B6WCTM = rs_tDBInput_1.getBigDecimal(13);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.B6SEIN = null;
						} else {

							row1.B6SEIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.B6ORDT = null;
						} else {

							row1.B6ORDT = rs_tDBInput_1.getBigDecimal(15);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.B6SHDT = null;
						} else {

							row1.B6SHDT = rs_tDBInput_1.getBigDecimal(16);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.B6WNOI = null;
						} else {

							row1.B6WNOI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.B6TCFN = null;
						} else {

							row1.B6TCFN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, true);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.B6OCFP = null;
						} else {

							row1.B6OCFP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, true);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.B6ORST = null;
						} else {

							row1.B6ORST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, true);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.B6TFZC = null;
						} else {

							row1.B6TFZC = rs_tDBInput_1.getBigDecimal(21);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.B6TFZS = null;
						} else {

							row1.B6TFZS = rs_tDBInput_1.getBigDecimal(22);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.B6TCLC = null;
						} else {

							row1.B6TCLC = rs_tDBInput_1.getBigDecimal(23);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.B6TCLS = null;
						} else {

							row1.B6TCLS = rs_tDBInput_1.getBigDecimal(24);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.B6TDRC = null;
						} else {

							row1.B6TDRC = rs_tDBInput_1.getBigDecimal(25);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.B6TDRS = null;
						} else {

							row1.B6TDRS = rs_tDBInput_1.getBigDecimal(26);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.B6TTNC = null;
						} else {

							row1.B6TTNC = rs_tDBInput_1.getBigDecimal(27);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.B6TTSP = null;
						} else {

							row1.B6TTSP = rs_tDBInput_1.getBigDecimal(28);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.B6TTOW = null;
						} else {

							row1.B6TTOW = rs_tDBInput_1.getBigDecimal(29);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.B6TTOC = null;
						} else {

							row1.B6TTOC = rs_tDBInput_1.getBigDecimal(30);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.B6TTL1 = null;
						} else {

							row1.B6TTL1 = rs_tDBInput_1.getBigDecimal(31);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.B6TTOR = null;
						} else {

							row1.B6TTOR = rs_tDBInput_1.getBigDecimal(32);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.B6TTOG = null;
						} else {

							row1.B6TTOG = rs_tDBInput_1.getBigDecimal(33);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.B6ORTM = null;
						} else {

							row1.B6ORTM = rs_tDBInput_1.getBigDecimal(34);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.B6BTRT = null;
						} else {

							row1.B6BTRT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.B6DELM = null;
						} else {

							row1.B6DELM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, true);
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.B6MNFS = null;
						} else {

							row1.B6MNFS = rs_tDBInput_1.getBigDecimal(37);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.B6IOFL = null;
						} else {

							row1.B6IOFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.B6BOKI = null;
						} else {

							row1.B6BOKI = rs_tDBInput_1.getBigDecimal(39);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.B6IORF = null;
						} else {

							row1.B6IORF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 40, true);
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.B6IDFP = null;
						} else {

							row1.B6IDFP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, true);
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.B6LODT = null;
						} else {

							row1.B6LODT = rs_tDBInput_1.getBigDecimal(42);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.B6ACT1 = null;
						} else {

							row1.B6ACT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.B6USR1 = null;
						} else {

							row1.B6USR1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.B6DLDT = null;
						} else {

							row1.B6DLDT = rs_tDBInput_1.getBigDecimal(45);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.B6EMP = null;
						} else {

							row1.B6EMP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, true);
						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.B6STRE = null;
						} else {

							row1.B6STRE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, true);
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.B6HOFL = null;
						} else {

							row1.B6HOFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.B6ROFL = null;
						} else {

							row1.B6ROFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, true);
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.B6HORC = null;
						} else {

							row1.B6HORC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.B6RORC = null;
						} else {

							row1.B6RORC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, true);
						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.B6TXAM = null;
						} else {

							row1.B6TXAM = rs_tDBInput_1.getBigDecimal(52);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.B6SIOR = null;
						} else {

							row1.B6SIOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, true);
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.B6ROEM = null;
						} else {

							row1.B6ROEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, true);
						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.B6RMCN = null;
						} else {

							row1.B6RMCN = rs_tDBInput_1.getBigDecimal(55);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.B6FAX = null;
						} else {

							row1.B6FAX = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, true);
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.B6PRMA = null;
						} else {

							row1.B6PRMA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 57, true);
						}
						if (colQtyInRs_tDBInput_1 < 58) {
							row1.B6GCNO = null;
						} else {

							row1.B6GCNO = rs_tDBInput_1.getBigDecimal(58);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 59) {
							row1.B6WCET = null;
						} else {

							row1.B6WCET = rs_tDBInput_1.getBigDecimal(59);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 60) {
							row1.B6WCST = null;
						} else {

							row1.B6WCST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 60, true);
						}
						if (colQtyInRs_tDBInput_1 < 61) {
							row1.B6WCEN = null;
						} else {

							row1.B6WCEN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 61, true);
						}
						if (colQtyInRs_tDBInput_1 < 62) {
							row1.B6RLLF = null;
						} else {

							row1.B6RLLF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 62, true);
						}
						if (colQtyInRs_tDBInput_1 < 63) {
							row1.B6PEFL = null;
						} else {

							row1.B6PEFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 63, true);
						}
						if (colQtyInRs_tDBInput_1 < 64) {
							row1.B6RQSF = null;
						} else {

							row1.B6RQSF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, true);
						}
						if (colQtyInRs_tDBInput_1 < 65) {
							row1.B6ODLN = null;
						} else {

							row1.B6ODLN = rs_tDBInput_1.getBigDecimal(65);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 66) {
							row1.B6ENID = null;
						} else {

							row1.B6ENID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 66, true);
						}
						if (colQtyInRs_tDBInput_1 < 67) {
							row1.B6ENT1 = null;
						} else {

							row1.B6ENT1 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 67, true);
						}
						if (colQtyInRs_tDBInput_1 < 68) {
							row1.B6ENT2 = null;
						} else {

							row1.B6ENT2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, true);
						}
						if (colQtyInRs_tDBInput_1 < 69) {
							row1.B6ENT3 = null;
						} else {

							row1.B6ENT3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 69, true);
						}
						if (colQtyInRs_tDBInput_1 < 70) {
							row1.B6CNDT = null;
						} else {

							row1.B6CNDT = rs_tDBInput_1.getBigDecimal(70);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 71) {
							row1.B6SORD = null;
						} else {

							row1.B6SORD = rs_tDBInput_1.getBigDecimal(71);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 72) {
							row1.B6TGCI = null;
						} else {

							row1.B6TGCI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 72, true);
						}
						if (colQtyInRs_tDBInput_1 < 73) {
							row1.B6VPAN = null;
						} else {

							row1.B6VPAN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 73, true);
						}
						if (colQtyInRs_tDBInput_1 < 74) {
							row1.B6RQBY = null;
						} else {

							row1.B6RQBY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 74, true);
						}
						if (colQtyInRs_tDBInput_1 < 75) {
							row1.B6TDES = null;
						} else {

							row1.B6TDES = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, true);
						}
						if (colQtyInRs_tDBInput_1 < 76) {
							row1.B6BBVF = null;
						} else {

							row1.B6BBVF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 76, true);
						}
						if (colQtyInRs_tDBInput_1 < 77) {
							row1.B6APRD = null;
						} else {

							row1.B6APRD = rs_tDBInput_1.getBigDecimal(77);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 78) {
							row1.B6RANO = null;
						} else {

							row1.B6RANO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 78, true);
						}
						if (colQtyInRs_tDBInput_1 < 79) {
							row1.B6ITDE = null;
						} else {

							row1.B6ITDE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 79, true);
						}
						if (colQtyInRs_tDBInput_1 < 80) {
							row1.B6LTUF = null;
						} else {

							row1.B6LTUF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 80, true);
						}
						if (colQtyInRs_tDBInput_1 < 81) {
							row1.B6LODN = null;
						} else {

							row1.B6LODN = rs_tDBInput_1.getBigDecimal(81);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 82) {
							row1.B6LTZN = null;
						} else {

							row1.B6LTZN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 82, true);
						}
						if (colQtyInRs_tDBInput_1 < 83) {
							row1.B6STOP = null;
						} else {

							row1.B6STOP = rs_tDBInput_1.getBigDecimal(83);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 84) {
							row1.B6ENUF = null;
						} else {

							row1.B6ENUF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 84, true);
						}
						if (colQtyInRs_tDBInput_1 < 85) {
							row1.B6MACL = null;
						} else {

							row1.B6MACL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 85, true);
						}
						if (colQtyInRs_tDBInput_1 < 86) {
							row1.B6SRIN = null;
						} else {

							row1.B6SRIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 86, true);
						}
						if (colQtyInRs_tDBInput_1 < 87) {
							row1.B6DFRN = null;
						} else {

							row1.B6DFRN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 87, true);
						}
						if (colQtyInRs_tDBInput_1 < 88) {
							row1.B6M6CN = null;
						} else {

							row1.B6M6CN = rs_tDBInput_1.getBigDecimal(88);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 89) {
							row1.B6CNTN = null;
						} else {

							row1.B6CNTN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 89, true);
						}
						if (colQtyInRs_tDBInput_1 < 90) {
							row1.B6CTFG = null;
						} else {

							row1.B6CTFG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 90, true);
						}
						if (colQtyInRs_tDBInput_1 < 91) {
							row1.B6EADT = null;
						} else {

							row1.B6EADT = rs_tDBInput_1.getBigDecimal(91);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 92) {
							row1.B6EATM = null;
						} else {

							row1.B6EATM = rs_tDBInput_1.getBigDecimal(92);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 93) {
							row1.B6EAID = null;
						} else {

							row1.B6EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 93, true);
						}
						if (colQtyInRs_tDBInput_1 < 94) {
							row1.B6MODT = null;
						} else {

							row1.B6MODT = rs_tDBInput_1.getBigDecimal(94);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 95) {
							row1.B6MOTM = null;
						} else {

							row1.B6MOTM = rs_tDBInput_1.getBigDecimal(95);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 96) {
							row1.B6MOID = null;
						} else {

							row1.B6MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 96, true);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						// Code generated according to input schema and output schema
						row2.SITE_ID = "056";
						row2.ORDER_NO = row1.B6ORNO;
						row2.ORDER_TYPE = CharSetHandling.convertEBCDICStrToASCII(row1.B6ORTY);
						row2.SHIP_TO_CUST = CharSetHandling.convertEBCDICStrToASCII(row1.B6CUNO);
						row2.SHIPPING_ADDRESS_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6SADD);
						row2.NATIONAL_ACCOUNT_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6NANO);
						row2.PURCHASE_ORDER_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6PONU);
						row2.CUSTOMER_CATEGORY_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6CATG);
						row2.ROUTING_GROUP_CODE = row1.B6TZNU;
						row2.ALLOCATION_TYPE = CharSetHandling.convertEBCDICStrToASCII(row1.B6ALTY);
						row2.ROUTE_TO_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6RTNO);
						row2.ROUTE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6RTNU);
						row2.WILL_CALL_NAME = CharSetHandling.convertEBCDICStrToASCII(row1.B6WCNM);
						row2.WILL_CALL_START_TIME = row1.B6WCTM;
						row2.SEPARATE_INVOICE = CharSetHandling.convertEBCDICStrToASCII(row1.B6SEIN);
						row2.ORDER_DATE = TimeStampConverting.convertToDate(row1.B6ORDT.toString());
						row2.SHIP_OR_PICKUP_DATE = TimeStampConverting.convertToDate(row1.B6SHDT.toString());
						row2.NEXT_ORDER_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6WNOI);
						row2.CONFIRMATION_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6TCFN);
						row2.ORDER_CONFIRMATION_PRINTED_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6OCFP);
						row2.ORDER_STATUS_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6ORST);
						row2.TOTAL_FREEZER_CASES = row1.B6TFZC;
						row2.TOTAL_FREEZER_SPLITS = row1.B6TFZS;
						row2.TOTAL_COOLER_CASES = row1.B6TCLC;
						row2.TOTAL_COOLER_SPLITS = row1.B6TCLS;
						row2.TOTAL_DRY_CASES = row1.B6TDRC;
						row2.TOTAL_DRY_SPLITS = row1.B6TDRS;
						row2.TOTAL_NO_CASES_ORDER = row1.B6TTNC;
						row2.TOTAL_NO_SPLITS_ORDER = row1.B6TTSP;
						row2.TOTAL_ORDER_WEIGHT = row1.B6TTOW;
						row2.TOTAL_CUBE = row1.B6TTOC;
						row2.TOTAL_LINES = row1.B6TTL1;
						row2.ORDER_TOTAL = row1.B6TTOR;
						row2.ORDER_GRAND_TOTAL = row1.B6TTOG;
						row2.ORDER_ENTRY_TIME = row1.B6ORTM;
						row2.RECORD_TYPE_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6BTRT);
						row2.DELIVERY_METHOD = CharSetHandling.convertEBCDICStrToASCII(row1.B6DELM);
						row2.MANIFEST_NO = row1.B6MNFS;
						row2.IMMEDIATE_ORDER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6IOFL);
						row2.BOOKING_ID = row1.B6BOKI;
						row2.INCOMPLETE_ORDER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6IORF);
						row2.FOODSHOW_PROMOTION_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6IDFP);
						row2.LAPTOP_ORDER_DATE = TimeStampConverting.convertToDate(row1.B6LODT.toString());
						row2.ACCOUNT_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6ACT1);
						row2.USER_FIELD_1 = CharSetHandling.convertEBCDICStrToASCII(row1.B6USR1);
						row2.DELIVERY_DATE = TimeStampConverting.convertToDate(row1.B6DLDT.toString());
						row2.EMPLOYEE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6EMP);
						row2.RESHIP_STATUS = CharSetHandling.convertEBCDICStrToASCII(row1.B6STRE);
						row2.HOLD_ORDER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6HOFL);
						row2.RELEASE_ORDER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6ROFL);
						row2.HOLD_ORDER_REASON_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6HORC);
						row2.RELEASE_ORDER_REASON_CODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6RORC);
						row2.TAX_AMOUNT = row1.B6TXAM;
						row2.SEND_IMMEDIATE_ORDER_ROUTING = CharSetHandling.convertEBCDICStrToASCII(row1.B6SIOR);
						row2.REMOTE_ORDER_ENTRY_MODE = CharSetHandling.convertEBCDICStrToASCII(row1.B6ROEM);
						row2.REMOTE_ORDER_CONFIRMATION_NO = row1.B6RMCN;
						row2.FAX_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6FAX);
						row2.PRIMARY_MA = CharSetHandling.convertEBCDICStrToASCII(row1.B6PRMA);
						row2.GENERIC_LAST_USED_NO = row1.B6GCNO;
						row2.CALL_END_TIME = row1.B6WCET;
						row2.CALL_START_TIME_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6WCST);
						row2.CALL_END_TIME_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6WCEN);
						row2.RECORD_LOGICALLY_LOCKED_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6RLLF);
						row2.ERROR_STATUS_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6PEFL);
						row2.REQUEST_STATUS_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6RQSF);
						row2.ORDER_DETAIL_LINE_NO = row1.B6ODLN;
						row2.ENTITY_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENID);
						row2.PARENT_ENTITY_1 = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENT1);
						row2.PARENT_ENTITY_2 = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENT2);
						row2.PARENT_ENTITY_3 = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENT3);
						row2.CANCEL_DATE = TimeStampConverting.convertToDate(row1.B6CNDT.toString());
						row2.SERVICE_ORDER_NO = row1.B6SORD;
						row2.CREATE_TARGET_INDICATOR = CharSetHandling.convertEBCDICStrToASCII(row1.B6TGCI);
						row2.VENDOR_APPROVAL_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6VPAN);
						row2.REQUESTED_BY = CharSetHandling.convertEBCDICStrToASCII(row1.B6RQBY);
						row2.TARGET_DESC = CharSetHandling.convertEBCDICStrToASCII(row1.B6TDES);
						row2.BILL_BACK_VENDOR_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6BBVF);
						row2.NO_OF_AP_ROLL_DAYS = row1.B6APRD;
						row2.RETURN_AUTH_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6RANO);
						row2.DISPENSER_EQUIPMENT_ITEM = CharSetHandling.convertEBCDICStrToASCII(row1.B6ITDE);
						row2.LAPTOP_USER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6LTUF);
						row2.LAPTOP_ORDER_NO = row1.B6LODN;
						row2.LAPTOP_ZID_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6LTZN);
						row2.STOP_NO = row1.B6STOP;
						row2.ENTITY_UPDATED_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6ENUF);
						row2.MAJOR_CLASS = CharSetHandling.convertEBCDICStrToASCII(row1.B6MACL);
						row2.SWMS_RECOVERY_INVOICE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6SRIN);
						row2.DEFAULT_ROUTE_NO = CharSetHandling.convertEBCDICStrToASCII(row1.B6DFRN);
						row2.CONFIRM_NO = row1.B6M6CN;
						row2.CONTAINER_GROUP_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6CNTN);
						row2.SEPARATE_CONTAINER_FLAG = CharSetHandling.convertEBCDICStrToASCII(row1.B6CTFG);
						row2.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.B6EADT.toString(),
								row1.B6EATM.toString());
						row2.CREATED_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6EAID);
						row2.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.B6MODT.toString(),
								row1.B6MOTM.toString());
						row2.UPDATED_USER_ID = CharSetHandling.convertEBCDICStrToASCII(row1.B6MOID);
						row2.IS_DELETED = false;

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							ORDER_PROCESS_HEADER = null;

// # Output table : 'ORDER_PROCESS_HEADER'
							ORDER_PROCESS_HEADER_tmp.SITE_ID = row2.SITE_ID;
							ORDER_PROCESS_HEADER_tmp.ORDER_NO = row2.ORDER_NO;
							ORDER_PROCESS_HEADER_tmp.ORDER_TYPE = row2.ORDER_TYPE;
							ORDER_PROCESS_HEADER_tmp.SHIP_TO_CUST = row2.SHIP_TO_CUST;
							ORDER_PROCESS_HEADER_tmp.SHIPPING_ADDRESS_ID = row2.SHIPPING_ADDRESS_ID;
							ORDER_PROCESS_HEADER_tmp.NATIONAL_ACCOUNT_NO = row2.NATIONAL_ACCOUNT_NO;
							ORDER_PROCESS_HEADER_tmp.PURCHASE_ORDER_NO = row2.PURCHASE_ORDER_NO;
							ORDER_PROCESS_HEADER_tmp.CUSTOMER_CATEGORY_CODE = row2.CUSTOMER_CATEGORY_CODE;
							ORDER_PROCESS_HEADER_tmp.ROUTING_GROUP_CODE = row2.ROUTING_GROUP_CODE;
							ORDER_PROCESS_HEADER_tmp.ALLOCATION_TYPE = row2.ALLOCATION_TYPE;
							ORDER_PROCESS_HEADER_tmp.ROUTE_TO_NO = row2.ROUTE_TO_NO;
							ORDER_PROCESS_HEADER_tmp.ROUTE_NO = row2.ROUTE_NO;
							ORDER_PROCESS_HEADER_tmp.WILL_CALL_NAME = row2.WILL_CALL_NAME;
							ORDER_PROCESS_HEADER_tmp.WILL_CALL_START_TIME = row2.WILL_CALL_START_TIME;
							ORDER_PROCESS_HEADER_tmp.SEPARATE_INVOICE = row2.SEPARATE_INVOICE;
							ORDER_PROCESS_HEADER_tmp.ORDER_DATE = row2.ORDER_DATE != ""
									? TalendDate.parseDate("dd-MM-yyyy", row2.ORDER_DATE)
									: null;
							ORDER_PROCESS_HEADER_tmp.SHIP_OR_PICKUP_DATE = row2.SHIP_OR_PICKUP_DATE != ""
									? TalendDate.parseDate("dd-MM-yyyy", row2.SHIP_OR_PICKUP_DATE)
									: null;
							ORDER_PROCESS_HEADER_tmp.NEXT_ORDER_INDICATOR = row2.NEXT_ORDER_INDICATOR;
							ORDER_PROCESS_HEADER_tmp.CONFIRMATION_NO = row2.CONFIRMATION_NO;
							ORDER_PROCESS_HEADER_tmp.ORDER_CONFIRMATION_PRINTED_FLAG = row2.ORDER_CONFIRMATION_PRINTED_FLAG;
							ORDER_PROCESS_HEADER_tmp.ORDER_STATUS_CODE = row2.ORDER_STATUS_CODE;
							ORDER_PROCESS_HEADER_tmp.TOTAL_FREEZER_CASES = row2.TOTAL_FREEZER_CASES;
							ORDER_PROCESS_HEADER_tmp.TOTAL_FREEZER_SPLITS = row2.TOTAL_FREEZER_SPLITS;
							ORDER_PROCESS_HEADER_tmp.TOTAL_COOLER_CASES = row2.TOTAL_COOLER_CASES;
							ORDER_PROCESS_HEADER_tmp.TOTAL_COOLER_SPLITS = row2.TOTAL_COOLER_SPLITS;
							ORDER_PROCESS_HEADER_tmp.TOTAL_DRY_CASES = row2.TOTAL_DRY_CASES;
							ORDER_PROCESS_HEADER_tmp.TOTAL_DRY_SPLITS = row2.TOTAL_DRY_SPLITS;
							ORDER_PROCESS_HEADER_tmp.TOTAL_NO_CASES_ORDER = row2.TOTAL_NO_CASES_ORDER;
							ORDER_PROCESS_HEADER_tmp.TOTAL_NO_SPLITS_ORDER = row2.TOTAL_NO_SPLITS_ORDER;
							ORDER_PROCESS_HEADER_tmp.TOTAL_ORDER_WEIGHT = row2.TOTAL_ORDER_WEIGHT;
							ORDER_PROCESS_HEADER_tmp.TOTAL_CUBE = row2.TOTAL_CUBE;
							ORDER_PROCESS_HEADER_tmp.TOTAL_LINES = row2.TOTAL_LINES;
							ORDER_PROCESS_HEADER_tmp.ORDER_TOTAL = row2.ORDER_TOTAL;
							ORDER_PROCESS_HEADER_tmp.ORDER_GRAND_TOTAL = row2.ORDER_GRAND_TOTAL;
							ORDER_PROCESS_HEADER_tmp.ORDER_ENTRY_TIME = row2.ORDER_ENTRY_TIME;
							ORDER_PROCESS_HEADER_tmp.RECORD_TYPE_INDICATOR = row2.RECORD_TYPE_INDICATOR;
							ORDER_PROCESS_HEADER_tmp.DELIVERY_METHOD = row2.DELIVERY_METHOD;
							ORDER_PROCESS_HEADER_tmp.MANIFEST_NO = row2.MANIFEST_NO;
							ORDER_PROCESS_HEADER_tmp.IMMEDIATE_ORDER_FLAG = row2.IMMEDIATE_ORDER_FLAG;
							ORDER_PROCESS_HEADER_tmp.BOOKING_ID = row2.BOOKING_ID;
							ORDER_PROCESS_HEADER_tmp.INCOMPLETE_ORDER_FLAG = row2.INCOMPLETE_ORDER_FLAG;
							ORDER_PROCESS_HEADER_tmp.FOODSHOW_PROMOTION_ID = row2.FOODSHOW_PROMOTION_ID;
							ORDER_PROCESS_HEADER_tmp.LAPTOP_ORDER_DATE = row2.LAPTOP_ORDER_DATE != ""
									? TalendDate.parseDate("dd-MM-yyyy", row2.LAPTOP_ORDER_DATE)
									: null;
							ORDER_PROCESS_HEADER_tmp.ACCOUNT_NO = row2.ACCOUNT_NO;
							ORDER_PROCESS_HEADER_tmp.USER_FIELD_1 = row2.USER_FIELD_1;
							ORDER_PROCESS_HEADER_tmp.DELIVERY_DATE = row2.DELIVERY_DATE != ""
									? TalendDate.parseDate("dd-MM-yyyy", row2.DELIVERY_DATE)
									: null;
							ORDER_PROCESS_HEADER_tmp.EMPLOYEE_NO = row2.EMPLOYEE_NO;
							ORDER_PROCESS_HEADER_tmp.RESHIP_STATUS = row2.RESHIP_STATUS;
							ORDER_PROCESS_HEADER_tmp.HOLD_ORDER_FLAG = row2.HOLD_ORDER_FLAG;
							ORDER_PROCESS_HEADER_tmp.RELEASE_ORDER_FLAG = row2.RELEASE_ORDER_FLAG;
							ORDER_PROCESS_HEADER_tmp.HOLD_ORDER_REASON_CODE = row2.HOLD_ORDER_REASON_CODE;
							ORDER_PROCESS_HEADER_tmp.RELEASE_ORDER_REASON_CODE = row2.RELEASE_ORDER_REASON_CODE;
							ORDER_PROCESS_HEADER_tmp.TAX_AMOUNT = row2.TAX_AMOUNT;
							ORDER_PROCESS_HEADER_tmp.SEND_IMMEDIATE_ORDER_ROUTING = row2.SEND_IMMEDIATE_ORDER_ROUTING;
							ORDER_PROCESS_HEADER_tmp.REMOTE_ORDER_ENTRY_MODE = row2.REMOTE_ORDER_ENTRY_MODE;
							ORDER_PROCESS_HEADER_tmp.REMOTE_ORDER_CONFIRMATION_NO = row2.REMOTE_ORDER_CONFIRMATION_NO;
							ORDER_PROCESS_HEADER_tmp.FAX_NO = row2.FAX_NO;
							ORDER_PROCESS_HEADER_tmp.PRIMARY_MA = row2.PRIMARY_MA;
							ORDER_PROCESS_HEADER_tmp.GENERIC_LAST_USED_NO = row2.GENERIC_LAST_USED_NO;
							ORDER_PROCESS_HEADER_tmp.CALL_END_TIME = row2.CALL_END_TIME;
							ORDER_PROCESS_HEADER_tmp.CALL_START_TIME_INDICATOR = row2.CALL_START_TIME_INDICATOR;
							ORDER_PROCESS_HEADER_tmp.CALL_END_TIME_INDICATOR = row2.CALL_END_TIME_INDICATOR;
							ORDER_PROCESS_HEADER_tmp.RECORD_LOGICALLY_LOCKED_FLAG = row2.RECORD_LOGICALLY_LOCKED_FLAG;
							ORDER_PROCESS_HEADER_tmp.ERROR_STATUS_FLAG = row2.ERROR_STATUS_FLAG;
							ORDER_PROCESS_HEADER_tmp.REQUEST_STATUS_FLAG = row2.REQUEST_STATUS_FLAG;
							ORDER_PROCESS_HEADER_tmp.ORDER_DETAIL_LINE_NO = row2.ORDER_DETAIL_LINE_NO;
							ORDER_PROCESS_HEADER_tmp.ENTITY_ID = row2.ENTITY_ID;
							ORDER_PROCESS_HEADER_tmp.PARENT_ENTITY_1 = row2.PARENT_ENTITY_1;
							ORDER_PROCESS_HEADER_tmp.PARENT_ENTITY_2 = row2.PARENT_ENTITY_2;
							ORDER_PROCESS_HEADER_tmp.PARENT_ENTITY_3 = row2.PARENT_ENTITY_3;
							ORDER_PROCESS_HEADER_tmp.CANCEL_DATE = row2.CANCEL_DATE != ""
									? TalendDate.parseDate("dd-MM-yyyy", row2.CANCEL_DATE)
									: null;
							ORDER_PROCESS_HEADER_tmp.SERVICE_ORDER_NO = row2.SERVICE_ORDER_NO;
							ORDER_PROCESS_HEADER_tmp.CREATE_TARGET_INDICATOR = row2.CREATE_TARGET_INDICATOR;
							ORDER_PROCESS_HEADER_tmp.VENDOR_APPROVAL_NO = row2.VENDOR_APPROVAL_NO;
							ORDER_PROCESS_HEADER_tmp.REQUESTED_BY = row2.REQUESTED_BY;
							ORDER_PROCESS_HEADER_tmp.TARGET_DESC = row2.TARGET_DESC;
							ORDER_PROCESS_HEADER_tmp.BILL_BACK_VENDOR_FLAG = row2.BILL_BACK_VENDOR_FLAG;
							ORDER_PROCESS_HEADER_tmp.NO_OF_AP_ROLL_DAYS = row2.NO_OF_AP_ROLL_DAYS;
							ORDER_PROCESS_HEADER_tmp.RETURN_AUTH_NO = row2.RETURN_AUTH_NO;
							ORDER_PROCESS_HEADER_tmp.DISPENSER_EQUIPMENT_ITEM = row2.DISPENSER_EQUIPMENT_ITEM;
							ORDER_PROCESS_HEADER_tmp.LAPTOP_USER_FLAG = row2.LAPTOP_USER_FLAG;
							ORDER_PROCESS_HEADER_tmp.LAPTOP_ORDER_NO = row2.LAPTOP_ORDER_NO;
							ORDER_PROCESS_HEADER_tmp.LAPTOP_ZID_NO = row2.LAPTOP_ZID_NO;
							ORDER_PROCESS_HEADER_tmp.STOP_NO = row2.STOP_NO;
							ORDER_PROCESS_HEADER_tmp.ENTITY_UPDATED_FLAG = row2.ENTITY_UPDATED_FLAG;
							ORDER_PROCESS_HEADER_tmp.MAJOR_CLASS = row2.MAJOR_CLASS;
							ORDER_PROCESS_HEADER_tmp.SWMS_RECOVERY_INVOICE_NO = row2.SWMS_RECOVERY_INVOICE_NO;
							ORDER_PROCESS_HEADER_tmp.DEFAULT_ROUTE_NO = row2.DEFAULT_ROUTE_NO;
							ORDER_PROCESS_HEADER_tmp.CONFIRM_NO = row2.CONFIRM_NO;
							ORDER_PROCESS_HEADER_tmp.CONTAINER_GROUP_ID = row2.CONTAINER_GROUP_ID;
							ORDER_PROCESS_HEADER_tmp.SEPARATE_CONTAINER_FLAG = row2.SEPARATE_CONTAINER_FLAG;
							ORDER_PROCESS_HEADER_tmp.CREATED_TIMESTAMP = row2.CREATED_TIMESTAMP != ""
									? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", row2.CREATED_TIMESTAMP)
									: null;
							ORDER_PROCESS_HEADER_tmp.CREATED_USER_ID = row2.CREATED_USER_ID;
							ORDER_PROCESS_HEADER_tmp.UPDATED_TIMESTAMP = row2.UPDATED_TIMESTAMP != ""
									? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", row2.UPDATED_TIMESTAMP)
									: null;
							ORDER_PROCESS_HEADER_tmp.UPDATED_USER_ID = row2.UPDATED_USER_ID;
							ORDER_PROCESS_HEADER_tmp.IS_DELETED = row2.IS_DELETED;
							ORDER_PROCESS_HEADER = ORDER_PROCESS_HEADER_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "ORDER_PROCESS_HEADER"
						if (ORDER_PROCESS_HEADER != null) {
							row3 = null;

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "ORDER_PROCESS_HEADER"

								);
							}

							row3 = null;
							whetherReject_tDBOutput_1 = false;
							if (ORDER_PROCESS_HEADER.SITE_ID == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, ORDER_PROCESS_HEADER.SITE_ID);
							}

							pstmt_tDBOutput_1.setBigDecimal(2, ORDER_PROCESS_HEADER.ORDER_NO);

							int checkCount_tDBOutput_1 = -1;
							try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
								}
							}
							if (checkCount_tDBOutput_1 > 0) {
								if (ORDER_PROCESS_HEADER.ORDER_TYPE == null) {
									pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(1, ORDER_PROCESS_HEADER.ORDER_TYPE);
								}

								if (ORDER_PROCESS_HEADER.SHIP_TO_CUST == null) {
									pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(2, ORDER_PROCESS_HEADER.SHIP_TO_CUST);
								}

								if (ORDER_PROCESS_HEADER.SHIPPING_ADDRESS_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(3, ORDER_PROCESS_HEADER.SHIPPING_ADDRESS_ID);
								}

								if (ORDER_PROCESS_HEADER.NATIONAL_ACCOUNT_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(4, ORDER_PROCESS_HEADER.NATIONAL_ACCOUNT_NO);
								}

								if (ORDER_PROCESS_HEADER.PURCHASE_ORDER_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(5, ORDER_PROCESS_HEADER.PURCHASE_ORDER_NO);
								}

								if (ORDER_PROCESS_HEADER.CUSTOMER_CATEGORY_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(6, ORDER_PROCESS_HEADER.CUSTOMER_CATEGORY_CODE);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(7, ORDER_PROCESS_HEADER.ROUTING_GROUP_CODE);

								if (ORDER_PROCESS_HEADER.ALLOCATION_TYPE == null) {
									pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(8, ORDER_PROCESS_HEADER.ALLOCATION_TYPE);
								}

								if (ORDER_PROCESS_HEADER.ROUTE_TO_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(9, ORDER_PROCESS_HEADER.ROUTE_TO_NO);
								}

								if (ORDER_PROCESS_HEADER.ROUTE_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(10, ORDER_PROCESS_HEADER.ROUTE_NO);
								}

								if (ORDER_PROCESS_HEADER.WILL_CALL_NAME == null) {
									pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(11, ORDER_PROCESS_HEADER.WILL_CALL_NAME);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(12, ORDER_PROCESS_HEADER.WILL_CALL_START_TIME);

								if (ORDER_PROCESS_HEADER.SEPARATE_INVOICE == null) {
									pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(13, ORDER_PROCESS_HEADER.SEPARATE_INVOICE);
								}

								if (ORDER_PROCESS_HEADER.ORDER_DATE != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(14,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.ORDER_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.SHIP_OR_PICKUP_DATE != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(15,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.SHIP_OR_PICKUP_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.NEXT_ORDER_INDICATOR == null) {
									pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(16, ORDER_PROCESS_HEADER.NEXT_ORDER_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.CONFIRMATION_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(17, ORDER_PROCESS_HEADER.CONFIRMATION_NO);
								}

								if (ORDER_PROCESS_HEADER.ORDER_CONFIRMATION_PRINTED_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(18,
											ORDER_PROCESS_HEADER.ORDER_CONFIRMATION_PRINTED_FLAG);
								}

								if (ORDER_PROCESS_HEADER.ORDER_STATUS_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(19, ORDER_PROCESS_HEADER.ORDER_STATUS_CODE);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(20, ORDER_PROCESS_HEADER.TOTAL_FREEZER_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(21, ORDER_PROCESS_HEADER.TOTAL_FREEZER_SPLITS);

								pstmtUpdate_tDBOutput_1.setBigDecimal(22, ORDER_PROCESS_HEADER.TOTAL_COOLER_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(23, ORDER_PROCESS_HEADER.TOTAL_COOLER_SPLITS);

								pstmtUpdate_tDBOutput_1.setBigDecimal(24, ORDER_PROCESS_HEADER.TOTAL_DRY_CASES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(25, ORDER_PROCESS_HEADER.TOTAL_DRY_SPLITS);

								pstmtUpdate_tDBOutput_1.setBigDecimal(26, ORDER_PROCESS_HEADER.TOTAL_NO_CASES_ORDER);

								pstmtUpdate_tDBOutput_1.setBigDecimal(27, ORDER_PROCESS_HEADER.TOTAL_NO_SPLITS_ORDER);

								pstmtUpdate_tDBOutput_1.setBigDecimal(28, ORDER_PROCESS_HEADER.TOTAL_ORDER_WEIGHT);

								pstmtUpdate_tDBOutput_1.setBigDecimal(29, ORDER_PROCESS_HEADER.TOTAL_CUBE);

								pstmtUpdate_tDBOutput_1.setBigDecimal(30, ORDER_PROCESS_HEADER.TOTAL_LINES);

								pstmtUpdate_tDBOutput_1.setBigDecimal(31, ORDER_PROCESS_HEADER.ORDER_TOTAL);

								pstmtUpdate_tDBOutput_1.setBigDecimal(32, ORDER_PROCESS_HEADER.ORDER_GRAND_TOTAL);

								pstmtUpdate_tDBOutput_1.setBigDecimal(33, ORDER_PROCESS_HEADER.ORDER_ENTRY_TIME);

								if (ORDER_PROCESS_HEADER.RECORD_TYPE_INDICATOR == null) {
									pstmtUpdate_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(34, ORDER_PROCESS_HEADER.RECORD_TYPE_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.DELIVERY_METHOD == null) {
									pstmtUpdate_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(35, ORDER_PROCESS_HEADER.DELIVERY_METHOD);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(36, ORDER_PROCESS_HEADER.MANIFEST_NO);

								if (ORDER_PROCESS_HEADER.IMMEDIATE_ORDER_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(37, ORDER_PROCESS_HEADER.IMMEDIATE_ORDER_FLAG);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(38, ORDER_PROCESS_HEADER.BOOKING_ID);

								if (ORDER_PROCESS_HEADER.INCOMPLETE_ORDER_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(39, ORDER_PROCESS_HEADER.INCOMPLETE_ORDER_FLAG);
								}

								if (ORDER_PROCESS_HEADER.FOODSHOW_PROMOTION_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(40, ORDER_PROCESS_HEADER.FOODSHOW_PROMOTION_ID);
								}

								if (ORDER_PROCESS_HEADER.LAPTOP_ORDER_DATE != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(41,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.LAPTOP_ORDER_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(41, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.ACCOUNT_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(42, ORDER_PROCESS_HEADER.ACCOUNT_NO);
								}

								if (ORDER_PROCESS_HEADER.USER_FIELD_1 == null) {
									pstmtUpdate_tDBOutput_1.setNull(43, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(43, ORDER_PROCESS_HEADER.USER_FIELD_1);
								}

								if (ORDER_PROCESS_HEADER.DELIVERY_DATE != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(44,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.DELIVERY_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(44, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.EMPLOYEE_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(45, ORDER_PROCESS_HEADER.EMPLOYEE_NO);
								}

								if (ORDER_PROCESS_HEADER.RESHIP_STATUS == null) {
									pstmtUpdate_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(46, ORDER_PROCESS_HEADER.RESHIP_STATUS);
								}

								if (ORDER_PROCESS_HEADER.HOLD_ORDER_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(47, ORDER_PROCESS_HEADER.HOLD_ORDER_FLAG);
								}

								if (ORDER_PROCESS_HEADER.RELEASE_ORDER_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(48, ORDER_PROCESS_HEADER.RELEASE_ORDER_FLAG);
								}

								if (ORDER_PROCESS_HEADER.HOLD_ORDER_REASON_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(49, ORDER_PROCESS_HEADER.HOLD_ORDER_REASON_CODE);
								}

								if (ORDER_PROCESS_HEADER.RELEASE_ORDER_REASON_CODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(50,
											ORDER_PROCESS_HEADER.RELEASE_ORDER_REASON_CODE);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(51, ORDER_PROCESS_HEADER.TAX_AMOUNT);

								if (ORDER_PROCESS_HEADER.SEND_IMMEDIATE_ORDER_ROUTING == null) {
									pstmtUpdate_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(52,
											ORDER_PROCESS_HEADER.SEND_IMMEDIATE_ORDER_ROUTING);
								}

								if (ORDER_PROCESS_HEADER.REMOTE_ORDER_ENTRY_MODE == null) {
									pstmtUpdate_tDBOutput_1.setNull(53, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(53, ORDER_PROCESS_HEADER.REMOTE_ORDER_ENTRY_MODE);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(54,
										ORDER_PROCESS_HEADER.REMOTE_ORDER_CONFIRMATION_NO);

								if (ORDER_PROCESS_HEADER.FAX_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(55, ORDER_PROCESS_HEADER.FAX_NO);
								}

								if (ORDER_PROCESS_HEADER.PRIMARY_MA == null) {
									pstmtUpdate_tDBOutput_1.setNull(56, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(56, ORDER_PROCESS_HEADER.PRIMARY_MA);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(57, ORDER_PROCESS_HEADER.GENERIC_LAST_USED_NO);

								pstmtUpdate_tDBOutput_1.setBigDecimal(58, ORDER_PROCESS_HEADER.CALL_END_TIME);

								if (ORDER_PROCESS_HEADER.CALL_START_TIME_INDICATOR == null) {
									pstmtUpdate_tDBOutput_1.setNull(59, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(59,
											ORDER_PROCESS_HEADER.CALL_START_TIME_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.CALL_END_TIME_INDICATOR == null) {
									pstmtUpdate_tDBOutput_1.setNull(60, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(60, ORDER_PROCESS_HEADER.CALL_END_TIME_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.RECORD_LOGICALLY_LOCKED_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(61, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(61,
											ORDER_PROCESS_HEADER.RECORD_LOGICALLY_LOCKED_FLAG);
								}

								if (ORDER_PROCESS_HEADER.ERROR_STATUS_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(62, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(62, ORDER_PROCESS_HEADER.ERROR_STATUS_FLAG);
								}

								if (ORDER_PROCESS_HEADER.REQUEST_STATUS_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(63, ORDER_PROCESS_HEADER.REQUEST_STATUS_FLAG);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(64, ORDER_PROCESS_HEADER.ORDER_DETAIL_LINE_NO);

								if (ORDER_PROCESS_HEADER.ENTITY_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(65, ORDER_PROCESS_HEADER.ENTITY_ID);
								}

								if (ORDER_PROCESS_HEADER.PARENT_ENTITY_1 == null) {
									pstmtUpdate_tDBOutput_1.setNull(66, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(66, ORDER_PROCESS_HEADER.PARENT_ENTITY_1);
								}

								if (ORDER_PROCESS_HEADER.PARENT_ENTITY_2 == null) {
									pstmtUpdate_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(67, ORDER_PROCESS_HEADER.PARENT_ENTITY_2);
								}

								if (ORDER_PROCESS_HEADER.PARENT_ENTITY_3 == null) {
									pstmtUpdate_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(68, ORDER_PROCESS_HEADER.PARENT_ENTITY_3);
								}

								if (ORDER_PROCESS_HEADER.CANCEL_DATE != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(69,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.CANCEL_DATE.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(69, java.sql.Types.TIMESTAMP);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(70, ORDER_PROCESS_HEADER.SERVICE_ORDER_NO);

								if (ORDER_PROCESS_HEADER.CREATE_TARGET_INDICATOR == null) {
									pstmtUpdate_tDBOutput_1.setNull(71, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(71, ORDER_PROCESS_HEADER.CREATE_TARGET_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.VENDOR_APPROVAL_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(72, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(72, ORDER_PROCESS_HEADER.VENDOR_APPROVAL_NO);
								}

								if (ORDER_PROCESS_HEADER.REQUESTED_BY == null) {
									pstmtUpdate_tDBOutput_1.setNull(73, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(73, ORDER_PROCESS_HEADER.REQUESTED_BY);
								}

								if (ORDER_PROCESS_HEADER.TARGET_DESC == null) {
									pstmtUpdate_tDBOutput_1.setNull(74, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(74, ORDER_PROCESS_HEADER.TARGET_DESC);
								}

								if (ORDER_PROCESS_HEADER.BILL_BACK_VENDOR_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(75, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(75, ORDER_PROCESS_HEADER.BILL_BACK_VENDOR_FLAG);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(76, ORDER_PROCESS_HEADER.NO_OF_AP_ROLL_DAYS);

								if (ORDER_PROCESS_HEADER.RETURN_AUTH_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(77, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(77, ORDER_PROCESS_HEADER.RETURN_AUTH_NO);
								}

								if (ORDER_PROCESS_HEADER.DISPENSER_EQUIPMENT_ITEM == null) {
									pstmtUpdate_tDBOutput_1.setNull(78, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(78,
											ORDER_PROCESS_HEADER.DISPENSER_EQUIPMENT_ITEM);
								}

								if (ORDER_PROCESS_HEADER.LAPTOP_USER_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(79, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(79, ORDER_PROCESS_HEADER.LAPTOP_USER_FLAG);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(80, ORDER_PROCESS_HEADER.LAPTOP_ORDER_NO);

								if (ORDER_PROCESS_HEADER.LAPTOP_ZID_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(81, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(81, ORDER_PROCESS_HEADER.LAPTOP_ZID_NO);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(82, ORDER_PROCESS_HEADER.STOP_NO);

								if (ORDER_PROCESS_HEADER.ENTITY_UPDATED_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(83, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(83, ORDER_PROCESS_HEADER.ENTITY_UPDATED_FLAG);
								}

								if (ORDER_PROCESS_HEADER.MAJOR_CLASS == null) {
									pstmtUpdate_tDBOutput_1.setNull(84, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(84, ORDER_PROCESS_HEADER.MAJOR_CLASS);
								}

								if (ORDER_PROCESS_HEADER.SWMS_RECOVERY_INVOICE_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(85, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(85,
											ORDER_PROCESS_HEADER.SWMS_RECOVERY_INVOICE_NO);
								}

								if (ORDER_PROCESS_HEADER.DEFAULT_ROUTE_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(86, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(86, ORDER_PROCESS_HEADER.DEFAULT_ROUTE_NO);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(87, ORDER_PROCESS_HEADER.CONFIRM_NO);

								if (ORDER_PROCESS_HEADER.CONTAINER_GROUP_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(88, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(88, ORDER_PROCESS_HEADER.CONTAINER_GROUP_ID);
								}

								if (ORDER_PROCESS_HEADER.SEPARATE_CONTAINER_FLAG == null) {
									pstmtUpdate_tDBOutput_1.setNull(89, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(89, ORDER_PROCESS_HEADER.SEPARATE_CONTAINER_FLAG);
								}

								if (ORDER_PROCESS_HEADER.CREATED_TIMESTAMP != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(90,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.CREATED_TIMESTAMP.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(90, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.CREATED_USER_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(91, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(91, ORDER_PROCESS_HEADER.CREATED_USER_ID);
								}

								if (ORDER_PROCESS_HEADER.UPDATED_TIMESTAMP != null) {
									pstmtUpdate_tDBOutput_1.setTimestamp(92,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.UPDATED_TIMESTAMP.getTime()));
								} else {
									pstmtUpdate_tDBOutput_1.setNull(92, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.UPDATED_USER_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(93, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(93, ORDER_PROCESS_HEADER.UPDATED_USER_ID);
								}

								if (ORDER_PROCESS_HEADER.IS_DELETED == null) {
									pstmtUpdate_tDBOutput_1.setNull(94, java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tDBOutput_1.setBoolean(94, ORDER_PROCESS_HEADER.IS_DELETED);
								}

								if (ORDER_PROCESS_HEADER.SITE_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(95 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(95 + count_tDBOutput_1,
											ORDER_PROCESS_HEADER.SITE_ID);
								}

								pstmtUpdate_tDBOutput_1.setBigDecimal(96 + count_tDBOutput_1,
										ORDER_PROCESS_HEADER.ORDER_NO);

								try {

									int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
									updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row3 = new row3Struct();
									row3.SITE_ID = ORDER_PROCESS_HEADER.SITE_ID;
									row3.ORDER_NO = ORDER_PROCESS_HEADER.ORDER_NO;
									row3.ORDER_TYPE = ORDER_PROCESS_HEADER.ORDER_TYPE;
									row3.SHIP_TO_CUST = ORDER_PROCESS_HEADER.SHIP_TO_CUST;
									row3.SHIPPING_ADDRESS_ID = ORDER_PROCESS_HEADER.SHIPPING_ADDRESS_ID;
									row3.NATIONAL_ACCOUNT_NO = ORDER_PROCESS_HEADER.NATIONAL_ACCOUNT_NO;
									row3.PURCHASE_ORDER_NO = ORDER_PROCESS_HEADER.PURCHASE_ORDER_NO;
									row3.CUSTOMER_CATEGORY_CODE = ORDER_PROCESS_HEADER.CUSTOMER_CATEGORY_CODE;
									row3.ROUTING_GROUP_CODE = ORDER_PROCESS_HEADER.ROUTING_GROUP_CODE;
									row3.ALLOCATION_TYPE = ORDER_PROCESS_HEADER.ALLOCATION_TYPE;
									row3.ROUTE_TO_NO = ORDER_PROCESS_HEADER.ROUTE_TO_NO;
									row3.ROUTE_NO = ORDER_PROCESS_HEADER.ROUTE_NO;
									row3.WILL_CALL_NAME = ORDER_PROCESS_HEADER.WILL_CALL_NAME;
									row3.WILL_CALL_START_TIME = ORDER_PROCESS_HEADER.WILL_CALL_START_TIME;
									row3.SEPARATE_INVOICE = ORDER_PROCESS_HEADER.SEPARATE_INVOICE;
									row3.ORDER_DATE = ORDER_PROCESS_HEADER.ORDER_DATE;
									row3.SHIP_OR_PICKUP_DATE = ORDER_PROCESS_HEADER.SHIP_OR_PICKUP_DATE;
									row3.NEXT_ORDER_INDICATOR = ORDER_PROCESS_HEADER.NEXT_ORDER_INDICATOR;
									row3.CONFIRMATION_NO = ORDER_PROCESS_HEADER.CONFIRMATION_NO;
									row3.ORDER_CONFIRMATION_PRINTED_FLAG = ORDER_PROCESS_HEADER.ORDER_CONFIRMATION_PRINTED_FLAG;
									row3.ORDER_STATUS_CODE = ORDER_PROCESS_HEADER.ORDER_STATUS_CODE;
									row3.TOTAL_FREEZER_CASES = ORDER_PROCESS_HEADER.TOTAL_FREEZER_CASES;
									row3.TOTAL_FREEZER_SPLITS = ORDER_PROCESS_HEADER.TOTAL_FREEZER_SPLITS;
									row3.TOTAL_COOLER_CASES = ORDER_PROCESS_HEADER.TOTAL_COOLER_CASES;
									row3.TOTAL_COOLER_SPLITS = ORDER_PROCESS_HEADER.TOTAL_COOLER_SPLITS;
									row3.TOTAL_DRY_CASES = ORDER_PROCESS_HEADER.TOTAL_DRY_CASES;
									row3.TOTAL_DRY_SPLITS = ORDER_PROCESS_HEADER.TOTAL_DRY_SPLITS;
									row3.TOTAL_NO_CASES_ORDER = ORDER_PROCESS_HEADER.TOTAL_NO_CASES_ORDER;
									row3.TOTAL_NO_SPLITS_ORDER = ORDER_PROCESS_HEADER.TOTAL_NO_SPLITS_ORDER;
									row3.TOTAL_ORDER_WEIGHT = ORDER_PROCESS_HEADER.TOTAL_ORDER_WEIGHT;
									row3.TOTAL_CUBE = ORDER_PROCESS_HEADER.TOTAL_CUBE;
									row3.TOTAL_LINES = ORDER_PROCESS_HEADER.TOTAL_LINES;
									row3.ORDER_TOTAL = ORDER_PROCESS_HEADER.ORDER_TOTAL;
									row3.ORDER_GRAND_TOTAL = ORDER_PROCESS_HEADER.ORDER_GRAND_TOTAL;
									row3.ORDER_ENTRY_TIME = ORDER_PROCESS_HEADER.ORDER_ENTRY_TIME;
									row3.RECORD_TYPE_INDICATOR = ORDER_PROCESS_HEADER.RECORD_TYPE_INDICATOR;
									row3.DELIVERY_METHOD = ORDER_PROCESS_HEADER.DELIVERY_METHOD;
									row3.MANIFEST_NO = ORDER_PROCESS_HEADER.MANIFEST_NO;
									row3.IMMEDIATE_ORDER_FLAG = ORDER_PROCESS_HEADER.IMMEDIATE_ORDER_FLAG;
									row3.BOOKING_ID = ORDER_PROCESS_HEADER.BOOKING_ID;
									row3.INCOMPLETE_ORDER_FLAG = ORDER_PROCESS_HEADER.INCOMPLETE_ORDER_FLAG;
									row3.FOODSHOW_PROMOTION_ID = ORDER_PROCESS_HEADER.FOODSHOW_PROMOTION_ID;
									row3.LAPTOP_ORDER_DATE = ORDER_PROCESS_HEADER.LAPTOP_ORDER_DATE;
									row3.ACCOUNT_NO = ORDER_PROCESS_HEADER.ACCOUNT_NO;
									row3.USER_FIELD_1 = ORDER_PROCESS_HEADER.USER_FIELD_1;
									row3.DELIVERY_DATE = ORDER_PROCESS_HEADER.DELIVERY_DATE;
									row3.EMPLOYEE_NO = ORDER_PROCESS_HEADER.EMPLOYEE_NO;
									row3.RESHIP_STATUS = ORDER_PROCESS_HEADER.RESHIP_STATUS;
									row3.HOLD_ORDER_FLAG = ORDER_PROCESS_HEADER.HOLD_ORDER_FLAG;
									row3.RELEASE_ORDER_FLAG = ORDER_PROCESS_HEADER.RELEASE_ORDER_FLAG;
									row3.HOLD_ORDER_REASON_CODE = ORDER_PROCESS_HEADER.HOLD_ORDER_REASON_CODE;
									row3.RELEASE_ORDER_REASON_CODE = ORDER_PROCESS_HEADER.RELEASE_ORDER_REASON_CODE;
									row3.TAX_AMOUNT = ORDER_PROCESS_HEADER.TAX_AMOUNT;
									row3.SEND_IMMEDIATE_ORDER_ROUTING = ORDER_PROCESS_HEADER.SEND_IMMEDIATE_ORDER_ROUTING;
									row3.REMOTE_ORDER_ENTRY_MODE = ORDER_PROCESS_HEADER.REMOTE_ORDER_ENTRY_MODE;
									row3.REMOTE_ORDER_CONFIRMATION_NO = ORDER_PROCESS_HEADER.REMOTE_ORDER_CONFIRMATION_NO;
									row3.FAX_NO = ORDER_PROCESS_HEADER.FAX_NO;
									row3.PRIMARY_MA = ORDER_PROCESS_HEADER.PRIMARY_MA;
									row3.GENERIC_LAST_USED_NO = ORDER_PROCESS_HEADER.GENERIC_LAST_USED_NO;
									row3.CALL_END_TIME = ORDER_PROCESS_HEADER.CALL_END_TIME;
									row3.CALL_START_TIME_INDICATOR = ORDER_PROCESS_HEADER.CALL_START_TIME_INDICATOR;
									row3.CALL_END_TIME_INDICATOR = ORDER_PROCESS_HEADER.CALL_END_TIME_INDICATOR;
									row3.RECORD_LOGICALLY_LOCKED_FLAG = ORDER_PROCESS_HEADER.RECORD_LOGICALLY_LOCKED_FLAG;
									row3.ERROR_STATUS_FLAG = ORDER_PROCESS_HEADER.ERROR_STATUS_FLAG;
									row3.REQUEST_STATUS_FLAG = ORDER_PROCESS_HEADER.REQUEST_STATUS_FLAG;
									row3.ORDER_DETAIL_LINE_NO = ORDER_PROCESS_HEADER.ORDER_DETAIL_LINE_NO;
									row3.ENTITY_ID = ORDER_PROCESS_HEADER.ENTITY_ID;
									row3.PARENT_ENTITY_1 = ORDER_PROCESS_HEADER.PARENT_ENTITY_1;
									row3.PARENT_ENTITY_2 = ORDER_PROCESS_HEADER.PARENT_ENTITY_2;
									row3.PARENT_ENTITY_3 = ORDER_PROCESS_HEADER.PARENT_ENTITY_3;
									row3.CANCEL_DATE = ORDER_PROCESS_HEADER.CANCEL_DATE;
									row3.SERVICE_ORDER_NO = ORDER_PROCESS_HEADER.SERVICE_ORDER_NO;
									row3.CREATE_TARGET_INDICATOR = ORDER_PROCESS_HEADER.CREATE_TARGET_INDICATOR;
									row3.VENDOR_APPROVAL_NO = ORDER_PROCESS_HEADER.VENDOR_APPROVAL_NO;
									row3.REQUESTED_BY = ORDER_PROCESS_HEADER.REQUESTED_BY;
									row3.TARGET_DESC = ORDER_PROCESS_HEADER.TARGET_DESC;
									row3.BILL_BACK_VENDOR_FLAG = ORDER_PROCESS_HEADER.BILL_BACK_VENDOR_FLAG;
									row3.NO_OF_AP_ROLL_DAYS = ORDER_PROCESS_HEADER.NO_OF_AP_ROLL_DAYS;
									row3.RETURN_AUTH_NO = ORDER_PROCESS_HEADER.RETURN_AUTH_NO;
									row3.DISPENSER_EQUIPMENT_ITEM = ORDER_PROCESS_HEADER.DISPENSER_EQUIPMENT_ITEM;
									row3.LAPTOP_USER_FLAG = ORDER_PROCESS_HEADER.LAPTOP_USER_FLAG;
									row3.LAPTOP_ORDER_NO = ORDER_PROCESS_HEADER.LAPTOP_ORDER_NO;
									row3.LAPTOP_ZID_NO = ORDER_PROCESS_HEADER.LAPTOP_ZID_NO;
									row3.STOP_NO = ORDER_PROCESS_HEADER.STOP_NO;
									row3.ENTITY_UPDATED_FLAG = ORDER_PROCESS_HEADER.ENTITY_UPDATED_FLAG;
									row3.MAJOR_CLASS = ORDER_PROCESS_HEADER.MAJOR_CLASS;
									row3.SWMS_RECOVERY_INVOICE_NO = ORDER_PROCESS_HEADER.SWMS_RECOVERY_INVOICE_NO;
									row3.DEFAULT_ROUTE_NO = ORDER_PROCESS_HEADER.DEFAULT_ROUTE_NO;
									row3.CONFIRM_NO = ORDER_PROCESS_HEADER.CONFIRM_NO;
									row3.CONTAINER_GROUP_ID = ORDER_PROCESS_HEADER.CONTAINER_GROUP_ID;
									row3.SEPARATE_CONTAINER_FLAG = ORDER_PROCESS_HEADER.SEPARATE_CONTAINER_FLAG;
									row3.CREATED_TIMESTAMP = ORDER_PROCESS_HEADER.CREATED_TIMESTAMP;
									row3.CREATED_USER_ID = ORDER_PROCESS_HEADER.CREATED_USER_ID;
									row3.UPDATED_TIMESTAMP = ORDER_PROCESS_HEADER.UPDATED_TIMESTAMP;
									row3.UPDATED_USER_ID = ORDER_PROCESS_HEADER.UPDATED_USER_ID;
									row3.IS_DELETED = ORDER_PROCESS_HEADER.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row3.errorCode = ((java.sql.SQLException) e).getSQLState();
									row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							} else {
								if (ORDER_PROCESS_HEADER.SITE_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(1, ORDER_PROCESS_HEADER.SITE_ID);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(2, ORDER_PROCESS_HEADER.ORDER_NO);

								if (ORDER_PROCESS_HEADER.ORDER_TYPE == null) {
									pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(3, ORDER_PROCESS_HEADER.ORDER_TYPE);
								}

								if (ORDER_PROCESS_HEADER.SHIP_TO_CUST == null) {
									pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(4, ORDER_PROCESS_HEADER.SHIP_TO_CUST);
								}

								if (ORDER_PROCESS_HEADER.SHIPPING_ADDRESS_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(5, ORDER_PROCESS_HEADER.SHIPPING_ADDRESS_ID);
								}

								if (ORDER_PROCESS_HEADER.NATIONAL_ACCOUNT_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(6, ORDER_PROCESS_HEADER.NATIONAL_ACCOUNT_NO);
								}

								if (ORDER_PROCESS_HEADER.PURCHASE_ORDER_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(7, ORDER_PROCESS_HEADER.PURCHASE_ORDER_NO);
								}

								if (ORDER_PROCESS_HEADER.CUSTOMER_CATEGORY_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(8, ORDER_PROCESS_HEADER.CUSTOMER_CATEGORY_CODE);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(9, ORDER_PROCESS_HEADER.ROUTING_GROUP_CODE);

								if (ORDER_PROCESS_HEADER.ALLOCATION_TYPE == null) {
									pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(10, ORDER_PROCESS_HEADER.ALLOCATION_TYPE);
								}

								if (ORDER_PROCESS_HEADER.ROUTE_TO_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(11, ORDER_PROCESS_HEADER.ROUTE_TO_NO);
								}

								if (ORDER_PROCESS_HEADER.ROUTE_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(12, ORDER_PROCESS_HEADER.ROUTE_NO);
								}

								if (ORDER_PROCESS_HEADER.WILL_CALL_NAME == null) {
									pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(13, ORDER_PROCESS_HEADER.WILL_CALL_NAME);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(14, ORDER_PROCESS_HEADER.WILL_CALL_START_TIME);

								if (ORDER_PROCESS_HEADER.SEPARATE_INVOICE == null) {
									pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(15, ORDER_PROCESS_HEADER.SEPARATE_INVOICE);
								}

								if (ORDER_PROCESS_HEADER.ORDER_DATE != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(16,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.ORDER_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.SHIP_OR_PICKUP_DATE != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(17,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.SHIP_OR_PICKUP_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.NEXT_ORDER_INDICATOR == null) {
									pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(18, ORDER_PROCESS_HEADER.NEXT_ORDER_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.CONFIRMATION_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(19, ORDER_PROCESS_HEADER.CONFIRMATION_NO);
								}

								if (ORDER_PROCESS_HEADER.ORDER_CONFIRMATION_PRINTED_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(20,
											ORDER_PROCESS_HEADER.ORDER_CONFIRMATION_PRINTED_FLAG);
								}

								if (ORDER_PROCESS_HEADER.ORDER_STATUS_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(21, ORDER_PROCESS_HEADER.ORDER_STATUS_CODE);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(22, ORDER_PROCESS_HEADER.TOTAL_FREEZER_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(23, ORDER_PROCESS_HEADER.TOTAL_FREEZER_SPLITS);

								pstmtInsert_tDBOutput_1.setBigDecimal(24, ORDER_PROCESS_HEADER.TOTAL_COOLER_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(25, ORDER_PROCESS_HEADER.TOTAL_COOLER_SPLITS);

								pstmtInsert_tDBOutput_1.setBigDecimal(26, ORDER_PROCESS_HEADER.TOTAL_DRY_CASES);

								pstmtInsert_tDBOutput_1.setBigDecimal(27, ORDER_PROCESS_HEADER.TOTAL_DRY_SPLITS);

								pstmtInsert_tDBOutput_1.setBigDecimal(28, ORDER_PROCESS_HEADER.TOTAL_NO_CASES_ORDER);

								pstmtInsert_tDBOutput_1.setBigDecimal(29, ORDER_PROCESS_HEADER.TOTAL_NO_SPLITS_ORDER);

								pstmtInsert_tDBOutput_1.setBigDecimal(30, ORDER_PROCESS_HEADER.TOTAL_ORDER_WEIGHT);

								pstmtInsert_tDBOutput_1.setBigDecimal(31, ORDER_PROCESS_HEADER.TOTAL_CUBE);

								pstmtInsert_tDBOutput_1.setBigDecimal(32, ORDER_PROCESS_HEADER.TOTAL_LINES);

								pstmtInsert_tDBOutput_1.setBigDecimal(33, ORDER_PROCESS_HEADER.ORDER_TOTAL);

								pstmtInsert_tDBOutput_1.setBigDecimal(34, ORDER_PROCESS_HEADER.ORDER_GRAND_TOTAL);

								pstmtInsert_tDBOutput_1.setBigDecimal(35, ORDER_PROCESS_HEADER.ORDER_ENTRY_TIME);

								if (ORDER_PROCESS_HEADER.RECORD_TYPE_INDICATOR == null) {
									pstmtInsert_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(36, ORDER_PROCESS_HEADER.RECORD_TYPE_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.DELIVERY_METHOD == null) {
									pstmtInsert_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(37, ORDER_PROCESS_HEADER.DELIVERY_METHOD);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(38, ORDER_PROCESS_HEADER.MANIFEST_NO);

								if (ORDER_PROCESS_HEADER.IMMEDIATE_ORDER_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(39, ORDER_PROCESS_HEADER.IMMEDIATE_ORDER_FLAG);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(40, ORDER_PROCESS_HEADER.BOOKING_ID);

								if (ORDER_PROCESS_HEADER.INCOMPLETE_ORDER_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(41, ORDER_PROCESS_HEADER.INCOMPLETE_ORDER_FLAG);
								}

								if (ORDER_PROCESS_HEADER.FOODSHOW_PROMOTION_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(42, ORDER_PROCESS_HEADER.FOODSHOW_PROMOTION_ID);
								}

								if (ORDER_PROCESS_HEADER.LAPTOP_ORDER_DATE != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(43,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.LAPTOP_ORDER_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(43, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.ACCOUNT_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(44, ORDER_PROCESS_HEADER.ACCOUNT_NO);
								}

								if (ORDER_PROCESS_HEADER.USER_FIELD_1 == null) {
									pstmtInsert_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(45, ORDER_PROCESS_HEADER.USER_FIELD_1);
								}

								if (ORDER_PROCESS_HEADER.DELIVERY_DATE != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(46,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.DELIVERY_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(46, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.EMPLOYEE_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(47, ORDER_PROCESS_HEADER.EMPLOYEE_NO);
								}

								if (ORDER_PROCESS_HEADER.RESHIP_STATUS == null) {
									pstmtInsert_tDBOutput_1.setNull(48, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(48, ORDER_PROCESS_HEADER.RESHIP_STATUS);
								}

								if (ORDER_PROCESS_HEADER.HOLD_ORDER_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(49, ORDER_PROCESS_HEADER.HOLD_ORDER_FLAG);
								}

								if (ORDER_PROCESS_HEADER.RELEASE_ORDER_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(50, ORDER_PROCESS_HEADER.RELEASE_ORDER_FLAG);
								}

								if (ORDER_PROCESS_HEADER.HOLD_ORDER_REASON_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(51, ORDER_PROCESS_HEADER.HOLD_ORDER_REASON_CODE);
								}

								if (ORDER_PROCESS_HEADER.RELEASE_ORDER_REASON_CODE == null) {
									pstmtInsert_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(52,
											ORDER_PROCESS_HEADER.RELEASE_ORDER_REASON_CODE);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(53, ORDER_PROCESS_HEADER.TAX_AMOUNT);

								if (ORDER_PROCESS_HEADER.SEND_IMMEDIATE_ORDER_ROUTING == null) {
									pstmtInsert_tDBOutput_1.setNull(54, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(54,
											ORDER_PROCESS_HEADER.SEND_IMMEDIATE_ORDER_ROUTING);
								}

								if (ORDER_PROCESS_HEADER.REMOTE_ORDER_ENTRY_MODE == null) {
									pstmtInsert_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(55, ORDER_PROCESS_HEADER.REMOTE_ORDER_ENTRY_MODE);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(56,
										ORDER_PROCESS_HEADER.REMOTE_ORDER_CONFIRMATION_NO);

								if (ORDER_PROCESS_HEADER.FAX_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(57, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(57, ORDER_PROCESS_HEADER.FAX_NO);
								}

								if (ORDER_PROCESS_HEADER.PRIMARY_MA == null) {
									pstmtInsert_tDBOutput_1.setNull(58, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(58, ORDER_PROCESS_HEADER.PRIMARY_MA);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(59, ORDER_PROCESS_HEADER.GENERIC_LAST_USED_NO);

								pstmtInsert_tDBOutput_1.setBigDecimal(60, ORDER_PROCESS_HEADER.CALL_END_TIME);

								if (ORDER_PROCESS_HEADER.CALL_START_TIME_INDICATOR == null) {
									pstmtInsert_tDBOutput_1.setNull(61, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(61,
											ORDER_PROCESS_HEADER.CALL_START_TIME_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.CALL_END_TIME_INDICATOR == null) {
									pstmtInsert_tDBOutput_1.setNull(62, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(62, ORDER_PROCESS_HEADER.CALL_END_TIME_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.RECORD_LOGICALLY_LOCKED_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(63,
											ORDER_PROCESS_HEADER.RECORD_LOGICALLY_LOCKED_FLAG);
								}

								if (ORDER_PROCESS_HEADER.ERROR_STATUS_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(64, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(64, ORDER_PROCESS_HEADER.ERROR_STATUS_FLAG);
								}

								if (ORDER_PROCESS_HEADER.REQUEST_STATUS_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(65, ORDER_PROCESS_HEADER.REQUEST_STATUS_FLAG);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(66, ORDER_PROCESS_HEADER.ORDER_DETAIL_LINE_NO);

								if (ORDER_PROCESS_HEADER.ENTITY_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(67, ORDER_PROCESS_HEADER.ENTITY_ID);
								}

								if (ORDER_PROCESS_HEADER.PARENT_ENTITY_1 == null) {
									pstmtInsert_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(68, ORDER_PROCESS_HEADER.PARENT_ENTITY_1);
								}

								if (ORDER_PROCESS_HEADER.PARENT_ENTITY_2 == null) {
									pstmtInsert_tDBOutput_1.setNull(69, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(69, ORDER_PROCESS_HEADER.PARENT_ENTITY_2);
								}

								if (ORDER_PROCESS_HEADER.PARENT_ENTITY_3 == null) {
									pstmtInsert_tDBOutput_1.setNull(70, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(70, ORDER_PROCESS_HEADER.PARENT_ENTITY_3);
								}

								if (ORDER_PROCESS_HEADER.CANCEL_DATE != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(71,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.CANCEL_DATE.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(71, java.sql.Types.TIMESTAMP);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(72, ORDER_PROCESS_HEADER.SERVICE_ORDER_NO);

								if (ORDER_PROCESS_HEADER.CREATE_TARGET_INDICATOR == null) {
									pstmtInsert_tDBOutput_1.setNull(73, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(73, ORDER_PROCESS_HEADER.CREATE_TARGET_INDICATOR);
								}

								if (ORDER_PROCESS_HEADER.VENDOR_APPROVAL_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(74, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(74, ORDER_PROCESS_HEADER.VENDOR_APPROVAL_NO);
								}

								if (ORDER_PROCESS_HEADER.REQUESTED_BY == null) {
									pstmtInsert_tDBOutput_1.setNull(75, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(75, ORDER_PROCESS_HEADER.REQUESTED_BY);
								}

								if (ORDER_PROCESS_HEADER.TARGET_DESC == null) {
									pstmtInsert_tDBOutput_1.setNull(76, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(76, ORDER_PROCESS_HEADER.TARGET_DESC);
								}

								if (ORDER_PROCESS_HEADER.BILL_BACK_VENDOR_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(77, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(77, ORDER_PROCESS_HEADER.BILL_BACK_VENDOR_FLAG);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(78, ORDER_PROCESS_HEADER.NO_OF_AP_ROLL_DAYS);

								if (ORDER_PROCESS_HEADER.RETURN_AUTH_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(79, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(79, ORDER_PROCESS_HEADER.RETURN_AUTH_NO);
								}

								if (ORDER_PROCESS_HEADER.DISPENSER_EQUIPMENT_ITEM == null) {
									pstmtInsert_tDBOutput_1.setNull(80, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(80,
											ORDER_PROCESS_HEADER.DISPENSER_EQUIPMENT_ITEM);
								}

								if (ORDER_PROCESS_HEADER.LAPTOP_USER_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(81, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(81, ORDER_PROCESS_HEADER.LAPTOP_USER_FLAG);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(82, ORDER_PROCESS_HEADER.LAPTOP_ORDER_NO);

								if (ORDER_PROCESS_HEADER.LAPTOP_ZID_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(83, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(83, ORDER_PROCESS_HEADER.LAPTOP_ZID_NO);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(84, ORDER_PROCESS_HEADER.STOP_NO);

								if (ORDER_PROCESS_HEADER.ENTITY_UPDATED_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(85, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(85, ORDER_PROCESS_HEADER.ENTITY_UPDATED_FLAG);
								}

								if (ORDER_PROCESS_HEADER.MAJOR_CLASS == null) {
									pstmtInsert_tDBOutput_1.setNull(86, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(86, ORDER_PROCESS_HEADER.MAJOR_CLASS);
								}

								if (ORDER_PROCESS_HEADER.SWMS_RECOVERY_INVOICE_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(87, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(87,
											ORDER_PROCESS_HEADER.SWMS_RECOVERY_INVOICE_NO);
								}

								if (ORDER_PROCESS_HEADER.DEFAULT_ROUTE_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(88, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(88, ORDER_PROCESS_HEADER.DEFAULT_ROUTE_NO);
								}

								pstmtInsert_tDBOutput_1.setBigDecimal(89, ORDER_PROCESS_HEADER.CONFIRM_NO);

								if (ORDER_PROCESS_HEADER.CONTAINER_GROUP_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(90, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(90, ORDER_PROCESS_HEADER.CONTAINER_GROUP_ID);
								}

								if (ORDER_PROCESS_HEADER.SEPARATE_CONTAINER_FLAG == null) {
									pstmtInsert_tDBOutput_1.setNull(91, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(91, ORDER_PROCESS_HEADER.SEPARATE_CONTAINER_FLAG);
								}

								if (ORDER_PROCESS_HEADER.CREATED_TIMESTAMP != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(92,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.CREATED_TIMESTAMP.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(92, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.CREATED_USER_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(93, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(93, ORDER_PROCESS_HEADER.CREATED_USER_ID);
								}

								if (ORDER_PROCESS_HEADER.UPDATED_TIMESTAMP != null) {
									pstmtInsert_tDBOutput_1.setTimestamp(94,
											new java.sql.Timestamp(ORDER_PROCESS_HEADER.UPDATED_TIMESTAMP.getTime()));
								} else {
									pstmtInsert_tDBOutput_1.setNull(94, java.sql.Types.TIMESTAMP);
								}

								if (ORDER_PROCESS_HEADER.UPDATED_USER_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(95, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(95, ORDER_PROCESS_HEADER.UPDATED_USER_ID);
								}

								if (ORDER_PROCESS_HEADER.IS_DELETED == null) {
									pstmtInsert_tDBOutput_1.setNull(96, java.sql.Types.BOOLEAN);
								} else {
									pstmtInsert_tDBOutput_1.setBoolean(96, ORDER_PROCESS_HEADER.IS_DELETED);
								}

								try {

									int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
									insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row3 = new row3Struct();
									row3.SITE_ID = ORDER_PROCESS_HEADER.SITE_ID;
									row3.ORDER_NO = ORDER_PROCESS_HEADER.ORDER_NO;
									row3.ORDER_TYPE = ORDER_PROCESS_HEADER.ORDER_TYPE;
									row3.SHIP_TO_CUST = ORDER_PROCESS_HEADER.SHIP_TO_CUST;
									row3.SHIPPING_ADDRESS_ID = ORDER_PROCESS_HEADER.SHIPPING_ADDRESS_ID;
									row3.NATIONAL_ACCOUNT_NO = ORDER_PROCESS_HEADER.NATIONAL_ACCOUNT_NO;
									row3.PURCHASE_ORDER_NO = ORDER_PROCESS_HEADER.PURCHASE_ORDER_NO;
									row3.CUSTOMER_CATEGORY_CODE = ORDER_PROCESS_HEADER.CUSTOMER_CATEGORY_CODE;
									row3.ROUTING_GROUP_CODE = ORDER_PROCESS_HEADER.ROUTING_GROUP_CODE;
									row3.ALLOCATION_TYPE = ORDER_PROCESS_HEADER.ALLOCATION_TYPE;
									row3.ROUTE_TO_NO = ORDER_PROCESS_HEADER.ROUTE_TO_NO;
									row3.ROUTE_NO = ORDER_PROCESS_HEADER.ROUTE_NO;
									row3.WILL_CALL_NAME = ORDER_PROCESS_HEADER.WILL_CALL_NAME;
									row3.WILL_CALL_START_TIME = ORDER_PROCESS_HEADER.WILL_CALL_START_TIME;
									row3.SEPARATE_INVOICE = ORDER_PROCESS_HEADER.SEPARATE_INVOICE;
									row3.ORDER_DATE = ORDER_PROCESS_HEADER.ORDER_DATE;
									row3.SHIP_OR_PICKUP_DATE = ORDER_PROCESS_HEADER.SHIP_OR_PICKUP_DATE;
									row3.NEXT_ORDER_INDICATOR = ORDER_PROCESS_HEADER.NEXT_ORDER_INDICATOR;
									row3.CONFIRMATION_NO = ORDER_PROCESS_HEADER.CONFIRMATION_NO;
									row3.ORDER_CONFIRMATION_PRINTED_FLAG = ORDER_PROCESS_HEADER.ORDER_CONFIRMATION_PRINTED_FLAG;
									row3.ORDER_STATUS_CODE = ORDER_PROCESS_HEADER.ORDER_STATUS_CODE;
									row3.TOTAL_FREEZER_CASES = ORDER_PROCESS_HEADER.TOTAL_FREEZER_CASES;
									row3.TOTAL_FREEZER_SPLITS = ORDER_PROCESS_HEADER.TOTAL_FREEZER_SPLITS;
									row3.TOTAL_COOLER_CASES = ORDER_PROCESS_HEADER.TOTAL_COOLER_CASES;
									row3.TOTAL_COOLER_SPLITS = ORDER_PROCESS_HEADER.TOTAL_COOLER_SPLITS;
									row3.TOTAL_DRY_CASES = ORDER_PROCESS_HEADER.TOTAL_DRY_CASES;
									row3.TOTAL_DRY_SPLITS = ORDER_PROCESS_HEADER.TOTAL_DRY_SPLITS;
									row3.TOTAL_NO_CASES_ORDER = ORDER_PROCESS_HEADER.TOTAL_NO_CASES_ORDER;
									row3.TOTAL_NO_SPLITS_ORDER = ORDER_PROCESS_HEADER.TOTAL_NO_SPLITS_ORDER;
									row3.TOTAL_ORDER_WEIGHT = ORDER_PROCESS_HEADER.TOTAL_ORDER_WEIGHT;
									row3.TOTAL_CUBE = ORDER_PROCESS_HEADER.TOTAL_CUBE;
									row3.TOTAL_LINES = ORDER_PROCESS_HEADER.TOTAL_LINES;
									row3.ORDER_TOTAL = ORDER_PROCESS_HEADER.ORDER_TOTAL;
									row3.ORDER_GRAND_TOTAL = ORDER_PROCESS_HEADER.ORDER_GRAND_TOTAL;
									row3.ORDER_ENTRY_TIME = ORDER_PROCESS_HEADER.ORDER_ENTRY_TIME;
									row3.RECORD_TYPE_INDICATOR = ORDER_PROCESS_HEADER.RECORD_TYPE_INDICATOR;
									row3.DELIVERY_METHOD = ORDER_PROCESS_HEADER.DELIVERY_METHOD;
									row3.MANIFEST_NO = ORDER_PROCESS_HEADER.MANIFEST_NO;
									row3.IMMEDIATE_ORDER_FLAG = ORDER_PROCESS_HEADER.IMMEDIATE_ORDER_FLAG;
									row3.BOOKING_ID = ORDER_PROCESS_HEADER.BOOKING_ID;
									row3.INCOMPLETE_ORDER_FLAG = ORDER_PROCESS_HEADER.INCOMPLETE_ORDER_FLAG;
									row3.FOODSHOW_PROMOTION_ID = ORDER_PROCESS_HEADER.FOODSHOW_PROMOTION_ID;
									row3.LAPTOP_ORDER_DATE = ORDER_PROCESS_HEADER.LAPTOP_ORDER_DATE;
									row3.ACCOUNT_NO = ORDER_PROCESS_HEADER.ACCOUNT_NO;
									row3.USER_FIELD_1 = ORDER_PROCESS_HEADER.USER_FIELD_1;
									row3.DELIVERY_DATE = ORDER_PROCESS_HEADER.DELIVERY_DATE;
									row3.EMPLOYEE_NO = ORDER_PROCESS_HEADER.EMPLOYEE_NO;
									row3.RESHIP_STATUS = ORDER_PROCESS_HEADER.RESHIP_STATUS;
									row3.HOLD_ORDER_FLAG = ORDER_PROCESS_HEADER.HOLD_ORDER_FLAG;
									row3.RELEASE_ORDER_FLAG = ORDER_PROCESS_HEADER.RELEASE_ORDER_FLAG;
									row3.HOLD_ORDER_REASON_CODE = ORDER_PROCESS_HEADER.HOLD_ORDER_REASON_CODE;
									row3.RELEASE_ORDER_REASON_CODE = ORDER_PROCESS_HEADER.RELEASE_ORDER_REASON_CODE;
									row3.TAX_AMOUNT = ORDER_PROCESS_HEADER.TAX_AMOUNT;
									row3.SEND_IMMEDIATE_ORDER_ROUTING = ORDER_PROCESS_HEADER.SEND_IMMEDIATE_ORDER_ROUTING;
									row3.REMOTE_ORDER_ENTRY_MODE = ORDER_PROCESS_HEADER.REMOTE_ORDER_ENTRY_MODE;
									row3.REMOTE_ORDER_CONFIRMATION_NO = ORDER_PROCESS_HEADER.REMOTE_ORDER_CONFIRMATION_NO;
									row3.FAX_NO = ORDER_PROCESS_HEADER.FAX_NO;
									row3.PRIMARY_MA = ORDER_PROCESS_HEADER.PRIMARY_MA;
									row3.GENERIC_LAST_USED_NO = ORDER_PROCESS_HEADER.GENERIC_LAST_USED_NO;
									row3.CALL_END_TIME = ORDER_PROCESS_HEADER.CALL_END_TIME;
									row3.CALL_START_TIME_INDICATOR = ORDER_PROCESS_HEADER.CALL_START_TIME_INDICATOR;
									row3.CALL_END_TIME_INDICATOR = ORDER_PROCESS_HEADER.CALL_END_TIME_INDICATOR;
									row3.RECORD_LOGICALLY_LOCKED_FLAG = ORDER_PROCESS_HEADER.RECORD_LOGICALLY_LOCKED_FLAG;
									row3.ERROR_STATUS_FLAG = ORDER_PROCESS_HEADER.ERROR_STATUS_FLAG;
									row3.REQUEST_STATUS_FLAG = ORDER_PROCESS_HEADER.REQUEST_STATUS_FLAG;
									row3.ORDER_DETAIL_LINE_NO = ORDER_PROCESS_HEADER.ORDER_DETAIL_LINE_NO;
									row3.ENTITY_ID = ORDER_PROCESS_HEADER.ENTITY_ID;
									row3.PARENT_ENTITY_1 = ORDER_PROCESS_HEADER.PARENT_ENTITY_1;
									row3.PARENT_ENTITY_2 = ORDER_PROCESS_HEADER.PARENT_ENTITY_2;
									row3.PARENT_ENTITY_3 = ORDER_PROCESS_HEADER.PARENT_ENTITY_3;
									row3.CANCEL_DATE = ORDER_PROCESS_HEADER.CANCEL_DATE;
									row3.SERVICE_ORDER_NO = ORDER_PROCESS_HEADER.SERVICE_ORDER_NO;
									row3.CREATE_TARGET_INDICATOR = ORDER_PROCESS_HEADER.CREATE_TARGET_INDICATOR;
									row3.VENDOR_APPROVAL_NO = ORDER_PROCESS_HEADER.VENDOR_APPROVAL_NO;
									row3.REQUESTED_BY = ORDER_PROCESS_HEADER.REQUESTED_BY;
									row3.TARGET_DESC = ORDER_PROCESS_HEADER.TARGET_DESC;
									row3.BILL_BACK_VENDOR_FLAG = ORDER_PROCESS_HEADER.BILL_BACK_VENDOR_FLAG;
									row3.NO_OF_AP_ROLL_DAYS = ORDER_PROCESS_HEADER.NO_OF_AP_ROLL_DAYS;
									row3.RETURN_AUTH_NO = ORDER_PROCESS_HEADER.RETURN_AUTH_NO;
									row3.DISPENSER_EQUIPMENT_ITEM = ORDER_PROCESS_HEADER.DISPENSER_EQUIPMENT_ITEM;
									row3.LAPTOP_USER_FLAG = ORDER_PROCESS_HEADER.LAPTOP_USER_FLAG;
									row3.LAPTOP_ORDER_NO = ORDER_PROCESS_HEADER.LAPTOP_ORDER_NO;
									row3.LAPTOP_ZID_NO = ORDER_PROCESS_HEADER.LAPTOP_ZID_NO;
									row3.STOP_NO = ORDER_PROCESS_HEADER.STOP_NO;
									row3.ENTITY_UPDATED_FLAG = ORDER_PROCESS_HEADER.ENTITY_UPDATED_FLAG;
									row3.MAJOR_CLASS = ORDER_PROCESS_HEADER.MAJOR_CLASS;
									row3.SWMS_RECOVERY_INVOICE_NO = ORDER_PROCESS_HEADER.SWMS_RECOVERY_INVOICE_NO;
									row3.DEFAULT_ROUTE_NO = ORDER_PROCESS_HEADER.DEFAULT_ROUTE_NO;
									row3.CONFIRM_NO = ORDER_PROCESS_HEADER.CONFIRM_NO;
									row3.CONTAINER_GROUP_ID = ORDER_PROCESS_HEADER.CONTAINER_GROUP_ID;
									row3.SEPARATE_CONTAINER_FLAG = ORDER_PROCESS_HEADER.SEPARATE_CONTAINER_FLAG;
									row3.CREATED_TIMESTAMP = ORDER_PROCESS_HEADER.CREATED_TIMESTAMP;
									row3.CREATED_USER_ID = ORDER_PROCESS_HEADER.CREATED_USER_ID;
									row3.UPDATED_TIMESTAMP = ORDER_PROCESS_HEADER.UPDATED_TIMESTAMP;
									row3.UPDATED_USER_ID = ORDER_PROCESS_HEADER.UPDATED_USER_ID;
									row3.IS_DELETED = ORDER_PROCESS_HEADER.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row3.errorCode = ((java.sql.SQLException) e).getSQLState();
									row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							}
							if (!whetherReject_tDBOutput_1) {
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if (rowsToCommitCount_tDBOutput_1 != 0) {

								}
								conn_tDBOutput_1.commit();
								if (rowsToCommitCount_tDBOutput_1 != 0) {

									rowsToCommitCount_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[98];

								if (row3.SITE_ID != null) { //
									row_tLogRow_1[0] = String.valueOf(row3.SITE_ID);

								} //

								if (row3.ORDER_NO != null) { //
									row_tLogRow_1[1] = row3.ORDER_NO.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.ORDER_TYPE != null) { //
									row_tLogRow_1[2] = String.valueOf(row3.ORDER_TYPE);

								} //

								if (row3.SHIP_TO_CUST != null) { //
									row_tLogRow_1[3] = String.valueOf(row3.SHIP_TO_CUST);

								} //

								if (row3.SHIPPING_ADDRESS_ID != null) { //
									row_tLogRow_1[4] = String.valueOf(row3.SHIPPING_ADDRESS_ID);

								} //

								if (row3.NATIONAL_ACCOUNT_NO != null) { //
									row_tLogRow_1[5] = String.valueOf(row3.NATIONAL_ACCOUNT_NO);

								} //

								if (row3.PURCHASE_ORDER_NO != null) { //
									row_tLogRow_1[6] = String.valueOf(row3.PURCHASE_ORDER_NO);

								} //

								if (row3.CUSTOMER_CATEGORY_CODE != null) { //
									row_tLogRow_1[7] = String.valueOf(row3.CUSTOMER_CATEGORY_CODE);

								} //

								if (row3.ROUTING_GROUP_CODE != null) { //
									row_tLogRow_1[8] = row3.ROUTING_GROUP_CODE
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.ALLOCATION_TYPE != null) { //
									row_tLogRow_1[9] = String.valueOf(row3.ALLOCATION_TYPE);

								} //

								if (row3.ROUTE_TO_NO != null) { //
									row_tLogRow_1[10] = String.valueOf(row3.ROUTE_TO_NO);

								} //

								if (row3.ROUTE_NO != null) { //
									row_tLogRow_1[11] = String.valueOf(row3.ROUTE_NO);

								} //

								if (row3.WILL_CALL_NAME != null) { //
									row_tLogRow_1[12] = String.valueOf(row3.WILL_CALL_NAME);

								} //

								if (row3.WILL_CALL_START_TIME != null) { //
									row_tLogRow_1[13] = row3.WILL_CALL_START_TIME
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.SEPARATE_INVOICE != null) { //
									row_tLogRow_1[14] = String.valueOf(row3.SEPARATE_INVOICE);

								} //

								if (row3.ORDER_DATE != null) { //
									row_tLogRow_1[15] = FormatterUtils.format_Date(row3.ORDER_DATE, "dd-MM-yyyy");

								} //

								if (row3.SHIP_OR_PICKUP_DATE != null) { //
									row_tLogRow_1[16] = FormatterUtils.format_Date(row3.SHIP_OR_PICKUP_DATE,
											"dd-MM-yyyy");

								} //

								if (row3.NEXT_ORDER_INDICATOR != null) { //
									row_tLogRow_1[17] = String.valueOf(row3.NEXT_ORDER_INDICATOR);

								} //

								if (row3.CONFIRMATION_NO != null) { //
									row_tLogRow_1[18] = String.valueOf(row3.CONFIRMATION_NO);

								} //

								if (row3.ORDER_CONFIRMATION_PRINTED_FLAG != null) { //
									row_tLogRow_1[19] = String.valueOf(row3.ORDER_CONFIRMATION_PRINTED_FLAG);

								} //

								if (row3.ORDER_STATUS_CODE != null) { //
									row_tLogRow_1[20] = String.valueOf(row3.ORDER_STATUS_CODE);

								} //

								if (row3.TOTAL_FREEZER_CASES != null) { //
									row_tLogRow_1[21] = row3.TOTAL_FREEZER_CASES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.TOTAL_FREEZER_SPLITS != null) { //
									row_tLogRow_1[22] = row3.TOTAL_FREEZER_SPLITS
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.TOTAL_COOLER_CASES != null) { //
									row_tLogRow_1[23] = row3.TOTAL_COOLER_CASES
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.TOTAL_COOLER_SPLITS != null) { //
									row_tLogRow_1[24] = row3.TOTAL_COOLER_SPLITS
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.TOTAL_DRY_CASES != null) { //
									row_tLogRow_1[25] = row3.TOTAL_DRY_CASES.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.TOTAL_DRY_SPLITS != null) { //
									row_tLogRow_1[26] = row3.TOTAL_DRY_SPLITS
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.TOTAL_NO_CASES_ORDER != null) { //
									row_tLogRow_1[27] = row3.TOTAL_NO_CASES_ORDER
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.TOTAL_NO_SPLITS_ORDER != null) { //
									row_tLogRow_1[28] = row3.TOTAL_NO_SPLITS_ORDER
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.TOTAL_ORDER_WEIGHT != null) { //
									row_tLogRow_1[29] = row3.TOTAL_ORDER_WEIGHT
											.setScale(3, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.TOTAL_CUBE != null) { //
									row_tLogRow_1[30] = row3.TOTAL_CUBE.setScale(3, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.TOTAL_LINES != null) { //
									row_tLogRow_1[31] = row3.TOTAL_LINES.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.ORDER_TOTAL != null) { //
									row_tLogRow_1[32] = row3.ORDER_TOTAL.setScale(2, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.ORDER_GRAND_TOTAL != null) { //
									row_tLogRow_1[33] = row3.ORDER_GRAND_TOTAL
											.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.ORDER_ENTRY_TIME != null) { //
									row_tLogRow_1[34] = row3.ORDER_ENTRY_TIME
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.RECORD_TYPE_INDICATOR != null) { //
									row_tLogRow_1[35] = String.valueOf(row3.RECORD_TYPE_INDICATOR);

								} //

								if (row3.DELIVERY_METHOD != null) { //
									row_tLogRow_1[36] = String.valueOf(row3.DELIVERY_METHOD);

								} //

								if (row3.MANIFEST_NO != null) { //
									row_tLogRow_1[37] = row3.MANIFEST_NO.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.IMMEDIATE_ORDER_FLAG != null) { //
									row_tLogRow_1[38] = String.valueOf(row3.IMMEDIATE_ORDER_FLAG);

								} //

								if (row3.BOOKING_ID != null) { //
									row_tLogRow_1[39] = row3.BOOKING_ID.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.INCOMPLETE_ORDER_FLAG != null) { //
									row_tLogRow_1[40] = String.valueOf(row3.INCOMPLETE_ORDER_FLAG);

								} //

								if (row3.FOODSHOW_PROMOTION_ID != null) { //
									row_tLogRow_1[41] = String.valueOf(row3.FOODSHOW_PROMOTION_ID);

								} //

								if (row3.LAPTOP_ORDER_DATE != null) { //
									row_tLogRow_1[42] = FormatterUtils.format_Date(row3.LAPTOP_ORDER_DATE,
											"dd-MM-yyyy");

								} //

								if (row3.ACCOUNT_NO != null) { //
									row_tLogRow_1[43] = String.valueOf(row3.ACCOUNT_NO);

								} //

								if (row3.USER_FIELD_1 != null) { //
									row_tLogRow_1[44] = String.valueOf(row3.USER_FIELD_1);

								} //

								if (row3.DELIVERY_DATE != null) { //
									row_tLogRow_1[45] = FormatterUtils.format_Date(row3.DELIVERY_DATE, "dd-MM-yyyy");

								} //

								if (row3.EMPLOYEE_NO != null) { //
									row_tLogRow_1[46] = String.valueOf(row3.EMPLOYEE_NO);

								} //

								if (row3.RESHIP_STATUS != null) { //
									row_tLogRow_1[47] = String.valueOf(row3.RESHIP_STATUS);

								} //

								if (row3.HOLD_ORDER_FLAG != null) { //
									row_tLogRow_1[48] = String.valueOf(row3.HOLD_ORDER_FLAG);

								} //

								if (row3.RELEASE_ORDER_FLAG != null) { //
									row_tLogRow_1[49] = String.valueOf(row3.RELEASE_ORDER_FLAG);

								} //

								if (row3.HOLD_ORDER_REASON_CODE != null) { //
									row_tLogRow_1[50] = String.valueOf(row3.HOLD_ORDER_REASON_CODE);

								} //

								if (row3.RELEASE_ORDER_REASON_CODE != null) { //
									row_tLogRow_1[51] = String.valueOf(row3.RELEASE_ORDER_REASON_CODE);

								} //

								if (row3.TAX_AMOUNT != null) { //
									row_tLogRow_1[52] = row3.TAX_AMOUNT.setScale(3, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.SEND_IMMEDIATE_ORDER_ROUTING != null) { //
									row_tLogRow_1[53] = String.valueOf(row3.SEND_IMMEDIATE_ORDER_ROUTING);

								} //

								if (row3.REMOTE_ORDER_ENTRY_MODE != null) { //
									row_tLogRow_1[54] = String.valueOf(row3.REMOTE_ORDER_ENTRY_MODE);

								} //

								if (row3.REMOTE_ORDER_CONFIRMATION_NO != null) { //
									row_tLogRow_1[55] = row3.REMOTE_ORDER_CONFIRMATION_NO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.FAX_NO != null) { //
									row_tLogRow_1[56] = String.valueOf(row3.FAX_NO);

								} //

								if (row3.PRIMARY_MA != null) { //
									row_tLogRow_1[57] = String.valueOf(row3.PRIMARY_MA);

								} //

								if (row3.GENERIC_LAST_USED_NO != null) { //
									row_tLogRow_1[58] = row3.GENERIC_LAST_USED_NO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.CALL_END_TIME != null) { //
									row_tLogRow_1[59] = row3.CALL_END_TIME.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.CALL_START_TIME_INDICATOR != null) { //
									row_tLogRow_1[60] = String.valueOf(row3.CALL_START_TIME_INDICATOR);

								} //

								if (row3.CALL_END_TIME_INDICATOR != null) { //
									row_tLogRow_1[61] = String.valueOf(row3.CALL_END_TIME_INDICATOR);

								} //

								if (row3.RECORD_LOGICALLY_LOCKED_FLAG != null) { //
									row_tLogRow_1[62] = String.valueOf(row3.RECORD_LOGICALLY_LOCKED_FLAG);

								} //

								if (row3.ERROR_STATUS_FLAG != null) { //
									row_tLogRow_1[63] = String.valueOf(row3.ERROR_STATUS_FLAG);

								} //

								if (row3.REQUEST_STATUS_FLAG != null) { //
									row_tLogRow_1[64] = String.valueOf(row3.REQUEST_STATUS_FLAG);

								} //

								if (row3.ORDER_DETAIL_LINE_NO != null) { //
									row_tLogRow_1[65] = row3.ORDER_DETAIL_LINE_NO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.ENTITY_ID != null) { //
									row_tLogRow_1[66] = String.valueOf(row3.ENTITY_ID);

								} //

								if (row3.PARENT_ENTITY_1 != null) { //
									row_tLogRow_1[67] = String.valueOf(row3.PARENT_ENTITY_1);

								} //

								if (row3.PARENT_ENTITY_2 != null) { //
									row_tLogRow_1[68] = String.valueOf(row3.PARENT_ENTITY_2);

								} //

								if (row3.PARENT_ENTITY_3 != null) { //
									row_tLogRow_1[69] = String.valueOf(row3.PARENT_ENTITY_3);

								} //

								if (row3.CANCEL_DATE != null) { //
									row_tLogRow_1[70] = FormatterUtils.format_Date(row3.CANCEL_DATE, "dd-MM-yyyy");

								} //

								if (row3.SERVICE_ORDER_NO != null) { //
									row_tLogRow_1[71] = row3.SERVICE_ORDER_NO
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.CREATE_TARGET_INDICATOR != null) { //
									row_tLogRow_1[72] = String.valueOf(row3.CREATE_TARGET_INDICATOR);

								} //

								if (row3.VENDOR_APPROVAL_NO != null) { //
									row_tLogRow_1[73] = String.valueOf(row3.VENDOR_APPROVAL_NO);

								} //

								if (row3.REQUESTED_BY != null) { //
									row_tLogRow_1[74] = String.valueOf(row3.REQUESTED_BY);

								} //

								if (row3.TARGET_DESC != null) { //
									row_tLogRow_1[75] = String.valueOf(row3.TARGET_DESC);

								} //

								if (row3.BILL_BACK_VENDOR_FLAG != null) { //
									row_tLogRow_1[76] = String.valueOf(row3.BILL_BACK_VENDOR_FLAG);

								} //

								if (row3.NO_OF_AP_ROLL_DAYS != null) { //
									row_tLogRow_1[77] = row3.NO_OF_AP_ROLL_DAYS
											.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString();

								} //

								if (row3.RETURN_AUTH_NO != null) { //
									row_tLogRow_1[78] = String.valueOf(row3.RETURN_AUTH_NO);

								} //

								if (row3.DISPENSER_EQUIPMENT_ITEM != null) { //
									row_tLogRow_1[79] = String.valueOf(row3.DISPENSER_EQUIPMENT_ITEM);

								} //

								if (row3.LAPTOP_USER_FLAG != null) { //
									row_tLogRow_1[80] = String.valueOf(row3.LAPTOP_USER_FLAG);

								} //

								if (row3.LAPTOP_ORDER_NO != null) { //
									row_tLogRow_1[81] = row3.LAPTOP_ORDER_NO.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.LAPTOP_ZID_NO != null) { //
									row_tLogRow_1[82] = String.valueOf(row3.LAPTOP_ZID_NO);

								} //

								if (row3.STOP_NO != null) { //
									row_tLogRow_1[83] = row3.STOP_NO.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.ENTITY_UPDATED_FLAG != null) { //
									row_tLogRow_1[84] = String.valueOf(row3.ENTITY_UPDATED_FLAG);

								} //

								if (row3.MAJOR_CLASS != null) { //
									row_tLogRow_1[85] = String.valueOf(row3.MAJOR_CLASS);

								} //

								if (row3.SWMS_RECOVERY_INVOICE_NO != null) { //
									row_tLogRow_1[86] = String.valueOf(row3.SWMS_RECOVERY_INVOICE_NO);

								} //

								if (row3.DEFAULT_ROUTE_NO != null) { //
									row_tLogRow_1[87] = String.valueOf(row3.DEFAULT_ROUTE_NO);

								} //

								if (row3.CONFIRM_NO != null) { //
									row_tLogRow_1[88] = row3.CONFIRM_NO.setScale(0, java.math.RoundingMode.HALF_UP)
											.toPlainString();

								} //

								if (row3.CONTAINER_GROUP_ID != null) { //
									row_tLogRow_1[89] = String.valueOf(row3.CONTAINER_GROUP_ID);

								} //

								if (row3.SEPARATE_CONTAINER_FLAG != null) { //
									row_tLogRow_1[90] = String.valueOf(row3.SEPARATE_CONTAINER_FLAG);

								} //

								if (row3.CREATED_TIMESTAMP != null) { //
									row_tLogRow_1[91] = FormatterUtils.format_Date(row3.CREATED_TIMESTAMP,
											"dd-MM-yyyy");

								} //

								if (row3.CREATED_USER_ID != null) { //
									row_tLogRow_1[92] = String.valueOf(row3.CREATED_USER_ID);

								} //

								if (row3.UPDATED_TIMESTAMP != null) { //
									row_tLogRow_1[93] = FormatterUtils.format_Date(row3.UPDATED_TIMESTAMP,
											"dd-MM-yyyy");

								} //

								if (row3.UPDATED_USER_ID != null) { //
									row_tLogRow_1[94] = String.valueOf(row3.UPDATED_USER_ID);

								} //

								if (row3.IS_DELETED != null) { //
									row_tLogRow_1[95] = String.valueOf(row3.IS_DELETED);

								} //

								if (row3.errorCode != null) { //
									row_tLogRow_1[96] = String.valueOf(row3.errorCode);

								} //

								if (row3.errorMessage != null) { //
									row_tLogRow_1[97] = String.valueOf(row3.errorMessage);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "ORDER_PROCESS_HEADER"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "ORDER_PROCESS_HEADER");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Order_Process_Header_Inbound Order_Process_Header_InboundClass = new Order_Process_Header_Inbound();

		int exitCode = Order_Process_Header_InboundClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Order_Process_Header_Inbound.class.getClassLoader().getResourceAsStream(
					"sus_sli_etl/order_process_header_inbound_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Order_Process_Header_Inbound.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("SUS_Login", "id_String");
					if (context.getStringValue("SUS_Login") == null) {
						context.SUS_Login = null;
					} else {
						context.SUS_Login = (String) context.getProperty("SUS_Login");
					}
					context.setContextType("SUS_Password", "id_Password");
					if (context.getStringValue("SUS_Password") == null) {
						context.SUS_Password = null;
					} else {
						String pwd_SUS_Password_value = context.getProperty("SUS_Password");
						context.SUS_Password = null;
						if (pwd_SUS_Password_value != null) {
							if (context_param.containsKey("SUS_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.SUS_Password = pwd_SUS_Password_value;
							} else if (!pwd_SUS_Password_value.isEmpty()) {
								try {
									context.SUS_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_SUS_Password_value);
									context.put("SUS_Password", context.SUS_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("SUS_Database", "id_String");
					if (context.getStringValue("SUS_Database") == null) {
						context.SUS_Database = null;
					} else {
						context.SUS_Database = (String) context.getProperty("SUS_Database");
					}
					context.setContextType("SUS_Server", "id_String");
					if (context.getStringValue("SUS_Server") == null) {
						context.SUS_Server = null;
					} else {
						context.SUS_Server = (String) context.getProperty("SUS_Server");
					}
					context.setContextType("SUS_Additional_Params", "id_String");
					if (context.getStringValue("SUS_Additional_Params") == null) {
						context.SUS_Additional_Params = null;
					} else {
						context.SUS_Additional_Params = (String) context.getProperty("SUS_Additional_Params");
					}
					context.setContextType("GIM_Schema_Migrating_Test", "id_String");
					if (context.getStringValue("GIM_Schema_Migrating_Test") == null) {
						context.GIM_Schema_Migrating_Test = null;
					} else {
						context.GIM_Schema_Migrating_Test = (String) context.getProperty("GIM_Schema_Migrating_Test");
					}
					context.setContextType("GIM_AdditionalParams", "id_String");
					if (context.getStringValue("GIM_AdditionalParams") == null) {
						context.GIM_AdditionalParams = null;
					} else {
						context.GIM_AdditionalParams = (String) context.getProperty("GIM_AdditionalParams");
					}
					context.setContextType("GIM_Password", "id_Password");
					if (context.getStringValue("GIM_Password") == null) {
						context.GIM_Password = null;
					} else {
						String pwd_GIM_Password_value = context.getProperty("GIM_Password");
						context.GIM_Password = null;
						if (pwd_GIM_Password_value != null) {
							if (context_param.containsKey("GIM_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.GIM_Password = pwd_GIM_Password_value;
							} else if (!pwd_GIM_Password_value.isEmpty()) {
								try {
									context.GIM_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_GIM_Password_value);
									context.put("GIM_Password", context.GIM_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("GIM_Server", "id_String");
					if (context.getStringValue("GIM_Server") == null) {
						context.GIM_Server = null;
					} else {
						context.GIM_Server = (String) context.getProperty("GIM_Server");
					}
					context.setContextType("GIM_Database", "id_String");
					if (context.getStringValue("GIM_Database") == null) {
						context.GIM_Database = null;
					} else {
						context.GIM_Database = (String) context.getProperty("GIM_Database");
					}
					context.setContextType("GIM_Port", "id_String");
					if (context.getStringValue("GIM_Port") == null) {
						context.GIM_Port = null;
					} else {
						context.GIM_Port = (String) context.getProperty("GIM_Port");
					}
					context.setContextType("GIM_Login", "id_String");
					if (context.getStringValue("GIM_Login") == null) {
						context.GIM_Login = null;
					} else {
						context.GIM_Login = (String) context.getProperty("GIM_Login");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("SUS_Login")) {
				context.SUS_Login = (String) parentContextMap.get("SUS_Login");
			}
			if (parentContextMap.containsKey("SUS_Password")) {
				context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
			}
			if (parentContextMap.containsKey("SUS_Database")) {
				context.SUS_Database = (String) parentContextMap.get("SUS_Database");
			}
			if (parentContextMap.containsKey("SUS_Server")) {
				context.SUS_Server = (String) parentContextMap.get("SUS_Server");
			}
			if (parentContextMap.containsKey("SUS_Additional_Params")) {
				context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
			}
			if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
				context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
			}
			if (parentContextMap.containsKey("GIM_AdditionalParams")) {
				context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
			}
			if (parentContextMap.containsKey("GIM_Password")) {
				context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
			}
			if (parentContextMap.containsKey("GIM_Server")) {
				context.GIM_Server = (String) parentContextMap.get("GIM_Server");
			}
			if (parentContextMap.containsKey("GIM_Database")) {
				context.GIM_Database = (String) parentContextMap.get("GIM_Database");
			}
			if (parentContextMap.containsKey("GIM_Port")) {
				context.GIM_Port = (String) parentContextMap.get("GIM_Port");
			}
			if (parentContextMap.containsKey("GIM_Login")) {
				context.GIM_Login = (String) parentContextMap.get("GIM_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SUS_Password");
		parametersToEncrypt.add("GIM_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Order_Process_Header_Inbound");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 444899 characters generated by Talend Open Studio for Data Integration on the
 * July 20, 2022 at 2:46:39 PM IST
 ************************************************************************************************/