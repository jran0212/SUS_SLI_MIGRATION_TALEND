// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sus_sli_etl.vendor_detail_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Vendor_Detail_Inbound Purpose: Migrating data from USVBA2PF and USVBMKRF
 * to VENDOR_DETAIL<br>
 * Description: Migrating data from USVBA2PF and USVBMKRF to VENDOR_DETAIL <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Vendor_Detail_Inbound implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (SUS_Login != null) {

				this.setProperty("SUS_Login", SUS_Login.toString());

			}

			if (SUS_Password != null) {

				this.setProperty("SUS_Password", SUS_Password.toString());

			}

			if (SUS_Database != null) {

				this.setProperty("SUS_Database", SUS_Database.toString());

			}

			if (SUS_Server != null) {

				this.setProperty("SUS_Server", SUS_Server.toString());

			}

			if (SUS_Additional_Params != null) {

				this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());

			}

			if (GIM_Schema_Migrating_Test != null) {

				this.setProperty("GIM_Schema_Migrating_Test", GIM_Schema_Migrating_Test.toString());

			}

			if (GIM_AdditionalParams != null) {

				this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());

			}

			if (GIM_Password != null) {

				this.setProperty("GIM_Password", GIM_Password.toString());

			}

			if (GIM_Server != null) {

				this.setProperty("GIM_Server", GIM_Server.toString());

			}

			if (GIM_Database != null) {

				this.setProperty("GIM_Database", GIM_Database.toString());

			}

			if (GIM_Port != null) {

				this.setProperty("GIM_Port", GIM_Port.toString());

			}

			if (GIM_Login != null) {

				this.setProperty("GIM_Login", GIM_Login.toString());

			}

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

		public String SUS_Login;

		public String getSUS_Login() {
			return this.SUS_Login;
		}

		public java.lang.String SUS_Password;

		public java.lang.String getSUS_Password() {
			return this.SUS_Password;
		}

		public String SUS_Database;

		public String getSUS_Database() {
			return this.SUS_Database;
		}

		public String SUS_Server;

		public String getSUS_Server() {
			return this.SUS_Server;
		}

		public String SUS_Additional_Params;

		public String getSUS_Additional_Params() {
			return this.SUS_Additional_Params;
		}

		public String GIM_Schema_Migrating_Test;

		public String getGIM_Schema_Migrating_Test() {
			return this.GIM_Schema_Migrating_Test;
		}

		public String GIM_AdditionalParams;

		public String getGIM_AdditionalParams() {
			return this.GIM_AdditionalParams;
		}

		public java.lang.String GIM_Password;

		public java.lang.String getGIM_Password() {
			return this.GIM_Password;
		}

		public String GIM_Server;

		public String getGIM_Server() {
			return this.GIM_Server;
		}

		public String GIM_Database;

		public String getGIM_Database() {
			return this.GIM_Database;
		}

		public String GIM_Port;

		public String getGIM_Port() {
			return this.GIM_Port;
		}

		public String GIM_Login;

		public String getGIM_Login() {
			return this.GIM_Login;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Vendor_Detail_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Vendor_Detail_Inbound.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Vendor_Detail_Inbound.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public String VENDOR_NO;

		public String getVENDOR_NO() {
			return this.VENDOR_NO;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.VENDOR_NO == null) ? 0 : this.VENDOR_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.VENDOR_NO == null) {
				if (other.VENDOR_NO != null)
					return false;

			} else if (!this.VENDOR_NO.equals(other.VENDOR_NO))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.SITE_ID = this.SITE_ID;
			other.VENDOR_NO = this.VENDOR_NO;
			other.IS_DELETED = this.IS_DELETED;
			other.errorCode = this.errorCode;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.VENDOR_NO = this.VENDOR_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.VENDOR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.VENDOR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",VENDOR_NO=" + VENDOR_NO);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.VENDOR_NO, other.VENDOR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class VENDOR_DETAILStruct implements routines.system.IPersistableRow<VENDOR_DETAILStruct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SITE_ID;

		public String getSITE_ID() {
			return this.SITE_ID;
		}

		public String VENDOR_NO;

		public String getVENDOR_NO() {
			return this.VENDOR_NO;
		}

		public Boolean IS_DELETED;

		public Boolean getIS_DELETED() {
			return this.IS_DELETED;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.VENDOR_NO == null) ? 0 : this.VENDOR_NO.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final VENDOR_DETAILStruct other = (VENDOR_DETAILStruct) obj;

			if (this.VENDOR_NO == null) {
				if (other.VENDOR_NO != null)
					return false;

			} else if (!this.VENDOR_NO.equals(other.VENDOR_NO))

				return false;

			return true;
		}

		public void copyDataTo(VENDOR_DETAILStruct other) {

			other.SITE_ID = this.SITE_ID;
			other.VENDOR_NO = this.VENDOR_NO;
			other.IS_DELETED = this.IS_DELETED;

		}

		public void copyKeysDataTo(VENDOR_DETAILStruct other) {

			other.VENDOR_NO = this.VENDOR_NO;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.VENDOR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.SITE_ID = readString(dis);

					this.VENDOR_NO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_DELETED = null;
					} else {
						this.IS_DELETED = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.SITE_ID, dos);

				// String

				writeString(this.VENDOR_NO, dos);

				// Boolean

				if (this.IS_DELETED == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_DELETED);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SITE_ID=" + SITE_ID);
			sb.append(",VENDOR_NO=" + VENDOR_NO);
			sb.append(",IS_DELETED=" + String.valueOf(IS_DELETED));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(VENDOR_DETAILStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.VENDOR_NO, other.VENDOR_NO);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];

		public String A2TYEM;

		public String getA2TYEM() {
			return this.A2TYEM;
		}

		public String A2EDIP;

		public String getA2EDIP() {
			return this.A2EDIP;
		}

		public String A2MNOR;

		public String getA2MNOR() {
			return this.A2MNOR;
		}

		public String A2MFGI;

		public String getA2MFGI() {
			return this.A2MFGI;
		}

		public String A2HDHM;

		public String getA2HDHM() {
			return this.A2HDHM;
		}

		public String A2BKID;

		public String getA2BKID() {
			return this.A2BKID;
		}

		public String A2CINS;

		public String getA2CINS() {
			return this.A2CINS;
		}

		public String A2RSTC;

		public String getA2RSTC() {
			return this.A2RSTC;
		}

		public BigDecimal A2AMNT;

		public BigDecimal getA2AMNT() {
			return this.A2AMNT;
		}

		public BigDecimal A2EFDN;

		public BigDecimal getA2EFDN() {
			return this.A2EFDN;
		}

		public BigDecimal A2EXP2;

		public BigDecimal getA2EXP2() {
			return this.A2EXP2;
		}

		public String A2CARR;

		public String getA2CARR() {
			return this.A2CARR;
		}

		public String A2CAR2;

		public String getA2CAR2() {
			return this.A2CAR2;
		}

		public String A2CAR3;

		public String getA2CAR3() {
			return this.A2CAR3;
		}

		public String A2BKNM;

		public String getA2BKNM() {
			return this.A2BKNM;
		}

		public String A2ACNM;

		public String getA2ACNM() {
			return this.A2ACNM;
		}

		public String A2VNBR;

		public String getA2VNBR() {
			return this.A2VNBR;
		}

		public BigDecimal A2TVPC;

		public BigDecimal getA2TVPC() {
			return this.A2TVPC;
		}

		public BigDecimal A2EXP1;

		public BigDecimal getA2EXP1() {
			return this.A2EXP1;
		}

		public BigDecimal A2VRPC;

		public BigDecimal getA2VRPC() {
			return this.A2VRPC;
		}

		public String A2APID;

		public String getA2APID() {
			return this.A2APID;
		}

		public String A2AINS;

		public String getA2AINS() {
			return this.A2AINS;
		}

		public BigDecimal A2CADT;

		public BigDecimal getA2CADT() {
			return this.A2CADT;
		}

		public String A2BOOK;

		public String getA2BOOK() {
			return this.A2BOOK;
		}

		public String A2MDEX;

		public String getA2MDEX() {
			return this.A2MDEX;
		}

		public String A2VSTS;

		public String getA2VSTS() {
			return this.A2VSTS;
		}

		public BigDecimal A2SEDT;

		public BigDecimal getA2SEDT() {
			return this.A2SEDT;
		}

		public String A2AFFI;

		public String getA2AFFI() {
			return this.A2AFFI;
		}

		public String A2VNDP;

		public String getA2VNDP() {
			return this.A2VNDP;
		}

		public String A2VNDN;

		public String getA2VNDN() {
			return this.A2VNDN;
		}

		public String A2VRCC;

		public String getA2VRCC() {
			return this.A2VRCC;
		}

		public String A2APCO;

		public String getA2APCO() {
			return this.A2APCO;
		}

		public BigDecimal A2ACHA;

		public BigDecimal getA2ACHA() {
			return this.A2ACHA;
		}

		public String A2PARP;

		public String getA2PARP() {
			return this.A2PARP;
		}

		public String A2NANO;

		public String getA2NANO() {
			return this.A2NANO;
		}

		public BigDecimal A2AAED;

		public BigDecimal getA2AAED() {
			return this.A2AAED;
		}

		public BigDecimal A2MOED;

		public BigDecimal getA2MOED() {
			return this.A2MOED;
		}

		public String A2VAGR;

		public String getA2VAGR() {
			return this.A2VAGR;
		}

		public BigDecimal A2MOXD;

		public BigDecimal getA2MOXD() {
			return this.A2MOXD;
		}

		public BigDecimal A2AAXD;

		public BigDecimal getA2AAXD() {
			return this.A2AAXD;
		}

		public String A2TVND;

		public String getA2TVND() {
			return this.A2TVND;
		}

		public String A2DSVF;

		public String getA2DSVF() {
			return this.A2DSVF;
		}

		public BigDecimal A2AUSQ;

		public BigDecimal getA2AUSQ() {
			return this.A2AUSQ;
		}

		public String A2EMDP;

		public String getA2EMDP() {
			return this.A2EMDP;
		}

		public String A2PCCD;

		public String getA2PCCD() {
			return this.A2PCCD;
		}

		public String A2VNNM;

		public String getA2VNNM() {
			return this.A2VNNM;
		}

		public String A2PFLG;

		public String getA2PFLG() {
			return this.A2PFLG;
		}

		public String A2CDOI;

		public String getA2CDOI() {
			return this.A2CDOI;
		}

		public String A2TVFL;

		public String getA2TVFL() {
			return this.A2TVFL;
		}

		public String A2PRVS;

		public String getA2PRVS() {
			return this.A2PRVS;
		}

		public String A2CERT;

		public String getA2CERT() {
			return this.A2CERT;
		}

		public BigDecimal A2APRD;

		public BigDecimal getA2APRD() {
			return this.A2APRD;
		}

		public String A2VPYF;

		public String getA2VPYF() {
			return this.A2VPYF;
		}

		public String A2CCHH;

		public String getA2CCHH() {
			return this.A2CCHH;
		}

		public String A2CCIN;

		public String getA2CCIN() {
			return this.A2CCIN;
		}

		public String A2PAFL;

		public String getA2PAFL() {
			return this.A2PAFL;
		}

		public String A2MSAF;

		public String getA2MSAF() {
			return this.A2MSAF;
		}

		public BigDecimal A2EXP3;

		public BigDecimal getA2EXP3() {
			return this.A2EXP3;
		}

		public String A2HRLI;

		public String getA2HRLI() {
			return this.A2HRLI;
		}

		public String A2HRTY;

		public String getA2HRTY() {
			return this.A2HRTY;
		}

		public String A2HRBU;

		public String getA2HRBU() {
			return this.A2HRBU;
		}

		public BigDecimal A2EADT;

		public BigDecimal getA2EADT() {
			return this.A2EADT;
		}

		public BigDecimal A2EATM;

		public BigDecimal getA2EATM() {
			return this.A2EATM;
		}

		public String A2EAID;

		public String getA2EAID() {
			return this.A2EAID;
		}

		public BigDecimal A2MODT;

		public BigDecimal getA2MODT() {
			return this.A2MODT;
		}

		public BigDecimal A2MOTM;

		public BigDecimal getA2MOTM() {
			return this.A2MOTM;
		}

		public String A2MOID;

		public String getA2MOID() {
			return this.A2MOID;
		}

		public String A2MOPG;

		public String getA2MOPG() {
			return this.A2MOPG;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.A2TYEM = readString(dis);

					this.A2EDIP = readString(dis);

					this.A2MNOR = readString(dis);

					this.A2MFGI = readString(dis);

					this.A2HDHM = readString(dis);

					this.A2BKID = readString(dis);

					this.A2CINS = readString(dis);

					this.A2RSTC = readString(dis);

					this.A2AMNT = (BigDecimal) dis.readObject();

					this.A2EFDN = (BigDecimal) dis.readObject();

					this.A2EXP2 = (BigDecimal) dis.readObject();

					this.A2CARR = readString(dis);

					this.A2CAR2 = readString(dis);

					this.A2CAR3 = readString(dis);

					this.A2BKNM = readString(dis);

					this.A2ACNM = readString(dis);

					this.A2VNBR = readString(dis);

					this.A2TVPC = (BigDecimal) dis.readObject();

					this.A2EXP1 = (BigDecimal) dis.readObject();

					this.A2VRPC = (BigDecimal) dis.readObject();

					this.A2APID = readString(dis);

					this.A2AINS = readString(dis);

					this.A2CADT = (BigDecimal) dis.readObject();

					this.A2BOOK = readString(dis);

					this.A2MDEX = readString(dis);

					this.A2VSTS = readString(dis);

					this.A2SEDT = (BigDecimal) dis.readObject();

					this.A2AFFI = readString(dis);

					this.A2VNDP = readString(dis);

					this.A2VNDN = readString(dis);

					this.A2VRCC = readString(dis);

					this.A2APCO = readString(dis);

					this.A2ACHA = (BigDecimal) dis.readObject();

					this.A2PARP = readString(dis);

					this.A2NANO = readString(dis);

					this.A2AAED = (BigDecimal) dis.readObject();

					this.A2MOED = (BigDecimal) dis.readObject();

					this.A2VAGR = readString(dis);

					this.A2MOXD = (BigDecimal) dis.readObject();

					this.A2AAXD = (BigDecimal) dis.readObject();

					this.A2TVND = readString(dis);

					this.A2DSVF = readString(dis);

					this.A2AUSQ = (BigDecimal) dis.readObject();

					this.A2EMDP = readString(dis);

					this.A2PCCD = readString(dis);

					this.A2VNNM = readString(dis);

					this.A2PFLG = readString(dis);

					this.A2CDOI = readString(dis);

					this.A2TVFL = readString(dis);

					this.A2PRVS = readString(dis);

					this.A2CERT = readString(dis);

					this.A2APRD = (BigDecimal) dis.readObject();

					this.A2VPYF = readString(dis);

					this.A2CCHH = readString(dis);

					this.A2CCIN = readString(dis);

					this.A2PAFL = readString(dis);

					this.A2MSAF = readString(dis);

					this.A2EXP3 = (BigDecimal) dis.readObject();

					this.A2HRLI = readString(dis);

					this.A2HRTY = readString(dis);

					this.A2HRBU = readString(dis);

					this.A2EADT = (BigDecimal) dis.readObject();

					this.A2EATM = (BigDecimal) dis.readObject();

					this.A2EAID = readString(dis);

					this.A2MODT = (BigDecimal) dis.readObject();

					this.A2MOTM = (BigDecimal) dis.readObject();

					this.A2MOID = readString(dis);

					this.A2MOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.A2TYEM = readString(dis);

					this.A2EDIP = readString(dis);

					this.A2MNOR = readString(dis);

					this.A2MFGI = readString(dis);

					this.A2HDHM = readString(dis);

					this.A2BKID = readString(dis);

					this.A2CINS = readString(dis);

					this.A2RSTC = readString(dis);

					this.A2AMNT = (BigDecimal) dis.readObject();

					this.A2EFDN = (BigDecimal) dis.readObject();

					this.A2EXP2 = (BigDecimal) dis.readObject();

					this.A2CARR = readString(dis);

					this.A2CAR2 = readString(dis);

					this.A2CAR3 = readString(dis);

					this.A2BKNM = readString(dis);

					this.A2ACNM = readString(dis);

					this.A2VNBR = readString(dis);

					this.A2TVPC = (BigDecimal) dis.readObject();

					this.A2EXP1 = (BigDecimal) dis.readObject();

					this.A2VRPC = (BigDecimal) dis.readObject();

					this.A2APID = readString(dis);

					this.A2AINS = readString(dis);

					this.A2CADT = (BigDecimal) dis.readObject();

					this.A2BOOK = readString(dis);

					this.A2MDEX = readString(dis);

					this.A2VSTS = readString(dis);

					this.A2SEDT = (BigDecimal) dis.readObject();

					this.A2AFFI = readString(dis);

					this.A2VNDP = readString(dis);

					this.A2VNDN = readString(dis);

					this.A2VRCC = readString(dis);

					this.A2APCO = readString(dis);

					this.A2ACHA = (BigDecimal) dis.readObject();

					this.A2PARP = readString(dis);

					this.A2NANO = readString(dis);

					this.A2AAED = (BigDecimal) dis.readObject();

					this.A2MOED = (BigDecimal) dis.readObject();

					this.A2VAGR = readString(dis);

					this.A2MOXD = (BigDecimal) dis.readObject();

					this.A2AAXD = (BigDecimal) dis.readObject();

					this.A2TVND = readString(dis);

					this.A2DSVF = readString(dis);

					this.A2AUSQ = (BigDecimal) dis.readObject();

					this.A2EMDP = readString(dis);

					this.A2PCCD = readString(dis);

					this.A2VNNM = readString(dis);

					this.A2PFLG = readString(dis);

					this.A2CDOI = readString(dis);

					this.A2TVFL = readString(dis);

					this.A2PRVS = readString(dis);

					this.A2CERT = readString(dis);

					this.A2APRD = (BigDecimal) dis.readObject();

					this.A2VPYF = readString(dis);

					this.A2CCHH = readString(dis);

					this.A2CCIN = readString(dis);

					this.A2PAFL = readString(dis);

					this.A2MSAF = readString(dis);

					this.A2EXP3 = (BigDecimal) dis.readObject();

					this.A2HRLI = readString(dis);

					this.A2HRTY = readString(dis);

					this.A2HRBU = readString(dis);

					this.A2EADT = (BigDecimal) dis.readObject();

					this.A2EATM = (BigDecimal) dis.readObject();

					this.A2EAID = readString(dis);

					this.A2MODT = (BigDecimal) dis.readObject();

					this.A2MOTM = (BigDecimal) dis.readObject();

					this.A2MOID = readString(dis);

					this.A2MOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.A2TYEM, dos);

				// String

				writeString(this.A2EDIP, dos);

				// String

				writeString(this.A2MNOR, dos);

				// String

				writeString(this.A2MFGI, dos);

				// String

				writeString(this.A2HDHM, dos);

				// String

				writeString(this.A2BKID, dos);

				// String

				writeString(this.A2CINS, dos);

				// String

				writeString(this.A2RSTC, dos);

				// BigDecimal

				dos.writeObject(this.A2AMNT);

				// BigDecimal

				dos.writeObject(this.A2EFDN);

				// BigDecimal

				dos.writeObject(this.A2EXP2);

				// String

				writeString(this.A2CARR, dos);

				// String

				writeString(this.A2CAR2, dos);

				// String

				writeString(this.A2CAR3, dos);

				// String

				writeString(this.A2BKNM, dos);

				// String

				writeString(this.A2ACNM, dos);

				// String

				writeString(this.A2VNBR, dos);

				// BigDecimal

				dos.writeObject(this.A2TVPC);

				// BigDecimal

				dos.writeObject(this.A2EXP1);

				// BigDecimal

				dos.writeObject(this.A2VRPC);

				// String

				writeString(this.A2APID, dos);

				// String

				writeString(this.A2AINS, dos);

				// BigDecimal

				dos.writeObject(this.A2CADT);

				// String

				writeString(this.A2BOOK, dos);

				// String

				writeString(this.A2MDEX, dos);

				// String

				writeString(this.A2VSTS, dos);

				// BigDecimal

				dos.writeObject(this.A2SEDT);

				// String

				writeString(this.A2AFFI, dos);

				// String

				writeString(this.A2VNDP, dos);

				// String

				writeString(this.A2VNDN, dos);

				// String

				writeString(this.A2VRCC, dos);

				// String

				writeString(this.A2APCO, dos);

				// BigDecimal

				dos.writeObject(this.A2ACHA);

				// String

				writeString(this.A2PARP, dos);

				// String

				writeString(this.A2NANO, dos);

				// BigDecimal

				dos.writeObject(this.A2AAED);

				// BigDecimal

				dos.writeObject(this.A2MOED);

				// String

				writeString(this.A2VAGR, dos);

				// BigDecimal

				dos.writeObject(this.A2MOXD);

				// BigDecimal

				dos.writeObject(this.A2AAXD);

				// String

				writeString(this.A2TVND, dos);

				// String

				writeString(this.A2DSVF, dos);

				// BigDecimal

				dos.writeObject(this.A2AUSQ);

				// String

				writeString(this.A2EMDP, dos);

				// String

				writeString(this.A2PCCD, dos);

				// String

				writeString(this.A2VNNM, dos);

				// String

				writeString(this.A2PFLG, dos);

				// String

				writeString(this.A2CDOI, dos);

				// String

				writeString(this.A2TVFL, dos);

				// String

				writeString(this.A2PRVS, dos);

				// String

				writeString(this.A2CERT, dos);

				// BigDecimal

				dos.writeObject(this.A2APRD);

				// String

				writeString(this.A2VPYF, dos);

				// String

				writeString(this.A2CCHH, dos);

				// String

				writeString(this.A2CCIN, dos);

				// String

				writeString(this.A2PAFL, dos);

				// String

				writeString(this.A2MSAF, dos);

				// BigDecimal

				dos.writeObject(this.A2EXP3);

				// String

				writeString(this.A2HRLI, dos);

				// String

				writeString(this.A2HRTY, dos);

				// String

				writeString(this.A2HRBU, dos);

				// BigDecimal

				dos.writeObject(this.A2EADT);

				// BigDecimal

				dos.writeObject(this.A2EATM);

				// String

				writeString(this.A2EAID, dos);

				// BigDecimal

				dos.writeObject(this.A2MODT);

				// BigDecimal

				dos.writeObject(this.A2MOTM);

				// String

				writeString(this.A2MOID, dos);

				// String

				writeString(this.A2MOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.A2TYEM, dos);

				// String

				writeString(this.A2EDIP, dos);

				// String

				writeString(this.A2MNOR, dos);

				// String

				writeString(this.A2MFGI, dos);

				// String

				writeString(this.A2HDHM, dos);

				// String

				writeString(this.A2BKID, dos);

				// String

				writeString(this.A2CINS, dos);

				// String

				writeString(this.A2RSTC, dos);

				// BigDecimal

				dos.writeObject(this.A2AMNT);

				// BigDecimal

				dos.writeObject(this.A2EFDN);

				// BigDecimal

				dos.writeObject(this.A2EXP2);

				// String

				writeString(this.A2CARR, dos);

				// String

				writeString(this.A2CAR2, dos);

				// String

				writeString(this.A2CAR3, dos);

				// String

				writeString(this.A2BKNM, dos);

				// String

				writeString(this.A2ACNM, dos);

				// String

				writeString(this.A2VNBR, dos);

				// BigDecimal

				dos.writeObject(this.A2TVPC);

				// BigDecimal

				dos.writeObject(this.A2EXP1);

				// BigDecimal

				dos.writeObject(this.A2VRPC);

				// String

				writeString(this.A2APID, dos);

				// String

				writeString(this.A2AINS, dos);

				// BigDecimal

				dos.writeObject(this.A2CADT);

				// String

				writeString(this.A2BOOK, dos);

				// String

				writeString(this.A2MDEX, dos);

				// String

				writeString(this.A2VSTS, dos);

				// BigDecimal

				dos.writeObject(this.A2SEDT);

				// String

				writeString(this.A2AFFI, dos);

				// String

				writeString(this.A2VNDP, dos);

				// String

				writeString(this.A2VNDN, dos);

				// String

				writeString(this.A2VRCC, dos);

				// String

				writeString(this.A2APCO, dos);

				// BigDecimal

				dos.writeObject(this.A2ACHA);

				// String

				writeString(this.A2PARP, dos);

				// String

				writeString(this.A2NANO, dos);

				// BigDecimal

				dos.writeObject(this.A2AAED);

				// BigDecimal

				dos.writeObject(this.A2MOED);

				// String

				writeString(this.A2VAGR, dos);

				// BigDecimal

				dos.writeObject(this.A2MOXD);

				// BigDecimal

				dos.writeObject(this.A2AAXD);

				// String

				writeString(this.A2TVND, dos);

				// String

				writeString(this.A2DSVF, dos);

				// BigDecimal

				dos.writeObject(this.A2AUSQ);

				// String

				writeString(this.A2EMDP, dos);

				// String

				writeString(this.A2PCCD, dos);

				// String

				writeString(this.A2VNNM, dos);

				// String

				writeString(this.A2PFLG, dos);

				// String

				writeString(this.A2CDOI, dos);

				// String

				writeString(this.A2TVFL, dos);

				// String

				writeString(this.A2PRVS, dos);

				// String

				writeString(this.A2CERT, dos);

				// BigDecimal

				dos.writeObject(this.A2APRD);

				// String

				writeString(this.A2VPYF, dos);

				// String

				writeString(this.A2CCHH, dos);

				// String

				writeString(this.A2CCIN, dos);

				// String

				writeString(this.A2PAFL, dos);

				// String

				writeString(this.A2MSAF, dos);

				// BigDecimal

				dos.writeObject(this.A2EXP3);

				// String

				writeString(this.A2HRLI, dos);

				// String

				writeString(this.A2HRTY, dos);

				// String

				writeString(this.A2HRBU, dos);

				// BigDecimal

				dos.writeObject(this.A2EADT);

				// BigDecimal

				dos.writeObject(this.A2EATM);

				// String

				writeString(this.A2EAID, dos);

				// BigDecimal

				dos.writeObject(this.A2MODT);

				// BigDecimal

				dos.writeObject(this.A2MOTM);

				// String

				writeString(this.A2MOID, dos);

				// String

				writeString(this.A2MOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A2TYEM=" + A2TYEM);
			sb.append(",A2EDIP=" + A2EDIP);
			sb.append(",A2MNOR=" + A2MNOR);
			sb.append(",A2MFGI=" + A2MFGI);
			sb.append(",A2HDHM=" + A2HDHM);
			sb.append(",A2BKID=" + A2BKID);
			sb.append(",A2CINS=" + A2CINS);
			sb.append(",A2RSTC=" + A2RSTC);
			sb.append(",A2AMNT=" + String.valueOf(A2AMNT));
			sb.append(",A2EFDN=" + String.valueOf(A2EFDN));
			sb.append(",A2EXP2=" + String.valueOf(A2EXP2));
			sb.append(",A2CARR=" + A2CARR);
			sb.append(",A2CAR2=" + A2CAR2);
			sb.append(",A2CAR3=" + A2CAR3);
			sb.append(",A2BKNM=" + A2BKNM);
			sb.append(",A2ACNM=" + A2ACNM);
			sb.append(",A2VNBR=" + A2VNBR);
			sb.append(",A2TVPC=" + String.valueOf(A2TVPC));
			sb.append(",A2EXP1=" + String.valueOf(A2EXP1));
			sb.append(",A2VRPC=" + String.valueOf(A2VRPC));
			sb.append(",A2APID=" + A2APID);
			sb.append(",A2AINS=" + A2AINS);
			sb.append(",A2CADT=" + String.valueOf(A2CADT));
			sb.append(",A2BOOK=" + A2BOOK);
			sb.append(",A2MDEX=" + A2MDEX);
			sb.append(",A2VSTS=" + A2VSTS);
			sb.append(",A2SEDT=" + String.valueOf(A2SEDT));
			sb.append(",A2AFFI=" + A2AFFI);
			sb.append(",A2VNDP=" + A2VNDP);
			sb.append(",A2VNDN=" + A2VNDN);
			sb.append(",A2VRCC=" + A2VRCC);
			sb.append(",A2APCO=" + A2APCO);
			sb.append(",A2ACHA=" + String.valueOf(A2ACHA));
			sb.append(",A2PARP=" + A2PARP);
			sb.append(",A2NANO=" + A2NANO);
			sb.append(",A2AAED=" + String.valueOf(A2AAED));
			sb.append(",A2MOED=" + String.valueOf(A2MOED));
			sb.append(",A2VAGR=" + A2VAGR);
			sb.append(",A2MOXD=" + String.valueOf(A2MOXD));
			sb.append(",A2AAXD=" + String.valueOf(A2AAXD));
			sb.append(",A2TVND=" + A2TVND);
			sb.append(",A2DSVF=" + A2DSVF);
			sb.append(",A2AUSQ=" + String.valueOf(A2AUSQ));
			sb.append(",A2EMDP=" + A2EMDP);
			sb.append(",A2PCCD=" + A2PCCD);
			sb.append(",A2VNNM=" + A2VNNM);
			sb.append(",A2PFLG=" + A2PFLG);
			sb.append(",A2CDOI=" + A2CDOI);
			sb.append(",A2TVFL=" + A2TVFL);
			sb.append(",A2PRVS=" + A2PRVS);
			sb.append(",A2CERT=" + A2CERT);
			sb.append(",A2APRD=" + String.valueOf(A2APRD));
			sb.append(",A2VPYF=" + A2VPYF);
			sb.append(",A2CCHH=" + A2CCHH);
			sb.append(",A2CCIN=" + A2CCIN);
			sb.append(",A2PAFL=" + A2PAFL);
			sb.append(",A2MSAF=" + A2MSAF);
			sb.append(",A2EXP3=" + String.valueOf(A2EXP3));
			sb.append(",A2HRLI=" + A2HRLI);
			sb.append(",A2HRTY=" + A2HRTY);
			sb.append(",A2HRBU=" + A2HRBU);
			sb.append(",A2EADT=" + String.valueOf(A2EADT));
			sb.append(",A2EATM=" + String.valueOf(A2EATM));
			sb.append(",A2EAID=" + A2EAID);
			sb.append(",A2MODT=" + String.valueOf(A2MODT));
			sb.append(",A2MOTM=" + String.valueOf(A2MOTM));
			sb.append(",A2MOID=" + A2MOID);
			sb.append(",A2MOPG=" + A2MOPG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];

		public String A2TYEM;

		public String getA2TYEM() {
			return this.A2TYEM;
		}

		public String A2EDIP;

		public String getA2EDIP() {
			return this.A2EDIP;
		}

		public String A2MNOR;

		public String getA2MNOR() {
			return this.A2MNOR;
		}

		public String A2MFGI;

		public String getA2MFGI() {
			return this.A2MFGI;
		}

		public String A2HDHM;

		public String getA2HDHM() {
			return this.A2HDHM;
		}

		public String A2BKID;

		public String getA2BKID() {
			return this.A2BKID;
		}

		public String A2CINS;

		public String getA2CINS() {
			return this.A2CINS;
		}

		public String A2RSTC;

		public String getA2RSTC() {
			return this.A2RSTC;
		}

		public BigDecimal A2AMNT;

		public BigDecimal getA2AMNT() {
			return this.A2AMNT;
		}

		public BigDecimal A2EFDN;

		public BigDecimal getA2EFDN() {
			return this.A2EFDN;
		}

		public BigDecimal A2EXP2;

		public BigDecimal getA2EXP2() {
			return this.A2EXP2;
		}

		public String A2CARR;

		public String getA2CARR() {
			return this.A2CARR;
		}

		public String A2CAR2;

		public String getA2CAR2() {
			return this.A2CAR2;
		}

		public String A2CAR3;

		public String getA2CAR3() {
			return this.A2CAR3;
		}

		public String A2BKNM;

		public String getA2BKNM() {
			return this.A2BKNM;
		}

		public String A2ACNM;

		public String getA2ACNM() {
			return this.A2ACNM;
		}

		public String A2VNBR;

		public String getA2VNBR() {
			return this.A2VNBR;
		}

		public BigDecimal A2TVPC;

		public BigDecimal getA2TVPC() {
			return this.A2TVPC;
		}

		public BigDecimal A2EXP1;

		public BigDecimal getA2EXP1() {
			return this.A2EXP1;
		}

		public BigDecimal A2VRPC;

		public BigDecimal getA2VRPC() {
			return this.A2VRPC;
		}

		public String A2APID;

		public String getA2APID() {
			return this.A2APID;
		}

		public String A2AINS;

		public String getA2AINS() {
			return this.A2AINS;
		}

		public BigDecimal A2CADT;

		public BigDecimal getA2CADT() {
			return this.A2CADT;
		}

		public String A2BOOK;

		public String getA2BOOK() {
			return this.A2BOOK;
		}

		public String A2MDEX;

		public String getA2MDEX() {
			return this.A2MDEX;
		}

		public String A2VSTS;

		public String getA2VSTS() {
			return this.A2VSTS;
		}

		public BigDecimal A2SEDT;

		public BigDecimal getA2SEDT() {
			return this.A2SEDT;
		}

		public String A2AFFI;

		public String getA2AFFI() {
			return this.A2AFFI;
		}

		public String A2VNDP;

		public String getA2VNDP() {
			return this.A2VNDP;
		}

		public String A2VNDN;

		public String getA2VNDN() {
			return this.A2VNDN;
		}

		public String A2VRCC;

		public String getA2VRCC() {
			return this.A2VRCC;
		}

		public String A2APCO;

		public String getA2APCO() {
			return this.A2APCO;
		}

		public BigDecimal A2ACHA;

		public BigDecimal getA2ACHA() {
			return this.A2ACHA;
		}

		public String A2PARP;

		public String getA2PARP() {
			return this.A2PARP;
		}

		public String A2NANO;

		public String getA2NANO() {
			return this.A2NANO;
		}

		public BigDecimal A2AAED;

		public BigDecimal getA2AAED() {
			return this.A2AAED;
		}

		public BigDecimal A2MOED;

		public BigDecimal getA2MOED() {
			return this.A2MOED;
		}

		public String A2VAGR;

		public String getA2VAGR() {
			return this.A2VAGR;
		}

		public BigDecimal A2MOXD;

		public BigDecimal getA2MOXD() {
			return this.A2MOXD;
		}

		public BigDecimal A2AAXD;

		public BigDecimal getA2AAXD() {
			return this.A2AAXD;
		}

		public String A2TVND;

		public String getA2TVND() {
			return this.A2TVND;
		}

		public String A2DSVF;

		public String getA2DSVF() {
			return this.A2DSVF;
		}

		public BigDecimal A2AUSQ;

		public BigDecimal getA2AUSQ() {
			return this.A2AUSQ;
		}

		public String A2EMDP;

		public String getA2EMDP() {
			return this.A2EMDP;
		}

		public String A2PCCD;

		public String getA2PCCD() {
			return this.A2PCCD;
		}

		public String A2VNNM;

		public String getA2VNNM() {
			return this.A2VNNM;
		}

		public String A2PFLG;

		public String getA2PFLG() {
			return this.A2PFLG;
		}

		public String A2CDOI;

		public String getA2CDOI() {
			return this.A2CDOI;
		}

		public String A2TVFL;

		public String getA2TVFL() {
			return this.A2TVFL;
		}

		public String A2PRVS;

		public String getA2PRVS() {
			return this.A2PRVS;
		}

		public String A2CERT;

		public String getA2CERT() {
			return this.A2CERT;
		}

		public BigDecimal A2APRD;

		public BigDecimal getA2APRD() {
			return this.A2APRD;
		}

		public String A2VPYF;

		public String getA2VPYF() {
			return this.A2VPYF;
		}

		public String A2CCHH;

		public String getA2CCHH() {
			return this.A2CCHH;
		}

		public String A2CCIN;

		public String getA2CCIN() {
			return this.A2CCIN;
		}

		public String A2PAFL;

		public String getA2PAFL() {
			return this.A2PAFL;
		}

		public String A2MSAF;

		public String getA2MSAF() {
			return this.A2MSAF;
		}

		public BigDecimal A2EXP3;

		public BigDecimal getA2EXP3() {
			return this.A2EXP3;
		}

		public String A2HRLI;

		public String getA2HRLI() {
			return this.A2HRLI;
		}

		public String A2HRTY;

		public String getA2HRTY() {
			return this.A2HRTY;
		}

		public String A2HRBU;

		public String getA2HRBU() {
			return this.A2HRBU;
		}

		public BigDecimal A2EADT;

		public BigDecimal getA2EADT() {
			return this.A2EADT;
		}

		public BigDecimal A2EATM;

		public BigDecimal getA2EATM() {
			return this.A2EATM;
		}

		public String A2EAID;

		public String getA2EAID() {
			return this.A2EAID;
		}

		public BigDecimal A2MODT;

		public BigDecimal getA2MODT() {
			return this.A2MODT;
		}

		public BigDecimal A2MOTM;

		public BigDecimal getA2MOTM() {
			return this.A2MOTM;
		}

		public String A2MOID;

		public String getA2MOID() {
			return this.A2MOID;
		}

		public String A2MOPG;

		public String getA2MOPG() {
			return this.A2MOPG;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.A2TYEM = readString(dis);

					this.A2EDIP = readString(dis);

					this.A2MNOR = readString(dis);

					this.A2MFGI = readString(dis);

					this.A2HDHM = readString(dis);

					this.A2BKID = readString(dis);

					this.A2CINS = readString(dis);

					this.A2RSTC = readString(dis);

					this.A2AMNT = (BigDecimal) dis.readObject();

					this.A2EFDN = (BigDecimal) dis.readObject();

					this.A2EXP2 = (BigDecimal) dis.readObject();

					this.A2CARR = readString(dis);

					this.A2CAR2 = readString(dis);

					this.A2CAR3 = readString(dis);

					this.A2BKNM = readString(dis);

					this.A2ACNM = readString(dis);

					this.A2VNBR = readString(dis);

					this.A2TVPC = (BigDecimal) dis.readObject();

					this.A2EXP1 = (BigDecimal) dis.readObject();

					this.A2VRPC = (BigDecimal) dis.readObject();

					this.A2APID = readString(dis);

					this.A2AINS = readString(dis);

					this.A2CADT = (BigDecimal) dis.readObject();

					this.A2BOOK = readString(dis);

					this.A2MDEX = readString(dis);

					this.A2VSTS = readString(dis);

					this.A2SEDT = (BigDecimal) dis.readObject();

					this.A2AFFI = readString(dis);

					this.A2VNDP = readString(dis);

					this.A2VNDN = readString(dis);

					this.A2VRCC = readString(dis);

					this.A2APCO = readString(dis);

					this.A2ACHA = (BigDecimal) dis.readObject();

					this.A2PARP = readString(dis);

					this.A2NANO = readString(dis);

					this.A2AAED = (BigDecimal) dis.readObject();

					this.A2MOED = (BigDecimal) dis.readObject();

					this.A2VAGR = readString(dis);

					this.A2MOXD = (BigDecimal) dis.readObject();

					this.A2AAXD = (BigDecimal) dis.readObject();

					this.A2TVND = readString(dis);

					this.A2DSVF = readString(dis);

					this.A2AUSQ = (BigDecimal) dis.readObject();

					this.A2EMDP = readString(dis);

					this.A2PCCD = readString(dis);

					this.A2VNNM = readString(dis);

					this.A2PFLG = readString(dis);

					this.A2CDOI = readString(dis);

					this.A2TVFL = readString(dis);

					this.A2PRVS = readString(dis);

					this.A2CERT = readString(dis);

					this.A2APRD = (BigDecimal) dis.readObject();

					this.A2VPYF = readString(dis);

					this.A2CCHH = readString(dis);

					this.A2CCIN = readString(dis);

					this.A2PAFL = readString(dis);

					this.A2MSAF = readString(dis);

					this.A2EXP3 = (BigDecimal) dis.readObject();

					this.A2HRLI = readString(dis);

					this.A2HRTY = readString(dis);

					this.A2HRBU = readString(dis);

					this.A2EADT = (BigDecimal) dis.readObject();

					this.A2EATM = (BigDecimal) dis.readObject();

					this.A2EAID = readString(dis);

					this.A2MODT = (BigDecimal) dis.readObject();

					this.A2MOTM = (BigDecimal) dis.readObject();

					this.A2MOID = readString(dis);

					this.A2MOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.A2TYEM = readString(dis);

					this.A2EDIP = readString(dis);

					this.A2MNOR = readString(dis);

					this.A2MFGI = readString(dis);

					this.A2HDHM = readString(dis);

					this.A2BKID = readString(dis);

					this.A2CINS = readString(dis);

					this.A2RSTC = readString(dis);

					this.A2AMNT = (BigDecimal) dis.readObject();

					this.A2EFDN = (BigDecimal) dis.readObject();

					this.A2EXP2 = (BigDecimal) dis.readObject();

					this.A2CARR = readString(dis);

					this.A2CAR2 = readString(dis);

					this.A2CAR3 = readString(dis);

					this.A2BKNM = readString(dis);

					this.A2ACNM = readString(dis);

					this.A2VNBR = readString(dis);

					this.A2TVPC = (BigDecimal) dis.readObject();

					this.A2EXP1 = (BigDecimal) dis.readObject();

					this.A2VRPC = (BigDecimal) dis.readObject();

					this.A2APID = readString(dis);

					this.A2AINS = readString(dis);

					this.A2CADT = (BigDecimal) dis.readObject();

					this.A2BOOK = readString(dis);

					this.A2MDEX = readString(dis);

					this.A2VSTS = readString(dis);

					this.A2SEDT = (BigDecimal) dis.readObject();

					this.A2AFFI = readString(dis);

					this.A2VNDP = readString(dis);

					this.A2VNDN = readString(dis);

					this.A2VRCC = readString(dis);

					this.A2APCO = readString(dis);

					this.A2ACHA = (BigDecimal) dis.readObject();

					this.A2PARP = readString(dis);

					this.A2NANO = readString(dis);

					this.A2AAED = (BigDecimal) dis.readObject();

					this.A2MOED = (BigDecimal) dis.readObject();

					this.A2VAGR = readString(dis);

					this.A2MOXD = (BigDecimal) dis.readObject();

					this.A2AAXD = (BigDecimal) dis.readObject();

					this.A2TVND = readString(dis);

					this.A2DSVF = readString(dis);

					this.A2AUSQ = (BigDecimal) dis.readObject();

					this.A2EMDP = readString(dis);

					this.A2PCCD = readString(dis);

					this.A2VNNM = readString(dis);

					this.A2PFLG = readString(dis);

					this.A2CDOI = readString(dis);

					this.A2TVFL = readString(dis);

					this.A2PRVS = readString(dis);

					this.A2CERT = readString(dis);

					this.A2APRD = (BigDecimal) dis.readObject();

					this.A2VPYF = readString(dis);

					this.A2CCHH = readString(dis);

					this.A2CCIN = readString(dis);

					this.A2PAFL = readString(dis);

					this.A2MSAF = readString(dis);

					this.A2EXP3 = (BigDecimal) dis.readObject();

					this.A2HRLI = readString(dis);

					this.A2HRTY = readString(dis);

					this.A2HRBU = readString(dis);

					this.A2EADT = (BigDecimal) dis.readObject();

					this.A2EATM = (BigDecimal) dis.readObject();

					this.A2EAID = readString(dis);

					this.A2MODT = (BigDecimal) dis.readObject();

					this.A2MOTM = (BigDecimal) dis.readObject();

					this.A2MOID = readString(dis);

					this.A2MOPG = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.A2TYEM, dos);

				// String

				writeString(this.A2EDIP, dos);

				// String

				writeString(this.A2MNOR, dos);

				// String

				writeString(this.A2MFGI, dos);

				// String

				writeString(this.A2HDHM, dos);

				// String

				writeString(this.A2BKID, dos);

				// String

				writeString(this.A2CINS, dos);

				// String

				writeString(this.A2RSTC, dos);

				// BigDecimal

				dos.writeObject(this.A2AMNT);

				// BigDecimal

				dos.writeObject(this.A2EFDN);

				// BigDecimal

				dos.writeObject(this.A2EXP2);

				// String

				writeString(this.A2CARR, dos);

				// String

				writeString(this.A2CAR2, dos);

				// String

				writeString(this.A2CAR3, dos);

				// String

				writeString(this.A2BKNM, dos);

				// String

				writeString(this.A2ACNM, dos);

				// String

				writeString(this.A2VNBR, dos);

				// BigDecimal

				dos.writeObject(this.A2TVPC);

				// BigDecimal

				dos.writeObject(this.A2EXP1);

				// BigDecimal

				dos.writeObject(this.A2VRPC);

				// String

				writeString(this.A2APID, dos);

				// String

				writeString(this.A2AINS, dos);

				// BigDecimal

				dos.writeObject(this.A2CADT);

				// String

				writeString(this.A2BOOK, dos);

				// String

				writeString(this.A2MDEX, dos);

				// String

				writeString(this.A2VSTS, dos);

				// BigDecimal

				dos.writeObject(this.A2SEDT);

				// String

				writeString(this.A2AFFI, dos);

				// String

				writeString(this.A2VNDP, dos);

				// String

				writeString(this.A2VNDN, dos);

				// String

				writeString(this.A2VRCC, dos);

				// String

				writeString(this.A2APCO, dos);

				// BigDecimal

				dos.writeObject(this.A2ACHA);

				// String

				writeString(this.A2PARP, dos);

				// String

				writeString(this.A2NANO, dos);

				// BigDecimal

				dos.writeObject(this.A2AAED);

				// BigDecimal

				dos.writeObject(this.A2MOED);

				// String

				writeString(this.A2VAGR, dos);

				// BigDecimal

				dos.writeObject(this.A2MOXD);

				// BigDecimal

				dos.writeObject(this.A2AAXD);

				// String

				writeString(this.A2TVND, dos);

				// String

				writeString(this.A2DSVF, dos);

				// BigDecimal

				dos.writeObject(this.A2AUSQ);

				// String

				writeString(this.A2EMDP, dos);

				// String

				writeString(this.A2PCCD, dos);

				// String

				writeString(this.A2VNNM, dos);

				// String

				writeString(this.A2PFLG, dos);

				// String

				writeString(this.A2CDOI, dos);

				// String

				writeString(this.A2TVFL, dos);

				// String

				writeString(this.A2PRVS, dos);

				// String

				writeString(this.A2CERT, dos);

				// BigDecimal

				dos.writeObject(this.A2APRD);

				// String

				writeString(this.A2VPYF, dos);

				// String

				writeString(this.A2CCHH, dos);

				// String

				writeString(this.A2CCIN, dos);

				// String

				writeString(this.A2PAFL, dos);

				// String

				writeString(this.A2MSAF, dos);

				// BigDecimal

				dos.writeObject(this.A2EXP3);

				// String

				writeString(this.A2HRLI, dos);

				// String

				writeString(this.A2HRTY, dos);

				// String

				writeString(this.A2HRBU, dos);

				// BigDecimal

				dos.writeObject(this.A2EADT);

				// BigDecimal

				dos.writeObject(this.A2EATM);

				// String

				writeString(this.A2EAID, dos);

				// BigDecimal

				dos.writeObject(this.A2MODT);

				// BigDecimal

				dos.writeObject(this.A2MOTM);

				// String

				writeString(this.A2MOID, dos);

				// String

				writeString(this.A2MOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.A2TYEM, dos);

				// String

				writeString(this.A2EDIP, dos);

				// String

				writeString(this.A2MNOR, dos);

				// String

				writeString(this.A2MFGI, dos);

				// String

				writeString(this.A2HDHM, dos);

				// String

				writeString(this.A2BKID, dos);

				// String

				writeString(this.A2CINS, dos);

				// String

				writeString(this.A2RSTC, dos);

				// BigDecimal

				dos.writeObject(this.A2AMNT);

				// BigDecimal

				dos.writeObject(this.A2EFDN);

				// BigDecimal

				dos.writeObject(this.A2EXP2);

				// String

				writeString(this.A2CARR, dos);

				// String

				writeString(this.A2CAR2, dos);

				// String

				writeString(this.A2CAR3, dos);

				// String

				writeString(this.A2BKNM, dos);

				// String

				writeString(this.A2ACNM, dos);

				// String

				writeString(this.A2VNBR, dos);

				// BigDecimal

				dos.writeObject(this.A2TVPC);

				// BigDecimal

				dos.writeObject(this.A2EXP1);

				// BigDecimal

				dos.writeObject(this.A2VRPC);

				// String

				writeString(this.A2APID, dos);

				// String

				writeString(this.A2AINS, dos);

				// BigDecimal

				dos.writeObject(this.A2CADT);

				// String

				writeString(this.A2BOOK, dos);

				// String

				writeString(this.A2MDEX, dos);

				// String

				writeString(this.A2VSTS, dos);

				// BigDecimal

				dos.writeObject(this.A2SEDT);

				// String

				writeString(this.A2AFFI, dos);

				// String

				writeString(this.A2VNDP, dos);

				// String

				writeString(this.A2VNDN, dos);

				// String

				writeString(this.A2VRCC, dos);

				// String

				writeString(this.A2APCO, dos);

				// BigDecimal

				dos.writeObject(this.A2ACHA);

				// String

				writeString(this.A2PARP, dos);

				// String

				writeString(this.A2NANO, dos);

				// BigDecimal

				dos.writeObject(this.A2AAED);

				// BigDecimal

				dos.writeObject(this.A2MOED);

				// String

				writeString(this.A2VAGR, dos);

				// BigDecimal

				dos.writeObject(this.A2MOXD);

				// BigDecimal

				dos.writeObject(this.A2AAXD);

				// String

				writeString(this.A2TVND, dos);

				// String

				writeString(this.A2DSVF, dos);

				// BigDecimal

				dos.writeObject(this.A2AUSQ);

				// String

				writeString(this.A2EMDP, dos);

				// String

				writeString(this.A2PCCD, dos);

				// String

				writeString(this.A2VNNM, dos);

				// String

				writeString(this.A2PFLG, dos);

				// String

				writeString(this.A2CDOI, dos);

				// String

				writeString(this.A2TVFL, dos);

				// String

				writeString(this.A2PRVS, dos);

				// String

				writeString(this.A2CERT, dos);

				// BigDecimal

				dos.writeObject(this.A2APRD);

				// String

				writeString(this.A2VPYF, dos);

				// String

				writeString(this.A2CCHH, dos);

				// String

				writeString(this.A2CCIN, dos);

				// String

				writeString(this.A2PAFL, dos);

				// String

				writeString(this.A2MSAF, dos);

				// BigDecimal

				dos.writeObject(this.A2EXP3);

				// String

				writeString(this.A2HRLI, dos);

				// String

				writeString(this.A2HRTY, dos);

				// String

				writeString(this.A2HRBU, dos);

				// BigDecimal

				dos.writeObject(this.A2EADT);

				// BigDecimal

				dos.writeObject(this.A2EATM);

				// String

				writeString(this.A2EAID, dos);

				// BigDecimal

				dos.writeObject(this.A2MODT);

				// BigDecimal

				dos.writeObject(this.A2MOTM);

				// String

				writeString(this.A2MOID, dos);

				// String

				writeString(this.A2MOPG, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("A2TYEM=" + A2TYEM);
			sb.append(",A2EDIP=" + A2EDIP);
			sb.append(",A2MNOR=" + A2MNOR);
			sb.append(",A2MFGI=" + A2MFGI);
			sb.append(",A2HDHM=" + A2HDHM);
			sb.append(",A2BKID=" + A2BKID);
			sb.append(",A2CINS=" + A2CINS);
			sb.append(",A2RSTC=" + A2RSTC);
			sb.append(",A2AMNT=" + String.valueOf(A2AMNT));
			sb.append(",A2EFDN=" + String.valueOf(A2EFDN));
			sb.append(",A2EXP2=" + String.valueOf(A2EXP2));
			sb.append(",A2CARR=" + A2CARR);
			sb.append(",A2CAR2=" + A2CAR2);
			sb.append(",A2CAR3=" + A2CAR3);
			sb.append(",A2BKNM=" + A2BKNM);
			sb.append(",A2ACNM=" + A2ACNM);
			sb.append(",A2VNBR=" + A2VNBR);
			sb.append(",A2TVPC=" + String.valueOf(A2TVPC));
			sb.append(",A2EXP1=" + String.valueOf(A2EXP1));
			sb.append(",A2VRPC=" + String.valueOf(A2VRPC));
			sb.append(",A2APID=" + A2APID);
			sb.append(",A2AINS=" + A2AINS);
			sb.append(",A2CADT=" + String.valueOf(A2CADT));
			sb.append(",A2BOOK=" + A2BOOK);
			sb.append(",A2MDEX=" + A2MDEX);
			sb.append(",A2VSTS=" + A2VSTS);
			sb.append(",A2SEDT=" + String.valueOf(A2SEDT));
			sb.append(",A2AFFI=" + A2AFFI);
			sb.append(",A2VNDP=" + A2VNDP);
			sb.append(",A2VNDN=" + A2VNDN);
			sb.append(",A2VRCC=" + A2VRCC);
			sb.append(",A2APCO=" + A2APCO);
			sb.append(",A2ACHA=" + String.valueOf(A2ACHA));
			sb.append(",A2PARP=" + A2PARP);
			sb.append(",A2NANO=" + A2NANO);
			sb.append(",A2AAED=" + String.valueOf(A2AAED));
			sb.append(",A2MOED=" + String.valueOf(A2MOED));
			sb.append(",A2VAGR=" + A2VAGR);
			sb.append(",A2MOXD=" + String.valueOf(A2MOXD));
			sb.append(",A2AAXD=" + String.valueOf(A2AAXD));
			sb.append(",A2TVND=" + A2TVND);
			sb.append(",A2DSVF=" + A2DSVF);
			sb.append(",A2AUSQ=" + String.valueOf(A2AUSQ));
			sb.append(",A2EMDP=" + A2EMDP);
			sb.append(",A2PCCD=" + A2PCCD);
			sb.append(",A2VNNM=" + A2VNNM);
			sb.append(",A2PFLG=" + A2PFLG);
			sb.append(",A2CDOI=" + A2CDOI);
			sb.append(",A2TVFL=" + A2TVFL);
			sb.append(",A2PRVS=" + A2PRVS);
			sb.append(",A2CERT=" + A2CERT);
			sb.append(",A2APRD=" + String.valueOf(A2APRD));
			sb.append(",A2VPYF=" + A2VPYF);
			sb.append(",A2CCHH=" + A2CCHH);
			sb.append(",A2CCIN=" + A2CCIN);
			sb.append(",A2PAFL=" + A2PAFL);
			sb.append(",A2MSAF=" + A2MSAF);
			sb.append(",A2EXP3=" + String.valueOf(A2EXP3));
			sb.append(",A2HRLI=" + A2HRLI);
			sb.append(",A2HRTY=" + A2HRTY);
			sb.append(",A2HRBU=" + A2HRBU);
			sb.append(",A2EADT=" + String.valueOf(A2EADT));
			sb.append(",A2EATM=" + String.valueOf(A2EATM));
			sb.append(",A2EAID=" + A2EAID);
			sb.append(",A2MODT=" + String.valueOf(A2MODT));
			sb.append(",A2MOTM=" + String.valueOf(A2MOTM));
			sb.append(",A2MOID=" + A2MOID);
			sb.append(",A2MOPG=" + A2MOPG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				VENDOR_DETAILStruct VENDOR_DETAIL = new VENDOR_DETAILStruct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1
						.addRow(new String[] { "SITE_ID", "VENDOR_NO", "IS_DELETED", "errorCode", "errorMessage", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "VENDOR_DETAIL");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = context.GIM_Schema_Migrating_Test;

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("VENDOR_DETAIL");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("VENDOR_DETAIL");
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 3 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + context.GIM_Server + ":" + context.GIM_Port + "/"
						+ context.GIM_Database + "?" + context.GIM_AdditionalParams;
				dbUser_tDBOutput_1 = context.GIM_Login;

				final String decryptedPassword_tDBOutput_1 = context.GIM_Password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 1;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(
						"SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\" WHERE \"VENDOR_NO\" = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"SITE_ID\",\"VENDOR_NO\",\"IS_DELETED\") VALUES (?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"SITE_ID\" = ?,\"IS_DELETED\" = ? WHERE \"VENDOR_NO\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				VENDOR_DETAILStruct VENDOR_DETAIL_tmp = new VENDOR_DETAILStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;

				final String decryptedPassword_tDBInput_1 = context.SUS_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";"
						+ context.SUS_Additional_Params;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  USVBA2PF.A2TYEM, \n  USVBA2PF.A2EDIP, \n  USVBA2PF.A2MNOR, \n  USVBA2PF.A2MFGI, \n  USVBA2PF.A2HDHM, \n  USVBA2PF."
						+ "A2BKID, \n  USVBA2PF.A2CINS, \n  USVBA2PF.A2RSTC, \n  USVBA2PF.A2AMNT, \n  USVBA2PF.A2EFDN, \n  USVBA2PF.A2EXP2, \n  USVBA2PF."
						+ "A2CARR, \n  USVBA2PF.A2CAR2, \n  USVBA2PF.A2CAR3, \n  USVBA2PF.A2BKNM, \n  USVBA2PF.A2ACNM, \n  USVBA2PF.A2VNBR, \n  USVBA2PF."
						+ "A2TVPC, \n  USVBA2PF.A2EXP1, \n  USVBA2PF.A2VRPC, \n  USVBA2PF.A2APID, \n  USVBA2PF.A2AINS, \n  USVBA2PF.A2CADT, \n  USVBA2PF."
						+ "A2BOOK, \n  USVBA2PF.A2MDEX, \n  USVBA2PF.A2VSTS, \n  USVBA2PF.A2SEDT, \n  USVBA2PF.A2AFFI, \n  USVBA2PF.A2VNDP, \n  USVBA2PF."
						+ "A2VNDN, \n  USVBA2PF.A2VRCC, \n  USVBA2PF.A2APCO, \n  USVBA2PF.A2ACHA, \n  USVBA2PF.A2PARP, \n  USVBA2PF.A2NANO, \n  USVBA2PF."
						+ "A2AAED, \n  USVBA2PF.A2MOED, \n  USVBA2PF.A2VAGR, \n  USVBA2PF.A2MOXD, \n  USVBA2PF.A2AAXD, \n  USVBA2PF.A2TVND, \n  USVBA2PF."
						+ "A2DSVF, \n  USVBA2PF.A2AUSQ, \n  USVBA2PF.A2EMDP, \n  USVBA2PF.A2PCCD, \n  USVBA2PF.A2VNNM, \n  USVBA2PF.A2PFLG, \n  USVBA2PF."
						+ "A2CDOI, \n  USVBA2PF.A2TVFL, \n  USVBA2PF.A2PRVS, \n  USVBA2PF.A2CERT, \n  USVBA2PF.A2APRD, \n  USVBA2PF.A2VPYF, \n  USVBA2PF."
						+ "A2CCHH, \n  USVBA2PF.A2CCIN, \n  USVBA2PF.A2PAFL, \n  USVBA2PF.A2MSAF, \n  USVBA2PF.A2EXP3, \n  USVBA2PF.A2HRLI, \n  USVBA2PF."
						+ "A2HRTY, \n  USVBA2PF.A2HRBU, \n  USVBA2PF.A2EADT, \n  USVBA2PF.A2EATM, \n  USVBA2PF.A2EAID, \n  USVBA2PF.A2MODT, \n  USVBA2PF."
						+ "A2MOTM, \n  USVBA2PF.A2MOID, \n  USVBA2PF.A2MOPG\nFROM USVBA2PF LIMIT 100";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.A2TYEM = null;
						} else {

							row1.A2TYEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, true);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.A2EDIP = null;
						} else {

							row1.A2EDIP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, true);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.A2MNOR = null;
						} else {

							row1.A2MNOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.A2MFGI = null;
						} else {

							row1.A2MFGI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.A2HDHM = null;
						} else {

							row1.A2HDHM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.A2BKID = null;
						} else {

							row1.A2BKID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.A2CINS = null;
						} else {

							row1.A2CINS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.A2RSTC = null;
						} else {

							row1.A2RSTC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, true);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.A2AMNT = null;
						} else {

							row1.A2AMNT = rs_tDBInput_1.getBigDecimal(9);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.A2EFDN = null;
						} else {

							row1.A2EFDN = rs_tDBInput_1.getBigDecimal(10);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.A2EXP2 = null;
						} else {

							row1.A2EXP2 = rs_tDBInput_1.getBigDecimal(11);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.A2CARR = null;
						} else {

							row1.A2CARR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, true);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.A2CAR2 = null;
						} else {

							row1.A2CAR2 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, true);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.A2CAR3 = null;
						} else {

							row1.A2CAR3 = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, true);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.A2BKNM = null;
						} else {

							row1.A2BKNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, true);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.A2ACNM = null;
						} else {

							row1.A2ACNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.A2VNBR = null;
						} else {

							row1.A2VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, true);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.A2TVPC = null;
						} else {

							row1.A2TVPC = rs_tDBInput_1.getBigDecimal(18);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.A2EXP1 = null;
						} else {

							row1.A2EXP1 = rs_tDBInput_1.getBigDecimal(19);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.A2VRPC = null;
						} else {

							row1.A2VRPC = rs_tDBInput_1.getBigDecimal(20);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.A2APID = null;
						} else {

							row1.A2APID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, true);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.A2AINS = null;
						} else {

							row1.A2AINS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, true);
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.A2CADT = null;
						} else {

							row1.A2CADT = rs_tDBInput_1.getBigDecimal(23);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.A2BOOK = null;
						} else {

							row1.A2BOOK = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, true);
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.A2MDEX = null;
						} else {

							row1.A2MDEX = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, true);
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.A2VSTS = null;
						} else {

							row1.A2VSTS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.A2SEDT = null;
						} else {

							row1.A2SEDT = rs_tDBInput_1.getBigDecimal(27);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.A2AFFI = null;
						} else {

							row1.A2AFFI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, true);
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.A2VNDP = null;
						} else {

							row1.A2VNDP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 29, true);
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.A2VNDN = null;
						} else {

							row1.A2VNDN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 30, true);
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.A2VRCC = null;
						} else {

							row1.A2VRCC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, true);
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.A2APCO = null;
						} else {

							row1.A2APCO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, true);
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.A2ACHA = null;
						} else {

							row1.A2ACHA = rs_tDBInput_1.getBigDecimal(33);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.A2PARP = null;
						} else {

							row1.A2PARP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.A2NANO = null;
						} else {

							row1.A2NANO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.A2AAED = null;
						} else {

							row1.A2AAED = rs_tDBInput_1.getBigDecimal(36);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 37) {
							row1.A2MOED = null;
						} else {

							row1.A2MOED = rs_tDBInput_1.getBigDecimal(37);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 38) {
							row1.A2VAGR = null;
						} else {

							row1.A2VAGR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
						}
						if (colQtyInRs_tDBInput_1 < 39) {
							row1.A2MOXD = null;
						} else {

							row1.A2MOXD = rs_tDBInput_1.getBigDecimal(39);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 40) {
							row1.A2AAXD = null;
						} else {

							row1.A2AAXD = rs_tDBInput_1.getBigDecimal(40);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 41) {
							row1.A2TVND = null;
						} else {

							row1.A2TVND = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, true);
						}
						if (colQtyInRs_tDBInput_1 < 42) {
							row1.A2DSVF = null;
						} else {

							row1.A2DSVF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 42, true);
						}
						if (colQtyInRs_tDBInput_1 < 43) {
							row1.A2AUSQ = null;
						} else {

							row1.A2AUSQ = rs_tDBInput_1.getBigDecimal(43);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 44) {
							row1.A2EMDP = null;
						} else {

							row1.A2EMDP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
						}
						if (colQtyInRs_tDBInput_1 < 45) {
							row1.A2PCCD = null;
						} else {

							row1.A2PCCD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, true);
						}
						if (colQtyInRs_tDBInput_1 < 46) {
							row1.A2VNNM = null;
						} else {

							row1.A2VNNM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 46, true);
						}
						if (colQtyInRs_tDBInput_1 < 47) {
							row1.A2PFLG = null;
						} else {

							row1.A2PFLG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 47, true);
						}
						if (colQtyInRs_tDBInput_1 < 48) {
							row1.A2CDOI = null;
						} else {

							row1.A2CDOI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 48, true);
						}
						if (colQtyInRs_tDBInput_1 < 49) {
							row1.A2TVFL = null;
						} else {

							row1.A2TVFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, true);
						}
						if (colQtyInRs_tDBInput_1 < 50) {
							row1.A2PRVS = null;
						} else {

							row1.A2PRVS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
						}
						if (colQtyInRs_tDBInput_1 < 51) {
							row1.A2CERT = null;
						} else {

							row1.A2CERT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, true);
						}
						if (colQtyInRs_tDBInput_1 < 52) {
							row1.A2APRD = null;
						} else {

							row1.A2APRD = rs_tDBInput_1.getBigDecimal(52);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 53) {
							row1.A2VPYF = null;
						} else {

							row1.A2VPYF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, true);
						}
						if (colQtyInRs_tDBInput_1 < 54) {
							row1.A2CCHH = null;
						} else {

							row1.A2CCHH = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, true);
						}
						if (colQtyInRs_tDBInput_1 < 55) {
							row1.A2CCIN = null;
						} else {

							row1.A2CCIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 55, true);
						}
						if (colQtyInRs_tDBInput_1 < 56) {
							row1.A2PAFL = null;
						} else {

							row1.A2PAFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, true);
						}
						if (colQtyInRs_tDBInput_1 < 57) {
							row1.A2MSAF = null;
						} else {

							row1.A2MSAF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 57, true);
						}
						if (colQtyInRs_tDBInput_1 < 58) {
							row1.A2EXP3 = null;
						} else {

							row1.A2EXP3 = rs_tDBInput_1.getBigDecimal(58);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 59) {
							row1.A2HRLI = null;
						} else {

							row1.A2HRLI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 59, true);
						}
						if (colQtyInRs_tDBInput_1 < 60) {
							row1.A2HRTY = null;
						} else {

							row1.A2HRTY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 60, true);
						}
						if (colQtyInRs_tDBInput_1 < 61) {
							row1.A2HRBU = null;
						} else {

							row1.A2HRBU = routines.system.JDBCUtil.getString(rs_tDBInput_1, 61, true);
						}
						if (colQtyInRs_tDBInput_1 < 62) {
							row1.A2EADT = null;
						} else {

							row1.A2EADT = rs_tDBInput_1.getBigDecimal(62);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 63) {
							row1.A2EATM = null;
						} else {

							row1.A2EATM = rs_tDBInput_1.getBigDecimal(63);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 64) {
							row1.A2EAID = null;
						} else {

							row1.A2EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, true);
						}
						if (colQtyInRs_tDBInput_1 < 65) {
							row1.A2MODT = null;
						} else {

							row1.A2MODT = rs_tDBInput_1.getBigDecimal(65);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 66) {
							row1.A2MOTM = null;
						} else {

							row1.A2MOTM = rs_tDBInput_1.getBigDecimal(66);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 67) {
							row1.A2MOID = null;
						} else {

							row1.A2MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 67, true);
						}
						if (colQtyInRs_tDBInput_1 < 68) {
							row1.A2MOPG = null;
						} else {

							row1.A2MOPG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, true);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row2"
						///////////////////////////////////////////////

						boolean forceLooprow2 = false;

						row2Struct row2ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row2HashKey.MKVNBR = row1.A2VNBR;

							row2HashKey.hashCodeDirty = true;

							tHash_Lookup_row2.lookup(row2HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
							// and it contains more one result from keys : row2.MKVNBR = '" +
							// row2HashKey.MKVNBR + "'");
						} // G 071

						row2Struct row2 = null;

						row2Struct fromLookup_row2 = null;
						row2 = row2Default;

						if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

							fromLookup_row2 = tHash_Lookup_row2.next();

						} // G 099

						if (fromLookup_row2 != null) {
							row2 = fromLookup_row2;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							VENDOR_DETAIL = null;

// # Output table : 'VENDOR_DETAIL'
							VENDOR_DETAIL_tmp.SITE_ID = row2.MKCOCO;
							VENDOR_DETAIL_tmp.VENDOR_NO = row1.A2VNBR;
							VENDOR_DETAIL_tmp.IS_DELETED = false;
							VENDOR_DETAIL = VENDOR_DETAIL_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "VENDOR_DETAIL"
						if (VENDOR_DETAIL != null) {
							row3 = null;

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "VENDOR_DETAIL"

								);
							}

							row3 = null;
							whetherReject_tDBOutput_1 = false;
							if (VENDOR_DETAIL.VENDOR_NO == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, VENDOR_DETAIL.VENDOR_NO);
							}

							int checkCount_tDBOutput_1 = -1;
							try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
								while (rs_tDBOutput_1.next()) {
									checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
								}
							}
							if (checkCount_tDBOutput_1 > 0) {
								if (VENDOR_DETAIL.SITE_ID == null) {
									pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(1, VENDOR_DETAIL.SITE_ID);
								}

								if (VENDOR_DETAIL.IS_DELETED == null) {
									pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.BOOLEAN);
								} else {
									pstmtUpdate_tDBOutput_1.setBoolean(2, VENDOR_DETAIL.IS_DELETED);
								}

								if (VENDOR_DETAIL.VENDOR_NO == null) {
									pstmtUpdate_tDBOutput_1.setNull(3 + count_tDBOutput_1, java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tDBOutput_1.setString(3 + count_tDBOutput_1, VENDOR_DETAIL.VENDOR_NO);
								}

								try {

									int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
									updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row3 = new row3Struct();
									row3.SITE_ID = VENDOR_DETAIL.SITE_ID;
									row3.VENDOR_NO = VENDOR_DETAIL.VENDOR_NO;
									row3.IS_DELETED = VENDOR_DETAIL.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row3.errorCode = ((java.sql.SQLException) e).getSQLState();
									row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							} else {
								if (VENDOR_DETAIL.SITE_ID == null) {
									pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(1, VENDOR_DETAIL.SITE_ID);
								}

								if (VENDOR_DETAIL.VENDOR_NO == null) {
									pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tDBOutput_1.setString(2, VENDOR_DETAIL.VENDOR_NO);
								}

								if (VENDOR_DETAIL.IS_DELETED == null) {
									pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.BOOLEAN);
								} else {
									pstmtInsert_tDBOutput_1.setBoolean(3, VENDOR_DETAIL.IS_DELETED);
								}

								try {

									int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
									insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} catch (java.lang.Exception e) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

									whetherReject_tDBOutput_1 = true;
									nb_line_tDBOutput_1++;
									row3 = new row3Struct();
									row3.SITE_ID = VENDOR_DETAIL.SITE_ID;
									row3.VENDOR_NO = VENDOR_DETAIL.VENDOR_NO;
									row3.IS_DELETED = VENDOR_DETAIL.IS_DELETED;
									rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
									row3.errorCode = ((java.sql.SQLException) e).getSQLState();
									row3.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
								}
							}
							if (!whetherReject_tDBOutput_1) {
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if (rowsToCommitCount_tDBOutput_1 != 0) {

								}
								conn_tDBOutput_1.commit();
								if (rowsToCommitCount_tDBOutput_1 != 0) {

									rowsToCommitCount_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[5];

								if (row3.SITE_ID != null) { //
									row_tLogRow_1[0] = String.valueOf(row3.SITE_ID);

								} //

								if (row3.VENDOR_NO != null) { //
									row_tLogRow_1[1] = String.valueOf(row3.VENDOR_NO);

								} //

								if (row3.IS_DELETED != null) { //
									row_tLogRow_1[2] = String.valueOf(row3.IS_DELETED);

								} //

								if (row3.errorCode != null) { //
									row_tLogRow_1[3] = String.valueOf(row3.errorCode);

								} //

								if (row3.errorMessage != null) { //
									row_tLogRow_1[4] = String.valueOf(row3.errorMessage);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "VENDOR_DETAIL"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "VENDOR_DETAIL");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];
		static byte[] commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MKCOCO;

		public String getMKCOCO() {
			return this.MKCOCO;
		}

		public String MKVNBR;

		public String getMKVNBR() {
			return this.MKVNBR;
		}

		public String MKVNNM;

		public String getMKVNNM() {
			return this.MKVNNM;
		}

		public String MKSAAC;

		public String getMKSAAC() {
			return this.MKSAAC;
		}

		public String MKDVCT;

		public String getMKDVCT() {
			return this.MKDVCT;
		}

		public String MKEMAL;

		public String getMKEMAL() {
			return this.MKEMAL;
		}

		public String MKUDNM;

		public String getMKUDNM() {
			return this.MKUDNM;
		}

		public String MKFUA1;

		public String getMKFUA1() {
			return this.MKFUA1;
		}

		public String MKFUA2;

		public String getMKFUA2() {
			return this.MKFUA2;
		}

		public String MKFUA3;

		public String getMKFUA3() {
			return this.MKFUA3;
		}

		public String MKFUF1;

		public String getMKFUF1() {
			return this.MKFUF1;
		}

		public String MKFUF2;

		public String getMKFUF2() {
			return this.MKFUF2;
		}

		public String MKFUF3;

		public String getMKFUF3() {
			return this.MKFUF3;
		}

		public BigDecimal MKFUN1;

		public BigDecimal getMKFUN1() {
			return this.MKFUN1;
		}

		public BigDecimal MKFUN2;

		public BigDecimal getMKFUN2() {
			return this.MKFUN2;
		}

		public BigDecimal MKFUN3;

		public BigDecimal getMKFUN3() {
			return this.MKFUN3;
		}

		public BigDecimal MKEADT;

		public BigDecimal getMKEADT() {
			return this.MKEADT;
		}

		public BigDecimal MKEATM;

		public BigDecimal getMKEATM() {
			return this.MKEATM;
		}

		public String MKEAID;

		public String getMKEAID() {
			return this.MKEAID;
		}

		public String MKEAPG;

		public String getMKEAPG() {
			return this.MKEAPG;
		}

		public BigDecimal MKMODT;

		public BigDecimal getMKMODT() {
			return this.MKMODT;
		}

		public BigDecimal MKMOTM;

		public BigDecimal getMKMOTM() {
			return this.MKMOTM;
		}

		public String MKMOID;

		public String getMKMOID() {
			return this.MKMOID;
		}

		public String MKMOPG;

		public String getMKMOPG() {
			return this.MKMOPG;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.MKVNBR == null) ? 0 : this.MKVNBR.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.MKVNBR == null) {
				if (other.MKVNBR != null)
					return false;

			} else if (!this.MKVNBR.equals(other.MKVNBR))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.MKCOCO = this.MKCOCO;
			other.MKVNBR = this.MKVNBR;
			other.MKVNNM = this.MKVNNM;
			other.MKSAAC = this.MKSAAC;
			other.MKDVCT = this.MKDVCT;
			other.MKEMAL = this.MKEMAL;
			other.MKUDNM = this.MKUDNM;
			other.MKFUA1 = this.MKFUA1;
			other.MKFUA2 = this.MKFUA2;
			other.MKFUA3 = this.MKFUA3;
			other.MKFUF1 = this.MKFUF1;
			other.MKFUF2 = this.MKFUF2;
			other.MKFUF3 = this.MKFUF3;
			other.MKFUN1 = this.MKFUN1;
			other.MKFUN2 = this.MKFUN2;
			other.MKFUN3 = this.MKFUN3;
			other.MKEADT = this.MKEADT;
			other.MKEATM = this.MKEATM;
			other.MKEAID = this.MKEAID;
			other.MKEAPG = this.MKEAPG;
			other.MKMODT = this.MKMODT;
			other.MKMOTM = this.MKMOTM;
			other.MKMOID = this.MKMOID;
			other.MKMOPG = this.MKMOPG;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.MKVNBR = this.MKVNBR;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length) {
					if (length < 1024 && commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound.length == 0) {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[1024];
					} else {
						commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length);
				strReturn = new String(commonByteArray_SUS_SLI_ETL_Vendor_Detail_Inbound, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.MKVNBR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_SUS_SLI_ETL_Vendor_Detail_Inbound) {

				try {

					int length = 0;

					this.MKVNBR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MKVNBR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.MKVNBR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.MKCOCO = readString(dis, ois);

				this.MKVNNM = readString(dis, ois);

				this.MKSAAC = readString(dis, ois);

				this.MKDVCT = readString(dis, ois);

				this.MKEMAL = readString(dis, ois);

				this.MKUDNM = readString(dis, ois);

				this.MKFUA1 = readString(dis, ois);

				this.MKFUA2 = readString(dis, ois);

				this.MKFUA3 = readString(dis, ois);

				this.MKFUF1 = readString(dis, ois);

				this.MKFUF2 = readString(dis, ois);

				this.MKFUF3 = readString(dis, ois);

				this.MKFUN1 = (BigDecimal) ois.readObject();

				this.MKFUN2 = (BigDecimal) ois.readObject();

				this.MKFUN3 = (BigDecimal) ois.readObject();

				this.MKEADT = (BigDecimal) ois.readObject();

				this.MKEATM = (BigDecimal) ois.readObject();

				this.MKEAID = readString(dis, ois);

				this.MKEAPG = readString(dis, ois);

				this.MKMODT = (BigDecimal) ois.readObject();

				this.MKMOTM = (BigDecimal) ois.readObject();

				this.MKMOID = readString(dis, ois);

				this.MKMOPG = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.MKCOCO = readString(dis, objectIn);

				this.MKVNNM = readString(dis, objectIn);

				this.MKSAAC = readString(dis, objectIn);

				this.MKDVCT = readString(dis, objectIn);

				this.MKEMAL = readString(dis, objectIn);

				this.MKUDNM = readString(dis, objectIn);

				this.MKFUA1 = readString(dis, objectIn);

				this.MKFUA2 = readString(dis, objectIn);

				this.MKFUA3 = readString(dis, objectIn);

				this.MKFUF1 = readString(dis, objectIn);

				this.MKFUF2 = readString(dis, objectIn);

				this.MKFUF3 = readString(dis, objectIn);

				this.MKFUN1 = (BigDecimal) objectIn.readObject();

				this.MKFUN2 = (BigDecimal) objectIn.readObject();

				this.MKFUN3 = (BigDecimal) objectIn.readObject();

				this.MKEADT = (BigDecimal) objectIn.readObject();

				this.MKEATM = (BigDecimal) objectIn.readObject();

				this.MKEAID = readString(dis, objectIn);

				this.MKEAPG = readString(dis, objectIn);

				this.MKMODT = (BigDecimal) objectIn.readObject();

				this.MKMOTM = (BigDecimal) objectIn.readObject();

				this.MKMOID = readString(dis, objectIn);

				this.MKMOPG = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.MKCOCO, dos, oos);

				writeString(this.MKVNNM, dos, oos);

				writeString(this.MKSAAC, dos, oos);

				writeString(this.MKDVCT, dos, oos);

				writeString(this.MKEMAL, dos, oos);

				writeString(this.MKUDNM, dos, oos);

				writeString(this.MKFUA1, dos, oos);

				writeString(this.MKFUA2, dos, oos);

				writeString(this.MKFUA3, dos, oos);

				writeString(this.MKFUF1, dos, oos);

				writeString(this.MKFUF2, dos, oos);

				writeString(this.MKFUF3, dos, oos);

				oos.writeObject(this.MKFUN1);

				oos.writeObject(this.MKFUN2);

				oos.writeObject(this.MKFUN3);

				oos.writeObject(this.MKEADT);

				oos.writeObject(this.MKEATM);

				writeString(this.MKEAID, dos, oos);

				writeString(this.MKEAPG, dos, oos);

				oos.writeObject(this.MKMODT);

				oos.writeObject(this.MKMOTM);

				writeString(this.MKMOID, dos, oos);

				writeString(this.MKMOPG, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.MKCOCO, dos, objectOut);

				writeString(this.MKVNNM, dos, objectOut);

				writeString(this.MKSAAC, dos, objectOut);

				writeString(this.MKDVCT, dos, objectOut);

				writeString(this.MKEMAL, dos, objectOut);

				writeString(this.MKUDNM, dos, objectOut);

				writeString(this.MKFUA1, dos, objectOut);

				writeString(this.MKFUA2, dos, objectOut);

				writeString(this.MKFUA3, dos, objectOut);

				writeString(this.MKFUF1, dos, objectOut);

				writeString(this.MKFUF2, dos, objectOut);

				writeString(this.MKFUF3, dos, objectOut);

				objectOut.writeObject(this.MKFUN1);

				objectOut.writeObject(this.MKFUN2);

				objectOut.writeObject(this.MKFUN3);

				objectOut.writeObject(this.MKEADT);

				objectOut.writeObject(this.MKEATM);

				writeString(this.MKEAID, dos, objectOut);

				writeString(this.MKEAPG, dos, objectOut);

				objectOut.writeObject(this.MKMODT);

				objectOut.writeObject(this.MKMOTM);

				writeString(this.MKMOID, dos, objectOut);

				writeString(this.MKMOPG, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MKCOCO=" + MKCOCO);
			sb.append(",MKVNBR=" + MKVNBR);
			sb.append(",MKVNNM=" + MKVNNM);
			sb.append(",MKSAAC=" + MKSAAC);
			sb.append(",MKDVCT=" + MKDVCT);
			sb.append(",MKEMAL=" + MKEMAL);
			sb.append(",MKUDNM=" + MKUDNM);
			sb.append(",MKFUA1=" + MKFUA1);
			sb.append(",MKFUA2=" + MKFUA2);
			sb.append(",MKFUA3=" + MKFUA3);
			sb.append(",MKFUF1=" + MKFUF1);
			sb.append(",MKFUF2=" + MKFUF2);
			sb.append(",MKFUF3=" + MKFUF3);
			sb.append(",MKFUN1=" + String.valueOf(MKFUN1));
			sb.append(",MKFUN2=" + String.valueOf(MKFUN2));
			sb.append(",MKFUN3=" + String.valueOf(MKFUN3));
			sb.append(",MKEADT=" + String.valueOf(MKEADT));
			sb.append(",MKEATM=" + String.valueOf(MKEATM));
			sb.append(",MKEAID=" + MKEAID);
			sb.append(",MKEAPG=" + MKEAPG);
			sb.append(",MKMODT=" + String.valueOf(MKMODT));
			sb.append(",MKMOTM=" + String.valueOf(MKMOTM));
			sb.append(",MKMOID=" + MKMOID);
			sb.append(",MKMOPG=" + MKMOPG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MKVNBR, other.MKVNBR);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) |
				// target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(VENDOR_DETAIL)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.SUS_Login;

				final String decryptedPassword_tDBInput_2 = context.SUS_Password;

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";"
						+ context.SUS_Additional_Params;

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  USVBMKRF.MKCOCO, \n  USVBMKRF.MKVNBR, \n  USVBMKRF.MKVNNM, \n  USVBMKRF.MKSAAC, \n  USVBMKRF.MKDVCT, \n  USVBMKRF."
						+ "MKEMAL, \n  USVBMKRF.MKUDNM, \n  USVBMKRF.MKFUA1, \n  USVBMKRF.MKFUA2, \n  USVBMKRF.MKFUA3, \n  USVBMKRF.MKFUF1, \n  USVBMKRF."
						+ "MKFUF2, \n  USVBMKRF.MKFUF3, \n  USVBMKRF.MKFUN1, \n  USVBMKRF.MKFUN2, \n  USVBMKRF.MKFUN3, \n  USVBMKRF.MKEADT, \n  USVBMKRF."
						+ "MKEATM, \n  USVBMKRF.MKEAID, \n  USVBMKRF.MKEAPG, \n  USVBMKRF.MKMODT, \n  USVBMKRF.MKMOTM, \n  USVBMKRF.MKMOID, \n  USVBMKRF."
						+ "MKMOPG\nFROM USVBMKRF";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.MKCOCO = null;
						} else {

							row2.MKCOCO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, true);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.MKVNBR = null;
						} else {

							row2.MKVNBR = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, true);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.MKVNNM = null;
						} else {

							row2.MKVNNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, true);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.MKSAAC = null;
						} else {

							row2.MKSAAC = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, true);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.MKDVCT = null;
						} else {

							row2.MKDVCT = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, true);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.MKEMAL = null;
						} else {

							row2.MKEMAL = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, true);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.MKUDNM = null;
						} else {

							row2.MKUDNM = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, true);
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.MKFUA1 = null;
						} else {

							row2.MKFUA1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, true);
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.MKFUA2 = null;
						} else {

							row2.MKFUA2 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, true);
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.MKFUA3 = null;
						} else {

							row2.MKFUA3 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 10, true);
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.MKFUF1 = null;
						} else {

							row2.MKFUF1 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 11, true);
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.MKFUF2 = null;
						} else {

							row2.MKFUF2 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 12, true);
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.MKFUF3 = null;
						} else {

							row2.MKFUF3 = routines.system.JDBCUtil.getString(rs_tDBInput_2, 13, true);
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.MKFUN1 = null;
						} else {

							row2.MKFUN1 = rs_tDBInput_2.getBigDecimal(14);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.MKFUN2 = null;
						} else {

							row2.MKFUN2 = rs_tDBInput_2.getBigDecimal(15);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.MKFUN3 = null;
						} else {

							row2.MKFUN3 = rs_tDBInput_2.getBigDecimal(16);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.MKEADT = null;
						} else {

							row2.MKEADT = rs_tDBInput_2.getBigDecimal(17);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.MKEATM = null;
						} else {

							row2.MKEATM = rs_tDBInput_2.getBigDecimal(18);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.MKEAID = null;
						} else {

							row2.MKEAID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 19, true);
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.MKEAPG = null;
						} else {

							row2.MKEAPG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 20, true);
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.MKMODT = null;
						} else {

							row2.MKMODT = rs_tDBInput_2.getBigDecimal(21);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.MKMOTM = null;
						} else {

							row2.MKMOTM = rs_tDBInput_2.getBigDecimal(22);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.MKMOID = null;
						} else {

							row2.MKMOID = routines.system.JDBCUtil.getString(rs_tDBInput_2, 23, true);
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.MKMOPG = null;
						} else {

							row2.MKMOPG = routines.system.JDBCUtil.getString(rs_tDBInput_2, 24, true);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.MKCOCO = row2.MKCOCO;

						row2_HashRow.MKVNBR = row2.MKVNBR;

						row2_HashRow.MKVNNM = row2.MKVNNM;

						row2_HashRow.MKSAAC = row2.MKSAAC;

						row2_HashRow.MKDVCT = row2.MKDVCT;

						row2_HashRow.MKEMAL = row2.MKEMAL;

						row2_HashRow.MKUDNM = row2.MKUDNM;

						row2_HashRow.MKFUA1 = row2.MKFUA1;

						row2_HashRow.MKFUA2 = row2.MKFUA2;

						row2_HashRow.MKFUA3 = row2.MKFUA3;

						row2_HashRow.MKFUF1 = row2.MKFUF1;

						row2_HashRow.MKFUF2 = row2.MKFUF2;

						row2_HashRow.MKFUF3 = row2.MKFUF3;

						row2_HashRow.MKFUN1 = row2.MKFUN1;

						row2_HashRow.MKFUN2 = row2.MKFUN2;

						row2_HashRow.MKFUN3 = row2.MKFUN3;

						row2_HashRow.MKEADT = row2.MKEADT;

						row2_HashRow.MKEATM = row2.MKEATM;

						row2_HashRow.MKEAID = row2.MKEAID;

						row2_HashRow.MKEAPG = row2.MKEAPG;

						row2_HashRow.MKMODT = row2.MKMODT;

						row2_HashRow.MKMOTM = row2.MKMOTM;

						row2_HashRow.MKMOID = row2.MKMOID;

						row2_HashRow.MKMOPG = row2.MKMOPG;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row2 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						/**
						 * [tAdvancedHash_row2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Vendor_Detail_Inbound Vendor_Detail_InboundClass = new Vendor_Detail_Inbound();

		int exitCode = Vendor_Detail_InboundClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Vendor_Detail_Inbound.class.getClassLoader().getResourceAsStream(
					"sus_sli_etl/vendor_detail_inbound_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Vendor_Detail_Inbound.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("SUS_Login", "id_String");
					if (context.getStringValue("SUS_Login") == null) {
						context.SUS_Login = null;
					} else {
						context.SUS_Login = (String) context.getProperty("SUS_Login");
					}
					context.setContextType("SUS_Password", "id_Password");
					if (context.getStringValue("SUS_Password") == null) {
						context.SUS_Password = null;
					} else {
						String pwd_SUS_Password_value = context.getProperty("SUS_Password");
						context.SUS_Password = null;
						if (pwd_SUS_Password_value != null) {
							if (context_param.containsKey("SUS_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.SUS_Password = pwd_SUS_Password_value;
							} else if (!pwd_SUS_Password_value.isEmpty()) {
								try {
									context.SUS_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_SUS_Password_value);
									context.put("SUS_Password", context.SUS_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("SUS_Database", "id_String");
					if (context.getStringValue("SUS_Database") == null) {
						context.SUS_Database = null;
					} else {
						context.SUS_Database = (String) context.getProperty("SUS_Database");
					}
					context.setContextType("SUS_Server", "id_String");
					if (context.getStringValue("SUS_Server") == null) {
						context.SUS_Server = null;
					} else {
						context.SUS_Server = (String) context.getProperty("SUS_Server");
					}
					context.setContextType("SUS_Additional_Params", "id_String");
					if (context.getStringValue("SUS_Additional_Params") == null) {
						context.SUS_Additional_Params = null;
					} else {
						context.SUS_Additional_Params = (String) context.getProperty("SUS_Additional_Params");
					}
					context.setContextType("GIM_Schema_Migrating_Test", "id_String");
					if (context.getStringValue("GIM_Schema_Migrating_Test") == null) {
						context.GIM_Schema_Migrating_Test = null;
					} else {
						context.GIM_Schema_Migrating_Test = (String) context.getProperty("GIM_Schema_Migrating_Test");
					}
					context.setContextType("GIM_AdditionalParams", "id_String");
					if (context.getStringValue("GIM_AdditionalParams") == null) {
						context.GIM_AdditionalParams = null;
					} else {
						context.GIM_AdditionalParams = (String) context.getProperty("GIM_AdditionalParams");
					}
					context.setContextType("GIM_Password", "id_Password");
					if (context.getStringValue("GIM_Password") == null) {
						context.GIM_Password = null;
					} else {
						String pwd_GIM_Password_value = context.getProperty("GIM_Password");
						context.GIM_Password = null;
						if (pwd_GIM_Password_value != null) {
							if (context_param.containsKey("GIM_Password")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
								context.GIM_Password = pwd_GIM_Password_value;
							} else if (!pwd_GIM_Password_value.isEmpty()) {
								try {
									context.GIM_Password = routines.system.PasswordEncryptUtil
											.decryptPassword(pwd_GIM_Password_value);
									context.put("GIM_Password", context.GIM_Password);
								} catch (java.lang.RuntimeException e) {
									// do nothing
								}
							}
						}
					}
					context.setContextType("GIM_Server", "id_String");
					if (context.getStringValue("GIM_Server") == null) {
						context.GIM_Server = null;
					} else {
						context.GIM_Server = (String) context.getProperty("GIM_Server");
					}
					context.setContextType("GIM_Database", "id_String");
					if (context.getStringValue("GIM_Database") == null) {
						context.GIM_Database = null;
					} else {
						context.GIM_Database = (String) context.getProperty("GIM_Database");
					}
					context.setContextType("GIM_Port", "id_String");
					if (context.getStringValue("GIM_Port") == null) {
						context.GIM_Port = null;
					} else {
						context.GIM_Port = (String) context.getProperty("GIM_Port");
					}
					context.setContextType("GIM_Login", "id_String");
					if (context.getStringValue("GIM_Login") == null) {
						context.GIM_Login = null;
					} else {
						context.GIM_Login = (String) context.getProperty("GIM_Login");
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("SUS_Login")) {
				context.SUS_Login = (String) parentContextMap.get("SUS_Login");
			}
			if (parentContextMap.containsKey("SUS_Password")) {
				context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
			}
			if (parentContextMap.containsKey("SUS_Database")) {
				context.SUS_Database = (String) parentContextMap.get("SUS_Database");
			}
			if (parentContextMap.containsKey("SUS_Server")) {
				context.SUS_Server = (String) parentContextMap.get("SUS_Server");
			}
			if (parentContextMap.containsKey("SUS_Additional_Params")) {
				context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
			}
			if (parentContextMap.containsKey("GIM_Schema_Migrating_Test")) {
				context.GIM_Schema_Migrating_Test = (String) parentContextMap.get("GIM_Schema_Migrating_Test");
			}
			if (parentContextMap.containsKey("GIM_AdditionalParams")) {
				context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
			}
			if (parentContextMap.containsKey("GIM_Password")) {
				context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
			}
			if (parentContextMap.containsKey("GIM_Server")) {
				context.GIM_Server = (String) parentContextMap.get("GIM_Server");
			}
			if (parentContextMap.containsKey("GIM_Database")) {
				context.GIM_Database = (String) parentContextMap.get("GIM_Database");
			}
			if (parentContextMap.containsKey("GIM_Port")) {
				context.GIM_Port = (String) parentContextMap.get("GIM_Port");
			}
			if (parentContextMap.containsKey("GIM_Login")) {
				context.GIM_Login = (String) parentContextMap.get("GIM_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SUS_Password");
		parametersToEncrypt.add("GIM_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Vendor_Detail_Inbound");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 200576 characters generated by Talend Open Studio for Data Integration on the
 * July 25, 2022 at 3:00:33 PM IST
 ************************************************************************************************/