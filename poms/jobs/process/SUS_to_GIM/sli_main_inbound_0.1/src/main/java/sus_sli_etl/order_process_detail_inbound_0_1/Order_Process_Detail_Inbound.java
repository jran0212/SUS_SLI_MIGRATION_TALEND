// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sus_sli_etl.order_process_detail_inbound_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.TimeStampConverting;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Order_Process_Detail_Inbound Purpose: Migrating data from OPNIB7PF in SUS to Order Process Detail in GIM<br>
 * Description: Migrating data from OPNIB7PF in SUS to Order Process Detail in GIM <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Order_Process_Detail_Inbound implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(opco != null){
				
					this.setProperty("opco", opco.toString());
				
			}
			
			if(server != null){
				
					this.setProperty("server", server.toString());
				
			}
			
			if(sopco != null){
				
					this.setProperty("sopco", sopco.toString());
				
			}
			
			if(svop != null){
				
					this.setProperty("svop", svop.toString());
				
			}
			
			if(GIM_AdditionalParams != null){
				
					this.setProperty("GIM_AdditionalParams", GIM_AdditionalParams.toString());
				
			}
			
			if(GIM_Database != null){
				
					this.setProperty("GIM_Database", GIM_Database.toString());
				
			}
			
			if(GIM_Login != null){
				
					this.setProperty("GIM_Login", GIM_Login.toString());
				
			}
			
			if(GIM_Password != null){
				
					this.setProperty("GIM_Password", GIM_Password.toString());
				
			}
			
			if(GIM_Port != null){
				
					this.setProperty("GIM_Port", GIM_Port.toString());
				
			}
			
			if(GIM_Schema_Order_Processing != null){
				
					this.setProperty("GIM_Schema_Order_Processing", GIM_Schema_Order_Processing.toString());
				
			}
			
			if(GIM_Server != null){
				
					this.setProperty("GIM_Server", GIM_Server.toString());
				
			}
			
			if(SUS_Login != null){
				
					this.setProperty("SUS_Login", SUS_Login.toString());
				
			}
			
			if(SUS_Password != null){
				
					this.setProperty("SUS_Password", SUS_Password.toString());
				
			}
			
			if(SUS_Database != null){
				
					this.setProperty("SUS_Database", SUS_Database.toString());
				
			}
			
			if(SUS_Server != null){
				
					this.setProperty("SUS_Server", SUS_Server.toString());
				
			}
			
			if(SUS_Additional_Params != null){
				
					this.setProperty("SUS_Additional_Params", SUS_Additional_Params.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String opco;
public String getOpco(){
	return this.opco;
}
public String server;
public String getServer(){
	return this.server;
}
public String sopco;
public String getSopco(){
	return this.sopco;
}
public String svop;
public String getSvop(){
	return this.svop;
}
public String GIM_AdditionalParams;
public String getGIM_AdditionalParams(){
	return this.GIM_AdditionalParams;
}
public String GIM_Database;
public String getGIM_Database(){
	return this.GIM_Database;
}
public String GIM_Login;
public String getGIM_Login(){
	return this.GIM_Login;
}
public java.lang.String GIM_Password;
public java.lang.String getGIM_Password(){
	return this.GIM_Password;
}
public String GIM_Port;
public String getGIM_Port(){
	return this.GIM_Port;
}
public String GIM_Schema_Order_Processing;
public String getGIM_Schema_Order_Processing(){
	return this.GIM_Schema_Order_Processing;
}
public String GIM_Server;
public String getGIM_Server(){
	return this.GIM_Server;
}
public String SUS_Login;
public String getSUS_Login(){
	return this.SUS_Login;
}
public java.lang.String SUS_Password;
public java.lang.String getSUS_Password(){
	return this.SUS_Password;
}
public String SUS_Database;
public String getSUS_Database(){
	return this.SUS_Database;
}
public String SUS_Server;
public String getSUS_Server(){
	return this.SUS_Server;
}
public String SUS_Additional_Params;
public String getSUS_Additional_Params(){
	return this.SUS_Additional_Params;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Order_Process_Detail_Inbound";
	private final String projectName = "SUS_SLI_ETL";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_43PFwP6KEeyfpvBAygNjZA", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_43PFwP6KEeyfpvBAygNjZA", "0.1");

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Order_Process_Detail_Inbound.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Order_Process_Detail_Inbound.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tStatCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
							tStatCatcher_1.addMessage("failure",errorComponent, end_Hash.get(errorComponent)-start_Hash.get(errorComponent));
							tStatCatcher_1Process(globalMap);
							
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class Main_StatStruct implements routines.system.IPersistableRow<Main_StatStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_StatStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message_type;

				public String getMessage_type () {
					return this.message_type;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Long duration;

				public Long getDuration () {
					return this.duration;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message_type = readString(dis);
					
					this.message = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.duration = null;
           				} else {
           			    	this.duration = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message_type,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Long
				
						if(this.duration == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.duration);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message_type="+message_type);
		sb.append(",message="+message);
		sb.append(",duration="+String.valueOf(duration));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
Main_StatStruct Main_Stat = new Main_StatStruct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Stat");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[7];

        public void addRow(String[] row) {

            for (int i = 0; i < 7; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 6 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 6 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[6] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"moment","pid","job","origin","message_type","message","duration",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_StatStruct Main_Stat_tmp = new Main_StatStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tStatCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tStatCatcher_1", false);
		start_Hash.put("tStatCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tStatCatcher_1";

	
		int tos_count_tStatCatcher_1 = 0;
		

	for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
		row4.pid = pid;
		row4.root_pid = rootPid;
		row4.father_pid = fatherPid;	
    	row4.project = projectName;
    	row4.job = jobName;
    	row4.context = contextStr;
		row4.origin = (scm.getOrigin()==null || scm.getOrigin().length()<1 ? null : scm.getOrigin());
		row4.message = scm.getMessage();
		row4.duration = scm.getDuration();
		row4.moment = scm.getMoment();
		row4.message_type = scm.getMessageType();
		row4.job_version = scm.getJobVersion();
		row4.job_repository_id = scm.getJobId();
		row4.system_pid = scm.getSystemPid();

 



/**
 * [tStatCatcher_1 begin ] stop
 */
	
	/**
	 * [tStatCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 


	tos_count_tStatCatcher_1++;

/**
 * [tStatCatcher_1 main ] stop
 */
	
	/**
	 * [tStatCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Main_Stat = null;


// # Output table : 'Main_Stat'
Main_Stat_tmp.moment = row4.moment;
Main_Stat_tmp.pid = row4.pid;
Main_Stat_tmp.job = row4.job;
Main_Stat_tmp.origin = row4.origin;
Main_Stat_tmp.message_type = row4.message_type;
Main_Stat_tmp.message = row4.message;
Main_Stat_tmp.duration = row4.duration ;
Main_Stat = Main_Stat_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Main_Stat"
if(Main_Stat != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Stat"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[7];
   				
	    		if(Main_Stat.moment != null) { //              
                 row_tLogRow_2[0]=    						
								FormatterUtils.format_Date(Main_Stat.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.pid != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(Main_Stat.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.job != null) { //              
                 row_tLogRow_2[2]=    						    
				                String.valueOf(Main_Stat.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.origin != null) { //              
                 row_tLogRow_2[3]=    						    
				                String.valueOf(Main_Stat.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message_type != null) { //              
                 row_tLogRow_2[4]=    						    
				                String.valueOf(Main_Stat.message_type)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.message != null) { //              
                 row_tLogRow_2[5]=    						    
				                String.valueOf(Main_Stat.message)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Stat.duration != null) { //              
                 row_tLogRow_2[6]=    						    
				                String.valueOf(Main_Stat.duration)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "Main_Stat"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tStatCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tStatCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

	}


 

ok_Hash.put("tStatCatcher_1", true);
end_Hash.put("tStatCatcher_1", System.currentTimeMillis());




/**
 * [tStatCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Stat");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tStatCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tStatCatcher_1";

	

 



/**
 * [tStatCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_LogStruct implements routines.system.IPersistableRow<Main_LogStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_LogStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
Main_LogStruct Main_Log = new Main_LogStruct();





	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Log");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_LogStruct Main_Log_tmp = new Main_LogStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";

	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row5.type = lcm.getType();
		row5.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row5.priority = lcm.getPriority();
		row5.message = lcm.getMessage();
		row5.code = lcm.getCode();
		
		row5.moment = java.util.Calendar.getInstance().getTime();
	
    	row5.pid = pid;
		row5.root_pid = rootPid;
		row5.father_pid = fatherPid;
	
    	row5.project = projectName;
    	row5.job = jobName;
    	row5.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Main_Log = null;


// # Output table : 'Main_Log'
Main_Log_tmp.moment = row5.moment ;
Main_Log_tmp.pid = row5.pid ;
Main_Log_tmp.job = row5.job ;
Main_Log_tmp.type = row5.type ;
Main_Log_tmp.origin = row5.origin ;
Main_Log_tmp.message = row5.message ;
Main_Log = Main_Log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Main_Log"
if(Main_Log != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Log"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(Main_Log.moment != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
								FormatterUtils.format_Date(Main_Log.moment, "yyyy-MM-dd HH:mm:ss")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.pid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.pid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.job != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.job)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.type != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.type)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.origin != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.origin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(Main_Log.message != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(Main_Log.message)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "Main_Log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Log");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";

	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class Main_Flow_MeterStruct implements routines.system.IPersistableRow<Main_Flow_MeterStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.job = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",job="+job);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main_Flow_MeterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3_0Struct implements routines.system.IPersistableRow<row3_0Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public Long system_pid;

				public Long getSystem_pid () {
					return this.system_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String job_repository_id;

				public String getJob_repository_id () {
					return this.job_repository_id;
				}
				
			    public String job_version;

				public String getJob_version () {
					return this.job_version;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String label;

				public String getLabel () {
					return this.label;
				}
				
			    public Integer count;

				public Integer getCount () {
					return this.count;
				}
				
			    public Integer reference;

				public Integer getReference () {
					return this.reference;
				}
				
			    public String thresholds;

				public String getThresholds () {
					return this.thresholds;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.root_pid = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.system_pid = null;
           				} else {
           			    	this.system_pid = dis.readLong();
           				}
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.job_repository_id = readString(dis);
					
					this.job_version = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.label = readString(dis);
					
						this.count = readInteger(dis);
					
						this.reference = readInteger(dis);
					
					this.thresholds = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// Long
				
						if(this.system_pid == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.system_pid);
		            	}
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.job_repository_id,dos);
					
					// String
				
						writeString(this.job_version,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.label,dos);
					
					// Integer
				
						writeInteger(this.count,dos);
					
					// Integer
				
						writeInteger(this.reference,dos);
					
					// String
				
						writeString(this.thresholds,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",system_pid="+String.valueOf(system_pid));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",job_repository_id="+job_repository_id);
		sb.append(",job_version="+job_version);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",label="+label);
		sb.append(",count="+String.valueOf(count));
		sb.append(",reference="+String.valueOf(reference));
		sb.append(",thresholds="+thresholds);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3_0Struct row3_0 = new row3_0Struct();
Main_Flow_MeterStruct Main_Flow_Meter = new Main_Flow_MeterStruct();





	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main_Flow_Meter");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("tLogRow_4");
        util_tLogRow_4.addRow(new String[]{"moment","pid","job","origin","label","count","reference","thresholds",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3_0");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main_Flow_MeterStruct Main_Flow_Meter_tmp = new Main_Flow_MeterStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFlowMeterCatcher_1", false);
		start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowMeterCatcher_1";

	
		int tos_count_tFlowMeterCatcher_1 = 0;
		

	for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
		row3_0.pid = pid;
		row3_0.root_pid = rootPid;
		row3_0.father_pid = fatherPid;	
        row3_0.project = projectName;
        row3_0.job = jobName;
        row3_0.context = contextStr;
		row3_0.origin = (mcm.getOrigin()==null || mcm.getOrigin().length()<1 ? null : mcm.getOrigin());
		row3_0.moment = mcm.getMoment();
		row3_0.job_version = mcm.getJobVersion();
		row3_0.job_repository_id = mcm.getJobId();
		row3_0.system_pid = mcm.getSystemPid();
		row3_0.label = mcm.getLabel();
		row3_0.count = mcm.getCount();
		row3_0.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense()+"_count");
		row3_0.thresholds = mcm.getThresholds();
		

 



/**
 * [tFlowMeterCatcher_1 begin ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 


	tos_count_tFlowMeterCatcher_1++;

/**
 * [tFlowMeterCatcher_1 main ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3_0"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

Main_Flow_Meter = null;


// # Output table : 'Main_Flow_Meter'
Main_Flow_Meter_tmp.moment = row3_0.moment ;
Main_Flow_Meter_tmp.pid = row3_0.pid ;
Main_Flow_Meter_tmp.job = row3_0.job ;
Main_Flow_Meter_tmp.origin = row3_0.origin ;
Main_Flow_Meter_tmp.label = row3_0.label ;
Main_Flow_Meter_tmp.count = row3_0.count ;
Main_Flow_Meter_tmp.reference = row3_0.reference ;
Main_Flow_Meter_tmp.thresholds = row3_0.thresholds ;
Main_Flow_Meter = Main_Flow_Meter_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "Main_Flow_Meter"
if(Main_Flow_Meter != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main_Flow_Meter"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[8];
   				
	    		if(Main_Flow_Meter.moment != null) { //              
                 row_tLogRow_4[0]=    						
								FormatterUtils.format_Date(Main_Flow_Meter.moment, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.pid != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(Main_Flow_Meter.pid)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.job != null) { //              
                 row_tLogRow_4[2]=    						    
				                String.valueOf(Main_Flow_Meter.job)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.origin != null) { //              
                 row_tLogRow_4[3]=    						    
				                String.valueOf(Main_Flow_Meter.origin)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.label != null) { //              
                 row_tLogRow_4[4]=    						    
				                String.valueOf(Main_Flow_Meter.label)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.count != null) { //              
                 row_tLogRow_4[5]=    						    
				                String.valueOf(Main_Flow_Meter.count)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.reference != null) { //              
                 row_tLogRow_4[6]=    						    
				                String.valueOf(Main_Flow_Meter.reference)			
					          ;	
							
	    		} //			
    			   				
	    		if(Main_Flow_Meter.thresholds != null) { //              
                 row_tLogRow_4[7]=    						    
				                String.valueOf(Main_Flow_Meter.thresholds)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "Main_Flow_Meter"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tFlowMeterCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tFlowMeterCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

	}


 

ok_Hash.put("tFlowMeterCatcher_1", true);
end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());




/**
 * [tFlowMeterCatcher_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3_0");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main_Flow_Meter");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFlowMeterCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowMeterCatcher_1";

	

 



/**
 * [tFlowMeterCatcher_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("Starting the Migrating Data from OPNIB7PF to ORDER_PROCESS_DETAIL...........");
System.out.println("Target OpCO No    : " + context.opco);
System.out.println("Source OpCO No    : " + context.sopco);
System.out.println("Migration SVOP    : " + context.svop);
System.out.println("DateTime          : " + java.time.LocalDate.now());  
System.out.println("SUS DB2 Connection: " + context.SUS_Server); 
System.out.println("SUS DB2 Database  : " + context.SUS_Database);  
System.out.println("PG Connection     : " + context.GIM_Server);  
System.out.println("PG Database       : " + context.GIM_Database);  
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class ORDER_PROCESS_DETAILStruct implements routines.system.IPersistableRow<ORDER_PROCESS_DETAILStruct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SITE_ID;

				public String getSITE_ID () {
					return this.SITE_ID;
				}
				
			    public BigDecimal ORDER_NO;

				public BigDecimal getORDER_NO () {
					return this.ORDER_NO;
				}
				
			    public BigDecimal ORDER_DETAIL_LINE_NO;

				public BigDecimal getORDER_DETAIL_LINE_NO () {
					return this.ORDER_DETAIL_LINE_NO;
				}
				
			    public String ORDER_ENTRY_LINE_TYPE;

				public String getORDER_ENTRY_LINE_TYPE () {
					return this.ORDER_ENTRY_LINE_TYPE;
				}
				
			    public String ITEM_NO;

				public String getITEM_NO () {
					return this.ITEM_NO;
				}
				
			    public String ITEM_DESC;

				public String getITEM_DESC () {
					return this.ITEM_DESC;
				}
				
			    public String LOCN_CODE;

				public String getLOCN_CODE () {
					return this.LOCN_CODE;
				}
				
			    public String ALTERNATE_WHSE_INDICATOR;

				public String getALTERNATE_WHSE_INDICATOR () {
					return this.ALTERNATE_WHSE_INDICATOR;
				}
				
			    public String COMPANIONS_INDICATOR;

				public String getCOMPANIONS_INDICATOR () {
					return this.COMPANIONS_INDICATOR;
				}
				
			    public String ORDER_DETAIL_NOTES_INDICATOR;

				public String getORDER_DETAIL_NOTES_INDICATOR () {
					return this.ORDER_DETAIL_NOTES_INDICATOR;
				}
				
			    public String DROP_SHIP_INDICATOR;

				public String getDROP_SHIP_INDICATOR () {
					return this.DROP_SHIP_INDICATOR;
				}
				
			    public String PRICING_AGREEMENTS_INDICATOR;

				public String getPRICING_AGREEMENTS_INDICATOR () {
					return this.PRICING_AGREEMENTS_INDICATOR;
				}
				
			    public BigDecimal QTY;

				public BigDecimal getQTY () {
					return this.QTY;
				}
				
			    public String SPLIT_CODE;

				public String getSPLIT_CODE () {
					return this.SPLIT_CODE;
				}
				
			    public BigDecimal QTY_ALLOC_AGAINST_ON_HAND;

				public BigDecimal getQTY_ALLOC_AGAINST_ON_HAND () {
					return this.QTY_ALLOC_AGAINST_ON_HAND;
				}
				
			    public BigDecimal QTY_ALLOC_AGAINST_SCH_RECEIPTS;

				public BigDecimal getQTY_ALLOC_AGAINST_SCH_RECEIPTS () {
					return this.QTY_ALLOC_AGAINST_SCH_RECEIPTS;
				}
				
			    public String ORDER_DETAIL_ALLOC;

				public String getORDER_DETAIL_ALLOC () {
					return this.ORDER_DETAIL_ALLOC;
				}
				
			    public java.util.Date SHIP_OR_PICKUP_DATE;

				public java.util.Date getSHIP_OR_PICKUP_DATE () {
					return this.SHIP_OR_PICKUP_DATE;
				}
				
			    public BigDecimal SHIPPED_QTY;

				public BigDecimal getSHIPPED_QTY () {
					return this.SHIPPED_QTY;
				}
				
			    public BigDecimal ORIGINAL_ITEM_UNIT_PRICE;

				public BigDecimal getORIGINAL_ITEM_UNIT_PRICE () {
					return this.ORIGINAL_ITEM_UNIT_PRICE;
				}
				
			    public BigDecimal ORDER_DETAIL_EXTENDED_PRICE;

				public BigDecimal getORDER_DETAIL_EXTENDED_PRICE () {
					return this.ORDER_DETAIL_EXTENDED_PRICE;
				}
				
			    public BigDecimal SUGGESTED_PRICE;

				public BigDecimal getSUGGESTED_PRICE () {
					return this.SUGGESTED_PRICE;
				}
				
			    public String HAND_PRICE_FLAG;

				public String getHAND_PRICE_FLAG () {
					return this.HAND_PRICE_FLAG;
				}
				
			    public BigDecimal ORDER_GUIDE_NO;

				public BigDecimal getORDER_GUIDE_NO () {
					return this.ORDER_GUIDE_NO;
				}
				
			    public String ORDER_GUIDE_LINE_NO;

				public String getORDER_GUIDE_LINE_NO () {
					return this.ORDER_GUIDE_LINE_NO;
				}
				
			    public String CUSTOMER_ITEM_NO;

				public String getCUSTOMER_ITEM_NO () {
					return this.CUSTOMER_ITEM_NO;
				}
				
			    public String SHIP_TO_CUST;

				public String getSHIP_TO_CUST () {
					return this.SHIP_TO_CUST;
				}
				
			    public String SHIPPING_ADDRESS_ID;

				public String getSHIPPING_ADDRESS_ID () {
					return this.SHIPPING_ADDRESS_ID;
				}
				
			    public String CUSTOMER_CATEGORY_CODE;

				public String getCUSTOMER_CATEGORY_CODE () {
					return this.CUSTOMER_CATEGORY_CODE;
				}
				
			    public BigDecimal ROUTING_GROUP_CODE;

				public BigDecimal getROUTING_GROUP_CODE () {
					return this.ROUTING_GROUP_CODE;
				}
				
			    public BigDecimal REQUEST_NO;

				public BigDecimal getREQUEST_NO () {
					return this.REQUEST_NO;
				}
				
			    public String VENDOR_NO;

				public String getVENDOR_NO () {
					return this.VENDOR_NO;
				}
				
			    public String VENDOR_PAY_FLAG;

				public String getVENDOR_PAY_FLAG () {
					return this.VENDOR_PAY_FLAG;
				}
				
			    public String QA_TICKET_INDICATOR;

				public String getQA_TICKET_INDICATOR () {
					return this.QA_TICKET_INDICATOR;
				}
				
			    public String TOLERANCE_OVERRIDEN_FLAG;

				public String getTOLERANCE_OVERRIDEN_FLAG () {
					return this.TOLERANCE_OVERRIDEN_FLAG;
				}
				
			    public String ORIGINATOR_TRANSACTION;

				public String getORIGINATOR_TRANSACTION () {
					return this.ORIGINATOR_TRANSACTION;
				}
				
			    public String INVOICED_FLAG;

				public String getINVOICED_FLAG () {
					return this.INVOICED_FLAG;
				}
				
			    public String ORDER_STATUS_CODE;

				public String getORDER_STATUS_CODE () {
					return this.ORDER_STATUS_CODE;
				}
				
			    public String BUYER_NO;

				public String getBUYER_NO () {
					return this.BUYER_NO;
				}
				
			    public String PURCHASE_ORDER_NO;

				public String getPURCHASE_ORDER_NO () {
					return this.PURCHASE_ORDER_NO;
				}
				
			    public BigDecimal PO_LINE_NO;

				public BigDecimal getPO_LINE_NO () {
					return this.PO_LINE_NO;
				}
				
			    public String REMOTE_STOCK_ACCEPT_SUBS;

				public String getREMOTE_STOCK_ACCEPT_SUBS () {
					return this.REMOTE_STOCK_ACCEPT_SUBS;
				}
				
			    public BigDecimal SUBSTITUTE_REFERENCE_LINE_NO;

				public BigDecimal getSUBSTITUTE_REFERENCE_LINE_NO () {
					return this.SUBSTITUTE_REFERENCE_LINE_NO;
				}
				
			    public String CUST_PREFERENCE_VENDOR;

				public String getCUST_PREFERENCE_VENDOR () {
					return this.CUST_PREFERENCE_VENDOR;
				}
				
			    public String FREE_GOODS_FLAG;

				public String getFREE_GOODS_FLAG () {
					return this.FREE_GOODS_FLAG;
				}
				
			    public String COUNT_AS_DEMAND_FLAG;

				public String getCOUNT_AS_DEMAND_FLAG () {
					return this.COUNT_AS_DEMAND_FLAG;
				}
				
			    public BigDecimal SUBFILE_REFERENCE_LINE_NO;

				public BigDecimal getSUBFILE_REFERENCE_LINE_NO () {
					return this.SUBFILE_REFERENCE_LINE_NO;
				}
				
			    public BigDecimal BOOKING_ID;

				public BigDecimal getBOOKING_ID () {
					return this.BOOKING_ID;
				}
				
			    public BigDecimal ORDER_GUIDE_VERSION_NO;

				public BigDecimal getORDER_GUIDE_VERSION_NO () {
					return this.ORDER_GUIDE_VERSION_NO;
				}
				
			    public String FOODSHOW_PROMOTION_ID;

				public String getFOODSHOW_PROMOTION_ID () {
					return this.FOODSHOW_PROMOTION_ID;
				}
				
			    public String SHIP_AVAILABLE_FLAG;

				public String getSHIP_AVAILABLE_FLAG () {
					return this.SHIP_AVAILABLE_FLAG;
				}
				
			    public String ORDER_REASON_CODE;

				public String getORDER_REASON_CODE () {
					return this.ORDER_REASON_CODE;
				}
				
			    public String ORDER_LINE_ERROR_INDICATOR;

				public String getORDER_LINE_ERROR_INDICATOR () {
					return this.ORDER_LINE_ERROR_INDICATOR;
				}
				
			    public String ORIGINALLY_ORDERED_ITEM_NO;

				public String getORIGINALLY_ORDERED_ITEM_NO () {
					return this.ORIGINALLY_ORDERED_ITEM_NO;
				}
				
			    public String ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR;

				public String getORIGINAL_ITEM_CUST_PREFERENCE_VENDOR () {
					return this.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR;
				}
				
			    public BigDecimal REFERENCED_ORDER_NO;

				public BigDecimal getREFERENCED_ORDER_NO () {
					return this.REFERENCED_ORDER_NO;
				}
				
			    public String ORIG_ALT_COMPANION_LINE_INDICATOR;

				public String getORIG_ALT_COMPANION_LINE_INDICATOR () {
					return this.ORIG_ALT_COMPANION_LINE_INDICATOR;
				}
				
			    public String TEMPORARY_SUB_FLAG;

				public String getTEMPORARY_SUB_FLAG () {
					return this.TEMPORARY_SUB_FLAG;
				}
				
			    public BigDecimal CONVERSION_FACTOR;

				public BigDecimal getCONVERSION_FACTOR () {
					return this.CONVERSION_FACTOR;
				}
				
			    public String ITEM_IDENTIFIER;

				public String getITEM_IDENTIFIER () {
					return this.ITEM_IDENTIFIER;
				}
				
			    public BigDecimal TRANSACTION_QTY;

				public BigDecimal getTRANSACTION_QTY () {
					return this.TRANSACTION_QTY;
				}
				
			    public String DEMAND_STATUS;

				public String getDEMAND_STATUS () {
					return this.DEMAND_STATUS;
				}
				
			    public String STOCK_TYPE;

				public String getSTOCK_TYPE () {
					return this.STOCK_TYPE;
				}
				
			    public BigDecimal REFERENCE_DETAIL_LINE_NO;

				public BigDecimal getREFERENCE_DETAIL_LINE_NO () {
					return this.REFERENCE_DETAIL_LINE_NO;
				}
				
			    public String SUBSTITUTION_REASON_CODE;

				public String getSUBSTITUTION_REASON_CODE () {
					return this.SUBSTITUTION_REASON_CODE;
				}
				
			    public BigDecimal SUBSTITUTION_QTY;

				public BigDecimal getSUBSTITUTION_QTY () {
					return this.SUBSTITUTION_QTY;
				}
				
			    public String PAYMENT_TERMS_POLICY;

				public String getPAYMENT_TERMS_POLICY () {
					return this.PAYMENT_TERMS_POLICY;
				}
				
			    public String PRICE_CALC_CODE;

				public String getPRICE_CALC_CODE () {
					return this.PRICE_CALC_CODE;
				}
				
			    public String SUBSTITUTE_REQUEST;

				public String getSUBSTITUTE_REQUEST () {
					return this.SUBSTITUTE_REQUEST;
				}
				
			    public String PARTIAL_FILL_REQUEST;

				public String getPARTIAL_FILL_REQUEST () {
					return this.PARTIAL_FILL_REQUEST;
				}
				
			    public String MAJOR_CLASS;

				public String getMAJOR_CLASS () {
					return this.MAJOR_CLASS;
				}
				
			    public BigDecimal SCHEDULED_RECEIPT_CUTOFF_TIME;

				public BigDecimal getSCHEDULED_RECEIPT_CUTOFF_TIME () {
					return this.SCHEDULED_RECEIPT_CUTOFF_TIME;
				}
				
			    public BigDecimal QTY_DEMANDED;

				public BigDecimal getQTY_DEMANDED () {
					return this.QTY_DEMANDED;
				}
				
			    public java.util.Date CREATED_TIMESTAMP;

				public java.util.Date getCREATED_TIMESTAMP () {
					return this.CREATED_TIMESTAMP;
				}
				
			    public String CREATED_USER_ID;

				public String getCREATED_USER_ID () {
					return this.CREATED_USER_ID;
				}
				
			    public java.util.Date UPDATED_TIMESTAMP;

				public java.util.Date getUPDATED_TIMESTAMP () {
					return this.UPDATED_TIMESTAMP;
				}
				
			    public String UPDATED_USER_ID;

				public String getUPDATED_USER_ID () {
					return this.UPDATED_USER_ID;
				}
				
			    public boolean IS_DELETED;

				public boolean getIS_DELETED () {
					return this.IS_DELETED;
				}
				
			    public String CREATED_ORIGIN;

				public String getCREATED_ORIGIN () {
					return this.CREATED_ORIGIN;
				}
				
			    public java.util.Date CREATED_ORIGIN_TIMESTAMP;

				public java.util.Date getCREATED_ORIGIN_TIMESTAMP () {
					return this.CREATED_ORIGIN_TIMESTAMP;
				}
				
			    public String UPDATED_ORIGIN;

				public String getUPDATED_ORIGIN () {
					return this.UPDATED_ORIGIN;
				}
				
			    public java.util.Date UPDATED_ORIGIN_TIMESTAMP;

				public java.util.Date getUPDATED_ORIGIN_TIMESTAMP () {
					return this.UPDATED_ORIGIN_TIMESTAMP;
				}
				
			    public String B7PF_SVOP;

				public String getB7PF_SVOP () {
					return this.B7PF_SVOP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SITE_ID == null) ? 0 : this.SITE_ID.hashCode());
					
						result = prime * result + ((this.ORDER_NO == null) ? 0 : this.ORDER_NO.hashCode());
					
						result = prime * result + ((this.ORDER_DETAIL_LINE_NO == null) ? 0 : this.ORDER_DETAIL_LINE_NO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ORDER_PROCESS_DETAILStruct other = (ORDER_PROCESS_DETAILStruct) obj;
		
						if (this.SITE_ID == null) {
							if (other.SITE_ID != null)
								return false;
						
						} else if (!this.SITE_ID.equals(other.SITE_ID))
						
							return false;
					
						if (this.ORDER_NO == null) {
							if (other.ORDER_NO != null)
								return false;
						
						} else if (!this.ORDER_NO.equals(other.ORDER_NO))
						
							return false;
					
						if (this.ORDER_DETAIL_LINE_NO == null) {
							if (other.ORDER_DETAIL_LINE_NO != null)
								return false;
						
						} else if (!this.ORDER_DETAIL_LINE_NO.equals(other.ORDER_DETAIL_LINE_NO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ORDER_PROCESS_DETAILStruct other) {

		other.SITE_ID = this.SITE_ID;
	            other.ORDER_NO = this.ORDER_NO;
	            other.ORDER_DETAIL_LINE_NO = this.ORDER_DETAIL_LINE_NO;
	            other.ORDER_ENTRY_LINE_TYPE = this.ORDER_ENTRY_LINE_TYPE;
	            other.ITEM_NO = this.ITEM_NO;
	            other.ITEM_DESC = this.ITEM_DESC;
	            other.LOCN_CODE = this.LOCN_CODE;
	            other.ALTERNATE_WHSE_INDICATOR = this.ALTERNATE_WHSE_INDICATOR;
	            other.COMPANIONS_INDICATOR = this.COMPANIONS_INDICATOR;
	            other.ORDER_DETAIL_NOTES_INDICATOR = this.ORDER_DETAIL_NOTES_INDICATOR;
	            other.DROP_SHIP_INDICATOR = this.DROP_SHIP_INDICATOR;
	            other.PRICING_AGREEMENTS_INDICATOR = this.PRICING_AGREEMENTS_INDICATOR;
	            other.QTY = this.QTY;
	            other.SPLIT_CODE = this.SPLIT_CODE;
	            other.QTY_ALLOC_AGAINST_ON_HAND = this.QTY_ALLOC_AGAINST_ON_HAND;
	            other.QTY_ALLOC_AGAINST_SCH_RECEIPTS = this.QTY_ALLOC_AGAINST_SCH_RECEIPTS;
	            other.ORDER_DETAIL_ALLOC = this.ORDER_DETAIL_ALLOC;
	            other.SHIP_OR_PICKUP_DATE = this.SHIP_OR_PICKUP_DATE;
	            other.SHIPPED_QTY = this.SHIPPED_QTY;
	            other.ORIGINAL_ITEM_UNIT_PRICE = this.ORIGINAL_ITEM_UNIT_PRICE;
	            other.ORDER_DETAIL_EXTENDED_PRICE = this.ORDER_DETAIL_EXTENDED_PRICE;
	            other.SUGGESTED_PRICE = this.SUGGESTED_PRICE;
	            other.HAND_PRICE_FLAG = this.HAND_PRICE_FLAG;
	            other.ORDER_GUIDE_NO = this.ORDER_GUIDE_NO;
	            other.ORDER_GUIDE_LINE_NO = this.ORDER_GUIDE_LINE_NO;
	            other.CUSTOMER_ITEM_NO = this.CUSTOMER_ITEM_NO;
	            other.SHIP_TO_CUST = this.SHIP_TO_CUST;
	            other.SHIPPING_ADDRESS_ID = this.SHIPPING_ADDRESS_ID;
	            other.CUSTOMER_CATEGORY_CODE = this.CUSTOMER_CATEGORY_CODE;
	            other.ROUTING_GROUP_CODE = this.ROUTING_GROUP_CODE;
	            other.REQUEST_NO = this.REQUEST_NO;
	            other.VENDOR_NO = this.VENDOR_NO;
	            other.VENDOR_PAY_FLAG = this.VENDOR_PAY_FLAG;
	            other.QA_TICKET_INDICATOR = this.QA_TICKET_INDICATOR;
	            other.TOLERANCE_OVERRIDEN_FLAG = this.TOLERANCE_OVERRIDEN_FLAG;
	            other.ORIGINATOR_TRANSACTION = this.ORIGINATOR_TRANSACTION;
	            other.INVOICED_FLAG = this.INVOICED_FLAG;
	            other.ORDER_STATUS_CODE = this.ORDER_STATUS_CODE;
	            other.BUYER_NO = this.BUYER_NO;
	            other.PURCHASE_ORDER_NO = this.PURCHASE_ORDER_NO;
	            other.PO_LINE_NO = this.PO_LINE_NO;
	            other.REMOTE_STOCK_ACCEPT_SUBS = this.REMOTE_STOCK_ACCEPT_SUBS;
	            other.SUBSTITUTE_REFERENCE_LINE_NO = this.SUBSTITUTE_REFERENCE_LINE_NO;
	            other.CUST_PREFERENCE_VENDOR = this.CUST_PREFERENCE_VENDOR;
	            other.FREE_GOODS_FLAG = this.FREE_GOODS_FLAG;
	            other.COUNT_AS_DEMAND_FLAG = this.COUNT_AS_DEMAND_FLAG;
	            other.SUBFILE_REFERENCE_LINE_NO = this.SUBFILE_REFERENCE_LINE_NO;
	            other.BOOKING_ID = this.BOOKING_ID;
	            other.ORDER_GUIDE_VERSION_NO = this.ORDER_GUIDE_VERSION_NO;
	            other.FOODSHOW_PROMOTION_ID = this.FOODSHOW_PROMOTION_ID;
	            other.SHIP_AVAILABLE_FLAG = this.SHIP_AVAILABLE_FLAG;
	            other.ORDER_REASON_CODE = this.ORDER_REASON_CODE;
	            other.ORDER_LINE_ERROR_INDICATOR = this.ORDER_LINE_ERROR_INDICATOR;
	            other.ORIGINALLY_ORDERED_ITEM_NO = this.ORIGINALLY_ORDERED_ITEM_NO;
	            other.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR = this.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR;
	            other.REFERENCED_ORDER_NO = this.REFERENCED_ORDER_NO;
	            other.ORIG_ALT_COMPANION_LINE_INDICATOR = this.ORIG_ALT_COMPANION_LINE_INDICATOR;
	            other.TEMPORARY_SUB_FLAG = this.TEMPORARY_SUB_FLAG;
	            other.CONVERSION_FACTOR = this.CONVERSION_FACTOR;
	            other.ITEM_IDENTIFIER = this.ITEM_IDENTIFIER;
	            other.TRANSACTION_QTY = this.TRANSACTION_QTY;
	            other.DEMAND_STATUS = this.DEMAND_STATUS;
	            other.STOCK_TYPE = this.STOCK_TYPE;
	            other.REFERENCE_DETAIL_LINE_NO = this.REFERENCE_DETAIL_LINE_NO;
	            other.SUBSTITUTION_REASON_CODE = this.SUBSTITUTION_REASON_CODE;
	            other.SUBSTITUTION_QTY = this.SUBSTITUTION_QTY;
	            other.PAYMENT_TERMS_POLICY = this.PAYMENT_TERMS_POLICY;
	            other.PRICE_CALC_CODE = this.PRICE_CALC_CODE;
	            other.SUBSTITUTE_REQUEST = this.SUBSTITUTE_REQUEST;
	            other.PARTIAL_FILL_REQUEST = this.PARTIAL_FILL_REQUEST;
	            other.MAJOR_CLASS = this.MAJOR_CLASS;
	            other.SCHEDULED_RECEIPT_CUTOFF_TIME = this.SCHEDULED_RECEIPT_CUTOFF_TIME;
	            other.QTY_DEMANDED = this.QTY_DEMANDED;
	            other.CREATED_TIMESTAMP = this.CREATED_TIMESTAMP;
	            other.CREATED_USER_ID = this.CREATED_USER_ID;
	            other.UPDATED_TIMESTAMP = this.UPDATED_TIMESTAMP;
	            other.UPDATED_USER_ID = this.UPDATED_USER_ID;
	            other.IS_DELETED = this.IS_DELETED;
	            other.CREATED_ORIGIN = this.CREATED_ORIGIN;
	            other.CREATED_ORIGIN_TIMESTAMP = this.CREATED_ORIGIN_TIMESTAMP;
	            other.UPDATED_ORIGIN = this.UPDATED_ORIGIN;
	            other.UPDATED_ORIGIN_TIMESTAMP = this.UPDATED_ORIGIN_TIMESTAMP;
	            other.B7PF_SVOP = this.B7PF_SVOP;
	            
	}

	public void copyKeysDataTo(ORDER_PROCESS_DETAILStruct other) {

		other.SITE_ID = this.SITE_ID;
	            	other.ORDER_NO = this.ORDER_NO;
	            	other.ORDER_DETAIL_LINE_NO = this.ORDER_DETAIL_LINE_NO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
						this.ORDER_NO = (BigDecimal) dis.readObject();
					
						this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();
					
					this.ORDER_ENTRY_LINE_TYPE = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.ITEM_DESC = readString(dis);
					
					this.LOCN_CODE = readString(dis);
					
					this.ALTERNATE_WHSE_INDICATOR = readString(dis);
					
					this.COMPANIONS_INDICATOR = readString(dis);
					
					this.ORDER_DETAIL_NOTES_INDICATOR = readString(dis);
					
					this.DROP_SHIP_INDICATOR = readString(dis);
					
					this.PRICING_AGREEMENTS_INDICATOR = readString(dis);
					
						this.QTY = (BigDecimal) dis.readObject();
					
					this.SPLIT_CODE = readString(dis);
					
						this.QTY_ALLOC_AGAINST_ON_HAND = (BigDecimal) dis.readObject();
					
						this.QTY_ALLOC_AGAINST_SCH_RECEIPTS = (BigDecimal) dis.readObject();
					
					this.ORDER_DETAIL_ALLOC = readString(dis);
					
					this.SHIP_OR_PICKUP_DATE = readDate(dis);
					
						this.SHIPPED_QTY = (BigDecimal) dis.readObject();
					
						this.ORIGINAL_ITEM_UNIT_PRICE = (BigDecimal) dis.readObject();
					
						this.ORDER_DETAIL_EXTENDED_PRICE = (BigDecimal) dis.readObject();
					
						this.SUGGESTED_PRICE = (BigDecimal) dis.readObject();
					
					this.HAND_PRICE_FLAG = readString(dis);
					
						this.ORDER_GUIDE_NO = (BigDecimal) dis.readObject();
					
					this.ORDER_GUIDE_LINE_NO = readString(dis);
					
					this.CUSTOMER_ITEM_NO = readString(dis);
					
					this.SHIP_TO_CUST = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.CUSTOMER_CATEGORY_CODE = readString(dis);
					
						this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();
					
						this.REQUEST_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_NO = readString(dis);
					
					this.VENDOR_PAY_FLAG = readString(dis);
					
					this.QA_TICKET_INDICATOR = readString(dis);
					
					this.TOLERANCE_OVERRIDEN_FLAG = readString(dis);
					
					this.ORIGINATOR_TRANSACTION = readString(dis);
					
					this.INVOICED_FLAG = readString(dis);
					
					this.ORDER_STATUS_CODE = readString(dis);
					
					this.BUYER_NO = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.PO_LINE_NO = (BigDecimal) dis.readObject();
					
					this.REMOTE_STOCK_ACCEPT_SUBS = readString(dis);
					
						this.SUBSTITUTE_REFERENCE_LINE_NO = (BigDecimal) dis.readObject();
					
					this.CUST_PREFERENCE_VENDOR = readString(dis);
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.COUNT_AS_DEMAND_FLAG = readString(dis);
					
						this.SUBFILE_REFERENCE_LINE_NO = (BigDecimal) dis.readObject();
					
						this.BOOKING_ID = (BigDecimal) dis.readObject();
					
						this.ORDER_GUIDE_VERSION_NO = (BigDecimal) dis.readObject();
					
					this.FOODSHOW_PROMOTION_ID = readString(dis);
					
					this.SHIP_AVAILABLE_FLAG = readString(dis);
					
					this.ORDER_REASON_CODE = readString(dis);
					
					this.ORDER_LINE_ERROR_INDICATOR = readString(dis);
					
					this.ORIGINALLY_ORDERED_ITEM_NO = readString(dis);
					
					this.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR = readString(dis);
					
						this.REFERENCED_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.ORIG_ALT_COMPANION_LINE_INDICATOR = readString(dis);
					
					this.TEMPORARY_SUB_FLAG = readString(dis);
					
						this.CONVERSION_FACTOR = (BigDecimal) dis.readObject();
					
					this.ITEM_IDENTIFIER = readString(dis);
					
						this.TRANSACTION_QTY = (BigDecimal) dis.readObject();
					
					this.DEMAND_STATUS = readString(dis);
					
					this.STOCK_TYPE = readString(dis);
					
						this.REFERENCE_DETAIL_LINE_NO = (BigDecimal) dis.readObject();
					
					this.SUBSTITUTION_REASON_CODE = readString(dis);
					
						this.SUBSTITUTION_QTY = (BigDecimal) dis.readObject();
					
					this.PAYMENT_TERMS_POLICY = readString(dis);
					
					this.PRICE_CALC_CODE = readString(dis);
					
					this.SUBSTITUTE_REQUEST = readString(dis);
					
					this.PARTIAL_FILL_REQUEST = readString(dis);
					
					this.MAJOR_CLASS = readString(dis);
					
						this.SCHEDULED_RECEIPT_CUTOFF_TIME = (BigDecimal) dis.readObject();
					
						this.QTY_DEMANDED = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.B7PF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
					this.SITE_ID = readString(dis);
					
						this.ORDER_NO = (BigDecimal) dis.readObject();
					
						this.ORDER_DETAIL_LINE_NO = (BigDecimal) dis.readObject();
					
					this.ORDER_ENTRY_LINE_TYPE = readString(dis);
					
					this.ITEM_NO = readString(dis);
					
					this.ITEM_DESC = readString(dis);
					
					this.LOCN_CODE = readString(dis);
					
					this.ALTERNATE_WHSE_INDICATOR = readString(dis);
					
					this.COMPANIONS_INDICATOR = readString(dis);
					
					this.ORDER_DETAIL_NOTES_INDICATOR = readString(dis);
					
					this.DROP_SHIP_INDICATOR = readString(dis);
					
					this.PRICING_AGREEMENTS_INDICATOR = readString(dis);
					
						this.QTY = (BigDecimal) dis.readObject();
					
					this.SPLIT_CODE = readString(dis);
					
						this.QTY_ALLOC_AGAINST_ON_HAND = (BigDecimal) dis.readObject();
					
						this.QTY_ALLOC_AGAINST_SCH_RECEIPTS = (BigDecimal) dis.readObject();
					
					this.ORDER_DETAIL_ALLOC = readString(dis);
					
					this.SHIP_OR_PICKUP_DATE = readDate(dis);
					
						this.SHIPPED_QTY = (BigDecimal) dis.readObject();
					
						this.ORIGINAL_ITEM_UNIT_PRICE = (BigDecimal) dis.readObject();
					
						this.ORDER_DETAIL_EXTENDED_PRICE = (BigDecimal) dis.readObject();
					
						this.SUGGESTED_PRICE = (BigDecimal) dis.readObject();
					
					this.HAND_PRICE_FLAG = readString(dis);
					
						this.ORDER_GUIDE_NO = (BigDecimal) dis.readObject();
					
					this.ORDER_GUIDE_LINE_NO = readString(dis);
					
					this.CUSTOMER_ITEM_NO = readString(dis);
					
					this.SHIP_TO_CUST = readString(dis);
					
					this.SHIPPING_ADDRESS_ID = readString(dis);
					
					this.CUSTOMER_CATEGORY_CODE = readString(dis);
					
						this.ROUTING_GROUP_CODE = (BigDecimal) dis.readObject();
					
						this.REQUEST_NO = (BigDecimal) dis.readObject();
					
					this.VENDOR_NO = readString(dis);
					
					this.VENDOR_PAY_FLAG = readString(dis);
					
					this.QA_TICKET_INDICATOR = readString(dis);
					
					this.TOLERANCE_OVERRIDEN_FLAG = readString(dis);
					
					this.ORIGINATOR_TRANSACTION = readString(dis);
					
					this.INVOICED_FLAG = readString(dis);
					
					this.ORDER_STATUS_CODE = readString(dis);
					
					this.BUYER_NO = readString(dis);
					
					this.PURCHASE_ORDER_NO = readString(dis);
					
						this.PO_LINE_NO = (BigDecimal) dis.readObject();
					
					this.REMOTE_STOCK_ACCEPT_SUBS = readString(dis);
					
						this.SUBSTITUTE_REFERENCE_LINE_NO = (BigDecimal) dis.readObject();
					
					this.CUST_PREFERENCE_VENDOR = readString(dis);
					
					this.FREE_GOODS_FLAG = readString(dis);
					
					this.COUNT_AS_DEMAND_FLAG = readString(dis);
					
						this.SUBFILE_REFERENCE_LINE_NO = (BigDecimal) dis.readObject();
					
						this.BOOKING_ID = (BigDecimal) dis.readObject();
					
						this.ORDER_GUIDE_VERSION_NO = (BigDecimal) dis.readObject();
					
					this.FOODSHOW_PROMOTION_ID = readString(dis);
					
					this.SHIP_AVAILABLE_FLAG = readString(dis);
					
					this.ORDER_REASON_CODE = readString(dis);
					
					this.ORDER_LINE_ERROR_INDICATOR = readString(dis);
					
					this.ORIGINALLY_ORDERED_ITEM_NO = readString(dis);
					
					this.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR = readString(dis);
					
						this.REFERENCED_ORDER_NO = (BigDecimal) dis.readObject();
					
					this.ORIG_ALT_COMPANION_LINE_INDICATOR = readString(dis);
					
					this.TEMPORARY_SUB_FLAG = readString(dis);
					
						this.CONVERSION_FACTOR = (BigDecimal) dis.readObject();
					
					this.ITEM_IDENTIFIER = readString(dis);
					
						this.TRANSACTION_QTY = (BigDecimal) dis.readObject();
					
					this.DEMAND_STATUS = readString(dis);
					
					this.STOCK_TYPE = readString(dis);
					
						this.REFERENCE_DETAIL_LINE_NO = (BigDecimal) dis.readObject();
					
					this.SUBSTITUTION_REASON_CODE = readString(dis);
					
						this.SUBSTITUTION_QTY = (BigDecimal) dis.readObject();
					
					this.PAYMENT_TERMS_POLICY = readString(dis);
					
					this.PRICE_CALC_CODE = readString(dis);
					
					this.SUBSTITUTE_REQUEST = readString(dis);
					
					this.PARTIAL_FILL_REQUEST = readString(dis);
					
					this.MAJOR_CLASS = readString(dis);
					
						this.SCHEDULED_RECEIPT_CUTOFF_TIME = (BigDecimal) dis.readObject();
					
						this.QTY_DEMANDED = (BigDecimal) dis.readObject();
					
					this.CREATED_TIMESTAMP = readDate(dis);
					
					this.CREATED_USER_ID = readString(dis);
					
					this.UPDATED_TIMESTAMP = readDate(dis);
					
					this.UPDATED_USER_ID = readString(dis);
					
			        this.IS_DELETED = dis.readBoolean();
					
					this.CREATED_ORIGIN = readString(dis);
					
					this.CREATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.UPDATED_ORIGIN = readString(dis);
					
					this.UPDATED_ORIGIN_TIMESTAMP = readDate(dis);
					
					this.B7PF_SVOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_DETAIL_LINE_NO);
					
					// String
				
						writeString(this.ORDER_ENTRY_LINE_TYPE,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.ITEM_DESC,dos);
					
					// String
				
						writeString(this.LOCN_CODE,dos);
					
					// String
				
						writeString(this.ALTERNATE_WHSE_INDICATOR,dos);
					
					// String
				
						writeString(this.COMPANIONS_INDICATOR,dos);
					
					// String
				
						writeString(this.ORDER_DETAIL_NOTES_INDICATOR,dos);
					
					// String
				
						writeString(this.DROP_SHIP_INDICATOR,dos);
					
					// String
				
						writeString(this.PRICING_AGREEMENTS_INDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTY);
					
					// String
				
						writeString(this.SPLIT_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTY_ALLOC_AGAINST_ON_HAND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTY_ALLOC_AGAINST_SCH_RECEIPTS);
					
					// String
				
						writeString(this.ORDER_DETAIL_ALLOC,dos);
					
					// java.util.Date
				
						writeDate(this.SHIP_OR_PICKUP_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIGINAL_ITEM_UNIT_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_DETAIL_EXTENDED_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_PRICE);
					
					// String
				
						writeString(this.HAND_PRICE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_GUIDE_NO);
					
					// String
				
						writeString(this.ORDER_GUIDE_LINE_NO,dos);
					
					// String
				
						writeString(this.CUSTOMER_ITEM_NO,dos);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.CUSTOMER_CATEGORY_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ROUTING_GROUP_CODE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REQUEST_NO);
					
					// String
				
						writeString(this.VENDOR_NO,dos);
					
					// String
				
						writeString(this.VENDOR_PAY_FLAG,dos);
					
					// String
				
						writeString(this.QA_TICKET_INDICATOR,dos);
					
					// String
				
						writeString(this.TOLERANCE_OVERRIDEN_FLAG,dos);
					
					// String
				
						writeString(this.ORIGINATOR_TRANSACTION,dos);
					
					// String
				
						writeString(this.INVOICED_FLAG,dos);
					
					// String
				
						writeString(this.ORDER_STATUS_CODE,dos);
					
					// String
				
						writeString(this.BUYER_NO,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_LINE_NO);
					
					// String
				
						writeString(this.REMOTE_STOCK_ACCEPT_SUBS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBSTITUTE_REFERENCE_LINE_NO);
					
					// String
				
						writeString(this.CUST_PREFERENCE_VENDOR,dos);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.COUNT_AS_DEMAND_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBFILE_REFERENCE_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BOOKING_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_GUIDE_VERSION_NO);
					
					// String
				
						writeString(this.FOODSHOW_PROMOTION_ID,dos);
					
					// String
				
						writeString(this.SHIP_AVAILABLE_FLAG,dos);
					
					// String
				
						writeString(this.ORDER_REASON_CODE,dos);
					
					// String
				
						writeString(this.ORDER_LINE_ERROR_INDICATOR,dos);
					
					// String
				
						writeString(this.ORIGINALLY_ORDERED_ITEM_NO,dos);
					
					// String
				
						writeString(this.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REFERENCED_ORDER_NO);
					
					// String
				
						writeString(this.ORIG_ALT_COMPANION_LINE_INDICATOR,dos);
					
					// String
				
						writeString(this.TEMPORARY_SUB_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONVERSION_FACTOR);
					
					// String
				
						writeString(this.ITEM_IDENTIFIER,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRANSACTION_QTY);
					
					// String
				
						writeString(this.DEMAND_STATUS,dos);
					
					// String
				
						writeString(this.STOCK_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REFERENCE_DETAIL_LINE_NO);
					
					// String
				
						writeString(this.SUBSTITUTION_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBSTITUTION_QTY);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY,dos);
					
					// String
				
						writeString(this.PRICE_CALC_CODE,dos);
					
					// String
				
						writeString(this.SUBSTITUTE_REQUEST,dos);
					
					// String
				
						writeString(this.PARTIAL_FILL_REQUEST,dos);
					
					// String
				
						writeString(this.MAJOR_CLASS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SCHEDULED_RECEIPT_CUTOFF_TIME);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTY_DEMANDED);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.B7PF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SITE_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_DETAIL_LINE_NO);
					
					// String
				
						writeString(this.ORDER_ENTRY_LINE_TYPE,dos);
					
					// String
				
						writeString(this.ITEM_NO,dos);
					
					// String
				
						writeString(this.ITEM_DESC,dos);
					
					// String
				
						writeString(this.LOCN_CODE,dos);
					
					// String
				
						writeString(this.ALTERNATE_WHSE_INDICATOR,dos);
					
					// String
				
						writeString(this.COMPANIONS_INDICATOR,dos);
					
					// String
				
						writeString(this.ORDER_DETAIL_NOTES_INDICATOR,dos);
					
					// String
				
						writeString(this.DROP_SHIP_INDICATOR,dos);
					
					// String
				
						writeString(this.PRICING_AGREEMENTS_INDICATOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTY);
					
					// String
				
						writeString(this.SPLIT_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTY_ALLOC_AGAINST_ON_HAND);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTY_ALLOC_AGAINST_SCH_RECEIPTS);
					
					// String
				
						writeString(this.ORDER_DETAIL_ALLOC,dos);
					
					// java.util.Date
				
						writeDate(this.SHIP_OR_PICKUP_DATE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SHIPPED_QTY);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORIGINAL_ITEM_UNIT_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_DETAIL_EXTENDED_PRICE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUGGESTED_PRICE);
					
					// String
				
						writeString(this.HAND_PRICE_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_GUIDE_NO);
					
					// String
				
						writeString(this.ORDER_GUIDE_LINE_NO,dos);
					
					// String
				
						writeString(this.CUSTOMER_ITEM_NO,dos);
					
					// String
				
						writeString(this.SHIP_TO_CUST,dos);
					
					// String
				
						writeString(this.SHIPPING_ADDRESS_ID,dos);
					
					// String
				
						writeString(this.CUSTOMER_CATEGORY_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ROUTING_GROUP_CODE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REQUEST_NO);
					
					// String
				
						writeString(this.VENDOR_NO,dos);
					
					// String
				
						writeString(this.VENDOR_PAY_FLAG,dos);
					
					// String
				
						writeString(this.QA_TICKET_INDICATOR,dos);
					
					// String
				
						writeString(this.TOLERANCE_OVERRIDEN_FLAG,dos);
					
					// String
				
						writeString(this.ORIGINATOR_TRANSACTION,dos);
					
					// String
				
						writeString(this.INVOICED_FLAG,dos);
					
					// String
				
						writeString(this.ORDER_STATUS_CODE,dos);
					
					// String
				
						writeString(this.BUYER_NO,dos);
					
					// String
				
						writeString(this.PURCHASE_ORDER_NO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PO_LINE_NO);
					
					// String
				
						writeString(this.REMOTE_STOCK_ACCEPT_SUBS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBSTITUTE_REFERENCE_LINE_NO);
					
					// String
				
						writeString(this.CUST_PREFERENCE_VENDOR,dos);
					
					// String
				
						writeString(this.FREE_GOODS_FLAG,dos);
					
					// String
				
						writeString(this.COUNT_AS_DEMAND_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBFILE_REFERENCE_LINE_NO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.BOOKING_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ORDER_GUIDE_VERSION_NO);
					
					// String
				
						writeString(this.FOODSHOW_PROMOTION_ID,dos);
					
					// String
				
						writeString(this.SHIP_AVAILABLE_FLAG,dos);
					
					// String
				
						writeString(this.ORDER_REASON_CODE,dos);
					
					// String
				
						writeString(this.ORDER_LINE_ERROR_INDICATOR,dos);
					
					// String
				
						writeString(this.ORIGINALLY_ORDERED_ITEM_NO,dos);
					
					// String
				
						writeString(this.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REFERENCED_ORDER_NO);
					
					// String
				
						writeString(this.ORIG_ALT_COMPANION_LINE_INDICATOR,dos);
					
					// String
				
						writeString(this.TEMPORARY_SUB_FLAG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONVERSION_FACTOR);
					
					// String
				
						writeString(this.ITEM_IDENTIFIER,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRANSACTION_QTY);
					
					// String
				
						writeString(this.DEMAND_STATUS,dos);
					
					// String
				
						writeString(this.STOCK_TYPE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.REFERENCE_DETAIL_LINE_NO);
					
					// String
				
						writeString(this.SUBSTITUTION_REASON_CODE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBSTITUTION_QTY);
					
					// String
				
						writeString(this.PAYMENT_TERMS_POLICY,dos);
					
					// String
				
						writeString(this.PRICE_CALC_CODE,dos);
					
					// String
				
						writeString(this.SUBSTITUTE_REQUEST,dos);
					
					// String
				
						writeString(this.PARTIAL_FILL_REQUEST,dos);
					
					// String
				
						writeString(this.MAJOR_CLASS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SCHEDULED_RECEIPT_CUTOFF_TIME);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QTY_DEMANDED);
					
					// java.util.Date
				
						writeDate(this.CREATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.CREATED_USER_ID,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_USER_ID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.IS_DELETED);
					
					// String
				
						writeString(this.CREATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.CREATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.UPDATED_ORIGIN,dos);
					
					// java.util.Date
				
						writeDate(this.UPDATED_ORIGIN_TIMESTAMP,dos);
					
					// String
				
						writeString(this.B7PF_SVOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SITE_ID="+SITE_ID);
		sb.append(",ORDER_NO="+String.valueOf(ORDER_NO));
		sb.append(",ORDER_DETAIL_LINE_NO="+String.valueOf(ORDER_DETAIL_LINE_NO));
		sb.append(",ORDER_ENTRY_LINE_TYPE="+ORDER_ENTRY_LINE_TYPE);
		sb.append(",ITEM_NO="+ITEM_NO);
		sb.append(",ITEM_DESC="+ITEM_DESC);
		sb.append(",LOCN_CODE="+LOCN_CODE);
		sb.append(",ALTERNATE_WHSE_INDICATOR="+ALTERNATE_WHSE_INDICATOR);
		sb.append(",COMPANIONS_INDICATOR="+COMPANIONS_INDICATOR);
		sb.append(",ORDER_DETAIL_NOTES_INDICATOR="+ORDER_DETAIL_NOTES_INDICATOR);
		sb.append(",DROP_SHIP_INDICATOR="+DROP_SHIP_INDICATOR);
		sb.append(",PRICING_AGREEMENTS_INDICATOR="+PRICING_AGREEMENTS_INDICATOR);
		sb.append(",QTY="+String.valueOf(QTY));
		sb.append(",SPLIT_CODE="+SPLIT_CODE);
		sb.append(",QTY_ALLOC_AGAINST_ON_HAND="+String.valueOf(QTY_ALLOC_AGAINST_ON_HAND));
		sb.append(",QTY_ALLOC_AGAINST_SCH_RECEIPTS="+String.valueOf(QTY_ALLOC_AGAINST_SCH_RECEIPTS));
		sb.append(",ORDER_DETAIL_ALLOC="+ORDER_DETAIL_ALLOC);
		sb.append(",SHIP_OR_PICKUP_DATE="+String.valueOf(SHIP_OR_PICKUP_DATE));
		sb.append(",SHIPPED_QTY="+String.valueOf(SHIPPED_QTY));
		sb.append(",ORIGINAL_ITEM_UNIT_PRICE="+String.valueOf(ORIGINAL_ITEM_UNIT_PRICE));
		sb.append(",ORDER_DETAIL_EXTENDED_PRICE="+String.valueOf(ORDER_DETAIL_EXTENDED_PRICE));
		sb.append(",SUGGESTED_PRICE="+String.valueOf(SUGGESTED_PRICE));
		sb.append(",HAND_PRICE_FLAG="+HAND_PRICE_FLAG);
		sb.append(",ORDER_GUIDE_NO="+String.valueOf(ORDER_GUIDE_NO));
		sb.append(",ORDER_GUIDE_LINE_NO="+ORDER_GUIDE_LINE_NO);
		sb.append(",CUSTOMER_ITEM_NO="+CUSTOMER_ITEM_NO);
		sb.append(",SHIP_TO_CUST="+SHIP_TO_CUST);
		sb.append(",SHIPPING_ADDRESS_ID="+SHIPPING_ADDRESS_ID);
		sb.append(",CUSTOMER_CATEGORY_CODE="+CUSTOMER_CATEGORY_CODE);
		sb.append(",ROUTING_GROUP_CODE="+String.valueOf(ROUTING_GROUP_CODE));
		sb.append(",REQUEST_NO="+String.valueOf(REQUEST_NO));
		sb.append(",VENDOR_NO="+VENDOR_NO);
		sb.append(",VENDOR_PAY_FLAG="+VENDOR_PAY_FLAG);
		sb.append(",QA_TICKET_INDICATOR="+QA_TICKET_INDICATOR);
		sb.append(",TOLERANCE_OVERRIDEN_FLAG="+TOLERANCE_OVERRIDEN_FLAG);
		sb.append(",ORIGINATOR_TRANSACTION="+ORIGINATOR_TRANSACTION);
		sb.append(",INVOICED_FLAG="+INVOICED_FLAG);
		sb.append(",ORDER_STATUS_CODE="+ORDER_STATUS_CODE);
		sb.append(",BUYER_NO="+BUYER_NO);
		sb.append(",PURCHASE_ORDER_NO="+PURCHASE_ORDER_NO);
		sb.append(",PO_LINE_NO="+String.valueOf(PO_LINE_NO));
		sb.append(",REMOTE_STOCK_ACCEPT_SUBS="+REMOTE_STOCK_ACCEPT_SUBS);
		sb.append(",SUBSTITUTE_REFERENCE_LINE_NO="+String.valueOf(SUBSTITUTE_REFERENCE_LINE_NO));
		sb.append(",CUST_PREFERENCE_VENDOR="+CUST_PREFERENCE_VENDOR);
		sb.append(",FREE_GOODS_FLAG="+FREE_GOODS_FLAG);
		sb.append(",COUNT_AS_DEMAND_FLAG="+COUNT_AS_DEMAND_FLAG);
		sb.append(",SUBFILE_REFERENCE_LINE_NO="+String.valueOf(SUBFILE_REFERENCE_LINE_NO));
		sb.append(",BOOKING_ID="+String.valueOf(BOOKING_ID));
		sb.append(",ORDER_GUIDE_VERSION_NO="+String.valueOf(ORDER_GUIDE_VERSION_NO));
		sb.append(",FOODSHOW_PROMOTION_ID="+FOODSHOW_PROMOTION_ID);
		sb.append(",SHIP_AVAILABLE_FLAG="+SHIP_AVAILABLE_FLAG);
		sb.append(",ORDER_REASON_CODE="+ORDER_REASON_CODE);
		sb.append(",ORDER_LINE_ERROR_INDICATOR="+ORDER_LINE_ERROR_INDICATOR);
		sb.append(",ORIGINALLY_ORDERED_ITEM_NO="+ORIGINALLY_ORDERED_ITEM_NO);
		sb.append(",ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR="+ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR);
		sb.append(",REFERENCED_ORDER_NO="+String.valueOf(REFERENCED_ORDER_NO));
		sb.append(",ORIG_ALT_COMPANION_LINE_INDICATOR="+ORIG_ALT_COMPANION_LINE_INDICATOR);
		sb.append(",TEMPORARY_SUB_FLAG="+TEMPORARY_SUB_FLAG);
		sb.append(",CONVERSION_FACTOR="+String.valueOf(CONVERSION_FACTOR));
		sb.append(",ITEM_IDENTIFIER="+ITEM_IDENTIFIER);
		sb.append(",TRANSACTION_QTY="+String.valueOf(TRANSACTION_QTY));
		sb.append(",DEMAND_STATUS="+DEMAND_STATUS);
		sb.append(",STOCK_TYPE="+STOCK_TYPE);
		sb.append(",REFERENCE_DETAIL_LINE_NO="+String.valueOf(REFERENCE_DETAIL_LINE_NO));
		sb.append(",SUBSTITUTION_REASON_CODE="+SUBSTITUTION_REASON_CODE);
		sb.append(",SUBSTITUTION_QTY="+String.valueOf(SUBSTITUTION_QTY));
		sb.append(",PAYMENT_TERMS_POLICY="+PAYMENT_TERMS_POLICY);
		sb.append(",PRICE_CALC_CODE="+PRICE_CALC_CODE);
		sb.append(",SUBSTITUTE_REQUEST="+SUBSTITUTE_REQUEST);
		sb.append(",PARTIAL_FILL_REQUEST="+PARTIAL_FILL_REQUEST);
		sb.append(",MAJOR_CLASS="+MAJOR_CLASS);
		sb.append(",SCHEDULED_RECEIPT_CUTOFF_TIME="+String.valueOf(SCHEDULED_RECEIPT_CUTOFF_TIME));
		sb.append(",QTY_DEMANDED="+String.valueOf(QTY_DEMANDED));
		sb.append(",CREATED_TIMESTAMP="+String.valueOf(CREATED_TIMESTAMP));
		sb.append(",CREATED_USER_ID="+CREATED_USER_ID);
		sb.append(",UPDATED_TIMESTAMP="+String.valueOf(UPDATED_TIMESTAMP));
		sb.append(",UPDATED_USER_ID="+UPDATED_USER_ID);
		sb.append(",IS_DELETED="+String.valueOf(IS_DELETED));
		sb.append(",CREATED_ORIGIN="+CREATED_ORIGIN);
		sb.append(",CREATED_ORIGIN_TIMESTAMP="+String.valueOf(CREATED_ORIGIN_TIMESTAMP));
		sb.append(",UPDATED_ORIGIN="+UPDATED_ORIGIN);
		sb.append(",UPDATED_ORIGIN_TIMESTAMP="+String.valueOf(UPDATED_ORIGIN_TIMESTAMP));
		sb.append(",B7PF_SVOP="+B7PF_SVOP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ORDER_PROCESS_DETAILStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SITE_ID, other.SITE_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ORDER_NO, other.ORDER_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ORDER_DETAIL_LINE_NO, other.ORDER_DETAIL_LINE_NO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];
    static byte[] commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[0];

	
			    public BigDecimal B7ORNO;

				public BigDecimal getB7ORNO () {
					return this.B7ORNO;
				}
				
			    public BigDecimal B7ODLN;

				public BigDecimal getB7ODLN () {
					return this.B7ODLN;
				}
				
			    public String B7OETY;

				public String getB7OETY () {
					return this.B7OETY;
				}
				
			    public String B7ITEM;

				public String getB7ITEM () {
					return this.B7ITEM;
				}
				
			    public String B7ITDS;

				public String getB7ITDS () {
					return this.B7ITDS;
				}
				
			    public String B7LOCN;

				public String getB7LOCN () {
					return this.B7LOCN;
				}
				
			    public String B7ALTI;

				public String getB7ALTI () {
					return this.B7ALTI;
				}
				
			    public String B7CMPI;

				public String getB7CMPI () {
					return this.B7CMPI;
				}
				
			    public String B7ODNI;

				public String getB7ODNI () {
					return this.B7ODNI;
				}
				
			    public String B7DRPI;

				public String getB7DRPI () {
					return this.B7DRPI;
				}
				
			    public String B7PRAI;

				public String getB7PRAI () {
					return this.B7PRAI;
				}
				
			    public BigDecimal B7QNTY;

				public BigDecimal getB7QNTY () {
					return this.B7QNTY;
				}
				
			    public String B7SPLT;

				public String getB7SPLT () {
					return this.B7SPLT;
				}
				
			    public BigDecimal B7QAOH;

				public BigDecimal getB7QAOH () {
					return this.B7QAOH;
				}
				
			    public BigDecimal B7QASR;

				public BigDecimal getB7QASR () {
					return this.B7QASR;
				}
				
			    public String B7ODAL;

				public String getB7ODAL () {
					return this.B7ODAL;
				}
				
			    public BigDecimal B7SHDT;

				public BigDecimal getB7SHDT () {
					return this.B7SHDT;
				}
				
			    public BigDecimal B7SHPQ;

				public BigDecimal getB7SHPQ () {
					return this.B7SHPQ;
				}
				
			    public BigDecimal B7PRIC;

				public BigDecimal getB7PRIC () {
					return this.B7PRIC;
				}
				
			    public BigDecimal B7ODEP;

				public BigDecimal getB7ODEP () {
					return this.B7ODEP;
				}
				
			    public BigDecimal B7SGPR;

				public BigDecimal getB7SGPR () {
					return this.B7SGPR;
				}
				
			    public String B7HPRF;

				public String getB7HPRF () {
					return this.B7HPRF;
				}
				
			    public BigDecimal B7OGNU;

				public BigDecimal getB7OGNU () {
					return this.B7OGNU;
				}
				
			    public String B7OGLN;

				public String getB7OGLN () {
					return this.B7OGLN;
				}
				
			    public String B7CSIT;

				public String getB7CSIT () {
					return this.B7CSIT;
				}
				
			    public String B7CUNO;

				public String getB7CUNO () {
					return this.B7CUNO;
				}
				
			    public String B7SADD;

				public String getB7SADD () {
					return this.B7SADD;
				}
				
			    public String B7CATG;

				public String getB7CATG () {
					return this.B7CATG;
				}
				
			    public BigDecimal B7TZNU;

				public BigDecimal getB7TZNU () {
					return this.B7TZNU;
				}
				
			    public BigDecimal B7RQNU;

				public BigDecimal getB7RQNU () {
					return this.B7RQNU;
				}
				
			    public String B7VNBR;

				public String getB7VNBR () {
					return this.B7VNBR;
				}
				
			    public String B7VPYF;

				public String getB7VPYF () {
					return this.B7VPYF;
				}
				
			    public String B7QATI;

				public String getB7QATI () {
					return this.B7QATI;
				}
				
			    public String B7TOVF;

				public String getB7TOVF () {
					return this.B7TOVF;
				}
				
			    public String B7ORIN;

				public String getB7ORIN () {
					return this.B7ORIN;
				}
				
			    public String B7INCF;

				public String getB7INCF () {
					return this.B7INCF;
				}
				
			    public String B7ORST;

				public String getB7ORST () {
					return this.B7ORST;
				}
				
			    public String B7BUYR;

				public String getB7BUYR () {
					return this.B7BUYR;
				}
				
			    public String B7PO;

				public String getB7PO () {
					return this.B7PO;
				}
				
			    public BigDecimal B7POLN;

				public BigDecimal getB7POLN () {
					return this.B7POLN;
				}
				
			    public String B7RSAS;

				public String getB7RSAS () {
					return this.B7RSAS;
				}
				
			    public BigDecimal B7SRLN;

				public BigDecimal getB7SRLN () {
					return this.B7SRLN;
				}
				
			    public String B7CPVN;

				public String getB7CPVN () {
					return this.B7CPVN;
				}
				
			    public String B7FEGD;

				public String getB7FEGD () {
					return this.B7FEGD;
				}
				
			    public String B7CDFL;

				public String getB7CDFL () {
					return this.B7CDFL;
				}
				
			    public BigDecimal B7SBRN;

				public BigDecimal getB7SBRN () {
					return this.B7SBRN;
				}
				
			    public BigDecimal B7BOKI;

				public BigDecimal getB7BOKI () {
					return this.B7BOKI;
				}
				
			    public BigDecimal B7OGVN;

				public BigDecimal getB7OGVN () {
					return this.B7OGVN;
				}
				
			    public String B7IDFP;

				public String getB7IDFP () {
					return this.B7IDFP;
				}
				
			    public String B7SIAV;

				public String getB7SIAV () {
					return this.B7SIAV;
				}
				
			    public String B7ORRE;

				public String getB7ORRE () {
					return this.B7ORRE;
				}
				
			    public String B7OLEI;

				public String getB7OLEI () {
					return this.B7OLEI;
				}
				
			    public String B7OOIN;

				public String getB7OOIN () {
					return this.B7OOIN;
				}
				
			    public String B7OICP;

				public String getB7OICP () {
					return this.B7OICP;
				}
				
			    public BigDecimal B7RONO;

				public BigDecimal getB7RONO () {
					return this.B7RONO;
				}
				
			    public String B7OACL;

				public String getB7OACL () {
					return this.B7OACL;
				}
				
			    public String B7TSUB;

				public String getB7TSUB () {
					return this.B7TSUB;
				}
				
			    public BigDecimal B7CNVF;

				public BigDecimal getB7CNVF () {
					return this.B7CNVF;
				}
				
			    public String B7ITID;

				public String getB7ITID () {
					return this.B7ITID;
				}
				
			    public BigDecimal B7TRQT;

				public BigDecimal getB7TRQT () {
					return this.B7TRQT;
				}
				
			    public String B7DMST;

				public String getB7DMST () {
					return this.B7DMST;
				}
				
			    public String B7STKT;

				public String getB7STKT () {
					return this.B7STKT;
				}
				
			    public BigDecimal B7RDLN;

				public BigDecimal getB7RDLN () {
					return this.B7RDLN;
				}
				
			    public String B7SBRC;

				public String getB7SBRC () {
					return this.B7SBRC;
				}
				
			    public BigDecimal B7SBQT;

				public BigDecimal getB7SBQT () {
					return this.B7SBQT;
				}
				
			    public String B7PTPC;

				public String getB7PTPC () {
					return this.B7PTPC;
				}
				
			    public String B7PCAC;

				public String getB7PCAC () {
					return this.B7PCAC;
				}
				
			    public String B7SBRQ;

				public String getB7SBRQ () {
					return this.B7SBRQ;
				}
				
			    public String B7PFRQ;

				public String getB7PFRQ () {
					return this.B7PFRQ;
				}
				
			    public String B7MACL;

				public String getB7MACL () {
					return this.B7MACL;
				}
				
			    public BigDecimal B7TZET;

				public BigDecimal getB7TZET () {
					return this.B7TZET;
				}
				
			    public BigDecimal B7QTYD;

				public BigDecimal getB7QTYD () {
					return this.B7QTYD;
				}
				
			    public BigDecimal B7EADT;

				public BigDecimal getB7EADT () {
					return this.B7EADT;
				}
				
			    public BigDecimal B7EATM;

				public BigDecimal getB7EATM () {
					return this.B7EATM;
				}
				
			    public String B7EAID;

				public String getB7EAID () {
					return this.B7EAID;
				}
				
			    public BigDecimal B7MODT;

				public BigDecimal getB7MODT () {
					return this.B7MODT;
				}
				
			    public BigDecimal B7MOTM;

				public BigDecimal getB7MOTM () {
					return this.B7MOTM;
				}
				
			    public String B7MOID;

				public String getB7MOID () {
					return this.B7MOID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length) {
				if(length < 1024 && commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound.length == 0) {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[1024];
				} else {
   					commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length);
			strReturn = new String(commonByteArray_SUS_SLI_ETL_Order_Process_Detail_Inbound, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
						this.B7ORNO = (BigDecimal) dis.readObject();
					
						this.B7ODLN = (BigDecimal) dis.readObject();
					
					this.B7OETY = readString(dis);
					
					this.B7ITEM = readString(dis);
					
					this.B7ITDS = readString(dis);
					
					this.B7LOCN = readString(dis);
					
					this.B7ALTI = readString(dis);
					
					this.B7CMPI = readString(dis);
					
					this.B7ODNI = readString(dis);
					
					this.B7DRPI = readString(dis);
					
					this.B7PRAI = readString(dis);
					
						this.B7QNTY = (BigDecimal) dis.readObject();
					
					this.B7SPLT = readString(dis);
					
						this.B7QAOH = (BigDecimal) dis.readObject();
					
						this.B7QASR = (BigDecimal) dis.readObject();
					
					this.B7ODAL = readString(dis);
					
						this.B7SHDT = (BigDecimal) dis.readObject();
					
						this.B7SHPQ = (BigDecimal) dis.readObject();
					
						this.B7PRIC = (BigDecimal) dis.readObject();
					
						this.B7ODEP = (BigDecimal) dis.readObject();
					
						this.B7SGPR = (BigDecimal) dis.readObject();
					
					this.B7HPRF = readString(dis);
					
						this.B7OGNU = (BigDecimal) dis.readObject();
					
					this.B7OGLN = readString(dis);
					
					this.B7CSIT = readString(dis);
					
					this.B7CUNO = readString(dis);
					
					this.B7SADD = readString(dis);
					
					this.B7CATG = readString(dis);
					
						this.B7TZNU = (BigDecimal) dis.readObject();
					
						this.B7RQNU = (BigDecimal) dis.readObject();
					
					this.B7VNBR = readString(dis);
					
					this.B7VPYF = readString(dis);
					
					this.B7QATI = readString(dis);
					
					this.B7TOVF = readString(dis);
					
					this.B7ORIN = readString(dis);
					
					this.B7INCF = readString(dis);
					
					this.B7ORST = readString(dis);
					
					this.B7BUYR = readString(dis);
					
					this.B7PO = readString(dis);
					
						this.B7POLN = (BigDecimal) dis.readObject();
					
					this.B7RSAS = readString(dis);
					
						this.B7SRLN = (BigDecimal) dis.readObject();
					
					this.B7CPVN = readString(dis);
					
					this.B7FEGD = readString(dis);
					
					this.B7CDFL = readString(dis);
					
						this.B7SBRN = (BigDecimal) dis.readObject();
					
						this.B7BOKI = (BigDecimal) dis.readObject();
					
						this.B7OGVN = (BigDecimal) dis.readObject();
					
					this.B7IDFP = readString(dis);
					
					this.B7SIAV = readString(dis);
					
					this.B7ORRE = readString(dis);
					
					this.B7OLEI = readString(dis);
					
					this.B7OOIN = readString(dis);
					
					this.B7OICP = readString(dis);
					
						this.B7RONO = (BigDecimal) dis.readObject();
					
					this.B7OACL = readString(dis);
					
					this.B7TSUB = readString(dis);
					
						this.B7CNVF = (BigDecimal) dis.readObject();
					
					this.B7ITID = readString(dis);
					
						this.B7TRQT = (BigDecimal) dis.readObject();
					
					this.B7DMST = readString(dis);
					
					this.B7STKT = readString(dis);
					
						this.B7RDLN = (BigDecimal) dis.readObject();
					
					this.B7SBRC = readString(dis);
					
						this.B7SBQT = (BigDecimal) dis.readObject();
					
					this.B7PTPC = readString(dis);
					
					this.B7PCAC = readString(dis);
					
					this.B7SBRQ = readString(dis);
					
					this.B7PFRQ = readString(dis);
					
					this.B7MACL = readString(dis);
					
						this.B7TZET = (BigDecimal) dis.readObject();
					
						this.B7QTYD = (BigDecimal) dis.readObject();
					
						this.B7EADT = (BigDecimal) dis.readObject();
					
						this.B7EATM = (BigDecimal) dis.readObject();
					
					this.B7EAID = readString(dis);
					
						this.B7MODT = (BigDecimal) dis.readObject();
					
						this.B7MOTM = (BigDecimal) dis.readObject();
					
					this.B7MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SUS_SLI_ETL_Order_Process_Detail_Inbound) {

        	try {

        		int length = 0;
		
						this.B7ORNO = (BigDecimal) dis.readObject();
					
						this.B7ODLN = (BigDecimal) dis.readObject();
					
					this.B7OETY = readString(dis);
					
					this.B7ITEM = readString(dis);
					
					this.B7ITDS = readString(dis);
					
					this.B7LOCN = readString(dis);
					
					this.B7ALTI = readString(dis);
					
					this.B7CMPI = readString(dis);
					
					this.B7ODNI = readString(dis);
					
					this.B7DRPI = readString(dis);
					
					this.B7PRAI = readString(dis);
					
						this.B7QNTY = (BigDecimal) dis.readObject();
					
					this.B7SPLT = readString(dis);
					
						this.B7QAOH = (BigDecimal) dis.readObject();
					
						this.B7QASR = (BigDecimal) dis.readObject();
					
					this.B7ODAL = readString(dis);
					
						this.B7SHDT = (BigDecimal) dis.readObject();
					
						this.B7SHPQ = (BigDecimal) dis.readObject();
					
						this.B7PRIC = (BigDecimal) dis.readObject();
					
						this.B7ODEP = (BigDecimal) dis.readObject();
					
						this.B7SGPR = (BigDecimal) dis.readObject();
					
					this.B7HPRF = readString(dis);
					
						this.B7OGNU = (BigDecimal) dis.readObject();
					
					this.B7OGLN = readString(dis);
					
					this.B7CSIT = readString(dis);
					
					this.B7CUNO = readString(dis);
					
					this.B7SADD = readString(dis);
					
					this.B7CATG = readString(dis);
					
						this.B7TZNU = (BigDecimal) dis.readObject();
					
						this.B7RQNU = (BigDecimal) dis.readObject();
					
					this.B7VNBR = readString(dis);
					
					this.B7VPYF = readString(dis);
					
					this.B7QATI = readString(dis);
					
					this.B7TOVF = readString(dis);
					
					this.B7ORIN = readString(dis);
					
					this.B7INCF = readString(dis);
					
					this.B7ORST = readString(dis);
					
					this.B7BUYR = readString(dis);
					
					this.B7PO = readString(dis);
					
						this.B7POLN = (BigDecimal) dis.readObject();
					
					this.B7RSAS = readString(dis);
					
						this.B7SRLN = (BigDecimal) dis.readObject();
					
					this.B7CPVN = readString(dis);
					
					this.B7FEGD = readString(dis);
					
					this.B7CDFL = readString(dis);
					
						this.B7SBRN = (BigDecimal) dis.readObject();
					
						this.B7BOKI = (BigDecimal) dis.readObject();
					
						this.B7OGVN = (BigDecimal) dis.readObject();
					
					this.B7IDFP = readString(dis);
					
					this.B7SIAV = readString(dis);
					
					this.B7ORRE = readString(dis);
					
					this.B7OLEI = readString(dis);
					
					this.B7OOIN = readString(dis);
					
					this.B7OICP = readString(dis);
					
						this.B7RONO = (BigDecimal) dis.readObject();
					
					this.B7OACL = readString(dis);
					
					this.B7TSUB = readString(dis);
					
						this.B7CNVF = (BigDecimal) dis.readObject();
					
					this.B7ITID = readString(dis);
					
						this.B7TRQT = (BigDecimal) dis.readObject();
					
					this.B7DMST = readString(dis);
					
					this.B7STKT = readString(dis);
					
						this.B7RDLN = (BigDecimal) dis.readObject();
					
					this.B7SBRC = readString(dis);
					
						this.B7SBQT = (BigDecimal) dis.readObject();
					
					this.B7PTPC = readString(dis);
					
					this.B7PCAC = readString(dis);
					
					this.B7SBRQ = readString(dis);
					
					this.B7PFRQ = readString(dis);
					
					this.B7MACL = readString(dis);
					
						this.B7TZET = (BigDecimal) dis.readObject();
					
						this.B7QTYD = (BigDecimal) dis.readObject();
					
						this.B7EADT = (BigDecimal) dis.readObject();
					
						this.B7EATM = (BigDecimal) dis.readObject();
					
					this.B7EAID = readString(dis);
					
						this.B7MODT = (BigDecimal) dis.readObject();
					
						this.B7MOTM = (BigDecimal) dis.readObject();
					
					this.B7MOID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.B7ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7ODLN);
					
					// String
				
						writeString(this.B7OETY,dos);
					
					// String
				
						writeString(this.B7ITEM,dos);
					
					// String
				
						writeString(this.B7ITDS,dos);
					
					// String
				
						writeString(this.B7LOCN,dos);
					
					// String
				
						writeString(this.B7ALTI,dos);
					
					// String
				
						writeString(this.B7CMPI,dos);
					
					// String
				
						writeString(this.B7ODNI,dos);
					
					// String
				
						writeString(this.B7DRPI,dos);
					
					// String
				
						writeString(this.B7PRAI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7QNTY);
					
					// String
				
						writeString(this.B7SPLT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7QAOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7QASR);
					
					// String
				
						writeString(this.B7ODAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SHDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SHPQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7PRIC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7ODEP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SGPR);
					
					// String
				
						writeString(this.B7HPRF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7OGNU);
					
					// String
				
						writeString(this.B7OGLN,dos);
					
					// String
				
						writeString(this.B7CSIT,dos);
					
					// String
				
						writeString(this.B7CUNO,dos);
					
					// String
				
						writeString(this.B7SADD,dos);
					
					// String
				
						writeString(this.B7CATG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7TZNU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7RQNU);
					
					// String
				
						writeString(this.B7VNBR,dos);
					
					// String
				
						writeString(this.B7VPYF,dos);
					
					// String
				
						writeString(this.B7QATI,dos);
					
					// String
				
						writeString(this.B7TOVF,dos);
					
					// String
				
						writeString(this.B7ORIN,dos);
					
					// String
				
						writeString(this.B7INCF,dos);
					
					// String
				
						writeString(this.B7ORST,dos);
					
					// String
				
						writeString(this.B7BUYR,dos);
					
					// String
				
						writeString(this.B7PO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7POLN);
					
					// String
				
						writeString(this.B7RSAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SRLN);
					
					// String
				
						writeString(this.B7CPVN,dos);
					
					// String
				
						writeString(this.B7FEGD,dos);
					
					// String
				
						writeString(this.B7CDFL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SBRN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7BOKI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7OGVN);
					
					// String
				
						writeString(this.B7IDFP,dos);
					
					// String
				
						writeString(this.B7SIAV,dos);
					
					// String
				
						writeString(this.B7ORRE,dos);
					
					// String
				
						writeString(this.B7OLEI,dos);
					
					// String
				
						writeString(this.B7OOIN,dos);
					
					// String
				
						writeString(this.B7OICP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7RONO);
					
					// String
				
						writeString(this.B7OACL,dos);
					
					// String
				
						writeString(this.B7TSUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7CNVF);
					
					// String
				
						writeString(this.B7ITID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7TRQT);
					
					// String
				
						writeString(this.B7DMST,dos);
					
					// String
				
						writeString(this.B7STKT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7RDLN);
					
					// String
				
						writeString(this.B7SBRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SBQT);
					
					// String
				
						writeString(this.B7PTPC,dos);
					
					// String
				
						writeString(this.B7PCAC,dos);
					
					// String
				
						writeString(this.B7SBRQ,dos);
					
					// String
				
						writeString(this.B7PFRQ,dos);
					
					// String
				
						writeString(this.B7MACL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7TZET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7QTYD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7EATM);
					
					// String
				
						writeString(this.B7EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7MOTM);
					
					// String
				
						writeString(this.B7MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.B7ORNO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7ODLN);
					
					// String
				
						writeString(this.B7OETY,dos);
					
					// String
				
						writeString(this.B7ITEM,dos);
					
					// String
				
						writeString(this.B7ITDS,dos);
					
					// String
				
						writeString(this.B7LOCN,dos);
					
					// String
				
						writeString(this.B7ALTI,dos);
					
					// String
				
						writeString(this.B7CMPI,dos);
					
					// String
				
						writeString(this.B7ODNI,dos);
					
					// String
				
						writeString(this.B7DRPI,dos);
					
					// String
				
						writeString(this.B7PRAI,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7QNTY);
					
					// String
				
						writeString(this.B7SPLT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7QAOH);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7QASR);
					
					// String
				
						writeString(this.B7ODAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SHDT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SHPQ);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7PRIC);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7ODEP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SGPR);
					
					// String
				
						writeString(this.B7HPRF,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7OGNU);
					
					// String
				
						writeString(this.B7OGLN,dos);
					
					// String
				
						writeString(this.B7CSIT,dos);
					
					// String
				
						writeString(this.B7CUNO,dos);
					
					// String
				
						writeString(this.B7SADD,dos);
					
					// String
				
						writeString(this.B7CATG,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7TZNU);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7RQNU);
					
					// String
				
						writeString(this.B7VNBR,dos);
					
					// String
				
						writeString(this.B7VPYF,dos);
					
					// String
				
						writeString(this.B7QATI,dos);
					
					// String
				
						writeString(this.B7TOVF,dos);
					
					// String
				
						writeString(this.B7ORIN,dos);
					
					// String
				
						writeString(this.B7INCF,dos);
					
					// String
				
						writeString(this.B7ORST,dos);
					
					// String
				
						writeString(this.B7BUYR,dos);
					
					// String
				
						writeString(this.B7PO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7POLN);
					
					// String
				
						writeString(this.B7RSAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SRLN);
					
					// String
				
						writeString(this.B7CPVN,dos);
					
					// String
				
						writeString(this.B7FEGD,dos);
					
					// String
				
						writeString(this.B7CDFL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SBRN);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7BOKI);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7OGVN);
					
					// String
				
						writeString(this.B7IDFP,dos);
					
					// String
				
						writeString(this.B7SIAV,dos);
					
					// String
				
						writeString(this.B7ORRE,dos);
					
					// String
				
						writeString(this.B7OLEI,dos);
					
					// String
				
						writeString(this.B7OOIN,dos);
					
					// String
				
						writeString(this.B7OICP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7RONO);
					
					// String
				
						writeString(this.B7OACL,dos);
					
					// String
				
						writeString(this.B7TSUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7CNVF);
					
					// String
				
						writeString(this.B7ITID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7TRQT);
					
					// String
				
						writeString(this.B7DMST,dos);
					
					// String
				
						writeString(this.B7STKT,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7RDLN);
					
					// String
				
						writeString(this.B7SBRC,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7SBQT);
					
					// String
				
						writeString(this.B7PTPC,dos);
					
					// String
				
						writeString(this.B7PCAC,dos);
					
					// String
				
						writeString(this.B7SBRQ,dos);
					
					// String
				
						writeString(this.B7PFRQ,dos);
					
					// String
				
						writeString(this.B7MACL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7TZET);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7QTYD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7EADT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7EATM);
					
					// String
				
						writeString(this.B7EAID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7MODT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.B7MOTM);
					
					// String
				
						writeString(this.B7MOID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("B7ORNO="+String.valueOf(B7ORNO));
		sb.append(",B7ODLN="+String.valueOf(B7ODLN));
		sb.append(",B7OETY="+B7OETY);
		sb.append(",B7ITEM="+B7ITEM);
		sb.append(",B7ITDS="+B7ITDS);
		sb.append(",B7LOCN="+B7LOCN);
		sb.append(",B7ALTI="+B7ALTI);
		sb.append(",B7CMPI="+B7CMPI);
		sb.append(",B7ODNI="+B7ODNI);
		sb.append(",B7DRPI="+B7DRPI);
		sb.append(",B7PRAI="+B7PRAI);
		sb.append(",B7QNTY="+String.valueOf(B7QNTY));
		sb.append(",B7SPLT="+B7SPLT);
		sb.append(",B7QAOH="+String.valueOf(B7QAOH));
		sb.append(",B7QASR="+String.valueOf(B7QASR));
		sb.append(",B7ODAL="+B7ODAL);
		sb.append(",B7SHDT="+String.valueOf(B7SHDT));
		sb.append(",B7SHPQ="+String.valueOf(B7SHPQ));
		sb.append(",B7PRIC="+String.valueOf(B7PRIC));
		sb.append(",B7ODEP="+String.valueOf(B7ODEP));
		sb.append(",B7SGPR="+String.valueOf(B7SGPR));
		sb.append(",B7HPRF="+B7HPRF);
		sb.append(",B7OGNU="+String.valueOf(B7OGNU));
		sb.append(",B7OGLN="+B7OGLN);
		sb.append(",B7CSIT="+B7CSIT);
		sb.append(",B7CUNO="+B7CUNO);
		sb.append(",B7SADD="+B7SADD);
		sb.append(",B7CATG="+B7CATG);
		sb.append(",B7TZNU="+String.valueOf(B7TZNU));
		sb.append(",B7RQNU="+String.valueOf(B7RQNU));
		sb.append(",B7VNBR="+B7VNBR);
		sb.append(",B7VPYF="+B7VPYF);
		sb.append(",B7QATI="+B7QATI);
		sb.append(",B7TOVF="+B7TOVF);
		sb.append(",B7ORIN="+B7ORIN);
		sb.append(",B7INCF="+B7INCF);
		sb.append(",B7ORST="+B7ORST);
		sb.append(",B7BUYR="+B7BUYR);
		sb.append(",B7PO="+B7PO);
		sb.append(",B7POLN="+String.valueOf(B7POLN));
		sb.append(",B7RSAS="+B7RSAS);
		sb.append(",B7SRLN="+String.valueOf(B7SRLN));
		sb.append(",B7CPVN="+B7CPVN);
		sb.append(",B7FEGD="+B7FEGD);
		sb.append(",B7CDFL="+B7CDFL);
		sb.append(",B7SBRN="+String.valueOf(B7SBRN));
		sb.append(",B7BOKI="+String.valueOf(B7BOKI));
		sb.append(",B7OGVN="+String.valueOf(B7OGVN));
		sb.append(",B7IDFP="+B7IDFP);
		sb.append(",B7SIAV="+B7SIAV);
		sb.append(",B7ORRE="+B7ORRE);
		sb.append(",B7OLEI="+B7OLEI);
		sb.append(",B7OOIN="+B7OOIN);
		sb.append(",B7OICP="+B7OICP);
		sb.append(",B7RONO="+String.valueOf(B7RONO));
		sb.append(",B7OACL="+B7OACL);
		sb.append(",B7TSUB="+B7TSUB);
		sb.append(",B7CNVF="+String.valueOf(B7CNVF));
		sb.append(",B7ITID="+B7ITID);
		sb.append(",B7TRQT="+String.valueOf(B7TRQT));
		sb.append(",B7DMST="+B7DMST);
		sb.append(",B7STKT="+B7STKT);
		sb.append(",B7RDLN="+String.valueOf(B7RDLN));
		sb.append(",B7SBRC="+B7SBRC);
		sb.append(",B7SBQT="+String.valueOf(B7SBQT));
		sb.append(",B7PTPC="+B7PTPC);
		sb.append(",B7PCAC="+B7PCAC);
		sb.append(",B7SBRQ="+B7SBRQ);
		sb.append(",B7PFRQ="+B7PFRQ);
		sb.append(",B7MACL="+B7MACL);
		sb.append(",B7TZET="+String.valueOf(B7TZET));
		sb.append(",B7QTYD="+String.valueOf(B7QTYD));
		sb.append(",B7EADT="+String.valueOf(B7EADT));
		sb.append(",B7EATM="+String.valueOf(B7EATM));
		sb.append(",B7EAID="+B7EAID);
		sb.append(",B7MODT="+String.valueOf(B7MODT));
		sb.append(",B7MOTM="+String.valueOf(B7MOTM));
		sb.append(",B7MOID="+B7MOID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
ORDER_PROCESS_DETAILStruct ORDER_PROCESS_DETAIL = new ORDER_PROCESS_DETAILStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ORDER_PROCESS_DETAIL");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = context.GIM_Schema_Order_Processing;
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("ORDER_PROCESS_DETAIL");
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("ORDER_PROCESS_DETAIL");
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	
    java.lang.Class.forName("org.postgresql.Driver");
    
        String url_tDBOutput_1 = "jdbc:postgresql://"+context.GIM_Server+":"+context.GIM_Port+"/"+context.GIM_Database + "?" + context.GIM_AdditionalParams;
    dbUser_tDBOutput_1 = context.GIM_Login;

	final String decryptedPassword_tDBOutput_1 = context.GIM_Password; 

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 1;
        int commitCounter_tDBOutput_1 = 0;


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
	    String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1 + "\" (\"SITE_ID\",\"ORDER_NO\",\"ORDER_DETAIL_LINE_NO\",\"ORDER_ENTRY_LINE_TYPE\",\"ITEM_NO\",\"ITEM_DESC\",\"LOCN_CODE\",\"ALTERNATE_WHSE_INDICATOR\",\"COMPANIONS_INDICATOR\",\"ORDER_DETAIL_NOTES_INDICATOR\",\"DROP_SHIP_INDICATOR\",\"PRICING_AGREEMENTS_INDICATOR\",\"QTY\",\"SPLIT_CODE\",\"QTY_ALLOC_AGAINST_ON_HAND\",\"QTY_ALLOC_AGAINST_SCH_RECEIPTS\",\"ORDER_DETAIL_ALLOC\",\"SHIP_OR_PICKUP_DATE\",\"SHIPPED_QTY\",\"ORIGINAL_ITEM_UNIT_PRICE\",\"ORDER_DETAIL_EXTENDED_PRICE\",\"SUGGESTED_PRICE\",\"HAND_PRICE_FLAG\",\"ORDER_GUIDE_NO\",\"ORDER_GUIDE_LINE_NO\",\"CUSTOMER_ITEM_NO\",\"SHIP_TO_CUST\",\"SHIPPING_ADDRESS_ID\",\"CUSTOMER_CATEGORY_CODE\",\"ROUTING_GROUP_CODE\",\"REQUEST_NO\",\"VENDOR_NO\",\"VENDOR_PAY_FLAG\",\"QA_TICKET_INDICATOR\",\"TOLERANCE_OVERRIDEN_FLAG\",\"ORIGINATOR_TRANSACTION\",\"INVOICED_FLAG\",\"ORDER_STATUS_CODE\",\"BUYER_NO\",\"PURCHASE_ORDER_NO\",\"PO_LINE_NO\",\"REMOTE_STOCK_ACCEPT_SUBS\",\"SUBSTITUTE_REFERENCE_LINE_NO\",\"CUST_PREFERENCE_VENDOR\",\"FREE_GOODS_FLAG\",\"COUNT_AS_DEMAND_FLAG\",\"SUBFILE_REFERENCE_LINE_NO\",\"BOOKING_ID\",\"ORDER_GUIDE_VERSION_NO\",\"FOODSHOW_PROMOTION_ID\",\"SHIP_AVAILABLE_FLAG\",\"ORDER_REASON_CODE\",\"ORDER_LINE_ERROR_INDICATOR\",\"ORIGINALLY_ORDERED_ITEM_NO\",\"ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR\",\"REFERENCED_ORDER_NO\",\"ORIG_ALT_COMPANION_LINE_INDICATOR\",\"TEMPORARY_SUB_FLAG\",\"CONVERSION_FACTOR\",\"ITEM_IDENTIFIER\",\"TRANSACTION_QTY\",\"DEMAND_STATUS\",\"STOCK_TYPE\",\"REFERENCE_DETAIL_LINE_NO\",\"SUBSTITUTION_REASON_CODE\",\"SUBSTITUTION_QTY\",\"PAYMENT_TERMS_POLICY\",\"PRICE_CALC_CODE\",\"SUBSTITUTE_REQUEST\",\"PARTIAL_FILL_REQUEST\",\"MAJOR_CLASS\",\"SCHEDULED_RECEIPT_CUTOFF_TIME\",\"QTY_DEMANDED\",\"CREATED_TIMESTAMP\",\"CREATED_USER_ID\",\"UPDATED_TIMESTAMP\",\"UPDATED_USER_ID\",\"IS_DELETED\",\"CREATED_ORIGIN\",\"CREATED_ORIGIN_TIMESTAMP\",\"UPDATED_ORIGIN\",\"UPDATED_ORIGIN_TIMESTAMP\",\"B7PF_SVOP\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tMap_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String SHIP_OR_PICKUP_DATE;
	String CREATED_TIMESTAMP;
	String UPDATED_TIMESTAMP;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ORDER_PROCESS_DETAILStruct ORDER_PROCESS_DETAIL_tmp = new ORDER_PROCESS_DETAILStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
				tStatCatcher_1.addMessage("begin","tDBInput_1");
				tStatCatcher_1Process(globalMap);
			
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.ibm.as400.access.AS400JDBCDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SUS_Login;
				
				
	final String decryptedPassword_tDBInput_1 = context.SUS_Password; 
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				  
				String url_tDBInput_1 = "jdbc:as400://" + context.SUS_Server + "/" + context.SUS_Database + ";" + context.SUS_Additional_Params;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  OPNIB7PF.B7ORNO, \n  OPNIB7PF.B7ODLN, \n  OPNIB7PF.B7OETY, \n  OPNIB7PF.B7ITEM, \n  OPNIB7PF.B7ITDS, \n  OPNIB7PF."
+"B7LOCN, \n  OPNIB7PF.B7ALTI, \n  OPNIB7PF.B7CMPI, \n  OPNIB7PF.B7ODNI, \n  OPNIB7PF.B7DRPI, \n  OPNIB7PF.B7PRAI, \n  OPNIB7PF."
+"B7QNTY, \n  OPNIB7PF.B7SPLT, \n  OPNIB7PF.B7QAOH, \n  OPNIB7PF.B7QASR, \n  OPNIB7PF.B7ODAL, \n  OPNIB7PF.B7SHDT, \n  OPNIB7PF."
+"B7SHPQ, \n  OPNIB7PF.B7PRIC, \n  OPNIB7PF.B7ODEP, \n  OPNIB7PF.B7SGPR, \n  OPNIB7PF.B7HPRF, \n  OPNIB7PF.B7OGNU, \n  OPNIB7PF."
+"B7OGLN, \n  OPNIB7PF.B7CSIT, \n  OPNIB7PF.B7CUNO, \n  OPNIB7PF.B7SADD, \n  OPNIB7PF.B7CATG, \n  OPNIB7PF.B7TZNU, \n  OPNIB7PF."
+"B7RQNU, \n  OPNIB7PF.B7VNBR, \n  OPNIB7PF.B7VPYF, \n  OPNIB7PF.B7QATI, \n  OPNIB7PF.B7TOVF, \n  OPNIB7PF.B7ORIN, \n  OPNIB7PF."
+"B7INCF, \n  OPNIB7PF.B7ORST, \n  OPNIB7PF.B7BUYR, \n  OPNIB7PF.B7PO, \n  OPNIB7PF.B7POLN, \n  OPNIB7PF.B7RSAS, \n  OPNIB7PF.B7"
+"SRLN, \n  OPNIB7PF.B7CPVN, \n  OPNIB7PF.B7FEGD, \n  OPNIB7PF.B7CDFL, \n  OPNIB7PF.B7SBRN, \n  OPNIB7PF.B7BOKI, \n  OPNIB7PF.B7"
+"OGVN, \n  OPNIB7PF.B7IDFP, \n  OPNIB7PF.B7SIAV, \n  OPNIB7PF.B7ORRE, \n  OPNIB7PF.B7OLEI, \n  OPNIB7PF.B7OOIN, \n  OPNIB7PF.B7"
+"OICP, \n  OPNIB7PF.B7RONO, \n  OPNIB7PF.B7OACL, \n  OPNIB7PF.B7TSUB, \n  OPNIB7PF.B7CNVF, \n  OPNIB7PF.B7ITID, \n  OPNIB7PF.B7"
+"TRQT, \n  OPNIB7PF.B7DMST, \n  OPNIB7PF.B7STKT, \n  OPNIB7PF.B7RDLN, \n  OPNIB7PF.B7SBRC, \n  OPNIB7PF.B7SBQT, \n  OPNIB7PF.B7"
+"PTPC, \n  OPNIB7PF.B7PCAC, \n  OPNIB7PF.B7SBRQ, \n  OPNIB7PF.B7PFRQ, \n  OPNIB7PF.B7MACL, \n  OPNIB7PF.B7TZET, \n  OPNIB7PF.B7"
+"QTYD, \n  OPNIB7PF.B7EADT, \n  OPNIB7PF.B7EATM, \n  OPNIB7PF.B7EAID, \n  OPNIB7PF.B7MODT, \n  OPNIB7PF.B7MOTM, \n  OPNIB7PF.B7"
+"MOID\nFROM OPNIB7PF ORDER BY OPNIB7PF.B7EADT DESC";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.B7ORNO = null;
							} else {
		                          
            row1.B7ORNO = rs_tDBInput_1.getBigDecimal(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.B7ODLN = null;
							} else {
		                          
            row1.B7ODLN = rs_tDBInput_1.getBigDecimal(2);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.B7OETY = null;
							} else {
	                         		
        	row1.B7OETY = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.B7ITEM = null;
							} else {
	                         		
        	row1.B7ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.B7ITDS = null;
							} else {
	                         		
        	row1.B7ITDS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.B7LOCN = null;
							} else {
	                         		
        	row1.B7LOCN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.B7ALTI = null;
							} else {
	                         		
        	row1.B7ALTI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.B7CMPI = null;
							} else {
	                         		
        	row1.B7CMPI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.B7ODNI = null;
							} else {
	                         		
        	row1.B7ODNI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.B7DRPI = null;
							} else {
	                         		
        	row1.B7DRPI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.B7PRAI = null;
							} else {
	                         		
        	row1.B7PRAI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.B7QNTY = null;
							} else {
		                          
            row1.B7QNTY = rs_tDBInput_1.getBigDecimal(12);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.B7SPLT = null;
							} else {
	                         		
        	row1.B7SPLT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.B7QAOH = null;
							} else {
		                          
            row1.B7QAOH = rs_tDBInput_1.getBigDecimal(14);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.B7QASR = null;
							} else {
		                          
            row1.B7QASR = rs_tDBInput_1.getBigDecimal(15);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.B7ODAL = null;
							} else {
	                         		
        	row1.B7ODAL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.B7SHDT = null;
							} else {
		                          
            row1.B7SHDT = rs_tDBInput_1.getBigDecimal(17);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.B7SHPQ = null;
							} else {
		                          
            row1.B7SHPQ = rs_tDBInput_1.getBigDecimal(18);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.B7PRIC = null;
							} else {
		                          
            row1.B7PRIC = rs_tDBInput_1.getBigDecimal(19);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.B7ODEP = null;
							} else {
		                          
            row1.B7ODEP = rs_tDBInput_1.getBigDecimal(20);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.B7SGPR = null;
							} else {
		                          
            row1.B7SGPR = rs_tDBInput_1.getBigDecimal(21);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.B7HPRF = null;
							} else {
	                         		
        	row1.B7HPRF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.B7OGNU = null;
							} else {
		                          
            row1.B7OGNU = rs_tDBInput_1.getBigDecimal(23);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 24) {
								row1.B7OGLN = null;
							} else {
	                         		
        	row1.B7OGLN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 25) {
								row1.B7CSIT = null;
							} else {
	                         		
        	row1.B7CSIT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 26) {
								row1.B7CUNO = null;
							} else {
	                         		
        	row1.B7CUNO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 27) {
								row1.B7SADD = null;
							} else {
	                         		
        	row1.B7SADD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 28) {
								row1.B7CATG = null;
							} else {
	                         		
        	row1.B7CATG = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 29) {
								row1.B7TZNU = null;
							} else {
		                          
            row1.B7TZNU = rs_tDBInput_1.getBigDecimal(29);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 30) {
								row1.B7RQNU = null;
							} else {
		                          
            row1.B7RQNU = rs_tDBInput_1.getBigDecimal(30);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 31) {
								row1.B7VNBR = null;
							} else {
	                         		
        	row1.B7VNBR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 31, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 32) {
								row1.B7VPYF = null;
							} else {
	                         		
        	row1.B7VPYF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 32, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 33) {
								row1.B7QATI = null;
							} else {
	                         		
        	row1.B7QATI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 34) {
								row1.B7TOVF = null;
							} else {
	                         		
        	row1.B7TOVF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 34, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 35) {
								row1.B7ORIN = null;
							} else {
	                         		
        	row1.B7ORIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 36) {
								row1.B7INCF = null;
							} else {
	                         		
        	row1.B7INCF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 37) {
								row1.B7ORST = null;
							} else {
	                         		
        	row1.B7ORST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 37, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 38) {
								row1.B7BUYR = null;
							} else {
	                         		
        	row1.B7BUYR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 38, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 39) {
								row1.B7PO = null;
							} else {
	                         		
        	row1.B7PO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 39, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 40) {
								row1.B7POLN = null;
							} else {
		                          
            row1.B7POLN = rs_tDBInput_1.getBigDecimal(40);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 41) {
								row1.B7RSAS = null;
							} else {
	                         		
        	row1.B7RSAS = routines.system.JDBCUtil.getString(rs_tDBInput_1, 41, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 42) {
								row1.B7SRLN = null;
							} else {
		                          
            row1.B7SRLN = rs_tDBInput_1.getBigDecimal(42);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 43) {
								row1.B7CPVN = null;
							} else {
	                         		
        	row1.B7CPVN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 43, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 44) {
								row1.B7FEGD = null;
							} else {
	                         		
        	row1.B7FEGD = routines.system.JDBCUtil.getString(rs_tDBInput_1, 44, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 45) {
								row1.B7CDFL = null;
							} else {
	                         		
        	row1.B7CDFL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 45, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 46) {
								row1.B7SBRN = null;
							} else {
		                          
            row1.B7SBRN = rs_tDBInput_1.getBigDecimal(46);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 47) {
								row1.B7BOKI = null;
							} else {
		                          
            row1.B7BOKI = rs_tDBInput_1.getBigDecimal(47);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 48) {
								row1.B7OGVN = null;
							} else {
		                          
            row1.B7OGVN = rs_tDBInput_1.getBigDecimal(48);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 49) {
								row1.B7IDFP = null;
							} else {
	                         		
        	row1.B7IDFP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 49, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 50) {
								row1.B7SIAV = null;
							} else {
	                         		
        	row1.B7SIAV = routines.system.JDBCUtil.getString(rs_tDBInput_1, 50, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 51) {
								row1.B7ORRE = null;
							} else {
	                         		
        	row1.B7ORRE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 51, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 52) {
								row1.B7OLEI = null;
							} else {
	                         		
        	row1.B7OLEI = routines.system.JDBCUtil.getString(rs_tDBInput_1, 52, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 53) {
								row1.B7OOIN = null;
							} else {
	                         		
        	row1.B7OOIN = routines.system.JDBCUtil.getString(rs_tDBInput_1, 53, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 54) {
								row1.B7OICP = null;
							} else {
	                         		
        	row1.B7OICP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 54, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 55) {
								row1.B7RONO = null;
							} else {
		                          
            row1.B7RONO = rs_tDBInput_1.getBigDecimal(55);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 56) {
								row1.B7OACL = null;
							} else {
	                         		
        	row1.B7OACL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 56, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 57) {
								row1.B7TSUB = null;
							} else {
	                         		
        	row1.B7TSUB = routines.system.JDBCUtil.getString(rs_tDBInput_1, 57, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 58) {
								row1.B7CNVF = null;
							} else {
		                          
            row1.B7CNVF = rs_tDBInput_1.getBigDecimal(58);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 59) {
								row1.B7ITID = null;
							} else {
	                         		
        	row1.B7ITID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 59, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 60) {
								row1.B7TRQT = null;
							} else {
		                          
            row1.B7TRQT = rs_tDBInput_1.getBigDecimal(60);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 61) {
								row1.B7DMST = null;
							} else {
	                         		
        	row1.B7DMST = routines.system.JDBCUtil.getString(rs_tDBInput_1, 61, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 62) {
								row1.B7STKT = null;
							} else {
	                         		
        	row1.B7STKT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 62, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 63) {
								row1.B7RDLN = null;
							} else {
		                          
            row1.B7RDLN = rs_tDBInput_1.getBigDecimal(63);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 64) {
								row1.B7SBRC = null;
							} else {
	                         		
        	row1.B7SBRC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 64, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 65) {
								row1.B7SBQT = null;
							} else {
		                          
            row1.B7SBQT = rs_tDBInput_1.getBigDecimal(65);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 66) {
								row1.B7PTPC = null;
							} else {
	                         		
        	row1.B7PTPC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 66, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 67) {
								row1.B7PCAC = null;
							} else {
	                         		
        	row1.B7PCAC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 67, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 68) {
								row1.B7SBRQ = null;
							} else {
	                         		
        	row1.B7SBRQ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 68, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 69) {
								row1.B7PFRQ = null;
							} else {
	                         		
        	row1.B7PFRQ = routines.system.JDBCUtil.getString(rs_tDBInput_1, 69, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 70) {
								row1.B7MACL = null;
							} else {
	                         		
        	row1.B7MACL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 70, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 71) {
								row1.B7TZET = null;
							} else {
		                          
            row1.B7TZET = rs_tDBInput_1.getBigDecimal(71);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 72) {
								row1.B7QTYD = null;
							} else {
		                          
            row1.B7QTYD = rs_tDBInput_1.getBigDecimal(72);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 73) {
								row1.B7EADT = null;
							} else {
		                          
            row1.B7EADT = rs_tDBInput_1.getBigDecimal(73);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 74) {
								row1.B7EATM = null;
							} else {
		                          
            row1.B7EATM = rs_tDBInput_1.getBigDecimal(74);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 75) {
								row1.B7EAID = null;
							} else {
	                         		
        	row1.B7EAID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 75, true);
		                    }
							if(colQtyInRs_tDBInput_1 < 76) {
								row1.B7MODT = null;
							} else {
		                          
            row1.B7MODT = rs_tDBInput_1.getBigDecimal(76);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 77) {
								row1.B7MOTM = null;
							} else {
		                          
            row1.B7MOTM = rs_tDBInput_1.getBigDecimal(77);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 78) {
								row1.B7MOID = null;
							} else {
	                         		
        	row1.B7MOID = routines.system.JDBCUtil.getString(rs_tDBInput_1, 78, true);
		                    }
					



 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.SHIP_OR_PICKUP_DATE = TimeStampConverting.convertToDate(row1.B7SHDT.toString()) ;
Var.CREATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.B7EADT.toString(),row1.B7EATM.toString()) ;
Var.UPDATED_TIMESTAMP = TimeStampConverting.convertToTimeStamp(row1.B7MODT.toString(),row1.B7MOTM.toString()) ;// ###############################
        // ###############################
        // # Output tables

ORDER_PROCESS_DETAIL = null;


// # Output table : 'ORDER_PROCESS_DETAIL'
ORDER_PROCESS_DETAIL_tmp.SITE_ID = context.opco;
ORDER_PROCESS_DETAIL_tmp.ORDER_NO = row1.B7ORNO ;
ORDER_PROCESS_DETAIL_tmp.ORDER_DETAIL_LINE_NO = row1.B7ODLN ;
ORDER_PROCESS_DETAIL_tmp.ORDER_ENTRY_LINE_TYPE = row1.B7OETY ;
ORDER_PROCESS_DETAIL_tmp.ITEM_NO = row1.B7ITEM ;
ORDER_PROCESS_DETAIL_tmp.ITEM_DESC = row1.B7ITDS ;
ORDER_PROCESS_DETAIL_tmp.LOCN_CODE = row1.B7LOCN ;
ORDER_PROCESS_DETAIL_tmp.ALTERNATE_WHSE_INDICATOR = row1.B7ALTI ;
ORDER_PROCESS_DETAIL_tmp.COMPANIONS_INDICATOR = row1.B7CMPI ;
ORDER_PROCESS_DETAIL_tmp.ORDER_DETAIL_NOTES_INDICATOR = row1.B7ODNI ;
ORDER_PROCESS_DETAIL_tmp.DROP_SHIP_INDICATOR = row1.B7DRPI ;
ORDER_PROCESS_DETAIL_tmp.PRICING_AGREEMENTS_INDICATOR = row1.B7PRAI ;
ORDER_PROCESS_DETAIL_tmp.QTY = row1.B7QNTY ;
ORDER_PROCESS_DETAIL_tmp.SPLIT_CODE = row1.B7SPLT ;
ORDER_PROCESS_DETAIL_tmp.QTY_ALLOC_AGAINST_ON_HAND = row1.B7QAOH ;
ORDER_PROCESS_DETAIL_tmp.QTY_ALLOC_AGAINST_SCH_RECEIPTS = row1.B7QASR ;
ORDER_PROCESS_DETAIL_tmp.ORDER_DETAIL_ALLOC = row1.B7ODAL ;
ORDER_PROCESS_DETAIL_tmp.SHIP_OR_PICKUP_DATE = Var.SHIP_OR_PICKUP_DATE!=""? TalendDate.parseDate("dd-MM-yyyy",Var.SHIP_OR_PICKUP_DATE):null ;
ORDER_PROCESS_DETAIL_tmp.SHIPPED_QTY = row1.B7SHPQ ;
ORDER_PROCESS_DETAIL_tmp.ORIGINAL_ITEM_UNIT_PRICE = row1.B7PRIC ;
ORDER_PROCESS_DETAIL_tmp.ORDER_DETAIL_EXTENDED_PRICE = row1.B7ODEP ;
ORDER_PROCESS_DETAIL_tmp.SUGGESTED_PRICE = row1.B7SGPR ;
ORDER_PROCESS_DETAIL_tmp.HAND_PRICE_FLAG = row1.B7HPRF ;
ORDER_PROCESS_DETAIL_tmp.ORDER_GUIDE_NO = row1.B7OGNU ;
ORDER_PROCESS_DETAIL_tmp.ORDER_GUIDE_LINE_NO = row1.B7OGLN ;
ORDER_PROCESS_DETAIL_tmp.CUSTOMER_ITEM_NO = row1.B7CSIT ;
ORDER_PROCESS_DETAIL_tmp.SHIP_TO_CUST = row1.B7CUNO ;
ORDER_PROCESS_DETAIL_tmp.SHIPPING_ADDRESS_ID = row1.B7SADD ;
ORDER_PROCESS_DETAIL_tmp.CUSTOMER_CATEGORY_CODE = row1.B7CATG ;
ORDER_PROCESS_DETAIL_tmp.ROUTING_GROUP_CODE = row1.B7TZNU ;
ORDER_PROCESS_DETAIL_tmp.REQUEST_NO = row1.B7RQNU ;
ORDER_PROCESS_DETAIL_tmp.VENDOR_NO = row1.B7VNBR ;
ORDER_PROCESS_DETAIL_tmp.VENDOR_PAY_FLAG = row1.B7VPYF ;
ORDER_PROCESS_DETAIL_tmp.QA_TICKET_INDICATOR = row1.B7QATI ;
ORDER_PROCESS_DETAIL_tmp.TOLERANCE_OVERRIDEN_FLAG = row1.B7TOVF ;
ORDER_PROCESS_DETAIL_tmp.ORIGINATOR_TRANSACTION = row1.B7ORIN ;
ORDER_PROCESS_DETAIL_tmp.INVOICED_FLAG = row1.B7INCF ;
ORDER_PROCESS_DETAIL_tmp.ORDER_STATUS_CODE = row1.B7ORST ;
ORDER_PROCESS_DETAIL_tmp.BUYER_NO = row1.B7BUYR ;
ORDER_PROCESS_DETAIL_tmp.PURCHASE_ORDER_NO = row1.B7PO ;
ORDER_PROCESS_DETAIL_tmp.PO_LINE_NO = row1.B7POLN ;
ORDER_PROCESS_DETAIL_tmp.REMOTE_STOCK_ACCEPT_SUBS = row1.B7RSAS ;
ORDER_PROCESS_DETAIL_tmp.SUBSTITUTE_REFERENCE_LINE_NO = row1.B7SRLN ;
ORDER_PROCESS_DETAIL_tmp.CUST_PREFERENCE_VENDOR = row1.B7CPVN ;
ORDER_PROCESS_DETAIL_tmp.FREE_GOODS_FLAG = row1.B7FEGD ;
ORDER_PROCESS_DETAIL_tmp.COUNT_AS_DEMAND_FLAG = row1.B7CDFL ;
ORDER_PROCESS_DETAIL_tmp.SUBFILE_REFERENCE_LINE_NO = row1.B7SBRN ;
ORDER_PROCESS_DETAIL_tmp.BOOKING_ID = row1.B7BOKI ;
ORDER_PROCESS_DETAIL_tmp.ORDER_GUIDE_VERSION_NO = row1.B7OGVN ;
ORDER_PROCESS_DETAIL_tmp.FOODSHOW_PROMOTION_ID = row1.B7IDFP ;
ORDER_PROCESS_DETAIL_tmp.SHIP_AVAILABLE_FLAG = row1.B7SIAV ;
ORDER_PROCESS_DETAIL_tmp.ORDER_REASON_CODE = row1.B7ORRE ;
ORDER_PROCESS_DETAIL_tmp.ORDER_LINE_ERROR_INDICATOR = row1.B7OLEI ;
ORDER_PROCESS_DETAIL_tmp.ORIGINALLY_ORDERED_ITEM_NO = row1.B7OOIN ;
ORDER_PROCESS_DETAIL_tmp.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR = row1.B7OICP ;
ORDER_PROCESS_DETAIL_tmp.REFERENCED_ORDER_NO = row1.B7RONO ;
ORDER_PROCESS_DETAIL_tmp.ORIG_ALT_COMPANION_LINE_INDICATOR = row1.B7OACL ;
ORDER_PROCESS_DETAIL_tmp.TEMPORARY_SUB_FLAG = row1.B7TSUB ;
ORDER_PROCESS_DETAIL_tmp.CONVERSION_FACTOR = row1.B7CNVF ;
ORDER_PROCESS_DETAIL_tmp.ITEM_IDENTIFIER = row1.B7ITID ;
ORDER_PROCESS_DETAIL_tmp.TRANSACTION_QTY = row1.B7TRQT ;
ORDER_PROCESS_DETAIL_tmp.DEMAND_STATUS = row1.B7DMST ;
ORDER_PROCESS_DETAIL_tmp.STOCK_TYPE = row1.B7STKT ;
ORDER_PROCESS_DETAIL_tmp.REFERENCE_DETAIL_LINE_NO = row1.B7RDLN ;
ORDER_PROCESS_DETAIL_tmp.SUBSTITUTION_REASON_CODE = row1.B7SBRC ;
ORDER_PROCESS_DETAIL_tmp.SUBSTITUTION_QTY = row1.B7SBQT ;
ORDER_PROCESS_DETAIL_tmp.PAYMENT_TERMS_POLICY = row1.B7PTPC ;
ORDER_PROCESS_DETAIL_tmp.PRICE_CALC_CODE = row1.B7PCAC ;
ORDER_PROCESS_DETAIL_tmp.SUBSTITUTE_REQUEST = row1.B7SBRQ ;
ORDER_PROCESS_DETAIL_tmp.PARTIAL_FILL_REQUEST = row1.B7PFRQ ;
ORDER_PROCESS_DETAIL_tmp.MAJOR_CLASS = row1.B7MACL ;
ORDER_PROCESS_DETAIL_tmp.SCHEDULED_RECEIPT_CUTOFF_TIME = row1.B7TZET ;
ORDER_PROCESS_DETAIL_tmp.QTY_DEMANDED = row1.B7QTYD ;
ORDER_PROCESS_DETAIL_tmp.CREATED_TIMESTAMP = Var.CREATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.CREATED_TIMESTAMP):null ;
ORDER_PROCESS_DETAIL_tmp.CREATED_USER_ID = row1.B7EAID ;
ORDER_PROCESS_DETAIL_tmp.UPDATED_TIMESTAMP = Var.UPDATED_TIMESTAMP!=""? TalendDate.parseDate("dd-MM-yyyy HH:mm:ss",Var.UPDATED_TIMESTAMP):null ;
ORDER_PROCESS_DETAIL_tmp.UPDATED_USER_ID = row1.B7MOID ;
ORDER_PROCESS_DETAIL_tmp.IS_DELETED = false;
ORDER_PROCESS_DETAIL_tmp.CREATED_ORIGIN = "SUS";
ORDER_PROCESS_DETAIL_tmp.CREATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
ORDER_PROCESS_DETAIL_tmp.UPDATED_ORIGIN = "SUS";
ORDER_PROCESS_DETAIL_tmp.UPDATED_ORIGIN_TIMESTAMP = TalendDate.parseDate("dd-MM-yyyy HH:mm:ss", TalendDate.getDate("dd-MM-yyyy HH:mm:ss")) ;
ORDER_PROCESS_DETAIL_tmp.B7PF_SVOP = context.svop;
ORDER_PROCESS_DETAIL = ORDER_PROCESS_DETAIL_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "ORDER_PROCESS_DETAIL"
if(ORDER_PROCESS_DETAIL != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ORDER_PROCESS_DETAIL"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(ORDER_PROCESS_DETAIL.SITE_ID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, ORDER_PROCESS_DETAIL.SITE_ID);
}

                    pstmt_tDBOutput_1.setBigDecimal(2, ORDER_PROCESS_DETAIL.ORDER_NO);

                    pstmt_tDBOutput_1.setBigDecimal(3, ORDER_PROCESS_DETAIL.ORDER_DETAIL_LINE_NO);

                    if(ORDER_PROCESS_DETAIL.ORDER_ENTRY_LINE_TYPE == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, ORDER_PROCESS_DETAIL.ORDER_ENTRY_LINE_TYPE);
}

                    if(ORDER_PROCESS_DETAIL.ITEM_NO == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, ORDER_PROCESS_DETAIL.ITEM_NO);
}

                    if(ORDER_PROCESS_DETAIL.ITEM_DESC == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, ORDER_PROCESS_DETAIL.ITEM_DESC);
}

                    if(ORDER_PROCESS_DETAIL.LOCN_CODE == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, ORDER_PROCESS_DETAIL.LOCN_CODE);
}

                    if(ORDER_PROCESS_DETAIL.ALTERNATE_WHSE_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, ORDER_PROCESS_DETAIL.ALTERNATE_WHSE_INDICATOR);
}

                    if(ORDER_PROCESS_DETAIL.COMPANIONS_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, ORDER_PROCESS_DETAIL.COMPANIONS_INDICATOR);
}

                    if(ORDER_PROCESS_DETAIL.ORDER_DETAIL_NOTES_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, ORDER_PROCESS_DETAIL.ORDER_DETAIL_NOTES_INDICATOR);
}

                    if(ORDER_PROCESS_DETAIL.DROP_SHIP_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, ORDER_PROCESS_DETAIL.DROP_SHIP_INDICATOR);
}

                    if(ORDER_PROCESS_DETAIL.PRICING_AGREEMENTS_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, ORDER_PROCESS_DETAIL.PRICING_AGREEMENTS_INDICATOR);
}

                    pstmt_tDBOutput_1.setBigDecimal(13, ORDER_PROCESS_DETAIL.QTY);

                    if(ORDER_PROCESS_DETAIL.SPLIT_CODE == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, ORDER_PROCESS_DETAIL.SPLIT_CODE);
}

                    pstmt_tDBOutput_1.setBigDecimal(15, ORDER_PROCESS_DETAIL.QTY_ALLOC_AGAINST_ON_HAND);

                    pstmt_tDBOutput_1.setBigDecimal(16, ORDER_PROCESS_DETAIL.QTY_ALLOC_AGAINST_SCH_RECEIPTS);

                    if(ORDER_PROCESS_DETAIL.ORDER_DETAIL_ALLOC == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, ORDER_PROCESS_DETAIL.ORDER_DETAIL_ALLOC);
}

                    if(ORDER_PROCESS_DETAIL.SHIP_OR_PICKUP_DATE != null) {
pstmt_tDBOutput_1.setTimestamp(18, new java.sql.Timestamp(ORDER_PROCESS_DETAIL.SHIP_OR_PICKUP_DATE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.TIMESTAMP);
}

                    pstmt_tDBOutput_1.setBigDecimal(19, ORDER_PROCESS_DETAIL.SHIPPED_QTY);

                    pstmt_tDBOutput_1.setBigDecimal(20, ORDER_PROCESS_DETAIL.ORIGINAL_ITEM_UNIT_PRICE);

                    pstmt_tDBOutput_1.setBigDecimal(21, ORDER_PROCESS_DETAIL.ORDER_DETAIL_EXTENDED_PRICE);

                    pstmt_tDBOutput_1.setBigDecimal(22, ORDER_PROCESS_DETAIL.SUGGESTED_PRICE);

                    if(ORDER_PROCESS_DETAIL.HAND_PRICE_FLAG == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, ORDER_PROCESS_DETAIL.HAND_PRICE_FLAG);
}

                    pstmt_tDBOutput_1.setBigDecimal(24, ORDER_PROCESS_DETAIL.ORDER_GUIDE_NO);

                    if(ORDER_PROCESS_DETAIL.ORDER_GUIDE_LINE_NO == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, ORDER_PROCESS_DETAIL.ORDER_GUIDE_LINE_NO);
}

                    if(ORDER_PROCESS_DETAIL.CUSTOMER_ITEM_NO == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, ORDER_PROCESS_DETAIL.CUSTOMER_ITEM_NO);
}

                    if(ORDER_PROCESS_DETAIL.SHIP_TO_CUST == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, ORDER_PROCESS_DETAIL.SHIP_TO_CUST);
}

                    if(ORDER_PROCESS_DETAIL.SHIPPING_ADDRESS_ID == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, ORDER_PROCESS_DETAIL.SHIPPING_ADDRESS_ID);
}

                    if(ORDER_PROCESS_DETAIL.CUSTOMER_CATEGORY_CODE == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, ORDER_PROCESS_DETAIL.CUSTOMER_CATEGORY_CODE);
}

                    pstmt_tDBOutput_1.setBigDecimal(30, ORDER_PROCESS_DETAIL.ROUTING_GROUP_CODE);

                    pstmt_tDBOutput_1.setBigDecimal(31, ORDER_PROCESS_DETAIL.REQUEST_NO);

                    if(ORDER_PROCESS_DETAIL.VENDOR_NO == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, ORDER_PROCESS_DETAIL.VENDOR_NO);
}

                    if(ORDER_PROCESS_DETAIL.VENDOR_PAY_FLAG == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, ORDER_PROCESS_DETAIL.VENDOR_PAY_FLAG);
}

                    if(ORDER_PROCESS_DETAIL.QA_TICKET_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, ORDER_PROCESS_DETAIL.QA_TICKET_INDICATOR);
}

                    if(ORDER_PROCESS_DETAIL.TOLERANCE_OVERRIDEN_FLAG == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, ORDER_PROCESS_DETAIL.TOLERANCE_OVERRIDEN_FLAG);
}

                    if(ORDER_PROCESS_DETAIL.ORIGINATOR_TRANSACTION == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, ORDER_PROCESS_DETAIL.ORIGINATOR_TRANSACTION);
}

                    if(ORDER_PROCESS_DETAIL.INVOICED_FLAG == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(37, ORDER_PROCESS_DETAIL.INVOICED_FLAG);
}

                    if(ORDER_PROCESS_DETAIL.ORDER_STATUS_CODE == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, ORDER_PROCESS_DETAIL.ORDER_STATUS_CODE);
}

                    if(ORDER_PROCESS_DETAIL.BUYER_NO == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, ORDER_PROCESS_DETAIL.BUYER_NO);
}

                    if(ORDER_PROCESS_DETAIL.PURCHASE_ORDER_NO == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, ORDER_PROCESS_DETAIL.PURCHASE_ORDER_NO);
}

                    pstmt_tDBOutput_1.setBigDecimal(41, ORDER_PROCESS_DETAIL.PO_LINE_NO);

                    if(ORDER_PROCESS_DETAIL.REMOTE_STOCK_ACCEPT_SUBS == null) {
pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(42, ORDER_PROCESS_DETAIL.REMOTE_STOCK_ACCEPT_SUBS);
}

                    pstmt_tDBOutput_1.setBigDecimal(43, ORDER_PROCESS_DETAIL.SUBSTITUTE_REFERENCE_LINE_NO);

                    if(ORDER_PROCESS_DETAIL.CUST_PREFERENCE_VENDOR == null) {
pstmt_tDBOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(44, ORDER_PROCESS_DETAIL.CUST_PREFERENCE_VENDOR);
}

                    if(ORDER_PROCESS_DETAIL.FREE_GOODS_FLAG == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, ORDER_PROCESS_DETAIL.FREE_GOODS_FLAG);
}

                    if(ORDER_PROCESS_DETAIL.COUNT_AS_DEMAND_FLAG == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(46, ORDER_PROCESS_DETAIL.COUNT_AS_DEMAND_FLAG);
}

                    pstmt_tDBOutput_1.setBigDecimal(47, ORDER_PROCESS_DETAIL.SUBFILE_REFERENCE_LINE_NO);

                    pstmt_tDBOutput_1.setBigDecimal(48, ORDER_PROCESS_DETAIL.BOOKING_ID);

                    pstmt_tDBOutput_1.setBigDecimal(49, ORDER_PROCESS_DETAIL.ORDER_GUIDE_VERSION_NO);

                    if(ORDER_PROCESS_DETAIL.FOODSHOW_PROMOTION_ID == null) {
pstmt_tDBOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(50, ORDER_PROCESS_DETAIL.FOODSHOW_PROMOTION_ID);
}

                    if(ORDER_PROCESS_DETAIL.SHIP_AVAILABLE_FLAG == null) {
pstmt_tDBOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(51, ORDER_PROCESS_DETAIL.SHIP_AVAILABLE_FLAG);
}

                    if(ORDER_PROCESS_DETAIL.ORDER_REASON_CODE == null) {
pstmt_tDBOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(52, ORDER_PROCESS_DETAIL.ORDER_REASON_CODE);
}

                    if(ORDER_PROCESS_DETAIL.ORDER_LINE_ERROR_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(53, ORDER_PROCESS_DETAIL.ORDER_LINE_ERROR_INDICATOR);
}

                    if(ORDER_PROCESS_DETAIL.ORIGINALLY_ORDERED_ITEM_NO == null) {
pstmt_tDBOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(54, ORDER_PROCESS_DETAIL.ORIGINALLY_ORDERED_ITEM_NO);
}

                    if(ORDER_PROCESS_DETAIL.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR == null) {
pstmt_tDBOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(55, ORDER_PROCESS_DETAIL.ORIGINAL_ITEM_CUST_PREFERENCE_VENDOR);
}

                    pstmt_tDBOutput_1.setBigDecimal(56, ORDER_PROCESS_DETAIL.REFERENCED_ORDER_NO);

                    if(ORDER_PROCESS_DETAIL.ORIG_ALT_COMPANION_LINE_INDICATOR == null) {
pstmt_tDBOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(57, ORDER_PROCESS_DETAIL.ORIG_ALT_COMPANION_LINE_INDICATOR);
}

                    if(ORDER_PROCESS_DETAIL.TEMPORARY_SUB_FLAG == null) {
pstmt_tDBOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(58, ORDER_PROCESS_DETAIL.TEMPORARY_SUB_FLAG);
}

                    pstmt_tDBOutput_1.setBigDecimal(59, ORDER_PROCESS_DETAIL.CONVERSION_FACTOR);

                    if(ORDER_PROCESS_DETAIL.ITEM_IDENTIFIER == null) {
pstmt_tDBOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(60, ORDER_PROCESS_DETAIL.ITEM_IDENTIFIER);
}

                    pstmt_tDBOutput_1.setBigDecimal(61, ORDER_PROCESS_DETAIL.TRANSACTION_QTY);

                    if(ORDER_PROCESS_DETAIL.DEMAND_STATUS == null) {
pstmt_tDBOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(62, ORDER_PROCESS_DETAIL.DEMAND_STATUS);
}

                    if(ORDER_PROCESS_DETAIL.STOCK_TYPE == null) {
pstmt_tDBOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(63, ORDER_PROCESS_DETAIL.STOCK_TYPE);
}

                    pstmt_tDBOutput_1.setBigDecimal(64, ORDER_PROCESS_DETAIL.REFERENCE_DETAIL_LINE_NO);

                    if(ORDER_PROCESS_DETAIL.SUBSTITUTION_REASON_CODE == null) {
pstmt_tDBOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(65, ORDER_PROCESS_DETAIL.SUBSTITUTION_REASON_CODE);
}

                    pstmt_tDBOutput_1.setBigDecimal(66, ORDER_PROCESS_DETAIL.SUBSTITUTION_QTY);

                    if(ORDER_PROCESS_DETAIL.PAYMENT_TERMS_POLICY == null) {
pstmt_tDBOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(67, ORDER_PROCESS_DETAIL.PAYMENT_TERMS_POLICY);
}

                    if(ORDER_PROCESS_DETAIL.PRICE_CALC_CODE == null) {
pstmt_tDBOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(68, ORDER_PROCESS_DETAIL.PRICE_CALC_CODE);
}

                    if(ORDER_PROCESS_DETAIL.SUBSTITUTE_REQUEST == null) {
pstmt_tDBOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(69, ORDER_PROCESS_DETAIL.SUBSTITUTE_REQUEST);
}

                    if(ORDER_PROCESS_DETAIL.PARTIAL_FILL_REQUEST == null) {
pstmt_tDBOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(70, ORDER_PROCESS_DETAIL.PARTIAL_FILL_REQUEST);
}

                    if(ORDER_PROCESS_DETAIL.MAJOR_CLASS == null) {
pstmt_tDBOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(71, ORDER_PROCESS_DETAIL.MAJOR_CLASS);
}

                    pstmt_tDBOutput_1.setBigDecimal(72, ORDER_PROCESS_DETAIL.SCHEDULED_RECEIPT_CUTOFF_TIME);

                    pstmt_tDBOutput_1.setBigDecimal(73, ORDER_PROCESS_DETAIL.QTY_DEMANDED);

                    if(ORDER_PROCESS_DETAIL.CREATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(74, new java.sql.Timestamp(ORDER_PROCESS_DETAIL.CREATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(74, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_DETAIL.CREATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(75, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(75, ORDER_PROCESS_DETAIL.CREATED_USER_ID);
}

                    if(ORDER_PROCESS_DETAIL.UPDATED_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(76, new java.sql.Timestamp(ORDER_PROCESS_DETAIL.UPDATED_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(76, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_DETAIL.UPDATED_USER_ID == null) {
pstmt_tDBOutput_1.setNull(77, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(77, ORDER_PROCESS_DETAIL.UPDATED_USER_ID);
}

                    pstmt_tDBOutput_1.setBoolean(78, ORDER_PROCESS_DETAIL.IS_DELETED);

                    if(ORDER_PROCESS_DETAIL.CREATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(79, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(79, ORDER_PROCESS_DETAIL.CREATED_ORIGIN);
}

                    if(ORDER_PROCESS_DETAIL.CREATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(80, new java.sql.Timestamp(ORDER_PROCESS_DETAIL.CREATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(80, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_DETAIL.UPDATED_ORIGIN == null) {
pstmt_tDBOutput_1.setNull(81, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(81, ORDER_PROCESS_DETAIL.UPDATED_ORIGIN);
}

                    if(ORDER_PROCESS_DETAIL.UPDATED_ORIGIN_TIMESTAMP != null) {
pstmt_tDBOutput_1.setTimestamp(82, new java.sql.Timestamp(ORDER_PROCESS_DETAIL.UPDATED_ORIGIN_TIMESTAMP.getTime()));
} else {
pstmt_tDBOutput_1.setNull(82, java.sql.Types.TIMESTAMP);
}

                    if(ORDER_PROCESS_DETAIL.B7PF_SVOP == null) {
pstmt_tDBOutput_1.setNull(83, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(83, ORDER_PROCESS_DETAIL.B7PF_SVOP);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
                try {
                		int countSum_tDBOutput_1 = 0;
                		    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
            	    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                batchSizeCounter_tDBOutput_1 = 0;
               }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
			    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
			    	String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					}else{
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}
			    	
			    	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
					
			    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
			    	
			    	System.err.println(errormessage_tDBOutput_1);
			    	
				}
            }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "ORDER_PROCESS_DETAIL"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tDBInput_1", end_Hash.get("tDBInput_1")-start_Hash.get("tDBInput_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());

tStatCatcher_1.addMessage("end","tMap_1", end_Hash.get("tMap_1")-start_Hash.get("tMap_1"));
tStatCatcher_1Process(globalMap);



/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
			}
			conn_tDBOutput_1.commit();
			if(rowsToCommitCount_tDBOutput_1 != 0){
				
				rowsToCommitCount_tDBOutput_1 = 0;
			}
			commitCounter_tDBOutput_1 = 0;
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ORDER_PROCESS_DETAIL");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "PROD";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Order_Process_Detail_Inbound Order_Process_Detail_InboundClass = new Order_Process_Detail_Inbound();

        int exitCode = Order_Process_Detail_InboundClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Order_Process_Detail_Inbound.class.getClassLoader().getResourceAsStream("sus_sli_etl/order_process_detail_inbound_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Order_Process_Detail_Inbound.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("opco", "id_String");
                        if(context.getStringValue("opco") == null) {
                            context.opco = null;
                        } else {
                            context.opco=(String) context.getProperty("opco");
                        }
                        context.setContextType("server", "id_String");
                        if(context.getStringValue("server") == null) {
                            context.server = null;
                        } else {
                            context.server=(String) context.getProperty("server");
                        }
                        context.setContextType("sopco", "id_String");
                        if(context.getStringValue("sopco") == null) {
                            context.sopco = null;
                        } else {
                            context.sopco=(String) context.getProperty("sopco");
                        }
                        context.setContextType("svop", "id_String");
                        if(context.getStringValue("svop") == null) {
                            context.svop = null;
                        } else {
                            context.svop=(String) context.getProperty("svop");
                        }
                        context.setContextType("GIM_AdditionalParams", "id_String");
                        if(context.getStringValue("GIM_AdditionalParams") == null) {
                            context.GIM_AdditionalParams = null;
                        } else {
                            context.GIM_AdditionalParams=(String) context.getProperty("GIM_AdditionalParams");
                        }
                        context.setContextType("GIM_Database", "id_String");
                        if(context.getStringValue("GIM_Database") == null) {
                            context.GIM_Database = null;
                        } else {
                            context.GIM_Database=(String) context.getProperty("GIM_Database");
                        }
                        context.setContextType("GIM_Login", "id_String");
                        if(context.getStringValue("GIM_Login") == null) {
                            context.GIM_Login = null;
                        } else {
                            context.GIM_Login=(String) context.getProperty("GIM_Login");
                        }
                        context.setContextType("GIM_Password", "id_Password");
                        if(context.getStringValue("GIM_Password") == null) {
                            context.GIM_Password = null;
                        } else {
                            String pwd_GIM_Password_value = context.getProperty("GIM_Password");
                            context.GIM_Password = null;
                            if(pwd_GIM_Password_value!=null) {
                                if(context_param.containsKey("GIM_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.GIM_Password = pwd_GIM_Password_value;
                                } else if (!pwd_GIM_Password_value.isEmpty()) {
                                    try {
                                        context.GIM_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_GIM_Password_value);
                                        context.put("GIM_Password",context.GIM_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("GIM_Port", "id_String");
                        if(context.getStringValue("GIM_Port") == null) {
                            context.GIM_Port = null;
                        } else {
                            context.GIM_Port=(String) context.getProperty("GIM_Port");
                        }
                        context.setContextType("GIM_Schema_Order_Processing", "id_String");
                        if(context.getStringValue("GIM_Schema_Order_Processing") == null) {
                            context.GIM_Schema_Order_Processing = null;
                        } else {
                            context.GIM_Schema_Order_Processing=(String) context.getProperty("GIM_Schema_Order_Processing");
                        }
                        context.setContextType("GIM_Server", "id_String");
                        if(context.getStringValue("GIM_Server") == null) {
                            context.GIM_Server = null;
                        } else {
                            context.GIM_Server=(String) context.getProperty("GIM_Server");
                        }
                        context.setContextType("SUS_Login", "id_String");
                        if(context.getStringValue("SUS_Login") == null) {
                            context.SUS_Login = null;
                        } else {
                            context.SUS_Login=(String) context.getProperty("SUS_Login");
                        }
                        context.setContextType("SUS_Password", "id_Password");
                        if(context.getStringValue("SUS_Password") == null) {
                            context.SUS_Password = null;
                        } else {
                            String pwd_SUS_Password_value = context.getProperty("SUS_Password");
                            context.SUS_Password = null;
                            if(pwd_SUS_Password_value!=null) {
                                if(context_param.containsKey("SUS_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SUS_Password = pwd_SUS_Password_value;
                                } else if (!pwd_SUS_Password_value.isEmpty()) {
                                    try {
                                        context.SUS_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SUS_Password_value);
                                        context.put("SUS_Password",context.SUS_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("SUS_Database", "id_String");
                        if(context.getStringValue("SUS_Database") == null) {
                            context.SUS_Database = null;
                        } else {
                            context.SUS_Database=(String) context.getProperty("SUS_Database");
                        }
                        context.setContextType("SUS_Server", "id_String");
                        if(context.getStringValue("SUS_Server") == null) {
                            context.SUS_Server = null;
                        } else {
                            context.SUS_Server=(String) context.getProperty("SUS_Server");
                        }
                        context.setContextType("SUS_Additional_Params", "id_String");
                        if(context.getStringValue("SUS_Additional_Params") == null) {
                            context.SUS_Additional_Params = null;
                        } else {
                            context.SUS_Additional_Params=(String) context.getProperty("SUS_Additional_Params");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("opco")) {
                context.opco = (String) parentContextMap.get("opco");
            }if (parentContextMap.containsKey("server")) {
                context.server = (String) parentContextMap.get("server");
            }if (parentContextMap.containsKey("sopco")) {
                context.sopco = (String) parentContextMap.get("sopco");
            }if (parentContextMap.containsKey("svop")) {
                context.svop = (String) parentContextMap.get("svop");
            }if (parentContextMap.containsKey("GIM_AdditionalParams")) {
                context.GIM_AdditionalParams = (String) parentContextMap.get("GIM_AdditionalParams");
            }if (parentContextMap.containsKey("GIM_Database")) {
                context.GIM_Database = (String) parentContextMap.get("GIM_Database");
            }if (parentContextMap.containsKey("GIM_Login")) {
                context.GIM_Login = (String) parentContextMap.get("GIM_Login");
            }if (parentContextMap.containsKey("GIM_Password")) {
                context.GIM_Password = (java.lang.String) parentContextMap.get("GIM_Password");
            }if (parentContextMap.containsKey("GIM_Port")) {
                context.GIM_Port = (String) parentContextMap.get("GIM_Port");
            }if (parentContextMap.containsKey("GIM_Schema_Order_Processing")) {
                context.GIM_Schema_Order_Processing = (String) parentContextMap.get("GIM_Schema_Order_Processing");
            }if (parentContextMap.containsKey("GIM_Server")) {
                context.GIM_Server = (String) parentContextMap.get("GIM_Server");
            }if (parentContextMap.containsKey("SUS_Login")) {
                context.SUS_Login = (String) parentContextMap.get("SUS_Login");
            }if (parentContextMap.containsKey("SUS_Password")) {
                context.SUS_Password = (java.lang.String) parentContextMap.get("SUS_Password");
            }if (parentContextMap.containsKey("SUS_Database")) {
                context.SUS_Database = (String) parentContextMap.get("SUS_Database");
            }if (parentContextMap.containsKey("SUS_Server")) {
                context.SUS_Server = (String) parentContextMap.get("SUS_Server");
            }if (parentContextMap.containsKey("SUS_Additional_Params")) {
                context.SUS_Additional_Params = (String) parentContextMap.get("SUS_Additional_Params");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("GIM_Password");
			parametersToEncrypt.add("SUS_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();
        tStatCatcher_1.addMessage("begin");


this.globalResumeTicket = true;//to run tPreJob




        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }

this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tJava_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

e_tJava_1.printStackTrace();

}catch (java.lang.Error e_tJava_1) {
globalMap.put("tJava_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tJava_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Order_Process_Detail_Inbound");
        }
        tStatCatcher_1.addMessage(status==""?"end":status, (end-startTime));
        try {
            tStatCatcher_1Process(globalMap);
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     318392 characters generated by Talend Open Studio for Data Integration 
 *     on the August 14, 2022 at 10:32:27 PM IST
 ************************************************************************************************/